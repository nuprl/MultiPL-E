language: swift
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_vuz_z5l.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    guard strings.count > 0 else {\n\
    \        return strings\n    }\n    return strings.filter {\n        $0.hasPrefix(prefix)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824604
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered: [String] = []\n \
    \   for s in strings {\n        if s.startsWith(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9k8195yc.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter { (string)\
    \ -> Bool in\n        let stringPrefix = string.prefix(with: prefix)\n       \
    \ return stringPrefix != nil\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1uyot4th.swift:9:41: error: extraneous argument label 'with:' in\
    \ call\n        let stringPrefix = string.prefix(with: prefix)\n             \
    \                           ^~~~~~~\n                                        \
    \ \n/tmp/tmp1uyot4th.swift:9:48: error: cannot convert value of type 'String'\
    \ to expected argument type 'Int'\n        let stringPrefix = string.prefix(with:\
    \ prefix)\n                                               ^\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ s in strings {\n        if s.startsWith(prefix) {\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: prefix.count)]\n            break\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmplychucsk.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmplychucsk.swift:11:53:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ prefix.count)]\n                                                    ^\n/tmp/tmplychucsk.swift:11:32:\
    \ error: cannot assign value of type 'ArraySlice<String>' to type '[String]'\n\
    \            filtered = filtered[..<filtered.index(s.startIndex, offsetBy: prefix.count)]\n\
    \                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty(prefix) {\n        return strings\n\
    \    }\n    if strings.Contains(prefix) {\n        return strings.filter {\n \
    \           $0.startsWith(prefix)\n        }\n    }\n    return strings\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmppmoewa8y.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmppmoewa8y.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmppmoewa8y.swift:14:16: error: value of type\
    \ '[String]' has no member 'Contains'\n    if strings.Contains(prefix) {\n   \
    \    ~~~~~~~ ^~~~~~~~\n/tmp/tmppmoewa8y.swift:16:16: error: value of type 'String'\
    \ has no member 'startsWith'\n            $0.startsWith(prefix)\n            ~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.Contains(prefix) {\n        return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n    }\n    return strings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzqmw56y5.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpzqmw56y5.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpzqmw56y5.swift:14:16: error: value of type\
    \ '[String]' has no member 'Contains'\n    if strings.Contains(prefix) {\n   \
    \    ~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.First().startsWith(prefix) {\n        return strings.Skip(1).map(String)\n\
    \    }\n    return strings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvrae9_e_.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpvrae9_e_.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpvrae9_e_.swift:14:16: error: value of type\
    \ '[String]' has no member 'First'\n    if strings.First().startsWith(prefix)\
    \ {\n       ~~~~~~~ ^~~~~\n/tmp/tmpvrae9_e_.swift:15:24: error: value of type\
    \ '[String]' has no member 'Skip'\n        return strings.Skip(1).map(String)\n\
    \               ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_by_prefix(strings: []\
    \ as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824522
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix_helper(strings,\
    \ prefix, false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqmm5hdq6.swift:8:12: error: cannot find 'filter_by_prefix_helper'\
    \ in scope\n    return filter_by_prefix_helper(strings, prefix, false)\n     \
    \      ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix_internal(strings,\
    \ prefix, false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0qo27k9a.swift:8:12: error: cannot find 'filter_by_prefix_internal'\
    \ in scope\n    return filter_by_prefix_internal(strings, prefix, false)\n   \
    \        ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    var filtered = strings\n    for i := 0; i < len(strings);\
    \ i++ {\n        if strings.HasPrefix(strings[i], prefix) {\n            filtered\
    \ = append(filtered, strings[i])\n        }\n    }\n    return filtered\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpw2m8g2au.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(strings); i++ {\n           ^\n            <#type#>\n/tmp/tmpw2m8g2au.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(strings);\
    \ i++ {\n           ^\n/tmp/tmpw2m8g2au.swift:12:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(strings); i++ {\n    \
    \       ^\n/tmp/tmpw2m8g2au.swift:8:16: error: value of type '[String]' has no\
    \ member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix_helper(strings,\
    \ prefix, false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqmm5hdq6.swift:8:12: error: cannot find 'filter_by_prefix_helper'\
    \ in scope\n    return filter_by_prefix_helper(strings, prefix, false)\n     \
    \      ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.Contains(prefix) {\n        return strings.filter({ $0.startsWith(prefix)\
    \ })\n    }\n    return strings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9mz042n1.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp9mz042n1.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp9mz042n1.swift:14:16: error: value of type\
    \ '[String]' has no member 'Contains'\n    if strings.Contains(prefix) {\n   \
    \    ~~~~~~~ ^~~~~~~~\n/tmp/tmp9mz042n1.swift:15:36: error: value of type 'String'\
    \ has no member 'startsWith'\n        return strings.filter({ $0.startsWith(prefix)\
    \ })\n                                ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix_internal(strings,\
    \ prefix, false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0qo27k9a.swift:8:12: error: cannot find 'filter_by_prefix_internal'\
    \ in scope\n    return filter_by_prefix_internal(strings, prefix, false)\n   \
    \        ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.Count() < 2 {\n        return strings\n    }\n    if strings.First().hasPrefix(prefix)\
    \ {\n        return strings.Substring(1)\n    }\n    return strings\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmptaoi2u8h.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmptaoi2u8h.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmptaoi2u8h.swift:14:16: error: value of type\
    \ '[String]' has no member 'Count'\n    if strings.Count() < 2 {\n       ~~~~~~~\
    \ ^~~~~\n/tmp/tmptaoi2u8h.swift:17:16: error: value of type '[String]' has no\
    \ member 'First'\n    if strings.First().hasPrefix(prefix) {\n       ~~~~~~~ ^~~~~\n\
    /tmp/tmptaoi2u8h.swift:18:24: error: value of type '[String]' has no member 'Substring'\n\
    \        return strings.Substring(1)\n               ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered: [String] = []\n \
    \   for s in strings {\n        if s.startsWith(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9k8195yc.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered: [String] = []\n \
    \   for s in strings {\n        if s.startsWith(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9k8195yc.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ s in strings {\n        if s.startsWith(prefix) {\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: prefix.count)]\n            break\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmplychucsk.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmplychucsk.swift:11:53:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ prefix.count)]\n                                                    ^\n/tmp/tmplychucsk.swift:11:32:\
    \ error: cannot assign value of type 'ArraySlice<String>' to type '[String]'\n\
    \            filtered = filtered[..<filtered.index(s.startIndex, offsetBy: prefix.count)]\n\
    \                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix_helper(strings,\
    \ prefix, false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqmm5hdq6.swift:8:12: error: cannot find 'filter_by_prefix_helper'\
    \ in scope\n    return filter_by_prefix_helper(strings, prefix, false)\n     \
    \      ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_by_prefix(strings: []\
    \ as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824522
- exit_code: -4
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter {\n     \
    \   prefix ~= $0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: Exception
  stderr: 'tmpdwrd4vlg/tmpdwrd4vlg.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae74e332c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae74e029b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae74e029988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae74e0287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdwrd4vlg                        0x000055e535244872 <unavailable> + 6258

    5    libc.so.6                          0x00002ae74e51e460 __libc_start_main +
    245

    6    tmpdwrd4vlg                        0x000055e5352441e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered: [String] = []\n \
    \   for s in strings {\n        if s.startsWith(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9k8195yc.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix_internal(strings,\
    \ prefix, false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0qo27k9a.swift:8:12: error: cannot find 'filter_by_prefix_internal'\
    \ in scope\n    return filter_by_prefix_internal(strings, prefix, false)\n   \
    \        ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty(prefix) {\n        return strings\n\
    \    }\n    var filtered = [String]()\n    for s in strings {\n        if s.startsWith(prefix)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvlq_wp_1.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpvlq_wp_1.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpvlq_wp_1.swift:16:14: error: value of type\
    \ 'String' has no member 'startsWith'\n        if s.startsWith(prefix) {\n   \
    \        ~ ^~~~~~~~~~\n/tmp/tmpvlq_wp_1.swift:17:24: error: cannot find 'append'\
    \ in scope\n            filtered = append(filtered, s)\n                     \
    \  ^~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered: [String] = []\n \
    \   for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmphtx7r8lt.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmphtx7r8lt.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_by_prefix(strings: []\
    \ as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824522
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    strings.filter({ $0.hasPrefix(prefix)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_by_prefix(strings: []\
    \ as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.HasPrefix(prefix) {\n        return strings.filter({\
    \ $0.hasPrefix(prefix) })\n    }\n    return strings\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp59t29u1l.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp59t29u1l.swift:11:16:\
    \ error: value of type '[String]' has no member 'HasPrefix'\n    if strings.HasPrefix(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.HasPrefix(prefix) {\n        return strings.filter({\
    \ $0.hasPrefix(prefix) })\n    }\n    return strings\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp59t29u1l.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp59t29u1l.swift:11:16:\
    \ error: value of type '[String]' has no member 'HasPrefix'\n    if strings.HasPrefix(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix_helper(strings,\
    \ prefix, false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqmm5hdq6.swift:8:12: error: cannot find 'filter_by_prefix_helper'\
    \ in scope\n    return filter_by_prefix_helper(strings, prefix, false)\n     \
    \      ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix_helper(strings,\
    \ prefix, false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqmm5hdq6.swift:8:12: error: cannot find 'filter_by_prefix_helper'\
    \ in scope\n    return filter_by_prefix_helper(strings, prefix, false)\n     \
    \      ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered: [String] = []\n \
    \   for s in strings {\n        if s.startsWith(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9k8195yc.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix_helper(strings,\
    \ prefix, false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqmm5hdq6.swift:8:12: error: cannot find 'filter_by_prefix_helper'\
    \ in scope\n    return filter_by_prefix_helper(strings, prefix, false)\n     \
    \      ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix_helper(strings,\
    \ prefix, false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqmm5hdq6.swift:8:12: error: cannot find 'filter_by_prefix_helper'\
    \ in scope\n    return filter_by_prefix_helper(strings, prefix, false)\n     \
    \      ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix_internal(strings,\
    \ prefix, false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0qo27k9a.swift:8:12: error: cannot find 'filter_by_prefix_internal'\
    \ in scope\n    return filter_by_prefix_internal(strings, prefix, false)\n   \
    \        ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.First().hasPrefix(prefix) {\n        return strings.Skip(1).map(String::init)\n\
    \    }\n    return strings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcelzzglp.swift:15:43: error: expected expression in list of expressions\n\
    \        return strings.Skip(1).map(String::init)\n                          \
    \                ^\n/tmp/tmpcelzzglp.swift:15:48: error: initializers may only\
    \ be declared within a type\n        return strings.Skip(1).map(String::init)\n\
    \                                               ^\n/tmp/tmpcelzzglp.swift:15:48:\
    \ error: expected '(' for initializer parameters\n        return strings.Skip(1).map(String::init)\n\
    \                                               ^\n/tmp/tmpcelzzglp.swift:8:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpcelzzglp.swift:11:16: error: value of type\
    \ '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~\
    \ ^~~~~~~\n/tmp/tmpcelzzglp.swift:14:16: error: value of type '[String]' has no\
    \ member 'First'\n    if strings.First().hasPrefix(prefix) {\n       ~~~~~~~ ^~~~~\n\
    /tmp/tmpcelzzglp.swift:15:24: error: value of type '[String]' has no member 'Skip'\n\
    \        return strings.Skip(1).map(String::init)\n               ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered: [String] = []\n \
    \   for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmphtx7r8lt.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmphtx7r8lt.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered: [String] = []\n \
    \   for s in strings {\n        if s.startsWith(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9k8195yc.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_by_prefix(strings: []\
    \ as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824522
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter { (string:\
    \ String) -> Bool in\n        let prefixLength = string.characters.count\n   \
    \     let prefixIndex = string.characters.index(of: prefix)\n        return prefixIndex\
    \ != nil && prefixIndex < prefixLength\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == []\
    \ as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"\
    xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmplpz7_bhk.swift:10:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        let prefixIndex\
    \ = string.characters.index(of: prefix)\n                                    \
    \                  ^\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ s in strings {\n        if s.startsWith(prefix) {\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: prefix.length)]\n            break\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5tn1lkl_.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmp5tn1lkl_.swift:11:53:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ prefix.length)]\n                                                    ^\n/tmp/tmp5tn1lkl_.swift:11:82:\
    \ error: value of type 'String' has no member 'length'\n            filtered =\
    \ filtered[..<filtered.index(s.startIndex, offsetBy: prefix.length)]\n       \
    \                                                                   ~~~~~~ ^~~~~~\n\
    /tmp/tmp5tn1lkl_.swift:11:32: error: cannot assign value of type 'ArraySlice<String>'\
    \ to type '[String]'\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: prefix.length)]\n                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.Contains(prefix) {\n        return strings.filter {\n \
    \           strings.HasPrefix($0, prefix)\n        }\n    }\n    return strings\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5ntsg5dn.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp5ntsg5dn.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp5ntsg5dn.swift:14:16: error: value of type\
    \ '[String]' has no member 'Contains'\n    if strings.Contains(prefix) {\n   \
    \    ~~~~~~~ ^~~~~~~~\n/tmp/tmp5ntsg5dn.swift:16:21: error: value of type '[String]'\
    \ has no member 'HasPrefix'\n            strings.HasPrefix($0, prefix)\n     \
    \       ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.Contains(prefix) {\n        return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n    }\n    return strings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzqmw56y5.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpzqmw56y5.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpzqmw56y5.swift:14:16: error: value of type\
    \ '[String]' has no member 'Contains'\n    if strings.Contains(prefix) {\n   \
    \    ~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty(prefix) {\n        return strings\n\
    \    }\n    if strings.Contains(prefix) {\n        return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n    }\n    return strings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7x5q79yj.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp7x5q79yj.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp7x5q79yj.swift:14:16: error: value of type\
    \ '[String]' has no member 'Contains'\n    if strings.Contains(prefix) {\n   \
    \    ~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_by_prefix(strings: []\
    \ as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824522
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty(prefix) {\n        return strings\n\
    \    }\n    if strings.Contains(prefix) {\n        return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n    }\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgc6_j8up.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpgc6_j8up.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpgc6_j8up.swift:14:16: error: value of type\
    \ '[String]' has no member 'Contains'\n    if strings.Contains(prefix) {\n   \
    \    ~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_by_prefix(strings: []\
    \ as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824522
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.First().hasPrefix(prefix) {\n        return strings\n \
    \   }\n    return strings.filter({ $0.hasPrefix(prefix) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwu69fdnc.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwu69fdnc.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwu69fdnc.swift:14:16: error: value of type\
    \ '[String]' has no member 'First'\n    if strings.First().hasPrefix(prefix) {\n\
    \       ~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_by_prefix(strings: []\
    \ as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824522
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix_helper(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc4r01ao4.swift:8:12: error: cannot find 'filter_by_prefix_helper'\
    \ in scope\n    return filter_by_prefix_helper(strings, prefix, true)\n      \
    \     ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ string in strings {\n        if string.hasPrefix(prefix) {\n            filtered\
    \ = filtered.filter({$0 != string})\n        }\n    }\n    return filtered\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: Exception
  stderr: 'tmph75b_dc5/tmph75b_dc5.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3550781c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3550478b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3550478988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35504777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph75b_dc5                        0x0000557c9b7eca32 <unavailable> + 6706

    5    libc.so.6                          0x00002b355096d460 __libc_start_main +
    245

    6    tmph75b_dc5                        0x0000557c9b7ec3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.Contains(prefix) {\n        return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n    }\n    return strings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzqmw56y5.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpzqmw56y5.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpzqmw56y5.swift:14:16: error: value of type\
    \ '[String]' has no member 'Contains'\n    if strings.Contains(prefix) {\n   \
    \    ~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ string in strings {\n        if string.hasPrefix(prefix) {\n            filtered\
    \ = filtered.filter({$0 != string})\n        }\n    }\n    return filtered\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: Exception
  stderr: 'tmph75b_dc5/tmph75b_dc5.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3550781c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3550478b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3550478988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35504777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph75b_dc5                        0x0000557c9b7eca32 <unavailable> + 6706

    5    libc.so.6                          0x00002b355096d460 __libc_start_main +
    245

    6    tmph75b_dc5                        0x0000557c9b7ec3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ s in strings {\n        if s.startsWith(prefix) {\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: 1)]\n            break\n        }\n    }\n    return filtered\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmptpzexfij.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmptpzexfij.swift:11:53:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ 1)]\n                                                    ^\n/tmp/tmptpzexfij.swift:11:32:\
    \ error: cannot assign value of type 'ArraySlice<String>' to type '[String]'\n\
    \            filtered = filtered[..<filtered.index(s.startIndex, offsetBy: 1)]\n\
    \                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.Contains(prefix) {\n        return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n    }\n    return strings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzqmw56y5.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpzqmw56y5.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpzqmw56y5.swift:14:16: error: value of type\
    \ '[String]' has no member 'Contains'\n    if strings.Contains(prefix) {\n   \
    \    ~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n  return strings.filter {\n    $0.hasPrefix(prefix)\n\
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_by_prefix(strings: []\
    \ as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter { (string:\
    \ String) -> Bool in\n        let prefixLength = string.characters.count\n   \
    \     let prefixLength = prefixLength < prefix.characters.count ? prefixLength\
    \ : prefix.characters.count\n        return string.hasPrefix(prefix) && string.characters.count\
    \ >= prefixLength\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3u9r9tys.swift:10:13: error: invalid redeclaration of 'prefixLength'\n\
    \        let prefixLength = prefixLength < prefix.characters.count ? prefixLength\
    \ : prefix.characters.count\n            ^\n/tmp/tmp3u9r9tys.swift:9:13: note:\
    \ 'prefixLength' previously declared here\n        let prefixLength = string.characters.count\n\
    \            ^\n/tmp/tmp3u9r9tys.swift:9:35: error: 'characters' is unavailable:\
    \ Please use String directly\n        let prefixLength = string.characters.count\n\
    \                                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3u9r9tys.swift:10:50: error: 'characters' is unavailable:\
    \ Please use String directly\n        let prefixLength = prefixLength < prefix.characters.count\
    \ ? prefixLength : prefix.characters.count\n                                 \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp3u9r9tys.swift:10:91: error: 'characters' is unavailable: Please\
    \ use String directly\n        let prefixLength = prefixLength < prefix.characters.count\
    \ ? prefixLength : prefix.characters.count\n                                 \
    \                                                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp3u9r9tys.swift:11:51: error: 'characters'\
    \ is unavailable: Please use String directly\n        return string.hasPrefix(prefix)\
    \ && string.characters.count >= prefixLength\n                               \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ s in strings {\n        if s.startsWith(prefix) {\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: 1)]\n            break\n        }\n    }\n    return filtered\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmptpzexfij.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmptpzexfij.swift:11:53:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ 1)]\n                                                    ^\n/tmp/tmptpzexfij.swift:11:32:\
    \ error: cannot assign value of type 'ArraySlice<String>' to type '[String]'\n\
    \            filtered = filtered[..<filtered.index(s.startIndex, offsetBy: 1)]\n\
    \                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0udn7goa.swift:164:129: error: expected '}' at end of brace statement\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n    \
    \                                                                            \
    \                                                ^\n/tmp/tmp0udn7goa.swift:7:70:\
    \ note: to match this opening '{'\nfunc filter_by_prefix(strings: [String], prefix:\
    \ String) -> [String] {\n                                                    \
    \                 ^\n/tmp/tmp0udn7goa.swift:8:16: error: value of type '[String]'\
    \ has no member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n\
    /tmp/tmp0udn7goa.swift:11:16: error: value of type '[String]' has no member 'IsEmpty'\n\
    \    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp0udn7goa.swift:14:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp0udn7goa.swift:17:16: error: value of type\
    \ '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~\
    \ ^~~~~~~\n/tmp/tmp0udn7goa.swift:20:16: error: value of type '[String]' has no\
    \ member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp0udn7goa.swift:23:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp0udn7goa.swift:26:16: error: value of type\
    \ '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~\
    \ ^~~~~~~\n/tmp/tmp0udn7goa.swift:29:16: error: value of type '[String]' has no\
    \ member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp0udn7goa.swift:32:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp0udn7goa.swift:35:16: error: value of type\
    \ '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~\
    \ ^~~~~~~\n/tmp/tmp0udn7goa.swift:38:16: error: value of type '[String]' has no\
    \ member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp0udn7"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.Contains(prefix) {\n        return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n    }\n    return strings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzqmw56y5.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpzqmw56y5.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpzqmw56y5.swift:14:16: error: value of type\
    \ '[String]' has no member 'Contains'\n    if strings.Contains(prefix) {\n   \
    \    ~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix_internal(strings,\
    \ prefix, false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0qo27k9a.swift:8:12: error: cannot find 'filter_by_prefix_internal'\
    \ in scope\n    return filter_by_prefix_internal(strings, prefix, false)\n   \
    \        ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_vuz_z5l.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.First().hasPrefix(prefix) {\n        return strings.Skip(1).filter({\
    \ $0.hasPrefix(prefix) })\n    }\n    return strings\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9bydcerr.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp9bydcerr.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp9bydcerr.swift:14:16: error: value of type\
    \ '[String]' has no member 'First'\n    if strings.First().hasPrefix(prefix) {\n\
    \       ~~~~~~~ ^~~~~\n/tmp/tmp9bydcerr.swift:15:24: error: value of type '[String]'\
    \ has no member 'Skip'\n        return strings.Skip(1).filter({ $0.hasPrefix(prefix)\
    \ })\n               ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered: [String] = []\n \
    \   for s in strings {\n        if s.startsWith(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9k8195yc.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    guard strings.count > 0 else {\n\
    \        return strings\n    }\n    return strings.filter {\n        $0.hasPrefix(prefix)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824604
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ s in strings {\n        if s.startsWith(prefix) {\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: 1)]\n            break\n        }\n    }\n    return filtered\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmptpzexfij.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmptpzexfij.swift:11:53:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ 1)]\n                                                    ^\n/tmp/tmptpzexfij.swift:11:32:\
    \ error: cannot assign value of type 'ArraySlice<String>' to type '[String]'\n\
    \            filtered = filtered[..<filtered.index(s.startIndex, offsetBy: 1)]\n\
    \                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ s in strings {\n        if s.startsWith(prefix) {\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: 1)]\n            break\n        }\n    }\n    return filtered\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmptpzexfij.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmptpzexfij.swift:11:53:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ 1)]\n                                                    ^\n/tmp/tmptpzexfij.swift:11:32:\
    \ error: cannot assign value of type 'ArraySlice<String>' to type '[String]'\n\
    \            filtered = filtered[..<filtered.index(s.startIndex, offsetBy: 1)]\n\
    \                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty(prefix) {\n        return strings\n\
    \    }\n    if strings.Contains(prefix) {\n        return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n    }\n    return strings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7x5q79yj.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp7x5q79yj.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp7x5q79yj.swift:14:16: error: value of type\
    \ '[String]' has no member 'Contains'\n    if strings.Contains(prefix) {\n   \
    \    ~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: -4
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    guard strings.count > 0 else {\n\
    \        return strings\n    }\n    guard strings.count > 1 else {\n        return\
    \ strings\n    }\n    guard strings.count <= prefix.count else {\n        return\
    \ strings\n    }\n    var filtered: [String] = []\n    for string in strings {\n\
    \        if string.hasPrefix(prefix) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: Exception
  stderr: 'tmpxqmpa_dj/tmpxqmpa_dj.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a979dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a976d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a976d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a976d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxqmpa_dj                        0x000055f5d88d1a12 <unavailable> + 6674

    5    libc.so.6                          0x00002b3a97bc7460 __libc_start_main +
    245

    6    tmpxqmpa_dj                        0x000055f5d88d1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978925
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty(prefix) {\n        return strings\n\
    \    }\n    return strings.filter({ $0.hasPrefix(prefix) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4ny8gd1s.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp4ny8gd1s.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter {\n     \
    \   $0.hasPrefix(prefix)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978925
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n  return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_by_prefix(strings: []\
    \ as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter { (string:\
    \ String) -> Bool in\n        let prefixLength = string.characters.count\n   \
    \     return string.hasPrefix(prefix) && string.characters.count >= prefixLength\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmph1o8dxpw.swift:9:35: error: 'characters' is unavailable: Please\
    \ use String directly\n        let prefixLength = string.characters.count\n  \
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmph1o8dxpw.swift:10:51: error: 'characters' is unavailable:\
    \ Please use String directly\n        return string.hasPrefix(prefix) && string.characters.count\
    \ >= prefixLength\n                                                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty(prefix) {\n        return strings\n\
    \    }\n    if strings.First().hasPrefix(prefix) {\n        return strings.Skip(1).map(String::init)\n\
    \    }\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpw5dtxvxk.swift:15:43: error: expected expression in list of expressions\n\
    \        return strings.Skip(1).map(String::init)\n                          \
    \                ^\n/tmp/tmpw5dtxvxk.swift:15:48: error: initializers may only\
    \ be declared within a type\n        return strings.Skip(1).map(String::init)\n\
    \                                               ^\n/tmp/tmpw5dtxvxk.swift:15:48:\
    \ error: expected '(' for initializer parameters\n        return strings.Skip(1).map(String::init)\n\
    \                                               ^\n/tmp/tmpw5dtxvxk.swift:8:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpw5dtxvxk.swift:11:16: error: value of type\
    \ '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty(prefix) {\n     \
    \  ~~~~~~~ ^~~~~~~\n/tmp/tmpw5dtxvxk.swift:14:16: error: value of type '[String]'\
    \ has no member 'First'\n    if strings.First().hasPrefix(prefix) {\n       ~~~~~~~\
    \ ^~~~~\n/tmp/tmpw5dtxvxk.swift:15:24: error: value of type '[String]' has no\
    \ member 'Skip'\n        return strings.Skip(1).map(String::init)\n          \
    \     ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: -4
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    guard strings.count > 0 else {\n\
    \        return strings\n    }\n    guard strings.count > 1 else {\n        return\
    \ strings\n    }\n    guard strings.first != prefix else {\n        return strings\n\
    \    }\n    return strings.filter {\n        $0.hasPrefix(prefix)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: Exception
  stderr: 'tmp3tqsf8ua/tmp3tqsf8ua.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7dc481c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7dc178b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7dc178988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7dc1777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3tqsf8ua                        0x00005653422a79c2 <unavailable> + 6594

    5    libc.so.6                          0x00002ba7dc66d460 __libc_start_main +
    245

    6    tmp3tqsf8ua                        0x00005653422a7339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659978925
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_vuz_z5l.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty(prefix) {\n        return strings\n\
    \    }\n    if strings.HasPrefix(strings[0], prefix) {\n        return strings.Subslice(1)\n\
    \    }\n    return strings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpw50vrsmj.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpw50vrsmj.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpw50vrsmj.swift:14:16: error: value of type\
    \ '[String]' has no member 'HasPrefix'\n    if strings.HasPrefix(strings[0], prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~~~\n/tmp/tmpw50vrsmj.swift:15:24: error: value of type\
    \ '[String]' has no member 'Subslice'\n        return strings.Subslice(1)\n  \
    \             ~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: -4
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ string in strings {\n        if string.hasPrefix(prefix) {\n            filtered\
    \ = filtered.filter{ $0 != string }\n        }\n    }\n    return filtered\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: Exception
  stderr: 'tmp2jqge9rx/tmp2jqge9rx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba59afaac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba59aca1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba59aca1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba59aca07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2jqge9rx                        0x000055b049895a32 <unavailable> + 6706

    5    libc.so.6                          0x00002ba59b196460 __libc_start_main +
    245

    6    tmp2jqge9rx                        0x000055b0498953a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659978925
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix_helper(strings,\
    \ prefix, false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqmm5hdq6.swift:8:12: error: cannot find 'filter_by_prefix_helper'\
    \ in scope\n    return filter_by_prefix_helper(strings, prefix, false)\n     \
    \      ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter {\n     \
    \   strings.startsWith(prefix)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmptd18qzr9.swift:8:27: error: contextual type for closure argument\
    \ list expects 1 argument, which cannot be implicitly ignored\n    return strings.filter\
    \ {\n                          ^\n                           _ in \n/tmp/tmptd18qzr9.swift:9:17:\
    \ error: value of type '[String]' has no member 'startsWith'\n        strings.startsWith(prefix)\n\
    \        ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.First().hasPrefix(prefix) {\n        return strings.Skip(1).map(String::init)\n\
    \    }\n    return strings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcelzzglp.swift:15:43: error: expected expression in list of expressions\n\
    \        return strings.Skip(1).map(String::init)\n                          \
    \                ^\n/tmp/tmpcelzzglp.swift:15:48: error: initializers may only\
    \ be declared within a type\n        return strings.Skip(1).map(String::init)\n\
    \                                               ^\n/tmp/tmpcelzzglp.swift:15:48:\
    \ error: expected '(' for initializer parameters\n        return strings.Skip(1).map(String::init)\n\
    \                                               ^\n/tmp/tmpcelzzglp.swift:8:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpcelzzglp.swift:11:16: error: value of type\
    \ '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~\
    \ ^~~~~~~\n/tmp/tmpcelzzglp.swift:14:16: error: value of type '[String]' has no\
    \ member 'First'\n    if strings.First().hasPrefix(prefix) {\n       ~~~~~~~ ^~~~~\n\
    /tmp/tmpcelzzglp.swift:15:24: error: value of type '[String]' has no member 'Skip'\n\
    \        return strings.Skip(1).map(String::init)\n               ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty(prefix) {\n        return strings\n\
    \    }\n    if strings.Contains(prefix) {\n        return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n    }\n    return strings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7x5q79yj.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp7x5q79yj.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp7x5q79yj.swift:14:16: error: value of type\
    \ '[String]' has no member 'Contains'\n    if strings.Contains(prefix) {\n   \
    \    ~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n\n    if strings.HasPrefix(prefix) {\n        return\
    \ strings.filter({ $0.hasPrefix(prefix) })\n    }\n\n    return strings\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp954t403n.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp954t403n.swift:12:16:\
    \ error: value of type '[String]' has no member 'HasPrefix'\n    if strings.HasPrefix(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_by_prefix(strings: []\
    \ as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824522
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered: [String] = []\n \
    \   for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmphtx7r8lt.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmphtx7r8lt.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix_helper(strings,\
    \ prefix, false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqmm5hdq6.swift:8:12: error: cannot find 'filter_by_prefix_helper'\
    \ in scope\n    return filter_by_prefix_helper(strings, prefix, false)\n     \
    \      ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.HasPrefix(prefix, \"\") {\n        return\
    \ strings.filter({ $0.hasPrefix(prefix) })\n    }\n    return strings\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4ofu4qe5.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp4ofu4qe5.swift:11:16:\
    \ error: value of type '[String]' has no member 'HasPrefix'\n    if strings.HasPrefix(prefix,\
    \ \"\") {\n       ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ s in strings {\n        if s.startsWith(prefix) {\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: 1)]\n            break\n        }\n    }\n    return filtered\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmptpzexfij.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmptpzexfij.swift:11:53:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ 1)]\n                                                    ^\n/tmp/tmptpzexfij.swift:11:32:\
    \ error: cannot assign value of type 'ArraySlice<String>' to type '[String]'\n\
    \            filtered = filtered[..<filtered.index(s.startIndex, offsetBy: 1)]\n\
    \                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.First().startsWith(prefix) {\n        return strings.Skip(1).map(String)\n\
    \    }\n    return strings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvrae9_e_.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpvrae9_e_.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpvrae9_e_.swift:14:16: error: value of type\
    \ '[String]' has no member 'First'\n    if strings.First().startsWith(prefix)\
    \ {\n       ~~~~~~~ ^~~~~\n/tmp/tmpvrae9_e_.swift:15:24: error: value of type\
    \ '[String]' has no member 'Skip'\n        return strings.Skip(1).map(String)\n\
    \               ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter { (string)\
    \ -> Bool in\n        let prefixLength = string.characters.count\n        return\
    \ string.hasPrefix(prefix) && string.characters.count >= prefixLength\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp148ib8v3.swift:9:35: error: 'characters' is unavailable: Please\
    \ use String directly\n        let prefixLength = string.characters.count\n  \
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp148ib8v3.swift:10:51: error: 'characters' is unavailable:\
    \ Please use String directly\n        return string.hasPrefix(prefix) && string.characters.count\
    \ >= prefixLength\n                                                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_by_prefix(strings: []\
    \ as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824522
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ s in strings {\n        if s.startsWith(prefix) {\n            filtered = filtered[..<filtered.index(s)]\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq3t7vobp.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpq3t7vobp.swift:11:51:\
    \ error: missing argument label 'of:' in call\n            filtered = filtered[..<filtered.index(s)]\n\
    \                                                  ^\n                       \
    \                           of: \n/tmp/tmpq3t7vobp.swift:11:32: error: cannot\
    \ assign value of type 'ArraySlice<String>' to type '[String]'\n            filtered\
    \ = filtered[..<filtered.index(s)]\n                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq3t7vobp.swift:11:45: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n            filtered = filtered[..<filtered.index(s)]\n       \
    \                                     ^\n/tmp/tmpq3t7vobp.swift:11:45: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         filtered = filtered[..<filtered.index(s)]\n                        \
    \                    ^\n                                   (                 ??\
    \ <#default value#>)\n/tmp/tmpq3t7vobp.swift:11:45: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n            filtered\
    \ = filtered[..<filtered.index(s)]\n                                         \
    \   ^\n                                                    !\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.HasPrefix(prefix) {\n        return strings.filter({\
    \ $0.hasPrefix(prefix) })\n    }\n    return strings\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp59t29u1l.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp59t29u1l.swift:11:16:\
    \ error: value of type '[String]' has no member 'HasPrefix'\n    if strings.HasPrefix(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter {\n     \
    \   strings.startsWith(prefix)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmptd18qzr9.swift:8:27: error: contextual type for closure argument\
    \ list expects 1 argument, which cannot be implicitly ignored\n    return strings.filter\
    \ {\n                          ^\n                           _ in \n/tmp/tmptd18qzr9.swift:9:17:\
    \ error: value of type '[String]' has no member 'startsWith'\n        strings.startsWith(prefix)\n\
    \        ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty(prefix) {\n        return strings\n\
    \    }\n    var filtered = strings\n    for i := 0; i < len(strings); i++ {\n\
    \        if strings.HasPrefix(strings[i], prefix) {\n            filtered = append(filtered,\
    \ strings[i])\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp61tv_3md.swift:15:12: error: expected type\n    for i := 0; i <\
    \ len(strings); i++ {\n           ^\n            <#type#>\n/tmp/tmp61tv_3md.swift:15:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(strings);\
    \ i++ {\n           ^\n/tmp/tmp61tv_3md.swift:15:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(strings); i++ {\n    \
    \       ^\n/tmp/tmp61tv_3md.swift:8:16: error: value of type '[String]' has no\
    \ member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp61tv_3md.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix_helper(strings,\
    \ prefix, false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqmm5hdq6.swift:8:12: error: cannot find 'filter_by_prefix_helper'\
    \ in scope\n    return filter_by_prefix_helper(strings, prefix, false)\n     \
    \      ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    guard strings.count > 0 else {\n\
    \        return strings\n    }\n    var filtered: [String] = []\n    for string\
    \ in strings {\n        if string.hasPrefix(prefix) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978925
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_by_prefix(strings: []\
    \ as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824522
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.First().hasPrefix(prefix) {\n        return strings.Skip(1).take(strings.Length()\
    \ - prefix.Length()).collect()\n    }\n    return strings\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmph88c1yvq.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmph88c1yvq.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmph88c1yvq.swift:14:16: error: value of type\
    \ '[String]' has no member 'First'\n    if strings.First().hasPrefix(prefix) {\n\
    \       ~~~~~~~ ^~~~~\n/tmp/tmph88c1yvq.swift:15:24: error: value of type '[String]'\
    \ has no member 'Skip'\n        return strings.Skip(1).take(strings.Length() -\
    \ prefix.Length()).collect()\n               ~~~~~~~ ^~~~\n/tmp/tmph88c1yvq.swift:15:45:\
    \ error: value of type '[String]' has no member 'Length'\n        return strings.Skip(1).take(strings.Length()\
    \ - prefix.Length()).collect()\n                                    ~~~~~~~ ^~~~~~\n\
    /tmp/tmph88c1yvq.swift:15:63: error: value of type 'String' has no member 'Length'\n\
    \        return strings.Skip(1).take(strings.Length() - prefix.Length()).collect()\n\
    \                                                       ~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ s in strings {\n        if s.startsWith(prefix) {\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: prefix.length)]\n        }\n    }\n    return filtered\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwriygui6.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpwriygui6.swift:11:53:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ prefix.length)]\n                                                    ^\n/tmp/tmpwriygui6.swift:11:82:\
    \ error: value of type 'String' has no member 'length'\n            filtered =\
    \ filtered[..<filtered.index(s.startIndex, offsetBy: prefix.length)]\n       \
    \                                                                   ~~~~~~ ^~~~~~\n\
    /tmp/tmpwriygui6.swift:11:32: error: cannot assign value of type 'ArraySlice<String>'\
    \ to type '[String]'\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: prefix.length)]\n                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvi7raa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpbcvi7raa.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgni8gfzy.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824603
