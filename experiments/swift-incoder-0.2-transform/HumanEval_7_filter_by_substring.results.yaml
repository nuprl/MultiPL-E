language: swift
name: HumanEval_7_filter_by_substring
results:
- exit_code: -4
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered.filter({$0 != string})\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: Exception
  stderr: 'tmp8f98w8a_/tmp8f98w8a_.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0137713c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b013740ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b013740a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01374097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8f98w8a_                        0x000055ed92790a77 <unavailable> + 6775

    5    libc.so.6                          0x00002b01378ff460 __libc_start_main +
    245

    6    tmp8f98w8a_                        0x000055ed927903f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        if let index = strings.firstIndex(of: $0)\
    \ {\n            return index != nil && index!.contains(substring)\n        }\
    \ else {\n            return false\n        }\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1hd5if0e.swift:10:43: error: value of type 'Array<String>.Index'\
    \ (aka 'Int') has no member 'contains'\n            return index != nil && index!.contains(substring)\n\
    \                                   ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: -4
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered.filter({$0 != string})\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: Exception
  stderr: 'tmp8f98w8a_/tmp8f98w8a_.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0137713c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b013740ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b013740a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01374097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8f98w8a_                        0x000055ed92790a77 <unavailable> + 6775

    5    libc.so.6                          0x00002b01378ff460 __libc_start_main +
    245

    6    tmp8f98w8a_                        0x000055ed927903f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg0kbqepu.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdw__wfmg.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: -4
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered.filter { $0 != string }\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: Exception
  stderr: 'tmpdo0x0jnt/tmpdo0x0jnt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac44355bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac443252b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac443252988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4432517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdo0x0jnt                        0x000055629de78a77 <unavailable> + 6775

    5    libc.so.6                          0x00002ac443747460 __libc_start_main +
    245

    6    tmpdo0x0jnt                        0x000055629de783f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdw__wfmg.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdw__wfmg.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7xlm3_6k.swift:11:22: error: assigning a variable to itself\n \
    \           filtered = filtered\n            ~~~~~~~~ ^ ~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdw__wfmg.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        strings.contains(substring)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpksorzhf3.swift:8:27: error: contextual type for closure argument\
    \ list expects 1 argument, which cannot be implicitly ignored\n    return strings.filter\
    \ {\n                          ^\n                           _ in \n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filteredStrings: [String] = []\n    for string in strings {\n       \
    \ if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg0kbqepu.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return filter_by_substring(strings, substring: substring, options: .CaseInsensitive)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmprg1198cp.swift:8:73: error: extra argument 'options' in call\n\
    \    return filter_by_substring(strings, substring: substring, options: .CaseInsensitive)\n\
    \                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n\
    /tmp/tmprg1198cp.swift:8:73: error: cannot infer contextual base in reference\
    \ to member 'CaseInsensitive'\n    return filter_by_substring(strings, substring:\
    \ substring, options: .CaseInsensitive)\n                                    \
    \                                   ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { (string: String) -> Bool in\n        let index =\
    \ string.index(of: substring)\n        return index != nil\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv9dfc0g0.swift:9:38: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        let index\
    \ = string.index(of: substring)\n                                     ^\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        if let index = strings.firstIndex(of: $0)\
    \ {\n            return index != nil && index!.contains(substring)\n        }\
    \ else {\n            return false\n        }\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1hd5if0e.swift:10:43: error: value of type 'Array<String>.Index'\
    \ (aka 'Int') has no member 'contains'\n            return index != nil && index!.contains(substring)\n\
    \                                   ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        strings.contains(substring)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpksorzhf3.swift:8:27: error: contextual type for closure argument\
    \ list expects 1 argument, which cannot be implicitly ignored\n    return strings.filter\
    \ {\n                          ^\n                           _ in \n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpi7nkxzdj.swift:11:22: error: assigning a variable to itself\n \
    \           filtered = filtered\n            ~~~~~~~~ ^ ~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ s.distance(from: substring))..<filtered.index(s.endIndex, offsetBy: -s.distance(from:\
    \ substring))]\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3wek1o1s.swift:11:146: error: no exact matches in call to instance\
    \ method 'distance'\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: s.distance(from: substring))..<filtered.index(s.endIndex, offsetBy:\
    \ -s.distance(from: substring))]\n                                           \
    \                                                                            \
    \                          ^\n/tmp/tmp3wek1o1s.swift:11:146: note: found candidate\
    \ with type '(String.Index, String.Index) -> Int'\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: s.distance(from: substring))..<filtered.index(s.endIndex, offsetBy:\
    \ -s.distance(from: substring))]\n                                           \
    \                                                                            \
    \                          ^\n/tmp/tmp3wek1o1s.swift:11:101: error: missing argument\
    \ for parameter 'to' in call\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: s.distance(from: substring))..<filtered.index(s.endIndex, offsetBy:\
    \ -s.distance(from: substring))]\n                                           \
    \                                                         ^\n                \
    \                                                                            \
    \        , to: <#String.Index#>\nSwift.String:11:17: note: 'distance(from:to:)'\
    \ declared here\n    public func distance(from start: String.Index, to end: String.Index)\
    \ -> Int\n                ^\n/tmp/tmp3wek1o1s.swift:11:92: error: cannot convert\
    \ value of type 'String' to expected argument type 'String.Index'\n          \
    \  filtered = filtered[..<filtered.index(s.startIndex, offsetBy: s.distance(from:\
    \ substring))..<filtered.index(s.endIndex, offsetBy: -s.distance(from: substring))]\n\
    \                                                                            \
    \               ^\n/tmp/tmp3wek1o1s.swift:11:53: error: cannot convert value of\
    \ type 'String.Index' to expected argument type 'Int'\n            filtered =\
    \ filtered[..<filtered.index(s.startIndex, offsetBy: s.dist"
  stdout: ''
  timestamp: 1660013544
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return filter_by_substring(strings.filter({ $0.contains(substring) }), substring)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwtd_ggu5.swift:8:31: error: missing argument labels 'strings:substring:'\
    \ in call\n    return filter_by_substring(strings.filter({ $0.contains(substring)\
    \ }), substring)\n                              ^\n                          \
    \     strings:                                    substring: \n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { (string: String) -> Bool in\n        let index =\
    \ string.index(of: substring)\n        return index != nil\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv9dfc0g0.swift:9:38: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        let index\
    \ = string.index(of: substring)\n                                     ^\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return filter_by_substring(strings: strings, substring: substring, options:\
    \ .caseInsensitive)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8gevh7of.swift:8:82: error: extra argument 'options' in call\n\
    \    return filter_by_substring(strings: strings, substring: substring, options:\
    \ .caseInsensitive)\n                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n\
    /tmp/tmp8gevh7of.swift:8:82: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n    return filter_by_substring(strings: strings,\
    \ substring: substring, options: .caseInsensitive)\n                         \
    \                                                       ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { (string) -> Bool in\n        let index = string.range(of:\
    \ substring)\n        return index != nil\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_jfa4j1e.swift:9:28: error: value of type 'String' has no member\
    \ 'range'\n        let index = string.range(of: substring)\n                 \
    \   ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg0kbqepu.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg0kbqepu.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        contains($0, substring)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxlmze69a.swift:9:9: error: cannot find 'contains' in scope\n  \
    \      contains($0, substring)\n        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: -4
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered.filter { $0 != string }\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: Exception
  stderr: 'tmpdo0x0jnt/tmpdo0x0jnt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac44355bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac443252b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac443252988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4432517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdo0x0jnt                        0x000055629de78a77 <unavailable> + 6775

    5    libc.so.6                          0x00002ac443747460 __libc_start_main +
    245

    6    tmpdo0x0jnt                        0x000055629de783f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        if let index = strings.firstIndex(of: $0)\
    \ {\n            return index != nil && index!.contains(substring)\n        }\
    \ else {\n            return false\n        }\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1hd5if0e.swift:10:43: error: value of type 'Array<String>.Index'\
    \ (aka 'Int') has no member 'contains'\n            return index != nil && index!.contains(substring)\n\
    \                                   ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg0kbqepu.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filteredStrings = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filteredStrings.remove(at: filteredStrings.index(of: string))\n\
    \        }\n    }\n    return filteredStrings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0e37mavg.swift:11:56: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n            filteredStrings.remove(at: filteredStrings.index(of:\
    \ string))\n                                                       ^\n/tmp/tmp0e37mavg.swift:11:56:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            filteredStrings.remove(at: filteredStrings.index(of: string))\n\
    \                                                       ^\n                  \
    \                                                       ?? <#default value#>\n\
    /tmp/tmp0e37mavg.swift:11:56: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            filteredStrings.remove(at:\
    \ filteredStrings.index(of: string))\n                                       \
    \                ^\n                                                         \
    \               !\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg0kbqepu.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return filter_by_substring(strings, substring, true)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmptored9m6.swift:8:52: error: extra argument in call\n    return\
    \ filter_by_substring(strings, substring, true)\n                            \
    \  ~~~~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg0kbqepu.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filteredStrings: [String] = []\n    for string in strings {\n       \
    \ if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        if let index = strings.firstIndex(of: $0)\
    \ {\n            return index != nil && index!.contains(substring)\n        }\
    \ else {\n            return false\n        }\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1hd5if0e.swift:10:43: error: value of type 'Array<String>.Index'\
    \ (aka 'Int') has no member 'contains'\n            return index != nil && index!.contains(substring)\n\
    \                                   ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filteredStrings = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filteredStrings.remove(at: filteredStrings.index(of: string))\n\
    \        }\n    }\n    return filteredStrings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0e37mavg.swift:11:56: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n            filteredStrings.remove(at: filteredStrings.index(of:\
    \ string))\n                                                       ^\n/tmp/tmp0e37mavg.swift:11:56:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            filteredStrings.remove(at: filteredStrings.index(of: string))\n\
    \                                                       ^\n                  \
    \                                                       ?? <#default value#>\n\
    /tmp/tmp0e37mavg.swift:11:56: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            filteredStrings.remove(at:\
    \ filteredStrings.index(of: string))\n                                       \
    \                ^\n                                                         \
    \               !\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered[..<filtered.index(of: substring)..<filtered.index(of:\
    \ substring, offsetBy: 1)]\n            break\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp170brxn8.swift:11:77: error: no exact matches in call to instance\
    \ method 'index'\n            filtered = filtered[..<filtered.index(of: substring)..<filtered.index(of:\
    \ substring, offsetBy: 1)]\n                                                 \
    \                           ^\n/tmp/tmp170brxn8.swift:11:77: note: found candidate\
    \ with type '(Int, Int) -> Int'\n            filtered = filtered[..<filtered.index(of:\
    \ substring)..<filtered.index(of: substring, offsetBy: 1)]\n                 \
    \                                                           ^\n/tmp/tmp170brxn8.swift:11:33:\
    \ error: cannot convert value of type 'PartialRangeUpTo<Array<String>.Index>'\
    \ (aka 'PartialRangeUpTo<Int>') to expected argument type 'Int'\n            filtered\
    \ = filtered[..<filtered.index(of: substring)..<filtered.index(of: substring,\
    \ offsetBy: 1)]\n                                ^\n/tmp/tmp170brxn8.swift:11:32:\
    \ error: cannot assign value of type 'ArraySlice<String>' to type '[String]'\n\
    \            filtered = filtered[..<filtered.index(of: substring)..<filtered.index(of:\
    \ substring, offsetBy: 1)]\n                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp170brxn8.swift:11:45: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n            filtered = filtered[..<filtered.index(of: substring)..<filtered.index(of:\
    \ substring, offsetBy: 1)]\n                                            ^\n/tmp/tmp170brxn8.swift:11:45:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            filtered = filtered[..<filtered.index(of: substring)..<filtered.index(of:\
    \ substring, offsetBy: 1)]\n                                            ^\n  \
    \                                 (                             ?? <#default value#>)\n\
    /tmp/tmp170brxn8.swift:11:45: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            filtered = filtered[..<filtered.index(o"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpi7nkxzdj.swift:11:22: error: assigning a variable to itself\n \
    \           filtered = filtered\n            ~~~~~~~~ ^ ~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg0kbqepu.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filteredStrings: [String] = []\n    for string in strings {\n       \
    \ if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdw__wfmg.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpa_4_dnge.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpa_4_dnge.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpi7nkxzdj.swift:11:22: error: assigning a variable to itself\n \
    \           filtered = filtered\n            ~~~~~~~~ ^ ~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7xlm3_6k.swift:11:22: error: assigning a variable to itself\n \
    \           filtered = filtered\n            ~~~~~~~~ ^ ~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdw__wfmg.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ s.distance(from: substring))..<filtered.index(s.endIndex, offsetBy: -s.distance(from:\
    \ substring))]\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3wek1o1s.swift:11:146: error: no exact matches in call to instance\
    \ method 'distance'\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: s.distance(from: substring))..<filtered.index(s.endIndex, offsetBy:\
    \ -s.distance(from: substring))]\n                                           \
    \                                                                            \
    \                          ^\n/tmp/tmp3wek1o1s.swift:11:146: note: found candidate\
    \ with type '(String.Index, String.Index) -> Int'\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: s.distance(from: substring))..<filtered.index(s.endIndex, offsetBy:\
    \ -s.distance(from: substring))]\n                                           \
    \                                                                            \
    \                          ^\n/tmp/tmp3wek1o1s.swift:11:101: error: missing argument\
    \ for parameter 'to' in call\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: s.distance(from: substring))..<filtered.index(s.endIndex, offsetBy:\
    \ -s.distance(from: substring))]\n                                           \
    \                                                         ^\n                \
    \                                                                            \
    \        , to: <#String.Index#>\nSwift.String:11:17: note: 'distance(from:to:)'\
    \ declared here\n    public func distance(from start: String.Index, to end: String.Index)\
    \ -> Int\n                ^\n/tmp/tmp3wek1o1s.swift:11:92: error: cannot convert\
    \ value of type 'String' to expected argument type 'String.Index'\n          \
    \  filtered = filtered[..<filtered.index(s.startIndex, offsetBy: s.distance(from:\
    \ substring))..<filtered.index(s.endIndex, offsetBy: -s.distance(from: substring))]\n\
    \                                                                            \
    \               ^\n/tmp/tmp3wek1o1s.swift:11:53: error: cannot convert value of\
    \ type 'String.Index' to expected argument type 'Int'\n            filtered =\
    \ filtered[..<filtered.index(s.startIndex, offsetBy: s.dist"
  stdout: ''
  timestamp: 1660013544
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg0kbqepu.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7xlm3_6k.swift:11:22: error: assigning a variable to itself\n \
    \           filtered = filtered\n            ~~~~~~~~ ^ ~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: -4
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered.filter({$0 != string})\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: Exception
  stderr: 'tmp8f98w8a_/tmp8f98w8a_.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0137713c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b013740ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b013740a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01374097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8f98w8a_                        0x000055ed92790a77 <unavailable> + 6775

    5    libc.so.6                          0x00002b01378ff460 __libc_start_main +
    245

    6    tmp8f98w8a_                        0x000055ed927903f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013543
- exit_code: -4
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered.filter({$0 != string})\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: Exception
  stderr: 'tmp8f98w8a_/tmp8f98w8a_.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0137713c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b013740ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b013740a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01374097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8f98w8a_                        0x000055ed92790a77 <unavailable> + 6775

    5    libc.so.6                          0x00002b01378ff460 __libc_start_main +
    245

    6    tmp8f98w8a_                        0x000055ed927903f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        strings.contains(substring)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpksorzhf3.swift:8:27: error: contextual type for closure argument\
    \ list expects 1 argument, which cannot be implicitly ignored\n    return strings.filter\
    \ {\n                          ^\n                           _ in \n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filteredStrings: [String] = []\n    for string in strings {\n       \
    \ if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filteredStrings = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filteredStrings.remove(at: filteredStrings.index(of: string))\n\
    \        }\n    }\n    return filteredStrings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0e37mavg.swift:11:56: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n            filteredStrings.remove(at: filteredStrings.index(of:\
    \ string))\n                                                       ^\n/tmp/tmp0e37mavg.swift:11:56:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            filteredStrings.remove(at: filteredStrings.index(of: string))\n\
    \                                                       ^\n                  \
    \                                                       ?? <#default value#>\n\
    /tmp/tmp0e37mavg.swift:11:56: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            filteredStrings.remove(at:\
    \ filteredStrings.index(of: string))\n                                       \
    \                ^\n                                                         \
    \               !\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdw__wfmg.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg0kbqepu.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { (string: String) -> Bool in\n        let index =\
    \ string.index(of: substring)\n        return index != nil\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv9dfc0g0.swift:9:38: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        let index\
    \ = string.index(of: substring)\n                                     ^\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filteredStrings = [String]()\n    for string in strings {\n        if\
    \ string.contains(substring) {\n            filteredStrings.append(string)\n \
    \       }\n    }\n    return filteredStrings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013544
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpi7nkxzdj.swift:11:22: error: assigning a variable to itself\n \
    \           filtered = filtered\n            ~~~~~~~~ ^ ~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { (string) -> Bool in\n        let index = string.range(of:\
    \ substring)\n        return index != nil\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_jfa4j1e.swift:9:28: error: value of type 'String' has no member\
    \ 'range'\n        let index = string.range(of: substring)\n                 \
    \   ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg0kbqepu.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpi7nkxzdj.swift:11:22: error: assigning a variable to itself\n \
    \           filtered = filtered\n            ~~~~~~~~ ^ ~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return filter_by_substring(strings.filter({ $0.contains(substring) }))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdvwr2se5.swift:8:32: error: missing argument label 'strings:' in\
    \ call\n    return filter_by_substring(strings.filter({ $0.contains(substring)\
    \ }))\n                               ^\n                               strings:\
    \ \n/tmp/tmpdvwr2se5.swift:8:74: error: missing argument for parameter 'substring'\
    \ in call\n    return filter_by_substring(strings.filter({ $0.contains(substring)\
    \ }))\n                                                                      \
    \   ^\n                                                                      \
    \   , substring: <#String#>\n/tmp/tmpdvwr2se5.swift:7:6: note: 'filter_by_substring(strings:substring:)'\
    \ declared here\nfunc filter_by_substring(strings: [String], substring: String)\
    \ -> [String] {\n     ^\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { (string) -> Bool in\n        let index = string.range(of:\
    \ substring)\n        return index != nil\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_jfa4j1e.swift:9:28: error: value of type 'String' has no member\
    \ 'range'\n        let index = string.range(of: substring)\n                 \
    \   ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: -4
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered.filter({$0 != string})\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: Exception
  stderr: 'tmp8f98w8a_/tmp8f98w8a_.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0137713c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b013740ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b013740a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01374097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8f98w8a_                        0x000055ed92790a77 <unavailable> + 6775

    5    libc.so.6                          0x00002b01378ff460 __libc_start_main +
    245

    6    tmp8f98w8a_                        0x000055ed927903f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpa_4_dnge.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg0kbqepu.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg0kbqepu.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filteredStrings: [String] = []\n    for string in strings {\n       \
    \ if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: -4
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        guard let index = strings.firstIndex(of:\
    \ $0) else {\n            return false\n        }\n        return index != 0 &&\
    \ index == strings.index(of: substring)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: Exception
  stderr: 'tmpov_n_vif/tmpov_n_vif.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29b10b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29b0dabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29b0dab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29b0daa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpov_n_vif                        0x000055a990f1c937 <unavailable> + 6455

    5    libc.so.6                          0x00002b29b12a0460 __libc_start_main +
    245

    6    tmpov_n_vif                        0x000055a990f1c2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013544
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: -4
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered.filter({$0 != string})\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: Exception
  stderr: 'tmp8f98w8a_/tmp8f98w8a_.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0137713c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b013740ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b013740a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01374097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8f98w8a_                        0x000055ed92790a77 <unavailable> + 6775

    5    libc.so.6                          0x00002b01378ff460 __libc_start_main +
    245

    6    tmp8f98w8a_                        0x000055ed927903f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7xlm3_6k.swift:11:22: error: assigning a variable to itself\n \
    \           filtered = filtered\n            ~~~~~~~~ ^ ~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpa_4_dnge.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            filtered =\
    \ filtered.filter({$0 != s})\n        }\n    }\n    return filtered\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9olhw8v9.swift:11:22: error: assigning a variable to itself\n \
    \           filtered = filtered\n            ~~~~~~~~ ^ ~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpa_4_dnge.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filteredStrings: [String] = []\n    for string in strings {\n       \
    \ if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ s.distance(from: substring))..<filtered.index(s.endIndex, offsetBy: -s.distance(from:\
    \ substring))]\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3wek1o1s.swift:11:146: error: no exact matches in call to instance\
    \ method 'distance'\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: s.distance(from: substring))..<filtered.index(s.endIndex, offsetBy:\
    \ -s.distance(from: substring))]\n                                           \
    \                                                                            \
    \                          ^\n/tmp/tmp3wek1o1s.swift:11:146: note: found candidate\
    \ with type '(String.Index, String.Index) -> Int'\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: s.distance(from: substring))..<filtered.index(s.endIndex, offsetBy:\
    \ -s.distance(from: substring))]\n                                           \
    \                                                                            \
    \                          ^\n/tmp/tmp3wek1o1s.swift:11:101: error: missing argument\
    \ for parameter 'to' in call\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: s.distance(from: substring))..<filtered.index(s.endIndex, offsetBy:\
    \ -s.distance(from: substring))]\n                                           \
    \                                                         ^\n                \
    \                                                                            \
    \        , to: <#String.Index#>\nSwift.String:11:17: note: 'distance(from:to:)'\
    \ declared here\n    public func distance(from start: String.Index, to end: String.Index)\
    \ -> Int\n                ^\n/tmp/tmp3wek1o1s.swift:11:92: error: cannot convert\
    \ value of type 'String' to expected argument type 'String.Index'\n          \
    \  filtered = filtered[..<filtered.index(s.startIndex, offsetBy: s.distance(from:\
    \ substring))..<filtered.index(s.endIndex, offsetBy: -s.distance(from: substring))]\n\
    \                                                                            \
    \               ^\n/tmp/tmp3wek1o1s.swift:11:53: error: cannot convert value of\
    \ type 'String.Index' to expected argument type 'Int'\n            filtered =\
    \ filtered[..<filtered.index(s.startIndex, offsetBy: s.dist"
  stdout: ''
  timestamp: 1660013544
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered[..<filtered.index(of: string)] // remove\
    \ all occurrences of substring\n        }\n    }\n    return filtered\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqu7mm9ui.swift:11:32: error: cannot assign value of type 'ArraySlice<String>'\
    \ to type '[String]'\n            filtered = filtered[..<filtered.index(of: string)]\
    \ // remove all occurrences of substring\n                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqu7mm9ui.swift:11:45: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n            filtered = filtered[..<filtered.index(of: string)]\
    \ // remove all occurrences of substring\n                                   \
    \         ^\n/tmp/tmpqu7mm9ui.swift:11:45: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n            filtered = filtered[..<filtered.index(of:\
    \ string)] // remove all occurrences of substring\n                          \
    \                  ^\n                                   (                   \
    \       ?? <#default value#>)\n/tmp/tmpqu7mm9ui.swift:11:45: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    filtered = filtered[..<filtered.index(of: string)] // remove all occurrences\
    \ of substring\n                                            ^\n              \
    \                                               !\n"
  stdout: ''
  timestamp: 1660013544
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ s.distance(from: substring))] + filtered[filtered.index(s.endIndex, offsetBy:\
    \ s.distance(from: substring))..<filtered.count]\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj0mujwjx.swift:11:155: error: no exact matches in call to instance\
    \ method 'distance'\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: s.distance(from: substring))] + filtered[filtered.index(s.endIndex,\
    \ offsetBy: s.distance(from: substring))..<filtered.count]\n                 \
    \                                                                            \
    \                                                             ^\n/tmp/tmpj0mujwjx.swift:11:155:\
    \ note: found candidate with type '(String.Index, String.Index) -> Int'\n    \
    \        filtered = filtered[..<filtered.index(s.startIndex, offsetBy: s.distance(from:\
    \ substring))] + filtered[filtered.index(s.endIndex, offsetBy: s.distance(from:\
    \ substring))..<filtered.count]\n                                            \
    \                                                                            \
    \                                  ^\n/tmp/tmpj0mujwjx.swift:11:77: error: no\
    \ exact matches in call to instance method 'distance'\n            filtered =\
    \ filtered[..<filtered.index(s.startIndex, offsetBy: s.distance(from: substring))]\
    \ + filtered[filtered.index(s.endIndex, offsetBy: s.distance(from: substring))..<filtered.count]\n\
    \                                                                            ^\n\
    /tmp/tmpj0mujwjx.swift:11:77: note: found candidate with type '(String.Index,\
    \ String.Index) -> Int'\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: s.distance(from: substring))] + filtered[filtered.index(s.endIndex,\
    \ offsetBy: s.distance(from: substring))..<filtered.count]\n                 \
    \                                                           ^\n/tmp/tmpj0mujwjx.swift:11:53:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ s.distance(from: substring))] + filtered[filtered.index(s.endIndex, offsetBy:\
    \ s.distance(from: substring))..<filtered.count]\n                           \
    \                         ^\n/tmp/tmpj0mujwjx.swift:11:133: e"
  stdout: ''
  timestamp: 1660013560
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg0kbqepu.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg0kbqepu.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg0kbqepu.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        guard let index = string.range(of: substring)\
    \ else { return false }\n        return index != nil\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq6qpm4s8.swift:9:27: error: cannot find 'string' in scope\n   \
    \     guard let index = string.range(of: substring) else { return false }\n  \
    \                        ^~~~~~\n"
  stdout: ''
  timestamp: 1660013544
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdw__wfmg.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filteredStrings: [String] = []\n    for string in strings {\n       \
    \ if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { (string: String) -> Bool in\n        let index =\
    \ string.index(of: substring)\n        return index != nil\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv9dfc0g0.swift:9:38: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        let index\
    \ = string.index(of: substring)\n                                     ^\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg0kbqepu.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpi7nkxzdj.swift:11:22: error: assigning a variable to itself\n \
    \           filtered = filtered\n            ~~~~~~~~ ^ ~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg0kbqepu.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdw__wfmg.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7xlm3_6k.swift:11:22: error: assigning a variable to itself\n \
    \           filtered = filtered\n            ~~~~~~~~ ^ ~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpa_4_dnge.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdw__wfmg.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        contains($0, substring)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxlmze69a.swift:9:9: error: cannot find 'contains' in scope\n  \
    \      contains($0, substring)\n        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdw__wfmg.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filteredStrings: [String] = []\n    for string in strings {\n       \
    \ if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7xlm3_6k.swift:11:22: error: assigning a variable to itself\n \
    \           filtered = filtered\n            ~~~~~~~~ ^ ~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return filter_by_substrings(strings, substring, true)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpx76vsygt.swift:8:12: error: cannot find 'filter_by_substrings'\
    \ in scope\n    return filter_by_substrings(strings, substring, true)\n      \
    \     ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpi7nkxzdj.swift:11:22: error: assigning a variable to itself\n \
    \           filtered = filtered\n            ~~~~~~~~ ^ ~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpa_4_dnge.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: -4
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered.filter({$0 != string})\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: Exception
  stderr: 'tmp8f98w8a_/tmp8f98w8a_.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0137713c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b013740ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b013740a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01374097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8f98w8a_                        0x000055ed92790a77 <unavailable> + 6775

    5    libc.so.6                          0x00002b01378ff460 __libc_start_main +
    245

    6    tmp8f98w8a_                        0x000055ed927903f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg0kbqepu.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg0kbqepu.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { (string: String) -> Bool in\n        let index =\
    \ string.index(of: substring)\n        return index != nil\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv9dfc0g0.swift:9:38: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        let index\
    \ = string.index(of: substring)\n                                     ^\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg0kbqepu.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filteredStrings: [String] = []\n    for string in strings {\n       \
    \ if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdw__wfmg.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdw__wfmg.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ s.distance(from: substring, to: s.endIndex))]\n            break\n        }\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzt_covrf.swift:11:53: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: s.distance(from: substring, to: s.endIndex))]\n                  \
    \                                  ^\n/tmp/tmpzt_covrf.swift:11:92: error: cannot\
    \ convert value of type 'String' to expected argument type 'String.Index'\n  \
    \          filtered = filtered[..<filtered.index(s.startIndex, offsetBy: s.distance(from:\
    \ substring, to: s.endIndex))]\n                                             \
    \                                              ^\n/tmp/tmpzt_covrf.swift:11:32:\
    \ error: cannot assign value of type 'ArraySlice<String>' to type '[String]'\n\
    \            filtered = filtered[..<filtered.index(s.startIndex, offsetBy: s.distance(from:\
    \ substring, to: s.endIndex))]\n                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013544
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfe_yft2n.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013543
