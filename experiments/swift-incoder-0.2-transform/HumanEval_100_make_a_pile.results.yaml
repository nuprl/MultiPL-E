language: swift
name: HumanEval_100_make_a_pile
results:
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while n > 0 {\n \
    \       pile.append(n)\n        n -= n % 2 == 0 ? 2 : 3\n        level++\n   \
    \ }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp8ojjrt29.swift:17:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= n % 2 == 0 ? 2 : 3\n        ~\
    \ ^\n/tmp/tmp8ojjrt29.swift:18:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    var level = 0\n    while stones.count\
    \ < n {\n        if n % 2 == 0 {\n            stones.append(stones.last! + 2)\n\
    \        } else {\n            stones.append(stones.last! + 1)\n        }\n  \
    \      n /= 2\n        level += 1\n    }\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp51tchnp_.swift:21:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var count = 0\n    for _ in 0..<n {\n\
    \        pile.append(count)\n        count += 1\n    }\n    if n % 2 == 0 {\n\
    \        pile = pile.append(pile[pile.count - 1] + 2)\n    } else {\n        pile\
    \ = pile.append(pile[pile.count - 1] + 1)\n    }\n    return pile\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpvarcvbcf.swift:20:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(pile[pile.count - 1] + 2)\n       \
    \        ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvarcvbcf.swift:22:21:\
    \ error: cannot assign value of type '()' to type '[Int]'\n        pile = pile.append(pile[pile.count\
    \ - 1] + 1)\n               ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824617
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 1 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n        n = n / 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp19_s3ofe.swift:21:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            stones += 2\n  \
    \      } else {\n            stones += 1\n        }\n        level++\n       \
    \ result.append(stones)\n        n = stones\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpc5yzg63h.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n/tmp/tmpc5yzg63h.swift:24:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = stones\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 1...n {\n        pile = pile.append(n % 2 == 0 ? n : n +\
    \ 2)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpck9ru5iu.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmpck9ru5iu.swift:18:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(n % 2 == 0 ? n : n + 2)\n              \
    \ ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    if n % 2 == 1 {\n        stones.append(n)\n\
    \    }\n    for _ in 1..(n/2) {\n        stones.append(stones.last! + 2)\n   \
    \ }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpkshkeziu.swift:17:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for _ in 1..(n/2) {\n              ^~\n           \
    \   ...\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 1 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 1...n / 2 {\n        pile = pile.append(n)\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpuvksnv58.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmpuvksnv58.swift:18:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        } else {\n            result.append(n/2)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpjy6mt9th/tmpjy6mt9th.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2176e94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2176b8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2176b8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2176b8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjy6mt9th                        0x00005606148035c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b2177080460 __libc_start_main +
    245

    6    tmpjy6mt9th                        0x0000560614803209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824617
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 1 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 1...n {\n        pile = pile.append(n % 2 == 0 ? n : n +\
    \ 2)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmprcn1iaia.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmprcn1iaia.swift:18:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(n % 2 == 0 ? n : n + 2)\n              \
    \ ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile = pile.append(n)\n    if n % 2\
    \ == 1 {\n        pile = pile.append(n)\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpqhzrfrce.swift:14:17: error: cannot assign value of type '()' to\
    \ type '[Int]'\n    pile = pile.append(n)\n           ~~~~~^~~~~~~~~\n/tmp/tmpqhzrfrce.swift:16:21:\
    \ error: cannot assign value of type '()' to type '[Int]'\n        pile = pile.append(n)\n\
    \               ~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 1\n    var stones = n\n\
    \    while stones > 0 {\n        if stones % 2 == 1 {\n            pile.append(stones)\n\
    \            stones /= 2\n        } else {\n            pile.append(stones)\n\
    \            stones /= 2\n            pile.append(stones)\n            stones\
    \ /= 2\n        }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpgoeh7g7s.swift:26:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = 0\n    var stone = 0\n\
    \    while stone < n {\n        if n % 2 == 0 {\n            stones.append(stone)\n\
    \            stone = 0\n        } else {\n            stone += 2\n        }\n\
    \        level++\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpxlo_lupt.swift:23:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile = append(pile, n / 2)\n    if n\
    \ % 2 == 0 {\n        pile = append(pile, n / 2)\n    } else {\n        pile =\
    \ append(pile, n / 2)\n        pile = append(pile, n / 2)\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpykvpc8ue.swift:14:12: error: cannot find 'append' in scope\n  \
    \  pile = append(pile, n / 2)\n           ^~~~~~\n/tmp/tmpykvpc8ue.swift:16:16:\
    \ error: cannot find 'append' in scope\n        pile = append(pile, n / 2)\n \
    \              ^~~~~~\n/tmp/tmpykvpc8ue.swift:18:16: error: cannot find 'append'\
    \ in scope\n        pile = append(pile, n / 2)\n               ^~~~~~\n/tmp/tmpykvpc8ue.swift:19:16:\
    \ error: cannot find 'append' in scope\n        pile = append(pile, n / 2)\n \
    \              ^~~~~~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 1 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        } else {\n            result.append(n/2)\n        }\n        n = n/2\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpn8ef706l.swift:23:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n/2\n        ^\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var currentLevel = 0\n    var nextLevel\
    \ = Int(n/2)\n    if n % 2 == 0 {\n        nextLevel = nextLevel + 1\n    }\n\
    \    for _ in 0..<n {\n        stones.append(nextLevel)\n        if nextLevel%2\
    \ == 0 {\n            nextLevel = nextLevel + 1\n        } else {\n          \
    \  nextLevel = nextLevel - 1\n        }\n    }\n    return stones\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp4qb4lvbh/tmp4qb4lvbh.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b390ebe3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b390e8dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b390e8da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b390e8d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4qb4lvbh                        0x0000555f2b5946f2 <unavailable> + 5874

    5    libc.so.6                          0x00002b390edcf460 __libc_start_main +
    245

    6    tmp4qb4lvbh                        0x0000555f2b594339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824617
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    var level = 1\n    for _ in 0..<n {\n\
    \        stones.append(level++)\n        if n % 2 == 0 {\n            stones.append(level++)\n\
    \        }\n        n /= 2\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp0twb4mze.swift:16:28: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        stones.append(level++)\n                     \
    \      ^~\n/tmp/tmp0twb4mze.swift:18:32: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            stones.append(level++)\n                 \
    \              ^~\n/tmp/tmp0twb4mze.swift:20:11: error: left side of mutating\
    \ operator isn't mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = 0\n    while n != 0 {\n\
    \        if n % 2 == 0 {\n            stones.append(n)\n            n /= 2\n \
    \       } else {\n            stones.append(n * 2)\n            n /= 2\n     \
    \   }\n        level++\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpupq832z9.swift:18:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmpupq832z9.swift:21:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 2\n            ~ ^\n/tmp/tmpupq832z9.swift:23:14: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        level++\n       \
    \      ^~\n"
  stdout: ''
  timestamp: 1659979098
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var i = 0\n    while i < n {\n     \
    \   if i % 2 == 0 {\n            pile.append(i)\n        } else {\n          \
    \  pile.append(i + 1)\n        }\n        i += 1\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpnahzkwou/tmpnahzkwou.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e77a70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e77767b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e77767988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e777667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnahzkwou                        0x00005578061584d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b4e77c5c460 __libc_start_main +
    245

    6    tmpnahzkwou                        0x0000557806158119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var stones = 0\n    var level = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpuo71sz6_.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979098
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while n != 0 {\n\
    \        pile[level] = n\n        n -= n % 2 == 0 ? n / 2 : n / 2 + 1\n      \
    \  level += 1\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp59brwm6m.swift:17:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= n % 2 == 0 ? n / 2 : n / 2 +\
    \ 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979100
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = n\n\
    \    while stones > 0 {\n        if stones % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones /= 2\n        } else {\n            pile[level]\
    \ = stones\n            stones /= 2\n            pile[level + 1] = stones\n  \
    \          stones /= 2\n        }\n        level++\n    }\n    return pile\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpgc6d7nc2.swift:26:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979098
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while n > 0 {\n \
    \       pile.append(n)\n        n = n % 2 == 0 ? n / 2 : 3 * n + 1\n        level++\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpc4e5h30o.swift:17:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n % 2 == 0 ? n / 2 : 3 * n + 1\n        ^\n/tmp/tmpc4e5h30o.swift:18:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979098
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var count = 0\n    for _ in 0..<n {\n\
    \        pile.append(count)\n        count += 1\n    }\n    if n % 2 == 0 {\n\
    \        pile = pile.map { $0 + $1 }\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmppmk68r9w.swift:20:25: error: contextual closure type '(Int) throws\
    \ -> Int' expects 1 argument, but 2 were used in closure body\n        pile =\
    \ pile.map { $0 + $1 }\n                        ^\n"
  stdout: ''
  timestamp: 1659979098
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    var level = 0\n    while stones.count\
    \ < n {\n        if n % 2 == 0 {\n            stones.append(stones.count + 1)\n\
    \            n /= 2\n        } else {\n            stones.append(stones.count\
    \ + 2)\n            n /= 2\n        }\n        level++\n    }\n    return stones\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp51tj582z.swift:18:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmp51tj582z.swift:21:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 2\n            ~ ^\n/tmp/tmp51tj582z.swift:23:14: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        level++\n       \
    \      ^~\n"
  stdout: ''
  timestamp: 1659979098
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        pile[level] = stones\n        if n%2 == 0 {\n\
    \            stones += 2\n        } else {\n            stones += 1\n        }\n\
    \        n /= 2\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpslfo68ev.swift:23:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpslfo68ev.swift:24:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979098
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var currentLevel = Int(n)\n    var\
    \ nextLevel = Int(n)\n    if n % 2 == 1 {\n        nextLevel = Int(n) + 1\n  \
    \  }\n    for _ in 0..<nextLevel {\n        result.append(currentLevel)\n    \
    \    currentLevel = currentLevel * 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpmlf4nuok/tmpmlf4nuok.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5667638c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b566732fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b566732f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b566732e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmlf4nuok                        0x000055827490c6f2 <unavailable> + 5874

    5    libc.so.6                          0x00002b5667824460 __libc_start_main +
    245

    6    tmpmlf4nuok                        0x000055827490c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        pile[level] = stones\n        stones += (n %\
    \ 2 == 0) ? 1 : 2\n        n /= 2\n        level++\n    }\n    return pile\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpqwaskqg3.swift:19:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpqwaskqg3.swift:20:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979098
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 1\n    var stones = n\n\
    \    while stones > 0 {\n        if stones % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones /= 2\n        } else {\n            pile[level]\
    \ = stones\n            stones /= 2\n            pile[level+1] = stones\n    \
    \        stones /= 2\n        }\n        level += 2\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b88b2488c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88b217f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b88b217f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b88b217f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b88b217ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b88b1f7e7ec <unavailable> + 186348

    6    tmp8w4ccgjj                        0x0000557a247d1b84 <unavailable> + 7044

    7    tmp8w4ccgjj                        0x0000557a247d13eb <unavailable> + 5099

    8    libc.so.6                          0x00002b88b2674460 __libc_start_main +
    245

    9    tmp8w4ccgjj                        0x0000557a247d1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 1\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile = append(pile,\
    \ stones)\n            stones += 2\n        } else {\n            pile = append(pile,\
    \ stones)\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpq_v65zjg.swift:18:20: error: cannot find 'append' in scope\n  \
    \          pile = append(pile, stones)\n                   ^~~~~~\n/tmp/tmpq_v65zjg.swift:21:20:\
    \ error: cannot find 'append' in scope\n            pile = append(pile, stones)\n\
    \                   ^~~~~~\n/tmp/tmpq_v65zjg.swift:24:14: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979098
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n\
    \        pile.append(n / 2)\n    } else {\n        pile.append(n / 2 + 1)\n  \
    \  }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpw1v2breq/tmpw1v2breq.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e9f21dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e9ef14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e9ef14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e9ef137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw1v2breq                        0x000055b5d56c84d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b2e9f409460 __libc_start_main +
    245

    6    tmpw1v2breq                        0x000055b5d56c8119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = 0\n    var stone = 0\n\
    \    while stone < n {\n        if n % 2 == 0 {\n            stones.append(stone)\n\
    \            stone += 2\n        } else {\n            stones.append(stone)\n\
    \            stone += 3\n        }\n        level++\n    }\n    return stones\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpi6zb3nyz.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979098
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        pile = pile.append(n).append(n)\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpxjv3rveu.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmpxjv3rveu.swift:17:31: error: value of tuple type '()' has no member 'append'\n\
    \        pile = pile.append(n).append(n)\n               ~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979098
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var levels = [Int]()\n    var currentLevel\
    \ = 0\n    var currentStones = 0\n    var currentLevelStones = 0\n    for _ in\
    \ 0..<n {\n        if n % 2 == 0 {\n            stones.append(currentStones)\n\
    \            levels.append(currentLevel)\n            currentLevel += 1\n    \
    \        currentStones = 0\n        } else {\n            currentStones += 2\n\
    \        }\n        n -= 1\n    }\n    stones.append(currentStones)\n    levels.append(currentLevel)\n\
    \    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp0nhng24v.swift:27:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979098
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n        n = n / 2\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp2vtmeztw.swift:21:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659979098
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        } else {\n            result.append(n * 2)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpjugaiwkl/tmpjugaiwkl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2e6e6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2e6b61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2e6b61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2e6b607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjugaiwkl                        0x0000562ac8a115c2 <unavailable> + 5570

    5    libc.so.6                          0x00002ae2e7056460 __libc_start_main +
    245

    6    tmpjugaiwkl                        0x0000562ac8a11209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var count = 0\n    for _ in 0..<n {\n\
    \        pile.append(count)\n        count += 1\n    }\n    if n % 2 == 0 {\n\
    \        pile.append(pile[pile.count-1] + 2)\n    } else {\n        pile.append(pile[pile.count-1])\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp6jnx68un/tmp6jnx68un.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c8c653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c8c34ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c8c34a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c8c3497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6jnx68un                        0x0000563add7c7672 <unavailable> + 5746

    5    libc.so.6                          0x00002b6c8c83f460 __libc_start_main +
    245

    6    tmp6jnx68un                        0x0000563add7c72b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        pile = pile.append(n).append(n).append(n)\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m_uwmnm.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp9m_uwmnm.swift:17:31: error: value of tuple type '()' has no member 'append'\n\
    \        pile = pile.append(n).append(n).append(n)\n               ~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979098
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            stones += 2\n  \
    \      } else {\n            stones += 1\n        }\n        level++\n       \
    \ result.append(stones)\n        n = stones\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpc5yzg63h.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n/tmp/tmpc5yzg63h.swift:24:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = stones\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var currentLevel = Int(n)\n    var\
    \ nextLevel = Int(n)\n    if n % 2 == 1 {\n        nextLevel = Int(n) + 1\n  \
    \  }\n    for _ in 0..<nextLevel {\n        result.append(currentLevel)\n    \
    \    currentLevel = currentLevel * 2\n        if currentLevel > n {\n        \
    \    currentLevel = Int(n) + 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpr8k_p350/tmpr8k_p350.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec320f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec31de8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec31de8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec31de77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr8k_p350                        0x000055a725b456f2 <unavailable> + 5874

    5    libc.so.6                          0x00002aec322dd460 __libc_start_main +
    245

    6    tmpr8k_p350                        0x000055a725b45339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        pile = pile.append(n).append(n)\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpxjv3rveu.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmpxjv3rveu.swift:17:31: error: value of tuple type '()' has no member 'append'\n\
    \        pile = pile.append(n).append(n)\n               ~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979098
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while level < n {\n\
    \        if n % 2 == 0 {\n            pile.append(level + 1)\n            n /=\
    \ 2\n        } else {\n            pile.append(level + 2)\n            n /= 2\n\
    \        }\n        level += 1\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp_ucqdxj7.swift:18:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmp_ucqdxj7.swift:21:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 2\n            ~ ^\n"
  stdout: ''
  timestamp: 1659979098
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 1\n    var stones = n\n\
    \    while stones > 0 {\n        pile.append(stones)\n        if stones % 2 ==\
    \ 1 {\n            stones /= 2\n        } else {\n            stones /= 2\n  \
    \          level++\n        }\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpngaonojh.swift:22:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            level++\n                 ^~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var currentLevel = 0\n    var currentStones\
    \ = 0\n    for _ in 0..<n {\n        if n % 2 == 0 {\n            currentStones\
    \ += 2\n        } else {\n            currentStones += 1\n        }\n        result.append(currentStones)\n\
    \        n -= currentStones\n        currentLevel += 1\n        currentStones\
    \ = 0\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmprh77fm58.swift:23:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= currentStones\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var i = 0\n    while i < n {\n     \
    \   if n % 2 == 0 {\n            pile.append(n)\n            i += 2\n        }\
    \ else {\n            pile.append(n - 1)\n            i += 2\n        }\n    }\n\
    \    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpsj9ihfgs/tmpsj9ihfgs.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2ccbccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2cc8c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2cc8c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2cc8c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsj9ihfgs                        0x0000563dd5ef84d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ac2ccdb8460 __libc_start_main +
    245

    6    tmpsj9ihfgs                        0x0000563dd5ef8119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 1...n {\n        pile = pile.append(n)\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpav5l087n.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmpav5l087n.swift:18:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        pile = pile.append(n).append(n)\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpxjv3rveu.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmpxjv3rveu.swift:17:31: error: value of tuple type '()' has no member 'append'\n\
    \        pile = pile.append(n).append(n)\n               ~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979098
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 1\n    var stones = n\n\
    \    while stones > 0 {\n        if stones % 2 == 1 {\n            pile = append(pile,\
    \ stones)\n            stones /= 2\n        } else {\n            pile = append(pile,\
    \ stones)\n            stones /= 2\n            stones /= 2\n        }\n     \
    \   level++\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpvwbct071.swift:18:20: error: cannot find 'append' in scope\n  \
    \          pile = append(pile, stones)\n                   ^~~~~~\n/tmp/tmpvwbct071.swift:21:20:\
    \ error: cannot find 'append' in scope\n            pile = append(pile, stones)\n\
    \                   ^~~~~~\n/tmp/tmpvwbct071.swift:25:14: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        pile = pile.append(n).append(n+1)\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp117a5viw.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp117a5viw.swift:17:31: error: value of tuple type '()' has no member 'append'\n\
    \        pile = pile.append(n).append(n+1)\n               ~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    var level = 1\n    var pile = [Int]()\n\
    \    for _ in 0..<n {\n        if n % 2 == 0 {\n            pile.append(stones[level])\n\
    \            stones.append(stones[level+1])\n            level += 1\n        }\
    \ else {\n            pile.append(stones[level])\n            stones.append(stones[level+1])\n\
    \            level += 1\n            stones.append(stones[level])\n          \
    \  level += 1\n        }\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abc49754c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc4944b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abc4944b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abc4944b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abc4944abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abc4924ae83 <unavailable> + 188035

    6    tmpfosf3ahw                        0x000055c7b3b51d2f <unavailable> + 7471

    7    tmpfosf3ahw                        0x000055c7b3b5153b <unavailable> + 5435

    8    libc.so.6                          0x00002abc49940460 __libc_start_main +
    245

    9    tmpfosf3ahw                        0x000055c7b3b51259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 1 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n        n = n / 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp19_s3ofe.swift:21:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile = append(pile, n / 2)\n    if n\
    \ % 2 == 0 {\n        pile = append(pile, n / 2)\n    } else {\n        pile =\
    \ append(pile, n / 2)\n        pile = append(pile, n / 2)\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpykvpc8ue.swift:14:12: error: cannot find 'append' in scope\n  \
    \  pile = append(pile, n / 2)\n           ^~~~~~\n/tmp/tmpykvpc8ue.swift:16:16:\
    \ error: cannot find 'append' in scope\n        pile = append(pile, n / 2)\n \
    \              ^~~~~~\n/tmp/tmpykvpc8ue.swift:18:16: error: cannot find 'append'\
    \ in scope\n        pile = append(pile, n / 2)\n               ^~~~~~\n/tmp/tmpykvpc8ue.swift:19:16:\
    \ error: cannot find 'append' in scope\n        pile = append(pile, n / 2)\n \
    \              ^~~~~~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var currentLevel = Int()\n    var\
    \ currentStones = Int()\n    for _ in 0..<n {\n        if n % 2 == 0 {\n     \
    \       currentStones += 2\n        } else {\n            currentStones += 1\n\
    \        }\n        currentLevel += 1\n        result.append(currentStones)\n\
    \        n = currentLevel\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpp6q09m8y.swift:24:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = currentLevel\n        ^\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var nLevels = n\n    var nStones = n\n\
    \    while nStones % 2 == 0 {\n        nStones /= 2\n    }\n    while nStones\
    \ % 2 == 0 {\n        pile.append(nStones)\n        nStones /= 2\n    }\n    while\
    \ nStones % 2 != 0 {\n        pile.append(nStones)\n        nStones *= 2\n   \
    \ }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp8t07a8yx/tmp8t07a8yx.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6cfb29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6cf820b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6cf820988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6cf81f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8t07a8yx                        0x00005600b07334d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ba6cfd15460 __libc_start_main +
    245

    6    tmp8t07a8yx                        0x00005600b0733119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    if n % 2 == 1 {\n        stones.append(stones.last!\
    \ + 2)\n    }\n    for _ in 1...n {\n        stones.append(stones.last! + 2)\n\
    \    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpuvs08zqy/tmpuvs08zqy.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab768392c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab768089b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab768089988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7680887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuvs08zqy                        0x000055c88b66c602 <unavailable> + 5634

    5    libc.so.6                          0x00002ab76857e460 __libc_start_main +
    245

    6    tmpuvs08zqy                        0x000055c88b66c249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    if n % 2 == 1 {\n        stones.append(n)\n\
    \    } else {\n        var even = make_a_pile(n: n / 2)\n        var odd = make_a_pile(n:\
    \ n / 2)\n        stones.append(odd.count)\n        stones.append(even.count)\n\
    \    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpmbrnykvl/tmpmbrnykvl.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50cb210c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50caf07b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50caf07988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50caf067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmbrnykvl                        0x0000555abdc5a522 <unavailable> + 5410

    5    libc.so.6                          0x00002b50cb3fc460 __libc_start_main +
    245

    6    tmpmbrnykvl                        0x0000555abdc5a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        var even = n + n\n        var odd = even + even\n     \
    \   pile = pile.append(odd)\n        pile = pile.append(even)\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpvqh4yr5d.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmpvqh4yr5d.swift:19:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(odd)\n               ~~~~~^~~~~~~~~~~\n\
    /tmp/tmpvqh4yr5d.swift:20:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(even)\n               ~~~~~^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while n > 0 {\n \
    \       pile.append(level)\n        level += (n % 2 == 0) ? 1 : -1\n        n\
    \ = n / 2\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpi92lzgwu.swift:18:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        var even = n / 2\n        var odd = n - even\n        pile\
    \ = pile.append(even)\n        pile = pile.append(odd)\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpb76c6mmn.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmpb76c6mmn.swift:19:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(even)\n               ~~~~~^~~~~~~~~~~~\n\
    /tmp/tmpb76c6mmn.swift:20:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(odd)\n               ~~~~~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 1\n    var stones = n\n\
    \    while stones > 0 {\n        pile.append(stones)\n        stones = stones\
    \ % 2 == 0 ? stones / 2 : stones / 2 + 1\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmphm0r5k3e.swift:19:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            pile = pile.append(n)\n\
    \        } else {\n            pile = pile.append(n % 2)\n        }\n        n\
    \ = n / 2\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpjy88ucy8.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmpjy88ucy8.swift:19:25: error: cannot assign value of type '()' to type\
    \ '[Int]'\n            pile = pile.append(n)\n                   ~~~~~^~~~~~~~~\n\
    /tmp/tmpjy88ucy8.swift:21:25: error: cannot assign value of type '()' to type\
    \ '[Int]'\n            pile = pile.append(n % 2)\n                   ~~~~~^~~~~~~~~~~~~\n\
    /tmp/tmpjy88ucy8.swift:23:9: error: cannot assign to value: 'n' is a 'let' constant\n\
    \        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while n > 0 {\n \
    \       pile.append(level)\n        n -= level\n        level += (n % 2 == 0)\
    \ ? 1 : 2\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp06zu_x3k.swift:17:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= level\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 1...n {\n        pile = pile.append(n % 2 == 0 ? n : n +\
    \ 2)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpck9ru5iu.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmpck9ru5iu.swift:18:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(n % 2 == 0 ? n : n + 2)\n              \
    \ ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var i = 0\n    while i < n {\n     \
    \   if i % 2 == 0 {\n            pile.append(i)\n        }\n        i += 2\n \
    \   }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmppsn3ervm/tmppsn3ervm.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade6f906c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade6f5fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade6f5fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade6f5fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppsn3ervm                        0x0000556b5d2c14d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ade6faf2460 __libc_start_main +
    245

    6    tmppsn3ervm                        0x0000556b5d2c1119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    var level = 0\n    var stones_in_level\
    \ = 0\n    while stones_in_level < n {\n        if n % 2 == 0 {\n            stones_in_level\
    \ += stones[level]\n        } else {\n            stones_in_level += stones[level\
    \ + 1]\n        }\n        stones[level] += 1\n        level += 1\n    }\n   \
    \ return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b261b4bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261b1b2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b261b1b2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b261b1b213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b261b1b1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b261afb1e83 <unavailable> + 188035

    6    tmpi1z83b6l                        0x000055ae00586aa6 <unavailable> + 6822

    7    tmpi1z83b6l                        0x000055ae005863eb <unavailable> + 5099

    8    libc.so.6                          0x00002b261b6a7460 __libc_start_main +
    245

    9    tmpi1z83b6l                        0x000055ae00586109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 1\n    var stones = n\n\
    \    while stones > 0 {\n        if stones % 2 == 1 {\n            pile.append(stones)\n\
    \            stones = stones / 2\n        } else {\n            pile.append(stones)\n\
    \            stones = stones / 2\n            pile.append(stones)\n          \
    \  stones = stones / 2\n        }\n        level++\n    }\n    return pile\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpxdae89nu.swift:26:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = 0\n    var stones_in_level\
    \ = 0\n    while stones_in_level < n {\n        if n % 2 == 0 {\n            stones.append(stones_in_level)\n\
    \            stones_in_level += 2\n        } else {\n            stones.append(stones_in_level)\n\
    \            stones_in_level += 3\n        }\n        level += 1\n    }\n    return\
    \ stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpanj1oj3n/tmpanj1oj3n.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49e9132c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49e8e29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49e8e29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49e8e287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpanj1oj3n                        0x0000559c90fba4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b49e931e460 __libc_start_main +
    245

    6    tmpanj1oj3n                        0x0000559c90fba119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    for _ in 0..<n {\n        if n % 2\
    \ == 0 {\n            result.append(n)\n        } else {\n            result.append(n\
    \ + 2)\n        }\n        n = result[n]\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpccvph9hp.swift:20:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = result[n]\n        ^\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while level < n {\n\
    \        if n % 2 == 0 {\n            pile.append(level + 1)\n            n /=\
    \ 2\n        } else {\n            pile.append(level + 1)\n            n /= 2\n\
    \            n -= 1\n        }\n        level += 1\n    }\n    return pile\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpyp4bs43o.swift:18:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmpyp4bs43o.swift:21:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 2\n            ~ ^\n/tmp/tmpyp4bs43o.swift:22:15: error: left\
    \ side of mutating operator isn't mutable: 'n' is a 'let' constant\n         \
    \   n -= 1\n            ~ ^\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    var level = 0\n    while stones.count\
    \ < n {\n        if n % 2 == 0 {\n            stones.append(stones.count + 1)\n\
    \        } else {\n            stones.append(stones.count + 2)\n        }\n  \
    \      n /= 2\n        level++\n    }\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp0f9hih7l.swift:21:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmp0f9hih7l.swift:22:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var nLevels = n\n    var nStones = n\n\
    \    var nNextOdd = 0\n    var nNextEven = 0\n    while nLevels > 0 {\n      \
    \  if nNextOdd > 0 {\n            pile.append(nNextOdd)\n            nNextOdd\
    \ = nNextOdd - nStones\n        }\n        if nNextEven > 0 {\n            pile.append(nNextEven)\n\
    \            nNextEven = nNextEven - nStones\n        }\n        nStones = nStones\
    \ * 2\n        nLevels = nLevels - 1\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpt9jhz366/tmpt9jhz366.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cbecf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cbe9e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cbe9e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cbe9e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt9jhz366                        0x00005602eec5a442 <unavailable> + 5186

    5    libc.so.6                          0x00002b9cbeede460 __libc_start_main +
    245

    6    tmpt9jhz366                        0x00005602eec5a089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = 0\n    while level < n\
    \ {\n        if n % 2 == 0 {\n            stones.append(n)\n        } else {\n\
    \            stones.append(2 * stones[level] + stones[level + 1])\n        }\n\
    \        level += 2\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24239d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24236c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24236c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24236c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24236c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24234c7e83 <unavailable> + 188035

    6    tmp3juxpevi                        0x0000563e0092ea98 <unavailable> + 6808

    7    tmp3juxpevi                        0x0000563e0092e44b <unavailable> + 5195

    8    libc.so.6                          0x00002b2423bbd460 __libc_start_main +
    245

    9    tmp3juxpevi                        0x0000563e0092e169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var currentLevel = 0\n    var currentStones\
    \ = 0\n    for _ in 0..<n {\n        if n % 2 == 0 {\n            currentStones\
    \ += 2\n        } else {\n            currentStones += 1\n        }\n        result.append(currentStones)\n\
    \        currentLevel += 1\n        n = n / 2\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmplzutwkde.swift:24:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while n > 0 {\n \
    \       pile = append(pile, level)\n        n -= level\n        level += (n %\
    \ 2 == 0) ? 1 : 2\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpdycj0i3x.swift:16:16: error: cannot find 'append' in scope\n  \
    \      pile = append(pile, level)\n               ^~~~~~\n/tmp/tmpdycj0i3x.swift:17:11:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \        n -= level\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 1 {\n        pile = pile.append(n)\n\
    \    } else {\n        var even = make_a_pile(n: n / 2)\n        pile = pile.append(even)\n\
    \        pile = pile.append(n / 2)\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp6d3eogo1.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp6d3eogo1.swift:18:21: error: no exact matches in call to instance method\
    \ 'append'\n        pile = pile.append(even)\n                    ^\n/tmp/tmp6d3eogo1.swift:18:21:\
    \ note: found candidate with type '(__owned [Int]) -> ()'\n        pile = pile.append(even)\n\
    \                    ^\n/tmp/tmp6d3eogo1.swift:18:21: error: cannot assign value\
    \ of type '()' to type '[Int]'\n        pile = pile.append(even)\n           \
    \    ~~~~~^~~~~~~~~~~~\n/tmp/tmp6d3eogo1.swift:19:21: error: cannot assign value\
    \ of type '()' to type '[Int]'\n        pile = pile.append(n / 2)\n          \
    \     ~~~~~^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 1 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n        n = n / 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp19_s3ofe.swift:21:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 1\n    var stones = n\n\n\
    \    while stones > 0 {\n        if stones % 2 == 0 {\n            pile = append(pile,\
    \ stones)\n            stones /= 2\n        } else {\n            pile = append(pile,\
    \ stones)\n            stones /= 2\n            stones /= 2\n        }\n     \
    \   level++\n    }\n\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp1kq_lydb.swift:19:20: error: cannot find 'append' in scope\n  \
    \          pile = append(pile, stones)\n                   ^~~~~~\n/tmp/tmp1kq_lydb.swift:22:20:\
    \ error: cannot find 'append' in scope\n            pile = append(pile, stones)\n\
    \                   ^~~~~~\n/tmp/tmp1kq_lydb.swift:26:14: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n\
    \        pile.append(n / 2)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp1o4iyqbs/tmp1o4iyqbs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14ae8e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14ae5dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14ae5dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14ae5db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1o4iyqbs                        0x00005633162504d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b14aead1460 __libc_start_main +
    245

    6    tmp1o4iyqbs                        0x0000563316250119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while n > 0 {\n \
    \       pile.append(level)\n        n -= level % 2 == 0 ? 2 : 3\n        level\
    \ += 1\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpyrf5bz37.swift:17:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= level % 2 == 0 ? 2 : 3\n    \
    \    ~ ^\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var levels = [Int]()\n    var currentLevel\
    \ = 0\n    var currentStones = 0\n    var nextLevel = n - 1\n    var nextStones\
    \ = n - 1\n    var currentLevelStones = n - 1\n    var currentLevelStonesNext\
    \ = n - 1\n    var currentLevelStonesNextNext = n - 1\n    var currentLevelStonesNextNextNext\
    \ = n - 1\n    var currentLevelStonesNextNextNextNext = n - 1\n    var currentLevelStonesNextNextNextNextNext\
    \ = n - 1\n    var currentLevelStonesNextNextNextNextNext = n - 1\n    var currentLevelStonesNextNextNextNextNextNext\
    \ = n - 1\n    var currentLevelStonesNextNextNextNextNextNext = n - 1\n    var\
    \ currentLevelStonesNextNextNextNextNextNext = n - 1\n    var currentLevelStonesNextNextNextNextNextNextNext\
    \ = n - 1\n    var currentLevelStonesNextNextNextNextNextNextNext = n - 1\n  \
    \  var currentLevelStonesNextNextNextNextNextNextNext = n - 1\n    var currentLevelStonesNextNextNextNextNextNextNextNext\
    \ = n - 1\n    var currentLevelStonesNextNextNextNextNextNextNextNext = n - 1\n\
    \    var currentLevelStonesNextNextNextNextNextNextNextNext = n - 1\n    var currentLevelStonesNextNextNextNextNextNextNextNext\
    \ = n - 1\n    var currentLevelStonesNextNextNextNextNextNextNextNext = n - 1\n\
    \    var currentLevelStonesNextNextNextNextNextNextNextNext = n - 1\n    var currentLevelStonesNextNextNextNextNextNextNextNextNext\
    \ = n - 1\n    var currentLevelStonesNextNextNextNextNextNextNextNextNext = n\
    \ - 1\n    var currentLevelStonesNextNextNextNextNextNextNextNextNext = n - 1\n\
    \    var currentLevelStonesNextNextNextNextNextNextNextNextNext = n - 1\n    var\
    \ currentLevelStonesNextNextNextNextNextNextNextNextNext = n - 1\n    var currentLevelStonesNextNextNextNextNextNextNextNextNext\
    \ = n - 1\n    var currentLevelStonesNextNextNextNextNextNextNextNextNext = n\
    \ - 1\n    var currentLevelStonesNextNextNextNextNextNextNextNextNextNext = n\
    \ - 1\n    var currentLevelStonesNextNextNextNextNextNextNextNextNextNext = n\
    \ - 1\n    var currentLevel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmputfoisv7.swift:25:9: error: invalid redeclaration of 'currentLevelStonesNextNextNextNextNext'\n\
    \    var currentLevelStonesNextNextNextNextNext = n - 1\n        ^\n/tmp/tmputfoisv7.swift:24:9:\
    \ note: 'currentLevelStonesNextNextNextNextNext' previously declared here\n  \
    \  var currentLevelStonesNextNextNextNextNext = n - 1\n        ^\n/tmp/tmputfoisv7.swift:27:9:\
    \ error: invalid redeclaration of 'currentLevelStonesNextNextNextNextNextNext'\n\
    \    var currentLevelStonesNextNextNextNextNextNext = n - 1\n        ^\n/tmp/tmputfoisv7.swift:26:9:\
    \ note: 'currentLevelStonesNextNextNextNextNextNext' previously declared here\n\
    \    var currentLevelStonesNextNextNextNextNextNext = n - 1\n        ^\n/tmp/tmputfoisv7.swift:28:9:\
    \ error: invalid redeclaration of 'currentLevelStonesNextNextNextNextNextNext'\n\
    \    var currentLevelStonesNextNextNextNextNextNext = n - 1\n        ^\n/tmp/tmputfoisv7.swift:26:9:\
    \ note: 'currentLevelStonesNextNextNextNextNextNext' previously declared here\n\
    \    var currentLevelStonesNextNextNextNextNextNext = n - 1\n        ^\n/tmp/tmputfoisv7.swift:30:9:\
    \ error: invalid redeclaration of 'currentLevelStonesNextNextNextNextNextNextNext'\n\
    \    var currentLevelStonesNextNextNextNextNextNextNext = n - 1\n        ^\n/tmp/tmputfoisv7.swift:29:9:\
    \ note: 'currentLevelStonesNextNextNextNextNextNextNext' previously declared here\n\
    \    var currentLevelStonesNextNextNextNextNextNextNext = n - 1\n        ^\n/tmp/tmputfoisv7.swift:31:9:\
    \ error: invalid redeclaration of 'currentLevelStonesNextNextNextNextNextNextNext'\n\
    \    var currentLevelStonesNextNextNextNextNextNextNext = n - 1\n        ^\n/tmp/tmputfoisv7.swift:29:9:\
    \ note: 'currentLevelStonesNextNextNextNextNextNextNext' previously declared here\n\
    \    var currentLevelStonesNextNextNextNextNextNextNext = n - 1\n        ^\n/tmp/tmputfoisv7.swift:33:9:\
    \ error: invalid redeclaration of 'currentLevelStonesNextNextNextNextNextNextNextNext'\n\
    \    var currentLevelStonesNextNextNextNextNextNextNextNext = n - 1\n        ^\n\
    /tmp/tmputfoisv7.swift:32:9: note: 'currentLevelStonesNextNextNextNextNextNextNextNext'\
    \ previous"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while level < n {\n\
    \        pile.append(level)\n        if level % 2 == 0 {\n            level +=\
    \ 2\n        } else {\n            level += 3\n        }\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpm3tabpam/tmpm3tabpam.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae02caabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae02c7a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae02c7a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae02c7a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm3tabpam                        0x0000562e1a9b94d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ae02cc97460 __libc_start_main +
    245

    6    tmpm3tabpam                        0x0000562e1a9b9119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            result.append(stones)\n\
    \            stones += 2\n        } else {\n            result.append(stones)\n\
    \            stones += 3\n        }\n        n /= 2\n        level++\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpibe4bemk.swift:24:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpibe4bemk.swift:25:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var level = 0\n    while level < n\
    \ {\n        if n % 2 == 0 {\n            result.append(n)\n            n /= 2\n\
    \        } else {\n            result.append(n)\n            n /= 2\n        \
    \    n += 1\n        }\n        level += 1\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpq1t4em11.swift:18:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmpq1t4em11.swift:21:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 2\n            ~ ^\n/tmp/tmpq1t4em11.swift:22:15: error: left\
    \ side of mutating operator isn't mutable: 'n' is a 'let' constant\n         \
    \   n += 1\n            ~ ^\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while n > 0 {\n \
    \       pile.append(level)\n        level += (n % 2 == 0) ? 1 : -1\n        n\
    \ /= 2\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpj8yj1c3x.swift:18:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 1\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile.append(stones)\n\
    \            stones += 2\n        } else {\n            pile.append(stones)\n\
    \            stones += 3\n        }\n        n /= 2\n        level++\n    }\n\
    \    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9kdci00p.swift:24:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmp9kdci00p.swift:25:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 1 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n        n = n / 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp19_s3ofe.swift:21:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 1\n    while level < n {\n\
    \        if n % 2 == 0 {\n            pile.append(level)\n            n /= 2\n\
    \        } else {\n            pile.append(level + 1)\n            n /= 2\n  \
    \      }\n        level += 1\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp0sfrpjyu.swift:18:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmp0sfrpjyu.swift:21:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 2\n            ~ ^\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 1 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n        n = n / 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp19_s3ofe.swift:21:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = 0\n    while level < n\
    \ {\n        if n % 2 == 0 {\n            stones.append(n)\n            n /= 2\n\
    \        } else {\n            n /= 2\n            stones.append(n)\n        }\n\
    \        level++\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpoidr7_4h.swift:18:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmpoidr7_4h.swift:20:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 2\n            ~ ^\n/tmp/tmpoidr7_4h.swift:23:14: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        level++\n       \
    \      ^~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var stonesCount = 0\n    if n % 2\
    \ == 0 {\n        stonesCount = n\n    } else {\n        stonesCount = n * 3\n\
    \    }\n    for _ in 0..<stonesCount {\n        stones.append(stonesCount)\n \
    \       stonesCount += 1\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp5hkz0fdf/tmp5hkz0fdf.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68a008cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b689fd83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b689fd83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b689fd827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hkz0fdf                        0x0000564268df35c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b68a0278460 __libc_start_main +
    245

    6    tmp5hkz0fdf                        0x0000564268df3209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    var level = 0\n    while stones.count\
    \ < n {\n        if n % 2 == 0 {\n            stones.append(stones.last! + 2)\n\
    \        } else {\n            stones.append(stones.last! + 1)\n        }\n  \
    \      n /= 2\n        level += 1\n    }\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp51tchnp_.swift:21:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 1...n {\n        pile = pile.append(n % 2 == 0 ? n : n +\
    \ 2)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpck9ru5iu.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmpck9ru5iu.swift:18:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(n % 2 == 0 ? n : n + 2)\n              \
    \ ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 1\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile.append(stones)\n\
    \            stones += 2\n        } else {\n            pile.append(stones)\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpue8sp2vh.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = n\n\
    \    while stones > 0 {\n        pile[level] = stones\n        stones = stones\
    \ % 2 == 0 ? stones / 2 : stones / 2 + 1\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp1t80n5ev.swift:19:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var currentLevel = [0]\n    var currentStones\
    \ = 0\n    for _ in 0..<n {\n        if n % 2 == 0 {\n            currentLevel.append(currentStones)\n\
    \            currentStones = 0\n        } else {\n            currentStones +=\
    \ 2\n        }\n        n -= 1\n    }\n    result.append(currentLevel)\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpyfddnrt4.swift:23:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= 1\n        ~ ^\n/tmp/tmpyfddnrt4.swift:25:12:\
    \ error: no exact matches in call to instance method 'append'\n    result.append(currentLevel)\n\
    \           ^\nSwift.Array:7:37: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(contentsOf:)')\n    @inlinable public mutating func append<S>(contentsOf\
    \ newElements: __owned S) where Element == S.Element, S : Sequence\n         \
    \                           ^\nSwift.RangeReplaceableCollection:5:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable\
    \ public mutating func append<S>(contentsOf newElements: __owned S) where S :\
    \ Sequence, Self.Element == S.Element\n                                    ^\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    } else {\n        var nextEven = n + 2\n        while nextEven > 0 {\n  \
    \          result.append(nextEven)\n            nextEven -= 2\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpbb9td9v1/tmpbb9td9v1.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22ae06bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22add62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22add62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22add617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbb9td9v1                        0x000055f939d1f4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b22ae257460 __libc_start_main +
    245

    6    tmpbb9td9v1                        0x000055f939d1f119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 1...n {\n        pile = pile.append(n % 2 == 0 ? n : n +\
    \ 2)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpck9ru5iu.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmpck9ru5iu.swift:18:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(n % 2 == 0 ? n : n + 2)\n              \
    \ ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while n != 0 {\n\
    \        pile[level] = n\n        n -= n % 2 == 0 ? 2 : 3\n        level++\n \
    \   }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpghdji84a.swift:17:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= n % 2 == 0 ? 2 : 3\n        ~\
    \ ^\n/tmp/tmpghdji84a.swift:18:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var level = 0\n    var stones = n\n\
    \    while stones > 0 {\n        if stones % 2 == 0 {\n            result.append(stones)\n\
    \            stones /= 2\n        } else {\n            result.append(stones)\n\
    \            stones /= 2\n            stones += 1\n        }\n        level +=\
    \ 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979104
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var currentLevel = 0\n    var currentStones\
    \ = 0\n    for _ in 0..<n {\n        if n % 2 == 0 {\n            currentStones\
    \ += 2\n        } else {\n            currentStones += 1\n        }\n        result.append(currentStones)\n\
    \        currentLevel += 1\n        n = n / 2\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmplzutwkde.swift:24:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        } else {\n            result.append(n + 2)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpj7ekaxis/tmpj7ekaxis.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc56979c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc56670b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc56670988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc5666f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj7ekaxis                        0x00005634388f45c2 <unavailable> + 5570

    5    libc.so.6                          0x00002adc56b65460 __libc_start_main +
    245

    6    tmpj7ekaxis                        0x00005634388f4209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        let n = Int.random(in: 1...n)\n        if\
    \ n % 2 == 0 {\n            result.append(n)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpiv64g1fp/tmpiv64g1fp.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3805b4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3805842b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3805842988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38058417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiv64g1fp                        0x00005597bcbc7682 <unavailable> + 5762

    5    libc.so.6                          0x00002b3805d37460 __libc_start_main +
    245

    6    tmpiv64g1fp                        0x00005597bcbc72c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 1 {\n        pile = pile.append(n)\n\
    \    } else {\n        pile = pile.append(n).append(n / 2)\n    }\n    for _ in\
    \ 1...n {\n        pile = pile.append(n / 2)\n    }\n    return pile\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp97wqotvx.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp97wqotvx.swift:17:31: error: value of tuple type '()' has no member 'append'\n\
    \        pile = pile.append(n).append(n / 2)\n               ~~~~~~~~~~~~~~ ^~~~~~\n\
    /tmp/tmp97wqotvx.swift:20:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(n / 2)\n               ~~~~~^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var currentLevel = n - 1\n    var nextLevel\
    \ = n - 1\n    var nextOdd = 0\n    var nextEven = 0\n    for _ in 0..<n {\n \
    \       pile.append(currentLevel)\n        if n % 2 == 0 {\n            nextEven\
    \ = nextEven + 1\n        } else {\n            nextOdd = nextOdd + 1\n      \
    \  }\n        currentLevel = nextLevel\n        nextLevel = nextOdd + nextEven\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp6r7w80pf/tmp6r7w80pf.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a1b68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a185fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a185f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a185e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6r7w80pf                        0x000055941b8d85c2 <unavailable> + 5570

    5    libc.so.6                          0x00002ad9a1d54460 __libc_start_main +
    245

    6    tmp6r7w80pf                        0x000055941b8d8209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    var level = 0\n    while stones.count\
    \ < n {\n        if n % 2 == 0 {\n            stones.append(stones.last! + 2)\n\
    \        } else {\n            stones.append(stones.last! + 1)\n        }\n  \
    \      n /= 2\n        level++\n    }\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpt4uszdm4.swift:21:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpt4uszdm4.swift:22:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n\
    \        pile.append(n / 2)\n    }\n    if n % 2 == 1 {\n        pile.append(n\
    \ / 2 + 1)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp4d7e53s4/tmp4d7e53s4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49d7753c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49d744ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49d744a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49d74497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4d7e53s4                        0x000055f5f79504d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b49d793f460 __libc_start_main +
    245

    6    tmp4d7e53s4                        0x000055f5f7950119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        pile = pile.append(n).append(n)\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpxjv3rveu.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmpxjv3rveu.swift:17:31: error: value of tuple type '()' has no member 'append'\n\
    \        pile = pile.append(n).append(n)\n               ~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979098
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        pile = pile.append(n).append(n).append(n)\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m_uwmnm.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp9m_uwmnm.swift:17:31: error: value of tuple type '()' has no member 'append'\n\
    \        pile = pile.append(n).append(n).append(n)\n               ~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979098
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while level < n {\n\
    \        pile.append(level)\n        level += (level % 2 == 0) ? 1 : 2\n    }\n\
    \    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp59dsfai0/tmp59dsfai0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c8fe7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c8fb71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c8fb71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c8fb707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp59dsfai0                        0x00005614fc7394d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b4c90066460 __libc_start_main +
    245

    6    tmp59dsfai0                        0x00005614fc739119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 1\n    var stones = n\n\
    \    while stones > 0 {\n        if stones % 2 == 1 {\n            pile.append(stones)\n\
    \            stones /= 2\n        } else {\n            pile.append(stones)\n\
    \            stones /= 2\n            pile.append(stones)\n            stones\
    \ /= 2\n        }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpgoeh7g7s.swift:26:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var nLevels = n\n    var currentLevel\
    \ = 0\n    while nLevels > 0 {\n        if nLevels % 2 == 0 {\n            pile.append(nLevels)\n\
    \            nLevels /= 2\n        } else {\n            pile.append(nLevels +\
    \ 1)\n            nLevels /= 2\n        }\n        currentLevel++\n    }\n   \
    \ return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpgcecv0jk.swift:24:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        currentLevel++\n                    ^~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 1\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile.append(stones)\n\
    \            stones += 2\n        } else {\n            pile.append(stones)\n\
    \            stones += 3\n        }\n        level += 1\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpj4yjtbrr/tmpj4yjtbrr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b440ae71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b440ab68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b440ab68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b440ab677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj4yjtbrr                        0x00005582e876c4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b440b05d460 __libc_start_main +
    245

    6    tmpj4yjtbrr                        0x00005582e876c119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while n != 0 {\n\
    \        pile[level] = n\n        n -= n % 2 == 0 ? 2 : 3\n        level++\n \
    \   }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpghdji84a.swift:17:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= n % 2 == 0 ? 2 : 3\n        ~\
    \ ^\n/tmp/tmpghdji84a.swift:18:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        } else {\n            result.append(n * 2)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpjugaiwkl/tmpjugaiwkl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2e6e6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2e6b61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2e6b61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2e6b607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjugaiwkl                        0x0000562ac8a115c2 <unavailable> + 5570

    5    libc.so.6                          0x00002ae2e7056460 __libc_start_main +
    245

    6    tmpjugaiwkl                        0x0000562ac8a11209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while n > 0 {\n \
    \       pile.append(level)\n        n -= level\n        level += (n % 2 == 0)\
    \ ? 1 : 2\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp06zu_x3k.swift:17:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= level\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 0 {\n        for _ in\
    \ 0..<n {\n            result.append(n)\n        }\n    } else {\n        for\
    \ _ in 0..<n {\n            result.append(n + 1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp9zl5qsb7/tmp9zl5qsb7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5400535c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b540022cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b540022c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b540022b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9zl5qsb7                        0x0000562ad8e255c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b5400721460 __libc_start_main +
    245

    6    tmp9zl5qsb7                        0x0000562ad8e25209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var level = 0\n    while level < n\
    \ {\n        if n % 2 == 0 {\n            result.append(n)\n            n /= 2\n\
    \        } else {\n            result.append(n)\n            n /= 2\n        \
    \    n += n / 2\n        }\n        level += 1\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpgn_fjpl2.swift:18:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmpgn_fjpl2.swift:21:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 2\n            ~ ^\n/tmp/tmpgn_fjpl2.swift:22:15: error: left\
    \ side of mutating operator isn't mutable: 'n' is a 'let' constant\n         \
    \   n += n / 2\n            ~ ^\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            pile = pile.append(n)\n\
    \        } else {\n            pile = pile.append(n - 1)\n        }\n    }\n \
    \   return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpg0yyi99x.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmpg0yyi99x.swift:19:25: error: cannot assign value of type '()' to type\
    \ '[Int]'\n            pile = pile.append(n)\n                   ~~~~~^~~~~~~~~\n\
    /tmp/tmpg0yyi99x.swift:21:25: error: cannot assign value of type '()' to type\
    \ '[Int]'\n            pile = pile.append(n - 1)\n                   ~~~~~^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var currentLevel = 0\n    var nextLevel\
    \ = n + 1 // +1 because we start at 1\n    if n % 2 == 0 {\n        nextLevel\
    \ = nextLevel + 1 // +1 because we start at 1\n    }\n    for _ in 0..<n {\n \
    \       pile.append(nextLevel)\n        if nextLevel % 2 == 0 {\n            nextLevel\
    \ = nextLevel + 1 // +1 because we start at 1\n        } else {\n            nextLevel\
    \ = nextLevel - 1 // -1 because we start at 0\n        }\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpvi36z_6t/tmpvi36z_6t.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5804eb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5804bacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5804bac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5804bab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvi36z_6t                        0x0000563aec67e5c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b58050a1460 __libc_start_main +
    245

    6    tmpvi36z_6t                        0x0000563aec67e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var currentLevel = 0\n    var currentStones\
    \ = 0\n    for _ in 0..<n {\n        if n % 2 == 0 {\n            currentStones\
    \ += 2\n        } else {\n            currentStones += 1\n        }\n        result.append(currentStones)\n\
    \        currentLevel += 1\n        n = currentLevel\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmprwut79hf.swift:24:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = currentLevel\n        ^\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while level < n {\n\
    \        pile.append(level + 1)\n        level = level + 2\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp71dj41aq/tmp71dj41aq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba594c14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba59490bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba59490b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba59490a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp71dj41aq                        0x0000562108ade442 <unavailable> + 5186

    5    libc.so.6                          0x00002ba594e00460 __libc_start_main +
    245

    6    tmp71dj41aq                        0x0000562108ade089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [1]\n    var levels = [0]\n    var result = [Int]()\n\
    \    for _ in 0..<n {\n        stones.append(stones.last! + stones.last!)\n  \
    \      levels.append(levels.last! + 1)\n    }\n    for _ in 0..<n {\n        result.append(stones[levels[levels.last!]]\
    \ - stones[levels[levels.last!] - 1])\n        levels.append(levels[levels.last!]\
    \ - 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp1b63dtsk/tmp1b63dtsk.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04348e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04345dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04345df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04345de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1b63dtsk                        0x000056278f6686b2 <unavailable> + 5810

    5    libc.so.6                          0x00002b0434ad4460 __libc_start_main +
    245

    6    tmp1b63dtsk                        0x000056278f6682f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var nLevels = n\n    var nStones = n\n\
    \    var nNextOdd = 0\n    var nNextEven = 0\n    while nLevels > 0 {\n      \
    \  if nNextOdd > nNextEven {\n            pile.append(nNextOdd)\n            nNextOdd\
    \ = nNextOdd + nNextEven\n        } else {\n            pile.append(nNextEven)\n\
    \            nNextEven = nNextEven + nNextOdd\n        }\n        nLevels = nLevels\
    \ - 1\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp0a_w4cvz/tmp0a_w4cvz.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e9d5dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e9d2d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e9d2d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e9d2d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0a_w4cvz                        0x000055e988504442 <unavailable> + 5186

    5    libc.so.6                          0x00002b6e9d7cb460 __libc_start_main +
    245

    6    tmp0a_w4cvz                        0x000055e988504089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 1\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile.append(stones)\n\
    \            stones += 2\n        } else {\n            pile.append(stones)\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpue8sp2vh.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 1\n    var stones = n\n\
    \    while stones > 0 {\n        if stones % 2 == 0 {\n            pile = append(pile,\
    \ stones)\n            stones = stones / 2\n        } else {\n            pile\
    \ = append(pile, stones)\n            stones = stones / 2\n            pile =\
    \ append(pile, stones)\n            stones = stones / 2\n        }\n        level++\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpku5rmjoy.swift:18:20: error: cannot find 'append' in scope\n  \
    \          pile = append(pile, stones)\n                   ^~~~~~\n/tmp/tmpku5rmjoy.swift:21:20:\
    \ error: cannot find 'append' in scope\n            pile = append(pile, stones)\n\
    \                   ^~~~~~\n/tmp/tmpku5rmjoy.swift:23:20: error: cannot find 'append'\
    \ in scope\n            pile = append(pile, stones)\n                   ^~~~~~\n\
    /tmp/tmpku5rmjoy.swift:26:14: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = 0\n    var stones_in_level\
    \ = n\n    while stones_in_level > 0 {\n        if stones_in_level % 2 == 1 {\n\
    \            stones.append(stones_in_level)\n            stones_in_level -= stones_in_level\
    \ / 2\n        } else {\n            stones.append(stones_in_level)\n        \
    \    stones_in_level -= stones_in_level / 2 + 1\n        }\n        level++\n\
    \    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp0aghfq8j.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var currentLevel = Int()\n    var\
    \ nextLevel = Int()\n    for _ in 0..<n {\n        nextLevel = n % 2 == 0 ? nextLevel\
    \ + 2 : nextLevel + 1\n        result.append(nextLevel)\n        n = n / 2\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpfchmie41.swift:19:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var nLevels = n\n    var nStones = n\n\
    \    var nNextOdd = 0\n    var nNextEven = 0\n    while nStones > 0 {\n      \
    \  if nNextOdd > nNextEven {\n            pile.append(nNextOdd)\n            nNextOdd\
    \ = nNextOdd * 2 + 1\n        } else {\n            pile.append(nNextEven)\n \
    \           nNextEven = nNextEven * 2 + 1\n        }\n        nStones = nStones\
    \ - 1\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmptmk6bs3d/tmptmk6bs3d.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd9c793c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd9c48ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd9c48a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd9c4897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptmk6bs3d                        0x000055cb5e74d442 <unavailable> + 5186

    5    libc.so.6                          0x00002abd9c97f460 __libc_start_main +
    245

    6    tmptmk6bs3d                        0x000055cb5e74d089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 1\n    var stones = n\n\
    \    while stones > 0 {\n        if stones % 2 == 0 {\n            pile.append(stones)\n\
    \            stones /= 2\n        } else {\n            pile.append(stones)\n\
    \            stones /= 2\n            pile.append(stones)\n            stones\
    \ /= 2\n        }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpcezfocx1.swift:26:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile = append(pile, n / 2)\n    if n\
    \ % 2 == 0 {\n        pile = append(pile, n / 2)\n    } else {\n        pile =\
    \ append(pile, n / 2 + n / 2)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpflcb212q.swift:14:12: error: cannot find 'append' in scope\n  \
    \  pile = append(pile, n / 2)\n           ^~~~~~\n/tmp/tmpflcb212q.swift:16:16:\
    \ error: cannot find 'append' in scope\n        pile = append(pile, n / 2)\n \
    \              ^~~~~~\n/tmp/tmpflcb212q.swift:18:16: error: cannot find 'append'\
    \ in scope\n        pile = append(pile, n / 2 + n / 2)\n               ^~~~~~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        pile = pile.append(n).append(n).append(n)\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m_uwmnm.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp9m_uwmnm.swift:17:31: error: value of tuple type '()' has no member 'append'\n\
    \        pile = pile.append(n).append(n).append(n)\n               ~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979098
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var i = 0\n    while i < n {\n     \
    \   if n % 2 == 1 {\n            pile.append(n)\n            i += 2\n        }\
    \ else {\n            pile.append(n)\n            i += 3\n        }\n    }\n \
    \   return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpcibucai7/tmpcibucai7.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fcc576c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fcc26db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fcc26d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fcc26c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcibucai7                        0x00005568443c14d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b9fcc762460 __libc_start_main +
    245

    6    tmpcibucai7                        0x00005568443c1119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n        n = n / 2\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp2vtmeztw.swift:21:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659979098
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while level < n {\n\
    \        pile.append(level + 1)\n        if n % 2 == 0 {\n            pile.append(level\
    \ + 2)\n        }\n        level += 3\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpf3z3sxpj/tmpf3z3sxpj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba862aeac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8627e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8627e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8627e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf3z3sxpj                        0x0000563ac4de74d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ba862cd6460 __libc_start_main +
    245

    6    tmpf3z3sxpj                        0x0000563ac4de7119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var nextLevel = n\
    \ + 1 // +1 because we start counting at 1\n    var nextLevelOdd = nextLevel %\
    \ 2 == 0\n    var nextLevelEven = nextLevel % 2 == 1\n    if nextLevelOdd { //\
    \ if n is odd\n        pile = append(pile, nextLevel)\n        level += 1\n  \
    \  }\n    if nextLevelEven { // if n is even\n        pile = append(pile, nextLevel)\n\
    \        level += 1\n    }\n    for _ in 1...level {\n        if nextLevelOdd\
    \ { // if n is odd\n            nextLevel = nextLevel + 2\n        } else if nextLevelEven\
    \ { // if n is even\n            nextLevel = nextLevel + 3\n        } else {\n\
    \            break\n        }\n        if nextLevel > n { // if next level is\
    \ greater than n\n            break\n        }\n        if nextLevel % 2 == 0\
    \ { // if next level is even\n            pile = append(pile, nextLevel)\n   \
    \         level += 1\n        } else { // if next level is odd\n            pile\
    \ = append(pile, nextLevel)\n            level += 1\n        }\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpspc13y8w.swift:19:16: error: cannot find 'append' in scope\n  \
    \      pile = append(pile, nextLevel)\n               ^~~~~~\n/tmp/tmpspc13y8w.swift:23:16:\
    \ error: cannot find 'append' in scope\n        pile = append(pile, nextLevel)\n\
    \               ^~~~~~\n/tmp/tmpspc13y8w.swift:38:20: error: cannot find 'append'\
    \ in scope\n            pile = append(pile, nextLevel)\n                   ^~~~~~\n\
    /tmp/tmpspc13y8w.swift:41:20: error: cannot find 'append' in scope\n         \
    \   pile = append(pile, nextLevel)\n                   ^~~~~~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            result.append(stones)\n\
    \            stones += 2\n        } else {\n            result.append(stones)\n\
    \            stones += 3\n        }\n        n /= 2\n        level++\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpibe4bemk.swift:24:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpibe4bemk.swift:25:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var nLevels = n\n    var nStones = 0\n\
    \    while nLevels > 0 {\n        if nStones % 2 == 0 {\n            pile.append(nStones)\n\
    \        }\n        nStones += 1\n        nLevels -= 1\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpm8y5z7hs/tmpm8y5z7hs.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b839dee5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b839dbdcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b839dbdc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b839dbdb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm8y5z7hs                        0x000055c0a22624d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b839e0d1460 __libc_start_main +
    245

    6    tmpm8y5z7hs                        0x000055c0a2262119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 1\n    var stones = n\n\
    \    while stones > 0 {\n        if stones % 2 == 1 {\n            pile.append(stones)\n\
    \            stones /= 2\n        } else {\n            pile.append(stones)\n\
    \            stones /= 2\n            pile.append(stones)\n            stones\
    \ /= 2\n        }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpgoeh7g7s.swift:26:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 1 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 0..<n / 2 {\n        pile = pile.append(pile.popLast() +\
    \ 1)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpn368_tyo.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmpn368_tyo.swift:18:33: error: value of optional type 'Int?' must be unwrapped\
    \ to a value of type 'Int'\n        pile = pile.append(pile.popLast() + 1)\n \
    \                               ^\n/tmp/tmpn368_tyo.swift:18:33: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     pile = pile.append(pile.popLast() + 1)\n                               \
    \ ^\n                           (              ?? <#default value#>)\n/tmp/tmpn368_tyo.swift:18:33:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        pile = pile.append(pile.popLast() + 1)\n                    \
    \            ^\n                                         !\n/tmp/tmpn368_tyo.swift:18:21:\
    \ error: cannot assign value of type '()' to type '[Int]'\n        pile = pile.append(pile.popLast()\
    \ + 1)\n               ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var currentLevel = n - 1\n    var nextLevel\
    \ = currentLevel\n    if n % 2 == 0 {\n        nextLevel = nextLevel + 1\n   \
    \ }\n    for _ in 0..<n {\n        pile.append(nextLevel)\n        if nextLevel\
    \ % 2 == 0 {\n            nextLevel = nextLevel + 1\n        } else {\n      \
    \      nextLevel = nextLevel - 1\n        }\n    }\n    return pile\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpn7ynt0fs/tmpn7ynt0fs.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86518dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86515d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86515d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86515d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn7ynt0fs                        0x000055e9203065c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b8651ac6460 __libc_start_main +
    245

    6    tmpn7ynt0fs                        0x000055e920306209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile = append(pile, n / 2)\n    if n\
    \ % 2 == 0 {\n        pile = append(pile, n / 2)\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp6sv2vkn3.swift:14:12: error: cannot find 'append' in scope\n  \
    \  pile = append(pile, n / 2)\n           ^~~~~~\n/tmp/tmp6sv2vkn3.swift:16:16:\
    \ error: cannot find 'append' in scope\n        pile = append(pile, n / 2)\n \
    \              ^~~~~~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    var level = 0\n    while stones.count\
    \ < n {\n        if n % 2 == 0 {\n            stones.append(stones.count + 1)\n\
    \        } else {\n            stones.append(stones.count + 2)\n        }\n  \
    \      n /= 2\n        level++\n    }\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp0f9hih7l.swift:21:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmp0f9hih7l.swift:22:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    for _ in 0..<n {\n        if n % 2\
    \ == 0 {\n            result.append(n)\n        } else {\n            result.append(n\
    \ + 1)\n        }\n        n /= 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp26ghu12j.swift:20:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        let n = n - 1\n        let nextOdd = (n + 1) & 1\n    \
    \    let nextEven = n >> 1\n        pile = pile.append(nextOdd)\n        pile\
    \ = pile.append(nextEven)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp3h0kpszm.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp3h0kpszm.swift:20:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(nextOdd)\n               ~~~~~^~~~~~~~~~~~~~~\n\
    /tmp/tmp3h0kpszm.swift:21:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(nextEven)\n               ~~~~~^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        } else {\n            result.append(n + 2)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpj7ekaxis/tmpj7ekaxis.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc56979c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc56670b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc56670988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc5666f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj7ekaxis                        0x00005634388f45c2 <unavailable> + 5570

    5    libc.so.6                          0x00002adc56b65460 __libc_start_main +
    245

    6    tmpj7ekaxis                        0x00005634388f4209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    for _ in 0..<n {\n        if n % 2 ==\
    \ 0 {\n            stones.append(stones.last! + 2)\n        } else {\n       \
    \     stones.append(stones.last! + 1)\n        }\n        n /= 2\n    }\n    return\
    \ stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpd6z1pcov.swift:20:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 1 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n        n = n * 3 + 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmptypzokym.swift:21:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n * 3 + 1\n        ^\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 1 {\n\
    \        pile.append(pile[n/2] + 1)\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f83e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f80e0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b43f80e0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b43f80e013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b43f80dfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b43f7edfe83 <unavailable> + 188035

    6    tmp34_rpwyb                        0x000055c93c2b6aa9 <unavailable> + 6825

    7    tmp34_rpwyb                        0x000055c93c2b644b <unavailable> + 5195

    8    libc.so.6                          0x00002b43f85d5460 __libc_start_main +
    245

    9    tmp34_rpwyb                        0x000055c93c2b6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = 0\n    var stones_in_level\
    \ = 0\n    var next_odd_stones = 0\n    var next_even_stones = 0\n    while stones_in_level\
    \ < n {\n        if n % 2 == 0 {\n            stones.append(next_even_stones)\n\
    \            next_even_stones = 0\n        } else {\n            stones.append(next_odd_stones)\n\
    \            next_odd_stones = 0\n        }\n        stones_in_level += 1\n  \
    \      n /= 2\n    }\n    stones.append(stones_in_level)\n    return stones\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp4arp4x2d.swift:27:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 1 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 1...n {\n        pile = pile.append(n % 2 == 0 ? n : n +\
    \ 2)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmprcn1iaia.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmprcn1iaia.swift:18:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(n % 2 == 0 ? n : n + 2)\n              \
    \ ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    if n % 2 == 0 {\n        stones = stones\
    \ + [n / 2]\n    } else {\n        stones = stones + [n / 2] + [n / 2]\n    }\n\
    \    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpj0i7f3s8/tmpj0i7f3s8.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4486d40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4486a37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4486a37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4486a367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0i7f3s8                        0x0000558398eac472 <unavailable> + 5234

    5    libc.so.6                          0x00002b4486f2c460 __libc_start_main +
    245

    6    tmpj0i7f3s8                        0x0000558398eac0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 1\n    var stones = n\n\
    \    while stones > 0 {\n        if stones % 2 == 1 {\n            pile.append(stones)\n\
    \            stones = stones / 2\n        } else {\n            pile.append(stones)\n\
    \            stones = stones / 2\n            pile.append(stones)\n          \
    \  stones = stones / 2\n        }\n        level++\n    }\n    return pile\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpxdae89nu.swift:26:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        } else {\n            result.append(n / 2)\n        }\n        n = n\
    \ / 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpnoa7t2qm.swift:23:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        } else {\n            result.append(n / 2)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmprz9r9o6f/tmprz9r9o6f.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef86ddac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef86ad1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef86ad1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef86ad07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprz9r9o6f                        0x00005633c14a55c2 <unavailable> + 5570

    5    libc.so.6                          0x00002aef86fc6460 __libc_start_main +
    245

    6    tmprz9r9o6f                        0x00005633c14a5209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979100
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = 0\n    while level < n\
    \ {\n        if n % 2 == 0 {\n            stones.append(n)\n            n /= 2\n\
    \        } else {\n            n /= 2\n            stones.append(n)\n        }\n\
    \        level++\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpoidr7_4h.swift:18:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmpoidr7_4h.swift:20:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 2\n            ~ ^\n/tmp/tmpoidr7_4h.swift:23:14: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        level++\n       \
    \      ^~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while n != 0 {\n\
    \        pile[level] = n\n        n -= n % 2 == 0 ? 2 : 3\n        level++\n \
    \   }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpghdji84a.swift:17:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= n % 2 == 0 ? 2 : 3\n        ~\
    \ ^\n/tmp/tmpghdji84a.swift:18:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 1\n    var stones = n\n\
    \    while stones > 0 {\n        if stones % 2 == 1 {\n            pile.append(stones)\n\
    \            stones /= 2\n        } else {\n            pile.append(stones)\n\
    \            stones /= 2\n            pile.append(stones)\n            stones\
    \ /= 2\n        }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpgoeh7g7s.swift:26:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var nextLevel = 0\n\
    \    var nextOdd = 0\n    var nextEven = 0\n    for _ in 0..<n {\n        if level\
    \ % 2 == 0 {\n            nextEven = nextEven + 1\n        } else {\n        \
    \    nextOdd = nextOdd + 1\n        }\n        pile.append(nextOdd)\n        pile.append(nextEven)\n\
    \        level = level + 1\n        nextLevel = nextLevel + 1\n        nextOdd\
    \ = nextOdd + 1\n        nextEven = nextEven + 1\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpdrmz8bhi/tmpdrmz8bhi.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31b5414c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31b510bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31b510b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31b510a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdrmz8bhi                        0x0000558f128435c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b31b5600460 __libc_start_main +
    245

    6    tmpdrmz8bhi                        0x0000558f12843209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979100
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile = append(pile, n / 2)\n    if n\
    \ % 2 == 0 {\n        pile = append(pile, n / 2)\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp6sv2vkn3.swift:14:12: error: cannot find 'append' in scope\n  \
    \  pile = append(pile, n / 2)\n           ^~~~~~\n/tmp/tmp6sv2vkn3.swift:16:16:\
    \ error: cannot find 'append' in scope\n        pile = append(pile, n / 2)\n \
    \              ^~~~~~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        pile[level] = stones\n        stones += (n %\
    \ 2 == 0) ? 1 : -1\n        n /= 2\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpknn5k22d.swift:19:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpknn5k22d.swift:20:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp11skr7o6.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while n != 0 {\n\
    \        pile[level] = n\n        n -= n % 2 == 0 ? 2 : 3\n        level++\n \
    \   }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpghdji84a.swift:17:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= n % 2 == 0 ? 2 : 3\n        ~\
    \ ^\n/tmp/tmpghdji84a.swift:18:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while level < n {\n\
    \        pile.append(level + 1)\n        if n % 2 == 0 {\n            pile.append(level\
    \ + 2)\n        }\n        n /= 2\n        level++\n    }\n    return pile\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpu3szdtuk.swift:20:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpu3szdtuk.swift:21:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n\
    \        pile.append(pile[n/2] + pile[n/2+1] + pile[n/2+2])\n    } else {\n  \
    \      pile.append(pile[n/2] + pile[n/2+1] + pile[n/2+2])\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0a335fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0a3056561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab0a3056286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab0a305613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab0a3055bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab0a2e55e83 <unavailable> + 188035

    6    tmp1a2i5akm                        0x000055a2d8507d3f <unavailable> + 7487

    7    tmp1a2i5akm                        0x000055a2d850744b <unavailable> + 5195

    8    libc.so.6                          0x00002ab0a354b460 __libc_start_main +
    245

    9    tmp1a2i5akm                        0x000055a2d8507169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659979100
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        } else {\n            result.append(n + 2)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpj7ekaxis/tmpj7ekaxis.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc56979c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc56670b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc56670988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc5666f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj7ekaxis                        0x00005634388f45c2 <unavailable> + 5570

    5    libc.so.6                          0x00002adc56b65460 __libc_start_main +
    245

    6    tmpj7ekaxis                        0x00005634388f4209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979099
