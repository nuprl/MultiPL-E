name: HumanEval_19_sort_numbers
language: swift
prompt: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to\
  \ largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\
  \nfunc sort_numbers(numbers: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
  \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") ==\
  \ \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine\
  \ eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
  \ \"six five four three two one zero\") == \"zero one two three four five six\")"
completions: ["    numbers = strings.TrimSpace(numbers)\n    numbers = strings.ToLower(numbers)\n\
    \    numbers = strings.Replace(numbers, \" \", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"1\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"2\", \"\", -1)\n    numbers = strings.Replace(numbers, \"3\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"4\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"5\", \"\", -1)\n    numbers = strings.Replace(numbers, \"6\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"7\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"8\", \"\", -1)\n    numbers = strings.Replace(numbers, \"9\", \"\", -1)\n\
    \    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"-\")\n    numbers = strings.Trim(numbers, \"0\")\n    numbers = strings.Trim(numbers,\
    \ \"1\")\n    numbers = strings.Trim(numbers, \"2\")\n    numbers = strings.Trim(numbers,\
    \ \"3\")\n    numbers = strings.Trim(numbers, \"4\")\n    numbers = strings.Trim(numbers,\
    \ \"5\")\n    numbers = strings.Trim(numbers, \"6\")\n    numbers = strings.Trim(numbers,\
    \ \"7\")\n    numbers = strings.Trim(numbers, \"8\")\n    numbers = strings.Trim(numbers,\
    \ \"9\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"-\")\n    numbers = strings.Trim(numbers, \"0\")\n    numbers = strings.Trim(numbers,\
    \ \"1\")\n    numbers = strings.Trim(numbers, \"2\")\n    numbers = strings.Trim(numbers,\
    \ \"3\")\n    numbers = strings.Trim(numbers, \"4\")\n    numbers = strings.Trim(numbers,\
    \ \"5\")\n    numbers = strings.Trim(numbers, \"6\")\n    numbers = strings.Trim(numbers,\
    \ \"7\")\n    numbers = strings.Trim(numbers, \"8\")\n    numbers = strings.Trim(numbers,\
    \ \"9\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"-\")\n    numbers = strings.Trim(numbers, \"0\")\n    numbers = strings.Trim(numbers,\
    \ \"1\")\n    numbers = strings.Trim(numbers, \"2\")\n    numbers = strings.Trim(numbers,\
    \ \"3\")\n    numbers = strings.Trim(numbers, \"4\")\n    numbers = strings.Trim(numbers,\
    \ \"5\")\n    numbers = strings.Trim(number", "\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \",\")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\n\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n", "\tnumbers = strings.TrimSpace(numbers)\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tsort.Strings(numbers)\n\treturn strings.Join(numbers, \" \")", "\t\
    numbers = strings.TrimSpace(numbers)\n\tnumbers := strings.Split(numbers, \" \"\
    )\n\tsort.Strings(numbers)\n\treturn strings.Join(numbers, \" \")", "\tnumbers\
    \ = strings.TrimSpace(numbers)\n\tnumbers = strings.ToLower(numbers)\n\tnumbers\
    \ = strings.Replace(numbers, \"zero\", \"0\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"one\", \"1\", -1)\n\tnumbers = strings.Replace(numbers, \"two\", \"2\", -1)\n\
    \tnumbers = strings.Replace(numbers, \"three\", \"3\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"four\", \"4\", -1)\n\tnumbers = strings.Replace(numbers, \"five\", \"5\",\
    \ -1)\n\tnumbers = strings.Replace(numbers, \"six\", \"6\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"seven\", \"7\", -1)\n\tnumbers = strings.Replace(numbers, \"eight\", \"8\"\
    , -1)\n\tnumbers = strings.Replace(numbers, \"nine\", \"9\", -1)\n\tnumbers =\
    \ strings.Trim(numbers, \" \")\n\tnumbers = strings.Trim(numbers, \"-\")\n\tnumbers\
    \ = strings.Trim(numbers, \",\")\n\tnumbers = strings.Trim(numbers, \" \")\n\t\
    return numbers", "\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\n\")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\t\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n", "    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.Trim", "  \
    \  numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(number", "\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers = strings.TrimSuffix(numbers, \".\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers = strings.TrimSuffix(numbers, \".\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers = strings.TrimSuffix(numbers, \".\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.Tri", "    var numbers = numbers.split(\" \").map{\
    \ Int($0) }\n    numbers.sort()\n    return numbers.map{ String($0) }.joined()",
  "\tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"0\")\n\tnumbers := strings.TrimSuffix(numbers, \"1\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"2\")\n\tnumbers := strings.TrimSuffix(numbers, \"3\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"4\")\n\tnumbers := strings.TrimSuffix(numbers, \"5\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"6\")\n\tnumbers := strings.TrimSuffix(numbers, \"7\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"8\")\n\tnumbers := strings.TrimSuffix(numbers, \"9\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"10\")\n\tnumbers := strings.TrimSuffix(numbers, \"11\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"12\")\n\tnumbers := strings.TrimSuffix(numbers, \"13\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"14\")\n\tnumbers := strings.TrimSuffix(numbers, \"15\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"16\")\n\tnumbers := strings.TrimSuffix(numbers, \"17\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"18\")\n\tnumbers := strings.TrimSuffix(numbers, \"19\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"20\")\n\tnumbers := strings.TrimSuffix(numbers, \"21\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"22\")\n\tnumbers := strings.TrimSuffix(numbers, \"23\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"24\")\n\tnumbers := strings.TrimSuffix(numbers, \"25\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"26\")\n\tnumbers := strings.TrimSuffix(numbers, \"27\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"28\")\n\tnumbers := strings.TrimSuffix(numbers, \"29\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"30\")\n\tnumbers := strings.TrimSuffix(numbers, \"31\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"32\")\n\tnumbers := strings.TrimSuffix(numbers, \"33\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"34\")\n\tnumbers := strings.TrimSuffix(numbers, \"35\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"36\")\n\tnumbers := strings.TrimSuffix(numbers, \"37\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"38\")\n", "\tnumbers = strings.TrimSpace(numbers)\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSpace(numbers)\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSpace(numbers)\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSpace(numbers)\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSpace(numbers)\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.Tri",
  "\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers, \"\
    \ \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers ", "    var numbers\
    \ = strings.Split(numbers, \" \")\n    numbers = append(numbers, \"zero\")\n \
    \   numbers = append(numbers, \"one\")\n    numbers = append(numbers, \"two\"\
    )\n    numbers = append(numbers, \"three\")\n    numbers = append(numbers, \"\
    four\")\n    numbers = append(numbers, \"five\")\n    numbers = append(numbers,\
    \ \"six\")\n    numbers = append(numbers, \"seven\")\n    numbers = append(numbers,\
    \ \"eight\")\n    numbers = append(numbers, \"nine\")\n    numbers = append(numbers,\
    \ \"ten\")\n    numbers = append(numbers, \"eleven\")\n    numbers = append(numbers,\
    \ \"twelve\")\n    numbers = append(numbers, \"thirteen\")\n    numbers = append(numbers,\
    \ \"fourteen\")\n    numbers = append(numbers, \"fifteen\")\n    numbers = append(numbers,\
    \ \"sixteen\")\n    numbers = append(numbers, \"seventeen\")\n    numbers = append(numbers,\
    \ \"eighteen\")\n    numbers = append(numbers, \"nineteen\")\n    numbers = append(numbers,\
    \ \"twenty\")\n    numbers = append(numbers, \"thirty\")\n    numbers = append(numbers,\
    \ \"forty\")\n    numbers = append(numbers, \"fifty\")\n    numbers = append(numbers,\
    \ \"sixty\")\n    numbers = append(numbers, \"seventy\")\n    numbers = append(numbers,\
    \ \"eighty\")\n    numbers = append(numbers, \"ninety\")\n    numbers = append(numbers,\
    \ \"hundred\")\n    numbers = append(numbers, \"thousand\")\n    numbers = append(numbers,\
    \ \"million\")\n    numbers = append(numbers, \"billion\")\n    numbers = append(numbers,\
    \ \"trillion\")\n    numbers = append(numbers, \"quadrillion\")\n    numbers =\
    \ append(numbers, \"quintillion\")\n    numbers = append(numbers, \"sextillion\"\
    )\n    numbers = append(numbers, \"septillion\")\n    numbers = append(numbers,\
    \ \"octillion\")\n    numbers = append(numbers, \"nonillion\")\n    numbers =\
    \ append(numbers, \"decillion\")\n    numbers = append(numbers, \"undecillion\"\
    )\n    numbers = append(numbers, \"duodecillion\")\n    numbers = append(numbers,\
    \ \"tredecillion\")\n    numbers = append(numbers, \"quattuordecillion\")\n  \
    \  numbers = append(numbers, \"quindecillion\")\n    numbers = append(numbers,\
    \ \"sexdecillion\")\n    numbers = append(numbers, \"septendecillion", "\tnumbers\
    \ = strings.TrimSpace(numbers)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsNumber)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsLetter)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsLower)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsUpper)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsLineBreak)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSurrogate)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsPunct)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSymbol)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\
    \t", "    var numbers = numbers.split(\" \").sorted()\n    return numbers.joinWithSeparator(\"\
    \ \")", "\tnumbers = strings.TrimSpace(numbers)\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tsort.Strings(numbers)\n\treturn strings.Join(numbers, \" \")", "\t\
    numbers = strings.TrimSpace(numbers)\n\tnumbers := strings.Split(numbers, \" \"\
    )\n\tsort.Strings(numbers)\n\treturn strings.Join(numbers, \" \")", "\tnumbers\
    \ = strings.TrimSpace(numbers)\n\tnumbers = strings.TrimSuffix(numbers, \" \"\
    )\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(number", "\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")"]
stop_tokens:
- "\n}"
