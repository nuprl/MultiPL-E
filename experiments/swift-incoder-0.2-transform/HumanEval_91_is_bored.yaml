name: HumanEval_91_is_bored
language: swift
prompt: "\n/// You'll be given a string of words, and your task is to count the number\n\
  /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n/// Sentences\
  \ are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(S: \"Hello\
  \ world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue. The sun is shining. I\
  \ love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
  \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
  \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
  \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\")\
  \ == 0)"
completions: ['    return is_bored_helper(S, "")', '    return is_bored(S: S, words:
    S.words)', '    return is_bored_helper(S, "", 0, 0, 0)', "    let boredoms = S.split(separator:\
    \ \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n    return boredoms", "    let\
    \ boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count", '    return is_bored_impl(S, "")', "    let boredoms\
    \ = S.components(separatedBy: \".?!\").filter {\n        !$0.isEmpty\n    }\n\
    \    return boredoms.count { $0.hasPrefix(\"I\") }", "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    return boredoms.filter({ $0.hasPrefix(\"I\") }).count", "    let\
    \ words = S.components(separatedBy: \".\")\n    let boredoms = words.filter({\
    \ $0.hasPrefix(\"I\") }).count\n    return boredoms", '    return is_bored_helper(S,
    "", 0, 0, 0)', "    let boredoms = S.components(separatedBy: \".?!\")\n    return\
    \ boredoms.count { $0.hasPrefix(\"I\") }", '    return is_bored_impl(S, "")',
  "    \n    // TODO: Write a function that takes a string and returns the number\
    \ of boredoms.\n    // HINT: Use a regular expression to find all sentences that\
    \ start with the word \"I\".\n    // HINT: You may want to use split() on the\
    \ sentence to split it into an array of words.\n    \n    // BEGIN PSEUDOCODE\n\
    \    \n    // END PSEUDOCODE\n    \n    return 0", '    return is_bored_impl(S,
    "")', "    // TODO: Your code here\n    return 0", "    \n    // TODO: Write a\
    \ function that takes a string and returns the number of boredoms.\n    // HINT:\
    \ You can use the split() function to split a string into a list of strings.\n\
    \    // Then you can check if the first element of the list equals \"I\".\n  \
    \  \n    return 0", '    return is_bored_helper(S, "", "")', "    \n    // TODO:\
    \ Write your code here\n    \n    return 0", "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n        .filter({$0.hasPrefix(\"I\")})\n        .count\n    return\
    \ boredoms", "    var boredoms = 0\n    for word in S.split(separator: \".?!\"\
    ) {\n        if word == \"I\" {\n            boredoms += 1\n        }\n    }\n\
    \    return boredoms"]
stop_tokens:
- "\n}"
