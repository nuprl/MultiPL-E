name: HumanEval_91_is_bored
language: swift
prompt: "\n/// You'll be given a string of words, and your task is to count the number\n\
  /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n/// Sentences\
  \ are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(S: \"Hello\
  \ world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue. The sun is shining. I\
  \ love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
  \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
  \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
  \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\")\
  \ == 0)"
completions: ['    return is_bored_helper(S, "")', '    return is_bored(S: S, words:
    S.words)', '    return is_bored_helper(S, "", 0, 0, 0)', "    let boredoms = S.split(separator:\
    \ \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n    return boredoms", "    let\
    \ boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count", '    return is_bored_impl(S, "")', "    let boredoms\
    \ = S.components(separatedBy: \".?!\").filter {\n        !$0.isEmpty\n    }\n\
    \    return boredoms.count { $0.hasPrefix(\"I\") }", "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    return boredoms.filter({ $0.hasPrefix(\"I\") }).count", "    let\
    \ words = S.components(separatedBy: \".\")\n    let boredoms = words.filter({\
    \ $0.hasPrefix(\"I\") }).count\n    return boredoms", '    return is_bored_helper(S,
    "", 0, 0, 0)', "    let boredoms = S.components(separatedBy: \".?!\")\n    return\
    \ boredoms.count { $0.hasPrefix(\"I\") }", '    return is_bored_impl(S, "")',
  "    \n    // TODO: Write a function that takes a string and returns the number\
    \ of boredoms.\n    // HINT: Use a regular expression to find all sentences that\
    \ start with the word \"I\".\n    // HINT: You may want to use split() on the\
    \ sentence to split it into an array of words.\n    \n    // BEGIN PSEUDOCODE\n\
    \    \n    // END PSEUDOCODE\n    \n    return 0", '    return is_bored_impl(S,
    "")', "    // TODO: Your code here\n    return 0", "    \n    // TODO: Write a\
    \ function that takes a string and returns the number of boredoms.\n    // HINT:\
    \ You can use the split() function to split a string into a list of strings.\n\
    \    // Then you can check if the first element of the list equals \"I\".\n  \
    \  \n    return 0", '    return is_bored_helper(S, "", "")', "    \n    // TODO:\
    \ Write your code here\n    \n    return 0", "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n        .filter({$0.hasPrefix(\"I\")})\n        .count\n    return\
    \ boredoms", "    var boredoms = 0\n    for word in S.split(separator: \".?!\"\
    ) {\n        if word == \"I\" {\n            boredoms += 1\n        }\n    }\n\
    \    return boredoms", '    return is_bored(S: S, words: nil)', "    \n    let\
    \ boredoms = S.components(separatedBy: \".?!\")\n    \n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count", "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n        .filter { $0.hasPrefix(\"I\") }\n        .count\n    return\
    \ boredoms", "    var boredoms = 0\n    for word in S.split(separator: \".?!\"\
    ) {\n        if word == \"I\" {\n            boredoms += 1\n        }\n    }\n\
    \    return boredoms", "    var boredoms = 0\n    var sentences = S.split(\".\"\
    )\n    for sentence in sentences {\n        if sentence.startsWith(\"I\") {\n\
    \            boredoms += 1\n        }\n    }\n    return boredoms", '    return
    is_bored(S: S, words: nil)', '    return is_bored(S: S, words: S.words)', "  \
    \  \n    let boredoms = S.components(separatedBy: \".?!\").filter { $0.hasPrefix(\"\
    I\") }\n    return boredoms.count", '    return is_bored_helper(S, "", 0, 0, 0)',
  '    return is_bored_impl(S, "")', '    return is_bored(S: S, words: nil)', "  \
    \  let boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n\
    \    return boredoms", "    let boredoms = S.components(separatedBy: \".?!\")\n\
    \    return boredoms.count { $0.hasPrefix(\"I\") }", "    let words = S.components(separatedBy:\
    \ \".\")\n    let boredoms = words.filter({ $0.hasPrefix(\"I\") })\n    return\
    \ boredoms.count", "    let boredoms = S.components(separatedBy: \".?!\")\n  \
    \  return boredoms.count { $0.starts(with: \"I\") }", "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    return boredoms.filter({ $0.hasPrefix(\"I\") }).count", "    let\
    \ boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n\
    \    return boredoms", "    var boredoms = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word == \"I\" {\n            boredoms += 1\n        }\n\
    \    }\n    return boredoms", '    return is_bored_helper(S, "", 0, 0, 0)', " \
    \   let boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n\
    \    return boredoms", "    \n    // TODO: Write a function that takes a string\
    \ and returns the number of boredoms.\n    // HINT: Use a regular expression to\
    \ find all the sentences that start with the word \"I\".\n    // HINT: Use a regular\
    \ expression to find all the sentences that end with the word \"!\".\n    // HINT:\
    \ Use a regular expression to find all the sentences that end with the word \"\
    ?\".\n    // HINT: Use a regular expression to find all the sentences that end\
    \ with the word \".\".\n    \n    return 0", "    \n    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    return boredoms.count { $0.starts(with: \"I\") }", "    var boredoms\
    \ = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with: \"\
    I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms", '    return
    is_bored(S: S, words: nil)', '    return is_bored_helper(S, "")', "    let boredoms\
    \ = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"I\")}\n    return\
    \ boredoms.count", "    var boredoms = 0\n    for s in S.split(separator: \".?!\"\
    ) {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n        }\n\
    \    }\n    return boredoms", "    let boredoms = S.filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count", '    return is_bored_helper(S, "", 0, 0, 0)',
  "    // TODO: implement the is_bored function\n    return 0", '    return is_bored_helper(S,
    "")', "    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n    \
    \    if s.starts(with: \"I\") {\n            boredoms += 1\n        }\n    }\n\
    \    return boredoms", "    guard let words = S.split(separator: \".?!\") else\
    \ {\n        return 0\n    }\n    return words.filter({ $0.hasPrefix(\"I\") }).count",
  '    return is_bored(S: S, words: nil)', "    var boredoms = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms", '    return is_bored(S: S, words: nil)',
  '    return is_bored_helper(S, "")', "    var boredoms = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms", "    var count = 0\n    for s in S.split(separator:\
    \ \".,?!\") {\n        if s.starts(with: \"I\") {\n            count += 1\n  \
    \      }\n    }\n    return count", "    let boredoms = S.split(separator: \"\
    .?!\").filter({ $0.hasPrefix(\"I\") }).count\n    return boredoms", '    return
    is_bored_helper(S, "", 0, 0, 0)', "    let words = S.split(separator: \".?!\"\
    ).map(String.init)\n    return words.filter({ $0.starts(with: \"I\") }).count",
  "    let boredoms = S.components(separatedBy: \".?!\")\n        .filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count", "    var bored = 0\n    for s in S.split(separator:\
    \ \".,?!\") {\n        if s.starts(with: \"I\") {\n            bored += 1\n  \
    \      }\n    }\n    return bored", '    return is_bored(S: S, words: nil)', '    return
    is_bored_helper(S, "", 0, 0, 0)', '    return is_bored_helper(S, "", 0, 0, 0)',
  '    return is_bored_helper(S, bored_chars, bored_chars.count)', "    let boredoms\
    \ = S.components(separatedBy: \".?!\").filter({$0.hasPrefix(\"I\")})\n    return\
    \ boredoms.count", '    return is_bored(S: S, words: nil)', "    let boredoms\
    \ = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n    return\
    \ boredoms", '    return is_bored_impl(S, "")', "    \n    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    \n    return boredoms.count { $0.hasPrefix(\"I\") }", '    return
    is_bored(S: S, delimiter: " ")', '    return is_bored(S: S, words: S.words)',
  "    \n    // TODO: Write a function that takes in a string and returns the number\
    \ of boredoms.\n    // HINT: You can use the split() function to split a string\
    \ into an array of strings.\n    // Then you can use a for loop to go through\
    \ each string in the array.\n    // If the string starts with the letter \"I\"\
    , you can increment a counter.\n    // After the for loop, return the counter.\n\
    \    \n    return 0", "    guard let S = S.split(separator: \".?!\").map(String.init)\
    \ else {\n        return 0\n    }\n    return S.filter({ $0.starts(with: \"I\"\
    ) }).count", "    let boredoms = S.components(separatedBy: \".?!\")\n        .filter\
    \ { $0.hasPrefix(\"I\") }\n        .count\n    return boredoms", "    guard let\
    \ S = S.split(separator: \".?!\").map(String.init) else {\n        return 0\n\
    \    }\n    return S.filter({ $0.hasPrefix(\"I\") }).count", "    var boredoms\
    \ = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with: \"\
    I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms", " \
    \   var count = 0\n    var last = 0\n    for s in S.split(separator: \".?!\")\
    \ {\n        if s.starts(with: \"I\") {\n            count += 1\n            last\
    \ = s.endIndex\n        }\n    }\n    return count - last", '    return is_bored(S:
    S, words: nil)', "    // Your code here\n    return 0", '    return is_bored(S:
    S, words: S.words)', "    // TODO: Write a function that takes in a string and\
    \ returns the number of boredoms.\n    // HINT: You can use the split() function\
    \ to split a string into an array of strings by a delimiter.\n    // For example,\
    \ S.split(\" \") would return an array of strings.\n    // Then use a for loop\
    \ to go through each string in the array and compare the first letter of the string\
    \ with \"I\".\n    // If it matches, add one to a counter.\n    // If no match\
    \ is found, return 0.\n    var boredoms = 0\n    var boredomStrings = S.split(separator:\
    \ \".\")\n    for boredomString in boredomStrings {\n        if boredomString.first!\
    \ == \"I\" {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  "    var count = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count", "   \
    \ var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  "    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.count\
    \ { $0.hasPrefix(\"I\") }", '    return is_bored_helper(S, "", 0, 0, 0)', "  \
    \  var count = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count", '    return
    is_bored_impl(S, "")', "    \n    // TODO: Write a function that takes a string\
    \ and returns the number of boredoms.\n    // HINT: You can use the split() method\
    \ to split a string into a list of strings.\n    // Then you can check if the\
    \ first element of the list equals \"I\".\n    \n    return 0", "    let boredoms\
    \ = S.components(separatedBy: \".?!\")\n        .filter { $0.hasPrefix(\"I\")\
    \ }\n        .count\n    return boredoms", '    return is_bored_helper(S, "",
    0, 0, 0)', "    let boredoms = S.components(separatedBy: \".?!\")\n    return\
    \ boredoms.count { $0.hasPrefix(\"I\") }", "    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n    return boredoms", '    return
    is_bored_helper(S, "", 0, 0, 0)', "    let words = S.components(separatedBy: \"\
    .?!\")\n    let boredoms = words.filter({ $0.hasPrefix(\"I\") }).count\n    return\
    \ boredoms", "    let words = S.components(separatedBy: \".\")\n    let boredoms\
    \ = words.filter { $0.hasPrefix(\"I\") }\n    return boredoms.count", '    return
    is_bored(S: S, words: nil)', "    let words = S.components(separatedBy: \".\"\
    )\n    let boredoms = words.filter({ $0.hasPrefix(\"I\") }).count\n    return\
    \ boredoms", '    return is_bored(S: S, words: S.words)', "    \n    // TODO:\
    \ Write a function that takes a string and returns the number of boredoms.\n \
    \   // HINT: Use a for loop to go through each character in the string and\n \
    \   // increment a counter if the character is a '.', '?' or '!'.\n    \n    return\
    \ 0", "    let words = S.components(separatedBy: \".\")\n    let boredoms = words.filter\
    \ { $0.hasPrefix(\"I\") }\n    return boredoms.count", '    return is_bored_helper(S,
    "", 0, 0, 0)', "    let words = S.split(separator: \".?!\").map(String.init)\n\
    \    return words.filter({ $0.hasPrefix(\"I\") }).count", "    let boredoms =\
    \ S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"I\")}\n    return boredoms.count",
  "    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count", "    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter { $0.hasPrefix(\"I\") }\n    return boredoms.count", '    return
    is_bored_helper(S, "", "")', "    var boredoms = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms", '    return is_bored_helper(S, "")',
  "    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count", "    let boredoms = S.split(separator: \".?!\"\
    ).filter({ $0.hasPrefix(\"I\") }).count\n    return boredoms", "    let boredoms\
    \ = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"I\")}\n    return\
    \ boredoms.count", "    \n    // TODO: Write a function that takes a string and\
    \ returns the number of boredoms.\n    // HINT: Use a regular expression to find\
    \ all sentences that start with the word \"I\".\n    // HINT: You can use the\
    \ count() method on strings.\n    \n    return 0", "    // Your code here\n  \
    \  var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  "    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count", '    return is_bored_helper(S, "", 0, 0, 0)',
  "    \n    // TODO: Write a function that takes in a string and returns the number\
    \ of boredoms.\n    // HINT: You can use the split() method and check if the string\
    \ starts with \"I\".\n    \n    return 0", '    return is_bored(S: S, words: nil)',
  "    \n    // TODO: Write a function that takes in a string and returns the number\
    \ of boredoms.\n    // HINT: Split the string into an array of strings by splitting\
    \ on \".\", \"?\", and \"!\".\n    // Then use a for loop to go through each string\
    \ in the array and check if the first letter of the string is \"I\".\n    // If\
    \ it is, add 1 to a variable that holds the number of boredoms.\n    \n    var\
    \ boredoms = 0\n    \n    return boredoms", "    var boredoms = 0\n    for s in\
    \ S.split(separator: \".?!\") {\n        if s.starts(with: \"I\") {\n        \
    \    boredoms += 1\n        }\n    }\n    return boredoms", '    return is_bored_helper(S,
    "")', "    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count", "    var boredoms = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms", '    return is_bored_impl(S)', '    return
    is_bored(S: S, words: S.words)', "    let boredoms = S.split(separator: \".?!\"\
    ).filter({ $0.starts(with: \"I\") }).count\n    return boredoms", "    var boredoms\
    \ = 0\n    var currentWord = \"\"\n    for word in S.split(separator: \".?!\"\
    ) {\n        if word == \"I\" {\n            boredoms += 1\n        }\n      \
    \  currentWord = word\n    }\n    return boredoms", '    return is_bored_impl(S,
    "")', "    let boredoms = S.components(separatedBy: \".?!\").filter {\n      \
    \  !$0.isEmpty && $0.hasPrefix(\"I\")\n    }.count\n    return boredoms", '    return
    is_bored_impl(S)', "    var boredoms = 0\n    var word = \"\"\n    for c in S\
    \ {\n        word = word + String(c)\n        if word == \"I\" {\n           \
    \ boredoms = boredoms + 1\n            word = \"\"\n        }\n    }\n    return\
    \ boredoms", "    guard let S = S.split(separator: \".?!\").map(String.init) else\
    \ {\n        return 0\n    }\n    return S.filter({ $0.starts(with: \"I\") }).count",
  "    var boredoms = 0\n    var i = 0\n    for word in S.split(separator: \".?!\"\
    ) {\n        if word == \"I\" {\n            boredoms += 1\n        }\n      \
    \  i += 1\n    }\n    return boredoms", '    return is_bored_impl(S, "")', " \
    \   let boredoms = S.components(separatedBy: \".?!\")\n        .filter { $0.hasPrefix(\"\
    I\") }\n        .count\n    return boredoms", "    var boredoms = 0\n    for s\
    \ in S.split(separator: \".?!\") {\n        if s.starts(with: \"I\") {\n     \
    \       boredoms += 1\n        }\n    }\n    return boredoms", "    // TODO: implement\
    \ a solution\n    return 0", "    let words = S.components(separatedBy: \".\"\
    )\n    let boredoms = words.filter({ $0.hasPrefix(\"I\") })\n    return boredoms.count",
  "    let boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n\
    \    return boredoms", "    let boredoms = S.components(separatedBy: \".?!\").filter\
    \ {\n        !$0.isEmpty && $0.first?.starts(with: \"I\") == true\n    }.count\n\
    \    return boredoms", '    return is_bored_helper(S, "")', "    \n    // TODO:\
    \ Write a function that takes a string and returns the number of boredoms.\n \
    \   // HINT: Use a regular expression to find all sentences that start with the\
    \ word \"I\".\n    // The function should return the number of boredoms.\n   \
    \ \n    return 0", "    let boredoms = S.components(separatedBy: \".?!\").filter\
    \ {\n        !$0.isEmpty && $0.hasPrefix(\"I\")\n    }.count\n    return boredoms",
  "    // TODO: fill this in.\n    return 0", "    let words = S.components(separatedBy:\
    \ \".?!\")\n    return words.filter({ $0.hasPrefix(\"I\") }).count", "    var\
    \ count = 0\n    for word in S.split(separator: \".?!\") {\n        if word ==\
    \ \"I\" {\n            count += 1\n        }\n    }\n    return count", "    //\
    \ TODO: implement a solution\n    return 0", "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    return boredoms.count { $0.hasPrefix(\"I\") }", "    let boredoms\
    \ = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"I\")}\n    return\
    \ boredoms.count", '    return is_bored_helper(S, bored_chars)', "    let boredoms\
    \ = S.components(separatedBy: \".?!\")\n    return boredoms.filter({ $0.hasPrefix(\"\
    I\") }).count", "    var boredoms = 0\n    for s in S.split(separator: \".?!\"\
    ) {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n        }\n\
    \    }\n    return boredoms", "    var boredoms = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms", "    var boredoms = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms", '    return is_bored_impl(S, "")', '    return
    is_bored_helper(S, "")', '    return is_bored(S: S, words: S.words)', '    return
    is_bored_impl(S, "")', '    return is_bored_helper(S, "")', '    return is_bored_helper(S,
    "")', "    let boredoms = S.components(separatedBy: \".?!\").filter({$0.hasPrefix(\"\
    I\")})\n    return boredoms.count", '    return is_bored_helper(S, "", 0, 0, 0)',
  '    return is_bored(S: S, words: ["I"])', "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    return boredoms.filter({ $0.hasPrefix(\"I\") }).count", "    var\
    \ boredoms = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n \
    \   var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n  \
    \  var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n   \
    \ var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var A = 0\n    var\
    \ B = 0\n    var C = 0\n    var D = 0\n    var E = 0\n    var F = 0\n    var G\
    \ = 0\n    var H = 0\n    var I = 0\n    var J = 0\n    var K = 0\n    var L =\
    \ 0\n    var M = 0\n    var N = 0\n    var O = 0\n    var P = 0\n    var Q = 0\n\
    \    var R = 0\n    var S = 0\n    var T = 0\n    var U = 0\n    var V = 0\n \
    \   var W = 0\n    var X = 0\n    var Y = 0\n    var Z = 0\n    var a = 0\n  \
    \  var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n   \
    \ var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var\
    \ l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q\
    \ = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v =\
    \ 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var A = 0\n\
    \    var B = 0\n    var C = 0\n    var D = 0\n    var E = 0\n    var F = 0\n \
    \   var G = 0\n    var H = 0\n    var I = 0\n    var J = 0\n    var K = 0\n  \
    \  var L = 0\n    var M = 0\n    var N = 0\n    var O = 0\n    var P = 0\n   \
    \ var Q = 0\n    var R = 0\n    var S = 0\n    var T = 0\n    var U = 0\n    var\
    \ V = 0\n    var W = 0\n    var X = 0\n    var Y = 0\n    var Z = 0\n    var a\
    \ = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f =\
    \ 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n\
    \    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n \
    \   var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n  \
    \  var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n   \
    \ var A = 0\n    var B = 0\n    var C = 0\n    var D = 0\n    var E = 0\n    var\
    \ F = 0\n", '    return is_bored_helper(S, "")', "    let words = S.components(separatedBy:\
    \ \".?!\")\n    let boredoms = words.filter({ $0.hasPrefix(\"I\") }).count\n \
    \   return boredoms", "    var boredoms = 0\n    for s in S.split(separator: \"\
    .?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n    \
    \    }\n    }\n    return boredoms", "    let words = S.split(separator: \".?!\"\
    ).map(String.init)\n    let boredoms = words.filter({ $0.starts(with: \"I\") }).count\n\
    \    return boredoms", "    var boredoms = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms", "    var boredoms = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms", '    return is_bored(S: S, words: S.words)',
  '    return is_bored_impl(S, "")', "    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter{$0.hasPrefix(\"I\")}\n    return boredoms.count", "    let boredoms\
    \ = S.components(separatedBy: \".?!\")\n    return boredoms.count { $0.hasPrefix(\"\
    I\") }", "    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n \
    \       if s.starts(with: \"I\") {\n            boredoms += 1\n        }\n   \
    \ }\n    return boredoms", '    return is_bored(S: S, words: nil)', '    return
    is_bored(S: S, words: nil)', '    return is_bored_helper(S, "")', "    // Your\
    \ code here\n    return 0", "    guard let S = S.trimmingCharacters(in: .whitespacesAndNewlines)\
    \ else {\n        return 0\n    }\n    \n    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter{ $0.hasPrefix(\"I\") }\n    return boredoms.count", '    return
    is_bored_impl(S, "")', "    var count = 0\n    for s in S.split(separator: \"\
    .?!\") {\n        if s.starts(with: \"I\") {\n            count += 1\n       \
    \ }\n    }\n    return count", "    let words = S.components(separatedBy: \".\"\
    )\n    let boredoms = words.filter({ $0.hasPrefix(\"I\") }).count\n    return\
    \ boredoms", '    return is_bored(S: S, words: nil)', "    var boredoms = 0\n\
    \    var boredomStart = 0\n    var boredomEnd = 0\n    var boredomString = \"\"\
    \n    for character in S {\n        switch character {\n        case \"I\":\n\
    \            boredomStart = 1\n        case \"!\":\n            boredomEnd = 1\n\
    \        default:\n            if boredomStart {\n                boredomString\
    \ = boredomString + character\n                boredomStart = boredomEnd = 0\n\
    \            } else {\n                boredomEnd = 1\n            }\n       \
    \ }\n    }\n    if boredomStart {\n        boredomString = boredomString + S\n\
    \        boredomStart = boredomEnd = 0\n    } else {\n        boredomEnd = 1\n\
    \    }\n    for character in boredomString {\n        switch character {\n   \
    \     case \"?\", \".\":\n            boredomEnd = 1\n        default:\n     \
    \       if boredomEnd {\n                boredoms = boredoms + 1\n           \
    \     boredomEnd = boredomStart = 0\n            } else {\n                boredomStart\
    \ = 1\n            }\n        }\n    }\n    return boredoms", "    guard let S\
    \ = S.lowercased() else {\n        return 0\n    }\n    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter({$0.hasPrefix(\"i\")})\n    return boredoms.count", "    let\
    \ words = S.components(separatedBy: \".\")\n    let boredoms = words.filter {\
    \ $0.hasPrefix(\"I\") }\n    return boredoms.count", "    let words = S.components(separatedBy:\
    \ \".\")\n    let boredoms = words.filter{$0.hasPrefix(\"I\")}\n    return boredoms.count",
  "    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  '    return is_bored_helper(S, "", 0, 0, 0)', "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    return boredoms.filter({ $0.hasPrefix(\"I\") }).count", '    return
    is_bored(S: S, words: nil)', "    var boredoms = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word == \"I\" {\n            boredoms += 1\n        }\n\
    \    }\n    return boredoms", '    return is_bored_helper(S, "", 0, 0, 0)', '    return
    is_bored(S: S, words: S.words)', '    return is_bored_helper(S, "")']
stop_tokens:
- "\n}"
