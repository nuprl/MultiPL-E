name: HumanEval_29_filter_by_prefix
language: swift
prompt: "\n/// Filter an input list of strings only for ones that start with a given\
  \ prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"a\")\n///\
  \ [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\", \"cde\",\
  \ \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
  \ [String], prefix: String) -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(filter_by_prefix(strings: [] as [String],\
  \ prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\"\
  , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"\
  xxx\", \"xxxAAA\", \"xxx\"])"
completions: ['    return filter_by_prefix(strings, prefix, true)', "    var filtered\
    \ = [String]()\n    for s in strings {\n        if s.startsWith(prefix) {\n  \
    \          filtered.append(s)\n        }\n    }\n    return filtered", '    return
    filter_by_prefix(strings, prefix, true)', "    guard strings.count > 0 else {\n\
    \        return strings\n    }\n    return strings.filter {\n        $0.hasPrefix(prefix)\n\
    \    }", "    var filtered = [String]()\n    for s in strings {\n        if s.startsWith(prefix)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", "    var filtered: [String] = []\n    for s in strings {\n      \
    \  if s.startsWith(prefix) {\n            filtered.append(s)\n        }\n    }\n\
    \    return filtered", '    return filter_by_prefix(strings, prefix, true)', " \
    \   var filtered = [String]()\n    for s in strings {\n        if s.startsWith(prefix)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", "    return strings.filter { (string) -> Bool in\n        let stringPrefix\
    \ = string.prefix(with: prefix)\n        return stringPrefix != nil\n    }", '    return
    filter_by_prefix(strings, prefix, true)', '    return filter_by_prefix(strings,
    prefix, true)', '    return filter_by_prefix(strings, prefix, true)', "    var\
    \ filtered = [String]()\n    for s in strings {\n        if s.startsWith(prefix)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", "    var filtered = strings\n    for s in strings {\n        if s.startsWith(prefix)\
    \ {\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ prefix.count)]\n            break\n        }\n    }\n    return filtered", " \
    \   if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty(prefix)\
    \ {\n        return strings\n    }\n    if strings.Contains(prefix) {\n      \
    \  return strings.filter {\n            $0.startsWith(prefix)\n        }\n   \
    \ }\n    return strings", "    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.Contains(prefix)\
    \ {\n        return strings.filter({ $0.hasPrefix(prefix) })\n    }\n    return\
    \ strings", "    if strings.IsEmpty() {\n        return strings\n    }\n    if\
    \ strings.IsEmpty() {\n        return strings\n    }\n    if strings.First().startsWith(prefix)\
    \ {\n        return strings.Skip(1).map(String)\n    }\n    return strings", '    return
    strings.filter({ $0.hasPrefix(prefix) })', '    return filter_by_prefix(strings,
    prefix, true)', '    return filter_by_prefix_helper(strings, prefix, false)']
stop_tokens:
- "\n}"
