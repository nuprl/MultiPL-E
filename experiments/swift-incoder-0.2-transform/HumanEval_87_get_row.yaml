name: HumanEval_87_get_row
language: swift
prompt: "\n/// You are given a 2 dimensional data, as a nested lists,\n/// which is\
  \ similar to matrix, however, unlike matrices,\n/// each row may contain a different\
  \ number of columns.\n/// Given lst, and integer x, find integers x in the list,\n\
  /// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n/// each tuple\
  \ is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates initially\
  \ by rows in ascending order.\n/// Also, sort coordinates of the row by columns\
  \ in descending order.\n/// Examples:\n/// >>> get_row(lst: [[1, 2, 3, 4, 5, 6],\
  \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], x: 1)\n/// [(0, 0), (1, 4), (1, 0), (2,\
  \ 5), (2, 0)]\n/// >>> get_row(lst: [] as [[Int]], x: 1)\n/// [] as [(Int, Int)]\n\
  /// >>> get_row(lst: [[] as [Int], [1], [1, 2, 3]], x: 3)\n/// [(2, 2)]\nfunc get_row(lst:\
  \ [[Int]], x: Int) -> [(Int, Int)] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(get_row(lst: [[1, 2, 3, 4, 5, 6], [1, 2,\
  \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], x: 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2,\
  \ 0)])\nassert(get_row(lst: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
  \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], x: 2) == [(0,\
  \ 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\nassert(get_row(lst: [[1, 2, 3, 4,\
  \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
  \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], x: 1) == [(0, 0), (1, 0), (2,\
  \ 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\
  assert(get_row(lst: [] as [[Int]], x: 1) == [] as [(Int, Int)])\nassert(get_row(lst:\
  \ [[1]], x: 2) == [] as [(Int, Int)])\nassert(get_row(lst: [[] as [Int], [1], [1,\
  \ 2, 3]], x: 3) == [(2, 2)])"
completions: ["    if lst.isEmpty() {\n        return [] as [(Int, Int)]\n    }\n\
    \    var row = [Int]()\n    var col = [Int]()\n    var rowIndex = 0\n    var colIndex\
    \ = 0\n    for row in lst {\n        if rowIndex == x {\n            break\n \
    \       }\n        colIndex = colIndex + row.count\n    }\n    for row in lst\
    \ {\n        if rowIndex == x {\n            break\n        }\n        col.insert(colIndex,\
    \ row.count)\n        colIndex++\n    }\n    col.sort()\n    col.sort(reverse:\
    \ true)\n    var result = [(Int, Int)]()\n    for row in lst {\n        if rowIndex\
    \ == x {\n            break\n        }\n        result.append((rowIndex, colIndex))\n\
    \        rowIndex++\n        colIndex = 0\n    }\n    return result", "    if\
    \ lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n    var col\
    \ = [Int]()\n    var rows = [Int]()\n    var cols = [Int]()\n    var i = 0\n \
    \   for row in lst {\n        if i == 0 {\n            cols = row\n        } else\
    \ {\n            rows.append(row)\n        }\n        i += 1\n    }\n    for row\
    \ in rows {\n        if row == x {\n            return [(row, col)]\n        }\n\
    \    }\n    return []", "    if lst.isEmpty() {\n        return []\n    }\n  \
    \  var row = [Int]()\n    var col = [Int]()\n    var result = [(Int, Int)]()\n\
    \    for row in lst {\n        for col in row {\n            if col == x {\n \
    \               result.append((row, col))\n            }\n        }\n    }\n \
    \   result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by: {$0.0 <\
    \ $1.0})\n    return result", "    if lst.isEmpty() {\n        return []\n   \
    \ }\n    var row = [Int]()\n    var coords = [(Int, Int)]()\n    for row in lst\
    \ {\n        coords = coords.sorted()\n        coords = coords.reversed()\n  \
    \      if coords.contains((x, 0)) {\n            return coords.map { ($0.0, $0.1)\
    \ }\n        }\n    }\n    return []", "    var row = [Int]()\n    var col = [Int]()\n\
    \    var rows = [Int]()\n    var cols = [Int]()\n    var i = 0\n    var j = 0\n\
    \    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n \
    \   var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n  \
    \  var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n   \
    \ var z = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var\
    \ m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r\
    \ = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w =\
    \ 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var i = 0\n    var j = 0\n\
    \    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n \
    \   var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n  \
    \  var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n   \
    \ var z = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var\
    \ m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r\
    \ = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w =\
    \ 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var i = 0\n    var j = 0\n\
    \    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n \
    \   var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n  \
    \  var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n   \
    \ var z = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var\
    \ m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r\
    \ = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w =\
    \ 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var i = 0\n    var j = 0\n\
    \    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n \
    \   var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n  \
    \  var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y", "    if\
    \ lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n    var coords\
    \ = [Int]()\n    var rowCoords = [Int]()\n    var rowCoordsSorted = [Int]()\n\
    \    var rowSorted = [Int]()\n    var rowSortedSorted = [Int]()\n    var rowCoordsSortedSorted\
    \ = [Int]()\n    var rowCoordsSortedSortedSorted = [Int]()\n    var rowCoordsSortedSortedSortedSorted\
    \ = [Int]()\n    var rowCoordsSortedSortedSortedSortedSorted = [Int]()\n    var\
    \ rowCoordsSortedSortedSortedSortedSorted = [Int]()\n    var rowCoordsSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowCoordsSortedSortedSortedSortedSortedSortedSorted = [Int]()\n\
    \    var rowCoordsSortedSortedSortedSortedSortedSortedSortedSorted = [Int]()\n\
    \    var rowCoordsSortedSortedSortedSortedSortedSortedSortedSortedSorted = [Int]()\n\
    \    var rowCoordsSortedSortedSortedSortedSortedSortedSortedSortedSorted = [Int]()\n\
    \    var rowCoordsSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowCoordsSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowCoordsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowCoordsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowCoordsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowCoordsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowCoordsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowCoordsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowCoordsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowCoordsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowCoordsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted",
  "    if lst.isEmpty {\n        return []\n    }\n    var row = [Int]()\n    var\
    \ coords = [(Int, Int)]()\n    for row in lst {\n        coords = coords.sorted()\n\
    \        coords = coords.reversed()\n        if coords.contains((x, 0)) {\n  \
    \          return coords.map { coord -> (Int, Int) in\n                return\
    \ (coord.0, coord.1)\n            }\n        }\n    }\n    return []", "    var\
    \ result = [(Int, Int)]()\n    if lst.isEmpty {\n        return result\n    }\n\
    \    var row = 0\n    var col = 0\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n    }\n    for col in row.indices {\n        result.append((row,\
    \ col))\n    }\n    return result", "    if lst.isEmpty() {\n        return []\
    \ as [(Int, Int)]\n    }\n    var row = [Int]()\n    var col = [Int]()\n    var\
    \ rows = [Int]()\n    var cols = [Int]()\n    var row_index = 0\n    var col_index\
    \ = 0\n    for row in lst {\n        if row_index == x {\n            return [(row_index,\
    \ col_index)]\n        }\n        for col in row {\n            if col_index ==\
    \ x {\n                rows.append(row_index)\n                cols.append(col_index)\n\
    \            }\n            col_index += 1\n        }\n        row_index += 1\n\
    \        col_index = 0\n    }\n    return [(row_index, col_index)]", "    if lst.isEmpty()\
    \ {\n        return []\n    }\n    var row = [Int]()\n    var coords = [(0, 0)]\n\
    \    for row in lst {\n        coords = coords.sorted()\n        coords = coords.reversed()\n\
    \        if coords.contains((x, 0)) {\n            return coords.map { coord ->\
    \ (Int, Int) in\n                return (coord.row, coord.0)\n            }\n\
    \        }\n    }\n    return []", "    if lst.isEmpty() {\n        return []\n\
    \    }\n    var row = [Int]()\n    var col = [Int]()\n    var result = [(Int,\
    \ Int)]()\n    for row in lst {\n        for col in row {\n            if col\
    \ == x {\n                result.append((row, col))\n            }\n        }\n\
    \    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ {$0.1 < $1.1})\n    return result", "    if lst.isEmpty() {\n        return\
    \ []\n    }\n    var row = [Int]()\n    var col = [Int]()\n    var i = 0\n   \
    \ for row in lst {\n        i += 1\n        if i == x {\n            return row\n\
    \        }\n    }\n    return []", "    if lst.isEmpty() {\n        return []\n\
    \    }\n    var row = [Int]()\n    var column = [Int]()\n    var result = [(Int,\
    \ Int)]()\n    for row in lst {\n        column = row\n        for column in row\
    \ {\n            if column == x {\n                result.append((row, column))\n\
    \            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ {$0.1 < $1.1})\n    return result", "    if lst.isEmpty() {\n        return\
    \ [] as [(Int, Int)]\n    }\n    if lst.count == 0 {\n        return [(Int, Int)]()\n\
    \    }\n    var row = [Int]()\n    var col = [Int]()\n    var i = 0\n    var j\
    \ = 0\n    var rowLen = 0\n    var colLen = 0\n    for row in lst {\n        rowLen\
    \ = row.count\n        if rowLen > colLen {\n            col = row\n         \
    \   colLen = rowLen\n        } else {\n            row = row\n            rowLen\
    \ = colLen\n        }\n        if i == x {\n            break\n        }\n   \
    \     i += 1\n    }\n    var result = [(Int, Int)]()\n    for row in lst {\n \
    \       if row.count == colLen {\n            for col in row {\n             \
    \   result.append((i, j))\n                i += 1\n            }\n        } else\
    \ {\n            for col in row {\n                result.append((i, j))\n   \
    \             i += 1\n            }\n        }\n    }\n    result.sortInPlace()\n\
    \    return result", "    if lst.isEmpty() {\n        return [] as [(Int, Int)]\n\
    \    }\n    var row = [Int]()\n    var column = [Int]()\n    var rows = [Int]()\n\
    \    var columns = [Int]()\n    var row_index = 0\n    var column_index = 0\n\
    \    var row_indexes = [Int]()\n    var column_indexes = [Int]()\n    var i =\
    \ 0\n    for row in lst {\n        column_index = 0\n        for column in row\
    \ {\n            if column_index == x {\n                row_indexes.append(row_index)\n\
    \                column_indexes.append(column_index)\n            }\n        \
    \    column_index += 1\n        }\n        row_index += 1\n    }\n    rows = row_indexes.sorted(by:\
    \ <)\n    columns = column_indexes.sorted(by: <)\n    var result = [Int]()\n \
    \   for index in 0..<columns.count {\n        result.append((rows[columns[index]],\
    \ columns[index]))\n    }\n    return result", "    if lst.isEmpty() {\n     \
    \   return []\n    }\n    var row = [Int]()\n    var col = [Int]()\n    var rows\
    \ = [Int]()\n    var cols = [Int]()\n    var rowIdx = 0\n    var colIdx = 0\n\
    \    for row in lst {\n        cols = row.slice()\n        cols.reverse()\n  \
    \      for col in cols {\n            if col == x {\n                rows.append(rowIdx)\n\
    \                cols.append(colIdx)\n            }\n        }\n        rowIdx++\n\
    \    }\n    rows.reverse()\n    cols.reverse()\n    return zip(rows, cols)", " \
    \   if lst.isEmpty {\n        return []\n    }\n    var row = [Int]()\n    var\
    \ col = [Int]()\n    var rows = [Int]()\n    var cols = [Int]()\n    var i = 0\n\
    \    var j = 0\n    for row in lst {\n        if i == 0 {\n            cols =\
    \ row.map { $0 }\n            cols = cols.reverse()\n        } else {\n      \
    \      cols = row.map { $0 + j }\n        }\n        if cols.contains(x) {\n \
    \           rows.append(i)\n            cols.append(x)\n        }\n        i +=\
    \ 1\n    }\n    rows.sort()\n    cols.sort()\n    return rows.map { i in\n   \
    \     return (i + 0, cols[i])\n    }", "    var coords = [(Int, Int)]()\n    var\
    \ row = 0\n    var col = 0\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row {\n        coords.append((row,\
    \ col))\n    }\n    coords.sortInPlace()\n    coords.sortInPlaceInDescendingOrder()\n\
    \    return coords", "    if lst.isEmpty() {\n        return []\n    }\n    var\
    \ row = [Int]()\n    var col = [Int]()\n    var i = 0\n    for row in lst {\n\
    \        if i == x {\n            return [(i, 0)]\n        }\n        i += 1\n\
    \    }\n    return []", "    if lst.isEmpty() {\n        return []\n    }\n  \
    \  var row = [Int]()\n    var column = [Int]()\n    var result = [(Int, Int)]()\n\
    \    for row in lst {\n        for column in row {\n            if column == x\
    \ {\n                result.append((row, column))\n            }\n        }\n\
    \    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ {$0.0 < $1.0})\n    return result"]
stop_tokens:
- "\n}"
