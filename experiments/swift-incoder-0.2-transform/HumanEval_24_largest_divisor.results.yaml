language: swift
name: HumanEval_24_largest_divisor
results:
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor * divisor > largestDivisor\
    \ {\n                largestDivisor = divisor\n            }\n        }\n    }\n\
    \    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpho53ryby/tmpho53ryby.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1fae99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1fab90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1fab90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1fab8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpho53ryby                        0x0000560e5bad9335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba1fb085460 __libc_start_main +
    245

    6    tmpho53ryby                        0x0000560e5bad8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpglvziu5o/tmpglvziu5o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef8721fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef86f16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef86f16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef86f157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglvziu5o                        0x000055f00043c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aef8740b460 __libc_start_main +
    245

    6    tmpglvziu5o                        0x000055f00043bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if divisor > maxDivisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpsdx7cl1a/tmpsdx7cl1a.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7b10c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7b0dbfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7b0dbf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7b0dbe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsdx7cl1a                        0x000055a19883f335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad7b12b4460 __libc_start_main +
    245

    6    tmpsdx7cl1a                        0x000055a19883efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor: Int = 0\n    var maxDivisorIndex: Int = 0\n\
    \    for index in 0..<n {\n        if n % index == 0 {\n            if maxDivisor\
    \ < index {\n                maxDivisor = index\n                maxDivisorIndex\
    \ = index\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002af14c88bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af14c582561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af14c582286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af14c58213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af14c581bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp_7re1eod                        0x000055a2ade986f9 <unavailable> + 5881

    6    tmp_7re1eod                        0x000055a2ade982c8 <unavailable> + 4808

    7    libc.so.6                          0x00002af14ca77460 __libc_start_main +
    245

    8    tmp_7re1eod                        0x000055a2ade97fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824512
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largestDivisor == 0 {\n       \
    \         largestDivisor = divisor\n            } else {\n                if divisor\
    \ > largestDivisor {\n                    largestDivisor = divisor\n         \
    \       }\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpe5vur5uz/tmpe5vur5uz.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9c57ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9c54c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9c54c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9c54c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe5vur5uz                        0x0000559bbc39e335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba9c59b8460 __libc_start_main +
    245

    6    tmpe5vur5uz                        0x0000559bbc39dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    var maxDivisor\
    \ = 1\n    var maxDividend = 1\n    for dividend := 2; dividend <= n; dividend\
    \ += 1 {\n        if n % dividend == 0 {\n            if dividend > maxDividend\
    \ {\n                maxDividend = dividend\n                maxDivisor = dividend\
    \ - 1\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpx01o87x_.swift:11:19: error: expected type\n    for dividend :=\
    \ 2; dividend <= n; dividend += 1 {\n                  ^\n                   <#type#>\n\
    /tmp/tmpx01o87x_.swift:11:19: error: expected 'in' after for-each pattern\n  \
    \  for dividend := 2; dividend <= n; dividend += 1 {\n                  ^\n/tmp/tmpx01o87x_.swift:11:19:\
    \ error: expected Sequence expression for for-each loop\n    for dividend := 2;\
    \ dividend <= n; dividend += 1 {\n                  ^\n"
  stdout: ''
  timestamp: 1659824512
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    while divisor\
    \ < n {\n        if n % divisor == 0 {\n            largest = divisor\n      \
    \  }\n        divisor++\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplxe05h21.swift:12:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        divisor++\n               ^~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(n)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            largestDivisor = divisor\n       \
    \ }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmp32g69vq3/tmp32g69vq3.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70cb305c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70caffcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70caffc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70caffb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp32g69vq3                        0x00005591c1914475 <unavailable> + 5237

    5    libc.so.6                          0x00002b70cb4f1460 __libc_start_main +
    245

    6    tmp32g69vq3                        0x00005591c1914129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int()\n    var divisor = Int()\n    for divisor\
    \ in 1...n {\n        if n % divisor == 0 {\n            if largest < divisor\
    \ {\n                largest = divisor\n            }\n        }\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: Exception
  stderr: 'tmp01x02o9l/tmp01x02o9l.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a3ae72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a3ab69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a3ab69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a3ab687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp01x02o9l                        0x000055ce13ca4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b0a3b05e460 __libc_start_main +
    245

    6    tmp01x02o9l                        0x000055ce13ca3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824512
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    var divisor = 1\n    for _ in 0..<n\
    \ {\n        if n % divisor == 0 {\n            divisor++\n            if divisor\
    \ > largest {\n                largest = divisor\n            }\n        } else\
    \ {\n            divisor = 1\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdyjr6qmw.swift:10:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            divisor++\n                   ^~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    var largestDivisorNum = Int()\n\
    \    var largestDivisorNumNum = Int()\n    var largestDivisorNumNumNum = Int()\n\
    \    var largestDivisorNumNumNumNum = Int()\n    var largestDivisorNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNum = Int()\n    var largestDivisorNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNum = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNum = Int()\n    var\
    \ largestDivisorNumNumNumNumNumNumNumNumNumNum = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNum = Int()\n\
    \    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNum = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNum = Int()\n\
    \    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNum = Int()\n    var\
    \ largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNum = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp6ogmv7r3.swift:17:9: error: invalid redeclaration of 'largestDivisorNumNumNumNumNumNumNumNumNumNum'\n\
    \    var largestDivisorNumNumNumNumNumNumNumNumNumNum = Int()\n        ^\n/tmp/tmp6ogmv7r3.swift:16:9:\
    \ note: 'largestDivisorNumNumNumNumNumNumNumNumNumNum' previously declared here\n\
    \    var largestDivisorNumNumNumNumNumNumNumNumNumNum = Int()\n        ^\n/tmp/tmp6ogmv7r3.swift:20:9:\
    \ error: invalid redeclaration of 'largestDivisorNumNumNumNumNumNumNumNumNumNumNumNum'\n\
    \    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNum = Int()\n        ^\n\
    /tmp/tmp6ogmv7r3.swift:19:9: note: 'largestDivisorNumNumNumNumNumNumNumNumNumNumNumNum'\
    \ previously declared here\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n        ^\n/tmp/tmp6ogmv7r3.swift:21:9: error: invalid redeclaration\
    \ of 'largestDivisorNumNumNumNumNumNumNumNumNumNumNumNum'\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n        ^\n/tmp/tmp6ogmv7r3.swift:19:9: note: 'largestDivisorNumNumNumNumNumNumNumNumNumNumNumNum'\
    \ previously declared here\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n        ^\n/tmp/tmp6ogmv7r3.swift:23:9: error: invalid redeclaration\
    \ of 'largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNum'\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n        ^\n/tmp/tmp6ogmv7r3.swift:22:9: note: 'largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNum'\
    \ previously declared here\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n        ^\n/tmp/tmp6ogmv7r3.swift:26:9: error: invalid redeclaration\
    \ of 'largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum'\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n        ^\n/tmp/tmp6ogmv7r3.swift:25:9: note: 'largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum'\
    \ previously declared here\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n        ^\n/tmp/tmp6ogmv7r3.swift:29:9: error: invalid redeclaration\
    \ of 'largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumN"
  stdout: ''
  timestamp: 1659824512
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi2eno16v/tmpi2eno16v.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50382afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5037fa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5037fa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5037fa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2eno16v                        0x000055e546d0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b503849b460 __libc_start_main +
    245

    6    tmpi2eno16v                        0x000055e546d0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    var divisor = 1\n    for _ in 0..<n\
    \ {\n        if n % divisor == 0 {\n            divisor++\n        } else {\n\
    \            divisor = 1\n        }\n        if divisor > largest {\n        \
    \    largest = divisor\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp2dlf5v37.swift:10:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            divisor++\n                   ^~\n"
  stdout: ''
  timestamp: 1659824512
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi2eno16v/tmpi2eno16v.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50382afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5037fa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5037fa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5037fa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2eno16v                        0x000055e546d0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b503849b460 __libc_start_main +
    245

    6    tmpi2eno16v                        0x000055e546d0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 0\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if divisor > maxDivisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpay9c82zb/tmpay9c82zb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af82e4b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af82e1aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af82e1ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af82e1ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpay9c82zb                        0x000055fc1845e335 <unavailable> + 4917

    5    libc.so.6                          0x00002af82e6a3460 __libc_start_main +
    245

    6    tmpay9c82zb                        0x000055fc1845dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor * divisor > n {\n         \
    \       largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmptivg_q3a/tmptivg_q3a.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7a7424c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7a711bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7a711b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7a711a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptivg_q3a                        0x00005557a3da7335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad7a7610460 __libc_start_main +
    245

    6    tmptivg_q3a                        0x00005557a3da6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824512
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(n)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            largestDivisor = divisor\n       \
    \ }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmp32g69vq3/tmp32g69vq3.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70cb305c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70caffcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70caffc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70caffb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp32g69vq3                        0x00005591c1914475 <unavailable> + 5237

    5    libc.so.6                          0x00002b70cb4f1460 __libc_start_main +
    245

    6    tmp32g69vq3                        0x00005591c1914129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largest_divisor(n: n, divisor: 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp082f82bu.swift:6:43: error: extra argument 'divisor' in call\n\
    \    return largest_divisor(n: n, divisor: 1)\n                          ~~~~~~~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1659824512
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpglvziu5o/tmpglvziu5o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef8721fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef86f16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef86f16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef86f157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglvziu5o                        0x000055f00043c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aef8740b460 __libc_start_main +
    245

    6    tmpglvziu5o                        0x000055f00043bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var largest = Int(n/2)\n\
    \    var divisor = 2\n    while divisor < n {\n        if n % divisor == 0 {\n\
    \            largest = divisor\n        }\n        divisor++\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: SyntaxError
  stderr: "/tmp/tmpyzr5eu5q.swift:15:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        divisor++\n               ^~\n"
  stdout: ''
  timestamp: 1659824512
