language: swift
name: HumanEval_24_largest_divisor
results:
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor * divisor > largestDivisor\
    \ {\n                largestDivisor = divisor\n            }\n        }\n    }\n\
    \    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpho53ryby/tmpho53ryby.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1fae99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1fab90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1fab90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1fab8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpho53ryby                        0x0000560e5bad9335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba1fb085460 __libc_start_main +
    245

    6    tmpho53ryby                        0x0000560e5bad8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpglvziu5o/tmpglvziu5o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef8721fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef86f16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef86f16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef86f157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglvziu5o                        0x000055f00043c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aef8740b460 __libc_start_main +
    245

    6    tmpglvziu5o                        0x000055f00043bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if divisor > maxDivisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpsdx7cl1a/tmpsdx7cl1a.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7b10c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7b0dbfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7b0dbf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7b0dbe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsdx7cl1a                        0x000055a19883f335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad7b12b4460 __libc_start_main +
    245

    6    tmpsdx7cl1a                        0x000055a19883efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor: Int = 0\n    var maxDivisorIndex: Int = 0\n\
    \    for index in 0..<n {\n        if n % index == 0 {\n            if maxDivisor\
    \ < index {\n                maxDivisor = index\n                maxDivisorIndex\
    \ = index\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002af14c88bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af14c582561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af14c582286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af14c58213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af14c581bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp_7re1eod                        0x000055a2ade986f9 <unavailable> + 5881

    6    tmp_7re1eod                        0x000055a2ade982c8 <unavailable> + 4808

    7    libc.so.6                          0x00002af14ca77460 __libc_start_main +
    245

    8    tmp_7re1eod                        0x000055a2ade97fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824512
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largestDivisor == 0 {\n       \
    \         largestDivisor = divisor\n            } else {\n                if divisor\
    \ > largestDivisor {\n                    largestDivisor = divisor\n         \
    \       }\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpe5vur5uz/tmpe5vur5uz.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9c57ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9c54c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9c54c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9c54c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe5vur5uz                        0x0000559bbc39e335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba9c59b8460 __libc_start_main +
    245

    6    tmpe5vur5uz                        0x0000559bbc39dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    var maxDivisor\
    \ = 1\n    var maxDividend = 1\n    for dividend := 2; dividend <= n; dividend\
    \ += 1 {\n        if n % dividend == 0 {\n            if dividend > maxDividend\
    \ {\n                maxDividend = dividend\n                maxDivisor = dividend\
    \ - 1\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpx01o87x_.swift:11:19: error: expected type\n    for dividend :=\
    \ 2; dividend <= n; dividend += 1 {\n                  ^\n                   <#type#>\n\
    /tmp/tmpx01o87x_.swift:11:19: error: expected 'in' after for-each pattern\n  \
    \  for dividend := 2; dividend <= n; dividend += 1 {\n                  ^\n/tmp/tmpx01o87x_.swift:11:19:\
    \ error: expected Sequence expression for for-each loop\n    for dividend := 2;\
    \ dividend <= n; dividend += 1 {\n                  ^\n"
  stdout: ''
  timestamp: 1659824512
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    while divisor\
    \ < n {\n        if n % divisor == 0 {\n            largest = divisor\n      \
    \  }\n        divisor++\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplxe05h21.swift:12:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        divisor++\n               ^~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(n)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            largestDivisor = divisor\n       \
    \ }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmp32g69vq3/tmp32g69vq3.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70cb305c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70caffcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70caffc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70caffb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp32g69vq3                        0x00005591c1914475 <unavailable> + 5237

    5    libc.so.6                          0x00002b70cb4f1460 __libc_start_main +
    245

    6    tmp32g69vq3                        0x00005591c1914129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int()\n    var divisor = Int()\n    for divisor\
    \ in 1...n {\n        if n % divisor == 0 {\n            if largest < divisor\
    \ {\n                largest = divisor\n            }\n        }\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: Exception
  stderr: 'tmp01x02o9l/tmp01x02o9l.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a3ae72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a3ab69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a3ab69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a3ab687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp01x02o9l                        0x000055ce13ca4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b0a3b05e460 __libc_start_main +
    245

    6    tmp01x02o9l                        0x000055ce13ca3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824512
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    var divisor = 1\n    for _ in 0..<n\
    \ {\n        if n % divisor == 0 {\n            divisor++\n            if divisor\
    \ > largest {\n                largest = divisor\n            }\n        } else\
    \ {\n            divisor = 1\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdyjr6qmw.swift:10:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            divisor++\n                   ^~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    var largestDivisorNum = Int()\n\
    \    var largestDivisorNumNum = Int()\n    var largestDivisorNumNumNum = Int()\n\
    \    var largestDivisorNumNumNumNum = Int()\n    var largestDivisorNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNum = Int()\n    var largestDivisorNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNum = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNum = Int()\n    var\
    \ largestDivisorNumNumNumNumNumNumNumNumNumNum = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNum = Int()\n\
    \    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNum = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNum = Int()\n\
    \    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNum = Int()\n    var\
    \ largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNum = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp6ogmv7r3.swift:17:9: error: invalid redeclaration of 'largestDivisorNumNumNumNumNumNumNumNumNumNum'\n\
    \    var largestDivisorNumNumNumNumNumNumNumNumNumNum = Int()\n        ^\n/tmp/tmp6ogmv7r3.swift:16:9:\
    \ note: 'largestDivisorNumNumNumNumNumNumNumNumNumNum' previously declared here\n\
    \    var largestDivisorNumNumNumNumNumNumNumNumNumNum = Int()\n        ^\n/tmp/tmp6ogmv7r3.swift:20:9:\
    \ error: invalid redeclaration of 'largestDivisorNumNumNumNumNumNumNumNumNumNumNumNum'\n\
    \    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNum = Int()\n        ^\n\
    /tmp/tmp6ogmv7r3.swift:19:9: note: 'largestDivisorNumNumNumNumNumNumNumNumNumNumNumNum'\
    \ previously declared here\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n        ^\n/tmp/tmp6ogmv7r3.swift:21:9: error: invalid redeclaration\
    \ of 'largestDivisorNumNumNumNumNumNumNumNumNumNumNumNum'\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n        ^\n/tmp/tmp6ogmv7r3.swift:19:9: note: 'largestDivisorNumNumNumNumNumNumNumNumNumNumNumNum'\
    \ previously declared here\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n        ^\n/tmp/tmp6ogmv7r3.swift:23:9: error: invalid redeclaration\
    \ of 'largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNum'\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n        ^\n/tmp/tmp6ogmv7r3.swift:22:9: note: 'largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNum'\
    \ previously declared here\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n        ^\n/tmp/tmp6ogmv7r3.swift:26:9: error: invalid redeclaration\
    \ of 'largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum'\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n        ^\n/tmp/tmp6ogmv7r3.swift:25:9: note: 'largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum'\
    \ previously declared here\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n        ^\n/tmp/tmp6ogmv7r3.swift:29:9: error: invalid redeclaration\
    \ of 'largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumN"
  stdout: ''
  timestamp: 1659824512
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi2eno16v/tmpi2eno16v.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50382afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5037fa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5037fa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5037fa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2eno16v                        0x000055e546d0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b503849b460 __libc_start_main +
    245

    6    tmpi2eno16v                        0x000055e546d0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    var divisor = 1\n    for _ in 0..<n\
    \ {\n        if n % divisor == 0 {\n            divisor++\n        } else {\n\
    \            divisor = 1\n        }\n        if divisor > largest {\n        \
    \    largest = divisor\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp2dlf5v37.swift:10:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            divisor++\n                   ^~\n"
  stdout: ''
  timestamp: 1659824512
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi2eno16v/tmpi2eno16v.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50382afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5037fa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5037fa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5037fa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2eno16v                        0x000055e546d0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b503849b460 __libc_start_main +
    245

    6    tmpi2eno16v                        0x000055e546d0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 0\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if divisor > maxDivisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpay9c82zb/tmpay9c82zb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af82e4b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af82e1aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af82e1ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af82e1ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpay9c82zb                        0x000055fc1845e335 <unavailable> + 4917

    5    libc.so.6                          0x00002af82e6a3460 __libc_start_main +
    245

    6    tmpay9c82zb                        0x000055fc1845dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor * divisor > n {\n         \
    \       largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmptivg_q3a/tmptivg_q3a.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7a7424c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7a711bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7a711b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7a711a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptivg_q3a                        0x00005557a3da7335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad7a7610460 __libc_start_main +
    245

    6    tmptivg_q3a                        0x00005557a3da6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824512
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(n)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            largestDivisor = divisor\n       \
    \ }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmp32g69vq3/tmp32g69vq3.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70cb305c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70caffcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70caffc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70caffb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp32g69vq3                        0x00005591c1914475 <unavailable> + 5237

    5    libc.so.6                          0x00002b70cb4f1460 __libc_start_main +
    245

    6    tmp32g69vq3                        0x00005591c1914129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largest_divisor(n: n, divisor: 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp082f82bu.swift:6:43: error: extra argument 'divisor' in call\n\
    \    return largest_divisor(n: n, divisor: 1)\n                          ~~~~~~~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1659824512
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpglvziu5o/tmpglvziu5o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef8721fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef86f16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef86f16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef86f157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglvziu5o                        0x000055f00043c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aef8740b460 __libc_start_main +
    245

    6    tmpglvziu5o                        0x000055f00043bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var largest = Int(n/2)\n\
    \    var divisor = 2\n    while divisor < n {\n        if n % divisor == 0 {\n\
    \            largest = divisor\n        }\n        divisor++\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: SyntaxError
  stderr: "/tmp/tmpyzr5eu5q.swift:15:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        divisor++\n               ^~\n"
  stdout: ''
  timestamp: 1659824512
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 0\n    var maxDivisorIndex = 0\n    for\
    \ i := 0; i < n; i++ {\n        if n % i == 0 {\n            if maxDivisor < i\
    \ {\n                maxDivisor = i\n                maxDivisorIndex = i\n   \
    \         }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp7mjgqwz0.swift:8:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp7mjgqwz0.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n       \
    \    ^\n/tmp/tmp7mjgqwz0.swift:8:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpglvziu5o/tmpglvziu5o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef8721fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef86f16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef86f16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef86f157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglvziu5o                        0x000055f00043c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aef8740b460 __libc_start_main +
    245

    6    tmpglvziu5o                        0x000055f00043bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 0\n    }\n    var largestDivisor\
    \ = 0\n    var largestDivisorIndex = 0\n    for i := 1; i <= n; i++ {\n      \
    \  if n % i == 0 {\n            if largestDivisor < i {\n                largestDivisor\
    \ = i\n                largestDivisorIndex = i\n            }\n        }\n   \
    \ }\n    return largestDivisorIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpktxc0j7e.swift:11:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpktxc0j7e.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n\
    \           ^\n/tmp/tmpktxc0j7e.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpglvziu5o/tmpglvziu5o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef8721fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef86f16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef86f16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef86f157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglvziu5o                        0x000055f00043c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aef8740b460 __libc_start_main +
    245

    6    tmpglvziu5o                        0x000055f00043bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    var largestDivisorRemainder\
    \ = Int()\n    var largestDivisorRemainder2 = Int()\n    var largestDivisorRemainder3\
    \ = Int()\n    var largestDivisorRemainder4 = Int()\n    var largestDivisorRemainder5\
    \ = Int()\n    var largestDivisorRemainder6 = Int()\n    var largestDivisorRemainder7\
    \ = Int()\n    var largestDivisorRemainder8 = Int()\n    var largestDivisorRemainder9\
    \ = Int()\n    var largestDivisorRemainder10 = Int()\n    var largestDivisorRemainder11\
    \ = Int()\n    var largestDivisorRemainder12 = Int()\n    var largestDivisorRemainder13\
    \ = Int()\n    var largestDivisorRemainder14 = Int()\n    var largestDivisorRemainder15\
    \ = Int()\n    var largestDivisorRemainder16 = Int()\n    var largestDivisorRemainder17\
    \ = Int()\n    var largestDivisorRemainder18 = Int()\n    var largestDivisorRemainder19\
    \ = Int()\n    var largestDivisorRemainder20 = Int()\n    var largestDivisorRemainder21\
    \ = Int()\n    var largestDivisorRemainder22 = Int()\n    var largestDivisorRemainder23\
    \ = Int()\n    var largestDivisorRemainder24 = Int()\n    var largestDivisorRemainder25\
    \ = Int()\n    var largestDivisorRemainder26 = Int()\n    var largestDivisorRemainder27\
    \ = Int()\n    var largestDivisorRemainder28 = Int()\n    var largestDivisorRemainder29\
    \ = Int()\n    var largestDivisorRemainder30 = Int()\n    var largestDivisorRemainder31\
    \ = Int()\n    var largestDivisorRemainder32 = Int()\n    var largestDivisorRemainder33\
    \ = Int()\n    var largestDivisorRemainder34 = Int()\n    var largestDivisorRemainder35\
    \ = Int()\n    var largestDivisorRemainder36 = Int()\n    var largestDivisorRemainder37\
    \ = Int()\n    var largestDivisorRemainder38 = Int()\n    var largestDivisorRemainder39\
    \ = Int()\n    var largestDivisorRemainder40 = Int()\n    var largestDivisorRemainder41\
    \ = Int()\n    var largestDivisorRemainder42 = Int()\n    var largestDivisorRemainder43\
    \ = Int()\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: SyntaxError
  stderr: "/tmp/tmp7eixn9nz.swift:6:9: warning: initialization of variable 'largestDivisor'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var largestDivisor = Int()\n    ~~~~^~~~~~~~~~~~~~\n    _\n/tmp/tmp7eixn9nz.swift:7:9:\
    \ warning: initialization of variable 'largestDivisorRemainder' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var largestDivisorRemainder\
    \ = Int()\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp7eixn9nz.swift:8:9:\
    \ warning: initialization of variable 'largestDivisorRemainder2' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var largestDivisorRemainder2\
    \ = Int()\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp7eixn9nz.swift:9:9:\
    \ warning: initialization of variable 'largestDivisorRemainder3' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var largestDivisorRemainder3\
    \ = Int()\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp7eixn9nz.swift:10:9:\
    \ warning: initialization of variable 'largestDivisorRemainder4' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var largestDivisorRemainder4\
    \ = Int()\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp7eixn9nz.swift:11:9:\
    \ warning: initialization of variable 'largestDivisorRemainder5' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var largestDivisorRemainder5\
    \ = Int()\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp7eixn9nz.swift:12:9:\
    \ warning: initialization of variable 'largestDivisorRemainder6' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var largestDivisorRemainder6\
    \ = Int()\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp7eixn9nz.swift:13:9:\
    \ warning: initialization of variable 'largestDivisorRemainder7' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var largestDivisorRemainder7\
    \ = Int()\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp7eixn9nz.swift:14:9:\
    \ warning: initialization of variable 'largestDivisorRemainder8' was never used;\
    \ consider replacin"
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 0\n    }\n    var maxDivisor =\
    \ 1\n    var maxDividend = n\n    for divisor in 2...n {\n        if n % divisor\
    \ == 0 {\n            if maxDividend % divisor == 0 {\n                maxDivisor\
    \ = divisor\n                maxDividend = n / divisor\n            }\n      \
    \  }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmp93i7m30h/tmp93i7m30h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36bad29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36baa20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36baa20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36baa1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp93i7m30h                        0x0000559ad7b55335 <unavailable> + 4917

    5    libc.so.6                          0x00002b36baf15460 __libc_start_main +
    245

    6    tmp93i7m30h                        0x0000559ad7b54fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 0\n    var maxDivisorIndex = 0\n    for\
    \ i := 1; i <= n; i++ {\n        if n % i == 0 {\n            if maxDivisor <\
    \ i {\n                maxDivisor = i\n                maxDivisorIndex = i\n \
    \           }\n        }\n    }\n    return maxDivisorIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpetip38h4.swift:8:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpetip38h4.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n      \
    \     ^\n/tmp/tmpetip38h4.swift:8:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpfpbe1p0i/tmpfpbe1p0i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41efcffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41ef9f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41ef9f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41ef9f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpbe1p0i                        0x000056133bdb3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b41efeeb460 __libc_start_main +
    245

    6    tmpfpbe1p0i                        0x000056133bdb2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpglvziu5o/tmpglvziu5o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef8721fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef86f16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef86f16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef86f157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglvziu5o                        0x000055f00043c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aef8740b460 __libc_start_main +
    245

    6    tmpglvziu5o                        0x000055f00043bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor * divisor > n {\n         \
    \       largestDivisor = divisor\n            } else {\n                largestDivisor\
    \ = n * divisor / divisor\n            }\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpb8r6w735/tmpb8r6w735.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb53ee7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb53bdeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb53bde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb53bdd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb8r6w735                        0x000055b845929335 <unavailable> + 4917

    5    libc.so.6                          0x00002aeb540d3460 __libc_start_main +
    245

    6    tmpb8r6w735                        0x000055b845928fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    var divisor = 0\n    for divisor\
    \ in 1...n {\n        if n % divisor == 0 {\n            if divisor > largestDivisor\
    \ {\n                largestDivisor = divisor\n            }\n        }\n    }\n\
    \    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpbj4j6duv/tmpbj4j6duv.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99b013ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99afe31b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99afe31988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99afe307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbj4j6duv                        0x0000563b483ee335 <unavailable> + 4917

    5    libc.so.6                          0x00002b99b0326460 __libc_start_main +
    245

    6    tmpbj4j6duv                        0x0000563b483edfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    var largestDivisorCount = 0\n\
    \    for number in 1...n {\n        if number % 2 == 0 {\n            if number\
    \ > largestDivisor {\n                largestDivisor = number\n              \
    \  largestDivisorCount = 1\n            } else {\n                largestDivisorCount\
    \ += 1\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp9kggkjna/tmp9kggkjna.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2cc9afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2cc6a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2cc6a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2cc6a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kggkjna                        0x0000561b9eb40335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad2ccb9b460 __libc_start_main +
    245

    6    tmp9kggkjna                        0x0000561b9eb3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in stride(from:\
    \ 2, through: n, by: 2) {\n        if n % divisor == 0 {\n            if largest\
    \ == 0 {\n                largestDivisor = divisor\n            } else {\n   \
    \             if largest < divisor {\n                    largestDivisor = divisor\n\
    \                }\n            }\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpv4pleoe3.swift:9:16: error: cannot find 'largest' in scope\n  \
    \          if largest == 0 {\n               ^~~~~~~\n/tmp/tmpv4pleoe3.swift:12:20:\
    \ error: cannot find 'largest' in scope\n                if largest < divisor\
    \ {\n                   ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    var divisor = 0\n    for divisor in\
    \ 1...n {\n        if n % divisor == 0 {\n            if largest < divisor {\n\
    \                largest = divisor\n            }\n        }\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: Exception
  stderr: 'tmp55fm4eft/tmp55fm4eft.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afadace3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afada9dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afada9da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afada9d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp55fm4eft                        0x000055b98bfcd335 <unavailable> + 4917

    5    libc.so.6                          0x00002afadaecf460 __libc_start_main +
    245

    6    tmp55fm4eft                        0x000055b98bfccfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largest == 0 {\n              \
    \  largestDivisor = divisor\n            } else {\n                if largest\
    \ < divisor {\n                    largestDivisor = divisor\n                }\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpryo_ogqt.swift:9:16: error: cannot find 'largest' in scope\n  \
    \          if largest == 0 {\n               ^~~~~~~\n/tmp/tmpryo_ogqt.swift:12:20:\
    \ error: cannot find 'largest' in scope\n                if largest < divisor\
    \ {\n                   ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largestDivisor == 0 || largestDivisor\
    \ > divisor {\n                largestDivisor = divisor\n            }\n     \
    \   }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpfxmfk2cg/tmpfxmfk2cg.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281c5d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281c2c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281c2c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281c2c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfxmfk2cg                        0x00005631dcb6942b <unavailable> + 5163

    5    libc.so.6                          0x00002b281c7bc460 __libc_start_main +
    245

    6    tmpfxmfk2cg                        0x00005631dcb68fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = Int(n)\n    var remainder\
    \ = Int(n)\n    while divisor > 0 {\n        remainder = n % divisor\n       \
    \ largest = divisor\n        divisor = Int(remainder)\n    }\n    return largest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpv4cd_wrj/tmpv4cd_wrj.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf2575dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf25454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf25454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf254537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4cd_wrj                        0x000055e9d2b39375 <unavailable> + 4981

    5    libc.so.6                          0x00002aaf25949460 __libc_start_main +
    245

    6    tmpv4cd_wrj                        0x000055e9d2b39029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if divisor > largestDivisor {\n  \
    \              largestDivisor = divisor\n            }\n        }\n    }\n   \
    \ return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpbb3_i07p/tmpbb3_i07p.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68d1493c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68d118ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68d118a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68d11897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbb3_i07p                        0x000055a3e112e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b68d167f460 __libc_start_main +
    245

    6    tmpbb3_i07p                        0x000055a3e112dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var maxDivisor =\
    \ 1\n    var maxDivider = n\n    for divider in 2..<n {\n        if n % divider\
    \ == 0 {\n            if divider > maxDivider {\n                maxDivider =\
    \ divider\n                maxDivisor = divider\n            }\n        }\n  \
    \  }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp3yzq7_c6/tmp3yzq7_c6.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d389b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d386aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d386ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d386ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3yzq7_c6                        0x000055c867aa942b <unavailable> + 5163

    5    libc.so.6                          0x00002b3d38ba3460 __libc_start_main +
    245

    6    tmp3yzq7_c6                        0x000055c867aa8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    for _ in 0..<n\
    \ {\n        if n % divisor == 0 {\n            divisor++\n        } else {\n\
    \            divisor = 1\n        }\n        if divisor > largest {\n        \
    \    largest = divisor\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpxcby9ql2.swift:10:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            divisor++\n                   ^~\n"
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpglvziu5o/tmpglvziu5o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef8721fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef86f16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef86f16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef86f157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglvziu5o                        0x000055f00043c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aef8740b460 __libc_start_main +
    245

    6    tmpglvziu5o                        0x000055f00043bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largestDivisor > divisor {\n  \
    \              largestDivisor = divisor\n            }\n        }\n    }\n   \
    \ return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpxj7rizm3/tmpxj7rizm3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64438fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64435f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64435f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64435f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxj7rizm3                        0x00005623e1ae242b <unavailable> + 5163

    5    libc.so.6                          0x00002b6443ae8460 __libc_start_main +
    245

    6    tmpxj7rizm3                        0x00005623e1ae1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpglvziu5o/tmpglvziu5o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef8721fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef86f16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef86f16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef86f157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglvziu5o                        0x000055f00043c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aef8740b460 __libc_start_main +
    245

    6    tmpglvziu5o                        0x000055f00043bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    var largestDivisorFactor = 1\n\
    \    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            largestDivisorFactor\
    \ = i\n            if largestDivisor < largestDivisorFactor {\n              \
    \  largestDivisor = largestDivisorFactor\n            }\n        }\n    }\n  \
    \  return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpd28_snyp.swift:8:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpd28_snyp.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n      \
    \     ^\n/tmp/tmpd28_snyp.swift:8:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if divisor > largestDivisor {\n  \
    \              largestDivisor = divisor\n            }\n        }\n    }\n   \
    \ return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpjyx5sb4m/tmpjyx5sb4m.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac61af82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac61ac79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac61ac79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac61ac787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjyx5sb4m                        0x0000556d55133335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac61b16e460 __libc_start_main +
    245

    6    tmpjyx5sb4m                        0x0000556d55132fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let mut largest = n;\n    let mut divisor = 1;\n    while\
    \ divisor < n {\n        if n % divisor == 0 {\n            largest = divisor;\n\
    \        }\n        divisor += 1;\n    }\n    return largest;\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpsg1jrui2.swift:6:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut largest\
    \ = n;\n            ^\n/tmp/tmpsg1jrui2.swift:6:13: note: join the identifiers\
    \ together\n    let mut largest = n;\n        ~~~~^~~~~~~\n        mutlargest\n\
    /tmp/tmpsg1jrui2.swift:6:13: note: join the identifiers together with camel-case\n\
    \    let mut largest = n;\n        ~~~~^~~~~~~\n        mutLargest\n/tmp/tmpsg1jrui2.swift:7:13:\
    \ error: found an unexpected second identifier in constant declaration; is there\
    \ an accidental break?\n    let mut divisor = 1;\n            ^\n/tmp/tmpsg1jrui2.swift:7:13:\
    \ note: join the identifiers together\n    let mut divisor = 1;\n        ~~~~^~~~~~~\n\
    \        mutdivisor\n/tmp/tmpsg1jrui2.swift:7:13: note: join the identifiers together\
    \ with camel-case\n    let mut divisor = 1;\n        ~~~~^~~~~~~\n        mutDivisor\n\
    /tmp/tmpsg1jrui2.swift:7:9: error: invalid redeclaration of 'mut'\n    let mut\
    \ divisor = 1;\n        ^\n/tmp/tmpsg1jrui2.swift:6:9: note: 'mut' previously\
    \ declared here\n    let mut largest = n;\n        ^\n/tmp/tmpsg1jrui2.swift:8:11:\
    \ error: cannot find 'divisor' in scope\n    while divisor < n {\n          ^~~~~~~\n\
    /tmp/tmpsg1jrui2.swift:9:16: error: cannot find 'divisor' in scope\n        if\
    \ n % divisor == 0 {\n               ^~~~~~~\n/tmp/tmpsg1jrui2.swift:10:13: error:\
    \ cannot find 'largest' in scope\n            largest = divisor;\n           \
    \ ^~~~~~~\n/tmp/tmpsg1jrui2.swift:10:23: error: cannot find 'divisor' in scope\n\
    \            largest = divisor;\n                      ^~~~~~~\n/tmp/tmpsg1jrui2.swift:12:9:\
    \ error: cannot find 'divisor' in scope\n        divisor += 1;\n        ^~~~~~~\n\
    /tmp/tmpsg1jrui2.swift:14:12: error: cannot find 'largest' in scope\n    return\
    \ largest;\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978467
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let mut largest_divisor = n;\n    let mut max_divisor = 1;\n\
    \n    while max_divisor < n {\n        max_divisor *= 2;\n        if max_divisor\
    \ > n {\n            max_divisor = n;\n        }\n    }\n\n    while max_divisor\
    \ > 1 {\n        if n % max_divisor == 0 {\n            largest_divisor = max_divisor;\n\
    \        }\n        max_divisor /= 2;\n    }\n\n    return largest_divisor;\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpt4tnf1q2.swift:6:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut largest_divisor\
    \ = n;\n            ^\n/tmp/tmpt4tnf1q2.swift:6:13: note: join the identifiers\
    \ together\n    let mut largest_divisor = n;\n        ~~~~^~~~~~~~~~~~~~~\n  \
    \      mutlargest_divisor\n/tmp/tmpt4tnf1q2.swift:6:13: note: join the identifiers\
    \ together with camel-case\n    let mut largest_divisor = n;\n        ~~~~^~~~~~~~~~~~~~~\n\
    \        mutLargest_divisor\n/tmp/tmpt4tnf1q2.swift:7:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut max_divisor = 1;\n            ^\n/tmp/tmpt4tnf1q2.swift:7:13: note:\
    \ join the identifiers together\n    let mut max_divisor = 1;\n        ~~~~^~~~~~~~~~~\n\
    \        mutmax_divisor\n/tmp/tmpt4tnf1q2.swift:7:13: note: join the identifiers\
    \ together with camel-case\n    let mut max_divisor = 1;\n        ~~~~^~~~~~~~~~~\n\
    \        mutMax_divisor\n/tmp/tmpt4tnf1q2.swift:7:9: error: invalid redeclaration\
    \ of 'mut'\n    let mut max_divisor = 1;\n        ^\n/tmp/tmpt4tnf1q2.swift:6:9:\
    \ note: 'mut' previously declared here\n    let mut largest_divisor = n;\n   \
    \     ^\n/tmp/tmpt4tnf1q2.swift:9:11: error: cannot find 'max_divisor' in scope\n\
    \    while max_divisor < n {\n          ^~~~~~~~~~~\n/tmp/tmpt4tnf1q2.swift:10:9:\
    \ error: cannot find 'max_divisor' in scope\n        max_divisor *= 2;\n     \
    \   ^~~~~~~~~~~\n/tmp/tmpt4tnf1q2.swift:11:12: error: cannot find 'max_divisor'\
    \ in scope\n        if max_divisor > n {\n           ^~~~~~~~~~~\n/tmp/tmpt4tnf1q2.swift:12:13:\
    \ error: cannot find 'max_divisor' in scope\n            max_divisor = n;\n  \
    \          ^~~~~~~~~~~\n/tmp/tmpt4tnf1q2.swift:16:11: error: cannot find 'max_divisor'\
    \ in scope\n    while max_divisor > 1 {\n          ^~~~~~~~~~~\n/tmp/tmpt4tnf1q2.swift:17:16:\
    \ error: cannot find 'max_divisor' in scope\n        if n % max_divisor == 0 {\n\
    \               ^~~~~~~~~~~\n/tmp/tmpt4tnf1q2.swift:18:31: error: cannot find\
    \ 'max_divisor' in scope\n            largest_divisor = max_divisor;\n       \
    \   "
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor * divisor > n {\n         \
    \       largestDivisor = divisor\n            } else {\n                largestDivisor\
    \ = largestDivisor * divisor < n ? divisor * divisor : n\n            }\n    \
    \    }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmplj2a0t_9/tmplj2a0t_9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d732e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d72fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d72fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d72fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplj2a0t_9                        0x000055a58c9d5335 <unavailable> + 4917

    5    libc.so.6                          0x00002b3d734d5460 __libc_start_main +
    245

    6    tmplj2a0t_9                        0x000055a58c9d4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpfpbe1p0i/tmpfpbe1p0i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41efcffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41ef9f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41ef9f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41ef9f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpbe1p0i                        0x000056133bdb3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b41efeeb460 __libc_start_main +
    245

    6    tmpfpbe1p0i                        0x000056133bdb2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            max_divisor = divisor\n        }\n    }\n\
    \    return max_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe62g3g1r/tmpe62g3g1r.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86aaa9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86aa796b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86aa796988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86aa7957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe62g3g1r                        0x000055b1a7313335 <unavailable> + 4917

    5    libc.so.6                          0x00002b86aac8b460 __libc_start_main +
    245

    6    tmpe62g3g1r                        0x000055b1a7312fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 0\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if maxDivisor < divisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpkfa1k4mm/tmpkfa1k4mm.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af10bb27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af10b81eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af10b81e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af10b81d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkfa1k4mm                        0x0000559fdbdc3335 <unavailable> + 4917

    5    libc.so.6                          0x00002af10bd13460 __libc_start_main +
    245

    6    tmpkfa1k4mm                        0x0000559fdbdc2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpglvziu5o/tmpglvziu5o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef8721fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef86f16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef86f16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef86f157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglvziu5o                        0x000055f00043c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aef8740b460 __libc_start_main +
    245

    6    tmpglvziu5o                        0x000055f00043bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor * divisor > n {\n         \
    \       largestDivisor = divisor\n            } else {\n                break\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpuithd3x4/tmpuithd3x4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b479c4d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b479c1c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b479c1c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b479c1c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuithd3x4                        0x000055a83f348335 <unavailable> + 4917

    5    libc.so.6                          0x00002b479c6bd460 __libc_start_main +
    245

    6    tmpuithd3x4                        0x000055a83f347fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi2eno16v/tmpi2eno16v.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50382afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5037fa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5037fa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5037fa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2eno16v                        0x000055e546d0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b503849b460 __libc_start_main +
    245

    6    tmpi2eno16v                        0x000055e546d0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    while divisor\
    \ < n {\n        if n % divisor == 0 {\n            largest = divisor\n      \
    \  }\n        divisor *= 2\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpq1e3r0tu/tmpq1e3r0tu.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76e72f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76e6feab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76e6fea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76e6fe97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq1e3r0tu                        0x000055de49d1e46b <unavailable> + 5227

    5    libc.so.6                          0x00002b76e74df460 __libc_start_main +
    245

    6    tmpq1e3r0tu                        0x000055de49d1e029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if largestDivisor == 0 {\n           \
    \     largestDivisor = divisor\n            } else {\n                if divisor\
    \ > largestDivisor {\n                    largestDivisor = divisor\n         \
    \       }\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp37lvc69a/tmp37lvc69a.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b360f471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b360f168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b360f168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b360f1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp37lvc69a                        0x00005638adbcb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b360f65d460 __libc_start_main +
    245

    6    tmp37lvc69a                        0x00005638adbcafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 0\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if divisor > maxDivisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpay9c82zb/tmpay9c82zb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af82e4b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af82e1aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af82e1ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af82e1ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpay9c82zb                        0x000055fc1845e335 <unavailable> + 4917

    5    libc.so.6                          0x00002af82e6a3460 __libc_start_main +
    245

    6    tmpay9c82zb                        0x000055fc1845dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    while divisor\
    \ < n {\n        if n % divisor == 0 {\n            largest = divisor\n      \
    \  }\n        divisor++\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplxe05h21.swift:12:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        divisor++\n               ^~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpfpbe1p0i/tmpfpbe1p0i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41efcffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41ef9f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41ef9f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41ef9f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpbe1p0i                        0x000056133bdb3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b41efeeb460 __libc_start_main +
    245

    6    tmpfpbe1p0i                        0x000056133bdb2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var max_divisor\
    \ = 0\n    var max_divisor_value = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if divisor > max_divisor {\n                max_divisor\
    \ = divisor\n                max_divisor_value = divisor\n            }\n    \
    \    }\n    }\n    return max_divisor_value\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpymqfsq8f/tmpymqfsq8f.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a72fb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a72ca7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a72ca7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a72ca67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpymqfsq8f                        0x000055738ac04335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9a7319c460 __libc_start_main +
    245

    6    tmpymqfsq8f                        0x000055738ac03fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(n)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            largestDivisor = divisor\n       \
    \ }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmp32g69vq3/tmp32g69vq3.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70cb305c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70caffcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70caffc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70caffb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp32g69vq3                        0x00005591c1914475 <unavailable> + 5237

    5    libc.so.6                          0x00002b70cb4f1460 __libc_start_main +
    245

    6    tmp32g69vq3                        0x00005591c1914129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largest_divisor(n: n, divisor: 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp082f82bu.swift:6:43: error: extra argument 'divisor' in call\n\
    \    return largest_divisor(n: n, divisor: 1)\n                          ~~~~~~~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1659824512
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    var divisor = 0\n    for divisor\
    \ in 1...n {\n        if n % divisor == 0 {\n            if divisor * divisor\
    \ > largestDivisor {\n                largestDivisor = divisor\n            }\n\
    \        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpf1vs2xkn/tmpf1vs2xkn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e306c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e303bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e303bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e303be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf1vs2xkn                        0x0000563021cc3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b7e308b4460 __libc_start_main +
    245

    6    tmpf1vs2xkn                        0x0000563021cc2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = Int(n)\n    for divisor in 1...Int(Int(n)\
    \ / 2) {\n        if n % divisor == 0 {\n            maxDivisor = divisor\n  \
    \      }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978467
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largest == 0 {\n              \
    \  largestDivisor = divisor\n            } else {\n                if largest\
    \ < divisor {\n                    largest = divisor\n                }\n    \
    \        }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpljxyo4d9.swift:9:16: error: cannot find 'largest' in scope\n  \
    \          if largest == 0 {\n               ^~~~~~~\n/tmp/tmpljxyo4d9.swift:12:20:\
    \ error: cannot find 'largest' in scope\n                if largest < divisor\
    \ {\n                   ^~~~~~~\n/tmp/tmpljxyo4d9.swift:13:21: error: cannot find\
    \ 'largest' in scope\n                    largest = divisor\n                \
    \    ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpfpbe1p0i/tmpfpbe1p0i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41efcffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41ef9f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41ef9f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41ef9f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpbe1p0i                        0x000056133bdb3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b41efeeb460 __libc_start_main +
    245

    6    tmpfpbe1p0i                        0x000056133bdb2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 0\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if divisor > maxDivisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpay9c82zb/tmpay9c82zb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af82e4b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af82e1aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af82e1ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af82e1ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpay9c82zb                        0x000055fc1845e335 <unavailable> + 4917

    5    libc.so.6                          0x00002af82e6a3460 __libc_start_main +
    245

    6    tmpay9c82zb                        0x000055fc1845dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    var maxDivisor\
    \ = 1\n    var maxDivisorIndex = -1\n    var divisor = 1\n    for i := 2; i <=\
    \ n; i++ {\n        divisor = i\n        if n % divisor == 0 {\n            maxDivisorIndex\
    \ = i\n            maxDivisor = divisor\n        }\n    }\n    return maxDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpku60q4ly.swift:12:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpku60q4ly.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpku60q4ly.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978467
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 0\n    }\n    var max_divisor\
    \ = 0\n    var max_divisor_index = 0\n    for i := 0; i < n; i++ {\n        if\
    \ n % i == 0 {\n            if max_divisor < i {\n                max_divisor\
    \ = i\n                max_divisor_index = i\n            }\n        }\n    }\n\
    \    return max_divisor_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpn71rwdlz.swift:11:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpn71rwdlz.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n\
    \           ^\n/tmp/tmpn71rwdlz.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978467
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largest_divisor(n: n, divisor: 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp082f82bu.swift:6:43: error: extra argument 'divisor' in call\n\
    \    return largest_divisor(n: n, divisor: 1)\n                          ~~~~~~~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1659824512
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if divisor > maxDivisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpsdx7cl1a/tmpsdx7cl1a.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7b10c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7b0dbfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7b0dbf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7b0dbe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsdx7cl1a                        0x000055a19883f335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad7b12b4460 __libc_start_main +
    245

    6    tmpsdx7cl1a                        0x000055a19883efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int()\n    for divisor in stride(from: n, through:\
    \ 0, by: -1) {\n        if n % divisor == 0 {\n            largest = divisor\n\
    \            break\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp7xnapwll/tmp7xnapwll.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b498fe5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b498fb55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b498fb55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b498fb547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7xnapwll                        0x00005595d8924475 <unavailable> + 5237

    5    libc.so.6                          0x00002b499004a460 __libc_start_main +
    245

    6    tmp7xnapwll                        0x00005595d8924129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var max_divisor\
    \ = 1\n    var max_divisor_index = 0\n    for i := 1; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            if max_divisor < i {\n                max_divisor\
    \ = i\n                max_divisor_index = i\n            }\n        }\n    }\n\
    \    return max_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpqaih47k8.swift:11:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpqaih47k8.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n\
    \           ^\n/tmp/tmpqaih47k8.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    var divisor = 0\n    for divisor\
    \ in 1...n {\n        if n % divisor == 0 {\n            if divisor * divisor\
    \ > largestDivisor {\n                largestDivisor = divisor\n            }\n\
    \        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpf1vs2xkn/tmpf1vs2xkn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e306c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e303bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e303bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e303be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf1vs2xkn                        0x0000563021cc3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b7e308b4460 __libc_start_main +
    245

    6    tmpf1vs2xkn                        0x0000563021cc2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var largest = 0\n\
    \    var divisor = 2\n    while divisor < n {\n        if n % divisor == 0 {\n\
    \            largest = divisor\n        }\n        divisor++\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_z412518.swift:15:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        divisor++\n               ^~\n"
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpfpbe1p0i/tmpfpbe1p0i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41efcffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41ef9f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41ef9f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41ef9f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpbe1p0i                        0x000056133bdb3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b41efeeb460 __libc_start_main +
    245

    6    tmpfpbe1p0i                        0x000056133bdb2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if maxDivisor < divisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpcsr5u3iv/tmpcsr5u3iv.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37d9298c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37d8f8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37d8f8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37d8f8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcsr5u3iv                        0x00005616b36ef335 <unavailable> + 4917

    5    libc.so.6                          0x00002b37d9484460 __libc_start_main +
    245

    6    tmpcsr5u3iv                        0x00005616b36eefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    for _ in 0..<n\
    \ {\n        if n % divisor == 0 {\n            divisor++\n        } else {\n\
    \            divisor = 1\n        }\n        if divisor > largest {\n        \
    \    largest = divisor\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpxcby9ql2.swift:10:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            divisor++\n                   ^~\n"
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if maxDivisor < divisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpcsr5u3iv/tmpcsr5u3iv.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37d9298c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37d8f8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37d8f8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37d8f8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcsr5u3iv                        0x00005616b36ef335 <unavailable> + 4917

    5    libc.so.6                          0x00002b37d9484460 __libc_start_main +
    245

    6    tmpcsr5u3iv                        0x00005616b36eefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor * divisor > n {\n         \
    \       return largestDivisor\n            }\n            largestDivisor = divisor\n\
    \        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpr3mb3sxb/tmpr3mb3sxb.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5deb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5de883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5de883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5de8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr3mb3sxb                        0x000055583578442b <unavailable> + 5163

    5    libc.so.6                          0x00002ba5ded78460 __libc_start_main +
    245

    6    tmpr3mb3sxb                        0x0000555835783fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    var largestDivisorRemainder\
    \ = Int(0)\n    for number in 1...n {\n        if number % 2 == 0 {\n        \
    \    if number > largestDivisor {\n                largestDivisor = number\n \
    \               largestDivisorRemainder = Int(0)\n            }\n        } else\
    \ {\n            if number % largestDivisorRemainder == 0 {\n                largestDivisor\
    \ = number\n                largestDivisorRemainder = Int(0)\n            } else\
    \ {\n                largestDivisorRemainder = number % largestDivisorRemainder\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c13cfac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c139f1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8c139f1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8c139f113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8c139f0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk8ph5say                        0x00005628248217e7 <unavailable> + 6119

    6    tmpk8ph5say                        0x00005628248212c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b8c13ee6460 __libc_start_main +
    245

    8    tmpk8ph5say                        0x0000562824820fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    var largestDivisorFactor\
    \ = Int(1)\n    for factor in 2...n {\n        if n % factor == 0 {\n        \
    \    if largestDivisorFactor > factor {\n                largestDivisor = factor\n\
    \                largestDivisorFactor = factor\n            } else {\n       \
    \         largestDivisorFactor = factor\n            }\n        }\n    }\n   \
    \ return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp2nn8tj24/tmp2nn8tj24.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aece940fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aece9106b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aece9106988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aece91057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2nn8tj24                        0x00005613e56f742b <unavailable> + 5163

    5    libc.so.6                          0x00002aece95fb460 __libc_start_main +
    245

    6    tmp2nn8tj24                        0x00005613e56f6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpfpbe1p0i/tmpfpbe1p0i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41efcffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41ef9f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41ef9f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41ef9f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpbe1p0i                        0x000056133bdb3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b41efeeb460 __libc_start_main +
    245

    6    tmpfpbe1p0i                        0x000056133bdb2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    while divisor\
    \ < n {\n        if n % divisor == 0 {\n            largest = divisor\n      \
    \  }\n        divisor *= 2\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpq1e3r0tu/tmpq1e3r0tu.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76e72f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76e6feab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76e6fea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76e6fe97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq1e3r0tu                        0x000055de49d1e46b <unavailable> + 5227

    5    libc.so.6                          0x00002b76e74df460 __libc_start_main +
    245

    6    tmpq1e3r0tu                        0x000055de49d1e029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largestDivisor == 0 {\n       \
    \         largestDivisor = divisor\n            } else {\n                if largestDivisor\
    \ > divisor {\n                    largestDivisor = divisor\n                }\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp9174gf2o/tmp9174gf2o.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f1b5b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f1b2b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f1b2b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f1b2af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9174gf2o                        0x000055e540dfd42b <unavailable> + 5163

    5    libc.so.6                          0x00002b5f1b7a5460 __libc_start_main +
    245

    6    tmp9174gf2o                        0x000055e540dfcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    var divisor = Int()\n   \
    \ for divisor in stride(from: 1, to: n, by: 1) {\n        if n % divisor == 0\
    \ {\n            if largestDivisor == 0 {\n                largestDivisor = divisor\n\
    \            } else {\n                if largestDivisor > divisor {\n       \
    \             largestDivisor = divisor\n                }\n            }\n   \
    \     }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpi_djatl3/tmpi_djatl3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc694acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc691a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc691a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc691a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi_djatl3                        0x000055af5c6be54b <unavailable> + 5451

    5    libc.so.6                          0x00002adc69698460 __libc_start_main +
    245

    6    tmpi_djatl3                        0x000055af5c6be109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor * divisor > n {\n         \
    \       largestDivisor = divisor\n            } else {\n                largestDivisor\
    \ = largestDivisor * divisor < n ? divisor * divisor : n\n            }\n    \
    \    }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmplj2a0t_9/tmplj2a0t_9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d732e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d72fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d72fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d72fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplj2a0t_9                        0x000055a58c9d5335 <unavailable> + 4917

    5    libc.so.6                          0x00002b3d734d5460 __libc_start_main +
    245

    6    tmplj2a0t_9                        0x000055a58c9d4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if divisor > maxDivisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpsdx7cl1a/tmpsdx7cl1a.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7b10c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7b0dbfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7b0dbf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7b0dbe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsdx7cl1a                        0x000055a19883f335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad7b12b4460 __libc_start_main +
    245

    6    tmpsdx7cl1a                        0x000055a19883efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor * divisor > largestDivisor\
    \ {\n                largestDivisor = divisor\n            }\n        }\n    }\n\
    \    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpho53ryby/tmpho53ryby.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1fae99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1fab90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1fab90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1fab8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpho53ryby                        0x0000560e5bad9335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba1fb085460 __libc_start_main +
    245

    6    tmpho53ryby                        0x0000560e5bad8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    var largestDivisorRemainder\
    \ = Int()\n    var divisor = Int()\n    var divisorRemainder = Int()\n    for\
    \ divisor = Int(n); divisor > 1; divisor-- {\n        divisorRemainder = n % divisor\n\
    \        if divisorRemainder == 0 {\n            largestDivisor = divisor\n  \
    \          largestDivisorRemainder = divisorRemainder\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpnot_w6ll.swift:10:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for divisor = Int(n); divisor > 1; divisor-- {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var largest = Int(n)\
    \ + 1\n    for divisor in 2...n {\n        if n % divisor == 0 {\n           \
    \ largest = divisor\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp8wg6rln3/tmp8wg6rln3.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ce0d8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ce0a82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ce0a82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ce0a817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wg6rln3                        0x0000556856152475 <unavailable> + 5237

    5    libc.so.6                          0x00002b3ce0f77460 __libc_start_main +
    245

    6    tmp8wg6rln3                        0x0000556856152129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi2eno16v/tmpi2eno16v.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50382afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5037fa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5037fa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5037fa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2eno16v                        0x000055e546d0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b503849b460 __libc_start_main +
    245

    6    tmpi2eno16v                        0x000055e546d0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var maxDivisor =\
    \ 1\n    var maxDivisorIndex = -1\n    for i := 1; i <= n; i++ {\n        if n\
    \ % i == 0 {\n            if maxDivisor < i {\n                maxDivisor = i\n\
    \                maxDivisorIndex = i\n            }\n        }\n    }\n    return\
    \ maxDivisorIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpd8eavw8_.swift:11:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpd8eavw8_.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n\
    \           ^\n/tmp/tmpd8eavw8_.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if max_divisor < divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpuildf62h/tmpuildf62h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1d8622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1d8319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1d8319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1d83187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuildf62h                        0x000055f689908335 <unavailable> + 4917

    5    libc.so.6                          0x00002ae1d880e460 __libc_start_main +
    245

    6    tmpuildf62h                        0x000055f689907fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largest < divisor {\n         \
    \       largest = divisor\n            }\n        }\n    }\n    return largest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpk226rqt1.swift:9:16: error: cannot find 'largest' in scope\n  \
    \          if largest < divisor {\n               ^~~~~~~\n/tmp/tmpk226rqt1.swift:10:17:\
    \ error: cannot find 'largest' in scope\n                largest = divisor\n \
    \               ^~~~~~~\n/tmp/tmpk226rqt1.swift:14:12: error: cannot find 'largest'\
    \ in scope\n    return largest\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 0\n    }\n    var maxDivisor =\
    \ 1\n    var maxDividend = n\n    for divisor in 2...n {\n        if n % divisor\
    \ == 0 {\n            if maxDividend % divisor == 0 {\n                maxDivisor\
    \ = divisor\n                maxDividend = n / divisor\n            }\n      \
    \  }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmp93i7m30h/tmp93i7m30h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36bad29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36baa20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36baa20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36baa1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp93i7m30h                        0x0000559ad7b55335 <unavailable> + 4917

    5    libc.so.6                          0x00002b36baf15460 __libc_start_main +
    245

    6    tmp93i7m30h                        0x0000559ad7b54fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpfpbe1p0i/tmpfpbe1p0i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41efcffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41ef9f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41ef9f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41ef9f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpbe1p0i                        0x000056133bdb3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b41efeeb460 __libc_start_main +
    245

    6    tmpfpbe1p0i                        0x000056133bdb2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    var divisor = 0\n    for divisor\
    \ in 1...n {\n        if n % divisor == 0 {\n            if divisor * divisor\
    \ > largestDivisor {\n                largestDivisor = divisor\n            }\n\
    \        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpf1vs2xkn/tmpf1vs2xkn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e306c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e303bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e303bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e303be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf1vs2xkn                        0x0000563021cc3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b7e308b4460 __libc_start_main +
    245

    6    tmpf1vs2xkn                        0x0000563021cc2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpfpbe1p0i/tmpfpbe1p0i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41efcffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41ef9f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41ef9f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41ef9f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpbe1p0i                        0x000056133bdb3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b41efeeb460 __libc_start_main +
    245

    6    tmpfpbe1p0i                        0x000056133bdb2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = Int(n)\n    var remainder\
    \ = Int(n)\n\n    while divisor > 0 {\n        remainder = divisor % 2\n     \
    \   divisor = Int(divisor / 2)\n        if remainder > 0 {\n            largest\
    \ = divisor\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpmlmpukbs/tmpmlmpukbs.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dc7752c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dc7449b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dc7449988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dc74487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmlmpukbs                        0x0000556146439375 <unavailable> + 4981

    5    libc.so.6                          0x00002b5dc793e460 __libc_start_main +
    245

    6    tmpmlmpukbs                        0x0000556146439029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    var divisor = 0\n    for number\
    \ in stride(from: n, through: 1, by: -1) {\n        divisor = number\n       \
    \ if number % 2 == 0 {\n            divisor *= number\n        }\n        if divisor\
    \ > largestDivisor {\n            largestDivisor = divisor\n        }\n    }\n\
    \    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpab84xefj/tmpab84xefj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1705220c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1704f17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1704f17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1704f167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpab84xefj                        0x0000561e85e46475 <unavailable> + 5237

    5    libc.so.6                          0x00002b170540c460 __libc_start_main +
    245

    6    tmpab84xefj                        0x0000561e85e46129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for number in 1...n {\n     \
    \   if number % 2 == 0 {\n            if number > largestDivisor {\n         \
    \       largestDivisor = number\n            }\n        } else {\n           \
    \ if number > largestDivisor {\n                largestDivisor = number\n    \
    \        }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpmml7ieqo/tmpmml7ieqo.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55029dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55026d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55026d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55026d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmml7ieqo                        0x00005590b51cf335 <unavailable> + 4917

    5    libc.so.6                          0x00002b5502bc7460 __libc_start_main +
    245

    6    tmpmml7ieqo                        0x00005590b51cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: -1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in stride(from:\
    \ n, to: Int.max, by: 1) {\n        if divisor % 2 == 0 {\n            if divisor\
    \ * divisor > n {\n                largestDivisor = divisor\n            }\n \
    \       } else {\n            if divisor * divisor < n {\n                largestDivisor\
    \ = divisor\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978473
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpfpbe1p0i/tmpfpbe1p0i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41efcffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41ef9f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41ef9f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41ef9f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpbe1p0i                        0x000056133bdb3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b41efeeb460 __libc_start_main +
    245

    6    tmpfpbe1p0i                        0x000056133bdb2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    for _ in 0..<n\
    \ {\n        if n % divisor == 0 {\n            divisor++\n        } else {\n\
    \            divisor = 1\n        }\n        if divisor > largest {\n        \
    \    largest = divisor\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpxcby9ql2.swift:10:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            divisor++\n                   ^~\n"
  stdout: ''
  timestamp: 1659978467
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in stride(from:\
    \ n, by: 1) {\n        if n % divisor == 0 {\n            largestDivisor = divisor\n\
    \        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmpk88ed8.swift:7:34: error: missing argument for parameter 'to'\
    \ in call\n    for divisor in stride(from: n, by: 1) {\n                     \
    \            ^\n                                 , to: <#Int#>\nSwift.stride:1:24:\
    \ note: 'stride(from:to:by:)' declared here\n@inlinable public func stride<T>(from\
    \ start: T, to end: T, by stride: T.Stride) -> StrideTo<T> where T : Strideable\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1659978467
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in divisors {\n \
    \       if n / divisor == 0 {\n            if divisor > largestDivisor {\n   \
    \             largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe34t9klq.swift:7:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if divisor > largestDivisor {\n  \
    \              largestDivisor = divisor\n            }\n        }\n    }\n   \
    \ return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpbb3_i07p/tmpbb3_i07p.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68d1493c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68d118ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68d118a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68d11897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbb3_i07p                        0x000055a3e112e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b68d167f460 __libc_start_main +
    245

    6    tmpbb3_i07p                        0x000055a3e112dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var largestDivisor\
    \ = 0\n    var largestDivisorIndex = 0\n    for i := 0; i < n; i++ {\n       \
    \ if n % i == 0 {\n            if largestDivisor == 0 {\n                largestDivisor\
    \ = i\n                largestDivisorIndex = i\n            } else {\n       \
    \         if largestDivisor > i {\n                    largestDivisor = i\n  \
    \                  largestDivisorIndex = i\n                }\n            }\n\
    \        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpg5v4rjvx.swift:11:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpg5v4rjvx.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n\
    \           ^\n/tmp/tmpg5v4rjvx.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = Int(1)\n    var maxDividend = Int(n)\n \
    \   for dividend in 1...n {\n        if dividend % maxDividend == 0 {\n      \
    \      if dividend > maxDivisor {\n                maxDivisor = dividend\n   \
    \         }\n        } else {\n            if dividend > maxDivisor {\n      \
    \          maxDivisor = dividend\n            }\n            maxDividend = Int(dividend\
    \ + 1)\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmp41ldkvx2/tmp41ldkvx2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b130535ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1305055b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1305055988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13050547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp41ldkvx2                        0x000055b60bfdb475 <unavailable> + 5237

    5    libc.so.6                          0x00002b130554a460 __libc_start_main +
    245

    6    tmp41ldkvx2                        0x000055b60bfdb129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = Int(n)\n    var remainder\
    \ = Int(n)\n    while divisor > 0 {\n        remainder = divisor % 2\n       \
    \ divisor = Int(divisor) / 2\n        if remainder > 0 {\n            largest\
    \ = divisor\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpicvi2chz/tmpicvi2chz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5189d5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5189a51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5189a51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5189a507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpicvi2chz                        0x0000557c9efcc375 <unavailable> + 4981

    5    libc.so.6                          0x00002b5189f46460 __libc_start_main +
    245

    6    tmpicvi2chz                        0x0000557c9efcc029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    var largestDivisorCount\
    \ = 0\n    for number in 1...n {\n        if number % largestDivisor == 0 {\n\
    \            largestDivisorCount += 1\n            if largestDivisorCount > largestDivisor\
    \ {\n                largestDivisor = number\n            }\n        }\n    }\n\
    \    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpr5ins4vb/tmpr5ins4vb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4ce278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4cdf6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4cdf6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4cdf6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr5ins4vb                        0x00005624cc64e335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad4ce464460 __libc_start_main +
    245

    6    tmpr5ins4vb                        0x00005624cc64dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    var largestDivisorIndex =\
    \ Int()\n    var largestDivisorValue = Int()\n    var largestDivisorValueIndex\
    \ = Int()\n    var largestDivisorValueValue = Int()\n    var largestDivisorValueValueIndex\
    \ = Int()\n    var largestDivisorValueValueValue = Int()\n    var largestDivisorValueValueValueIndex\
    \ = Int()\n    var largestDivisorValueValueValueValue = Int()\n    var largestDivisorValueValueValueValueIndex\
    \ = Int()\n    var largestDivisorValueValueValueValueValue = Int()\n    var largestDivisorValueValueValueValueIndex\
    \ = Int()\n    var largestDivisorValueValueValueValueValue = Int()\n    var largestDivisorValueValueValueValueIndex\
    \ = Int()\n    var largestDivisorValueValueValueValueValue = Int()\n    var largestDivisorValueValueValueValueIndex\
    \ = Int()\n    var largestDivisorValueValueValueValueValue = Int()\n    var largestDivisorValueValueValueValueIndex\
    \ = Int()\n    var largestDivisorValueValueValueValueValue = Int()\n    var largestDivisorValueValueValueValueIndex\
    \ = Int()\n    var largestDivisorValueValueValueValueValue = Int()\n    var largestDivisorValueValueValueValueIndex\
    \ = Int()\n    var largestDivisorValueValueValueValueValue = Int()\n    var largestDivisorValueValueValueValueIndex\
    \ = Int()\n    var largestDivisorValueValueValueValueValue = Int()\n    var largestDivisorValueValueValueValueIndex\
    \ = Int()\n    var largestDivisorValueValueValueValueValue = Int()\n    var largestDivisorValueValueValueValueIndex\
    \ = Int()\n    var largestDivisorValueValueValueValueValue = Int()\n    var largestDivisorValueValueValueValueIndex\
    \ = Int()\n    var largestDivisorValueValueValueValueValue = Int()\n    var largestDivisorValueValueValueValueIndex\
    \ = Int()\n    var largestDivisorValueValueValueValueValue = Int()\n    var largestDivisorValueValueValueValueIndex\
    \ = Int()\n    var largestDivisorValueValueValueValueValue = Int()\n    var largestDivisorValueValueValueValueIndex\
    \ = Int()\n    var largestDivisorValueValueValueValueValue = Int()\n    var largestDivisorValueValueValueValueIndex\
    \ = Int()\n    var largestDivisorValueValueValueValueValue = Int()\n    var largestDivisorValueValueValueValueIndex\
    \ = Int()\n    var largestDivisorValueValueValueValueValue = Int()\n    var largest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpz508qepi.swift:17:9: error: invalid redeclaration of 'largestDivisorValueValueValueValueIndex'\n\
    \    var largestDivisorValueValueValueValueIndex = Int()\n        ^\n/tmp/tmpz508qepi.swift:15:9:\
    \ note: 'largestDivisorValueValueValueValueIndex' previously declared here\n \
    \   var largestDivisorValueValueValueValueIndex = Int()\n        ^\n/tmp/tmpz508qepi.swift:18:9:\
    \ error: invalid redeclaration of 'largestDivisorValueValueValueValueValue'\n\
    \    var largestDivisorValueValueValueValueValue = Int()\n        ^\n/tmp/tmpz508qepi.swift:16:9:\
    \ note: 'largestDivisorValueValueValueValueValue' previously declared here\n \
    \   var largestDivisorValueValueValueValueValue = Int()\n        ^\n/tmp/tmpz508qepi.swift:19:9:\
    \ error: invalid redeclaration of 'largestDivisorValueValueValueValueIndex'\n\
    \    var largestDivisorValueValueValueValueIndex = Int()\n        ^\n/tmp/tmpz508qepi.swift:15:9:\
    \ note: 'largestDivisorValueValueValueValueIndex' previously declared here\n \
    \   var largestDivisorValueValueValueValueIndex = Int()\n        ^\n/tmp/tmpz508qepi.swift:20:9:\
    \ error: invalid redeclaration of 'largestDivisorValueValueValueValueValue'\n\
    \    var largestDivisorValueValueValueValueValue = Int()\n        ^\n/tmp/tmpz508qepi.swift:16:9:\
    \ note: 'largestDivisorValueValueValueValueValue' previously declared here\n \
    \   var largestDivisorValueValueValueValueValue = Int()\n        ^\n/tmp/tmpz508qepi.swift:21:9:\
    \ error: invalid redeclaration of 'largestDivisorValueValueValueValueIndex'\n\
    \    var largestDivisorValueValueValueValueIndex = Int()\n        ^\n/tmp/tmpz508qepi.swift:15:9:\
    \ note: 'largestDivisorValueValueValueValueIndex' previously declared here\n \
    \   var largestDivisorValueValueValueValueIndex = Int()\n        ^\n/tmp/tmpz508qepi.swift:22:9:\
    \ error: invalid redeclaration of 'largestDivisorValueValueValueValueValue'\n\
    \    var largestDivisorValueValueValueValueValue = Int()\n        ^\n/tmp/tmpz508qepi.swift:16:9:\
    \ note: 'largestDivisorValueValueValueValueValue' previously declared here\n \
    \   var largestDivisorValueValueValueValueValue = Int()\n        ^\n/tmp/tmpz508qepi.swift:23:"
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    for divisor in 1...n {\n      \
    \  if n % divisor == 0 {\n            largest = divisor\n        }\n    }\n  \
    \  return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpc6ue90hl/tmpc6ue90hl.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b278b889c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b278b580b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b278b580988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b278b57f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc6ue90hl                        0x0000559864d20475 <unavailable> + 5237

    5    libc.so.6                          0x00002b278ba75460 __libc_start_main +
    245

    6    tmpc6ue90hl                        0x0000559864d20129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    var divisor = 0\n    var remainder\
    \ = 0\n    for divisor in stride(from: n, through: 0, by: 1) {\n        remainder\
    \ = n % divisor\n        if remainder == 0 {\n            largestDivisor = divisor\n\
    \            break\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp_6yai797/tmp_6yai797.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba334096c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba333d8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba333d8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba333d8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_6yai797                        0x000055f328d47475 <unavailable> + 5237

    5    libc.so.6                          0x00002ba334282460 __libc_start_main +
    245

    6    tmp_6yai797                        0x000055f328d47129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpfpbe1p0i/tmpfpbe1p0i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41efcffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41ef9f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41ef9f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41ef9f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpbe1p0i                        0x000056133bdb3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b41efeeb460 __libc_start_main +
    245

    6    tmpfpbe1p0i                        0x000056133bdb2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    var largestDivisorRemainder\
    \ = Int()\n    for number in stride(from: n, through: 1, by: -1) {\n        if\
    \ number % 2 == 0 {\n            if number > largestDivisor {\n              \
    \  largestDivisor = number\n                largestDivisorRemainder = number\n\
    \            }\n        } else {\n            if number > largestDivisorRemainder\
    \ {\n                largestDivisorRemainder = number\n            }\n       \
    \ }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpff8in6qv/tmpff8in6qv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abacd6cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abacd3c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abacd3c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abacd3c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpff8in6qv                        0x0000560c6033c475 <unavailable> + 5237

    5    libc.so.6                          0x00002abacd8bb460 __libc_start_main +
    245

    6    tmpff8in6qv                        0x0000560c6033c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var largest = Int(n)\n\
    \    var divisor = 1\n    for _ in 0..<n {\n        if n % divisor == 0 {\n  \
    \          largest = divisor\n        }\n        divisor *= 2\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: Exception
  stderr: 'tmpnzqiaui_/tmpnzqiaui_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1e14aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1e11a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1e11a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1e11a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzqiaui_                        0x000056077b42556b <unavailable> + 5483

    5    libc.so.6                          0x00002ae1e169a460 __libc_start_main +
    245

    6    tmpnzqiaui_                        0x000056077b425129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for d in divisors(n) {\n        if n\
    \ % d == 0 {\n            largest = d\n        }\n    }\n    return largest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp8mcjolf1.swift:7:14: error: cannot find 'divisors' in scope\n \
    \   for d in divisors(n) {\n             ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978468
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    var divisor = 1\n    for _ in 0..<n\
    \ {\n        if n % divisor == 0 {\n            divisor++\n            if divisor\
    \ > largest {\n                largest = divisor\n            }\n        } else\
    \ {\n            divisor = 1\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdyjr6qmw.swift:10:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            divisor++\n                   ^~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpglvziu5o/tmpglvziu5o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef8721fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef86f16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef86f16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef86f157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglvziu5o                        0x000055f00043c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aef8740b460 __libc_start_main +
    245

    6    tmpglvziu5o                        0x000055f00043bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largestDivisor > divisor {\n  \
    \              largestDivisor = divisor\n            }\n        }\n    }\n   \
    \ return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpxj7rizm3/tmpxj7rizm3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64438fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64435f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64435f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64435f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxj7rizm3                        0x00005623e1ae242b <unavailable> + 5163

    5    libc.so.6                          0x00002b6443ae8460 __libc_start_main +
    245

    6    tmpxj7rizm3                        0x00005623e1ae1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpfpbe1p0i/tmpfpbe1p0i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41efcffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41ef9f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41ef9f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41ef9f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpbe1p0i                        0x000056133bdb3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b41efeeb460 __libc_start_main +
    245

    6    tmpfpbe1p0i                        0x000056133bdb2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var maxDivisor =\
    \ 1\n    var maxDivisorValue = n\n    for divisor in 2...n {\n        if n % divisor\
    \ == 0 {\n            if maxDivisorValue < divisor {\n                maxDivisorValue\
    \ = divisor\n                maxDivisor = divisor\n            }\n        }\n\
    \    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpqsfutkmy/tmpqsfutkmy.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f74fe1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f74cd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8f74cd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8f74cd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsfutkmy                        0x0000555a7362e42b <unavailable> + 5163

    5    libc.so.6                          0x00002b8f751cd460 __libc_start_main +
    245

    6    tmpqsfutkmy                        0x0000555a7362dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    var divisor = Int()\n   \
    \ for divisor in 1...n {\n        if n % divisor == 0 {\n            if largest\
    \ == 0 {\n                largestDivisor = divisor\n            } else {\n   \
    \             if largest < divisor {\n                    largestDivisor = divisor\n\
    \                }\n            }\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpge1n85mk.swift:10:16: error: cannot find 'largest' in scope\n \
    \           if largest == 0 {\n               ^~~~~~~\n/tmp/tmpge1n85mk.swift:13:20:\
    \ error: cannot find 'largest' in scope\n                if largest < divisor\
    \ {\n                   ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978468
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(0)\n    for divisor in stride(from:\
    \ 1, to: n, by: 1) {\n        if n % divisor == 0 {\n            largestDivisor\
    \ = divisor\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor: Int = 0\n    for divisor in 1...n {\n   \
    \     if n % divisor == 0 {\n            if divisor > maxDivisor {\n         \
    \       maxDivisor = divisor\n            }\n        }\n    }\n    return maxDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp_rjhj6_5/tmp_rjhj6_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29c0145c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29bfe3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29bfe3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29bfe3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_rjhj6_5                        0x0000555671072335 <unavailable> + 4917

    5    libc.so.6                          0x00002b29c0331460 __libc_start_main +
    245

    6    tmp_rjhj6_5                        0x0000555671071fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    var largestDivisorIndex = -1\n\
    \    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if largestDivisor\
    \ < i {\n                largestDivisor = i\n                largestDivisorIndex\
    \ = i\n            }\n        }\n    }\n    return largestDivisorIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp3iko3hta.swift:8:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp3iko3hta.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n      \
    \     ^\n/tmp/tmp3iko3hta.swift:8:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpfpbe1p0i/tmpfpbe1p0i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41efcffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41ef9f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41ef9f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41ef9f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpbe1p0i                        0x000056133bdb3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b41efeeb460 __libc_start_main +
    245

    6    tmpfpbe1p0i                        0x000056133bdb2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largest_divisor(n: n, max: n)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphl4j4csa.swift:6:39: error: extra argument 'max' in call\n    return\
    \ largest_divisor(n: n, max: n)\n                          ~~~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in stride(from:\
    \ n, through: 1, by: 1) {\n        if n % divisor == 0 {\n            largestDivisor\
    \ = divisor\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp99xo11sm/tmp99xo11sm.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7108cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7105c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7105c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7105c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp99xo11sm                        0x000055be9488b475 <unavailable> + 5237

    5    libc.so.6                          0x00002ae710aba460 __libc_start_main +
    245

    6    tmp99xo11sm                        0x000055be9488b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpfpbe1p0i/tmpfpbe1p0i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41efcffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41ef9f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41ef9f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41ef9f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpbe1p0i                        0x000056133bdb3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b41efeeb460 __libc_start_main +
    245

    6    tmpfpbe1p0i                        0x000056133bdb2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    var maxDivisorValue = n\n\n    for\
    \ divisor in 1...n {\n        if n % divisor == 0 {\n            if divisor *\
    \ divisor > maxDivisorValue {\n                maxDivisorValue = divisor\n   \
    \             maxDivisor = divisor\n            }\n        }\n    }\n\n    return\
    \ maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpdlydvbo5/tmpdlydvbo5.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b42377c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b4206eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b4206e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b4206d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdlydvbo5                        0x00005595ce378335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9b42563460 __libc_start_main +
    245

    6    tmpdlydvbo5                        0x00005595ce377fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    var largestDivisorIndex = 0\n\
    \    for i := 0; i < n; i++ {\n        if n % i == 0 {\n            if largestDivisor\
    \ == 0 {\n                largestDivisor = i\n                largestDivisorIndex\
    \ = i\n            } else {\n                if largestDivisor > i {\n       \
    \             largestDivisor = i\n                    largestDivisorIndex = i\n\
    \                }\n            }\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvuv9c95f.swift:8:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpvuv9c95f.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n       \
    \    ^\n/tmp/tmpvuv9c95f.swift:8:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for number in 1...n {\n     \
    \   if number % 2 == 0 {\n            if number > largestDivisor {\n         \
    \       largestDivisor = number\n            }\n        } else {\n           \
    \ if number < largestDivisor {\n                largestDivisor = number\n    \
    \        }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp0petu5bq/tmp0petu5bq.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56cb713c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56cb40ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56cb40a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56cb4097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0petu5bq                        0x0000562eab07a335 <unavailable> + 4917

    5    libc.so.6                          0x00002b56cb8ff460 __libc_start_main +
    245

    6    tmp0petu5bq                        0x0000562eab079fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor * divisor > n {\n         \
    \       largestDivisor = divisor\n            } else {\n                break\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpuithd3x4/tmpuithd3x4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b479c4d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b479c1c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b479c1c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b479c1c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuithd3x4                        0x000055a83f348335 <unavailable> + 4917

    5    libc.so.6                          0x00002b479c6bd460 __libc_start_main +
    245

    6    tmpuithd3x4                        0x000055a83f347fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 0\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if maxDivisor < divisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpkfa1k4mm/tmpkfa1k4mm.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af10bb27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af10b81eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af10b81e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af10b81d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkfa1k4mm                        0x0000559fdbdc3335 <unavailable> + 4917

    5    libc.so.6                          0x00002af10bd13460 __libc_start_main +
    245

    6    tmpkfa1k4mm                        0x0000559fdbdc2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpfpbe1p0i/tmpfpbe1p0i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41efcffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41ef9f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41ef9f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41ef9f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpbe1p0i                        0x000056133bdb3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b41efeeb460 __libc_start_main +
    245

    6    tmpfpbe1p0i                        0x000056133bdb2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpfpbe1p0i/tmpfpbe1p0i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41efcffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41ef9f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41ef9f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41ef9f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpbe1p0i                        0x000056133bdb3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b41efeeb460 __libc_start_main +
    245

    6    tmpfpbe1p0i                        0x000056133bdb2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpglvziu5o/tmpglvziu5o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef8721fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef86f16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef86f16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef86f157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglvziu5o                        0x000055f00043c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aef8740b460 __libc_start_main +
    245

    6    tmpglvziu5o                        0x000055f00043bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpfpbe1p0i/tmpfpbe1p0i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41efcffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41ef9f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41ef9f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41ef9f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpbe1p0i                        0x000056133bdb3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b41efeeb460 __libc_start_main +
    245

    6    tmpfpbe1p0i                        0x000056133bdb2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi2eno16v/tmpi2eno16v.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50382afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5037fa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5037fa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5037fa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2eno16v                        0x000055e546d0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b503849b460 __libc_start_main +
    245

    6    tmpi2eno16v                        0x000055e546d0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    var divisor = 1\n    for _ in 0..<n\
    \ {\n        if n % divisor == 0 {\n            divisor++\n            if divisor\
    \ > largest {\n                largest = divisor\n            }\n        } else\
    \ {\n            divisor = 1\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdyjr6qmw.swift:10:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            divisor++\n                   ^~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpfpbe1p0i/tmpfpbe1p0i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41efcffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41ef9f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41ef9f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41ef9f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpbe1p0i                        0x000056133bdb3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b41efeeb460 __libc_start_main +
    245

    6    tmpfpbe1p0i                        0x000056133bdb2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if divisor > maxDivisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpsdx7cl1a/tmpsdx7cl1a.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7b10c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7b0dbfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7b0dbf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7b0dbe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsdx7cl1a                        0x000055a19883f335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad7b12b4460 __libc_start_main +
    245

    6    tmpsdx7cl1a                        0x000055a19883efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    var divisor = 1\n    for divisor\
    \ < n {\n        if n % divisor == 0 {\n            largestDivisor = divisor\n\
    \        }\n        divisor++\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpr9gq84_p.swift:8:17: error: expected 'in' after for-each pattern\n\
    \    for divisor < n {\n                ^\n/tmp/tmpr9gq84_p.swift:8:17: error:\
    \ unary operator cannot be separated from its operand\n    for divisor < n {\n\
    \                ^~\n                 \n/tmp/tmpr9gq84_p.swift:8:17: error: '<'\
    \ is not a prefix unary operator\n    for divisor < n {\n                ^\n"
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor * divisor > n {\n         \
    \       largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmptivg_q3a/tmptivg_q3a.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7a7424c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7a711bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7a711b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7a711a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptivg_q3a                        0x00005557a3da7335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad7a7610460 __libc_start_main +
    245

    6    tmptivg_q3a                        0x00005557a3da6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824512
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    var largestDivisorIndex =\
    \ Int()\n    var divisor = Int()\n    var divisorIndex = Int()\n    for divisorIndex\
    \ = 0; divisorIndex < Int(n); divisorIndex++ {\n        divisor = Int(n) / Int(divisorIndex)\n\
    \        if divisor % 2 == 0 {\n            if divisorIndex > largestDivisorIndex\
    \ {\n                largestDivisorIndex = divisorIndex\n                largestDivisor\
    \ = divisor\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmppi0zuic6.swift:10:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for divisorIndex = 0; divisorIndex < Int(n); divisorIndex++\
    \ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978468
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largest_divisor(n: n, factors: nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_y8lqp58.swift:6:43: error: extra argument 'factors' in call\n\
    \    return largest_divisor(n: n, factors: nil)\n                          ~~~~~~~~~~~~~~~~^~~~\n\
    /tmp/tmp_y8lqp58.swift:6:43: error: 'nil' requires a contextual type\n    return\
    \ largest_divisor(n: n, factors: nil)\n                                      \
    \    ^\n"
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpglvziu5o/tmpglvziu5o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef8721fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef86f16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef86f16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef86f157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglvziu5o                        0x000055f00043c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aef8740b460 __libc_start_main +
    245

    6    tmpglvziu5o                        0x000055f00043bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    var largestDivisorIndex =\
    \ Int()\n    for i in 0..<n {\n        if n % i == 0 {\n            if largestDivisor\
    \ == 0 || largestDivisor > i {\n                largestDivisor = i\n         \
    \       largestDivisorIndex = i\n            }\n        }\n    }\n    return largestDivisorIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b793b15fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b793ae56561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b793ae56286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b793ae5613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b793ae55bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmps8_jwvlh                        0x000055970b08c6f9 <unavailable> + 5881

    6    tmps8_jwvlh                        0x000055970b08c2c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b793b34b460 __libc_start_main +
    245

    8    tmps8_jwvlh                        0x000055970b08bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    var largestDivisorCount\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if largestDivisorCount < divisor {\n                largestDivisorCount = divisor\n\
    \                largestDivisor = divisor\n            }\n        }\n    }\n \
    \   return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmphh4k338d/tmphh4k338d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accb9922c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accb9619b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accb9619988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accb96187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphh4k338d                        0x000055703f0d2335 <unavailable> + 4917

    5    libc.so.6                          0x00002accb9b0e460 __libc_start_main +
    245

    6    tmphh4k338d                        0x000055703f0d1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    for divisor in 1...n {\n      \
    \  if n % divisor == 0 {\n            largest = divisor\n        }\n    }\n  \
    \  return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpc6ue90hl/tmpc6ue90hl.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b278b889c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b278b580b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b278b580988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b278b57f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc6ue90hl                        0x0000559864d20475 <unavailable> + 5237

    5    libc.so.6                          0x00002b278ba75460 __libc_start_main +
    245

    6    tmpc6ue90hl                        0x0000559864d20129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 0\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if divisor > maxDivisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpay9c82zb/tmpay9c82zb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af82e4b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af82e1aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af82e1ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af82e1ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpay9c82zb                        0x000055fc1845e335 <unavailable> + 4917

    5    libc.so.6                          0x00002af82e6a3460 __libc_start_main +
    245

    6    tmpay9c82zb                        0x000055fc1845dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int()\n    var divisor = Int()\n    for divisor\
    \ in 1...n {\n        if n % divisor == 0 {\n            if largest < divisor\
    \ {\n                largest = divisor\n            }\n        }\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: Exception
  stderr: 'tmp01x02o9l/tmp01x02o9l.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a3ae72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a3ab69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a3ab69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a3ab687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp01x02o9l                        0x000055ce13ca4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b0a3b05e460 __libc_start_main +
    245

    6    tmp01x02o9l                        0x000055ce13ca3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824512
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    while divisor\
    \ < n {\n        largest = Int(largest * 2)\n        divisor = Int(largest)\n\
    \    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpcwmxlc7q/tmpcwmxlc7q.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5e56d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5e53c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5e53c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5e53c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcwmxlc7q                        0x0000560be06f32e5 <unavailable> + 4837

    5    libc.so.6                          0x00002ba5e58be460 __libc_start_main +
    245

    6    tmpcwmxlc7q                        0x0000560be06f2f99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi2eno16v/tmpi2eno16v.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50382afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5037fa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5037fa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5037fa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2eno16v                        0x000055e546d0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b503849b460 __libc_start_main +
    245

    6    tmpi2eno16v                        0x000055e546d0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi2eno16v/tmpi2eno16v.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50382afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5037fa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5037fa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5037fa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2eno16v                        0x000055e546d0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b503849b460 __libc_start_main +
    245

    6    tmpi2eno16v                        0x000055e546d0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for number in 1...n {\n     \
    \   if number % 2 == 0 {\n            if number > largestDivisor {\n         \
    \       largestDivisor = number\n            }\n        } else {\n           \
    \ if number > largestDivisor {\n                largestDivisor = number\n    \
    \        }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpmml7ieqo/tmpmml7ieqo.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55029dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55026d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55026d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55026d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmml7ieqo                        0x00005590b51cf335 <unavailable> + 4917

    5    libc.so.6                          0x00002b5502bc7460 __libc_start_main +
    245

    6    tmpmml7ieqo                        0x00005590b51cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    var max_divisor_index = 0\n    for\
    \ index in 0..<n {\n        if n % index == 0 {\n            if index > max_divisor\
    \ {\n                max_divisor = index\n                max_divisor_index =\
    \ index\n            }\n        }\n    }\n    return max_divisor_index\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b0692103c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0691dfa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0691dfa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0691dfa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0691df9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvcm4myg7                        0x0000559a8f3ef6f9 <unavailable> + 5881

    6    tmpvcm4myg7                        0x0000559a8f3ef2c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b06922ef460 __libc_start_main +
    245

    8    tmpvcm4myg7                        0x0000559a8f3eefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if max_divisor < divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpuildf62h/tmpuildf62h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1d8622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1d8319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1d8319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1d83187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuildf62h                        0x000055f689908335 <unavailable> + 4917

    5    libc.so.6                          0x00002ae1d880e460 __libc_start_main +
    245

    6    tmpuildf62h                        0x000055f689907fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in stride(from:\
    \ n, through: 1, by: -1) {\n        if n % divisor == 0 {\n            if divisor\
    \ > largestDivisor {\n                largestDivisor = divisor\n            }\n\
    \        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmp0n_70o0_/tmp0n_70o0_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6369b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6366b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6366b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6366af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0n_70o0_                        0x000055cee9d19475 <unavailable> + 5237

    5    libc.so.6                          0x00002ba636ba5460 __libc_start_main +
    245

    6    tmp0n_70o0_                        0x000055cee9d19129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 0\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if divisor > maxDivisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpay9c82zb/tmpay9c82zb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af82e4b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af82e1aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af82e1ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af82e1ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpay9c82zb                        0x000055fc1845e335 <unavailable> + 4917

    5    libc.so.6                          0x00002af82e6a3460 __libc_start_main +
    245

    6    tmpay9c82zb                        0x000055fc1845dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpfpbe1p0i/tmpfpbe1p0i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41efcffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41ef9f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41ef9f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41ef9f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpbe1p0i                        0x000056133bdb3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b41efeeb460 __libc_start_main +
    245

    6    tmpfpbe1p0i                        0x000056133bdb2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    var divisor = 0\n    for number in 1...n\
    \ {\n        divisor = number\n        if number % 2 == 0 {\n            divisor\
    \ = divisor + 1\n        }\n        if divisor > largest {\n            largest\
    \ = divisor\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp32tfwkjp/tmp32tfwkjp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f6c860c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f6c557b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f6c557988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f6c5567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp32tfwkjp                        0x000055d11fb43335 <unavailable> + 4917

    5    libc.so.6                          0x00002b5f6ca4c460 __libc_start_main +
    245

    6    tmp32tfwkjp                        0x000055d11fb42fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    var divisor = Int(1)\n \
    \   for _ in 0..<n {\n        if divisor % 2 == 0 {\n            divisor = divisor\
    \ / 2\n        } else {\n            divisor = divisor + 1\n        }\n      \
    \  if divisor > largestDivisor {\n            largestDivisor = divisor\n     \
    \   }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpy5clz2l0/tmpy5clz2l0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ad02d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7acffcab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7acffca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7acffc97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5clz2l0                        0x0000561d3b007335 <unavailable> + 4917

    5    libc.so.6                          0x00002b7ad04bf460 __libc_start_main +
    245

    6    tmpy5clz2l0                        0x0000561d3b006fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    var largestDivisorCount = 0\n\
    \    for number in 1...n {\n        if number % 2 == 0 {\n            if number\
    \ > largestDivisor {\n                largestDivisor = number\n              \
    \  largestDivisorCount = 1\n            } else {\n                largestDivisorCount\
    \ += 1\n            }\n        } else {\n            if number > largestDivisor\
    \ {\n                largestDivisor = number\n            }\n        }\n    }\n\
    \    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpmh2g16jd/tmpmh2g16jd.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54e610ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54e5e05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54e5e05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54e5e047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmh2g16jd                        0x000055be3b9b2335 <unavailable> + 4917

    5    libc.so.6                          0x00002b54e62fa460 __libc_start_main +
    245

    6    tmpmh2g16jd                        0x000055be3b9b1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    var divisor = Int()\n   \
    \ for divisor in 1...n {\n        if n % divisor == 0 {\n            if largestDivisor\
    \ == 0 || largestDivisor > divisor {\n                largestDivisor = divisor\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpjln02axp/tmpjln02axp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2af0781c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2af0478b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2af0478988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2af04777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjln02axp                        0x000056146d68142b <unavailable> + 5163

    5    libc.so.6                          0x00002b2af096d460 __libc_start_main +
    245

    6    tmpjln02axp                        0x000056146d680fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi2eno16v/tmpi2eno16v.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50382afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5037fa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5037fa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5037fa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2eno16v                        0x000055e546d0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b503849b460 __libc_start_main +
    245

    6    tmpi2eno16v                        0x000055e546d0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor * divisor > n {\n         \
    \       largestDivisor = divisor\n            } else {\n                break\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpuithd3x4/tmpuithd3x4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b479c4d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b479c1c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b479c1c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b479c1c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuithd3x4                        0x000055a83f348335 <unavailable> + 4917

    5    libc.so.6                          0x00002b479c6bd460 __libc_start_main +
    245

    6    tmpuithd3x4                        0x000055a83f347fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp3yn50p3m/tmp3yn50p3m.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fbcd0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fbca05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fbca05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fbca047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3yn50p3m                        0x000055714d094335 <unavailable> + 4917

    5    libc.so.6                          0x00002b5fbcefa460 __libc_start_main +
    245

    6    tmp3yn50p3m                        0x000055714d093fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(0)\n    for divisor in stride(from:\
    \ Int(1), through: Int(n), by: Int(2)) {\n        if n % divisor == 0 {\n    \
    \        if largestDivisor == 0 {\n                largestDivisor = divisor\n\
    \            } else {\n                if divisor > largestDivisor {\n       \
    \             largestDivisor = divisor\n                }\n            }\n   \
    \     }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpyyvhbdu_/tmpyyvhbdu_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a18b89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a18880b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a18880988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a1887f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyyvhbdu_                        0x000055ef44c465a5 <unavailable> + 5541

    5    libc.so.6                          0x00002b8a18d75460 __libc_start_main +
    245

    6    tmpyyvhbdu_                        0x000055ef44c46259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    var largestDivisorFactor\
    \ = Int()\n    for var i = 1; i <= n; i++ {\n        if n % i == 0 {\n       \
    \     if largestDivisorFactor < i {\n                largestDivisor = i\n    \
    \            largestDivisorFactor = largestDivisorFactor * i\n            }\n\
    \        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpquzoa5h7.swift:8:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 1; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi2eno16v/tmpi2eno16v.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50382afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5037fa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5037fa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5037fa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2eno16v                        0x000055e546d0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b503849b460 __libc_start_main +
    245

    6    tmpi2eno16v                        0x000055e546d0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    var largestDivisorIndex = 0\n\
    \    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if largestDivisor\
    \ < i {\n                largestDivisor = i\n                largestDivisorIndex\
    \ = i\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp3ulnf9s4.swift:8:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp3ulnf9s4.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n      \
    \     ^\n/tmp/tmp3ulnf9s4.swift:8:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if divisor > largestDivisor {\n  \
    \              largestDivisor = divisor\n            }\n        }\n    }\n   \
    \ return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpjyx5sb4m/tmpjyx5sb4m.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac61af82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac61ac79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac61ac79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac61ac787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjyx5sb4m                        0x0000556d55133335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac61b16e460 __libc_start_main +
    245

    6    tmpjyx5sb4m                        0x0000556d55132fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 0\n    }\n    var maxDivisor =\
    \ 0\n    var maxDivisorIndex = 0\n    for i := 1; i <= n; i++ {\n        if n\
    \ % i == 0 {\n            if maxDivisor < i {\n                maxDivisor = i\n\
    \                maxDivisorIndex = i\n            }\n        }\n    }\n    return\
    \ maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpwlpwykvb.swift:11:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpwlpwykvb.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n\
    \           ^\n/tmp/tmpwlpwykvb.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in stride(from:\
    \ n, through: 1, by: 1) {\n        if n % divisor == 0 {\n            largestDivisor\
    \ = divisor\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp99xo11sm/tmp99xo11sm.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7108cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7105c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7105c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7105c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp99xo11sm                        0x000055be9488b475 <unavailable> + 5237

    5    libc.so.6                          0x00002ae710aba460 __libc_start_main +
    245

    6    tmp99xo11sm                        0x000055be9488b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var maxDivisor =\
    \ 1\n    var maxDivisorIndex = 0\n    for i := 1; i <= n; i++ {\n        if n\
    \ % i == 0 {\n            if maxDivisor < i {\n                maxDivisor = i\n\
    \                maxDivisorIndex = i\n            }\n        }\n    }\n    return\
    \ maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpjh26a_f6.swift:11:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpjh26a_f6.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n\
    \           ^\n/tmp/tmpjh26a_f6.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978468
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    var divisor = 1\n    for divisor\
    \ < n {\n        if n % divisor == 0 {\n            largestDivisor = divisor\n\
    \        }\n        divisor++\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpr9gq84_p.swift:8:17: error: expected 'in' after for-each pattern\n\
    \    for divisor < n {\n                ^\n/tmp/tmpr9gq84_p.swift:8:17: error:\
    \ unary operator cannot be separated from its operand\n    for divisor < n {\n\
    \                ^~\n                 \n/tmp/tmpr9gq84_p.swift:8:17: error: '<'\
    \ is not a prefix unary operator\n    for divisor < n {\n                ^\n"
  stdout: ''
  timestamp: 1659978468
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    var maxDivisorIndex = 0\n    for\
    \ i := 1; i < n; i++ {\n        if n % i == 0 {\n            if maxDivisor < i\
    \ {\n                maxDivisor = i\n                maxDivisorIndex = i\n   \
    \         }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpxbtmx7v0.swift:8:12: error: expected type\n    for i := 1; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpxbtmx7v0.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i < n; i++ {\n       \
    \    ^\n/tmp/tmpxbtmx7v0.swift:8:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 1; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if maxDivisor < divisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpcsr5u3iv/tmpcsr5u3iv.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37d9298c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37d8f8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37d8f8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37d8f8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcsr5u3iv                        0x00005616b36ef335 <unavailable> + 4917

    5    libc.so.6                          0x00002b37d9484460 __libc_start_main +
    245

    6    tmpcsr5u3iv                        0x00005616b36eefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if maxDivisor < divisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpcsr5u3iv/tmpcsr5u3iv.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37d9298c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37d8f8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37d8f8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37d8f8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcsr5u3iv                        0x00005616b36ef335 <unavailable> + 4917

    5    libc.so.6                          0x00002b37d9484460 __libc_start_main +
    245

    6    tmpcsr5u3iv                        0x00005616b36eefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    while divisor\
    \ <= n {\n        if n % divisor == 0 {\n            largest = divisor\n     \
    \   }\n        divisor++\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpp6oi5xzd.swift:12:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        divisor++\n               ^~\n"
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largestDivisor == 0 || largestDivisor\
    \ > divisor {\n                largestDivisor = divisor\n            }\n     \
    \   }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpfxmfk2cg/tmpfxmfk2cg.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281c5d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281c2c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281c2c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281c2c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfxmfk2cg                        0x00005631dcb6942b <unavailable> + 5163

    5    libc.so.6                          0x00002b281c7bc460 __libc_start_main +
    245

    6    tmpfxmfk2cg                        0x00005631dcb68fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int()\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp8hvgn5yd/tmp8hvgn5yd.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba720e17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba720b0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba720b0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba720b0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8hvgn5yd                        0x000055c9be482335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba721003460 __libc_start_main +
    245

    6    tmp8hvgn5yd                        0x000055c9be481fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 0\n    }\n    var largest = 0\n\
    \    var divisor = 1\n    for _ in 0..<n {\n        divisor *= 2\n        if divisor\
    \ > n {\n            divisor = n\n        }\n        if divisor > largest {\n\
    \            largest = divisor\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmphd7qkk11/tmphd7qkk11.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1d0518c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1d020fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1d020f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1d020e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphd7qkk11                        0x000055dd0ec07335 <unavailable> + 4917

    5    libc.so.6                          0x00002ae1d0704460 __libc_start_main +
    245

    6    tmphd7qkk11                        0x000055dd0ec06fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor * divisor > n {\n         \
    \       largestDivisor = divisor\n            } else {\n                largestDivisor\
    \ = n * divisor / divisor\n            }\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpb8r6w735/tmpb8r6w735.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb53ee7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb53bdeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb53bde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb53bdd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb8r6w735                        0x000055b845929335 <unavailable> + 4917

    5    libc.so.6                          0x00002aeb540d3460 __libc_start_main +
    245

    6    tmpb8r6w735                        0x000055b845928fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            max_divisor = divisor\n        }\n    }\n\
    \    return max_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe62g3g1r/tmpe62g3g1r.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86aaa9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86aa796b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86aa796988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86aa7957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe62g3g1r                        0x000055b1a7313335 <unavailable> + 4917

    5    libc.so.6                          0x00002b86aac8b460 __libc_start_main +
    245

    6    tmpe62g3g1r                        0x000055b1a7312fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largest_divisor(n: n, divisor: 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp082f82bu.swift:6:43: error: extra argument 'divisor' in call\n\
    \    return largest_divisor(n: n, divisor: 1)\n                          ~~~~~~~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1659824512
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpfpbe1p0i/tmpfpbe1p0i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41efcffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41ef9f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41ef9f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41ef9f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpbe1p0i                        0x000056133bdb3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b41efeeb460 __libc_start_main +
    245

    6    tmpfpbe1p0i                        0x000056133bdb2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    var maxDivisorIndex = 0\n    for\
    \ i := 1; i <= n; i++ {\n        if n % i == 0 {\n            if maxDivisor <\
    \ i {\n                maxDivisor = i\n                maxDivisorIndex = i\n \
    \           }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp3ihjxl_g.swift:8:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp3ihjxl_g.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n      \
    \     ^\n/tmp/tmp3ihjxl_g.swift:8:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978468
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for d in divisors(n) {\n        if n\
    \ % d == 0 {\n            if largest < d {\n                largest = d\n    \
    \        }\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmqvejukm.swift:7:14: error: cannot find 'divisors' in scope\n \
    \   for d in divisors(n) {\n             ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpglvziu5o/tmpglvziu5o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef8721fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef86f16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef86f16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef86f157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglvziu5o                        0x000055f00043c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aef8740b460 __libc_start_main +
    245

    6    tmpglvziu5o                        0x000055f00043bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    var max_divisor\
    \ = 0\n    var max_divisor_value = 0\n    for divisor in divisors {\n        if\
    \ n / divisor == 0 {\n            if max_divisor < divisor {\n               \
    \ max_divisor = divisor\n                max_divisor_value = n\n            }\n\
    \        }\n    }\n    return max_divisor_value\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvbd_cr2q.swift:11:20: error: cannot find 'divisors' in scope\n\
    \    for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978468
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largestDivisor == 0 {\n       \
    \         largestDivisor = divisor\n            } else {\n                if divisor\
    \ > largestDivisor {\n                    largestDivisor = divisor\n         \
    \       }\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpe5vur5uz/tmpe5vur5uz.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9c57ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9c54c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9c54c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9c54c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe5vur5uz                        0x0000559bbc39e335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba9c59b8460 __libc_start_main +
    245

    6    tmpe5vur5uz                        0x0000559bbc39dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largestDivisor == 0 || largestDivisor\
    \ > divisor {\n                largestDivisor = divisor\n            }\n     \
    \   }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpfxmfk2cg/tmpfxmfk2cg.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281c5d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281c2c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281c2c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281c2c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfxmfk2cg                        0x00005631dcb6942b <unavailable> + 5163

    5    libc.so.6                          0x00002b281c7bc460 __libc_start_main +
    245

    6    tmpfxmfk2cg                        0x00005631dcb68fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978467
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    while divisor\
    \ < n {\n        if n % divisor == 0 {\n            largest = divisor\n      \
    \  }\n        divisor++\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplxe05h21.swift:12:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        divisor++\n               ^~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largest_divisor(n: n, factors: nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_y8lqp58.swift:6:43: error: extra argument 'factors' in call\n\
    \    return largest_divisor(n: n, factors: nil)\n                          ~~~~~~~~~~~~~~~~^~~~\n\
    /tmp/tmp_y8lqp58.swift:6:43: error: 'nil' requires a contextual type\n    return\
    \ largest_divisor(n: n, factors: nil)\n                                      \
    \    ^\n"
  stdout: ''
  timestamp: 1659978468
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    var divisor = 1\n    var divisorCount\
    \ = 0\n    for number in 1...n {\n        if number % divisor == 0 {\n       \
    \     divisorCount++\n            if divisorCount > largestDivisor {\n       \
    \         largestDivisor = divisorCount\n            }\n        } else {\n   \
    \         divisorCount = 0\n        }\n        divisor++\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp6gyq2nk9.swift:11:25: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            divisorCount++\n                        ^~\n\
    /tmp/tmp6gyq2nk9.swift:18:16: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n        divisor++\n               ^~\n"
  stdout: ''
  timestamp: 1659978468
