language: swift
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var note_index = 0\n    var note_length = 0\n\
    \    var note_string = \"\"\n    var note_last_beat = 0\n    var note_last_beat_length\
    \ = 0\n    var note_last_beat_string = \"\"\n    var note_last_beat_last_beat\
    \ = 0\n    var note_last_beat_last_beat_length = 0\n    var note_last_beat_last_beat_string\
    \ = \"\"\n    var note_last_beat_last_beat_last_beat = 0\n    var note_last_beat_last_beat_last_beat_length\
    \ = 0\n    var note_last_beat_last_beat_last_beat_string = \"\"\n    var note_last_beat_last_beat_last_beat_last_beat\
    \ = 0\n    var note_last_beat_last_beat_last_beat_last_beat_length = 0\n    var\
    \ note_last_beat_last_beat_last_beat_last_beat_string = \"\"\n    var note_last_beat_last_beat_last_beat_last_beat_last_beat\
    \ = 0\n    var note_last_beat_last_beat_last_beat_last_beat_last_beat_length =\
    \ 0\n    var note_last_beat_last_beat_last_beat_last_beat_last_beat_string = \"\
    \"\n    var note_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat =\
    \ 0\n    var note_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_length\
    \ = 0\n    var note_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_string\
    \ = \"\"\n    var note_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat\
    \ = 0\n    var note_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_length\
    \ = 0\n    var note_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_string\
    \ = \"\"\n    var note_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat\
    \ = 0\n    var note_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_length\
    \ = 0\n    var note_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_string\
    \ = \"\"\n    var note_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat\
    \ = 0\n    var note_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_be\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpzzk7393j.swift:42:9: error: type annotation missing in pattern\n\
    \    var note_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_be\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_string\
    \ = \"\"\n    var current_note_length_string_index = 0\n    var current_note_length_string_value\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_index = 0\n    var current_note_length_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string = \"\"\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppzpchrsx.swift:26:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_index = 0\n        ^\n\
    /tmp/tmppzpchrsx.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:31:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var beats_so_far = 0\n    var notes_so_far = 0\n    var notes_last_beat =\
    \ 0\n    var notes_last_beat_so_far = 0\n    var notes_last_beat_so_far_so_far\
    \ = 0\n    var notes_last_beat_so_far_so_far_so_far = 0\n    var notes_last_beat_so_far_so_far_so_far_so_far\
    \ = 0\n    var notes_last_beat_so_far_so_far_so_far_so_far_so_far = 0\n    var\
    \ notes_last_beat_so_far_so_far_so_far_so_far_so_far_so_far = 0\n    var notes_last_beat_so_far_so_far_so_far_so_far_so_far_so_far_so_far\
    \ = 0\n    var notes_last_beat_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far\
    \ = 0\n    var notes_last_beat_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far\
    \ = 0\n    var notes_last_beat_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far\
    \ = 0\n    var notes_last_beat_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far\
    \ = 0\n    var notes_last_beat_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far\
    \ = 0\n    var notes_last_beat_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far\
    \ = 0\n    var notes_last_beat_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far\
    \ = 0\n    var notes_last_beat_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far\
    \ = 0\n    var notes_last_beat_so_far_so_far_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpgl_bs2r7.swift:28:9: error: invalid redeclaration of 'notes_last_beat_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far'\n\
    \    var notes_last_beat_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far\
    \ = 0\n        ^\n/tmp/tmpgl_bs2r7.swift:27:9: note: 'notes_last_beat_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far'\
    \ previously declared here\n    var notes_last_beat_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far\
    \ = 0\n        ^\n/tmp/tmpgl_bs2r7.swift:31:9: error: type annotation missing\
    \ in pattern\n    var notes_last_beat_so_far_so_far_\n        ^\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var notes_index = 0\n\
    \    var notes_last_index = 0\n    var notes_last_beat = 0\n    var notes_last_beat_index\
    \ = 0\n    var notes_last_beat_length = 0\n    var notes_last_beat_length_index\
    \ = 0\n    var notes_last_beat_length_index2 = 0\n    var notes_last_beat_length_index3\
    \ = 0\n    var notes_last_beat_length_index4 = 0\n    var notes_last_beat_length_index5\
    \ = 0\n    var notes_last_beat_length_index6 = 0\n    var notes_last_beat_length_index7\
    \ = 0\n    var notes_last_beat_length_index8 = 0\n    var notes_last_beat_length_index9\
    \ = 0\n    var notes_last_beat_length_index10 = 0\n    var notes_last_beat_length_index11\
    \ = 0\n    var notes_last_beat_length_index12 = 0\n    var notes_last_beat_length_index13\
    \ = 0\n    var notes_last_beat_length_index14 = 0\n    var notes_last_beat_length_index15\
    \ = 0\n    var notes_last_beat_length_index16 = 0\n    var notes_last_beat_length_index17\
    \ = 0\n    var notes_last_beat_length_index18 = 0\n    var notes_last_beat_length_index19\
    \ = 0\n    var notes_last_beat_length_index20 = 0\n    var notes_last_beat_length_index21\
    \ = 0\n    var notes_last_beat_length_index22 = 0\n    var notes_last_beat_length_index23\
    \ = 0\n    var notes_last_beat_length_index24 = 0\n    var notes_last_beat_length_index25\
    \ = 0\n    var notes_last_beat_length_index26 = 0\n    var notes_last_beat_length_index27\
    \ = 0\n    var notes_last_beat_length_index28 = 0\n    var notes_last_beat_length_index29\
    \ = 0\n    var notes_last_beat_length_index30 = 0\n    var notes_last_beat_length_index31\
    \ = 0\n    var notes_last_beat_length_index32 = 0\n    var notes_last_beat_length_index33\
    \ = 0\n    var notes_last_beat_length_index34 = 0\n    var notes_last_beat_length_index35\
    \ = 0\n    var notes_last_beat_length_index36 = 0\n    var notes_last_beat_length_index37\
    \ = 0\n    var notes_last_beat_length_index38 = 0\n    var notes_last_beat_length_index39\
    \ = 0\n    var notes_last_beat_length_index40 = 0\n    var notes_last_beat_length_index41\
    \ = 0\n    var notes_last_be\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpwnl2167j.swift:61:9: error: type annotation missing in pattern\n\
    \    var notes_last_be\n        ^\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var notes_index = 0\n\
    \    var notes_length_index = 0\n    var notes_length_index2 = 0\n    var notes_length_index3\
    \ = 0\n    var notes_length_index4 = 0\n    var notes_length_index5 = 0\n    var\
    \ notes_length_index6 = 0\n    var notes_length_index7 = 0\n    var notes_length_index8\
    \ = 0\n    var notes_length_index9 = 0\n    var notes_length_index10 = 0\n   \
    \ var notes_length_index11 = 0\n    var notes_length_index12 = 0\n    var notes_length_index13\
    \ = 0\n    var notes_length_index14 = 0\n    var notes_length_index15 = 0\n  \
    \  var notes_length_index16 = 0\n    var notes_length_index17 = 0\n    var notes_length_index18\
    \ = 0\n    var notes_length_index19 = 0\n    var notes_length_index20 = 0\n  \
    \  var notes_length_index21 = 0\n    var notes_length_index22 = 0\n    var notes_length_index23\
    \ = 0\n    var notes_length_index24 = 0\n    var notes_length_index25 = 0\n  \
    \  var notes_length_index26 = 0\n    var notes_length_index27 = 0\n    var notes_length_index28\
    \ = 0\n    var notes_length_index29 = 0\n    var notes_length_index30 = 0\n  \
    \  var notes_length_index31 = 0\n    var notes_length_index32 = 0\n    var notes_length_index33\
    \ = 0\n    var notes_length_index34 = 0\n    var notes_length_index35 = 0\n  \
    \  var notes_length_index36 = 0\n    var notes_length_index37 = 0\n    var notes_length_index38\
    \ = 0\n    var notes_length_index39 = 0\n    var notes_length_index40 = 0\n  \
    \  var notes_length_index41 = 0\n    var notes_length_index42 = 0\n    var notes_length_index43\
    \ = 0\n    var notes_length_index44 = 0\n    var notes_length_index45 = 0\n  \
    \  var notes_length_index46 = 0\n    var notes_length_index47 = 0\n    var notes_length_index48\
    \ = 0\n    var notes_length_index49 = 0\n    var notes_length_index50 = 0\n  \
    \  var notes_length_index51 = 0\n    var notes_length_index52 = 0\n    var notes_length_index53\
    \ = 0\n    var notes_length_index54 = 0\n    var notes_length_index55 = 0\n  \
    \  var notes_length_index56 = 0\n    var notes_length_index57 = 0\n    var notes_length_index58\
    \ = 0\n    var notes_length_index59 = 0\n    var notes_length_index60 = 0\n  \
    \  var notes_length_index61 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8wh68uht.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp8wh68uht.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp8wh68uht.swift:14:9:\
    \ warning: initialization of variable 'notes_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:15:9: warning: initialization\
    \ of variable 'notes_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_index = 0\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmp8wh68uht.swift:16:9: warning: initialization of variable 'notes_length_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:17:9:\
    \ warning: initialization of variable 'notes_length_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:18:9: warning:\
    \ initialization of variable 'notes_length_index3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var notes_length_index3 = 0\n   \
    \ ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:19:9: warning: initialization\
    \ of variable 'notes_length_index4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_length_index4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp8wh68uht.swift:20:9: warning: initialization of variable 'notes_length_index5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:21:9:\
    \ warning: initialization of variable 'notes_length_index6' was never used; consider\
    \ replacing with assi"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_value\
    \ = 0\n    var current_note_length_value_index = 0\n    var current_note_length_value_length\
    \ = 0\n    var current_note_length_value_length_index = 0\n    var current_note_length_value_length_value\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpiop1v_rm.swift:66:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpiop1v_rm.swift:23:9: error: invalid redeclaration of 'current_note_length_value_length_value_index'\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmpiop1v_rm.swift:22:9:\
    \ note: 'current_note_length_value_length_value_index' previously declared here\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmpiop1v_rm.swift:24:9:\
    \ error: invalid redeclaration of 'current_note_length_value_length_value_index'\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmpiop1v_rm.swift:22:9:\
    \ note: 'current_note_length_value_length_value_index' previously declared here\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmpiop1v_rm.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_length_value_index'\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmpiop1v_rm.swift:22:9:\
    \ note: 'current_note_length_value_length_value_index' previously declared here\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmpiop1v_rm.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_length_value_index'\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmpiop1v_rm.swift:22:9:\
    \ note: 'current_note_length_value_length_value_index' previously declared here\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmpiop1v_rm.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_length_value_index'\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmpiop1v_rm.swift:22:9:\
    \ note: 'current_note_length_value_length_value_index' previously declared here\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmpiop1v_rm.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_length_value_index'\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmpiop1v_rm.swift:22:9:\
    \ note: 'current_note_length_v"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var beats_length = 0\n\
    \    var notes_index = 0\n    var beats_index = 0\n    var notes_length_index\
    \ = 0\n    var beats_length_index = 0\n    var notes_length_index2 = 0\n    var\
    \ beats_length_index2 = 0\n    var notes_length_index3 = 0\n    var beats_length_index3\
    \ = 0\n    var notes_length_index4 = 0\n    var beats_length_index4 = 0\n    var\
    \ notes_length_index5 = 0\n    var beats_length_index5 = 0\n    var notes_length_index6\
    \ = 0\n    var beats_length_index6 = 0\n    var notes_length_index7 = 0\n    var\
    \ beats_length_index7 = 0\n    var notes_length_index8 = 0\n    var beats_length_index8\
    \ = 0\n    var notes_length_index9 = 0\n    var beats_length_index9 = 0\n    var\
    \ notes_length_index10 = 0\n    var beats_length_index10 = 0\n    var notes_length_index11\
    \ = 0\n    var beats_length_index11 = 0\n    var notes_length_index12 = 0\n  \
    \  var beats_length_index12 = 0\n    var notes_length_index13 = 0\n    var beats_length_index13\
    \ = 0\n    var notes_length_index14 = 0\n    var beats_length_index14 = 0\n  \
    \  var notes_length_index15 = 0\n    var beats_length_index15 = 0\n    var notes_length_index16\
    \ = 0\n    var beats_length_index16 = 0\n    var notes_length_index17 = 0\n  \
    \  var beats_length_index17 = 0\n    var notes_length_index18 = 0\n    var beats_length_index18\
    \ = 0\n    var notes_length_index19 = 0\n    var beats_length_index19 = 0\n  \
    \  var notes_length_index20 = 0\n    var beats_length_index20 = 0\n    var notes_length_index21\
    \ = 0\n    var beats_length_index21 = 0\n    var notes_length_index22 = 0\n  \
    \  var beats_length_index22 = 0\n    var notes_length_index23 = 0\n    var beats_length_index23\
    \ = 0\n    var notes_length_index24 = 0\n    var beats_length_index24 = 0\n  \
    \  var notes_length_index25 = 0\n    var beats_length_index25 = 0\n    var notes_length_index26\
    \ = 0\n    var beats_length_index26 = 0\n    var notes_length_index27 = 0\n  \
    \  var beats_length_index27 = 0\n    var notes_length_index28 = 0\n    var beats_length_index28\
    \ = 0\n    var notes_length_index29 = 0\n    var beats_length_index29 = 0\n  \
    \  var notes_length_index30 = 0\n    var beats_length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmps6te2dh8.swift:77:9: error: type annotation missing in pattern\n\
    \    var beats_length\n        ^\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var lastbeat = 0\n    var lastnote = \"\"\n    var lastlast = 0\n \
    \   var lastlastbeat = 0\n    var lastlastnote = \"\"\n    var lastlastlast =\
    \ 0\n    var lastlastlastbeat = 0\n    var lastlastlastnote = \"\"\n    var lastlastlastlast\
    \ = 0\n    var lastlastlastlastbeat = 0\n    var lastlastlastlastnote = \"\"\n\
    \    var lastlastlastlastlast = 0\n    var lastlastlastlastbeat = 0\n    var lastlastlastlastnote\
    \ = \"\"\n    var lastlastlastlastlast = 0\n    var lastlastlastlastbeat = 0\n\
    \    var lastlastlastlastnote = \"\"\n    var lastlastlastlastlast = 0\n    var\
    \ lastlastlastlastbeat = 0\n    var lastlastlastlastnote = \"\"\n    var lastlastlastlastlast\
    \ = 0\n    var lastlastlastlastbeat = 0\n    var lastlastlastlastnote = \"\"\n\
    \    var lastlastlastlastlast = 0\n    var lastlastlastlastbeat = 0\n    var lastlastlastlastnote\
    \ = \"\"\n    var lastlastlastlastlast = 0\n    var lastlastlastlastbeat = 0\n\
    \    var lastlastlastlastnote = \"\"\n    var lastlastlastlastlast = 0\n    var\
    \ lastlastlastlastbeat = 0\n    var lastlastlastlastnote = \"\"\n    var lastlastlastlastlast\
    \ = 0\n    var lastlastlastlastbeat = 0\n    var lastlastlastlastnote = \"\"\n\
    \    var lastlastlastlastlast = 0\n    var lastlastlastlastbeat = 0\n    var lastlastlastlastnote\
    \ = \"\"\n    var lastlastlastlastlast = 0\n    var lastlastlastlastbeat = 0\n\
    \    var lastlastlastlastnote = \"\"\n    var lastlastlastlastlast = 0\n    var\
    \ lastlastlastlastbeat = 0\n    var lastlastlastlastnote = \"\"\n    var lastlastlastlastlast\
    \ = 0\n    var lastlastlastlastbeat = 0\n    var lastlastlastlastnote = \"\"\n\
    \    var lastlastlastlastlast = 0\n    var lastlastlastlastbeat = 0\n    var lastlastlastlastnote\
    \ = \"\"\n    var lastlastlastlastlast = 0\n    var lastlastlastlastbeat = 0\n\
    \    var lastlastlastlastnote = \"\"\n    var lastlastlastlastlast = 0\n    var\
    \ lastlastlastlastbeat = 0\n    var lastlastlastlastnote = \"\"\n    var lastlastlastlastlast\
    \ = 0\n    var lastlastlastlastbeat = 0\n    var lastlastlastlastnote = \"\"\n\
    \    var lastlastlastlastlast = 0\n    var lastlastlastlastbeat = 0\n    var lastlastlastlastnote\
    \ = \"\"\n    var lastlastlastlastlast = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp04o7c4x0.swift:29:9: error: invalid redeclaration of 'lastlastlastlastbeat'\n\
    \    var lastlastlastlastbeat = 0\n        ^\n/tmp/tmp04o7c4x0.swift:26:9: note:\
    \ 'lastlastlastlastbeat' previously declared here\n    var lastlastlastlastbeat\
    \ = 0\n        ^\n/tmp/tmp04o7c4x0.swift:30:9: error: invalid redeclaration of\
    \ 'lastlastlastlastnote'\n    var lastlastlastlastnote = \"\"\n        ^\n/tmp/tmp04o7c4x0.swift:27:9:\
    \ note: 'lastlastlastlastnote' previously declared here\n    var lastlastlastlastnote\
    \ = \"\"\n        ^\n/tmp/tmp04o7c4x0.swift:31:9: error: invalid redeclaration\
    \ of 'lastlastlastlastlast'\n    var lastlastlastlastlast = 0\n        ^\n/tmp/tmp04o7c4x0.swift:28:9:\
    \ note: 'lastlastlastlastlast' previously declared here\n    var lastlastlastlastlast\
    \ = 0\n        ^\n/tmp/tmp04o7c4x0.swift:32:9: error: invalid redeclaration of\
    \ 'lastlastlastlastbeat'\n    var lastlastlastlastbeat = 0\n        ^\n/tmp/tmp04o7c4x0.swift:26:9:\
    \ note: 'lastlastlastlastbeat' previously declared here\n    var lastlastlastlastbeat\
    \ = 0\n        ^\n/tmp/tmp04o7c4x0.swift:33:9: error: invalid redeclaration of\
    \ 'lastlastlastlastnote'\n    var lastlastlastlastnote = \"\"\n        ^\n/tmp/tmp04o7c4x0.swift:27:9:\
    \ note: 'lastlastlastlastnote' previously declared here\n    var lastlastlastlastnote\
    \ = \"\"\n        ^\n/tmp/tmp04o7c4x0.swift:34:9: error: invalid redeclaration\
    \ of 'lastlastlastlastlast'\n    var lastlastlastlastlast = 0\n        ^\n/tmp/tmp04o7c4x0.swift:28:9:\
    \ note: 'lastlastlastlastlast' previously declared here\n    var lastlastlastlastlast\
    \ = 0\n        ^\n/tmp/tmp04o7c4x0.swift:35:9: error: invalid redeclaration of\
    \ 'lastlastlastlastbeat'\n    var lastlastlastlastbeat = 0\n        ^\n/tmp/tmp04o7c4x0.swift:26:9:\
    \ note: 'lastlastlastlastbeat' previously declared here\n    var lastlastlastlastbeat\
    \ = 0\n        ^\n/tmp/tmp04o7c4x0.swift:36:9: error: invalid redeclaration of\
    \ 'lastlastlastlastnote'\n    var lastlastlastlastnote = \"\"\n        ^\n/tmp/tmp04o7c4x0.swift:27:9:\
    \ note: 'lastlastlastlastnote' previously declared here\n    var lastlastlastlastnote\
    \ = \"\"\n        ^\n/tmp/tmp04o7c4x0.s"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var i = 0\n    for c in music_string {\n        if c == 'o' {\n   \
    \         beats.append(beat)\n            beat = 0\n            notes.append(note)\n\
    \            note = \"\"\n            last = 0\n        } else if c == '|' {\n\
    \            beats.append(beat)\n            beat = 0\n            notes.append(note)\n\
    \            note = \"\"\n            last = 1\n        } else if c == '.' {\n\
    \            beats.append(beat)\n            beat = 0\n            notes.append(note)\n\
    \            note = \"\"\n            last = 0\n        } else {\n           \
    \ note += String(c)\n        }\n        i += 1\n    }\n    beats.append(beat)\n\
    \    beat = 0\n    notes.append(note)\n    note = \"\"\n    last = 0\n    for\
    \ c in notes {\n        if c == \"o\" {\n            beat += 4\n        } else\
    \ if c == \"|\" {\n            beat += 2\n        } else if c == \".\" {\n   \
    \         beat += 1\n        } else {\n            beat += Int(c)\n        }\n\
    \    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpwomzq7qn.swift:19:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpwomzq7qn.swift:25:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmpwomzq7qn.swift:31:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.' {\n                       ^~~\n\
    \                       \".\"\n/tmp/tmpwomzq7qn.swift:55:21: error: value of optional\
    \ type 'Int?' must be unwrapped to a value of type 'Int'\n            beat +=\
    \ Int(c)\n                    ^\n/tmp/tmpwomzq7qn.swift:55:21: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         beat += Int(c)\n                    ^\n                           ??\
    \ <#default value#>\n/tmp/tmpwomzq7qn.swift:55:21: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n            beat +=\
    \ Int(c)\n                    ^\n                          !\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = music_string.characters\n    var beat = 0\n    var note = 0\n\
    \    var last = 0\n    var last_beat = 0\n    var last_note = 0\n    var last_last\
    \ = 0\n    var last_last_beat = 0\n    var last_last_note = 0\n    var last_last_last\
    \ = 0\n    var last_last_last_beat = 0\n    var last_last_last_note = 0\n    var\
    \ last_last_last_last = 0\n    var last_last_last_last_beat = 0\n    var last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last = 0\n    var last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_note = 0\n    var last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_beat = 0\n    var last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last = 0\n    var last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_note = 0\n    var last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_beat = 0\n    var last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last = 0\n    var last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_note = 0\n    var last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_beat = 0\n    var last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last = 0\n    var last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_note = 0\n    var last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_beat = 0\n    var last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last = 0\n    var last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_note = 0\n    var last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_beat = 0\n    var last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last = 0\n    var last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_note = 0\n    var last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_beat = 0\n    var last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last = 0\n    var last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_note = 0\n    var last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_beat = 0\n    var last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last = 0\n    var last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_note = 0\n    var last_last_last_last_last_last\
    \ = 0\n    var last_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp140c0i0l.swift:13:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var notes = music_string.characters\n             \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp140c0i0l.swift:32:9: error: invalid redeclaration of 'last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_beat = 0\n        ^\n/tmp/tmp140c0i0l.swift:29:9:\
    \ note: 'last_last_last_last_last_beat' previously declared here\n    var last_last_last_last_last_beat\
    \ = 0\n        ^\n/tmp/tmp140c0i0l.swift:33:9: error: invalid redeclaration of\
    \ 'last_last_last_last_last_note'\n    var last_last_last_last_last_note = 0\n\
    \        ^\n/tmp/tmp140c0i0l.swift:30:9: note: 'last_last_last_last_last_note'\
    \ previously declared here\n    var last_last_last_last_last_note = 0\n      \
    \  ^\n/tmp/tmp140c0i0l.swift:34:9: error: invalid redeclaration of 'last_last_last_last_last_last'\n\
    \    var last_last_last_last_last_last = 0\n        ^\n/tmp/tmp140c0i0l.swift:31:9:\
    \ note: 'last_last_last_last_last_last' previously declared here\n    var last_last_last_last_last_last\
    \ = 0\n        ^\n/tmp/tmp140c0i0l.swift:35:9: error: invalid redeclaration of\
    \ 'last_last_last_last_last_beat'\n    var last_last_last_last_last_beat = 0\n\
    \        ^\n/tmp/tmp140c0i0l.swift:29:9: note: 'last_last_last_last_last_beat'\
    \ previously declared here\n    var last_last_last_last_last_beat = 0\n      \
    \  ^\n/tmp/tmp140c0i0l.swift:36:9: error: invalid redeclaration of 'last_last_last_last_last_note'\n\
    \    var last_last_last_last_last_note = 0\n        ^\n/tmp/tmp140c0i0l.swift:30:9:\
    \ note: 'last_last_last_last_last_note' previously declared here\n    var last_last_last_last_last_note\
    \ = 0\n        ^\n/tmp/tmp140c0i0l.swift:37:9: error: invalid redeclaration of\
    \ 'last_last_last_last_last_last'\n    var last_last_last_last_last_last = 0\n\
    \        ^\n/tmp/tmp140c0i0l.swift:31:9: note: 'last_last_last_last_last_last'\
    \ previously declared here\n    var last_last_last_last_last_last = 0\n      \
    \  ^\n/tmp/tmp140c0"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_beats = [String]()\n    var beats_notes\
    \ = [String]()\n    var beats_notes_beats = [String]()\n    var beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats = [String]()\n    var beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats = [String]()\n\
    \    var beats_notes_beats_notes_beats_notes_beats_notes = [String]()\n    var\
    \ beats_notes_beats_notes_beats_notes_beats_notes_beats = [String]()\n    var\
    \ beats_notes_beats_notes_beats_notes_beats_notes_beats_notes = [String]()\n \
    \   var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes = [String]()\n\
    \    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats = [String]()\n\
    \    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beat\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp7v4raguz.swift:24:9: error: invalid redeclaration of 'beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\n\
    \    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes = [String]()\n\
    \        ^\n/tmp/tmp7v4raguz.swift:23:9: note: 'beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\
    \ previously declared here\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n        ^\n/tmp/tmp7v4raguz.swift:29:9: error: invalid redeclaration\
    \ of 'beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\n\
    \    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n        ^\n/tmp/tmp7v4raguz.swift:28:9: note: 'beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\
    \ previously declared here\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n        ^\n/tmp/tmp7v4raguz.swift:34:9: error: type annotation\
    \ missing in pattern\n    var beats_notes_beat\n        ^\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_index2\
    \ = 0\n    var current_note_length_index3 = 0\n    var current_note_length_index4\
    \ = 0\n    var current_note_length_index5 = 0\n    var current_note_length_index6\
    \ = 0\n    var current_note_length_index7 = 0\n    var current_note_length_index8\
    \ = 0\n    var current_note_length_index9 = 0\n    var current_note_length_index10\
    \ = 0\n    var current_note_length_index11 = 0\n    var current_note_length_index12\
    \ = 0\n    var current_note_length_index13 = 0\n    var current_note_length_index14\
    \ = 0\n    var current_note_length_index15 = 0\n    var current_note_length_index16\
    \ = 0\n    var current_note_length_index17 = 0\n    var current_note_length_index18\
    \ = 0\n    var current_note_length_index19 = 0\n    var current_note_length_index20\
    \ = 0\n    var current_note_length_index21 = 0\n    var current_note_length_index22\
    \ = 0\n    var current_note_length_index23 = 0\n    var current_note_length_index24\
    \ = 0\n    var current_note_length_index25 = 0\n    var current_note_length_index26\
    \ = 0\n    var current_note_length_index27 = 0\n    var current_note_length_index28\
    \ = 0\n    var current_note_length_index29 = 0\n    var current_note_length_index30\
    \ = 0\n    var current_note_length_index31 = 0\n    var current_note_length_index32\
    \ = 0\n    var current_note_length_index33 = 0\n    var current_note_length_index34\
    \ = 0\n    var current_note_length_index35 = 0\n    var current_note_length_index36\
    \ = 0\n    var current_note_length_index37 = 0\n    var current_note_length_index38\
    \ = 0\n    var current_note_length_index39 = 0\n    var current_note_length_index40\
    \ = 0\n    var current_note_length_index41 = 0\n    var current_note_length_index42\
    \ = 0\n    var current_note_length_index43 = 0\n    var current_note_length_index44\
    \ = 0\n    var current_note_length_index45 = 0\n    var current_note_length_index46\
    \ = 0\n    var current_note_length_index47 = 0\n    var current_note_length_index48\
    \ = 0\n    var current_note_length_index49 = 0\n    var current_note_length_index50\
    \ = 0\n    var current_note_length_index51 = 0\n    var current_note_length_index52\
    \ = 0\n    var current_note_length_index53 = 0\n    var current_note_length_index54\
    \ = 0\n    var current_note_length_index55 = 0\n    var current_note_length_index56\
    \ = 0\n    var current_note_length_index57 = 0\n    var current_note_length_index58\
    \ = 0\n    var current_note_length_index59 = 0\n    var current_note_length_index60\
    \ = 0\n    var current_note_length_index61 = 0\n    var current_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1kdovva5.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var notes: [String] = []\n    var note_count = 0\n    var note_length = 0\n\
    \    var note_last = 0\n    var note_beat = 0\n    var note_octave = 0\n    var\
    \ note_duration = 0\n    var note_duration_index = 0\n    var note_duration_index2\
    \ = 0\n    var note_duration_index3 = 0\n    var note_duration_index4 = 0\n  \
    \  var note_duration_index5 = 0\n    var note_duration_index6 = 0\n    var note_duration_index7\
    \ = 0\n    var note_duration_index8 = 0\n    var note_duration_index9 = 0\n  \
    \  var note_duration_index10 = 0\n    var note_duration_index11 = 0\n    var note_duration_index12\
    \ = 0\n    var note_duration_index13 = 0\n    var note_duration_index14 = 0\n\
    \    var note_duration_index15 = 0\n    var note_duration_index16 = 0\n    var\
    \ note_duration_index17 = 0\n    var note_duration_index18 = 0\n    var note_duration_index19\
    \ = 0\n    var note_duration_index20 = 0\n    var note_duration_index21 = 0\n\
    \    var note_duration_index22 = 0\n    var note_duration_index23 = 0\n    var\
    \ note_duration_index24 = 0\n    var note_duration_index25 = 0\n    var note_duration_index26\
    \ = 0\n    var note_duration_index27 = 0\n    var note_duration_index28 = 0\n\
    \    var note_duration_index29 = 0\n    var note_duration_index30 = 0\n    var\
    \ note_duration_index31 = 0\n    var note_duration_index32 = 0\n    var note_duration_index33\
    \ = 0\n    var note_duration_index34 = 0\n    var note_duration_index35 = 0\n\
    \    var note_duration_index36 = 0\n    var note_duration_index37 = 0\n    var\
    \ note_duration_index38 = 0\n    var note_duration_index39 = 0\n    var note_duration_index40\
    \ = 0\n    var note_duration_index41 = 0\n    var note_duration_index42 = 0\n\
    \    var note_duration_index43 = 0\n    var note_duration_index44 = 0\n    var\
    \ note_duration_index45 = 0\n    var note_duration_index46 = 0\n    var note_duration_index47\
    \ = 0\n    var note_duration_index48 = 0\n    var note_duration_index49 = 0\n\
    \    var note_duration_index50 = 0\n    var note_duration_index51 = 0\n    var\
    \ note_duration_index52 = 0\n    var note_duration_index53 = 0\n    var note_duration_index54\
    \ = 0\n    var note_duration_index55 = 0\n    var note_duration_index56 = 0\n\
    \    var note_duration_index57 = 0\n    var note_duration_index58 = 0\n    var\
    \ note_duration_index59 = 0\n    var note_duration_index60 = 0\n    var note_duration_index61\
    \ = 0\n    var note_duration_index62 = 0\n    var note_duration_index63 = 0\n\
    \    var note_duration_index64 = 0\n    var note_duration_index65 = 0\n    var\
    \ note_duration_index66 = 0\n    var note_duration_index67 = 0\n    var \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpco8f7i64.swift:87:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpco8f7i64.swift:12:9: warning: variable 'beats' was never used; consider\
    \ replacing with '_' or removing it\n    var beats: [Int] = []\n        ^~~~~\n\
    \        _\n/tmp/tmpco8f7i64.swift:13:9: warning: variable 'notes' was never used;\
    \ consider replacing with '_' or removing it\n    var notes: [String] = []\n \
    \       ^~~~~\n        _\n/tmp/tmpco8f7i64.swift:14:9: warning: initialization\
    \ of variable 'note_count' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_count = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpco8f7i64.swift:15:9:\
    \ warning: initialization of variable 'note_length' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_length = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpco8f7i64.swift:16:9: warning: initialization of variable 'note_last'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_last = 0\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpco8f7i64.swift:17:9:\
    \ warning: initialization of variable 'note_beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_beat = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpco8f7i64.swift:18:9: warning: initialization of variable 'note_octave'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_octave = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpco8f7i64.swift:19:9:\
    \ warning: initialization of variable 'note_duration' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var note_duration = 0\n\
    \    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpco8f7i64.swift:20:9: warning: initialization\
    \ of variable 'note_duration_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_duration_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpco8f7i64.swift:21:9: warning: initialization of variable 'note_duration_index2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_duration_index2 = 0\n    ~~~~^~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    for char\
    \ in music_string {\n        if char == \"o\" {\n            if note != \"\" {\n\
    \                beats.append(beat)\n                notes.append(note)\n    \
    \            beat = 0\n                note = \"\"\n            }\n        } else\
    \ {\n            note += char\n        }\n    }\n    beats.append(beat)\n    notes.append(note)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpaa3z1q19.swift:25:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            note += char\n             \
    \       ^\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = music_string.characters\n    var beat = 0\n    var note = 0\n\
    \    var last = 0\n    var lastBeat = 0\n    var lastNote = 0\n    var lastBeats\
    \ = 0\n    var lastNotes = 0\n    var lastNoteBeats = 0\n    var lastNoteBeat\
    \ = 0\n    var lastNoteBeats = 0\n    var lastNoteBeat = 0\n    var lastNoteBeats\
    \ = 0\n    var lastNoteBeat = 0\n    var lastNoteBeats = 0\n    var lastNoteBeat\
    \ = 0\n    var lastNoteBeats = 0\n    var lastNoteBeat = 0\n    var lastNoteBeats\
    \ = 0\n    var lastNoteBeat = 0\n    var lastNoteBeats = 0\n    var lastNoteBeat\
    \ = 0\n    var lastNoteBeats = 0\n    var lastNoteBeat = 0\n    var lastNoteBeats\
    \ = 0\n    var lastNoteBeat = 0\n    var lastNoteBeats = 0\n    var lastNoteBeat\
    \ = 0\n    var lastNoteBeats = 0\n    var lastNoteBeat = 0\n    var lastNoteBeats\
    \ = 0\n    var lastNoteBeat = 0\n    var lastNoteBeats = 0\n    var lastNoteBeat\
    \ = 0\n    var lastNoteBeats = 0\n    var lastNoteBeat = 0\n    var lastNoteBeats\
    \ = 0\n    var lastNoteBeat = 0\n    var lastNoteBeats = 0\n    var lastNoteBeat\
    \ = 0\n    var lastNoteBeats = 0\n    var lastNoteBeat = 0\n    var lastNoteBeats\
    \ = 0\n    var lastNoteBeat = 0\n    var lastNoteBeats = 0\n    var lastNoteBeat\
    \ = 0\n    var lastNoteBeats = 0\n    var lastNoteBeat = 0\n    var lastNoteBeats\
    \ = 0\n    var lastNoteBeat = 0\n    var lastNoteBeats = 0\n    var lastNoteBeat\
    \ = 0\n    var lastNoteBeats = 0\n    var lastNoteBeat = 0\n    var lastNoteBeats\
    \ = 0\n    var lastNoteBeat = 0\n    var lastNoteBeats = 0\n    var lastNoteBeat\
    \ = 0\n    var lastNoteBeats = 0\n    var lastNoteBeat = 0\n    var lastNoteBeats\
    \ = 0\n    var lastNoteBeat = 0\n    var lastNoteBeats = 0\n    var lastNoteBeat\
    \ = 0\n    var lastNoteBeats = 0\n    var lastNoteBeat = 0\n    var lastNoteBeats\
    \ = 0\n    var lastNoteBeat = 0\n    var lastNoteBeats = 0\n    var lastNoteBeat\
    \ = 0\n    var lastNoteBeats = 0\n    var lastNoteBeat = 0\n    var lastNoteBeats\
    \ = 0\n    var lastNoteBeat = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp0foq8wum.swift:87:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp0foq8wum.swift:13:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var notes = music_string.characters\n             \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp0foq8wum.swift:23:9: error: invalid redeclaration of 'lastNoteBeats'\n\
    \    var lastNoteBeats = 0\n        ^\n/tmp/tmp0foq8wum.swift:21:9: note: 'lastNoteBeats'\
    \ previously declared here\n    var lastNoteBeats = 0\n        ^\n/tmp/tmp0foq8wum.swift:24:9:\
    \ error: invalid redeclaration of 'lastNoteBeat'\n    var lastNoteBeat = 0\n \
    \       ^\n/tmp/tmp0foq8wum.swift:22:9: note: 'lastNoteBeat' previously declared\
    \ here\n    var lastNoteBeat = 0\n        ^\n/tmp/tmp0foq8wum.swift:25:9: error:\
    \ invalid redeclaration of 'lastNoteBeats'\n    var lastNoteBeats = 0\n      \
    \  ^\n/tmp/tmp0foq8wum.swift:21:9: note: 'lastNoteBeats' previously declared here\n\
    \    var lastNoteBeats = 0\n        ^\n/tmp/tmp0foq8wum.swift:26:9: error: invalid\
    \ redeclaration of 'lastNoteBeat'\n    var lastNoteBeat = 0\n        ^\n/tmp/tmp0foq8wum.swift:22:9:\
    \ note: 'lastNoteBeat' previously declared here\n    var lastNoteBeat = 0\n  \
    \      ^\n/tmp/tmp0foq8wum.swift:27:9: error: invalid redeclaration of 'lastNoteBeats'\n\
    \    var lastNoteBeats = 0\n        ^\n/tmp/tmp0foq8wum.swift:21:9: note: 'lastNoteBeats'\
    \ previously declared here\n    var lastNoteBeats = 0\n        ^\n/tmp/tmp0foq8wum.swift:28:9:\
    \ error: invalid redeclaration of 'lastNoteBeat'\n    var lastNoteBeat = 0\n \
    \       ^\n/tmp/tmp0foq8wum.swift:22:9: note: 'lastNoteBeat' previously declared\
    \ here\n    var lastNoteBeat = 0\n        ^\n/tmp/tmp0foq8wum.swift:29:9: error:\
    \ invalid redeclaration of 'lastNoteBeats'\n    var lastNoteBeats = 0\n      \
    \  ^\n/tmp/tmp0foq8wum.swift:21:9: note: 'lastNoteBeats' previously declared here\n\
    \    var lastNoteBeats = 0\n        ^\n/tmp/tmp0foq8wum.swift:30:9: error: invalid\
    \ redeclaration of 'lastNoteBeat'\n    var lastNoteBeat = 0\n        ^\n/t"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var note = String()\n    var last_note = String()\n\
    \    var last_beat = 0\n    var last_beat_count = 0\n    var last_note_count =\
    \ 0\n    var last_note_index = 0\n    var last_note_index2 = 0\n    var last_note_index3\
    \ = 0\n    var last_note_index4 = 0\n    var last_note_index5 = 0\n    var last_note_index6\
    \ = 0\n    var last_note_index7 = 0\n    var last_note_index8 = 0\n    var last_note_index9\
    \ = 0\n    var last_note_index10 = 0\n    var last_note_index11 = 0\n    var last_note_index12\
    \ = 0\n    var last_note_index13 = 0\n    var last_note_index14 = 0\n    var last_note_index15\
    \ = 0\n    var last_note_index16 = 0\n    var last_note_index17 = 0\n    var last_note_index18\
    \ = 0\n    var last_note_index19 = 0\n    var last_note_index20 = 0\n    var last_note_index21\
    \ = 0\n    var last_note_index22 = 0\n    var last_note_index23 = 0\n    var last_note_index24\
    \ = 0\n    var last_note_index25 = 0\n    var last_note_index26 = 0\n    var last_note_index27\
    \ = 0\n    var last_note_index28 = 0\n    var last_note_index29 = 0\n    var last_note_index30\
    \ = 0\n    var last_note_index31 = 0\n    var last_note_index32 = 0\n    var last_note_index33\
    \ = 0\n    var last_note_index34 = 0\n    var last_note_index35 = 0\n    var last_note_index36\
    \ = 0\n    var last_note_index37 = 0\n    var last_note_index38 = 0\n    var last_note_index39\
    \ = 0\n    var last_note_index40 = 0\n    var last_note_index41 = 0\n    var last_note_index42\
    \ = 0\n    var last_note_index43 = 0\n    var last_note_index44 = 0\n    var last_note_index45\
    \ = 0\n    var last_note_index46 = 0\n    var last_note_index47 = 0\n    var last_note_index48\
    \ = 0\n    var last_note_index49 = 0\n    var last_note_index50 = 0\n    var last_note_index51\
    \ = 0\n    var last_note_index52 = 0\n    var last_note_index53 = 0\n    var last_note_index54\
    \ = 0\n    var last_note_index55 = 0\n    var last_note_index56 = 0\n    var last_note_index57\
    \ = 0\n    var last_note_index58 = 0\n    var last_note_index59 = 0\n    var last_note_index60\
    \ = 0\n    var last_note_index61 = 0\n    var last_note_index62 = 0\n    var last_note_index63\
    \ = 0\n    var last_note_index64 = 0\n    var last_note_index65 = 0\n    var last_note_index66\
    \ = 0\n    var last_note_index67 = 0\n    var last_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmph5o0gy5h.swift:86:9: error: type annotation missing in pattern\n\
    \    var last_\n        ^\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_value\
    \ = 0\n    var current_note_length_value_index = 0\n    var current_note_length_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1902vg0i.swift:66:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp1902vg0i.swift:24:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp1902vg0i.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp1902vg0i.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp1902vg0i.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp1902vg0i.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp1902vg0i.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var notes: [String] = []\n    var note_index = 0\n    var note_string = \"\
    \"\n    var note_length = 0\n    var note_last_beat = 0\n    var note_last_beat_index\
    \ = 0\n    var note_last_beat_length = 0\n    var note_last_beat_note_index =\
    \ 0\n    var note_last_beat_note_string = \"\"\n    var note_last_beat_note_length\
    \ = 0\n    var note_last_beat_note_last_beat = 0\n    var note_last_beat_note_last_beat_index\
    \ = 0\n    var note_last_beat_note_last_beat_length = 0\n    var note_last_beat_note_last_beat_note_index\
    \ = 0\n    var note_last_beat_note_last_beat_note_string = \"\"\n    var note_last_beat_note_last_beat_note_length\
    \ = 0\n    var note_last_beat_note_last_beat_note_last_beat = 0\n    var note_last_beat_note_last_beat_note_last_beat_index\
    \ = 0\n    var note_last_beat_note_last_beat_note_last_beat_length = 0\n    var\
    \ note_last_beat_note_last_beat_note_last_beat_note_index = 0\n    var note_last_beat_note_last_beat_note_last_beat_note_string\
    \ = \"\"\n    var note_last_beat_note_last_beat_note_last_beat_note_length = 0\n\
    \    var note_last_beat_note_last_beat_note_last_beat_note_last_beat = 0\n   \
    \ var note_last_beat_note_last_beat_note_last_beat_note_last_beat_index = 0\n\
    \    var note_last_beat_note_last_beat_note_last_beat_note_last_beat_length =\
    \ 0\n    var note_last_beat_note_last_beat_note_last_beat_note_last_beat_note_index\
    \ = 0\n    var note_last_beat_note_last_beat_note_last_beat_note_last_beat_note_string\
    \ = \"\"\n    var note_last_beat_note_last_beat_note_last_beat_note_last_beat_note_length\
    \ = 0\n    var note_last_beat_note_last_beat_note_last_beat_note_last_beat_note_last_beat\
    \ = 0\n    var note_last_beat_note_last_beat_note_last_beat_note_last_beat_note_last_beat_index\
    \ = 0\n    var note_last_beat_note_last_beat_note_last_beat_note_last_beat_note_last_beat_length\
    \ = 0\n    var note_last_beat_note_last_beat_note_last_beat_note_last_beat_note_last_beat_note_index\
    \ = 0\n    var note_last_beat_note_last_beat_note_last_beat_note_last_beat_note_last_beat_note_string\
    \ = \"\"\n    var note_last_beat_note_last_beat_note_last_beat_note_last_beat_note_last_beat_note_length\
    \ = 0\n    var note_last_beat_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpsa_fw02_.swift:47:9: error: type annotation missing in pattern\n\
    \    var note_last_beat_\n        ^\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var current_note = \"\"\n    var current_beat\
    \ = 0\n    var current_beat_count = 0\n    var current_note_count = 0\n    var\
    \ current_note_length = 0\n    var current_note_length_count = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_index = 0\n    var current_note = \"\"\n    var current_note_length\
    \ = 0\n    var current_note_length_count = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_index = 0\n    var current_note = \"\"\n    var current_note_length\
    \ = 0\n    var current_note_length_count = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_index = 0\n    var current_note = \"\"\n    var current_note_length\
    \ = 0\n    var current_note_length_count = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_index = 0\n    var current_note = \"\"\n    var current_note_length\
    \ = 0\n    var current_note_length_count = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_index = 0\n    var current_note = \"\"\n    var current_note_length\
    \ = 0\n    var current_note_length_count = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_index = 0\n    var current_note = \"\"\n    var current_note_length\
    \ = 0\n    var current_note_length_count = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_index = 0\n    var current_note = \"\"\n    var current_note_length\
    \ = 0\n    var current_note_length_count = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_index = 0\n    var current_note = \"\"\n    var current_note_length\
    \ = 0\n    var current_note_length_count = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_index = 0\n    var current_note = \"\"\n    var current_note_length\
    \ = 0\n    var current_note_length_count = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_index = 0\n    var current_note = \"\"\n    var current_note_length\
    \ = 0\n    var current_note_length_count = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_index = 0\n    var current_note = \"\"\n    var current_note_length\
    \ = 0\n    var current_note_length_count = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_index = 0\n    var current_note = \"\"\n    var current_note_length\
    \ = 0\n    var current_note_length_count = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_index = 0\n    var current_note = \"\"\n    var current_note_length\
    \ = 0\n    var current_note_length_count = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_index = 0\n    var current_note = \"\"\n    var current_note_length\
    \ = 0\n    var current_note_length_count = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_index = 0\n    var current_note = \"\"\n    var current_note_length\
    \ = 0\n    var current_note_length_count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpy1fsi1ot.swift:22:9: error: invalid redeclaration of 'current_note'\n\
    \    var current_note = \"\"\n        ^\n/tmp/tmpy1fsi1ot.swift:14:9: note: 'current_note'\
    \ previously declared here\n    var current_note = \"\"\n        ^\n/tmp/tmpy1fsi1ot.swift:23:9:\
    \ error: invalid redeclaration of 'current_note_length'\n    var current_note_length\
    \ = 0\n        ^\n/tmp/tmpy1fsi1ot.swift:18:9: note: 'current_note_length' previously\
    \ declared here\n    var current_note_length = 0\n        ^\n/tmp/tmpy1fsi1ot.swift:24:9:\
    \ error: invalid redeclaration of 'current_note_length_count'\n    var current_note_length_count\
    \ = 0\n        ^\n/tmp/tmpy1fsi1ot.swift:19:9: note: 'current_note_length_count'\
    \ previously declared here\n    var current_note_length_count = 0\n        ^\n\
    /tmp/tmpy1fsi1ot.swift:25:9: error: invalid redeclaration of 'current_note_length_index'\n\
    \    var current_note_length_index = 0\n        ^\n/tmp/tmpy1fsi1ot.swift:20:9:\
    \ note: 'current_note_length_index' previously declared here\n    var current_note_length_index\
    \ = 0\n        ^\n/tmp/tmpy1fsi1ot.swift:26:9: error: invalid redeclaration of\
    \ 'current_note_index'\n    var current_note_index = 0\n        ^\n/tmp/tmpy1fsi1ot.swift:21:9:\
    \ note: 'current_note_index' previously declared here\n    var current_note_index\
    \ = 0\n        ^\n/tmp/tmpy1fsi1ot.swift:27:9: error: invalid redeclaration of\
    \ 'current_note'\n    var current_note = \"\"\n        ^\n/tmp/tmpy1fsi1ot.swift:14:9:\
    \ note: 'current_note' previously declared here\n    var current_note = \"\"\n\
    \        ^\n/tmp/tmpy1fsi1ot.swift:28:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = 0\n        ^\n/tmp/tmpy1fsi1ot.swift:18:9: note:\
    \ 'current_note_length' previously declared here\n    var current_note_length\
    \ = 0\n        ^\n/tmp/tmpy1fsi1ot.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_count'\n    var current_note_length_count = 0\n       \
    \ ^\n/tmp/tmpy1fsi1ot.swift:19:9: note: 'current_note_length_count' previously\
    \ declared here\n    var current_note_length_count = 0\n        ^\n/tmp/tmpy1fsi1ot.swift:30:9:\
    \ error: inva"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = Int()\n    var notes = [Int]()\n    var notes_count\
    \ = 0\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(parse_music(music_string: \"\"\
    ) == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4, 4, 4,\
    \ 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string:\
    \ \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp9jq_bz_h.swift:97:22: error: expected initial value after '='\n\
    \    var note_length = \n                     ^\n/tmp/tmp9jq_bz_h.swift:18:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = Int()\n\
    \        ^\n/tmp/tmp9jq_bz_h.swift:17:9: note: 'note_length' previously declared\
    \ here\n    var note_length = Int()\n        ^\n/tmp/tmp9jq_bz_h.swift:19:9: error:\
    \ invalid redeclaration of 'note_length'\n    var note_length = Int()\n      \
    \  ^\n/tmp/tmp9jq_bz_h.swift:17:9: note: 'note_length' previously declared here\n\
    \    var note_length = Int()\n        ^\n/tmp/tmp9jq_bz_h.swift:20:9: error: invalid\
    \ redeclaration of 'note_length'\n    var note_length = Int()\n        ^\n/tmp/tmp9jq_bz_h.swift:17:9:\
    \ note: 'note_length' previously declared here\n    var note_length = Int()\n\
    \        ^\n/tmp/tmp9jq_bz_h.swift:21:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = Int()\n        ^\n/tmp/tmp9jq_bz_h.swift:17:9: note: 'note_length'\
    \ previously declared here\n    var note_length = Int()\n        ^\n/tmp/tmp9jq_bz_h.swift:22:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = Int()\n\
    \        ^\n/tmp/tmp9jq_bz_h.swift:17:9: note: 'note_length' previously declared\
    \ here\n    var note_length = Int()\n        ^\n/tmp/tmp9jq_bz_h.swift:23:9: error:\
    \ invalid redeclaration of 'note_length'\n    var note_length = Int()\n      \
    \  ^\n/tmp/tmp9jq_bz_h.swift:17:9: note: 'note_length' previously declared here\n\
    \    var note_length = Int()\n        ^\n/tmp/tmp9jq_bz_h.swift:24:9: error: invalid\
    \ redeclaration of 'note_length'\n    var note_length = Int()\n        ^\n/tmp/tmp9jq_bz_h.swift:17:9:\
    \ note: 'note_length' previously declared here\n    var note_length = Int()\n\
    \        ^\n/tmp/tmp9jq_bz_h.swift:25:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = Int()\n        ^\n/tmp/tmp9jq_bz_h.swift:17:9: note: 'note_length'\
    \ previously declared here\n    var note_length = Int()\n        ^\n/tmp/tmp9jq_bz_h.swift:26:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = Int()\n\
    \        ^\n/tmp/tmp9jq_bz_h.sw"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last_note\
    \ = \"\"\n    var last_beat = 0\n    var last_beat_index = 0\n    var last_note_index\
    \ = 0\n    var last_note_index2 = 0\n    var last_note_index3 = 0\n    var last_note_index4\
    \ = 0\n    var last_note_index5 = 0\n    var last_note_index6 = 0\n    var last_note_index7\
    \ = 0\n    var last_note_index8 = 0\n    var last_note_index9 = 0\n    var last_note_index10\
    \ = 0\n    var last_note_index11 = 0\n    var last_note_index12 = 0\n    var last_note_index13\
    \ = 0\n    var last_note_index14 = 0\n    var last_note_index15 = 0\n    var last_note_index16\
    \ = 0\n    var last_note_index17 = 0\n    var last_note_index18 = 0\n    var last_note_index19\
    \ = 0\n    var last_note_index20 = 0\n    var last_note_index21 = 0\n    var last_note_index22\
    \ = 0\n    var last_note_index23 = 0\n    var last_note_index24 = 0\n    var last_note_index25\
    \ = 0\n    var last_note_index26 = 0\n    var last_note_index27 = 0\n    var last_note_index28\
    \ = 0\n    var last_note_index29 = 0\n    var last_note_index30 = 0\n    var last_note_index31\
    \ = 0\n    var last_note_index32 = 0\n    var last_note_index33 = 0\n    var last_note_index34\
    \ = 0\n    var last_note_index35 = 0\n    var last_note_index36 = 0\n    var last_note_index37\
    \ = 0\n    var last_note_index38 = 0\n    var last_note_index39 = 0\n    var last_note_index40\
    \ = 0\n    var last_note_index41 = 0\n    var last_note_index42 = 0\n    var last_note_index43\
    \ = 0\n    var last_note_index44 = 0\n    var last_note_index45 = 0\n    var last_note_index46\
    \ = 0\n    var last_note_index47 = 0\n    var last_note_index48 = 0\n    var last_note_index49\
    \ = 0\n    var last_note_index50 = 0\n    var last_note_index51 = 0\n    var last_note_index52\
    \ = 0\n    var last_note_index53 = 0\n    var last_note_index54 = 0\n    var last_note_index55\
    \ = 0\n    var last_note_index56 = 0\n    var last_note_index57 = 0\n    var last_note_index58\
    \ = 0\n    var last_note_index59 = 0\n    var last_note_index60 = 0\n    var last_note_index61\
    \ = 0\n    var last_note_index62 = 0\n    var last_note_index63 = 0\n    var last_note_index64\
    \ = 0\n    var last_note_index65 = 0\n    var last_note_index66 = 0\n    var last_note_index67\
    \ = 0\n    var last_note_index68 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpeiloexfg.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpeiloexfg.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmpeiloexfg.swift:14:9:\
    \ warning: initialization of variable 'beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmpeiloexfg.swift:15:9: warning: initialization of variable 'note' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var note\
    \ = \"\"\n    ~~~~^~~~\n    _\n/tmp/tmpeiloexfg.swift:16:9: warning: initialization\
    \ of variable 'last_note' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var last_note = \"\"\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpeiloexfg.swift:17:9:\
    \ warning: initialization of variable 'last_beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var last_beat = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpeiloexfg.swift:18:9: warning: initialization of variable 'last_beat_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_beat_index = 0\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpeiloexfg.swift:19:9:\
    \ warning: initialization of variable 'last_note_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var last_note_index = 0\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpeiloexfg.swift:20:9: warning: initialization\
    \ of variable 'last_note_index2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var last_note_index2 = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpeiloexfg.swift:21:9: warning: initialization of variable 'last_note_index3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_note_index3 = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpeiloexfg.swift:22:9:\
    \ warning: initializ"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    for c in music_string {\n        if c == '.' {\n            notes.append(note)\n\
    \            note = \"\"\n            beat = 0\n            last = 0\n       \
    \ } else if c == 'o' {\n            notes.append(note)\n            note = \"\"\
    \n            beat = 0\n            last = 0\n        } else if c == '|' {\n \
    \           notes.append(note)\n            note = \"\"\n            beat = 0\n\
    \            last = 0\n        } else {\n            if last == 0 {\n        \
    \        beat = 0\n            }\n            note += String(c)\n            last\
    \ = 1\n        }\n        beats.append(beat)\n    }\n    notes.append(note)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp6hbwohxt.swift:18:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '.' {\n                ^~~\n                \".\"\n\
    /tmp/tmp6hbwohxt.swift:23:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == 'o' {\n                       ^~~\n                \
    \       \"o\"\n/tmp/tmp6hbwohxt.swift:28:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '|' {\n                       ^~~\n\
    \                       \"|\"\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array = [Int]()\n\
    \    var current_beat = 0\n    var current_note = \"\"\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_string\
    \ = \"\"\n    var current_note_length_string_index = 0\n    var current_note_length_string_value\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_index = 0\n    var current_note_length_string_value_string_value\
    \ = \"\"\n    var current_note_length_string_value_string_value_index = 0\n  \
    \  var current_note_length_string_value_string_value_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_value = 0\n    var\
    \ current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_value = 0\n    var\
    \ current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_value = 0\n    var\
    \ current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_value = 0\n    var\
    \ current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_value = 0\n    var\
    \ current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_value = 0\n    var\
    \ current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_value = 0\n    var \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1cg026_e.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp1cg026_e.swift:26:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_index = 0\n        ^\n\
    /tmp/tmp1cg026_e.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp1cg026_e.swift:27:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_value'\n    var current_note_length_string_value_string_value_value\
    \ = 0\n        ^\n/tmp/tmp1cg026_e.swift:25:9: note: 'current_note_length_string_value_string_value_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_value\
    \ = 0\n        ^\n/tmp/tmp1cg026_e.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp1cg026_e.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp1cg026_e.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_value'\n    var current_note_length_string_value_string_value_value\
    \ = 0\n        ^\n/tmp/tmp1cg026_e.swift:25:9: note: 'current_note_length_string_value_string_value_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_value\
    \ = 0\n        ^\n/tmp/tmp1cg026_e.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp1cg026_e.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp1cg026_e.swift:31:9: error: invalid redeclaration of\
    \ 'current_note_length_string_val"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array = [Int]()\n\
    \    var current_beat = 0\n    var current_note = 0\n    var current_note_string\
    \ = \"\"\n    var current_note_length = 0\n    var current_note_length_string\
    \ = \"\"\n    var current_note_length_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppqvj__w4.swift:20:9: error: invalid redeclaration of 'current_note_length_string_index'\n\
    \    var current_note_length_string_index = 0\n        ^\n/tmp/tmppqvj__w4.swift:19:9:\
    \ note: 'current_note_length_string_index' previously declared here\n    var current_note_length_string_index\
    \ = 0\n        ^\n/tmp/tmppqvj__w4.swift:21:9: error: invalid redeclaration of\
    \ 'current_note_length_string_index'\n    var current_note_length_string_index\
    \ = 0\n        ^\n/tmp/tmppqvj__w4.swift:19:9: note: 'current_note_length_string_index'\
    \ previously declared here\n    var current_note_length_string_index = 0\n   \
    \     ^\n/tmp/tmppqvj__w4.swift:22:9: error: invalid redeclaration of 'current_note_length_string_index'\n\
    \    var current_note_length_string_index = 0\n        ^\n/tmp/tmppqvj__w4.swift:19:9:\
    \ note: 'current_note_length_string_index' previously declared here\n    var current_note_length_string_index\
    \ = 0\n        ^\n/tmp/tmppqvj__w4.swift:23:9: error: invalid redeclaration of\
    \ 'current_note_length_string_index'\n    var current_note_length_string_index\
    \ = 0\n        ^\n/tmp/tmppqvj__w4.swift:19:9: note: 'current_note_length_string_index'\
    \ previously declared here\n    var current_note_length_string_index = 0\n   \
    \     ^\n/tmp/tmppqvj__w4.swift:24:9: error: invalid redeclaration of 'current_note_length_string_index'\n\
    \    var current_note_length_string_index = 0\n        ^\n/tmp/tmppqvj__w4.swift:19:9:\
    \ note: 'current_note_length_string_index' previously declared here\n    var current_note_length_string_index\
    \ = 0\n        ^\n/tmp/tmppqvj__w4.swift:25:9: error: invalid redeclaration of\
    \ 'current_note_length_string_index'\n    var current_note_length_string_index\
    \ = 0\n        ^\n/tmp/tmppqvj__w4.swift:19:9: note: 'current_note_length_string_index'\
    \ previously declared here\n    var current_note_length_string_index = 0\n   \
    \     ^\n/tmp/tmppqvj__w4.swift:26:9: error: invalid redeclaration of 'current_note_length_string_index'\n\
    \    var current_note_length_string_index = 0\n        ^\n/tmp/tmppqvj__w4.swift:19:9:\
    \ note: 'current_note_length_string_index' previously declared h"
  stdout: ''
  timestamp: 1660013971
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = \"\"\n    for c in music_string\
    \ {\n        if c == \"o\" {\n            beats.append(current_beat)\n       \
    \     current_beat = 0\n            current_note = \"o\"\n        } else if c\
    \ == \"|\" {\n            beats.append(current_beat)\n            current_beat\
    \ = 0\n            current_note = \"|\"\n        } else if c == \".\" {\n    \
    \        beats.append(current_beat)\n            current_beat = 0\n          \
    \  current_note = \".\"\n        } else {\n            current_beat += 1\n   \
    \     }\n    }\n    beats.append(current_beat)\n    return beats\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpvr5ivd_p/tmpvr5ivd_p.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba8fa88c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba8f77fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba8f77f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba8f77e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr5ivd_p                        0x00005634dbb3265e <unavailable> + 5726

    5    libc.so.6                          0x00002aba8fc74460 __libc_start_main +
    245

    6    tmpvr5ivd_p                        0x00005634dbb322a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp3cq2ghe7.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = \"\"\n    for c in music_string\
    \ {\n        switch c {\n        case \"o\":\n            current_note = \"o\"\
    \n            current_beat = 0\n        case \"o|\":\n            current_note\
    \ = \"o|\"\n            current_beat = 0\n        case \"|\":\n            current_note\
    \ = \"|\"\n            current_beat = 0\n        default:\n            if current_note\
    \ != \"\" {\n                beats.append(current_beat)\n                current_beat\
    \ = 0\n                current_note = \"\"\n            }\n            current_note\
    \ = c\n        }\n    }\n    if current_note != \"\" {\n        beats.append(current_beat)\n\
    \    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmph5gl4ped.swift:20:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmph5gl4ped.swift:32:28: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            current_note = c\n                           ^\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_string\
    \ = \"\"\n    var current_note_length_string_index = 0\n    var current_note_length_string_value\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_index = 0\n    var current_note_length_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string = \"\"\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppzpchrsx.swift:26:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_index = 0\n        ^\n\
    /tmp/tmppzpchrsx.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:31:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = 0\n    var last =\
    \ 0\n    var lastNote = 0\n    var lastBeat = 0\n    var lastBeatNote = 0\n  \
    \  var lastBeatNoteBeat = 0\n    var lastBeatNoteBeatBeat = 0\n    var lastBeatNoteBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1xiqqyqk.swift:27:9: error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp1xiqqyqk.swift:26:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp1xiqqyqk.swift:28:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp1xiqqyqk.swift:26:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp1xiqqyqk.swift:30:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp1xiqqyqk.swift:29:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp1xiqqyqk.swift:31:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp1xiqqyqk.swift:29:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp1xiqqyqk.swift:32:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp1xiqqyqk.swift:29:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp1xiqqyqk.swift:33:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp1xiqqyqk.swift:29:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat "
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_index2\
    \ = 0\n    var current_note_length_index3 = 0\n    var current_note_length_index4\
    \ = 0\n    var current_note_length_index5 = 0\n    var current_note_length_index6\
    \ = 0\n    var current_note_length_index7 = 0\n    var current_note_length_index8\
    \ = 0\n    var current_note_length_index9 = 0\n    var current_note_length_index10\
    \ = 0\n    var current_note_length_index11 = 0\n    var current_note_length_index12\
    \ = 0\n    var current_note_length_index13 = 0\n    var current_note_length_index14\
    \ = 0\n    var current_note_length_index15 = 0\n    var current_note_length_index16\
    \ = 0\n    var current_note_length_index17 = 0\n    var current_note_length_index18\
    \ = 0\n    var current_note_length_index19 = 0\n    var current_note_length_index20\
    \ = 0\n    var current_note_length_index21 = 0\n    var current_note_length_index22\
    \ = 0\n    var current_note_length_index23 = 0\n    var current_note_length_index24\
    \ = 0\n    var current_note_length_index25 = 0\n    var current_note_length_index26\
    \ = 0\n    var current_note_length_index27 = 0\n    var current_note_length_index28\
    \ = 0\n    var current_note_length_index29 = 0\n    var current_note_length_index30\
    \ = 0\n    var current_note_length_index31 = 0\n    var current_note_length_index32\
    \ = 0\n    var current_note_length_index33 = 0\n    var current_note_length_index34\
    \ = 0\n    var current_note_length_index35 = 0\n    var current_note_length_index36\
    \ = 0\n    var current_note_length_index37 = 0\n    var current_note_length_index38\
    \ = 0\n    var current_note_length_index39 = 0\n    var current_note_length_index40\
    \ = 0\n    var current_note_length_index41 = 0\n    var current_note_length_index42\
    \ = 0\n    var current_note_length_index43 = 0\n    var current_note_length_index44\
    \ = 0\n    var current_note_length_index45 = 0\n    var current_note_length_index46\
    \ = 0\n    var current_note_length_index47 = 0\n    var current_note_length_index48\
    \ = 0\n    var current_note_length_index49 = 0\n    var current_note_length_index50\
    \ = 0\n    var current_note_length_index51 = 0\n    var current_note_length_index52\
    \ = 0\n    var current_note_length_index53 = 0\n    var current_note_length_index54\
    \ = 0\n    var current_note_length_index55 = 0\n    var current_note_length_index56\
    \ = 0\n    var current_note_length_index57 = 0\n    var current_note_length_index58\
    \ = 0\n    var current_note_length_index59 = 0\n    var current_note_length_index60\
    \ = 0\n    var current_note_length_index61 = 0\n    var current_note_\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpkpfinihc.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_note_\n        ^\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var lastNote = \"\"\n    var lastNoteBeat = 0\n    var lastNoteBeatCount\
    \ = 0\n    var lastNoteBeatCount2 = 0\n    var lastNoteBeatCount3 = 0\n    var\
    \ lastNoteBeatCount4 = 0\n    var lastNoteBeatCount5 = 0\n    var lastNoteBeatCount6\
    \ = 0\n    var lastNoteBeatCount7 = 0\n    var lastNoteBeatCount8 = 0\n    var\
    \ lastNoteBeatCount9 = 0\n    var lastNoteBeatCount10 = 0\n    var lastNoteBeatCount11\
    \ = 0\n    var lastNoteBeatCount12 = 0\n    var lastNoteBeatCount13 = 0\n    var\
    \ lastNoteBeatCount14 = 0\n    var lastNoteBeatCount15 = 0\n    var lastNoteBeatCount16\
    \ = 0\n    var lastNoteBeatCount17 = 0\n    var lastNoteBeatCount18 = 0\n    var\
    \ lastNoteBeatCount19 = 0\n    var lastNoteBeatCount20 = 0\n    var lastNoteBeatCount21\
    \ = 0\n    var lastNoteBeatCount22 = 0\n    var lastNoteBeatCount23 = 0\n    var\
    \ lastNoteBeatCount24 = 0\n    var lastNoteBeatCount25 = 0\n    var lastNoteBeatCount26\
    \ = 0\n    var lastNoteBeatCount27 = 0\n    var lastNoteBeatCount28 = 0\n    var\
    \ lastNoteBeatCount29 = 0\n    var lastNoteBeatCount30 = 0\n    var lastNoteBeatCount31\
    \ = 0\n    var lastNoteBeatCount32 = 0\n    var lastNoteBeatCount33 = 0\n    var\
    \ lastNoteBeatCount34 = 0\n    var lastNoteBeatCount35 = 0\n    var lastNoteBeatCount36\
    \ = 0\n    var lastNoteBeatCount37 = 0\n    var lastNoteBeatCount38 = 0\n    var\
    \ lastNoteBeatCount39 = 0\n    var lastNoteBeatCount40 = 0\n    var lastNoteBeatCount41\
    \ = 0\n    var lastNoteBeatCount42 = 0\n    var lastNoteBeatCount43 = 0\n    var\
    \ lastNoteBeatCount44 = 0\n    var lastNoteBeatCount45 = 0\n    var lastNoteBeatCount46\
    \ = 0\n    var lastNoteBeatCount47 = 0\n    var lastNoteBeatCount48 = 0\n    var\
    \ lastNoteBeatCount49 = 0\n    var lastNoteBeatCount50 = 0\n    var lastNoteBeatCount51\
    \ = 0\n    var lastNoteBeatCount52 = 0\n    var lastNoteBeatCount53\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpc__0eva3.swift:71:9: error: type annotation missing in pattern\n\
    \    var lastNoteBeatCount53\n        ^\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = music_string[0]\n    var current_note_length\
    \ = 0\n    var last_note = music_string[0]\n    var last_note_length = 0\n   \
    \ for c in music_string {\n        if c == '.' {\n            current_note_length\
    \ = 1\n            current_beat = 0\n        } else if c == 'o' {\n          \
    \  current_note_length = 1\n            current_beat = 0\n        } else if c\
    \ == '|' {\n            current_note_length = 2\n            current_beat = 0\n\
    \        } else if c == 'o|' {\n            current_note_length = 2\n        \
    \    current_beat = 1\n        } else if c == '.|' {\n            current_note_length\
    \ = 1\n            current_beat = 1\n        } else {\n            current_note_length\
    \ = 1\n            current_beat = 0\n        }\n        if current_note != last_note\
    \ {\n            beats.append(current_beat)\n        }\n        last_note = c\n\
    \        last_note_length = current_note_length\n        current_note = c\n  \
    \      current_beat = current_beat + current_note_length\n    }\n    beats.append(current_beat)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpcht2zg1k.swift:19:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '.' {\n                ^~~\n                \".\"\n\
    /tmp/tmpcht2zg1k.swift:22:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == 'o' {\n                       ^~~\n                \
    \       \"o\"\n/tmp/tmpcht2zg1k.swift:25:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '|' {\n                       ^~~\n\
    \                       \"|\"\n/tmp/tmpcht2zg1k.swift:28:24: error: single-quoted\
    \ string literal found, use '\"'\n        } else if c == 'o|' {\n            \
    \           ^~~~\n                       \"o|\"\n/tmp/tmpcht2zg1k.swift:31:24:\
    \ error: single-quoted string literal found, use '\"'\n        } else if c ==\
    \ '.|' {\n                       ^~~~\n                       \".|\"\n/tmp/tmpcht2zg1k.swift:14:24:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var current_note = music_string[0]\n      \
    \                 ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpcht2zg1k.swift:16:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var last_note = music_string[0]\n                    ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpcht2zg1k.swift:28:21:\
    \ error: binary operator '==' cannot be applied to operands of type 'Character'\
    \ and 'String'\n        } else if c == 'o|' {\n                  ~ ^  ~~~~\n/tmp/tmpcht2zg1k.swift:28:21:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        } else if c == 'o|' {\n  \
    \                  ^\n/tmp/tmpcht2zg1k.swift:31:21: error: binary operator '=='\
    \ cannot be applied to operands of type 'Character' and 'String'\n        } else\
    \ if c == '.|' "
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = 0\n    var last =\
    \ 0\n    var lastNote = 0\n    var lastBeat = 0\n    var lastBeatNote = 0\n  \
    \  var lastBeatNoteBeat = 0\n    var lastBeatNoteBeatBeat = 0\n    var lastBeatNoteBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeat\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpt8c9v77i.swift:26:9: error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpt8c9v77i.swift:25:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpt8c9v77i.swift:27:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpt8c9v77i.swift:25:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpt8c9v77i.swift:28:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpt8c9v77i.swift:25:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpt8c9v77i.swift:29:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpt8c9v77i.swift:25:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpt8c9v77i.swift:30:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpt8c9v77i.swift:25:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpt8c9v77i.swift:31:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpt8c9v77i.swift:25:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpt8c9v77i.swift:32:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastBeatNoteBeatBeatBeatBeatBeatBeat ="
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var notes_length_index\
    \ = 0\n    var notes_length_index2 = 0\n    var notes_length_index3 = 0\n    var\
    \ notes_length_index4 = 0\n    var notes_length_index5 = 0\n    var notes_length_index6\
    \ = 0\n    var notes_length_index7 = 0\n    var notes_length_index8 = 0\n    var\
    \ notes_length_index9 = 0\n    var notes_length_index10 = 0\n    var notes_length_index11\
    \ = 0\n    var notes_length_index12 = 0\n    var notes_length_index13 = 0\n  \
    \  var notes_length_index14 = 0\n    var notes_length_index15 = 0\n    var notes_length_index16\
    \ = 0\n    var notes_length_index17 = 0\n    var notes_length_index18 = 0\n  \
    \  var notes_length_index19 = 0\n    var notes_length_index20 = 0\n    var notes_length_index21\
    \ = 0\n    var notes_length_index22 = 0\n    var notes_length_index23 = 0\n  \
    \  var notes_length_index24 = 0\n    var notes_length_index25 = 0\n    var notes_length_index26\
    \ = 0\n    var notes_length_index27 = 0\n    var notes_length_index28 = 0\n  \
    \  var notes_length_index29 = 0\n    var notes_length_index30 = 0\n    var notes_length_index31\
    \ = 0\n    var notes_length_index32 = 0\n    var notes_length_index33 = 0\n  \
    \  var notes_length_index34 = 0\n    var notes_length_index35 = 0\n    var notes_length_index36\
    \ = 0\n    var notes_length_index37 = 0\n    var notes_length_index38 = 0\n  \
    \  var notes_length_index39 = 0\n    var notes_length_index40 = 0\n    var notes_length_index41\
    \ = 0\n    var notes_length_index42 = 0\n    var notes_length_index43 = 0\n  \
    \  var notes_length_index44 = 0\n    var notes_length_index45 = 0\n    var notes_length_index46\
    \ = 0\n    var notes_length_index47 = 0\n    var notes_length_index48 = 0\n  \
    \  var notes_length_index49 = 0\n    var notes_length_index50 = 0\n    var notes_length_index51\
    \ = 0\n    var notes_length_index52 = 0\n    var notes_length_index53 = 0\n  \
    \  var notes_length_index54 = 0\n    var notes_length_index55 = 0\n    var notes_length_index56\
    \ = 0\n    var notes_length_index57 = 0\n    var notes_length_index58 = 0\n  \
    \  var notes_length_index59 = 0\n    var notes_length_index60 = 0\n    var notes_length_index61\
    \ = 0\n    var notes_length_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpumzer969.swift:76:9: error: type annotation missing in pattern\n\
    \    var notes_length_index\n        ^\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var i = 0\n    for c in music_string {\n        if c == '.' {\n   \
    \         notes.append(note)\n            note = \"\"\n            beat = 0\n\
    \            last = 0\n            continue\n        }\n        if c == 'o' {\n\
    \            if last == 1 {\n                beats.append(beat)\n            \
    \    beat = 0\n                last = 0\n            }\n            note += \"\
    o\"\n            last = 1\n            continue\n        }\n        if c == '|'\
    \ {\n            if last == 1 {\n                beats.append(beat)\n        \
    \        beat = 0\n                last = 0\n            }\n            note +=\
    \ \"|\"\n            last = 1\n            continue\n        }\n        note +=\
    \ String(c)\n        last = 0\n    }\n    notes.append(note)\n    for note in\
    \ notes {\n        beats.append(notes.count())\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp9dyvrpf0.swift:19:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '.' {\n                ^~~\n                \".\"\n\
    /tmp/tmp9dyvrpf0.swift:26:17: error: single-quoted string literal found, use '\"\
    '\n        if c == 'o' {\n                ^~~\n                \"o\"\n/tmp/tmp9dyvrpf0.swift:36:17:\
    \ error: single-quoted string literal found, use '\"'\n        if c == '|' {\n\
    \                ^~~\n                \"|\"\n/tmp/tmp9dyvrpf0.swift:51:28: error:\
    \ cannot call value of non-function type 'Int'\n        beats.append(notes.count())\n\
    \                           ^    ~~\n                                \n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var notes: [String] = []\n    var beats_counter: Int = 0\n    var note_counter:\
    \ Int = 0\n    var last_note = String()\n    var last_beat = String()\n    var\
    \ last_beat_index: Int = 0\n    var last_note_index: Int = 0\n    var last_note_index2:\
    \ Int = 0\n    var last_note_index3: Int = 0\n    var last_note_index4: Int =\
    \ 0\n    var last_note_index5: Int = 0\n    var last_note_index6: Int = 0\n  \
    \  var last_note_index7: Int = 0\n    var last_note_index8: Int = 0\n    var last_note_index9:\
    \ Int = 0\n    var last_note_index10: Int = 0\n    var last_note_index11: Int\
    \ = 0\n    var last_note_index12: Int = 0\n    var last_note_index13: Int = 0\n\
    \    var last_note_index14: Int = 0\n    var last_note_index15: Int = 0\n    var\
    \ last_note_index16: Int = 0\n    var last_note_index17: Int = 0\n    var last_note_index18:\
    \ Int = 0\n    var last_note_index19: Int = 0\n    var last_note_index20: Int\
    \ = 0\n    var last_note_index21: Int = 0\n    var last_note_index22: Int = 0\n\
    \    var last_note_index23: Int = 0\n    var last_note_index24: Int = 0\n    var\
    \ last_note_index25: Int = 0\n    var last_note_index26: Int = 0\n    var last_note_index27:\
    \ Int = 0\n    var last_note_index28: Int = 0\n    var last_note_index29: Int\
    \ = 0\n    var last_note_index30: Int = 0\n    var last_note_index31: Int = 0\n\
    \    var last_note_index32: Int = 0\n    var last_note_index33: Int = 0\n    var\
    \ last_note_index34: Int = 0\n    var last_note_index35: Int = 0\n    var last_note_index36:\
    \ Int = 0\n    var last_note_index37: Int = 0\n    var last_note_index38: Int\
    \ = 0\n    var last_note_index39: Int = 0\n    var last_note_index40: Int = 0\n\
    \    var last_note_index41: Int = 0\n    var last_note_index42: Int = 0\n    var\
    \ last_note_index43: Int = 0\n    var last_note_index44: Int = 0\n    var last_note_index45:\
    \ Int = 0\n    var last_note_index46: Int = 0\n    var last_note_index47: Int\
    \ = 0\n    var last_note_index48: Int = 0\n    var last_note_index49: Int = 0\n\
    \    var last_note_index50: Int = 0\n    var last_note_index51: Int = 0\n    var\
    \ last_note_index52: Int = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpur754na7.swift:12:9: warning: variable 'beats' was never used;\
    \ consider replacing with '_' or removing it\n    var beats: [Int] = []\n    \
    \    ^~~~~\n        _\n/tmp/tmpur754na7.swift:13:9: warning: variable 'notes'\
    \ was never used; consider replacing with '_' or removing it\n    var notes: [String]\
    \ = []\n        ^~~~~\n        _\n/tmp/tmpur754na7.swift:14:9: warning: variable\
    \ 'beats_counter' was never used; consider replacing with '_' or removing it\n\
    \    var beats_counter: Int = 0\n        ^~~~~~~~~~~~~\n        _\n/tmp/tmpur754na7.swift:15:9:\
    \ warning: variable 'note_counter' was never used; consider replacing with '_'\
    \ or removing it\n    var note_counter: Int = 0\n        ^~~~~~~~~~~~\n      \
    \  _\n/tmp/tmpur754na7.swift:16:9: warning: initialization of variable 'last_note'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_note = String()\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpur754na7.swift:17:9:\
    \ warning: initialization of variable 'last_beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var last_beat = String()\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpur754na7.swift:18:9: warning: variable 'last_beat_index' was never\
    \ used; consider replacing with '_' or removing it\n    var last_beat_index: Int\
    \ = 0\n        ^~~~~~~~~~~~~~~\n        _\n/tmp/tmpur754na7.swift:19:9: warning:\
    \ variable 'last_note_index' was never used; consider replacing with '_' or removing\
    \ it\n    var last_note_index: Int = 0\n        ^~~~~~~~~~~~~~~\n        _\n/tmp/tmpur754na7.swift:20:9:\
    \ warning: variable 'last_note_index2' was never used; consider replacing with\
    \ '_' or removing it\n    var last_note_index2: Int = 0\n        ^~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpur754na7.swift:21:9: warning: variable 'last_note_index3'\
    \ was never used; consider replacing with '_' or removing it\n    var last_note_index3:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~\n        _\n/tmp/tmpur754na7.swift:22:9: warning:\
    \ variable 'last_note_index4' was never used; consider replacing with '_' or removing\
    \ it\n    var last_note_index4: Int = 0\n        ^~~~~~~"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = String()\n    var current_note_index\
    \ = 0\n    var current_note_length = 4\n    var last_note = String()\n    var\
    \ last_note_index = 0\n    var last_note_length = 4\n\n    for c in music_string\
    \ {\n        if c == 'o' {\n            if current_note != last_note {\n     \
    \           beats.append(current_beat)\n                current_beat = 0\n   \
    \             current_note = String()\n                current_note_index = 0\n\
    \                current_note_length = 4\n            }\n            current_note\
    \ += String(c)\n            current_note_index += 1\n            current_note_length\
    \ += 1\n        } else if c == '|' {\n            if current_note != last_note\
    \ {\n                beats.append(current_beat)\n                current_beat\
    \ = 0\n                current_note = String()\n                current_note_index\
    \ = 0\n                current_note_length = 4\n            }\n            current_note\
    \ += String(c)\n            current_note_index += 1\n            current_note_length\
    \ += 1\n        } else if c == '.' {\n            if current_note != last_note\
    \ {\n                beats.append(current_beat)\n                current_beat\
    \ = 0\n                current_note = String()\n                current_note_index\
    \ = 0\n                current_note_length = 4\n            }\n            current_note\
    \ += String(c)\n            current_note_index += 1\n            current_note_length\
    \ += 1\n        } else {\n            if current_note != last_note {\n       \
    \         beats.append(current_beat)\n                current_beat = 0\n     \
    \           current_note = String()\n                current_note_index = 0\n\
    \                current_note_length = 4\n            }\n            current_note\
    \ += String(c)\n            current_note_index += 1\n            current_note_length\
    \ += 1\n        }\n        last_note = current_note\n        last_note_index =\
    \ current_note_index\n        last_note_length = current_note_length\n    }\n\
    \    beats.append(current_beat)\n    return beats\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpjw4zn4dl.swift:22:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpjw4zn4dl.swift:33:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmpjw4zn4dl.swift:44:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.' {\n                       ^~~\n\
    \                       \".\"\n/tmp/tmpjw4zn4dl.swift:18:9: warning: variable\
    \ 'last_note_index' was written to, but never read\n    var last_note_index =\
    \ 0\n        ^\n/tmp/tmpjw4zn4dl.swift:19:9: warning: variable 'last_note_length'\
    \ was written to, but never read\n    var last_note_length = 4\n        ^\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    for c in\
    \ music_string {\n        if c == \"o\" {\n            notes.append(note)\n  \
    \          note = \"\"\n            beat = 0\n        } else if c == \"|\" {\n\
    \            notes.append(note)\n            note = \"\"\n            beat = 0\n\
    \        } else {\n            note += String(c)\n            beat++\n       \
    \ }\n    }\n    notes.append(note)\n    for note in notes {\n        beats.append(beats.count)\n\
    \    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpx0pang_8.swift:27:17: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            beat++\n                ^~\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var note_index = 0\n    var note_length = 0\n\
    \    var note_length_index = 0\n    var note_length_index2 = 0\n    var note_length_index3\
    \ = 0\n    var note_length_index4 = 0\n    var note_length_index5 = 0\n    var\
    \ note_length_index6 = 0\n    var note_length_index7 = 0\n    var note_length_index8\
    \ = 0\n    var note_length_index9 = 0\n    var note_length_index10 = 0\n    var\
    \ note_length_index11 = 0\n    var note_length_index12 = 0\n    var note_length_index13\
    \ = 0\n    var note_length_index14 = 0\n    var note_length_index15 = 0\n    var\
    \ note_length_index16 = 0\n    var note_length_index17 = 0\n    var note_length_index18\
    \ = 0\n    var note_length_index19 = 0\n    var note_length_index20 = 0\n    var\
    \ note_length_index21 = 0\n    var note_length_index22 = 0\n    var note_length_index23\
    \ = 0\n    var note_length_index24 = 0\n    var note_length_index25 = 0\n    var\
    \ note_length_index26 = 0\n    var note_length_index27 = 0\n    var note_length_index28\
    \ = 0\n    var note_length_index29 = 0\n    var note_length_index30 = 0\n    var\
    \ note_length_index31 = 0\n    var note_length_index32 = 0\n    var note_length_index33\
    \ = 0\n    var note_length_index34 = 0\n    var note_length_index35 = 0\n    var\
    \ note_length_index36 = 0\n    var note_length_index37 = 0\n    var note_length_index38\
    \ = 0\n    var note_length_index39 = 0\n    var note_length_index40 = 0\n    var\
    \ note_length_index41 = 0\n    var note_length_index42 = 0\n    var note_length_index43\
    \ = 0\n    var note_length_index44 = 0\n    var note_length_index45 = 0\n    var\
    \ note_length_index46 = 0\n    var note_length_index47 = 0\n    var note_length_index48\
    \ = 0\n    var note_length_index49 = 0\n    var note_length_index50 = 0\n    var\
    \ note_length_index51 = 0\n    var note_length_index52 = 0\n    var note_length_index53\
    \ = 0\n    var note_length_index54 = 0\n    var note_length_index55 = 0\n    var\
    \ note_length_index56 = 0\n    var note_length_index57 = 0\n    var note_length_index58\
    \ = 0\n    var note_length_index59 = 0\n    var note_length_index60 = 0\n    var\
    \ note_length_index61 = 0\n    var note_length_index62 = 0\n    var note_length_index63\
    \ = 0\n    var note_length_index64 = 0\n    var note_length_index65 = 0\n    var\
    \ note_length_index66 = 0\n    var note_length_index67 = 0\n    var note_length_index68\
    \ = 0\n    var note_length_index69 = 0\n    var note_length_index70 = 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpxc7o08o_.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpxc7o08o_.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmpxc7o08o_.swift:14:9:\
    \ warning: initialization of variable 'note_index' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_index = 0\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmpxc7o08o_.swift:15:9: warning: initialization of variable 'note_length'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_length = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpxc7o08o_.swift:16:9:\
    \ warning: initialization of variable 'note_length_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var note_length_index =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpxc7o08o_.swift:17:9: warning: initialization\
    \ of variable 'note_length_index2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_length_index2 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpxc7o08o_.swift:18:9: warning: initialization of variable 'note_length_index3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_length_index3 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpxc7o08o_.swift:19:9:\
    \ warning: initialization of variable 'note_length_index4' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var note_length_index4\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpxc7o08o_.swift:20:9: warning:\
    \ initialization of variable 'note_length_index5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_length_index5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpxc7o08o_.swift:21:9: warning: initialization of variable 'note_length_index6'\
    \ was never used; consider replacing with assignment to '_' or remov"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_index = 0\n    var notes_length = 0\n\
    \    var notes_length_index = 0\n    var notes_length_index2 = 0\n    var notes_length_index3\
    \ = 0\n    var notes_length_index4 = 0\n    var notes_length_index5 = 0\n    var\
    \ notes_length_index6 = 0\n    var notes_length_index7 = 0\n    var notes_length_index8\
    \ = 0\n    var notes_length_index9 = 0\n    var notes_length_index10 = 0\n   \
    \ var notes_length_index11 = 0\n    var notes_length_index12 = 0\n    var notes_length_index13\
    \ = 0\n    var notes_length_index14 = 0\n    var notes_length_index15 = 0\n  \
    \  var notes_length_index16 = 0\n    var notes_length_index17 = 0\n    var notes_length_index18\
    \ = 0\n    var notes_length_index19 = 0\n    var notes_length_index20 = 0\n  \
    \  var notes_length_index21 = 0\n    var notes_length_index22 = 0\n    var notes_length_index23\
    \ = 0\n    var notes_length_index24 = 0\n    var notes_length_index25 = 0\n  \
    \  var notes_length_index26 = 0\n    var notes_length_index27 = 0\n    var notes_length_index28\
    \ = 0\n    var notes_length_index29 = 0\n    var notes_length_index30 = 0\n  \
    \  var notes_length_index31 = 0\n    var notes_length_index32 = 0\n    var notes_length_index33\
    \ = 0\n    var notes_length_index34 = 0\n    var notes_length_index35 = 0\n  \
    \  var notes_length_index36 = 0\n    var notes_length_index37 = 0\n    var notes_length_index38\
    \ = 0\n    var notes_length_index39 = 0\n    var notes_length_index40 = 0\n  \
    \  var notes_length_index41 = 0\n    var notes_length_index42 = 0\n    var notes_length_index43\
    \ = 0\n    var notes_length_index44 = 0\n    var notes_length_index45 = 0\n  \
    \  var notes_length_index46 = 0\n    var notes_length_index47 = 0\n    var notes_length_index48\
    \ = 0\n    var notes_length_index49 = 0\n    var notes_length_index50 = 0\n  \
    \  var notes_length_index51 = 0\n    var notes_length_index52 = 0\n    var notes_length_index53\
    \ = 0\n    var notes_length_index54 = 0\n    var notes_length_index55 = 0\n  \
    \  var notes_length_index56 = 0\n    var notes_length_index57 = 0\n    var notes_length_index58\
    \ = 0\n    var notes_length_index59 = 0\n    var notes_length_index60 = 0\n  \
    \  var notes_length_index61 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp33351j3t.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp33351j3t.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp33351j3t.swift:14:9:\
    \ warning: initialization of variable 'notes_index' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var notes_index = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp33351j3t.swift:15:9: warning: initialization of variable 'notes_length'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp33351j3t.swift:16:9:\
    \ warning: initialization of variable 'notes_length_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp33351j3t.swift:17:9: warning:\
    \ initialization of variable 'notes_length_index2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var notes_length_index2 = 0\n   \
    \ ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp33351j3t.swift:18:9: warning: initialization\
    \ of variable 'notes_length_index3' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_length_index3 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp33351j3t.swift:19:9: warning: initialization of variable 'notes_length_index4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp33351j3t.swift:20:9:\
    \ warning: initialization of variable 'notes_length_index5' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length_index5\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp33351j3t.swift:21:9: warning:\
    \ initialization of variable 'notes_length_index6' was never used; consider replacing\
    \ with assi"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array: [Int]\
    \ = []\n    var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_string\
    \ = \"\"\n    var current_note_length_string_index = 0\n    var current_note_length_string_value\
    \ = 0\n    var current_note_length_string_length = 0\n    var current_note_length_string_length_index\
    \ = 0\n    var current_note_length_string_length_value = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpq0afwq12.swift:24:9: error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmpq0afwq12.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared here\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmpq0afwq12.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmpq0afwq12.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared here\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmpq0afwq12.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmpq0afwq12.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared here\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmpq0afwq12.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmpq0afwq12.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared here\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmpq0afwq12.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmpq0afwq12.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared here\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmpq0afwq12.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmpq0afwq12.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared her"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_value\
    \ = 0\n    var current_note_length_value_index = 0\n    var current_note_length_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1902vg0i.swift:66:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp1902vg0i.swift:24:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp1902vg0i.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp1902vg0i.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp1902vg0i.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp1902vg0i.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp1902vg0i.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beats_count = 0\n    var notes_count = 0\n\
    \    var note_index = 0\n    var note_char = \"\"\n    var note_char_index = 0\n\
    \    var note_char_length = 0\n    var note_char_length_index = 0\n    var note_char_length_value\
    \ = 0\n    var note_char_length_value_index = 0\n    var note_char_length_value_value\
    \ = 0\n    var note_char_length_value_value_index = 0\n    var note_char_length_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpy9wgd2lr.swift:28:9: error: invalid redeclaration of 'note_char_length_value_value_value_index'\n\
    \    var note_char_length_value_value_value_index = 0\n        ^\n/tmp/tmpy9wgd2lr.swift:26:9:\
    \ note: 'note_char_length_value_value_value_index' previously declared here\n\
    \    var note_char_length_value_value_value_index = 0\n        ^\n/tmp/tmpy9wgd2lr.swift:29:9:\
    \ error: invalid redeclaration of 'note_char_length_value_value_value_value'\n\
    \    var note_char_length_value_value_value_value = 0\n        ^\n/tmp/tmpy9wgd2lr.swift:27:9:\
    \ note: 'note_char_length_value_value_value_value' previously declared here\n\
    \    var note_char_length_value_value_value_value = 0\n        ^\n/tmp/tmpy9wgd2lr.swift:30:9:\
    \ error: invalid redeclaration of 'note_char_length_value_value_value_index'\n\
    \    var note_char_length_value_value_value_index = 0\n        ^\n/tmp/tmpy9wgd2lr.swift:26:9:\
    \ note: 'note_char_length_value_value_value_index' previously declared here\n\
    \    var note_char_length_value_value_value_index = 0\n        ^\n/tmp/tmpy9wgd2lr.swift:31:9:\
    \ error: invalid redeclaration of 'note_char_length_value_value_value_value'\n\
    \    var note_char_length_value_value_value_value = 0\n        ^\n/tmp/tmpy9wgd2lr.swift:27:9:\
    \ note: 'note_char_length_value_value_value_value' previously declared here\n\
    \    var note_char_length_value_value_value_value = 0\n        ^\n/tmp/tmpy9wgd2lr.swift:32:9:\
    \ error: invalid redeclaration of 'note_char_length_value_value_value_index'\n\
    \    var note_char_length_value_value_value_index = 0\n        ^\n/tmp/tmpy9wgd2lr.swift:26:9:\
    \ note: 'note_char_length_value_value_value_index' previously declared here\n\
    \    var note_char_length_value_value_value_index = 0\n        ^\n/tmp/tmpy9wgd2lr.swift:33:9:\
    \ error: invalid redeclaration of 'note_char_length_value_value_value_value'\n\
    \    var note_char_length_value_value_value_value = 0\n        ^\n/tmp/tmpy9wgd2lr.swift:27:9:\
    \ note: 'note_char_length_value_value_value_value' previously declared here\n\
    \    var note_char_length_value_value_value_value = 0\n        ^\n/tmp/tmpy9wgd2lr.swift:34:9:\
    \ error: invalid redecl"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_value\
    \ = 0\n    var current_note_length_value_index = 0\n    var current_note_length_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1902vg0i.swift:66:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp1902vg0i.swift:24:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp1902vg0i.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp1902vg0i.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp1902vg0i.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp1902vg0i.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp1902vg0i.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    for c in music_string {\n        if c == '.' {\n            beats.append(beat)\n\
    \            notes.append(note)\n            beat = 0\n            note = \"\"\
    \n            last = 0\n        } else if c == 'o' {\n            beats.append(beat)\n\
    \            notes.append(note)\n            beat = 0\n            note = \"\"\
    \n            last = 0\n        } else if c == '|' {\n            beats.append(beat)\n\
    \            notes.append(note)\n            beat = 0\n            note = \"\"\
    \n            last = 1\n        } else {\n            beat += last\n         \
    \   note += c\n        }\n    }\n    beats.append(beat)\n    notes.append(note)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp9lcejk24.swift:18:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '.' {\n                ^~~\n                \".\"\n\
    /tmp/tmp9lcejk24.swift:24:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == 'o' {\n                       ^~~\n                \
    \       \"o\"\n/tmp/tmp9lcejk24.swift:30:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '|' {\n                       ^~~\n\
    \                       \"|\"\n/tmp/tmp9lcejk24.swift:38:21: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            note\
    \ += c\n                    ^\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_string\
    \ = \"\"\n    var current_note_length_string_index = 0\n    var current_note_length_string_value\
    \ = 0\n    var current_note_length_string_length = 0\n    var current_note_length_string_length_index\
    \ = 0\n    var current_note_length_string_length_value = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp11z1vys9.swift:24:9: error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp11z1vys9.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared here\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp11z1vys9.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp11z1vys9.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared here\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp11z1vys9.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp11z1vys9.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared here\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp11z1vys9.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp11z1vys9.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared here\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp11z1vys9.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp11z1vys9.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared here\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp11z1vys9.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp11z1vys9.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared her"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = 0\n    var note_count\
    \ = 0\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n    var note_length = -1\n    var note_length\
    \ = -1\n    var note_length = -1\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp6n3orkcs.swift:18:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = -1\n        ^\n/tmp/tmp6n3orkcs.swift:17:9: note: 'note_length'\
    \ previously declared here\n    var note_length = -1\n        ^\n/tmp/tmp6n3orkcs.swift:19:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = -1\n  \
    \      ^\n/tmp/tmp6n3orkcs.swift:17:9: note: 'note_length' previously declared\
    \ here\n    var note_length = -1\n        ^\n/tmp/tmp6n3orkcs.swift:20:9: error:\
    \ invalid redeclaration of 'note_length'\n    var note_length = -1\n        ^\n\
    /tmp/tmp6n3orkcs.swift:17:9: note: 'note_length' previously declared here\n  \
    \  var note_length = -1\n        ^\n/tmp/tmp6n3orkcs.swift:21:9: error: invalid\
    \ redeclaration of 'note_length'\n    var note_length = -1\n        ^\n/tmp/tmp6n3orkcs.swift:17:9:\
    \ note: 'note_length' previously declared here\n    var note_length = -1\n   \
    \     ^\n/tmp/tmp6n3orkcs.swift:22:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = -1\n        ^\n/tmp/tmp6n3orkcs.swift:17:9: note: 'note_length'\
    \ previously declared here\n    var note_length = -1\n        ^\n/tmp/tmp6n3orkcs.swift:23:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = -1\n  \
    \      ^\n/tmp/tmp6n3orkcs.swift:17:9: note: 'note_length' previously declared\
    \ here\n    var note_length = -1\n        ^\n/tmp/tmp6n3orkcs.swift:24:9: error:\
    \ invalid redeclaration of 'note_length'\n    var note_length = -1\n        ^\n\
    /tmp/tmp6n3orkcs.swift:17:9: note: 'note_length' previously declared here\n  \
    \  var note_length = -1\n        ^\n/tmp/tmp6n3orkcs.swift:25:9: error: invalid\
    \ redeclaration of 'note_length'\n    var note_length = -1\n        ^\n/tmp/tmp6n3orkcs.swift:17:9:\
    \ note: 'note_length' previously declared here\n    var note_length = -1\n   \
    \     ^\n/tmp/tmp6n3orkcs.swift:26:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = -1\n        ^\n/tmp/tmp6n3orkcs.swift:17:9: note: 'note_length'\
    \ previously declared here\n    var note_length = -1\n        ^\n/tmp/tmp6n3orkcs.swift:27:9:\
    \ error: invalid redeclaration of 'note_length'\n  "
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_index\
    \ = 0\n    var current_note_length = 0\n    var current_note_length_index = 0\n\
    \    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpi94g9ie7.swift:25:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpi94g9ie7.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpi94g9ie7.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpi94g9ie7.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpi94g9ie7.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpi94g9ie7.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpi94g9ie7.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpi94g9ie7.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpi94g9ie7.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpi94g9ie7.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpi94g9ie7.swift:30:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpi94g9ie7.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_valu"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmprhaznj1h.swift:14:24: error: 'nil' requires a contextual type\n\
    \    var current_note = nil\n                       ^\n/tmp/tmprhaznj1h.swift:15:31:\
    \ error: 'nil' requires a contextual type\n    var current_note_length = nil\n\
    \                              ^\n/tmp/tmprhaznj1h.swift:16:31: error: 'nil' requires\
    \ a contextual type\n    var current_note_length = nil\n                     \
    \         ^\n/tmp/tmprhaznj1h.swift:17:31: error: 'nil' requires a contextual\
    \ type\n    var current_note_length = nil\n                              ^\n/tmp/tmprhaznj1h.swift:18:31:\
    \ error: 'nil' requires a contextual type\n    var current_note_length = nil\n\
    \                              ^\n/tmp/tmprhaznj1h.swift:19:31: error: 'nil' requires\
    \ a contextual type\n    var current_note_length = nil\n                     \
    \         ^\n/tmp/tmprhaznj1h.swift:20:31: error: 'nil' requires a contextual\
    \ type\n    var current_note_length = nil\n                              ^\n/tmp/tmprhaznj1h.swift:21:31:\
    \ error: 'nil' requires a contextual type\n    var current_note_length = nil\n\
    \                              ^\n/tmp/tmprhaznj1h.swift:22:31: error: 'nil' requires\
    \ a contextual type\n    var current_note_length = nil\n                     \
    \         ^\n/tmp/tmprhaznj1h.swift:23:31: error: 'nil' requires a contextual\
    \ type\n    var current_note_length = nil\n                              ^\n/tmp/tmprhaznj1h.swift:24:31:\
    \ error: 'nil' requires a contextual type\n    var current_note_length = nil\n\
    \                              ^\n/tmp/tmprhaznj1h.swift:25:31: error: 'nil' requires\
    \ a contextual type\n    var current_note_length = nil\n                     \
    \         ^\n/tmp/tmprhaznj1h.swift:26:31: error: 'nil' requires a contextual\
    \ type\n    var current_note_length = nil\n                              ^\n/tmp/tmprhaznj1h.swift:27:31:\
    \ error: 'nil' requires a contextual type\n    var current_note_length = nil\n\
    \                              ^\n/tmp/tmprhaznj1h.swift:28:31: error: 'nil' requires\
    \ a contextual type\n    var current_note_length = nil\n                     \
    \         ^\n/tmp/tmprhaznj1h.swift"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var last = 0\n    var last_beat = 0\n\
    \    var last_note = 0\n    var last_last_beat = 0\n    var last_last_note = 0\n\
    \    var last_last_last_beat = 0\n    var last_last_last_note = 0\n    var last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_note = 0\n    var last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_note = 0\n    var last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_last_beat = 0\n  \
    \  var last_last_last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_last_note = 0\n  \
    \  var last_last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_last_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpt3b3_o2w.swift:26:9: error: invalid redeclaration of 'last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpt3b3_o2w.swift:24:9:\
    \ note: 'last_last_last_last_last_beat' previously declared here\n    var last_last_last_last_last_beat\
    \ = 0\n        ^\n/tmp/tmpt3b3_o2w.swift:27:9: error: invalid redeclaration of\
    \ 'last_last_last_last_last_note'\n    var last_last_last_last_last_note = 0\n\
    \        ^\n/tmp/tmpt3b3_o2w.swift:25:9: note: 'last_last_last_last_last_note'\
    \ previously declared here\n    var last_last_last_last_last_note = 0\n      \
    \  ^\n/tmp/tmpt3b3_o2w.swift:30:9: error: invalid redeclaration of 'last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpt3b3_o2w.swift:28:9:\
    \ note: 'last_last_last_last_last_last_beat' previously declared here\n    var\
    \ last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpt3b3_o2w.swift:31:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_note'\n    var\
    \ last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpt3b3_o2w.swift:29:9:\
    \ note: 'last_last_last_last_last_last_note' previously declared here\n    var\
    \ last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpt3b3_o2w.swift:34:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpt3b3_o2w.swift:32:9:\
    \ note: 'last_last_last_last_last_last_last_beat' previously declared here\n \
    \   var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpt3b3_o2w.swift:35:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_note'\n\
    \    var last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpt3b3_o2w.swift:33:9:\
    \ note: 'last_last_last_last_last_last_last_note' previously declared here\n \
    \   var last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpt3b3_o2w.swift:36:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpt3b3_o2w.swift:32:9: "
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var note_index\
    \ = 0\n    var note_length = 0\n    var note_count = 0\n    var last_note = \"\
    \"\n    var last_note_index = 0\n    var last_note_length = 0\n    var last_note_count\
    \ = 0\n    var last_beat = 0\n    var last_note = \"\"\n    var last_note_index\
    \ = 0\n    var last_note_length = 0\n    var last_note_count = 0\n    var last_beat\
    \ = 0\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_length\
    \ = 0\n    var last_note_count = 0\n    var last_beat = 0\n    var last_note =\
    \ \"\"\n    var last_note_index = 0\n    var last_note_length = 0\n    var last_note_count\
    \ = 0\n    var last_beat = 0\n    var last_note = \"\"\n    var last_note_index\
    \ = 0\n    var last_note_length = 0\n    var last_note_count = 0\n    var last_beat\
    \ = 0\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_length\
    \ = 0\n    var last_note_count = 0\n    var last_beat = 0\n    var last_note =\
    \ \"\"\n    var last_note_index = 0\n    var last_note_length = 0\n    var last_note_count\
    \ = 0\n    var last_beat = 0\n    var last_note = \"\"\n    var last_note_index\
    \ = 0\n    var last_note_length = 0\n    var last_note_count = 0\n    var last_beat\
    \ = 0\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_length\
    \ = 0\n    var last_note_count = 0\n    var last_beat = 0\n    var last_note =\
    \ \"\"\n    var last_note_index = 0\n    var last_note_length = 0\n    var last_note_count\
    \ = 0\n    var last_beat = 0\n    var last_note = \"\"\n    var last_note_index\
    \ = 0\n    var last_note_length = 0\n    var last_note_count = 0\n    var last_beat\
    \ = 0\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_length\
    \ = 0\n    var last_note_count = 0\n    var last_beat = 0\n    var last_note =\
    \ \"\"\n    var last_note_index = 0\n    var last_note_length = 0\n    var last_note_count\
    \ = 0\n    var last_beat = 0\n    var last_note = \"\"\n    var last_note_index\
    \ = 0\n    var last_note_length = 0\n    var last_note_count = 0\n    var last_beat\
    \ = 0\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_length\
    \ = 0\n    var last_note_count = 0\n    var last_beat = 0\n    var last_note =\
    \ \"\"\n    var last_note_index = 0\n    var last_note_length = 0\n    var last_note_count\
    \ = 0\n    var last_beat = 0\n    var last_note = \"\"\n    var last_note_index\
    \ = 0\n    var last_note_length = 0\n    var last_note_count = 0\n    var last_beat\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp6erydao1.swift:24:9: error: invalid redeclaration of 'last_note'\n\
    \    var last_note = \"\"\n        ^\n/tmp/tmp6erydao1.swift:19:9: note: 'last_note'\
    \ previously declared here\n    var last_note = \"\"\n        ^\n/tmp/tmp6erydao1.swift:25:9:\
    \ error: invalid redeclaration of 'last_note_index'\n    var last_note_index =\
    \ 0\n        ^\n/tmp/tmp6erydao1.swift:20:9: note: 'last_note_index' previously\
    \ declared here\n    var last_note_index = 0\n        ^\n/tmp/tmp6erydao1.swift:26:9:\
    \ error: invalid redeclaration of 'last_note_length'\n    var last_note_length\
    \ = 0\n        ^\n/tmp/tmp6erydao1.swift:21:9: note: 'last_note_length' previously\
    \ declared here\n    var last_note_length = 0\n        ^\n/tmp/tmp6erydao1.swift:27:9:\
    \ error: invalid redeclaration of 'last_note_count'\n    var last_note_count =\
    \ 0\n        ^\n/tmp/tmp6erydao1.swift:22:9: note: 'last_note_count' previously\
    \ declared here\n    var last_note_count = 0\n        ^\n/tmp/tmp6erydao1.swift:28:9:\
    \ error: invalid redeclaration of 'last_beat'\n    var last_beat = 0\n       \
    \ ^\n/tmp/tmp6erydao1.swift:23:9: note: 'last_beat' previously declared here\n\
    \    var last_beat = 0\n        ^\n/tmp/tmp6erydao1.swift:29:9: error: invalid\
    \ redeclaration of 'last_note'\n    var last_note = \"\"\n        ^\n/tmp/tmp6erydao1.swift:19:9:\
    \ note: 'last_note' previously declared here\n    var last_note = \"\"\n     \
    \   ^\n/tmp/tmp6erydao1.swift:30:9: error: invalid redeclaration of 'last_note_index'\n\
    \    var last_note_index = 0\n        ^\n/tmp/tmp6erydao1.swift:20:9: note: 'last_note_index'\
    \ previously declared here\n    var last_note_index = 0\n        ^\n/tmp/tmp6erydao1.swift:31:9:\
    \ error: invalid redeclaration of 'last_note_length'\n    var last_note_length\
    \ = 0\n        ^\n/tmp/tmp6erydao1.swift:21:9: note: 'last_note_length' previously\
    \ declared here\n    var last_note_length = 0\n        ^\n/tmp/tmp6erydao1.swift:32:9:\
    \ error: invalid redeclaration of 'last_note_count'\n    var last_note_count =\
    \ 0\n        ^\n/tmp/tmp6erydao1.swift:22:9: note: 'last_note_count' previously\
    \ declared here\n    var last_note_count = 0\n        ^\n/tmp/tmp6er"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var last = 0\n    var lastNote = 0\n \
    \   var lastNoteBeat = 0\n    var lastNoteBeatCount = 0\n    var lastNoteBeatCount2\
    \ = 0\n    var lastNoteBeatCount3 = 0\n    var lastNoteBeatCount4 = 0\n    var\
    \ lastNoteBeatCount5 = 0\n    var lastNoteBeatCount6 = 0\n    var lastNoteBeatCount7\
    \ = 0\n    var lastNoteBeatCount8 = 0\n    var lastNoteBeatCount9 = 0\n    var\
    \ lastNoteBeatCount10 = 0\n    var lastNoteBeatCount11 = 0\n    var lastNoteBeatCount12\
    \ = 0\n    var lastNoteBeatCount13 = 0\n    var lastNoteBeatCount14 = 0\n    var\
    \ lastNoteBeatCount15 = 0\n    var lastNoteBeatCount16 = 0\n    var lastNoteBeatCount17\
    \ = 0\n    var lastNoteBeatCount18 = 0\n    var lastNoteBeatCount19 = 0\n    var\
    \ lastNoteBeatCount20 = 0\n    var lastNoteBeatCount21 = 0\n    var lastNoteBeatCount22\
    \ = 0\n    var lastNoteBeatCount23 = 0\n    var lastNoteBeatCount24 = 0\n    var\
    \ lastNoteBeatCount25 = 0\n    var lastNoteBeatCount26 = 0\n    var lastNoteBeatCount27\
    \ = 0\n    var lastNoteBeatCount28 = 0\n    var lastNoteBeatCount29 = 0\n    var\
    \ lastNoteBeatCount30 = 0\n    var lastNoteBeatCount31 = 0\n    var lastNoteBeatCount32\
    \ = 0\n    var lastNoteBeatCount33 = 0\n    var lastNoteBeatCount34 = 0\n    var\
    \ lastNoteBeatCount35 = 0\n    var lastNoteBeatCount36 = 0\n    var lastNoteBeatCount37\
    \ = 0\n    var lastNoteBeatCount38 = 0\n    var lastNoteBeatCount39 = 0\n    var\
    \ lastNoteBeatCount40 = 0\n    var lastNoteBeatCount41 = 0\n    var lastNoteBeatCount42\
    \ = 0\n    var lastNoteBeatCount43 = 0\n    var lastNoteBeatCount44 = 0\n    var\
    \ lastNoteBeatCount45 = 0\n    var lastNoteBeatCount46 = 0\n    var lastNoteBeatCount47\
    \ = 0\n    var lastNoteBeatCount48 = 0\n    var lastNoteBeatCount49 = 0\n    var\
    \ lastNoteBeatCount50 = 0\n    var lastNoteBeatCount51 = 0\n    var lastNoteBeatCount52\
    \ = 0\n    var lastNoteBeatCount53 = 0\n    var lastNoteBeat\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpznes8ylr.swift:71:9: error: type annotation missing in pattern\n\
    \    var lastNoteBeat\n        ^\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beats_count = 0\n    var note_length = 0\n\
    \    var note_index = 0\n    var note_char = \"\"\n    var note_char_index = 0\n\
    \    var note_char_length = 0\n    var note_char_index = 0\n    var note_char\
    \ = \"\"\n    var note_char_index = 0\n    var note_char = \"\"\n    var note_char_index\
    \ = 0\n    var note_char = \"\"\n    var note_char_index = 0\n    var note_char\
    \ = \"\"\n    var note_char_index = 0\n    var note_char = \"\"\n    var note_char_index\
    \ = 0\n    var note_char = \"\"\n    var note_char_index = 0\n    var note_char\
    \ = \"\"\n    var note_char_index = 0\n    var note_char = \"\"\n    var note_char_index\
    \ = 0\n    var note_char = \"\"\n    var note_char_index = 0\n    var note_char\
    \ = \"\"\n    var note_char_index = 0\n    var note_char = \"\"\n    var note_char_index\
    \ = 0\n    var note_char = \"\"\n    var note_char_index = 0\n    var note_char\
    \ = \"\"\n    var note_char_index = 0\n    var note_char = \"\"\n    var note_char_index\
    \ = 0\n    var note_char = \"\"\n    var note_char_index = 0\n    var note_char\
    \ = \"\"\n    var note_char_index = 0\n    var note_char = \"\"\n    var note_char_index\
    \ = 0\n    var note_char = \"\"\n    var note_char_index = 0\n    var note_char\
    \ = \"\"\n    var note_char_index = 0\n    var note_char = \"\"\n    var note_char_index\
    \ = 0\n    var note_char = \"\"\n    var note_char_index = 0\n    var note_char\
    \ = \"\"\n    var note_char_index = 0\n    var note_char = \"\"\n    var note_char_index\
    \ = 0\n    var note_char = \"\"\n    var note_char_index = 0\n    var note_char\
    \ = \"\"\n    var note_char_index = 0\n    var note_char = \"\"\n    var note_char_index\
    \ = 0\n    var note_char = \"\"\n    var note_char_index = 0\n    var note_char\
    \ = \"\"\n    var note_char_index = 0\n    var note_char = \"\"\n    var note_char_index\
    \ = 0\n    var note_char = \"\"\n    var note_char_index = 0\n    var note_char\
    \ = \"\"\n    var note_char_index = 0\n    var note_char = \"\"\n    var note_char_index\
    \ = 0\n    var note_char = \"\"\n    var note_char_index = 0\n    var note_char\
    \ = \"\"\n    var note_char_index = 0\n    var note_char = \"\"\n    var note_char_index\
    \ = 0\n    var note_char = \"\"\n    var note_char_index = 0\n    var note_char\
    \ = \"\"\n    var note_char_index = 0\n    var note_char = \"\"\n    var note_char_index\
    \ = 0\n    var note_char = \"\"\n    var note_char_index = 0\n    var note_char\
    \ = \"\"\n    var note_char_index = 0\n    var note_char = \"\"\n    var note_char_index\
    \ = 0\n    var note_char = \"\"\n    var note_char_index\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmprfnwtu8t.swift:20:9: error: invalid redeclaration of 'note_char_index'\n\
    \    var note_char_index = 0\n        ^\n/tmp/tmprfnwtu8t.swift:18:9: note: 'note_char_index'\
    \ previously declared here\n    var note_char_index = 0\n        ^\n/tmp/tmprfnwtu8t.swift:21:9:\
    \ error: invalid redeclaration of 'note_char'\n    var note_char = \"\"\n    \
    \    ^\n/tmp/tmprfnwtu8t.swift:17:9: note: 'note_char' previously declared here\n\
    \    var note_char = \"\"\n        ^\n/tmp/tmprfnwtu8t.swift:22:9: error: invalid\
    \ redeclaration of 'note_char_index'\n    var note_char_index = 0\n        ^\n\
    /tmp/tmprfnwtu8t.swift:18:9: note: 'note_char_index' previously declared here\n\
    \    var note_char_index = 0\n        ^\n/tmp/tmprfnwtu8t.swift:23:9: error: invalid\
    \ redeclaration of 'note_char'\n    var note_char = \"\"\n        ^\n/tmp/tmprfnwtu8t.swift:17:9:\
    \ note: 'note_char' previously declared here\n    var note_char = \"\"\n     \
    \   ^\n/tmp/tmprfnwtu8t.swift:24:9: error: invalid redeclaration of 'note_char_index'\n\
    \    var note_char_index = 0\n        ^\n/tmp/tmprfnwtu8t.swift:18:9: note: 'note_char_index'\
    \ previously declared here\n    var note_char_index = 0\n        ^\n/tmp/tmprfnwtu8t.swift:25:9:\
    \ error: invalid redeclaration of 'note_char'\n    var note_char = \"\"\n    \
    \    ^\n/tmp/tmprfnwtu8t.swift:17:9: note: 'note_char' previously declared here\n\
    \    var note_char = \"\"\n        ^\n/tmp/tmprfnwtu8t.swift:26:9: error: invalid\
    \ redeclaration of 'note_char_index'\n    var note_char_index = 0\n        ^\n\
    /tmp/tmprfnwtu8t.swift:18:9: note: 'note_char_index' previously declared here\n\
    \    var note_char_index = 0\n        ^\n/tmp/tmprfnwtu8t.swift:27:9: error: invalid\
    \ redeclaration of 'note_char'\n    var note_char = \"\"\n        ^\n/tmp/tmprfnwtu8t.swift:17:9:\
    \ note: 'note_char' previously declared here\n    var note_char = \"\"\n     \
    \   ^\n/tmp/tmprfnwtu8t.swift:28:9: error: invalid redeclaration of 'note_char_index'\n\
    \    var note_char_index = 0\n        ^\n/tmp/tmprfnwtu8t.swift:18:9: note: 'note_char_index'\
    \ previously declared here\n    var note_char_index = 0\n        ^\n/tmp/tmprfnwtu8t.swift:29:9:\
    \ error: inv"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beats_count = 0\n    var notes_count = 0\n\
    \    var note = String()\n    var last_note = String()\n    var last_beat = Int()\n\
    \    var last_beat_count = 0\n    var last_note_count = 0\n    var last_note =\
    \ String()\n    var last_note_count = 0\n    var last_note = String()\n    var\
    \ last_note_count = 0\n    var last_note = String()\n    var last_note_count =\
    \ 0\n    var last_note = String()\n    var last_note_count = 0\n    var last_note\
    \ = String()\n    var last_note_count = 0\n    var last_note = String()\n    var\
    \ last_note_count = 0\n    var last_note = String()\n    var last_note_count =\
    \ 0\n    var last_note = String()\n    var last_note_count = 0\n    var last_note\
    \ = String()\n    var last_note_count = 0\n    var last_note = String()\n    var\
    \ last_note_count = 0\n    var last_note = String()\n    var last_note_count =\
    \ 0\n    var last_note = String()\n    var last_note_count = 0\n    var last_note\
    \ = String()\n    var last_note_count = 0\n    var last_note = String()\n    var\
    \ last_note_count = 0\n    var last_note = String()\n    var last_note_count =\
    \ 0\n    var last_note = String()\n    var last_note_count = 0\n    var last_note\
    \ = String()\n    var last_note_count = 0\n    var last_note = String()\n    var\
    \ last_note_count = 0\n    var last_note = String()\n    var last_note_count =\
    \ 0\n    var last_note = String()\n    var last_note_count = 0\n    var last_note\
    \ = String()\n    var last_note_count = 0\n    var last_note = String()\n    var\
    \ last_note_count = 0\n    var last_note = String()\n    var last_note_count =\
    \ 0\n    var last_note = String()\n    var last_note_count = 0\n    var last_note\
    \ = String()\n    var last_note_count = 0\n    var last_note = String()\n    var\
    \ last_note_count = 0\n    var last_note = String()\n    var last_note_count =\
    \ 0\n    var last_note = String()\n    var last_note_count = 0\n    var last_note\
    \ = String()\n    var last_note_count = 0\n    var last_note = String()\n    var\
    \ last_note_count = 0\n    var last_note = String()\n    var last_note_count =\
    \ 0\n    var last_note = String()\n    var last_note_count = 0\n    var last_note\
    \ = String()\n    var last_note_count = 0\n    var last_note = String()\n    var\
    \ last_note_count = 0\n    var last_note = String()\n    var last_note_count =\
    \ 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpw8_593ea.swift:91:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpw8_593ea.swift:21:9: error: invalid redeclaration of 'last_note'\n\
    \    var last_note = String()\n        ^\n/tmp/tmpw8_593ea.swift:17:9: note: 'last_note'\
    \ previously declared here\n    var last_note = String()\n        ^\n/tmp/tmpw8_593ea.swift:22:9:\
    \ error: invalid redeclaration of 'last_note_count'\n    var last_note_count =\
    \ 0\n        ^\n/tmp/tmpw8_593ea.swift:20:9: note: 'last_note_count' previously\
    \ declared here\n    var last_note_count = 0\n        ^\n/tmp/tmpw8_593ea.swift:23:9:\
    \ error: invalid redeclaration of 'last_note'\n    var last_note = String()\n\
    \        ^\n/tmp/tmpw8_593ea.swift:17:9: note: 'last_note' previously declared\
    \ here\n    var last_note = String()\n        ^\n/tmp/tmpw8_593ea.swift:24:9:\
    \ error: invalid redeclaration of 'last_note_count'\n    var last_note_count =\
    \ 0\n        ^\n/tmp/tmpw8_593ea.swift:20:9: note: 'last_note_count' previously\
    \ declared here\n    var last_note_count = 0\n        ^\n/tmp/tmpw8_593ea.swift:25:9:\
    \ error: invalid redeclaration of 'last_note'\n    var last_note = String()\n\
    \        ^\n/tmp/tmpw8_593ea.swift:17:9: note: 'last_note' previously declared\
    \ here\n    var last_note = String()\n        ^\n/tmp/tmpw8_593ea.swift:26:9:\
    \ error: invalid redeclaration of 'last_note_count'\n    var last_note_count =\
    \ 0\n        ^\n/tmp/tmpw8_593ea.swift:20:9: note: 'last_note_count' previously\
    \ declared here\n    var last_note_count = 0\n        ^\n/tmp/tmpw8_593ea.swift:27:9:\
    \ error: invalid redeclaration of 'last_note'\n    var last_note = String()\n\
    \        ^\n/tmp/tmpw8_593ea.swift:17:9: note: 'last_note' previously declared\
    \ here\n    var last_note = String()\n        ^\n/tmp/tmpw8_593ea.swift:28:9:\
    \ error: invalid redeclaration of 'last_note_count'\n    var last_note_count =\
    \ 0\n        ^\n/tmp/tmpw8_593ea.swift:20:9: note: 'last_note_count' previously\
    \ declared here\n    var last_note_count = 0\n        ^\n/tmp/tmpw8_593ea.swift:29:9:\
    \ error: invalid redeclaration of 'last_note'\n    var last_note = String()\n\
    \        ^\n/tmp/tmpw8_593ea.swift:17:9: note: 'last_"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_value\
    \ = 0\n    var current_note_length = 0\n    var current_note_length_value = 0\n\
    \    var current_note_length_value_value = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value = 0\n \
    \   var current_note_length_value_value_value_value_value_value_value = 0\n  \
    \  var current_note_length_value_value_value_value_value_value_value_value = 0\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp3kyg9x7z.swift:27:9: error: invalid redeclaration of 'current_note_length_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp3kyg9x7z.swift:26:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp3kyg9x7z.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp3kyg9x7z.swift:31:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp3kyg9x7z.swift:38:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp3kyg9x7z.swift:37:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp3kyg9x7z.swift:40:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_va"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_index2\
    \ = 0\n    var current_note_length_index3 = 0\n    var current_note_length_index4\
    \ = 0\n    var current_note_length_index5 = 0\n    var current_note_length_index6\
    \ = 0\n    var current_note_length_index7 = 0\n    var current_note_length_index8\
    \ = 0\n    var current_note_length_index9 = 0\n    var current_note_length_index10\
    \ = 0\n    var current_note_length_index11 = 0\n    var current_note_length_index12\
    \ = 0\n    var current_note_length_index13 = 0\n    var current_note_length_index14\
    \ = 0\n    var current_note_length_index15 = 0\n    var current_note_length_index16\
    \ = 0\n    var current_note_length_index17 = 0\n    var current_note_length_index18\
    \ = 0\n    var current_note_length_index19 = 0\n    var current_note_length_index20\
    \ = 0\n    var current_note_length_index21 = 0\n    var current_note_length_index22\
    \ = 0\n    var current_note_length_index23 = 0\n    var current_note_length_index24\
    \ = 0\n    var current_note_length_index25 = 0\n    var current_note_length_index26\
    \ = 0\n    var current_note_length_index27 = 0\n    var current_note_length_index28\
    \ = 0\n    var current_note_length_index29 = 0\n    var current_note_length_index30\
    \ = 0\n    var current_note_length_index31 = 0\n    var current_note_length_index32\
    \ = 0\n    var current_note_length_index33 = 0\n    var current_note_length_index34\
    \ = 0\n    var current_note_length_index35 = 0\n    var current_note_length_index36\
    \ = 0\n    var current_note_length_index37 = 0\n    var current_note_length_index38\
    \ = 0\n    var current_note_length_index39 = 0\n    var current_note_length_index40\
    \ = 0\n    var current_note_length_index41 = 0\n    var current_note_length_index42\
    \ = 0\n    var current_note_length_index43 = 0\n    var current_note_length_index44\
    \ = 0\n    var current_note_length_index45 = 0\n    var current_note_length_index46\
    \ = 0\n    var current_note_length_index47 = 0\n    var current_note_length_index48\
    \ = 0\n    var current_note_length_index49 = 0\n    var current_note_length_index50\
    \ = 0\n    var current_note_length_index51 = 0\n    var current_note_length_index52\
    \ = 0\n    var current_note_length_index53 = 0\n    var current_note_length_index54\
    \ = 0\n    var current_note_length_index55 = 0\n    var current_note_length_index56\
    \ = 0\n    var current_note_length_index57 = 0\n    var current_note_length_index58\
    \ = 0\n    var current_note_length_index59 = 0\n    var current_note_length_index60\
    \ = 0\n    var current_note_length_index61 = 0\n    var current_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1kdovva5.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = \"\"\n    for char in music_string {\n      \
    \  switch char {\n        case \"o\":\n            note = \"o\"\n        case\
    \ \"o|\":\n            note = \"o|\"\n        case \"|\":\n            note =\
    \ \"|\"\n        default:\n            if note != \"\" {\n                beats.append(beat)\n\
    \                beat = 0\n                note = \"\"\n            }\n      \
    \      beat += 1\n        }\n    }\n    beats.append(beat)\n    return beats\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp54n_9g2l.swift:19:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var note_index\
    \ = 0\n    var note_index2 = 0\n    var note_index3 = 0\n    var note_index4 =\
    \ 0\n    var note_index5 = 0\n    var note_index6 = 0\n    var note_index7 = 0\n\
    \    var note_index8 = 0\n    var note_index9 = 0\n    var note_index10 = 0\n\
    \    var note_index11 = 0\n    var note_index12 = 0\n    var note_index13 = 0\n\
    \    var note_index14 = 0\n    var note_index15 = 0\n    var note_index16 = 0\n\
    \    var note_index17 = 0\n    var note_index18 = 0\n    var note_index19 = 0\n\
    \    var note_index20 = 0\n    var note_index21 = 0\n    var note_index22 = 0\n\
    \    var note_index23 = 0\n    var note_index24 = 0\n    var note_index25 = 0\n\
    \    var note_index26 = 0\n    var note_index27 = 0\n    var note_index28 = 0\n\
    \    var note_index29 = 0\n    var note_index30 = 0\n    var note_index31 = 0\n\
    \    var note_index32 = 0\n    var note_index33 = 0\n    var note_index34 = 0\n\
    \    var note_index35 = 0\n    var note_index36 = 0\n    var note_index37 = 0\n\
    \    var note_index38 = 0\n    var note_index39 = 0\n    var note_index40 = 0\n\
    \    var note_index41 = 0\n    var note_index42 = 0\n    var note_index43 = 0\n\
    \    var note_index44 = 0\n    var note_index45 = 0\n    var note_index46 = 0\n\
    \    var note_index47 = 0\n    var note_index48 = 0\n    var note_index49 = 0\n\
    \    var note_index50 = 0\n    var note_index51 = 0\n    var note_index52 = 0\n\
    \    var note_index53 = 0\n    var note_index54 = 0\n    var note_index55 = 0\n\
    \    var note_index56 = 0\n    var note_index57 = 0\n    var note_index58 = 0\n\
    \    var note_index59 = 0\n    var note_index60 = 0\n    var note_index61 = 0\n\
    \    var note_index62 = 0\n    var note_index63 = 0\n    var note_index64 = 0\n\
    \    var note_index65 = 0\n    var note_index66 = 0\n    var note_index67 = 0\n\
    \    var note_index68 = 0\n    var note_index69 = 0\n    var note_index70 = 0\n\
    \    var note_index71 = 0\n    var note_index72 = 0\n    var note_index73 = 0\n\
    \    var note_index74 = 0\n    var note_index75 = 0\n    var note_index76 = 0\n\
    \    var note_index77 = 0\n    var note_index78 = 0\n    var note_index79 = 0\n\
    \    var note_index80 = 0\n    var note_index81 = 0\n    var note_index82 = 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp4rwfq2h5.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp4rwfq2h5.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp4rwfq2h5.swift:14:9:\
    \ warning: initialization of variable 'beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmp4rwfq2h5.swift:15:9: warning: initialization of variable 'note' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var note\
    \ = \"\"\n    ~~~~^~~~\n    _\n/tmp/tmp4rwfq2h5.swift:16:9: warning: initialization\
    \ of variable 'note_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_index = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmp4rwfq2h5.swift:17:9:\
    \ warning: initialization of variable 'note_index2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_index2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp4rwfq2h5.swift:18:9: warning: initialization of variable 'note_index3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_index3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp4rwfq2h5.swift:19:9:\
    \ warning: initialization of variable 'note_index4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_index4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp4rwfq2h5.swift:20:9: warning: initialization of variable 'note_index5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_index5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp4rwfq2h5.swift:21:9:\
    \ warning: initialization of variable 'note_index6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_index6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp4rwfq2h5.swift:22:9: warning: initialization of variable 'note_index7'\
    \ was never used"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var notes: [String] = []\n    var beats_count = 0\n    var notes_count =\
    \ 0\n    var note_index = 0\n    var note_string = \"\"\n    var note_char = \"\
    \"\n    var note_length = 0\n    var note_last_char = \"\"\n    var note_last_length\
    \ = 0\n    var note_last_last_char = \"\"\n    var note_last_last_length = 0\n\
    \    var note_last_last_last_char = \"\"\n    var note_last_last_last_length =\
    \ 0\n    var note_last_last_last_last_char = \"\"\n    var note_last_last_last_last_length\
    \ = 0\n    var note_last_last_last_last_last_char = \"\"\n    var note_last_last_last_last_last_length\
    \ = 0\n    var note_last_last_last_last_last_last_char = \"\"\n    var note_last_last_last_last_last_last_length\
    \ = 0\n    var note_last_last_last_last_last_last_last_char = \"\"\n    var note_last_last_last_last_last_last_last_length\
    \ = 0\n    var note_last_last_last_last_last_last_last_char = \"\"\n    var note_last_last_last_last_last_last_last_length\
    \ = 0\n    var note_last_last_last_last_last_last_last_last_char = \"\"\n    var\
    \ note_last_last_last_last_last_last_last_last_length = 0\n    var note_last_last_last_last_last_last_last_last_char\
    \ = \"\"\n    var note_last_last_last_last_last_last_last_last_length = 0\n  \
    \  var note_last_last_last_last_last_last_last_last_last_char = \"\"\n    var\
    \ note_last_last_last_last_last_last_last_last_last_length = 0\n    var note_last_last_last_last_last_last_last_last_last_char\
    \ = \"\"\n    var note_last_last_last_last_last_last_last_last_last_length = 0\n\
    \    var note_last_last_last_last_last_last_last_last_last_last_char = \"\"\n\
    \    var note_last_last_last_last_last_last_last_last_last_last_length = 0\n \
    \   var note_last_last_last_last_last_last_last_last_last_last_char = \"\"\n \
    \   var note_last_last_last_last_last_last_last_last_last_last_length = 0\n  \
    \  var note_last_last_last_last_last_last_last_last_last_last_char = \"\"\n  \
    \  var note_last_last_last_last_last_last_last_last_last_last_length = 0\n   \
    \ var note_last_last_last_last_last_last_last_last_last_last_last_char = \"\"\n\
    \    var note_last_last_last_last_last_last_last_last_last_last_length = 0\n \
    \   var note_last_last_last_last_last_last_last_last_last_last_last_char = \"\"\
    \n    var note_last_last_last_last_last_last_last_last_last_last_last_length =\
    \ 0\n    var note_last_last_last_last_last_last_last_last_last_last_last_last_char\
    \ = \"\"\n    var note_last_last_last_last_last_last_last_last_last_last_last_last_length\
    \ = 0\n    var note_last_last_last_last_last_last_last_last_last_last_last_last_last_char\
    \ = \"\"\n    var note_last_last_last_last_last_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbz9fu99q.swift:34:9: error: invalid redeclaration of 'note_last_last_last_last_last_last_last_char'\n\
    \    var note_last_last_last_last_last_last_last_char = \"\"\n        ^\n/tmp/tmpbz9fu99q.swift:32:9:\
    \ note: 'note_last_last_last_last_last_last_last_char' previously declared here\n\
    \    var note_last_last_last_last_last_last_last_char = \"\"\n        ^\n/tmp/tmpbz9fu99q.swift:35:9:\
    \ error: invalid redeclaration of 'note_last_last_last_last_last_last_last_length'\n\
    \    var note_last_last_last_last_last_last_last_length = 0\n        ^\n/tmp/tmpbz9fu99q.swift:33:9:\
    \ note: 'note_last_last_last_last_last_last_last_length' previously declared here\n\
    \    var note_last_last_last_last_last_last_last_length = 0\n        ^\n/tmp/tmpbz9fu99q.swift:38:9:\
    \ error: invalid redeclaration of 'note_last_last_last_last_last_last_last_last_char'\n\
    \    var note_last_last_last_last_last_last_last_last_char = \"\"\n        ^\n\
    /tmp/tmpbz9fu99q.swift:36:9: note: 'note_last_last_last_last_last_last_last_last_char'\
    \ previously declared here\n    var note_last_last_last_last_last_last_last_last_char\
    \ = \"\"\n        ^\n/tmp/tmpbz9fu99q.swift:39:9: error: invalid redeclaration\
    \ of 'note_last_last_last_last_last_last_last_last_length'\n    var note_last_last_last_last_last_last_last_last_length\
    \ = 0\n        ^\n/tmp/tmpbz9fu99q.swift:37:9: note: 'note_last_last_last_last_last_last_last_last_length'\
    \ previously declared here\n    var note_last_last_last_last_last_last_last_last_length\
    \ = 0\n        ^\n/tmp/tmpbz9fu99q.swift:42:9: error: invalid redeclaration of\
    \ 'note_last_last_last_last_last_last_last_last_last_char'\n    var note_last_last_last_last_last_last_last_last_last_char\
    \ = \"\"\n        ^\n/tmp/tmpbz9fu99q.swift:40:9: note: 'note_last_last_last_last_last_last_last_last_last_char'\
    \ previously declared here\n    var note_last_last_last_last_last_last_last_last_last_char\
    \ = \"\"\n        ^\n/tmp/tmpbz9fu99q.swift:43:9: error: invalid redeclaration\
    \ of 'note_last_last_last_last_last_last_last_last_last_length'\n    var note_last_last_last_last_last_last_last_last_last_length\
    \ = 0\n        ^\n/t"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = 0\n    var last_note\
    \ = 0\n    var last_beat = 0\n    var last_beats = 0\n    var last_beats_count\
    \ = 0\n    var last_beats_count_count = 0\n    var last_beats_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count = 0\n    var last_beats_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count = 0\n    var last_beats_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count = 0\n\
    \    var last_beats_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpgy7gm9pm.swift:33:9: error: type annotation missing in pattern\n\
    \    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var note = String()\n    var last_note = String()\n\
    \    var last_note_count = 0\n    var last_note_beat = 0\n    var last_note_beats\
    \ = 0\n    var last_note_beats_count = 0\n    var last_note_beats_count_is_even\
    \ = false\n    var last_note_beats_count_is_odd = false\n    var last_note_beats_count_is_odd_or_even\
    \ = false\n    var last_note_beats_count_is_odd_or_even_is_even = false\n    var\
    \ last_note_beats_count_is_odd_or_even_is_odd = false\n    var last_note_beats_count_is_odd_or_even_is_odd_or_even\
    \ = false\n    var last_note_beats_count_is_odd_or_even_is_odd_or_even_is_even\
    \ = false\n    var last_note_beats_count_is_odd_or_even_is_odd_or_even_is_odd\
    \ = false\n    var last_note_beats_count_is_odd_or_even_is_odd_or_even_is_odd_or_even\
    \ = false\n    var last_note_beats_count_is_odd_or_even_is_odd_or_even_is_odd_or_even_is_even\
    \ = false\n    var last_note_beats_count_is_odd_or_even_is_odd_or_even_is_odd_or_even_is_odd\
    \ = false\n    var last_note_beats_count_is_odd_or_even_is_odd_or_even_is_odd_or_even_is_odd_or_even\
    \ = false\n    var last_note_beats_count_is_odd_or_even_is_odd_or_even_is_odd_or_even_is_odd_or_even_is_even\
    \ = false\n    var last_note_beats_count_is_odd_or_even_is_odd_or_even_is_odd_or_even_is_odd_or_even_is_odd_or_even\
    \ = false\n    var last_note_beats_count_is_odd_or_even_is_odd_or_even_is_odd_or_even_is_odd_or_even_is_odd_or_even_is_even\
    \ = false\n    var last_note_beats_count_is_odd_or_even_is_odd_or_even_is_odd_or_even_is_odd_or_even_is_odd_or_even_is_odd_or_even_is_even\
    \ = false\n    var last_note_beats_count_is_odd_or_even_is_odd_or_even_is_odd_or_even_is_odd_or_even_is_odd_or_even_is_odd_or_even_is_odd_or_even_is_even\
    \ = false\n    var last_note_beats_count_is_odd_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpn4q735_0.swift:37:9: error: type annotation missing in pattern\n\
    \    var last_note_beats_count_is_odd_\n        ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array: [Int]\
    \ = []\n    var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_string\
    \ = \"\"\n    var current_note_length_string_index = 0\n    var current_note_length_string_value\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_index = 0\n    var current_note_length_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string = \"\"\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpwhuuu9he.swift:26:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_index = 0\n        ^\n\
    /tmp/tmpwhuuu9he.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpwhuuu9he.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpwhuuu9he.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpwhuuu9he.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpwhuuu9he.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpwhuuu9he.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpwhuuu9he.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpwhuuu9he.swift:31:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpwhuuu9he.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpwhuuu9he.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array: [Int]\
    \ = []\n    var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_string\
    \ = \"\"\n    var current_note_length_string_index = 0\n    var current_note_length_string_value\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index2\
    \ = 0\n    var current_note_length_string_value_index3 = 0\n    var current_note_length_string_value_index4\
    \ = 0\n    var current_note_length_string_value_index5 = 0\n    var current_note_length_string_value_index6\
    \ = 0\n    var current_note_length_string_value_index7 = 0\n    var current_note_length_string_value_index8\
    \ = 0\n    var current_note_length_string_value_index9 = 0\n    var current_note_length_string_value_index10\
    \ = 0\n    var current_note_length_string_value_index11 = 0\n    var current_note_length_string_value_index12\
    \ = 0\n    var current_note_length_string_value_index13 = 0\n    var current_note_length_string_value_index14\
    \ = 0\n    var current_note_length_string_value_index15 = 0\n    var current_note_length_string_value_index16\
    \ = 0\n    var current_note_length_string_value_index17 = 0\n    var current_note_length_string_value_index18\
    \ = 0\n    var current_note_length_string_value_index19 = 0\n    var current_note_length_string_value_index20\
    \ = 0\n    var current_note_length_string_value_index21 = 0\n    var current_note_length_string_value_index22\
    \ = 0\n    var current_note_length_string_value_index23 = 0\n    var current_note_length_string_value_index24\
    \ = 0\n    var current_note_length_string_value_index25 = 0\n    var current_note_length_string_value_index26\
    \ = 0\n    var current_note_length_string_value_index27 = 0\n    var current_note_length_string_value_index28\
    \ = 0\n    var current_note_length_string_value_index29 = 0\n    var current_note_length_string_value_index30\
    \ = 0\n    var current_note_length_string_value_index31 = 0\n    var current_note_length_string_value_index32\
    \ = 0\n    var current_note_length_string_value_index33 = 0\n    var current_note_length_string_value_index34\
    \ = 0\n    var current_note_length_string_value_index35 = 0\n    var current_note_length_string_value_index36\
    \ = 0\n    var current_note_length_string_value_index37 = 0\n    var current_note_length_string_value_index38\
    \ = 0\n    var current_note_length_string_value_index39 = 0\n    var current_note_length_string_value_index40\
    \ = 0\n    var current_note_length_string_value_index41 = 0\n    var current_note_length_string_value_index42\
    \ = 0\n    var current_note_length_string_value_index43 = 0\n    var current_note_length_string_value_index44\
    \ = 0\n    var current_note_length_string_value_index45 = 0\n    var current_note_length_string_value_index46\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpgh6jo5h7.swift:12:9: warning: variable 'beats_array' was never\
    \ used; consider replacing with '_' or removing it\n    var beats_array: [Int]\
    \ = []\n        ^~~~~~~~~~~\n        _\n/tmp/tmpgh6jo5h7.swift:13:9: warning:\
    \ initialization of variable 'current_beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var current_beat = 0\n    ~~~~^~~~~~~~~~~~\n\
    \    _\n/tmp/tmpgh6jo5h7.swift:14:9: warning: initialization of variable 'current_note'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var current_note = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpgh6jo5h7.swift:15:9:\
    \ warning: initialization of variable 'current_note_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var current_note_length\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpgh6jo5h7.swift:16:9: warning:\
    \ initialization of variable 'current_note_length_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var current_note_length_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpgh6jo5h7.swift:17:9:\
    \ warning: initialization of variable 'current_note_length_string' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_string\
    \ = \"\"\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpgh6jo5h7.swift:18:9:\
    \ warning: initialization of variable 'current_note_length_string_index' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var current_note_length_string_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpgh6jo5h7.swift:19:9:\
    \ warning: initialization of variable 'current_note_length_string_value' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var current_note_length_string_value\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpgh6jo5h7.swift:20:9:\
    \ warning: initialization of variable 'current_note_length_string_value_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var current_note_length_s"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastBeatNote = \"\
    \"\n    var lastBeatNoteBeat = 0\n    var lastBeatNoteBeatBeat = 0\n    var lastBeatNoteBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeat\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpxs35nqrh.swift:26:9: error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpxs35nqrh.swift:25:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpxs35nqrh.swift:27:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpxs35nqrh.swift:25:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpxs35nqrh.swift:28:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpxs35nqrh.swift:25:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpxs35nqrh.swift:29:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpxs35nqrh.swift:25:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpxs35nqrh.swift:30:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpxs35nqrh.swift:25:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpxs35nqrh.swift:31:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpxs35nqrh.swift:25:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpxs35nqrh.swift:32:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastBeatNoteBeatBeatBeatBeatBeatBeat ="
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var current_beat = 0\n    var current_note = 0\n\
    \    var current_note_length = 0\n    var current_note_length_index = 0\n    var\
    \ current_note_length_value = 0\n    var current_note_length_value_index = 0\n\
    \    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_0ilak54.swift:25:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp_0ilak54.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp_0ilak54.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp_0ilak54.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp_0ilak54.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp_0ilak54.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp_0ilak54.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp_0ilak54.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp_0ilak54.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp_0ilak54.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp_0ilak54.swift:30:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp_0ilak54.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_valu"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var last_note = 0\n    var last_beat =\
    \ 0\n    var last_beats = 0\n    var last_beats_count = 0\n    var last_beats_count_count\
    \ = 0\n    var last_beats_count_count_count = 0\n    var last_beats_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count = 0\n    var last_beats_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count = 0\n    var\
    \ last_beats_count_count_count_count_count_count_count_count = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpb0e6mll8.swift:33:9: error: type annotation missing in pattern\n\
    \    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    for char\
    \ in music_string {\n        switch char {\n        case \"o\":\n            note\
    \ = \"o\"\n        case \"o|\":\n            note = \"o|\"\n        case \"|\"\
    :\n            note = \"|\"\n        default:\n            notes.append(note)\n\
    \            note = \"\"\n        }\n        beats.append(beat)\n        beat\
    \ += notes.count + 1\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8vcpwsjq.swift:20:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beats_count = 0\n    var note_length = 0\n\
    \    var note_index = 0\n    var note_char = \"\"\n    var note_char_index = 0\n\
    \    var note_char_length = 0\n    var note_char_char = \"\"\n    var note_char_char_index\
    \ = 0\n    var note_char_char_length = 0\n    var note_char_char_char = \"\"\n\
    \    var note_char_char_char_index = 0\n    var note_char_char_char_length = 0\n\
    \    var note_char_char_char_char = \"\"\n    var note_char_char_char_char_index\
    \ = 0\n    var note_char_char_char_char_length = 0\n    var note_char_char_char_char_char\
    \ = \"\"\n    var note_char_char_char_char_char_index = 0\n    var note_char_char_char_char_char_length\
    \ = 0\n    var note_char_char_char_char_char_char = \"\"\n    var note_char_char_char_char_char_char_index\
    \ = 0\n    var note_char_char_char_char_char_char_length = 0\n    var note_char_char_char_char_char_char_char\
    \ = \"\"\n    var note_char_char_char_char_char_char_char_index = 0\n    var note_char_char_char_char_char_char_char_length\
    \ = 0\n    var note_char_char_char_char_char_char_char_char = \"\"\n    var note_char_char_char_char_char_char_char_char_index\
    \ = 0\n    var note_char_char_char_char_char_char_char_char_length = 0\n    var\
    \ note_char_char_char_char_char_char_char_char_char = \"\"\n    var note_char_char_char_char_char_char_char_char_char_index\
    \ = 0\n    var note_char_char_char_char_char_char_char_char_char_length = 0\n\
    \    var note_char_char_char_char_char_char_char_char_char_char = \"\"\n    var\
    \ note_char_char_char_char_char_char_char_char_char_char_index = 0\n    var note_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var note_char_char_char_char_char_char_char_char_char_char = \"\"\n\
    \    var note_char_char_char_char_char_char_char_char_char_char_index = 0\n  \
    \  var note_char_char_char_char_char_char_char_char_char_char_length = 0\n   \
    \ var note_char_char_char_char_char_char_char_char_char_char_char = \"\"\n   \
    \ var note_char_char_char_char_char_char_char_char_char_char_char_index = 0\n\
    \    var note_char_char_char_char_char_char_char_char_char_char_char_length =\
    \ 0\n    var note_char_char_char_char_char_char_char_char_char_char_char_char\
    \ = \"\"\n    var note_char_char_char_char_char_char_char_char_char_char_char_index\
    \ = 0\n    var note_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var note_char_char_char_char_char_char_char_char_char_char_char_char\
    \ = \"\"\n    var note_char_char_char_char_char_char_char_char_char_char_char_char_index\
    \ = 0\n    var note_char_char_char_char_char_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpn_ur_e1k.swift:46:9: error: invalid redeclaration of 'note_char_char_char_char_char_char_char_char_char_length'\n\
    \    var note_char_char_char_char_char_char_char_char_char_length = 0\n      \
    \  ^\n/tmp/tmpn_ur_e1k.swift:43:9: note: 'note_char_char_char_char_char_char_char_char_char_length'\
    \ previously declared here\n    var note_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n        ^\n/tmp/tmpn_ur_e1k.swift:47:9: error: invalid redeclaration of\
    \ 'note_char_char_char_char_char_char_char_char_char_char'\n    var note_char_char_char_char_char_char_char_char_char_char\
    \ = \"\"\n        ^\n/tmp/tmpn_ur_e1k.swift:44:9: note: 'note_char_char_char_char_char_char_char_char_char_char'\
    \ previously declared here\n    var note_char_char_char_char_char_char_char_char_char_char\
    \ = \"\"\n        ^\n/tmp/tmpn_ur_e1k.swift:48:9: error: invalid redeclaration\
    \ of 'note_char_char_char_char_char_char_char_char_char_char_index'\n    var note_char_char_char_char_char_char_char_char_char_char_index\
    \ = 0\n        ^\n/tmp/tmpn_ur_e1k.swift:45:9: note: 'note_char_char_char_char_char_char_char_char_char_char_index'\
    \ previously declared here\n    var note_char_char_char_char_char_char_char_char_char_char_index\
    \ = 0\n        ^\n/tmp/tmpn_ur_e1k.swift:54:9: error: invalid redeclaration of\
    \ 'note_char_char_char_char_char_char_char_char_char_char_char_index'\n    var\
    \ note_char_char_char_char_char_char_char_char_char_char_char_index = 0\n    \
    \    ^\n/tmp/tmpn_ur_e1k.swift:51:9: note: 'note_char_char_char_char_char_char_char_char_char_char_char_index'\
    \ previously declared here\n    var note_char_char_char_char_char_char_char_char_char_char_char_index\
    \ = 0\n        ^\n/tmp/tmpn_ur_e1k.swift:55:9: error: invalid redeclaration of\
    \ 'note_char_char_char_char_char_char_char_char_char_char_char_length'\n    var\
    \ note_char_char_char_char_char_char_char_char_char_char_char_length = 0\n   \
    \     ^\n/tmp/tmpn_ur_e1k.swift:52:9: note: 'note_char_char_char_char_char_char_char_char_char_char_char_length'\
    \ previously declared here\n    var note_char_char_char_char_char_char_char_char_char_char_cha"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = String()\n    var last = 0\n    var note_count\
    \ = 0\n    var last_count = 0\n    var notes_count = 0\n    var notes_count_max\
    \ = 0\n    var notes_count_min = 0\n    var notes_count_max = 0\n    var notes_count_min\
    \ = 0\n    var notes_count_max = 0\n    var notes_count_min = 0\n    var notes_count_max\
    \ = 0\n    var notes_count_min = 0\n    var notes_count_max = 0\n    var notes_count_min\
    \ = 0\n    var notes_count_max = 0\n    var notes_count_min = 0\n    var notes_count_max\
    \ = 0\n    var notes_count_min = 0\n    var notes_count_max = 0\n    var notes_count_min\
    \ = 0\n    var notes_count_max = 0\n    var notes_count_min = 0\n    var notes_count_max\
    \ = 0\n    var notes_count_min = 0\n    var notes_count_max = 0\n    var notes_count_min\
    \ = 0\n    var notes_count_max = 0\n    var notes_count_min = 0\n    var notes_count_max\
    \ = 0\n    var notes_count_min = 0\n    var notes_count_max = 0\n    var notes_count_min\
    \ = 0\n    var notes_count_max = 0\n    var notes_count_min = 0\n    var notes_count_max\
    \ = 0\n    var notes_count_min = 0\n    var notes_count_max = 0\n    var notes_count_min\
    \ = 0\n    var notes_count_max = 0\n    var notes_count_min = 0\n    var notes_count_max\
    \ = 0\n    var notes_count_min = 0\n    var notes_count_max = 0\n    var notes_count_min\
    \ = 0\n    var notes_count_max = 0\n    var notes_count_min = 0\n    var notes_count_max\
    \ = 0\n    var notes_count_min = 0\n    var notes_count_max = 0\n    var notes_count_min\
    \ = 0\n    var notes_count_max = 0\n    var notes_count_min = 0\n    var notes_count_max\
    \ = 0\n    var notes_count_min = 0\n    var notes_count_max = 0\n    var notes_count_min\
    \ = 0\n    var notes_count_max = 0\n    var notes_count_min = 0\n    var notes_count_max\
    \ = 0\n    var notes_count_min = 0\n    var notes_count_max = 0\n    var notes_count_min\
    \ = 0\n    var notes_count_max = 0\n    var notes_count_min = 0\n    var notes_count_max\
    \ = 0\n    var notes_count_min = 0\n    var notes_count_max = 0\n    var notes_count_min\
    \ = 0\n    var notes_count_max = 0\n    var notes_count_min = 0\n    var notes_count_max\
    \ = 0\n    var notes_count_min = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpw30x04a2.swift:87:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpw30x04a2.swift:21:9: error: invalid redeclaration of 'notes_count_max'\n\
    \    var notes_count_max = 0\n        ^\n/tmp/tmpw30x04a2.swift:19:9: note: 'notes_count_max'\
    \ previously declared here\n    var notes_count_max = 0\n        ^\n/tmp/tmpw30x04a2.swift:22:9:\
    \ error: invalid redeclaration of 'notes_count_min'\n    var notes_count_min =\
    \ 0\n        ^\n/tmp/tmpw30x04a2.swift:20:9: note: 'notes_count_min' previously\
    \ declared here\n    var notes_count_min = 0\n        ^\n/tmp/tmpw30x04a2.swift:23:9:\
    \ error: invalid redeclaration of 'notes_count_max'\n    var notes_count_max =\
    \ 0\n        ^\n/tmp/tmpw30x04a2.swift:19:9: note: 'notes_count_max' previously\
    \ declared here\n    var notes_count_max = 0\n        ^\n/tmp/tmpw30x04a2.swift:24:9:\
    \ error: invalid redeclaration of 'notes_count_min'\n    var notes_count_min =\
    \ 0\n        ^\n/tmp/tmpw30x04a2.swift:20:9: note: 'notes_count_min' previously\
    \ declared here\n    var notes_count_min = 0\n        ^\n/tmp/tmpw30x04a2.swift:25:9:\
    \ error: invalid redeclaration of 'notes_count_max'\n    var notes_count_max =\
    \ 0\n        ^\n/tmp/tmpw30x04a2.swift:19:9: note: 'notes_count_max' previously\
    \ declared here\n    var notes_count_max = 0\n        ^\n/tmp/tmpw30x04a2.swift:26:9:\
    \ error: invalid redeclaration of 'notes_count_min'\n    var notes_count_min =\
    \ 0\n        ^\n/tmp/tmpw30x04a2.swift:20:9: note: 'notes_count_min' previously\
    \ declared here\n    var notes_count_min = 0\n        ^\n/tmp/tmpw30x04a2.swift:27:9:\
    \ error: invalid redeclaration of 'notes_count_max'\n    var notes_count_max =\
    \ 0\n        ^\n/tmp/tmpw30x04a2.swift:19:9: note: 'notes_count_max' previously\
    \ declared here\n    var notes_count_max = 0\n        ^\n/tmp/tmpw30x04a2.swift:28:9:\
    \ error: invalid redeclaration of 'notes_count_min'\n    var notes_count_min =\
    \ 0\n        ^\n/tmp/tmpw30x04a2.swift:20:9: note: 'notes_count_min' previously\
    \ declared here\n    var notes_count_min = 0\n        ^\n/tmp/tmpw30x04a2.swift:29:9:\
    \ error: invalid redeclaration of 'notes_count_max'\n    var notes_count_max =\
    \ 0\n      "
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var notes_index = 0\n\
    \    var notes_last_index = 0\n    var notes_last_beat = 0\n    var notes_last_beat_index\
    \ = 0\n    var notes_last_beat_length = 0\n    var notes_last_beat_note = 0\n\
    \    var notes_last_beat_note_index = 0\n    var notes_last_beat_note_length =\
    \ 0\n    var notes_last_beat_note_octave = 0\n    var notes_last_beat_note_octave_index\
    \ = 0\n    var notes_last_beat_note_octave_length = 0\n    var notes_last_beat_note_octave_note\
    \ = 0\n    var notes_last_beat_note_octave_note_index = 0\n    var notes_last_beat_note_octave_note_length\
    \ = 0\n    var notes_last_beat_note_octave_note_octave = 0\n    var notes_last_beat_note_octave_note_octave_index\
    \ = 0\n    var notes_last_beat_note_octave_note_octave_length = 0\n    var notes_last_beat_note_octave_note_octave_note\
    \ = 0\n    var notes_last_beat_note_octave_note_octave_note_index = 0\n    var\
    \ notes_last_beat_note_octave_note_octave_note_length = 0\n    var notes_last_beat_note_octave_note_octave_note_octave\
    \ = 0\n    var notes_last_beat_note_octave_note_octave_note_octave_index = 0\n\
    \    var notes_last_beat_note_octave_note_octave_note_octave_length = 0\n    var\
    \ notes_last_beat_note_octave_note_octave_note_octave_note = 0\n    var notes_last_beat_note_octave_note_octave_note_octave_note_index\
    \ = 0\n    var notes_last_beat_note_octave_note_octave_note_octave_note_length\
    \ = 0\n    var notes_last_beat_note_octave_note_octave_note_octave_note_octave\
    \ = 0\n    var notes_last_beat_note_octave_note_octave_note_octave_note_octave_index\
    \ = 0\n    var notes_last_beat_note_octave_note_octave_note_octave_note_octave_length\
    \ = 0\n    var notes_last_beat_note_octave_note_octave_note_octave_note_octave_note\
    \ = 0\n    var notes_last_beat_note_octave_note_octave_note_octave_note_octave_note_index\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpehmwzex8.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpehmwzex8.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmpehmwzex8.swift:14:9:\
    \ warning: initialization of variable 'notes_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpehmwzex8.swift:15:9: warning: initialization\
    \ of variable 'notes_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_index = 0\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmpehmwzex8.swift:16:9: warning: initialization of variable 'notes_last_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_last_index = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpehmwzex8.swift:17:9:\
    \ warning: initialization of variable 'notes_last_beat' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_last_beat = 0\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpehmwzex8.swift:18:9: warning: initialization\
    \ of variable 'notes_last_beat_index' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var notes_last_beat_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpehmwzex8.swift:19:9: warning: initialization of variable 'notes_last_beat_length'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_last_beat_length = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpehmwzex8.swift:20:9:\
    \ warning: initialization of variable 'notes_last_beat_note' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_last_beat_note\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpehmwzex8.swift:21:9: warning:\
    \ initialization of variable 'notes_last_beat_note_index' was never used; consider\
    \ replacing wi"
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var current_beat = 0\n    var current_note = \"\"\n    for c in music_string\
    \ {\n        if c == \"o\" {\n            if current_note != \"\" {\n        \
    \        beats.append(current_beat)\n                current_beat = 0\n      \
    \          current_note = \"\"\n            }\n        } else if c == \"|\" {\n\
    \            if current_note != \"\" {\n                beats.append(current_beat)\n\
    \                current_beat = 0\n                current_note = \"\"\n     \
    \       }\n        } else if c == \".\" {\n            if current_note != \"\"\
    \ {\n                beats.append(current_beat)\n                current_beat\
    \ = 0\n                current_note = \"\"\n            }\n        } else {\n\
    \            current_note += String(c)\n        }\n    }\n    if current_note\
    \ != \"\" {\n        beats.append(current_beat)\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp1rc7jwzt/tmp1rc7jwzt.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abffd225c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abffcf1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abffcf1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abffcf1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1rc7jwzt                        0x000055679627481f <unavailable> + 6175

    5    libc.so.6                          0x00002abffd411460 __libc_start_main +
    245

    6    tmp1rc7jwzt                        0x0000556796274359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    for char\
    \ in music_string {\n        if char == \"o\" {\n            notes.append(note)\n\
    \            beats.append(beat)\n            note = \"\"\n            beat = 0\n\
    \        } else if char == \"|\" {\n            notes.append(note)\n         \
    \   beats.append(beat)\n            note = \"\"\n            beat = 0\n      \
    \  } else {\n            note += char\n        }\n    }\n    notes.append(note)\n\
    \    beats.append(beat)\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpk_1wql2y.swift:28:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            note += char\n             \
    \       ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var beats_count = 0\n    var last_beat = 0\n    var last_note = \"\"\n  \
    \  var last_note_index = 0\n    var note = \"\"\n    var note_index = 0\n    for\
    \ char in music_string {\n        if char == \"o\" {\n            if note != \"\
    \" {\n                beats.append(beats_count)\n                beats_count =\
    \ 0\n                note = \"\"\n                note_index = 0\n           \
    \ }\n            last_note = \"o\"\n            last_note_index = 0\n        }\
    \ else if char == \"|\" {\n            if note != \"\" {\n                beats.append(beats_count)\n\
    \                beats_count = 0\n                note = \"\"\n              \
    \  note_index = 0\n            }\n            last_note = \"|\"\n            last_note_index\
    \ = 0\n        } else if char == \".\" {\n            if note != \"\" {\n    \
    \            beats.append(beats_count)\n                beats_count = 0\n    \
    \            note = \"\"\n                note_index = 0\n            }\n    \
    \        last_note = \".\"\n            last_note_index = 0\n        } else {\n\
    \            if note == \"\" {\n                note = String(char)\n        \
    \    } else {\n                note = String(char) + note\n            }\n   \
    \         note_index += 1\n        }\n        if note_index == last_note_index\
    \ {\n            beats_count += 1\n        } else {\n            beats_count =\
    \ 0\n        }\n        last_beat = beats_count\n    }\n    beats.append(beats_count)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp0eqfk6al/tmp0eqfk6al.swift:79: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b344114ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3440e41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3440e41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3440e407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0eqfk6al                        0x0000563fb126e70e <unavailable> + 5902

    5    libc.so.6                          0x00002b3441336460 __libc_start_main +
    245

    6    tmp0eqfk6al                        0x0000563fb126e359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = String()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp5fquglzf.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmp5fquglzf.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp5fquglzf.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp5fquglzf.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp5fquglzf.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp5fquglzf.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp5fquglzf.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp5fquglzf.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp5fquglzf.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp5fquglzf.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp5fquglzf.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp5fquglzf.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp5fquglzf.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp5fquglzf.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp5fquglzf.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp5fquglzf.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array: [Int]\
    \ = []\n    var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_index2\
    \ = 0\n    var current_note_length_index3 = 0\n    var current_note_length_index4\
    \ = 0\n    var current_note_length_index5 = 0\n    var current_note_length_index6\
    \ = 0\n    var current_note_length_index7 = 0\n    var current_note_length_index8\
    \ = 0\n    var current_note_length_index9 = 0\n    var current_note_length_index10\
    \ = 0\n    var current_note_length_index11 = 0\n    var current_note_length_index12\
    \ = 0\n    var current_note_length_index13 = 0\n    var current_note_length_index14\
    \ = 0\n    var current_note_length_index15 = 0\n    var current_note_length_index16\
    \ = 0\n    var current_note_length_index17 = 0\n    var current_note_length_index18\
    \ = 0\n    var current_note_length_index19 = 0\n    var current_note_length_index20\
    \ = 0\n    var current_note_length_index21 = 0\n    var current_note_length_index22\
    \ = 0\n    var current_note_length_index23 = 0\n    var current_note_length_index24\
    \ = 0\n    var current_note_length_index25 = 0\n    var current_note_length_index26\
    \ = 0\n    var current_note_length_index27 = 0\n    var current_note_length_index28\
    \ = 0\n    var current_note_length_index29 = 0\n    var current_note_length_index30\
    \ = 0\n    var current_note_length_index31 = 0\n    var current_note_length_index32\
    \ = 0\n    var current_note_length_index33 = 0\n    var current_note_length_index34\
    \ = 0\n    var current_note_length_index35 = 0\n    var current_note_length_index36\
    \ = 0\n    var current_note_length_index37 = 0\n    var current_note_length_index38\
    \ = 0\n    var current_note_length_index39 = 0\n    var current_note_length_index40\
    \ = 0\n    var current_note_length_index41 = 0\n    var current_note_length_index42\
    \ = 0\n    var current_note_length_index43 = 0\n    var current_note_length_index44\
    \ = 0\n    var current_note_length_index45 = 0\n    var current_note_length_index46\
    \ = 0\n    var current_note_length_index47 = 0\n    var current_note_length_index48\
    \ = 0\n    var current_note_length_index49 = 0\n    var current_note_length_index50\
    \ = 0\n    var current_note_length_index51 = 0\n    var current_note_length_index52\
    \ = 0\n    var current_note_length_index53 = 0\n    var current_note_length_index54\
    \ = 0\n    var current_note_length_index55 = 0\n    var current_note_length_index56\
    \ = 0\n    var current_note_length_index57 = 0\n    var current_note_length_index58\
    \ = 0\n    var current_note_length_index59 = 0\n    var current_note_length_index60\
    \ = 0\n    var current_note_length_index61 = 0\n    var \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp9jnziiax.swift:77:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp9jnziiax.swift:12:9: warning: variable 'beats_array' was never used;\
    \ consider replacing with '_' or removing it\n    var beats_array: [Int] = []\n\
    \        ^~~~~~~~~~~\n        _\n/tmp/tmp9jnziiax.swift:13:9: warning: initialization\
    \ of variable 'current_beat' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var current_beat = 0\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmp9jnziiax.swift:14:9: warning: initialization of variable 'current_note'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var current_note = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp9jnziiax.swift:15:9:\
    \ warning: initialization of variable 'current_note_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var current_note_length\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp9jnziiax.swift:16:9: warning:\
    \ initialization of variable 'current_note_length_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var current_note_length_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp9jnziiax.swift:17:9:\
    \ warning: initialization of variable 'current_note_length_index2' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp9jnziiax.swift:18:9:\
    \ warning: initialization of variable 'current_note_length_index3' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index3\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp9jnziiax.swift:19:9:\
    \ warning: initialization of variable 'current_note_length_index4' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index4\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp9jnziiax.swift:20:9:\
    \ warning: initialization of variable 'current_note_length_index5' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beats_count = 0\n    var note_length = 0\n\
    \    var note_char = \"\"\n    var note_index = 0\n    var note_char_index = 0\n\
    \    var note_char_is_last = false\n    var note_char_last_index = 0\n    var\
    \ note_char_last_is_last = false\n    var note_char_last_beat = 0\n    var note_char_last_beat_index\
    \ = 0\n    var note_char_last_beat_is_last = false\n    var note_char_last_beat_last_index\
    \ = 0\n    var note_char_last_beat_last_is_last = false\n    var note_char_last_beat_last_beat\
    \ = 0\n    var note_char_last_beat_last_beat_index = 0\n    var note_char_last_beat_last_beat_is_last\
    \ = false\n    var note_char_last_beat_last_beat_last_index = 0\n    var note_char_last_beat_last_beat_last_is_last\
    \ = false\n    var note_char_last_beat_last_beat_last_beat = 0\n    var note_char_last_beat_last_beat_last_beat_index\
    \ = 0\n    var note_char_last_beat_last_beat_last_beat_is_last = false\n    var\
    \ note_char_last_beat_last_beat_last_beat_last_index = 0\n    var note_char_last_beat_last_beat_last_beat_last_is_last\
    \ = false\n    var note_char_last_beat_last_beat_last_beat_last_beat = 0\n   \
    \ var note_char_last_beat_last_beat_last_beat_last_beat_index = 0\n    var note_char_last_beat_last_beat_last_beat_last_beat_is_last\
    \ = false\n    var note_char_last_beat_last_beat_last_beat_last_beat_last_index\
    \ = 0\n    var note_char_last_beat_last_beat_last_beat_last_beat_last_is_last\
    \ = false\n    var note_char_last_beat_last_beat_last_beat_last_beat_last_beat\
    \ = 0\n    var note_char_last_beat_last_beat_last_beat_last_beat_last_beat_index\
    \ = 0\n    var note_char_last_beat_last_beat_last_beat_last_beat_last_beat_is_last\
    \ = false\n    var note_char_last_beat_last_beat_last_beat_last_beat_last_beat_last_index\
    \ = 0\n    var note_char_last_beat_last_beat_last_beat_last_beat_last_beat_last_is_last\
    \ = false\n    var note_char_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat\
    \ = 0\n    var note_char_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_index\
    \ = 0\n    var note_char_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_is_last\
    \ = false\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp7t7lvve1.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp7t7lvve1.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp7t7lvve1.swift:14:9:\
    \ warning: initialization of variable 'beats_count' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beats_count = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp7t7lvve1.swift:15:9: warning: initialization of variable 'note_length'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_length = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp7t7lvve1.swift:16:9:\
    \ warning: initialization of variable 'note_char' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_char = \"\"\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmp7t7lvve1.swift:17:9: warning: initialization of variable 'note_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_index = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmp7t7lvve1.swift:18:9:\
    \ warning: initialization of variable 'note_char_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var note_char_index = 0\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmp7t7lvve1.swift:19:9: warning: initialization\
    \ of variable 'note_char_is_last' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_char_is_last = false\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp7t7lvve1.swift:20:9: warning: initialization of variable 'note_char_last_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_char_last_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp7t7lvve1.swift:21:9:\
    \ warning: initialization of variable 'note_char_last_is_last' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var note_char_last_is_last\
    \ = fa"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var note_index = 0\n    var notes_index = 0\n\
    \    var notes_length = 0\n    var notes_length_index = 0\n    var notes_length_index2\
    \ = 0\n    var notes_length_index3 = 0\n    var notes_length_index4 = 0\n    var\
    \ notes_length_index5 = 0\n    var notes_length_index6 = 0\n    var notes_length_index7\
    \ = 0\n    var notes_length_index8 = 0\n    var notes_length_index9 = 0\n    var\
    \ notes_length_index10 = 0\n    var notes_length_index11 = 0\n    var notes_length_index12\
    \ = 0\n    var notes_length_index13 = 0\n    var notes_length_index14 = 0\n  \
    \  var notes_length_index15 = 0\n    var notes_length_index16 = 0\n    var notes_length_index17\
    \ = 0\n    var notes_length_index18 = 0\n    var notes_length_index19 = 0\n  \
    \  var notes_length_index20 = 0\n    var notes_length_index21 = 0\n    var notes_length_index22\
    \ = 0\n    var notes_length_index23 = 0\n    var notes_length_index24 = 0\n  \
    \  var notes_length_index25 = 0\n    var notes_length_index26 = 0\n    var notes_length_index27\
    \ = 0\n    var notes_length_index28 = 0\n    var notes_length_index29 = 0\n  \
    \  var notes_length_index30 = 0\n    var notes_length_index31 = 0\n    var notes_length_index32\
    \ = 0\n    var notes_length_index33 = 0\n    var notes_length_index34 = 0\n  \
    \  var notes_length_index35 = 0\n    var notes_length_index36 = 0\n    var notes_length_index37\
    \ = 0\n    var notes_length_index38 = 0\n    var notes_length_index39 = 0\n  \
    \  var notes_length_index40 = 0\n    var notes_length_index41 = 0\n    var notes_length_index42\
    \ = 0\n    var notes_length_index43 = 0\n    var notes_length_index44 = 0\n  \
    \  var notes_length_index45 = 0\n    var notes_length_index46 = 0\n    var notes_length_index47\
    \ = 0\n    var notes_length_index48 = 0\n    var notes_length_index49 = 0\n  \
    \  var notes_length_index50 = 0\n    var notes_length_index51 = 0\n    var notes_length_index52\
    \ = 0\n    var notes_length_index53 = 0\n    var notes_length_index54 = 0\n  \
    \  var notes_length_index55 = 0\n    var notes_length_index56 = 0\n    var notes_length_index57\
    \ = 0\n    var notes_length_index58 = 0\n    var notes_length_index59 = 0\n  \
    \  var notes_length_index60 = 0\n    var note\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpuhjj6_5q.swift:77:9: error: type annotation missing in pattern\n\
    \    var note\n        ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var beats_so_far = 0\n    var notes_so_far = 0\n    var notes_last_beat =\
    \ 0\n    var notes_last_beat_so_far = 0\n    var notes_last_beat_last_beat = 0\n\
    \    var notes_last_beat_last_beat_so_far = 0\n    var notes_last_beat_last_beat_last_beat\
    \ = 0\n    var notes_last_beat_last_beat_last_beat_so_far = 0\n    var notes_last_beat_last_beat_last_beat_last_beat\
    \ = 0\n    var notes_last_beat_last_beat_last_beat_last_beat_so_far = 0\n    var\
    \ notes_last_beat_last_beat_last_beat_last_beat_last_beat = 0\n    var notes_last_beat_last_beat_last_beat_last_beat_last_beat_so_far\
    \ = 0\n    var notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat\
    \ = 0\n    var notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_so_far\
    \ = 0\n    var notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat\
    \ = 0\n    var notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_so_far\
    \ = 0\n    var notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat\
    \ = 0\n    var notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_so_far\
    \ = 0\n    var notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat\
    \ = 0\n    var notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_so_far\
    \ = 0\n    var notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat\
    \ = 0\n    var notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_so_far\
    \ = 0\n    var notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmphbj4d6t_.swift:12:9: warning: variable 'beats' was never used;\
    \ consider replacing with '_' or removing it\n    var beats: [Int] = []\n    \
    \    ^~~~~\n        _\n/tmp/tmphbj4d6t_.swift:13:9: warning: initialization of\
    \ variable 'beats_so_far' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var beats_so_far = 0\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmphbj4d6t_.swift:14:9: warning: initialization of variable 'notes_so_far'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_so_far = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmphbj4d6t_.swift:15:9:\
    \ warning: initialization of variable 'notes_last_beat' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_last_beat = 0\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmphbj4d6t_.swift:16:9: warning: initialization\
    \ of variable 'notes_last_beat_so_far' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var notes_last_beat_so_far = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmphbj4d6t_.swift:17:9: warning: initialization of variable 'notes_last_beat_last_beat'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_last_beat_last_beat = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n   \
    \ _\n/tmp/tmphbj4d6t_.swift:18:9: warning: initialization of variable 'notes_last_beat_last_beat_so_far'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_last_beat_last_beat_so_far = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmphbj4d6t_.swift:19:9: warning: initialization of variable 'notes_last_beat_last_beat_last_beat'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_last_beat_last_beat_last_beat = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmphbj4d6t_.swift:20:9: warning: initialization of variable 'notes_last_beat_last_beat_last_beat_so_far'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_last_beat_last_beat_last_beat_so_far = 0\n    "
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = 0\n    var last =\
    \ 0\n    var last2 = 0\n    var last4 = 0\n    var last8 = 0\n    var last16 =\
    \ 0\n    var last32 = 0\n    var last64 = 0\n    var last128 = 0\n    var last256\
    \ = 0\n    var last512 = 0\n    var last1024 = 0\n    var last2048 = 0\n    var\
    \ last4096 = 0\n    var last8192 = 0\n    var last16384 = 0\n    var last32768\
    \ = 0\n    var last65536 = 0\n    var last131072 = 0\n    var last262144 = 0\n\
    \    var last524288 = 0\n    var last1048576 = 0\n    var last2097152 = 0\n  \
    \  var last4194304 = 0\n    var last8388608 = 0\n    var last16777216 = 0\n  \
    \  var last33554432 = 0\n    var last67108864 = 0\n    var last134217728 = 0\n\
    \    var last268435456 = 0\n    var last536870912 = 0\n    var last1073741824\
    \ = 0\n    var last2147483648 = 0\n    var last4294967296 = 0\n    var last8589934592\
    \ = 0\n    var last17179869184 = 0\n    var last34359738368 = 0\n    var last68719476736\
    \ = 0\n    var last137438953472 = 0\n    var last274877906944 = 0\n    var last549755813888\
    \ = 0\n    var last1099511627776 = 0\n    var last2199023255552 = 0\n    var last4398046511104\
    \ = 0\n    var last8796093022208 = 0\n    var last17592186044416 = 0\n    var\
    \ last35184372088832 = 0\n    var last70368744177664 = 0\n    var last140737488355328\
    \ = 0\n    var last281474976710656 = 0\n    var last562949953421312 = 0\n    var\
    \ last1125899906842624 = 0\n    var last2251799813685248 = 0\n    var last4503599627370496\
    \ = 0\n    var last9007199254740992 = 0\n    var last18014398509481984 = 0\n \
    \   var last36028797018963968 = 0\n    var last72057594037927936 = 0\n    var\
    \ last144115188075855872 = 0\n    var last288230376151711744 = 0\n    var last576460752303423488\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_vzwamo7.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp_vzwamo7.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp_vzwamo7.swift:14:9:\
    \ warning: initialization of variable 'beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmp_vzwamo7.swift:15:9: warning: initialization of variable 'note' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var note\
    \ = 0\n    ~~~~^~~~\n    _\n/tmp/tmp_vzwamo7.swift:16:9: warning: initialization\
    \ of variable 'last' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var last = 0\n    ~~~~^~~~\n    _\n/tmp/tmp_vzwamo7.swift:17:9:\
    \ warning: initialization of variable 'last2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var last2 = 0\n    ~~~~^~~~~\n  \
    \  _\n/tmp/tmp_vzwamo7.swift:18:9: warning: initialization of variable 'last4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last4 = 0\n    ~~~~^~~~~\n    _\n/tmp/tmp_vzwamo7.swift:19:9: warning:\
    \ initialization of variable 'last8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var last8 = 0\n    ~~~~^~~~~\n    _\n/tmp/tmp_vzwamo7.swift:20:9:\
    \ warning: initialization of variable 'last16' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var last16 = 0\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmp_vzwamo7.swift:21:9: warning: initialization of variable 'last32'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last32 = 0\n    ~~~~^~~~~~\n    _\n/tmp/tmp_vzwamo7.swift:22:9: warning:\
    \ initialization of variable 'last64' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var last64 = 0\n    ~~~~^~~~~~\n    _\n\
    /tmp/tmp_"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = String()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp5fquglzf.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmp5fquglzf.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp5fquglzf.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp5fquglzf.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp5fquglzf.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp5fquglzf.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp5fquglzf.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp5fquglzf.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp5fquglzf.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp5fquglzf.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp5fquglzf.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp5fquglzf.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp5fquglzf.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp5fquglzf.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp5fquglzf.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp5fquglzf.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var last = 0\n    var last_beat = 0\n\
    \    var last_note = 0\n    var last_last = 0\n    var last_last_beat = 0\n  \
    \  var last_last_note = 0\n    var last_last_last = 0\n    var last_last_last_beat\
    \ = 0\n    var last_last_last_note = 0\n    var last_last_last_last = 0\n    var\
    \ last_last_last_last_beat = 0\n    var last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last = 0\n    var last_last_last_last_last = 0\n    var\
    \ last_last_last_last_last_beat = 0\n    var last_last_last_last_last_note = 0\n\
    \    var last_last_last_last_last_last = 0\n    var last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last = 0\n    var last_last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last = 0\n    var last_last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_last_last = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_last_last_last = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_last_last_last = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_last_last_last = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_last_last_last = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_last_last_last = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_last_last_last = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpa9tw9qo0.swift:28:9: error: invalid redeclaration of 'last_last_last_last_last'\n\
    \    var last_last_last_last_last = 0\n        ^\n/tmp/tmpa9tw9qo0.swift:27:9:\
    \ note: 'last_last_last_last_last' previously declared here\n    var last_last_last_last_last\
    \ = 0\n        ^\n/tmp/tmpa9tw9qo0.swift:32:9: error: invalid redeclaration of\
    \ 'last_last_last_last_last_last'\n    var last_last_last_last_last_last = 0\n\
    \        ^\n/tmp/tmpa9tw9qo0.swift:31:9: note: 'last_last_last_last_last_last'\
    \ previously declared here\n    var last_last_last_last_last_last = 0\n      \
    \  ^\n/tmp/tmpa9tw9qo0.swift:36:9: error: invalid redeclaration of 'last_last_last_last_last_last_last'\n\
    \    var last_last_last_last_last_last_last = 0\n        ^\n/tmp/tmpa9tw9qo0.swift:35:9:\
    \ note: 'last_last_last_last_last_last_last' previously declared here\n    var\
    \ last_last_last_last_last_last_last = 0\n        ^\n/tmp/tmpa9tw9qo0.swift:37:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_beat'\n    var\
    \ last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpa9tw9qo0.swift:33:9:\
    \ note: 'last_last_last_last_last_last_beat' previously declared here\n    var\
    \ last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpa9tw9qo0.swift:38:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_note'\n    var\
    \ last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpa9tw9qo0.swift:34:9:\
    \ note: 'last_last_last_last_last_last_note' previously declared here\n    var\
    \ last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpa9tw9qo0.swift:39:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last'\n    var\
    \ last_last_last_last_last_last_last = 0\n        ^\n/tmp/tmpa9tw9qo0.swift:35:9:\
    \ note: 'last_last_last_last_last_last_last' previously declared here\n    var\
    \ last_last_last_last_last_last_last = 0\n        ^\n/tmp/tmpa9tw9qo0.swift:40:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last'\n    var\
    \ last_last_last_last_last_last_last = 0\n        ^\n/tmp/tmpa9tw9qo0.swift:35:9:\
    \ note: 'last_last_last_last_last_last_last' previously declared here\n  "
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = \"\"\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_index2\
    \ = 0\n    var current_note_length_index3 = 0\n    var current_note_length_index4\
    \ = 0\n    var current_note_length_index5 = 0\n    var current_note_length_index6\
    \ = 0\n    var current_note_length_index7 = 0\n    var current_note_length_index8\
    \ = 0\n    var current_note_length_index9 = 0\n    var current_note_length_index10\
    \ = 0\n    var current_note_length_index11 = 0\n    var current_note_length_index12\
    \ = 0\n    var current_note_length_index13 = 0\n    var current_note_length_index14\
    \ = 0\n    var current_note_length_index15 = 0\n    var current_note_length_index16\
    \ = 0\n    var current_note_length_index17 = 0\n    var current_note_length_index18\
    \ = 0\n    var current_note_length_index19 = 0\n    var current_note_length_index20\
    \ = 0\n    var current_note_length_index21 = 0\n    var current_note_length_index22\
    \ = 0\n    var current_note_length_index23 = 0\n    var current_note_length_index24\
    \ = 0\n    var current_note_length_index25 = 0\n    var current_note_length_index26\
    \ = 0\n    var current_note_length_index27 = 0\n    var current_note_length_index28\
    \ = 0\n    var current_note_length_index29 = 0\n    var current_note_length_index30\
    \ = 0\n    var current_note_length_index31 = 0\n    var current_note_length_index32\
    \ = 0\n    var current_note_length_index33 = 0\n    var current_note_length_index34\
    \ = 0\n    var current_note_length_index35 = 0\n    var current_note_length_index36\
    \ = 0\n    var current_note_length_index37 = 0\n    var current_note_length_index38\
    \ = 0\n    var current_note_length_index39 = 0\n    var current_note_length_index40\
    \ = 0\n    var current_note_length_index41 = 0\n    var current_note_length_index42\
    \ = 0\n    var current_note_length_index43 = 0\n    var current_note_length_index44\
    \ = 0\n    var current_note_length_index45 = 0\n    var current_note_length_index46\
    \ = 0\n    var current_note_length_index47 = 0\n    var current_note_length_index48\
    \ = 0\n    var current_note_length_index49 = 0\n    var current_note_length_index50\
    \ = 0\n    var current_note_length_index51 = 0\n    var current_note_length_index52\
    \ = 0\n    var current_note_length_index53 = 0\n    var current_note_length_index54\
    \ = 0\n    var current_note_length_index55 = 0\n    var current_note_length_index56\
    \ = 0\n    var current_note_length_index57 = 0\n    var current_note_length_index58\
    \ = 0\n    var current_note_length_index59 = 0\n    var current_note_length_index60\
    \ = 0\n    var current_note_length_index61 = 0\n    var current_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpc2rtg4ln.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var i = 0\n    for c in music_string {\n        if c == 'o' {\n   \
    \         if note != \"\" {\n                notes.append(note)\n            \
    \    beats.append(beat)\n                beat = 0\n                note = \"\"\
    \n            }\n            last = 0\n        } else if c == '|' {\n        \
    \    if note != \"\" {\n                notes.append(note)\n                beats.append(beat)\n\
    \                beat = 0\n                note = \"\"\n            }\n      \
    \      last = 1\n        } else if c == '.' {\n            if note != \"\" {\n\
    \                notes.append(note)\n                beats.append(beat)\n    \
    \            beat = 0\n                note = \"\"\n            }\n          \
    \  last = 0\n        } else {\n            note = String(last) + String(c)\n \
    \       }\n        i += 1\n    }\n    notes.append(note)\n    beats.append(beat)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8n3xanjf.swift:19:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmp8n3xanjf.swift:27:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmp8n3xanjf.swift:35:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.' {\n                       ^~~\n\
    \                       \".\"\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var notes = [String]()\n    var note_index\
    \ = 0\n    var note_length = 0\n    var note_length_index = 0\n    var note_length_string\
    \ = \"\"\n    var note_length_index = 0\n    var note_length_string = \"\"\n \
    \   var note_length_index = 0\n    var note_length_string = \"\"\n    var note_length_index\
    \ = 0\n    var note_length_string = \"\"\n    var note_length_index = 0\n    var\
    \ note_length_string = \"\"\n    var note_length_index = 0\n    var note_length_string\
    \ = \"\"\n    var note_length_index = 0\n    var note_length_string = \"\"\n \
    \   var note_length_index = 0\n    var note_length_string = \"\"\n    var note_length_index\
    \ = 0\n    var note_length_string = \"\"\n    var note_length_index = 0\n    var\
    \ note_length_string = \"\"\n    var note_length_index = 0\n    var note_length_string\
    \ = \"\"\n    var note_length_index = 0\n    var note_length_string = \"\"\n \
    \   var note_length_index = 0\n    var note_length_string = \"\"\n    var note_length_index\
    \ = 0\n    var note_length_string = \"\"\n    var note_length_index = 0\n    var\
    \ note_length_string = \"\"\n    var note_length_index = 0\n    var note_length_string\
    \ = \"\"\n    var note_length_index = 0\n    var note_length_string = \"\"\n \
    \   var note_length_index = 0\n    var note_length_string = \"\"\n    var note_length_index\
    \ = 0\n    var note_length_string = \"\"\n    var note_length_index = 0\n    var\
    \ note_length_string = \"\"\n    var note_length_index = 0\n    var note_length_string\
    \ = \"\"\n    var note_length_index = 0\n    var note_length_string = \"\"\n \
    \   var note_length_index = 0\n    var note_length_string = \"\"\n    var note_length_index\
    \ = 0\n    var note_length_string = \"\"\n    var note_length_index = 0\n    var\
    \ note_length_string = \"\"\n    var note_length_index = 0\n    var note_length_string\
    \ = \"\"\n    var note_length_index = 0\n    var note_length_string = \"\"\n \
    \   var note_length_index = 0\n    var note_length_string = \"\"\n    var note_length_index\
    \ = 0\n    var note_length_string = \"\"\n    var note_length_index = 0\n    var\
    \ note_length_string = \"\"\n    var note_length_index = 0\n    var note_length_string\
    \ = \"\"\n    var note_length_index = 0\n    var note_length_string = \"\"\n \
    \   var note_length_index = 0\n    var note_length_string = \"\"\n    var note_length_index\
    \ = 0\n    var note_length_string = \"\"\n    var note_length_index = 0\n    var\
    \ note_length_string = \"\"\n    var note_length_index = 0\n    var note_length_string\
    \ = \"\"\n    var note_length_index = 0\n    var note_length_string = \"\"\n \
    \   var note_length_index = 0\n    var note_length_string = \"\"\n    var note_length_index\
    \ = 0\n    var note_length_string = \"\"\n    var note_length_index = 0\n    var\
    \ note_length_string = \"\"\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpomn3s8x6.swift:20:9: error: invalid redeclaration of 'note_length_index'\n\
    \    var note_length_index = 0\n        ^\n/tmp/tmpomn3s8x6.swift:18:9: note:\
    \ 'note_length_index' previously declared here\n    var note_length_index = 0\n\
    \        ^\n/tmp/tmpomn3s8x6.swift:21:9: error: invalid redeclaration of 'note_length_string'\n\
    \    var note_length_string = \"\"\n        ^\n/tmp/tmpomn3s8x6.swift:19:9: note:\
    \ 'note_length_string' previously declared here\n    var note_length_string =\
    \ \"\"\n        ^\n/tmp/tmpomn3s8x6.swift:22:9: error: invalid redeclaration of\
    \ 'note_length_index'\n    var note_length_index = 0\n        ^\n/tmp/tmpomn3s8x6.swift:18:9:\
    \ note: 'note_length_index' previously declared here\n    var note_length_index\
    \ = 0\n        ^\n/tmp/tmpomn3s8x6.swift:23:9: error: invalid redeclaration of\
    \ 'note_length_string'\n    var note_length_string = \"\"\n        ^\n/tmp/tmpomn3s8x6.swift:19:9:\
    \ note: 'note_length_string' previously declared here\n    var note_length_string\
    \ = \"\"\n        ^\n/tmp/tmpomn3s8x6.swift:24:9: error: invalid redeclaration\
    \ of 'note_length_index'\n    var note_length_index = 0\n        ^\n/tmp/tmpomn3s8x6.swift:18:9:\
    \ note: 'note_length_index' previously declared here\n    var note_length_index\
    \ = 0\n        ^\n/tmp/tmpomn3s8x6.swift:25:9: error: invalid redeclaration of\
    \ 'note_length_string'\n    var note_length_string = \"\"\n        ^\n/tmp/tmpomn3s8x6.swift:19:9:\
    \ note: 'note_length_string' previously declared here\n    var note_length_string\
    \ = \"\"\n        ^\n/tmp/tmpomn3s8x6.swift:26:9: error: invalid redeclaration\
    \ of 'note_length_index'\n    var note_length_index = 0\n        ^\n/tmp/tmpomn3s8x6.swift:18:9:\
    \ note: 'note_length_index' previously declared here\n    var note_length_index\
    \ = 0\n        ^\n/tmp/tmpomn3s8x6.swift:27:9: error: invalid redeclaration of\
    \ 'note_length_string'\n    var note_length_string = \"\"\n        ^\n/tmp/tmpomn3s8x6.swift:19:9:\
    \ note: 'note_length_string' previously declared here\n    var note_length_string\
    \ = \"\"\n        ^\n/tmp/tmpomn3s8x6.swift:28:9: error: invalid redeclaration\
    \ of 'note_length_index'\n    var note_le"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beats_count = 0\n    var note_length = 0\n\
    \    var note_index = 0\n    var note = \"\"\n\n    for char in music_string {\n\
    \        if char == \"o\" {\n            beats_count += 1\n            beats.append(beats_count)\n\
    \            beats_count = 0\n            notes.append(note)\n            note\
    \ = \"\"\n            note_index = 0\n        } else if char == \"|\" {\n    \
    \        beats_count += 1\n            beats.append(beats_count)\n           \
    \ beats_count = 0\n            notes.append(note)\n            note = \"\"\n \
    \           note_index = 0\n        } else if char == \".\" {\n            beats_count\
    \ += 1\n            beats.append(beats_count)\n            beats_count = 0\n \
    \           notes.append(note)\n            note = \"\"\n            note_index\
    \ = 0\n        } else {\n            note += char\n            note_index += 1\n\
    \        }\n    }\n\n    beats.append(beats_count)\n    return beats\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8oqu7up8.swift:42:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            note += char\n             \
    \       ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var note_index\
    \ = 0\n    for c in music_string {\n        if c == \"o\" {\n            notes.append(note)\n\
    \            note = \"\"\n            note_index = 0\n            beat = 0\n \
    \       } else if c == \"|\" {\n            note_index += 1\n            beat\
    \ = 0\n        } else if c == \".\" {\n            note_index += 1\n         \
    \   beat = 0\n        } else {\n            note += String(c)\n            beat\
    \ += 1\n        }\n    }\n    notes.append(note)\n    for note in notes {\n  \
    \      beats.append(beats[note_index])\n    }\n    return beats\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b48e56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b48b4d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9b48b4d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9b48b4d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9b48b4cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9b4894ce83 <unavailable> + 188035

    6    tmp9w2sudvz                        0x00005563c7c983ec <unavailable> + 9196

    7    tmp9w2sudvz                        0x00005563c7c978b5 <unavailable> + 6325

    8    libc.so.6                          0x00002b9b49042460 __libc_start_main +
    245

    9    tmp9w2sudvz                        0x00005563c7c975b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last_note\
    \ = \"\"\n    var last_beat = 0\n    var last_beats = 0\n    var last_beats_count\
    \ = 0\n    var last_beats_count_count = 0\n    var last_beats_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count = 0\n    var last_beats_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count = 0\n    var last_beats_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count = 0\n\
    \    var last_beats_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpnvdh_9dv.swift:39:9: error: type annotation missing in pattern\n\
    \    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var last2 = false\n    var last3 = false\n    var last4 = false\n \
    \   var last5 = false\n    var last6 = false\n    var last7 = false\n    var last8\
    \ = false\n    var last9 = false\n    var last10 = false\n    var last11 = false\n\
    \    var last12 = false\n    var last13 = false\n    var last14 = false\n    var\
    \ last15 = false\n    var last16 = false\n    var last17 = false\n    var last18\
    \ = false\n    var last19 = false\n    var last20 = false\n    var last21 = false\n\
    \    var last22 = false\n    var last23 = false\n    var last24 = false\n    var\
    \ last25 = false\n    var last26 = false\n    var last27 = false\n    var last28\
    \ = false\n    var last29 = false\n    var last30 = false\n    var last31 = false\n\
    \    var last32 = false\n    var last33 = false\n    var last34 = false\n    var\
    \ last35 = false\n    var last36 = false\n    var last37 = false\n    var last38\
    \ = false\n    var last39 = false\n    var last40 = false\n    var last41 = false\n\
    \    var last42 = false\n    var last43 = false\n    var last44 = false\n    var\
    \ last45 = false\n    var last46 = false\n    var last47 = false\n    var last48\
    \ = false\n    var last49 = false\n    var last50 = false\n    var last51 = false\n\
    \    var last52 = false\n    var last53 = false\n    var last54 = false\n    var\
    \ last55 = false\n    var last56 = false\n    var last57 = false\n    var last58\
    \ = false\n    var last59 = false\n    var last60 = false\n    var last61 = false\n\
    \    var last62 = false\n    var last63 = false\n    var last64 = false\n    var\
    \ last65 = false\n    var last66 = false\n    var last67 = false\n    var last68\
    \ = false\n    var last69 = false\n    var last70 = false\n    var last71 = false\n\
    \    var last72 = false\n    var last73 = false\n    var last74 = false\n    var\
    \ last75 = false\n    var last76 = false\n    var last77 = false\n    var last78\
    \ = false\n    var last79 = false\n    var last80 = false\n    var last81 = false\n\
    \    var last82 = false\n    var last83 = false\n    var last84 = false\n    var\
    \ last85 = false\n    var last86 = false\n    var last87 = false\n    var last88\
    \ = false\n    var last89 = false\n    var last90 = false\n    var last91 = false\n\
    \    var last92 = false\n    var last93 = false\n    var last\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpm9ii32i4.swift:109:9: error: type annotation missing in pattern\n\
    \    var last\n        ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_type = String()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8ok8w3ub.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmp8ok8w3ub.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp8ok8w3ub.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp8ok8w3ub.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp8ok8w3ub.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp8ok8w3ub.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp8ok8w3ub.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp8ok8w3ub.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp8ok8w3ub.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp8ok8w3ub.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp8ok8w3ub.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp8ok8w3ub.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp8ok8w3ub.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp8ok8w3ub.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp8ok8w3ub.swift:24:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp8ok8w3ub.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var note_count = 0\n    var note_char = \"\"\n  \
    \  var note = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n  \
    \  var last_note_char = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note_index = 0\n    var last_note_char = \"\"\n    var\
    \ last_note_index = 0\n    var last_note_char = \"\"\n    var last_note_index\
    \ = 0\n    var last_note_char = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note_index = 0\n    var last_note_char = \"\"\n    var\
    \ last_note_index = 0\n    var last_note_char = \"\"\n    var last_note_index\
    \ = 0\n    var last_note_char = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note_index = 0\n    var last_note_char = \"\"\n    var\
    \ last_note_index = 0\n    var last_note_char = \"\"\n    var last_note_index\
    \ = 0\n    var last_note_char = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note_index = 0\n    var last_note_char = \"\"\n    var\
    \ last_note_index = 0\n    var last_note_char = \"\"\n    var last_note_index\
    \ = 0\n    var last_note_char = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note_index = 0\n    var last_note_char = \"\"\n    var\
    \ last_note_index = 0\n    var last_note_char = \"\"\n    var last_note_index\
    \ = 0\n    var last_note_char = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note_index = 0\n    var last_note_char = \"\"\n    var\
    \ last_note_index = 0\n    var last_note_char = \"\"\n    var last_note_index\
    \ = 0\n    var last_note_char = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note_index = 0\n    var last_note_char = \"\"\n    var\
    \ last_note_index = 0\n    var last_note_char = \"\"\n    var last_note_index\
    \ = 0\n    var last_note_char = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note_index = 0\n    var last_note_char = \"\"\n    var\
    \ last_note_index = 0\n    var last_note_char = \"\"\n    var last_note_index\
    \ = 0\n    var last_note_char = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note_index = 0\n    var last_note_char = \"\"\n    var\
    \ last_note_index = 0\n    var last_note_char = \"\"\n    var last_note_index\
    \ = 0\n    var last_note_char = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note_index = 0\n    var last_note_char = \"\"\n    var\
    \ last_note_index = 0\n    var last_note_char = \"\"\n    var \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpqnqiletb.swift:98:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpqnqiletb.swift:20:9: error: invalid redeclaration of 'last_note_index'\n\
    \    var last_note_index = 0\n        ^\n/tmp/tmpqnqiletb.swift:18:9: note: 'last_note_index'\
    \ previously declared here\n    var last_note_index = 0\n        ^\n/tmp/tmpqnqiletb.swift:21:9:\
    \ error: invalid redeclaration of 'last_note_char'\n    var last_note_char = \"\
    \"\n        ^\n/tmp/tmpqnqiletb.swift:19:9: note: 'last_note_char' previously\
    \ declared here\n    var last_note_char = \"\"\n        ^\n/tmp/tmpqnqiletb.swift:22:9:\
    \ error: invalid redeclaration of 'last_note_index'\n    var last_note_index =\
    \ 0\n        ^\n/tmp/tmpqnqiletb.swift:18:9: note: 'last_note_index' previously\
    \ declared here\n    var last_note_index = 0\n        ^\n/tmp/tmpqnqiletb.swift:23:9:\
    \ error: invalid redeclaration of 'last_note_char'\n    var last_note_char = \"\
    \"\n        ^\n/tmp/tmpqnqiletb.swift:19:9: note: 'last_note_char' previously\
    \ declared here\n    var last_note_char = \"\"\n        ^\n/tmp/tmpqnqiletb.swift:24:9:\
    \ error: invalid redeclaration of 'last_note_index'\n    var last_note_index =\
    \ 0\n        ^\n/tmp/tmpqnqiletb.swift:18:9: note: 'last_note_index' previously\
    \ declared here\n    var last_note_index = 0\n        ^\n/tmp/tmpqnqiletb.swift:25:9:\
    \ error: invalid redeclaration of 'last_note_char'\n    var last_note_char = \"\
    \"\n        ^\n/tmp/tmpqnqiletb.swift:19:9: note: 'last_note_char' previously\
    \ declared here\n    var last_note_char = \"\"\n        ^\n/tmp/tmpqnqiletb.swift:26:9:\
    \ error: invalid redeclaration of 'last_note_index'\n    var last_note_index =\
    \ 0\n        ^\n/tmp/tmpqnqiletb.swift:18:9: note: 'last_note_index' previously\
    \ declared here\n    var last_note_index = 0\n        ^\n/tmp/tmpqnqiletb.swift:27:9:\
    \ error: invalid redeclaration of 'last_note_char'\n    var last_note_char = \"\
    \"\n        ^\n/tmp/tmpqnqiletb.swift:19:9: note: 'last_note_char' previously\
    \ declared here\n    var last_note_char = \"\"\n        ^\n/tmp/tmpqnqiletb.swift:28:9:\
    \ error: invalid redeclaration of 'last_note_index'\n    var last_note_index =\
    \ 0\n        ^\n/tmp"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    for c in music_string {\n        if c == '.' {\n            notes.append(note)\n\
    \            note = \"\"\n            beat = 0\n            last = 0\n       \
    \ } else if c == 'o' {\n            notes.append(note)\n            note = \"\"\
    \n            beat = 0\n            last = 0\n        } else if c == '|' {\n \
    \           notes.append(note)\n            note = \"\"\n            beat = 0\n\
    \            last = 1\n        } else {\n            if last == 0 {\n        \
    \        beat += 1\n            } else {\n                beat = 0\n         \
    \   }\n            note += String(c)\n        }\n    }\n    notes.append(note)\n\
    \    for note in notes {\n        beats.append(notes.indexOf(note) + 1)\n    }\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpf_r_zbwv.swift:18:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '.' {\n                ^~~\n                \".\"\n\
    /tmp/tmpf_r_zbwv.swift:23:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == 'o' {\n                       ^~~\n                \
    \       \"o\"\n/tmp/tmpf_r_zbwv.swift:28:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '|' {\n                       ^~~\n\
    \                       \"|\"\n/tmp/tmpf_r_zbwv.swift:44:28: error: value of type\
    \ '[String]' has no member 'indexOf'\n        beats.append(notes.indexOf(note)\
    \ + 1)\n                     ~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_beats = [String]()\n    var beats_notes\
    \ = [String]()\n    var beats_notes_beats = [String]()\n    var beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats = [String]()\n    var beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats = [String]()\n\
    \    var beats_notes_beats_notes_beats_notes_beats_notes = [String]()\n    var\
    \ beats_notes_beats_notes_beats_notes_beats_notes_beats = [String]()\n    var\
    \ beats_notes_beats_notes_beats_notes_beats_notes_beats_notes = [String]()\n \
    \   var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes = [String]()\n\
    \    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats = [String]()\n\
    \    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beat\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp7v4raguz.swift:24:9: error: invalid redeclaration of 'beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\n\
    \    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes = [String]()\n\
    \        ^\n/tmp/tmp7v4raguz.swift:23:9: note: 'beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\
    \ previously declared here\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n        ^\n/tmp/tmp7v4raguz.swift:29:9: error: invalid redeclaration\
    \ of 'beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\n\
    \    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n        ^\n/tmp/tmp7v4raguz.swift:28:9: note: 'beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\
    \ previously declared here\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n        ^\n/tmp/tmp7v4raguz.swift:34:9: error: type annotation\
    \ missing in pattern\n    var beats_notes_beat\n        ^\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var beats_count = 0\n    var note_count = 0\n    var note = String()\n  \
    \  var note_index = 0\n    var note_length = music_string.characters.count\n \
    \   var note_length_index = 0\n    var note_length = music_string.characters.count\n\
    \    var note_length = music_string.characters.count\n    var note_length = music_string.characters.count\n\
    \    var note_length = music_string.characters.count\n    var note_length = music_string.characters.count\n\
    \    var note_length = music_string.characters.count\n    var note_length = music_string.characters.count\n\
    \    var note_length = music_string.characters.count\n    var note_length = music_string.characters.count\n\
    \    var note_length = music_string.characters.count\n    var note_length = music_string.characters.count\n\
    \    var note_length = music_string.characters.count\n    var note_length = music_string.characters.count\n\
    \    var note_length = music_string.characters.count\n    var note_length = music_string.characters.count\n\
    \    var note_length = music_string.characters.count\n    var note_length = music_string.characters.count\n\
    \    var note_length = music_string.characters.count\n    var note_length = music_string.characters.count\n\
    \    var note_length = music_string.characters.count\n    var note_length = music_string.characters.count\n\
    \    var note_length = music_string.characters.count\n    var note_length = music_string.characters.count\n\
    \    var note_length = music_string.characters.count\n    var note_length = music_string.characters.count\n\
    \    var note_length = music_string.characters.count\n    var note_length = music_string.characters.count\n\
    \    var note_length = music_string.characters.count\n    var note_length = music_string.characters.count\n\
    \    var note_length = music_string.characters.count\n    var note_length = music_string.characters.count\n\
    \    var note_length = music_string.characters.count\n    var note_length = music_string.characters.count\n\
    \    var note_length = music_string.characters.count\n    var note_length = music_string.characters.count\n\
    \    var note_length = music_string.characters.count\n    var note_length = music_string.characters.count\n\
    \    var note_length = music_string.characters.count\n    var note_length = music_string.characters.count\n\
    \    var note_length = music_string.characters.count\n    var note_length = music_string.characters.count\n\
    \    var note_length = music_string.characters.count\n    var note_length = music_string.characters.count\n\
    \    var note_length = music_string.characters.count\n    var note_length = music_string.characters.count\n\
    \    var note_length = music_string.characters.count\n    var note_length = music_string.characters.count\n\
    \    var note_length = music_string.characters.count\n    var note_length = music_string.characters.count\n\
    \    var note_length = music_string.characters.count\n    var note_length = music_string.characters.count\n\
    \    var note_length = music_string.characters.count\n    var note_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpnrk2k17n.swift:17:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var note_length = music_string.characters.count\n \
    \                                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpnrk2k17n.swift:19:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var note_length = music_string.characters.count\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpnrk2k17n.swift:19:9: error: invalid redeclaration of\
    \ 'note_length'\n    var note_length = music_string.characters.count\n       \
    \ ^\n/tmp/tmpnrk2k17n.swift:17:9: note: 'note_length' previously declared here\n\
    \    var note_length = music_string.characters.count\n        ^\n/tmp/tmpnrk2k17n.swift:20:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var note_length\
    \ = music_string.characters.count\n                                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpnrk2k17n.swift:20:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = music_string.characters.count\n\
    \        ^\n/tmp/tmpnrk2k17n.swift:17:9: note: 'note_length' previously declared\
    \ here\n    var note_length = music_string.characters.count\n        ^\n/tmp/tmpnrk2k17n.swift:21:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var note_length\
    \ = music_string.characters.count\n                                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpnrk2k17n.swift:21:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = music_string.characters.count\n\
    \        ^\n/tmp/tmpnrk2k17n.swift:17:9: note: 'note_length' previously declared\
    \ here\n    var note_le"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var beats_counter: Int = 0\n    var notes: [String] = []\n    var notes_counter:\
    \ Int = 0\n    var notes_length: Int = 0\n    var notes_length2: Int = 0\n   \
    \ var notes_length3: Int = 0\n    var notes_length4: Int = 0\n    var notes_length5:\
    \ Int = 0\n    var notes_length6: Int = 0\n    var notes_length7: Int = 0\n  \
    \  var notes_length8: Int = 0\n    var notes_length9: Int = 0\n    var notes_length10:\
    \ Int = 0\n    var notes_length11: Int = 0\n    var notes_length12: Int = 0\n\
    \    var notes_length13: Int = 0\n    var notes_length14: Int = 0\n    var notes_length15:\
    \ Int = 0\n    var notes_length16: Int = 0\n    var notes_length17: Int = 0\n\
    \    var notes_length18: Int = 0\n    var notes_length19: Int = 0\n    var notes_length20:\
    \ Int = 0\n    var notes_length21: Int = 0\n    var notes_length22: Int = 0\n\
    \    var notes_length23: Int = 0\n    var notes_length24: Int = 0\n    var notes_length25:\
    \ Int = 0\n    var notes_length26: Int = 0\n    var notes_length27: Int = 0\n\
    \    var notes_length28: Int = 0\n    var notes_length29: Int = 0\n    var notes_length30:\
    \ Int = 0\n    var notes_length31: Int = 0\n    var notes_length32: Int = 0\n\
    \    var notes_length33: Int = 0\n    var notes_length34: Int = 0\n    var notes_length35:\
    \ Int = 0\n    var notes_length36: Int = 0\n    var notes_length37: Int = 0\n\
    \    var notes_length38: Int = 0\n    var notes_length39: Int = 0\n    var notes_length40:\
    \ Int = 0\n    var notes_length41: Int = 0\n    var notes_length42: Int = 0\n\
    \    var notes_length43: Int = 0\n    var notes_length44: Int = 0\n    var notes_length45:\
    \ Int = 0\n    var notes_length46: Int = 0\n    var notes_length47: Int = 0\n\
    \    var notes_length48: Int = 0\n    var notes_length49: Int = 0\n    var notes_length50:\
    \ Int = 0\n    var notes_length51: Int = 0\n    var notes_length52: Int = 0\n\
    \    var notes_length53: Int = 0\n    var notes_length54: Int = 0\n    var notes_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmptujhdu6d.swift:70:9: error: type annotation missing in pattern\n\
    \    var notes_\n        ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_string\
    \ = \"\"\n    var current_note_length_string_index = 0\n    var current_note_length_string_value\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_index = 0\n    var current_note_length_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string = \"\"\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppzpchrsx.swift:26:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_index = 0\n        ^\n\
    /tmp/tmppzpchrsx.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:31:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp3cq2ghe7.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp3cq2ghe7.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_value\
    \ = 0\n    var current_note_length_value_next = 0\n    var current_note_length_value_next_next\
    \ = 0\n    var current_note_length_value_next_next_next = 0\n    var current_note_length_value_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next = 0\n    var\
    \ current_note_length_value_next_next_next_next_next_next = 0\n    var current_note_length_value_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpvc0wnpe4.swift:27:9: error: invalid redeclaration of 'current_note_length_value_next_next_next_next_next_next_next_next_next'\n\
    \    var current_note_length_value_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpvc0wnpe4.swift:26:9: note: 'current_note_length_value_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var current_note_length_value_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpvc0wnpe4.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next'\n\
    \    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpvc0wnpe4.swift:29:9: note: 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpvc0wnpe4.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next'\n\
    \    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpvc0wnpe4.swift:31:9: note: 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpvc0wnpe4.swift:33:9: error: invalid redeclaration of\
    \ 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next'\n\
    \    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpvc0wnpe4.swift:31:9: note: 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpvc0wnpe4.swift:34:9: error: invalid redeclaration of\
    \ 'current_note_l"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beats_count = 0\n    var notes_count = 0\n\
    \    var note_index = 0\n    var note_char = \"\"\n    var note_char_index = 0\n\
    \    var note_char_length = 0\n    var note_char_is_last = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_first_note\
    \ = false\n    var note_char\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp67inpqk1.swift:22:9: error: invalid redeclaration of 'note_char_is_first_note'\n\
    \    var note_char_is_first_note = false\n        ^\n/tmp/tmp67inpqk1.swift:21:9:\
    \ note: 'note_char_is_first_note' previously declared here\n    var note_char_is_first_note\
    \ = false\n        ^\n/tmp/tmp67inpqk1.swift:23:9: error: invalid redeclaration\
    \ of 'note_char_is_first_note'\n    var note_char_is_first_note = false\n    \
    \    ^\n/tmp/tmp67inpqk1.swift:21:9: note: 'note_char_is_first_note' previously\
    \ declared here\n    var note_char_is_first_note = false\n        ^\n/tmp/tmp67inpqk1.swift:24:9:\
    \ error: invalid redeclaration of 'note_char_is_first_note'\n    var note_char_is_first_note\
    \ = false\n        ^\n/tmp/tmp67inpqk1.swift:21:9: note: 'note_char_is_first_note'\
    \ previously declared here\n    var note_char_is_first_note = false\n        ^\n\
    /tmp/tmp67inpqk1.swift:25:9: error: invalid redeclaration of 'note_char_is_first_note'\n\
    \    var note_char_is_first_note = false\n        ^\n/tmp/tmp67inpqk1.swift:21:9:\
    \ note: 'note_char_is_first_note' previously declared here\n    var note_char_is_first_note\
    \ = false\n        ^\n/tmp/tmp67inpqk1.swift:26:9: error: invalid redeclaration\
    \ of 'note_char_is_first_note'\n    var note_char_is_first_note = false\n    \
    \    ^\n/tmp/tmp67inpqk1.swift:21:9: note: 'note_char_is_first_note' previously\
    \ declared here\n    var note_char_is_first_note = false\n        ^\n/tmp/tmp67inpqk1.swift:27:9:\
    \ error: invalid redeclaration of 'note_char_is_first_note'\n    var note_char_is_first_note\
    \ = false\n        ^\n/tmp/tmp67inpqk1.swift:21:9: note: 'note_char_is_first_note'\
    \ previously declared here\n    var note_char_is_first_note = false\n        ^\n\
    /tmp/tmp67inpqk1.swift:28:9: error: invalid redeclaration of 'note_char_is_first_note'\n\
    \    var note_char_is_first_note = false\n        ^\n/tmp/tmp67inpqk1.swift:21:9:\
    \ note: 'note_char_is_first_note' previously declared here\n    var note_char_is_first_note\
    \ = false\n        ^\n/tmp/tmp67inpqk1.swift:29:9: error: invalid redeclaration\
    \ of 'note_char_is_first_note'\n    var note_char_is_first_note = false\n    \
    \    ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    for char\
    \ in music_string {\n        if char == \"o\" {\n            beats.append(beat)\n\
    \            beat = 0\n            notes.append(note)\n            note = \"\"\
    \n        } else if char == \"|\" {\n            beat += 1\n        } else if\
    \ char == \".\" {\n            note = note + char\n        } else {\n        \
    \    note = note + char\n        }\n    }\n    beats.append(beat)\n    return\
    \ beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpf4dpsp87.swift:25:27: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            note = note + char\n       \
    \                   ^\n/tmp/tmpf4dpsp87.swift:27:27: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n            note = note\
    \ + char\n                          ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var lastNote = \"\"\n    var lastNoteBeat = 0\n    var lastNoteBeatCount\
    \ = 0\n    var lastNoteBeatCount2 = 0\n    var lastNoteBeatCount3 = 0\n    var\
    \ lastNoteBeatCount4 = 0\n    var lastNoteBeatCount5 = 0\n    var lastNoteBeatCount6\
    \ = 0\n    var lastNoteBeatCount7 = 0\n    var lastNoteBeatCount8 = 0\n    var\
    \ lastNoteBeatCount9 = 0\n    var lastNoteBeatCount10 = 0\n    var lastNoteBeatCount11\
    \ = 0\n    var lastNoteBeatCount12 = 0\n    var lastNoteBeatCount13 = 0\n    var\
    \ lastNoteBeatCount14 = 0\n    var lastNoteBeatCount15 = 0\n    var lastNoteBeatCount16\
    \ = 0\n    var lastNoteBeatCount17 = 0\n    var lastNoteBeatCount18 = 0\n    var\
    \ lastNoteBeatCount19 = 0\n    var lastNoteBeatCount20 = 0\n    var lastNoteBeatCount21\
    \ = 0\n    var lastNoteBeatCount22 = 0\n    var lastNoteBeatCount23 = 0\n    var\
    \ lastNoteBeatCount24 = 0\n    var lastNoteBeatCount25 = 0\n    var lastNoteBeatCount26\
    \ = 0\n    var lastNoteBeatCount27 = 0\n    var lastNoteBeatCount28 = 0\n    var\
    \ lastNoteBeatCount29 = 0\n    var lastNoteBeatCount30 = 0\n    var lastNoteBeatCount31\
    \ = 0\n    var lastNoteBeatCount32 = 0\n    var lastNoteBeatCount33 = 0\n    var\
    \ lastNoteBeatCount34 = 0\n    var lastNoteBeatCount35 = 0\n    var lastNoteBeatCount36\
    \ = 0\n    var lastNoteBeatCount37 = 0\n    var lastNoteBeatCount38 = 0\n    var\
    \ lastNoteBeatCount39 = 0\n    var lastNoteBeatCount40 = 0\n    var lastNoteBeatCount41\
    \ = 0\n    var lastNoteBeatCount42 = 0\n    var lastNoteBeatCount43 = 0\n    var\
    \ lastNoteBeatCount44 = 0\n    var lastNoteBeatCount45 = 0\n    var lastNoteBeatCount46\
    \ = 0\n    var lastNoteBeatCount47 = 0\n    var lastNoteBeatCount48 = 0\n    var\
    \ lastNoteBeatCount49 = 0\n    var lastNoteBeatCount50 = 0\n    var lastNoteBeatCount51\
    \ = 0\n    var lastNoteBeatCount52 = 0\n    var lastNoteBeatCount53\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpc__0eva3.swift:71:9: error: type annotation missing in pattern\n\
    \    var lastNoteBeatCount53\n        ^\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beats_count = 0\n    var note_length = 0\n\
    \    var note_index = 0\n    var note = String()\n    var last_note = String()\n\
    \    var last_beat = 0\n    var last_beat_count = 0\n    var last_beat_length\
    \ = 0\n    var last_note_index = 0\n    var last_note_length = 0\n    var last_note\
    \ = String()\n    var last_note_octave = 0\n    var last_note_octave_count = 0\n\
    \    var last_note_octave_length = 0\n    var last_note_octave = String()\n  \
    \  var last_note_octave_octave = 0\n    var last_note_octave_octave_count = 0\n\
    \    var last_note_octave_octave_length = 0\n    var last_note_octave_octave =\
    \ String()\n    var last_note_octave_octave_octave = 0\n    var last_note_octave_octave_octave_count\
    \ = 0\n    var last_note_octave_octave_octave_length = 0\n    var last_note_octave_octave_octave\
    \ = String()\n    var last_note_octave_octave_octave_octave = 0\n    var last_note_octave_octave_octave_octave_count\
    \ = 0\n    var last_note_octave_octave_octave_octave_length = 0\n    var last_note_octave_octave_octave_octave\
    \ = String()\n    var last_note_octave_octave_octave_octave_octave = 0\n    var\
    \ last_note_octave_octave_octave_octave_octave_count = 0\n    var last_note_octave_octave_octave_octave_length\
    \ = 0\n    var last_note_octave_octave_octave_octave_octave = String()\n    var\
    \ last_note_octave_octave_octave_octave_octave_octave = 0\n    var last_note_octave_octave_octave_octave_octave_octave_count\
    \ = 0\n    var last_note_octave_octave_octave_octave_octave_length = 0\n    var\
    \ last_note_octave_octave_octave_octave_octave_octave = String()\n    var last_note_octave_octave_octave_octave_octave_octave_octave\
    \ = 0\n    var last_note_octave_octave_octave_octave_octave_octave_octave_octave_count\
    \ = 0\n    var last_note_octave_oct\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpr2fcg788.swift:24:9: error: invalid redeclaration of 'last_note'\n\
    \    var last_note = String()\n        ^\n/tmp/tmpr2fcg788.swift:18:9: note: 'last_note'\
    \ previously declared here\n    var last_note = String()\n        ^\n/tmp/tmpr2fcg788.swift:28:9:\
    \ error: invalid redeclaration of 'last_note_octave'\n    var last_note_octave\
    \ = String()\n        ^\n/tmp/tmpr2fcg788.swift:25:9: note: 'last_note_octave'\
    \ previously declared here\n    var last_note_octave = 0\n        ^\n/tmp/tmpr2fcg788.swift:32:9:\
    \ error: invalid redeclaration of 'last_note_octave_octave'\n    var last_note_octave_octave\
    \ = String()\n        ^\n/tmp/tmpr2fcg788.swift:29:9: note: 'last_note_octave_octave'\
    \ previously declared here\n    var last_note_octave_octave = 0\n        ^\n/tmp/tmpr2fcg788.swift:36:9:\
    \ error: invalid redeclaration of 'last_note_octave_octave_octave'\n    var last_note_octave_octave_octave\
    \ = String()\n        ^\n/tmp/tmpr2fcg788.swift:33:9: note: 'last_note_octave_octave_octave'\
    \ previously declared here\n    var last_note_octave_octave_octave = 0\n     \
    \   ^\n/tmp/tmpr2fcg788.swift:40:9: error: invalid redeclaration of 'last_note_octave_octave_octave_octave'\n\
    \    var last_note_octave_octave_octave_octave = String()\n        ^\n/tmp/tmpr2fcg788.swift:37:9:\
    \ note: 'last_note_octave_octave_octave_octave' previously declared here\n   \
    \ var last_note_octave_octave_octave_octave = 0\n        ^\n/tmp/tmpr2fcg788.swift:43:9:\
    \ error: invalid redeclaration of 'last_note_octave_octave_octave_octave_length'\n\
    \    var last_note_octave_octave_octave_octave_length = 0\n        ^\n/tmp/tmpr2fcg788.swift:39:9:\
    \ note: 'last_note_octave_octave_octave_octave_length' previously declared here\n\
    \    var last_note_octave_octave_octave_octave_length = 0\n        ^\n/tmp/tmpr2fcg788.swift:44:9:\
    \ error: invalid redeclaration of 'last_note_octave_octave_octave_octave_octave'\n\
    \    var last_note_octave_octave_octave_octave_octave = String()\n        ^\n\
    /tmp/tmpr2fcg788.swift:41:9: note: 'last_note_octave_octave_octave_octave_octave'\
    \ previously declared here\n    var last_note_octave_octave_octave_octa"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = music_string.characters\n    var beat = 0\n    var note = 0\n\
    \    var last_note = 0\n    var last_beat = 0\n    var last_beats = 0\n    var\
    \ last_beats_count = 0\n    var last_beats_count_max = 0\n    var last_beats_count_min\
    \ = 0\n    var last_beats_count_avg = 0\n    var last_beats_count_sum = 0\n  \
    \  var last_beats_count_count = 0\n    var last_beats_count_count_max = 0\n  \
    \  var last_beats_count_count_min = 0\n    var last_beats_count_count_avg = 0\n\
    \    var last_beats_count_count_sum = 0\n    var last_beats_count_count_count\
    \ = 0\n    var last_beats_count_count_count_max = 0\n    var last_beats_count_count_count_min\
    \ = 0\n    var last_beats_count_count_count_avg = 0\n    var last_beats_count_count_count_sum\
    \ = 0\n    var last_beats_count_count_count_count = 0\n    var last_beats_count_count_count_count_max\
    \ = 0\n    var last_beats_count_count_count_count_min = 0\n    var last_beats_count_count_count_count_avg\
    \ = 0\n    var last_beats_count_count_count_count_sum = 0\n    var last_beats_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_max = 0\n    var last_beats_count_count_count_count_count_min\
    \ = 0\n    var last_beats_count_count_count_count_count_avg = 0\n    var last_beats_count_count_count_count_count_sum\
    \ = 0\n    var last_beats_count_count_count_count_count_count = 0\n    var last_beats_count_count_count_count_count_count_max\
    \ = 0\n    var last_beats_count_count_count_count_count_count_min = 0\n    var\
    \ last_beats_count_count_count_count_count_count_avg = 0\n    var last_beats_count_count_count_count_count_count_sum\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count = 0\n\
    \    var last_beats_count_count_count_count_count_count_count_max = 0\n    var\
    \ last_beats_count_count_count_count_count_count_count_min = 0\n    var last_beats_count_count_count_count_count_count_count_avg\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_sum = 0\n\
    \    var last_beats_count_count_count_count_count_count_count_count = 0\n    var\
    \ last_beats_count_count_count_count_count_count_count_count_max = 0\n    var\
    \ last_beats_count_count_count_count_count_count_count_count_min = 0\n    var\
    \ last_beats_count_count_count_count_count_count_count_count_avg = 0\n    var\
    \ last_beats_count_count_count_count_count_count_count_count_sum = 0\n    var\
    \ last_beats_count_count_count_count_count_count_count_count_count_count = 0\n\
    \    var last_beats_count_count_count_count_count_count_count_count_count_max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp6fgnvadc.swift:13:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var notes = music_string.characters\n             \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp6fgnvadc.swift:54:9: error: invalid redeclaration of 'last_beats_count_count_count_count_count_count_count_count'\n\
    \    var last_beats_count_count_count_count_count_count_count_count = 0\n    \
    \    ^\n/tmp/tmp6fgnvadc.swift:49:9: note: 'last_beats_count_count_count_count_count_count_count_count'\
    \ previously declared here\n    var last_beats_count_count_count_count_count_count_count_count\
    \ = 0\n        ^\n/tmp/tmp6fgnvadc.swift:60:9: error: type annotation missing\
    \ in pattern\n    var last_beats_count_count_count_count_count_count_count_count_count_max\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_value\
    \ = 0\n    var current_note_length_value_next = 0\n    var current_note_length_value_next_next\
    \ = 0\n    var current_note_length_value_next_next_next = 0\n    var current_note_length_value_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next = 0\n    var\
    \ current_note_length_value_next_next_next_next_next_next = 0\n    var current_note_length_value_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpvc0wnpe4.swift:27:9: error: invalid redeclaration of 'current_note_length_value_next_next_next_next_next_next_next_next_next'\n\
    \    var current_note_length_value_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpvc0wnpe4.swift:26:9: note: 'current_note_length_value_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var current_note_length_value_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpvc0wnpe4.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next'\n\
    \    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpvc0wnpe4.swift:29:9: note: 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpvc0wnpe4.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next'\n\
    \    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpvc0wnpe4.swift:31:9: note: 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpvc0wnpe4.swift:33:9: error: invalid redeclaration of\
    \ 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next'\n\
    \    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpvc0wnpe4.swift:31:9: note: 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpvc0wnpe4.swift:34:9: error: invalid redeclaration of\
    \ 'current_note_l"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var lastNote = \"\"\n    var lastNoteBeat = 0\n    var lastNoteBeatCount\
    \ = 0\n    var lastNoteBeatCount2 = 0\n    var lastNoteBeatCount3 = 0\n    var\
    \ lastNoteBeatCount4 = 0\n    var lastNoteBeatCount5 = 0\n    var lastNoteBeatCount6\
    \ = 0\n    var lastNoteBeatCount7 = 0\n    var lastNoteBeatCount8 = 0\n    var\
    \ lastNoteBeatCount9 = 0\n    var lastNoteBeatCount10 = 0\n    var lastNoteBeatCount11\
    \ = 0\n    var lastNoteBeatCount12 = 0\n    var lastNoteBeatCount13 = 0\n    var\
    \ lastNoteBeatCount14 = 0\n    var lastNoteBeatCount15 = 0\n    var lastNoteBeatCount16\
    \ = 0\n    var lastNoteBeatCount17 = 0\n    var lastNoteBeatCount18 = 0\n    var\
    \ lastNoteBeatCount19 = 0\n    var lastNoteBeatCount20 = 0\n    var lastNoteBeatCount21\
    \ = 0\n    var lastNoteBeatCount22 = 0\n    var lastNoteBeatCount23 = 0\n    var\
    \ lastNoteBeatCount24 = 0\n    var lastNoteBeatCount25 = 0\n    var lastNoteBeatCount26\
    \ = 0\n    var lastNoteBeatCount27 = 0\n    var lastNoteBeatCount28 = 0\n    var\
    \ lastNoteBeatCount29 = 0\n    var lastNoteBeatCount30 = 0\n    var lastNoteBeatCount31\
    \ = 0\n    var lastNoteBeatCount32 = 0\n    var lastNoteBeatCount33 = 0\n    var\
    \ lastNoteBeatCount34 = 0\n    var lastNoteBeatCount35 = 0\n    var lastNoteBeatCount36\
    \ = 0\n    var lastNoteBeatCount37 = 0\n    var lastNoteBeatCount38 = 0\n    var\
    \ lastNoteBeatCount39 = 0\n    var lastNoteBeatCount40 = 0\n    var lastNoteBeatCount41\
    \ = 0\n    var lastNoteBeatCount42 = 0\n    var lastNoteBeatCount43 = 0\n    var\
    \ lastNoteBeatCount44 = 0\n    var lastNoteBeatCount45 = 0\n    var lastNoteBeatCount46\
    \ = 0\n    var lastNoteBeatCount47 = 0\n    var lastNoteBeatCount48 = 0\n    var\
    \ lastNoteBeatCount49 = 0\n    var lastNoteBeatCount50 = 0\n    var lastNoteBeatCount51\
    \ = 0\n    var lastNoteBeatCount52 = 0\n    var lastNoteBeatCount53\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpc__0eva3.swift:71:9: error: type annotation missing in pattern\n\
    \    var lastNoteBeatCount53\n        ^\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_string\
    \ = \"\"\n    var current_note_length_index = 0\n    var current_note_string =\
    \ \"\"\n    var current_note_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string = \"\"\n \
    \   var current_note_index = 0\n    var current_note_string_index = 0\n    var\
    \ current_note_string = \"\"\n    var current_note_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string = \"\"\n    var current_note_index = 0\n  \
    \  var current_note_string_index = 0\n    var current_note_string = \"\"\n   \
    \ var current_note_index = 0\n    var current_note_string_index = 0\n    var current_note_string\
    \ = \"\"\n    var current_note_index = 0\n    var current_note_string_index =\
    \ 0\n    var current_note_string = \"\"\n    var current_note_index = 0\n    var\
    \ current_note_string_index = 0\n    var current_note_string = \"\"\n    var current_note_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string = \"\
    \"\n    var current_note_index = 0\n    var current_note_string_index = 0\n  \
    \  var current_note_string = \"\"\n    var current_note_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string = \"\"\n    var current_note_index = 0\n  \
    \  var current_note_string_index = 0\n    var current_note_string = \"\"\n   \
    \ var current_note_index = 0\n    var current_note_string_index = 0\n    var current_note_string\
    \ = \"\"\n    var current_note_index = 0\n    var current_note_string_index =\
    \ 0\n    var current_note_string = \"\"\n    var current_note_index = 0\n    var\
    \ current_note_string_index = 0\n    var current_note_string = \"\"\n    var current_note_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string = \"\
    \"\n    var current_note_index = 0\n    var current_note_string_index = 0\n  \
    \  var current_note_string = \"\"\n    var current_note_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string = \"\"\n    var current_note_index = 0\n  \
    \  var current_note_string_index = 0\n    var current_note_string = \"\"\n   \
    \ var current_note_index = 0\n    var current_note_string_index = 0\n    var current_note_string\
    \ = \"\"\n    var current_note_index = 0\n    var current_note_string_index =\
    \ 0\n    var current_note_string = \"\"\n    var current_note_index = 0\n    var\
    \ current_note_string_index = 0\n    var current_note_string = \"\"\n    var current_note_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string = \"\
    \"\n    var current_note_index = 0\n    var current_note_string_index = 0\n  \
    \  var current_note_string = \"\"\n    var current_note_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string = \"\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmprmt0sinu.swift:18:9: error: invalid redeclaration of 'current_note_length_index'\n\
    \    var current_note_length_index = 0\n        ^\n/tmp/tmprmt0sinu.swift:16:9:\
    \ note: 'current_note_length_index' previously declared here\n    var current_note_length_index\
    \ = 0\n        ^\n/tmp/tmprmt0sinu.swift:22:9: error: invalid redeclaration of\
    \ 'current_note_string_index'\n    var current_note_string_index = 0\n       \
    \ ^\n/tmp/tmprmt0sinu.swift:21:9: note: 'current_note_string_index' previously\
    \ declared here\n    var current_note_string_index = 0\n        ^\n/tmp/tmprmt0sinu.swift:23:9:\
    \ error: invalid redeclaration of 'current_note_string'\n    var current_note_string\
    \ = \"\"\n        ^\n/tmp/tmprmt0sinu.swift:19:9: note: 'current_note_string'\
    \ previously declared here\n    var current_note_string = \"\"\n        ^\n/tmp/tmprmt0sinu.swift:24:9:\
    \ error: invalid redeclaration of 'current_note_index'\n    var current_note_index\
    \ = 0\n        ^\n/tmp/tmprmt0sinu.swift:20:9: note: 'current_note_index' previously\
    \ declared here\n    var current_note_index = 0\n        ^\n/tmp/tmprmt0sinu.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_string_index'\n    var current_note_string_index\
    \ = 0\n        ^\n/tmp/tmprmt0sinu.swift:21:9: note: 'current_note_string_index'\
    \ previously declared here\n    var current_note_string_index = 0\n        ^\n\
    /tmp/tmprmt0sinu.swift:26:9: error: invalid redeclaration of 'current_note_string'\n\
    \    var current_note_string = \"\"\n        ^\n/tmp/tmprmt0sinu.swift:19:9: note:\
    \ 'current_note_string' previously declared here\n    var current_note_string\
    \ = \"\"\n        ^\n/tmp/tmprmt0sinu.swift:27:9: error: invalid redeclaration\
    \ of 'current_note_index'\n    var current_note_index = 0\n        ^\n/tmp/tmprmt0sinu.swift:20:9:\
    \ note: 'current_note_index' previously declared here\n    var current_note_index\
    \ = 0\n        ^\n/tmp/tmprmt0sinu.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_string_index'\n    var current_note_string_index = 0\n       \
    \ ^\n/tmp/tmprmt0sinu.swift:21:9: note: 'current_note_string_index' previously\
    \ declared here\n    var curr"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var notes_length_index\
    \ = 0\n    var notes_length_index2 = 0\n    var notes_length_index3 = 0\n    var\
    \ notes_length_index4 = 0\n    var notes_length_index5 = 0\n    var notes_length_index6\
    \ = 0\n    var notes_length_index7 = 0\n    var notes_length_index8 = 0\n    var\
    \ notes_length_index9 = 0\n    var notes_length_index10 = 0\n    var notes_length_index11\
    \ = 0\n    var notes_length_index12 = 0\n    var notes_length_index13 = 0\n  \
    \  var notes_length_index14 = 0\n    var notes_length_index15 = 0\n    var notes_length_index16\
    \ = 0\n    var notes_length_index17 = 0\n    var notes_length_index18 = 0\n  \
    \  var notes_length_index19 = 0\n    var notes_length_index20 = 0\n    var notes_length_index21\
    \ = 0\n    var notes_length_index22 = 0\n    var notes_length_index23 = 0\n  \
    \  var notes_length_index24 = 0\n    var notes_length_index25 = 0\n    var notes_length_index26\
    \ = 0\n    var notes_length_index27 = 0\n    var notes_length_index28 = 0\n  \
    \  var notes_length_index29 = 0\n    var notes_length_index30 = 0\n    var notes_length_index31\
    \ = 0\n    var notes_length_index32 = 0\n    var notes_length_index33 = 0\n  \
    \  var notes_length_index34 = 0\n    var notes_length_index35 = 0\n    var notes_length_index36\
    \ = 0\n    var notes_length_index37 = 0\n    var notes_length_index38 = 0\n  \
    \  var notes_length_index39 = 0\n    var notes_length_index40 = 0\n    var notes_length_index41\
    \ = 0\n    var notes_length_index42 = 0\n    var notes_length_index43 = 0\n  \
    \  var notes_length_index44 = 0\n    var notes_length_index45 = 0\n    var notes_length_index46\
    \ = 0\n    var notes_length_index47 = 0\n    var notes_length_index48 = 0\n  \
    \  var notes_length_index49 = 0\n    var notes_length_index50 = 0\n    var notes_length_index51\
    \ = 0\n    var notes_length_index52 = 0\n    var notes_length_index53 = 0\n  \
    \  var notes_length_index54 = 0\n    var notes_length_index55 = 0\n    var notes_length_index56\
    \ = 0\n    var notes_length_index57 = 0\n    var notes_length_index58 = 0\n  \
    \  var notes_length_index59 = 0\n    var notes_length_index60 = 0\n    var notes_length_index61\
    \ = 0\n    var notes_length_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpumzer969.swift:76:9: error: type annotation missing in pattern\n\
    \    var notes_length_index\n        ^\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array: [Int]\
    \ = []\n    var current_beat = 0\n    var current_note = 0\n    var current_note_value\
    \ = 0\n    var current_note_length = 0\n    var current_note_length_value = 0\n\
    \    var current_note_length_value_value = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value = 0\n \
    \   var current_note_length_value_value_value_value_value_value_value = 0\n  \
    \  var current_note_length_value_value_value_value_value_value_value_value = 0\n\
    \    var current_note_length_value_value_value_value_value_value_value_value =\
    \ 0\n    var current_note_length_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpck0bpe3j.swift:25:9: error: invalid redeclaration of 'current_note_length_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value =\
    \ 0\n        ^\n/tmp/tmpck0bpe3j.swift:24:9: note: 'current_note_length_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpck0bpe3j.swift:27:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpck0bpe3j.swift:26:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpck0bpe3j.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpck0bpe3j.swift:28:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpck0bpe3j.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpck0bpe3j.swift:31:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpck0bpe3j.swift:34:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_valu"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var notes_index = 0\n\
    \    var notes_length_index = 0\n    var notes_length_index2 = 0\n    var notes_length_index3\
    \ = 0\n    var notes_length_index4 = 0\n    var notes_length_index5 = 0\n    var\
    \ notes_length_index6 = 0\n    var notes_length_index7 = 0\n    var notes_length_index8\
    \ = 0\n    var notes_length_index9 = 0\n    var notes_length_index10 = 0\n   \
    \ var notes_length_index11 = 0\n    var notes_length_index12 = 0\n    var notes_length_index13\
    \ = 0\n    var notes_length_index14 = 0\n    var notes_length_index15 = 0\n  \
    \  var notes_length_index16 = 0\n    var notes_length_index17 = 0\n    var notes_length_index18\
    \ = 0\n    var notes_length_index19 = 0\n    var notes_length_index20 = 0\n  \
    \  var notes_length_index21 = 0\n    var notes_length_index22 = 0\n    var notes_length_index23\
    \ = 0\n    var notes_length_index24 = 0\n    var notes_length_index25 = 0\n  \
    \  var notes_length_index26 = 0\n    var notes_length_index27 = 0\n    var notes_length_index28\
    \ = 0\n    var notes_length_index29 = 0\n    var notes_length_index30 = 0\n  \
    \  var notes_length_index31 = 0\n    var notes_length_index32 = 0\n    var notes_length_index33\
    \ = 0\n    var notes_length_index34 = 0\n    var notes_length_index35 = 0\n  \
    \  var notes_length_index36 = 0\n    var notes_length_index37 = 0\n    var notes_length_index38\
    \ = 0\n    var notes_length_index39 = 0\n    var notes_length_index40 = 0\n  \
    \  var notes_length_index41 = 0\n    var notes_length_index42 = 0\n    var notes_length_index43\
    \ = 0\n    var notes_length_index44 = 0\n    var notes_length_index45 = 0\n  \
    \  var notes_length_index46 = 0\n    var notes_length_index47 = 0\n    var notes_length_index48\
    \ = 0\n    var notes_length_index49 = 0\n    var notes_length_index50 = 0\n  \
    \  var notes_length_index51 = 0\n    var notes_length_index52 = 0\n    var notes_length_index53\
    \ = 0\n    var notes_length_index54 = 0\n    var notes_length_index55 = 0\n  \
    \  var notes_length_index56 = 0\n    var notes_length_index57 = 0\n    var notes_length_index58\
    \ = 0\n    var notes_length_index59 = 0\n    var notes_length_index60 = 0\n  \
    \  var notes_length_index61 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8wh68uht.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp8wh68uht.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp8wh68uht.swift:14:9:\
    \ warning: initialization of variable 'notes_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:15:9: warning: initialization\
    \ of variable 'notes_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_index = 0\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmp8wh68uht.swift:16:9: warning: initialization of variable 'notes_length_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:17:9:\
    \ warning: initialization of variable 'notes_length_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:18:9: warning:\
    \ initialization of variable 'notes_length_index3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var notes_length_index3 = 0\n   \
    \ ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:19:9: warning: initialization\
    \ of variable 'notes_length_index4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_length_index4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp8wh68uht.swift:20:9: warning: initialization of variable 'notes_length_index5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:21:9:\
    \ warning: initialization of variable 'notes_length_index6' was never used; consider\
    \ replacing with assi"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    for c in\
    \ music_string {\n        if c == 'o' {\n            if note != \"\" {\n     \
    \           beats.append(beat)\n                notes.append(note)\n         \
    \       beat = 0\n                note = \"\"\n            }\n        } else {\n\
    \            if note == \"\" {\n                note = c\n            } else {\n\
    \                note += c\n            }\n        }\n    }\n    beats.append(beat)\n\
    \    notes.append(note)\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpoixfod5e.swift:17:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpoixfod5e.swift:26:24: error: cannot assign value of type 'Character' to\
    \ type 'String'\n                note = c\n                       ^\n/tmp/tmpoixfod5e.swift:28:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                note += c\n                        ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    for c in\
    \ music_string {\n        switch c {\n        case \"o\":\n            notes.append(note)\n\
    \            note = \"\"\n            beat += 4\n        case \"o|\":\n      \
    \      notes.append(note)\n            note = \"\"\n            beat += 2\n  \
    \      case \"|\":\n            notes.append(note)\n            note = \"\"\n\
    \            beat = 1\n        default:\n            note += String(c)\n     \
    \   }\n    }\n    notes.append(note)\n    for note in notes {\n        beats.append(beat)\n\
    \    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp65x4rkf2.swift:22:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beats_count = 0\n    var notes_count = 0\n\
    \    var note = String()\n    var beat = Int()\n    var note_index = -1\n    var\
    \ note_index2 = -1\n    var note_index3 = -1\n    var note_index4 = -1\n    var\
    \ note_index5 = -1\n    var note_index6 = -1\n    var note_index7 = -1\n    var\
    \ note_index8 = -1\n    var note_index9 = -1\n    var note_index10 = -1\n    var\
    \ note_index11 = -1\n    var note_index12 = -1\n    var note_index13 = -1\n  \
    \  var note_index14 = -1\n    var note_index15 = -1\n    var note_index16 = -1\n\
    \    var note_index17 = -1\n    var note_index18 = -1\n    var note_index19 =\
    \ -1\n    var note_index20 = -1\n    var note_index21 = -1\n    var note_index22\
    \ = -1\n    var note_index23 = -1\n    var note_index24 = -1\n    var note_index25\
    \ = -1\n    var note_index26 = -1\n    var note_index27 = -1\n    var note_index28\
    \ = -1\n    var note_index29 = -1\n    var note_index30 = -1\n    var note_index31\
    \ = -1\n    var note_index32 = -1\n    var note_index33 = -1\n    var note_index34\
    \ = -1\n    var note_index35 = -1\n    var note_index36 = -1\n    var note_index37\
    \ = -1\n    var note_index38 = -1\n    var note_index39 = -1\n    var note_index40\
    \ = -1\n    var note_index41 = -1\n    var note_index42 = -1\n    var note_index43\
    \ = -1\n    var note_index44 = -1\n    var note_index45 = -1\n    var note_index46\
    \ = -1\n    var note_index47 = -1\n    var note_index48 = -1\n    var note_index49\
    \ = -1\n    var note_index50 = -1\n    var note_index51 = -1\n    var note_index52\
    \ = -1\n    var note_index53 = -1\n    var note_index54 = -1\n    var note_index55\
    \ = -1\n    var note_index56 = -1\n    var note_index57 = -1\n    var note_index58\
    \ = -1\n    var note_index59 = -1\n    var note_index60 = -1\n    var note_index61\
    \ = -1\n    var note_index62 = -1\n    var note_index63 = -1\n    var note_index64\
    \ = -1\n    var note_index65 = -1\n    var note_index66 = -1\n    var note_index67\
    \ = -1\n    var note_index68 = -1\n    var note_index69 = -1\n    var note_index70\
    \ = -1\n    var note_index71 = -1\n    var note_index72 = -1\n    var note_index73\
    \ = -1\n    var note_index74 = -1\n    var note_index75 = -1\n    var note_index76\
    \ = -1\n    var note_index77\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp5z1x9fy0.swift:94:9: error: type annotation missing in pattern\n\
    \    var note_index77\n        ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var notes = [String]()\n    var notes_index\
    \ = 0\n    var notes_length = 0\n    var note_length = 0\n    var note_length_index\
    \ = 0\n    var note_length_index2 = 0\n    var note_length_index3 = 0\n    var\
    \ note_length_index4 = 0\n    var note_length_index5 = 0\n    var note_length_index6\
    \ = 0\n    var note_length_index7 = 0\n    var note_length_index8 = 0\n    var\
    \ note_length_index9 = 0\n    var note_length_index10 = 0\n    var note_length_index11\
    \ = 0\n    var note_length_index12 = 0\n    var note_length_index13 = 0\n    var\
    \ note_length_index14 = 0\n    var note_length_index15 = 0\n    var note_length_index16\
    \ = 0\n    var note_length_index17 = 0\n    var note_length_index18 = 0\n    var\
    \ note_length_index19 = 0\n    var note_length_index20 = 0\n    var note_length_index21\
    \ = 0\n    var note_length_index22 = 0\n    var note_length_index23 = 0\n    var\
    \ note_length_index24 = 0\n    var note_length_index25 = 0\n    var note_length_index26\
    \ = 0\n    var note_length_index27 = 0\n    var note_length_index28 = 0\n    var\
    \ note_length_index29 = 0\n    var note_length_index30 = 0\n    var note_length_index31\
    \ = 0\n    var note_length_index32 = 0\n    var note_length_index33 = 0\n    var\
    \ note_length_index34 = 0\n    var note_length_index35 = 0\n    var note_length_index36\
    \ = 0\n    var note_length_index37 = 0\n    var note_length_index38 = 0\n    var\
    \ note_length_index39 = 0\n    var note_length_index40 = 0\n    var note_length_index41\
    \ = 0\n    var note_length_index42 = 0\n    var note_length_index43 = 0\n    var\
    \ note_length_index44 = 0\n    var note_length_index45 = 0\n    var note_length_index46\
    \ = 0\n    var note_length_index47 = 0\n    var note_length_index48 = 0\n    var\
    \ note_length_index49 = 0\n    var note_length_index50 = 0\n    var note_length_index51\
    \ = 0\n    var note_length_index52 = 0\n    var note_length_index53 = 0\n    var\
    \ note_length_index54 = 0\n    var note_length_index55 = 0\n    var note_length_index56\
    \ = 0\n    var note_length_index57 = 0\n    var note_length_index58 = 0\n    var\
    \ note_length_index59 = 0\n    var note_length_index60 = 0\n    var note_length_index61\
    \ = 0\n    var note_length_index62 = 0\n    var note_length_index63 = 0\n    var\
    \ note_length_index64 = 0\n    var note_length_index65 = 0\n    var note_length_index66\
    \ = 0\n    var note_length_index67 = 0\n    var note_length_index68\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpvh1242g_.swift:86:9: error: type annotation missing in pattern\n\
    \    var note_length_index68\n        ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = music_string.characters\n    var beat = 0\n    var note = 0\n\
    \    var note_count = 0\n    var last_note = 0\n    var last_beat = 0\n    var\
    \ last_beat_count = 0\n    var last_note_beat = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_note = 0\n    var last_note_note_count = 0\n    var last_note_note_beat\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_note = 0\n\
    \    var last_note_note_note_count = 0\n    var last_note_note_note_beat = 0\n\
    \    var last_note_note_note_beat_count = 0\n    var last_note_note_note = 0\n\
    \    var last_note_note_note_count = 0\n    var last_note_note_note_beat = 0\n\
    \    var last_note_note_note_beat_count = 0\n    var last_note_note_note = 0\n\
    \    var last_note_note_note_count = 0\n    var last_note_note_note_beat = 0\n\
    \    var last_note_note_note_beat_count = 0\n    var last_note_note_note = 0\n\
    \    var last_note_note_note_count = 0\n    var last_note_note_note_beat = 0\n\
    \    var last_note_note_note_beat_count = 0\n    var last_note_note_note = 0\n\
    \    var last_note_note_note_count = 0\n    var last_note_note_note_beat = 0\n\
    \    var last_note_note_note_beat_count = 0\n    var last_note_note_note = 0\n\
    \    var last_note_note_note_count = 0\n    var last_note_note_note_beat = 0\n\
    \    var last_note_note_note_beat_count = 0\n    var last_note_note_note = 0\n\
    \    var last_note_note_note_count = 0\n    var last_note_note_note_beat = 0\n\
    \    var last_note_note_note_beat_count = 0\n    var last_note_note_note = 0\n\
    \    var last_note_note_note_count = 0\n    var last_note_note_note_beat = 0\n\
    \    var last_note_note_note_beat_count = 0\n    var last_note_note_note = 0\n\
    \    var last_note_note_note_count = 0\n    var last_note_note_note_beat = 0\n\
    \    var last_note_note_note_beat_count = 0\n    var last_note_note_note = 0\n\
    \    var last_note_note_note_count = 0\n    var last_note_note_note_beat = 0\n\
    \    var last_note_note_note_beat_count = 0\n    var last_note_note_note = 0\n\
    \    var last_note_note_note_count = 0\n    var last_note_note_note_beat = 0\n\
    \    var last_note_note_note_beat_count = 0\n    var last_note_note_note = 0\n\
    \    var last_note_note_note_count = 0\n    var last_note_note_note_beat = 0\n\
    \    var last_note_note_note_beat_count = 0\n    var last_note_note_note = 0\n\
    \    var last_note_note_note_count = 0\n    var last_note_note_note_beat = 0\n\
    \    var last_note_note_note_beat_count = 0\n    var last_note_note_note = 0\n\
    \    var last_note_note_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbcpqb64q.swift:13:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var notes = music_string.characters\n             \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpbcpqb64q.swift:30:9: error: invalid redeclaration of 'last_note_note_note'\n\
    \    var last_note_note_note = 0\n        ^\n/tmp/tmpbcpqb64q.swift:26:9: note:\
    \ 'last_note_note_note' previously declared here\n    var last_note_note_note\
    \ = 0\n        ^\n/tmp/tmpbcpqb64q.swift:31:9: error: invalid redeclaration of\
    \ 'last_note_note_note_count'\n    var last_note_note_note_count = 0\n       \
    \ ^\n/tmp/tmpbcpqb64q.swift:27:9: note: 'last_note_note_note_count' previously\
    \ declared here\n    var last_note_note_note_count = 0\n        ^\n/tmp/tmpbcpqb64q.swift:32:9:\
    \ error: invalid redeclaration of 'last_note_note_note_beat'\n    var last_note_note_note_beat\
    \ = 0\n        ^\n/tmp/tmpbcpqb64q.swift:28:9: note: 'last_note_note_note_beat'\
    \ previously declared here\n    var last_note_note_note_beat = 0\n        ^\n\
    /tmp/tmpbcpqb64q.swift:33:9: error: invalid redeclaration of 'last_note_note_note_beat_count'\n\
    \    var last_note_note_note_beat_count = 0\n        ^\n/tmp/tmpbcpqb64q.swift:29:9:\
    \ note: 'last_note_note_note_beat_count' previously declared here\n    var last_note_note_note_beat_count\
    \ = 0\n        ^\n/tmp/tmpbcpqb64q.swift:34:9: error: invalid redeclaration of\
    \ 'last_note_note_note'\n    var last_note_note_note = 0\n        ^\n/tmp/tmpbcpqb64q.swift:26:9:\
    \ note: 'last_note_note_note' previously declared here\n    var last_note_note_note\
    \ = 0\n        ^\n/tmp/tmpbcpqb64q.swift:35:9: error: invalid redeclaration of\
    \ 'last_note_note_note_count'\n    var last_note_note_note_count = 0\n       \
    \ ^\n/tmp/tmpbcpqb64q.swift:27:9: note: 'last_note_note_note_count' previously\
    \ declared here\n    var last_note_note_note_count = 0\n        ^\n/tmp/tmpbcpqb64q.swift:36:9:\
    \ error: invalid redeclaration of 'last_note_note_note_beat'\n    var last_note_note_note_beat\
    \ = 0\n        ^\n/tmp/t"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_index2\
    \ = 0\n    var current_note_length_index3 = 0\n    var current_note_length_index4\
    \ = 0\n    var current_note_length_index5 = 0\n    var current_note_length_index6\
    \ = 0\n    var current_note_length_index7 = 0\n    var current_note_length_index8\
    \ = 0\n    var current_note_length_index9 = 0\n    var current_note_length_index10\
    \ = 0\n    var current_note_length_index11 = 0\n    var current_note_length_index12\
    \ = 0\n    var current_note_length_index13 = 0\n    var current_note_length_index14\
    \ = 0\n    var current_note_length_index15 = 0\n    var current_note_length_index16\
    \ = 0\n    var current_note_length_index17 = 0\n    var current_note_length_index18\
    \ = 0\n    var current_note_length_index19 = 0\n    var current_note_length_index20\
    \ = 0\n    var current_note_length_index21 = 0\n    var current_note_length_index22\
    \ = 0\n    var current_note_length_index23 = 0\n    var current_note_length_index24\
    \ = 0\n    var current_note_length_index25 = 0\n    var current_note_length_index26\
    \ = 0\n    var current_note_length_index27 = 0\n    var current_note_length_index28\
    \ = 0\n    var current_note_length_index29 = 0\n    var current_note_length_index30\
    \ = 0\n    var current_note_length_index31 = 0\n    var current_note_length_index32\
    \ = 0\n    var current_note_length_index33 = 0\n    var current_note_length_index34\
    \ = 0\n    var current_note_length_index35 = 0\n    var current_note_length_index36\
    \ = 0\n    var current_note_length_index37 = 0\n    var current_note_length_index38\
    \ = 0\n    var current_note_length_index39 = 0\n    var current_note_length_index40\
    \ = 0\n    var current_note_length_index41 = 0\n    var current_note_length_index42\
    \ = 0\n    var current_note_length_index43 = 0\n    var current_note_length_index44\
    \ = 0\n    var current_note_length_index45 = 0\n    var current_note_length_index46\
    \ = 0\n    var current_note_length_index47 = 0\n    var current_note_length_index48\
    \ = 0\n    var current_note_length_index49 = 0\n    var current_note_length_index50\
    \ = 0\n    var current_note_length_index51 = 0\n    var current_note_length_index52\
    \ = 0\n    var current_note_length_index53 = 0\n    var current_note_length_index54\
    \ = 0\n    var current_note_length_index55 = 0\n    var current_note_length_index56\
    \ = 0\n    var current_note_length_index57 = 0\n    var current_note_length_index58\
    \ = 0\n    var current_note_length_index59 = 0\n    var current_note_length_index60\
    \ = 0\n    var current_note_length_index61 = 0\n    var current_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1kdovva5.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var notes_length_count\
    \ = 0\n    var notes_length_index = 0\n    var notes_length_index2 = 0\n    var\
    \ notes_length_index3 = 0\n    var notes_length_index4 = 0\n    var notes_length_index5\
    \ = 0\n    var notes_length_index6 = 0\n    var notes_length_index7 = 0\n    var\
    \ notes_length_index8 = 0\n    var notes_length_index9 = 0\n    var notes_length_index10\
    \ = 0\n    var notes_length_index11 = 0\n    var notes_length_index12 = 0\n  \
    \  var notes_length_index13 = 0\n    var notes_length_index14 = 0\n    var notes_length_index15\
    \ = 0\n    var notes_length_index16 = 0\n    var notes_length_index17 = 0\n  \
    \  var notes_length_index18 = 0\n    var notes_length_index19 = 0\n    var notes_length_index20\
    \ = 0\n    var notes_length_index21 = 0\n    var notes_length_index22 = 0\n  \
    \  var notes_length_index23 = 0\n    var notes_length_index24 = 0\n    var notes_length_index25\
    \ = 0\n    var notes_length_index26 = 0\n    var notes_length_index27 = 0\n  \
    \  var notes_length_index28 = 0\n    var notes_length_index29 = 0\n    var notes_length_index30\
    \ = 0\n    var notes_length_index31 = 0\n    var notes_length_index32 = 0\n  \
    \  var notes_length_index33 = 0\n    var notes_length_index34 = 0\n    var notes_length_index35\
    \ = 0\n    var notes_length_index36 = 0\n    var notes_length_index37 = 0\n  \
    \  var notes_length_index38 = 0\n    var notes_length_index39 = 0\n    var notes_length_index40\
    \ = 0\n    var notes_length_index41 = 0\n    var notes_length_index42 = 0\n  \
    \  var notes_length_index43 = 0\n    var notes_length_index44 = 0\n    var notes_length_index45\
    \ = 0\n    var notes_length_index46 = 0\n    var notes_length_index47 = 0\n  \
    \  var notes_length_index48 = 0\n    var notes_length_index49 = 0\n    var notes_length_index50\
    \ = 0\n    var notes_length_index51 = 0\n    var notes_length_index52 = 0\n  \
    \  var notes_length_index53 = 0\n    var notes_length_index54 = 0\n    var notes_length_index55\
    \ = 0\n    var notes_length_index56 = 0\n    var notes_length_index57 = 0\n  \
    \  var notes_length_index58 = 0\n    var notes_length_index59 = 0\n    var notes_length_index60\
    \ = 0\n    var notes_length_index61\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_5bkwhp8.swift:76:9: error: type annotation missing in pattern\n\
    \    var notes_length_index61\n        ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_value\
    \ = 0\n    var current_note_length_value_index = 0\n    var current_note_length_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1902vg0i.swift:66:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp1902vg0i.swift:24:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp1902vg0i.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp1902vg0i.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp1902vg0i.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp1902vg0i.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp1902vg0i.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beats_count = 0\n    var note_length = -1\n\
    \    var note_number = -1\n    var note_char = -1\n    var note_char_count = -1\n\
    \    var note_char_length = -1\n    var note_char_is_space = -1\n    var note_char_is_digit\
    \ = -1\n    var note_char_is_letter = -1\n    var note_char_is_symbol = -1\n \
    \   var note_char_is_punctuation = -1\n    var note_char_is_symbol = -1\n    var\
    \ note_char_is_space = -1\n    var note_char_is_digit = -1\n    var note_char_is_letter\
    \ = -1\n    var note_char_is_symbol = -1\n    var note_char_is_punctuation = -1\n\
    \    var note_char_is_symbol = -1\n    var note_char_is_space = -1\n    var note_char_is_digit\
    \ = -1\n    var note_char_is_letter = -1\n    var note_char_is_symbol = -1\n \
    \   var note_char_is_punctuation = -1\n    var note_char_is_symbol = -1\n    var\
    \ note_char_is_space = -1\n    var note_char_is_digit = -1\n    var note_char_is_letter\
    \ = -1\n    var note_char_is_symbol = -1\n    var note_char_is_punctuation = -1\n\
    \    var note_char_is_symbol = -1\n    var note_char_is_space = -1\n    var note_char_is_digit\
    \ = -1\n    var note_char_is_letter = -1\n    var note_char_is_symbol = -1\n \
    \   var note_char_is_punctuation = -1\n    var note_char_is_symbol = -1\n    var\
    \ note_char_is_space = -1\n    var note_char_is_digit = -1\n    var note_char_is_letter\
    \ = -1\n    var note_char_is_symbol = -1\n    var note_char_is_punctuation = -1\n\
    \    var note_char_is_symbol = -1\n    var note_char_is_space = -1\n    var note_char_is_digit\
    \ = -1\n    var note_char_is_letter = -1\n    var note_char_is_symbol = -1\n \
    \   var note_char_is_punctuation = -1\n    var note_char_is_symbol = -1\n    var\
    \ note_char_is_space = -1\n    var note_char_is_digit = -1\n    var note_char_is_letter\
    \ = -1\n    var note_char_is_symbol = -1\n    var note_char_is_punctuation = -1\n\
    \    var note_char_is_symbol = -1\n    var note_char_is_space = -1\n    var note_char_is_digit\
    \ = -1\n    var note_char_is_letter = -1\n    var note_char_is_symbol = -1\n \
    \   var note_char_is_punctuation = -1\n    var note_char_is_symbol = -1\n    var\
    \ note_char_is_space = -1\n    var note_char_is_digit = -1\n    var note_char_is_letter\
    \ = -1\n    var note_char_is_symbol = -1\n    var note_char_is_punctuation = -1\n\
    \    var note_char_is_symbol = -1\n    var note_char_is_space = -1\n    var note_char_is_digit\
    \ = -1\n    var note_char_is_letter = -1\n    var note_char_is_symbol = -1\n \
    \   var note_char_is_punctuation = -1\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpgtcvyk3a.swift:25:9: error: invalid redeclaration of 'note_char_is_symbol'\n\
    \    var note_char_is_symbol = -1\n        ^\n/tmp/tmpgtcvyk3a.swift:23:9: note:\
    \ 'note_char_is_symbol' previously declared here\n    var note_char_is_symbol\
    \ = -1\n        ^\n/tmp/tmpgtcvyk3a.swift:26:9: error: invalid redeclaration of\
    \ 'note_char_is_space'\n    var note_char_is_space = -1\n        ^\n/tmp/tmpgtcvyk3a.swift:20:9:\
    \ note: 'note_char_is_space' previously declared here\n    var note_char_is_space\
    \ = -1\n        ^\n/tmp/tmpgtcvyk3a.swift:27:9: error: invalid redeclaration of\
    \ 'note_char_is_digit'\n    var note_char_is_digit = -1\n        ^\n/tmp/tmpgtcvyk3a.swift:21:9:\
    \ note: 'note_char_is_digit' previously declared here\n    var note_char_is_digit\
    \ = -1\n        ^\n/tmp/tmpgtcvyk3a.swift:28:9: error: invalid redeclaration of\
    \ 'note_char_is_letter'\n    var note_char_is_letter = -1\n        ^\n/tmp/tmpgtcvyk3a.swift:22:9:\
    \ note: 'note_char_is_letter' previously declared here\n    var note_char_is_letter\
    \ = -1\n        ^\n/tmp/tmpgtcvyk3a.swift:29:9: error: invalid redeclaration of\
    \ 'note_char_is_symbol'\n    var note_char_is_symbol = -1\n        ^\n/tmp/tmpgtcvyk3a.swift:23:9:\
    \ note: 'note_char_is_symbol' previously declared here\n    var note_char_is_symbol\
    \ = -1\n        ^\n/tmp/tmpgtcvyk3a.swift:30:9: error: invalid redeclaration of\
    \ 'note_char_is_punctuation'\n    var note_char_is_punctuation = -1\n        ^\n\
    /tmp/tmpgtcvyk3a.swift:24:9: note: 'note_char_is_punctuation' previously declared\
    \ here\n    var note_char_is_punctuation = -1\n        ^\n/tmp/tmpgtcvyk3a.swift:31:9:\
    \ error: invalid redeclaration of 'note_char_is_symbol'\n    var note_char_is_symbol\
    \ = -1\n        ^\n/tmp/tmpgtcvyk3a.swift:23:9: note: 'note_char_is_symbol' previously\
    \ declared here\n    var note_char_is_symbol = -1\n        ^\n/tmp/tmpgtcvyk3a.swift:32:9:\
    \ error: invalid redeclaration of 'note_char_is_space'\n    var note_char_is_space\
    \ = -1\n        ^\n/tmp/tmpgtcvyk3a.swift:20:9: note: 'note_char_is_space' previously\
    \ declared here\n    var note_char_is_space = -1\n        ^\n/tmp/tmpgtcvyk3a.swift:33:9:\
    \ err"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = 0\n    var last =\
    \ 0\n    var lastNote = 0\n    var lastBeat = 0\n    var lastBeatNote = 0\n  \
    \  var lastBeatNoteBeat = 0\n    var lastBeatNoteBeatBeat = 0\n    var lastBeatNoteBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1xiqqyqk.swift:27:9: error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp1xiqqyqk.swift:26:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp1xiqqyqk.swift:28:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp1xiqqyqk.swift:26:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp1xiqqyqk.swift:30:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp1xiqqyqk.swift:29:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp1xiqqyqk.swift:31:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp1xiqqyqk.swift:29:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp1xiqqyqk.swift:32:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp1xiqqyqk.swift:29:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp1xiqqyqk.swift:33:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp1xiqqyqk.swift:29:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat "
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array: [Int]\
    \ = []\n    var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_string\
    \ = \"\"\n    var current_note_string = \"\"\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index_index = 0\n    var current_note_string_index_index\
    \ = 0\n    var current_note_string_index_index = 0\n    var current_note_string_index_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp075u2szq.swift:21:9: error: invalid redeclaration of 'current_note_string_index_index'\n\
    \    var current_note_string_index_index = 0\n        ^\n/tmp/tmp075u2szq.swift:20:9:\
    \ note: 'current_note_string_index_index' previously declared here\n    var current_note_string_index_index\
    \ = 0\n        ^\n/tmp/tmp075u2szq.swift:22:9: error: invalid redeclaration of\
    \ 'current_note_string_index_index'\n    var current_note_string_index_index =\
    \ 0\n        ^\n/tmp/tmp075u2szq.swift:20:9: note: 'current_note_string_index_index'\
    \ previously declared here\n    var current_note_string_index_index = 0\n    \
    \    ^\n/tmp/tmp075u2szq.swift:23:9: error: invalid redeclaration of 'current_note_string_index_index'\n\
    \    var current_note_string_index_index = 0\n        ^\n/tmp/tmp075u2szq.swift:20:9:\
    \ note: 'current_note_string_index_index' previously declared here\n    var current_note_string_index_index\
    \ = 0\n        ^\n/tmp/tmp075u2szq.swift:24:9: error: invalid redeclaration of\
    \ 'current_note_string_index'\n    var current_note_string_index = 0\n       \
    \ ^\n/tmp/tmp075u2szq.swift:19:9: note: 'current_note_string_index' previously\
    \ declared here\n    var current_note_string_index = 0\n        ^\n/tmp/tmp075u2szq.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_string_index'\n    var current_note_string_index\
    \ = 0\n        ^\n/tmp/tmp075u2szq.swift:19:9: note: 'current_note_string_index'\
    \ previously declared here\n    var current_note_string_index = 0\n        ^\n\
    /tmp/tmp075u2szq.swift:26:9: error: invalid redeclaration of 'current_note_string_index'\n\
    \    var current_note_string_index = 0\n        ^\n/tmp/tmp075u2szq.swift:19:9:\
    \ note: 'current_note_string_index' previously declared here\n    var current_note_string_index\
    \ = 0\n        ^\n/tmp/tmp075u2szq.swift:27:9: error: invalid redeclaration of\
    \ 'current_note_string_index'\n    var current_note_string_index = 0\n       \
    \ ^\n/tmp/tmp075u2szq.swift:19:9: note: 'current_note_string_index' previously\
    \ declared here\n    var current_note_string_index = 0\n        ^\n/tmp/tmp075u2szq.swift:28:9:\
    \ error: invalid redeclaration of 'cur"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array: [Int]\
    \ = []\n    var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_string\
    \ = \"\"\n    var current_note_length_string_index = 0\n    var current_note_length_string_value\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_index = 0\n    var current_note_length_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string = \"\"\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpwhuuu9he.swift:26:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_index = 0\n        ^\n\
    /tmp/tmpwhuuu9he.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpwhuuu9he.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpwhuuu9he.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpwhuuu9he.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpwhuuu9he.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpwhuuu9he.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpwhuuu9he.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpwhuuu9he.swift:31:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpwhuuu9he.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpwhuuu9he.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    for c in\
    \ music_string {\n        if c == 'o' {\n            beats.append(beat)\n    \
    \        notes.append(note)\n            beat = 0\n            note = \"\"\n \
    \       } else if c == '|' {\n            beats.append(beat)\n            notes.append(note)\n\
    \            beat = 0\n            note = \"\"\n        } else {\n           \
    \ note += String(c)\n        }\n    }\n    beats.append(beat)\n    notes.append(note)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpl_17blk2.swift:17:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpl_17blk2.swift:22:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var lastNote = \"\"\n    var lastNoteBeat = 0\n    var lastNoteBeatCount\
    \ = 0\n    var lastNoteBeatCount2 = 0\n    var lastNoteBeatCount3 = 0\n    var\
    \ lastNoteBeatCount4 = 0\n    var lastNoteBeatCount5 = 0\n    var lastNoteBeatCount6\
    \ = 0\n    var lastNoteBeatCount7 = 0\n    var lastNoteBeatCount8 = 0\n    var\
    \ lastNoteBeatCount9 = 0\n    var lastNoteBeatCount10 = 0\n    var lastNoteBeatCount11\
    \ = 0\n    var lastNoteBeatCount12 = 0\n    var lastNoteBeatCount13 = 0\n    var\
    \ lastNoteBeatCount14 = 0\n    var lastNoteBeatCount15 = 0\n    var lastNoteBeatCount16\
    \ = 0\n    var lastNoteBeatCount17 = 0\n    var lastNoteBeatCount18 = 0\n    var\
    \ lastNoteBeatCount19 = 0\n    var lastNoteBeatCount20 = 0\n    var lastNoteBeatCount21\
    \ = 0\n    var lastNoteBeatCount22 = 0\n    var lastNoteBeatCount23 = 0\n    var\
    \ lastNoteBeatCount24 = 0\n    var lastNoteBeatCount25 = 0\n    var lastNoteBeatCount26\
    \ = 0\n    var lastNoteBeatCount27 = 0\n    var lastNoteBeatCount28 = 0\n    var\
    \ lastNoteBeatCount29 = 0\n    var lastNoteBeatCount30 = 0\n    var lastNoteBeatCount31\
    \ = 0\n    var lastNoteBeatCount32 = 0\n    var lastNoteBeatCount33 = 0\n    var\
    \ lastNoteBeatCount34 = 0\n    var lastNoteBeatCount35 = 0\n    var lastNoteBeatCount36\
    \ = 0\n    var lastNoteBeatCount37 = 0\n    var lastNoteBeatCount38 = 0\n    var\
    \ lastNoteBeatCount39 = 0\n    var lastNoteBeatCount40 = 0\n    var lastNoteBeatCount41\
    \ = 0\n    var lastNoteBeatCount42 = 0\n    var lastNoteBeatCount43 = 0\n    var\
    \ lastNoteBeatCount44 = 0\n    var lastNoteBeatCount45 = 0\n    var lastNoteBeatCount46\
    \ = 0\n    var lastNoteBeatCount47 = 0\n    var lastNoteBeatCount48 = 0\n    var\
    \ lastNoteBeatCount49 = 0\n    var lastNoteBeatCount50 = 0\n    var lastNoteBeatCount51\
    \ = 0\n    var lastNoteBeatCount52 = 0\n    var lastNoteBeatCount53\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpc__0eva3.swift:71:9: error: type annotation missing in pattern\n\
    \    var lastNoteBeatCount53\n        ^\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = 0\n    var last =\
    \ 0\n    var lastNote = 0\n    var lastBeat = 0\n    var lastBeatNote = 0\n  \
    \  var lastBeatNoteBeat = 0\n    var lastBeatNoteBeatBeat = 0\n    var lastBeatNoteBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeat\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpt8c9v77i.swift:26:9: error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpt8c9v77i.swift:25:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpt8c9v77i.swift:27:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpt8c9v77i.swift:25:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpt8c9v77i.swift:28:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpt8c9v77i.swift:25:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpt8c9v77i.swift:29:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpt8c9v77i.swift:25:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpt8c9v77i.swift:30:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpt8c9v77i.swift:25:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpt8c9v77i.swift:31:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpt8c9v77i.swift:25:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpt8c9v77i.swift:32:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastBeatNoteBeatBeatBeatBeatBeatBeat ="
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_value\
    \ = 0\n    var current_note_length_value_index = 0\n    var current_note_length_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpudyqlln5.swift:24:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpudyqlln5.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpudyqlln5.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpudyqlln5.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpudyqlln5.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpudyqlln5.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpudyqlln5.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpudyqlln5.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpudyqlln5.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpudyqlln5.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpudyqlln5.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpudyqlln5.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_valu"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var note_index\
    \ = 0\n    var note_length = 0\n    var note_length_index = 0\n    var note_length_index2\
    \ = 0\n    var note_length_index3 = 0\n    var note_length_index4 = 0\n    var\
    \ note_length_index5 = 0\n    var note_length_index6 = 0\n    var note_length_index7\
    \ = 0\n    var note_length_index8 = 0\n    var note_length_index9 = 0\n    var\
    \ note_length_index10 = 0\n    var note_length_index11 = 0\n    var note_length_index12\
    \ = 0\n    var note_length_index13 = 0\n    var note_length_index14 = 0\n    var\
    \ note_length_index15 = 0\n    var note_length_index16 = 0\n    var note_length_index17\
    \ = 0\n    var note_length_index18 = 0\n    var note_length_index19 = 0\n    var\
    \ note_length_index20 = 0\n    var note_length_index21 = 0\n    var note_length_index22\
    \ = 0\n    var note_length_index23 = 0\n    var note_length_index24 = 0\n    var\
    \ note_length_index25 = 0\n    var note_length_index26 = 0\n    var note_length_index27\
    \ = 0\n    var note_length_index28 = 0\n    var note_length_index29 = 0\n    var\
    \ note_length_index30 = 0\n    var note_length_index31 = 0\n    var note_length_index32\
    \ = 0\n    var note_length_index33 = 0\n    var note_length_index34 = 0\n    var\
    \ note_length_index35 = 0\n    var note_length_index36 = 0\n    var note_length_index37\
    \ = 0\n    var note_length_index38 = 0\n    var note_length_index39 = 0\n    var\
    \ note_length_index40 = 0\n    var note_length_index41 = 0\n    var note_length_index42\
    \ = 0\n    var note_length_index43 = 0\n    var note_length_index44 = 0\n    var\
    \ note_length_index45 = 0\n    var note_length_index46 = 0\n    var note_length_index47\
    \ = 0\n    var note_length_index48 = 0\n    var note_length_index49 = 0\n    var\
    \ note_length_index50 = 0\n    var note_length_index51 = 0\n    var note_length_index52\
    \ = 0\n    var note_length_index53 = 0\n    var note_length_index54 = 0\n    var\
    \ note_length_index55 = 0\n    var note_length_index56 = 0\n    var note_length_index57\
    \ = 0\n    var note_length_index58 = 0\n    var note_length_index59 = 0\n    var\
    \ note_length_index60 = 0\n    var note_length_index61 = 0\n    var note_length_index62\
    \ = 0\n    var note_length_index63 = 0\n    var note_length_index64 = 0\n    var\
    \ note_length_index65 = 0\n    var note_length_index66 = 0\n    var note_length_index67\
    \ = 0\n    var note_length_index68 = 0\n    var note_length_index69\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp3y90a2yc.swift:86:9: error: type annotation missing in pattern\n\
    \    var note_length_index69\n        ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_beats = [String]()\n    var beats_notes\
    \ = [String]()\n    var beats_notes_beats = [String]()\n    var beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats = [String]()\n    var beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats = [String]()\n\
    \    var beats_notes_beats_notes_beats_notes_beats_notes = [String]()\n    var\
    \ beats_notes_beats_notes_beats_notes_beats_notes_beats = [String]()\n    var\
    \ beats_notes_beats_notes_beats_notes_beats_notes_beats_notes = [String]()\n \
    \   var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes = [String]()\n\
    \    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats = [String]()\n\
    \    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beat\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp7v4raguz.swift:24:9: error: invalid redeclaration of 'beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\n\
    \    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes = [String]()\n\
    \        ^\n/tmp/tmp7v4raguz.swift:23:9: note: 'beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\
    \ previously declared here\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n        ^\n/tmp/tmp7v4raguz.swift:29:9: error: invalid redeclaration\
    \ of 'beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\n\
    \    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n        ^\n/tmp/tmp7v4raguz.swift:28:9: note: 'beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\
    \ previously declared here\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n        ^\n/tmp/tmp7v4raguz.swift:34:9: error: type annotation\
    \ missing in pattern\n    var beats_notes_beat\n        ^\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var note_index = 0\n    var beat_index = 0\n \
    \   var note_index2 = 0\n    var beat_index2 = 0\n    var note_index3 = 0\n  \
    \  var beat_index3 = 0\n    var note_index4 = 0\n    var beat_index4 = 0\n   \
    \ var note_index5 = 0\n    var beat_index5 = 0\n    var note_index6 = 0\n    var\
    \ beat_index6 = 0\n    var note_index7 = 0\n    var beat_index7 = 0\n    var note_index8\
    \ = 0\n    var beat_index8 = 0\n    var note_index9 = 0\n    var beat_index9 =\
    \ 0\n    var note_index10 = 0\n    var beat_index10 = 0\n    var note_index11\
    \ = 0\n    var beat_index11 = 0\n    var note_index12 = 0\n    var beat_index12\
    \ = 0\n    var note_index13 = 0\n    var beat_index13 = 0\n    var note_index14\
    \ = 0\n    var beat_index14 = 0\n    var note_index15 = 0\n    var beat_index15\
    \ = 0\n    var note_index16 = 0\n    var beat_index16 = 0\n    var note_index17\
    \ = 0\n    var beat_index17 = 0\n    var note_index18 = 0\n    var beat_index18\
    \ = 0\n    var note_index19 = 0\n    var beat_index19 = 0\n    var note_index20\
    \ = 0\n    var beat_index20 = 0\n    var note_index21 = 0\n    var beat_index21\
    \ = 0\n    var note_index22 = 0\n    var beat_index22 = 0\n    var note_index23\
    \ = 0\n    var beat_index23 = 0\n    var note_index24 = 0\n    var beat_index24\
    \ = 0\n    var note_index25 = 0\n    var beat_index25 = 0\n    var note_index26\
    \ = 0\n    var beat_index26 = 0\n    var note_index27 = 0\n    var beat_index27\
    \ = 0\n    var note_index28 = 0\n    var beat_index28 = 0\n    var note_index29\
    \ = 0\n    var beat_index29 = 0\n    var note_index30 = 0\n    var beat_index30\
    \ = 0\n    var note_index31 = 0\n    var beat_index31 = 0\n    var note_index32\
    \ = 0\n    var beat_index32 = 0\n    var note_index33 = 0\n    var beat_index33\
    \ = 0\n    var note_index34 = 0\n    var beat_index34 = 0\n    var note_index35\
    \ = 0\n    var beat_index35 = 0\n    var note_index36 = 0\n    var beat_index36\
    \ = 0\n    var note_index37 = 0\n    var beat_index37 = 0\n    var note_index38\
    \ = 0\n    var beat_index38 = 0\n    var note_index39 = 0\n    var beat_index39\
    \ = 0\n    var note_index40 = 0\n    var beat_index40 = 0\n    var note_index41\
    \ = 0\n    var beat_index41 = 0\n    var note_index42 = 0\n    var beat\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpundh2288.swift:97:9: error: type annotation missing in pattern\n\
    \    var beat\n        ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    for char\
    \ in music_string {\n        if char == \"o\" {\n            beats.append(beat)\n\
    \            beat = 0\n            notes.append(note)\n            note = \"\"\
    \n        } else if char == \"|\" {\n            beats.append(beat)\n        \
    \    beat = 0\n            notes.append(note)\n            note = \"\"\n     \
    \   } else if char == \".\" {\n            beats.append(beat)\n            beat\
    \ = 0\n            notes.append(note)\n            note = \"\"\n        } else\
    \ {\n            note += char\n        }\n    }\n    beats.append(beat)\n    return\
    \ beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpjihoyuyq.swift:33:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            note += char\n             \
    \       ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var note_count = 0\n    var note_char = \"\"\n  \
    \  var note_char_count = 0\n    var note_char_index = 0\n    var note_char_is_last\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n    var note_char_is_last_note\
    \ = false\n    var note_char_is_first_note = false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpk9m_nfb5.swift:21:9: error: invalid redeclaration of 'note_char_is_first_note'\n\
    \    var note_char_is_first_note = false\n        ^\n/tmp/tmpk9m_nfb5.swift:19:9:\
    \ note: 'note_char_is_first_note' previously declared here\n    var note_char_is_first_note\
    \ = false\n        ^\n/tmp/tmpk9m_nfb5.swift:22:9: error: invalid redeclaration\
    \ of 'note_char_is_last_note'\n    var note_char_is_last_note = false\n      \
    \  ^\n/tmp/tmpk9m_nfb5.swift:20:9: note: 'note_char_is_last_note' previously declared\
    \ here\n    var note_char_is_last_note = false\n        ^\n/tmp/tmpk9m_nfb5.swift:23:9:\
    \ error: invalid redeclaration of 'note_char_is_first_note'\n    var note_char_is_first_note\
    \ = false\n        ^\n/tmp/tmpk9m_nfb5.swift:19:9: note: 'note_char_is_first_note'\
    \ previously declared here\n    var note_char_is_first_note = false\n        ^\n\
    /tmp/tmpk9m_nfb5.swift:24:9: error: invalid redeclaration of 'note_char_is_last_note'\n\
    \    var note_char_is_last_note = false\n        ^\n/tmp/tmpk9m_nfb5.swift:20:9:\
    \ note: 'note_char_is_last_note' previously declared here\n    var note_char_is_last_note\
    \ = false\n        ^\n/tmp/tmpk9m_nfb5.swift:25:9: error: invalid redeclaration\
    \ of 'note_char_is_first_note'\n    var note_char_is_first_note = false\n    \
    \    ^\n/tmp/tmpk9m_nfb5.swift:19:9: note: 'note_char_is_first_note' previously\
    \ declared here\n    var note_char_is_first_note = false\n        ^\n/tmp/tmpk9m_nfb5.swift:26:9:\
    \ error: invalid redeclaration of 'note_char_is_last_note'\n    var note_char_is_last_note\
    \ = false\n        ^\n/tmp/tmpk9m_nfb5.swift:20:9: note: 'note_char_is_last_note'\
    \ previously declared here\n    var note_char_is_last_note = false\n        ^\n\
    /tmp/tmpk9m_nfb5.swift:27:9: error: invalid redeclaration of 'note_char_is_first_note'\n\
    \    var note_char_is_first_note = false\n        ^\n/tmp/tmpk9m_nfb5.swift:19:9:\
    \ note: 'note_char_is_first_note' previously declared here\n    var note_char_is_first_note\
    \ = false\n        ^\n/tmp/tmpk9m_nfb5.swift:28:9: error: invalid redeclaration\
    \ of 'note_char_is_last_note'\n    var note_char_is_last_note = false\n      \
    \  ^\n/tmp/tmpk9m_nf"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var notes_index = 0\n\
    \    var notes_length_index = 0\n    var notes_length_index2 = 0\n    var notes_length_index3\
    \ = 0\n    var notes_length_index4 = 0\n    var notes_length_index5 = 0\n    var\
    \ notes_length_index6 = 0\n    var notes_length_index7 = 0\n    var notes_length_index8\
    \ = 0\n    var notes_length_index9 = 0\n    var notes_length_index10 = 0\n   \
    \ var notes_length_index11 = 0\n    var notes_length_index12 = 0\n    var notes_length_index13\
    \ = 0\n    var notes_length_index14 = 0\n    var notes_length_index15 = 0\n  \
    \  var notes_length_index16 = 0\n    var notes_length_index17 = 0\n    var notes_length_index18\
    \ = 0\n    var notes_length_index19 = 0\n    var notes_length_index20 = 0\n  \
    \  var notes_length_index21 = 0\n    var notes_length_index22 = 0\n    var notes_length_index23\
    \ = 0\n    var notes_length_index24 = 0\n    var notes_length_index25 = 0\n  \
    \  var notes_length_index26 = 0\n    var notes_length_index27 = 0\n    var notes_length_index28\
    \ = 0\n    var notes_length_index29 = 0\n    var notes_length_index30 = 0\n  \
    \  var notes_length_index31 = 0\n    var notes_length_index32 = 0\n    var notes_length_index33\
    \ = 0\n    var notes_length_index34 = 0\n    var notes_length_index35 = 0\n  \
    \  var notes_length_index36 = 0\n    var notes_length_index37 = 0\n    var notes_length_index38\
    \ = 0\n    var notes_length_index39 = 0\n    var notes_length_index40 = 0\n  \
    \  var notes_length_index41 = 0\n    var notes_length_index42 = 0\n    var notes_length_index43\
    \ = 0\n    var notes_length_index44 = 0\n    var notes_length_index45 = 0\n  \
    \  var notes_length_index46 = 0\n    var notes_length_index47 = 0\n    var notes_length_index48\
    \ = 0\n    var notes_length_index49 = 0\n    var notes_length_index50 = 0\n  \
    \  var notes_length_index51 = 0\n    var notes_length_index52 = 0\n    var notes_length_index53\
    \ = 0\n    var notes_length_index54 = 0\n    var notes_length_index55 = 0\n  \
    \  var notes_length_index56 = 0\n    var notes_length_index57 = 0\n    var notes_length_index58\
    \ = 0\n    var notes_length_index59 = 0\n    var notes_length_index60 = 0\n  \
    \  var notes_length_index61 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8wh68uht.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp8wh68uht.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp8wh68uht.swift:14:9:\
    \ warning: initialization of variable 'notes_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:15:9: warning: initialization\
    \ of variable 'notes_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_index = 0\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmp8wh68uht.swift:16:9: warning: initialization of variable 'notes_length_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:17:9:\
    \ warning: initialization of variable 'notes_length_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:18:9: warning:\
    \ initialization of variable 'notes_length_index3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var notes_length_index3 = 0\n   \
    \ ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:19:9: warning: initialization\
    \ of variable 'notes_length_index4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_length_index4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp8wh68uht.swift:20:9: warning: initialization of variable 'notes_length_index5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:21:9:\
    \ warning: initialization of variable 'notes_length_index6' was never used; consider\
    \ replacing with assi"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    for char\
    \ in music_string {\n        switch char {\n        case \"o\":\n            note\
    \ = \"o\"\n            beat = 0\n        case \"o|\":\n            note = \"o|\"\
    \n            beat = 1\n        case \"|\":\n            note = \"|\"\n      \
    \      beat = 1\n        default:\n            notes.append(note)\n          \
    \  beats.append(beat)\n            note = \"\"\n            beat = 0\n       \
    \ }\n    }\n    notes.append(note)\n    beats.append(beat)\n    return beats\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpetiyouqc.swift:21:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array = [Int]()\n\
    \    var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_string\
    \ = \"\"\n    var current_note_length_string_index = 0\n    var current_note_length_string_value\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_index = 0\n    var current_note_length_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string = \"\"\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_kyklyq_.swift:26:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_index = 0\n        ^\n\
    /tmp/tmp_kyklyq_.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp_kyklyq_.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp_kyklyq_.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp_kyklyq_.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp_kyklyq_.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp_kyklyq_.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp_kyklyq_.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp_kyklyq_.swift:31:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp_kyklyq_.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp_kyklyq_.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var last = 0\n    var notes = [String]()\n\
    \    var notes_index = 0\n    var notes_index2 = 0\n    var notes_index3 = 0\n\
    \    var notes_index4 = 0\n    var notes_index5 = 0\n    var notes_index6 = 0\n\
    \    var notes_index7 = 0\n    var notes_index8 = 0\n    var notes_index9 = 0\n\
    \    var notes_index10 = 0\n    var notes_index11 = 0\n    var notes_index12 =\
    \ 0\n    var notes_index13 = 0\n    var notes_index14 = 0\n    var notes_index15\
    \ = 0\n    var notes_index16 = 0\n    var notes_index17 = 0\n    var notes_index18\
    \ = 0\n    var notes_index19 = 0\n    var notes_index20 = 0\n    var notes_index21\
    \ = 0\n    var notes_index22 = 0\n    var notes_index23 = 0\n    var notes_index24\
    \ = 0\n    var notes_index25 = 0\n    var notes_index26 = 0\n    var notes_index27\
    \ = 0\n    var notes_index28 = 0\n    var notes_index29 = 0\n    var notes_index30\
    \ = 0\n    var notes_index31 = 0\n    var notes_index32 = 0\n    var notes_index33\
    \ = 0\n    var notes_index34 = 0\n    var notes_index35 = 0\n    var notes_index36\
    \ = 0\n    var notes_index37 = 0\n    var notes_index38 = 0\n    var notes_index39\
    \ = 0\n    var notes_index40 = 0\n    var notes_index41 = 0\n    var notes_index42\
    \ = 0\n    var notes_index43 = 0\n    var notes_index44 = 0\n    var notes_index45\
    \ = 0\n    var notes_index46 = 0\n    var notes_index47 = 0\n    var notes_index48\
    \ = 0\n    var notes_index49 = 0\n    var notes_index50 = 0\n    var notes_index51\
    \ = 0\n    var notes_index52 = 0\n    var notes_index53 = 0\n    var notes_index54\
    \ = 0\n    var notes_index55 = 0\n    var notes_index56 = 0\n    var notes_index57\
    \ = 0\n    var notes_index58 = 0\n    var notes_index59 = 0\n    var notes_index60\
    \ = 0\n    var notes_index61 = 0\n    var notes_index62 = 0\n    var notes_index63\
    \ = 0\n    var notes_index64 = 0\n    var notes_index65 = 0\n    var notes_index66\
    \ = 0\n    var notes_index67 = 0\n    var notes_index68 = 0\n    var notes_index69\
    \ = 0\n    var notes_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpnf_pwkvt.swift:86:9: error: type annotation missing in pattern\n\
    \    var notes_index\n        ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var notes_index = 0\n\
    \    var notes_length_index = 0\n    var notes_length_index2 = 0\n    var notes_length_index3\
    \ = 0\n    var notes_length_index4 = 0\n    var notes_length_index5 = 0\n    var\
    \ notes_length_index6 = 0\n    var notes_length_index7 = 0\n    var notes_length_index8\
    \ = 0\n    var notes_length_index9 = 0\n    var notes_length_index10 = 0\n   \
    \ var notes_length_index11 = 0\n    var notes_length_index12 = 0\n    var notes_length_index13\
    \ = 0\n    var notes_length_index14 = 0\n    var notes_length_index15 = 0\n  \
    \  var notes_length_index16 = 0\n    var notes_length_index17 = 0\n    var notes_length_index18\
    \ = 0\n    var notes_length_index19 = 0\n    var notes_length_index20 = 0\n  \
    \  var notes_length_index21 = 0\n    var notes_length_index22 = 0\n    var notes_length_index23\
    \ = 0\n    var notes_length_index24 = 0\n    var notes_length_index25 = 0\n  \
    \  var notes_length_index26 = 0\n    var notes_length_index27 = 0\n    var notes_length_index28\
    \ = 0\n    var notes_length_index29 = 0\n    var notes_length_index30 = 0\n  \
    \  var notes_length_index31 = 0\n    var notes_length_index32 = 0\n    var notes_length_index33\
    \ = 0\n    var notes_length_index34 = 0\n    var notes_length_index35 = 0\n  \
    \  var notes_length_index36 = 0\n    var notes_length_index37 = 0\n    var notes_length_index38\
    \ = 0\n    var notes_length_index39 = 0\n    var notes_length_index40 = 0\n  \
    \  var notes_length_index41 = 0\n    var notes_length_index42 = 0\n    var notes_length_index43\
    \ = 0\n    var notes_length_index44 = 0\n    var notes_length_index45 = 0\n  \
    \  var notes_length_index46 = 0\n    var notes_length_index47 = 0\n    var notes_length_index48\
    \ = 0\n    var notes_length_index49 = 0\n    var notes_length_index50 = 0\n  \
    \  var notes_length_index51 = 0\n    var notes_length_index52 = 0\n    var notes_length_index53\
    \ = 0\n    var notes_length_index54 = 0\n    var notes_length_index55 = 0\n  \
    \  var notes_length_index56 = 0\n    var notes_length_index57 = 0\n    var notes_length_index58\
    \ = 0\n    var notes_length_index59 = 0\n    var notes_length_index60 = 0\n  \
    \  var notes_length_index61 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8wh68uht.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp8wh68uht.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp8wh68uht.swift:14:9:\
    \ warning: initialization of variable 'notes_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:15:9: warning: initialization\
    \ of variable 'notes_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_index = 0\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmp8wh68uht.swift:16:9: warning: initialization of variable 'notes_length_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:17:9:\
    \ warning: initialization of variable 'notes_length_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:18:9: warning:\
    \ initialization of variable 'notes_length_index3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var notes_length_index3 = 0\n   \
    \ ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:19:9: warning: initialization\
    \ of variable 'notes_length_index4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_length_index4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp8wh68uht.swift:20:9: warning: initialization of variable 'notes_length_index5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:21:9:\
    \ warning: initialization of variable 'notes_length_index6' was never used; consider\
    \ replacing with assi"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beats_count = 0\n    var notes_count = 0\n\
    \    var note = String()\n    var beat = Int()\n    var notes_index = -1\n   \
    \ var beats_index = -1\n    var notes_index_start = -1\n    var notes_index_end\
    \ = -1\n    var beats_index_start = -1\n    var beats_index_end = -1\n    var\
    \ notes_index_start = -1\n    var notes_index_end = -1\n    var notes_index_start_beat\
    \ = -1\n    var notes_index_end_beat = -1\n    var beats_index_start_beat = -1\n\
    \    var beats_index_end_beat = -1\n    var notes_index_start_beat = -1\n    var\
    \ notes_index_end_beat = -1\n    var notes_index_start_note = -1\n    var notes_index_end_note\
    \ = -1\n    var beats_index_start_note = -1\n    var beats_index_end_note = -1\n\
    \    var notes_index_start_note = -1\n    var notes_index_end_note = -1\n    var\
    \ notes_index_start_beat = -1\n    var notes_index_end_beat = -1\n    var notes_index_start_note\
    \ = -1\n    var notes_index_end_note = -1\n    var notes_index_start_beat = -1\n\
    \    var notes_index_end_beat = -1\n    var notes_index_start_note = -1\n    var\
    \ notes_index_end_note = -1\n    var notes_index_start_beat = -1\n    var notes_index_end_beat\
    \ = -1\n    var notes_index_start_note = -1\n    var notes_index_end_note = -1\n\
    \    var notes_index_start_beat = -1\n    var notes_index_end_beat = -1\n    var\
    \ notes_index_start_note = -1\n    var notes_index_end_note = -1\n    var notes_index_start_beat\
    \ = -1\n    var notes_index_end_beat = -1\n    var notes_index_start_note = -1\n\
    \    var notes_index_end_note = -1\n    var notes_index_start_beat = -1\n    var\
    \ notes_index_end_beat = -1\n    var notes_index_start_note = -1\n    var notes_index_end_note\
    \ = -1\n    var notes_index_start_beat = -1\n    var notes_index_end_beat = -1\n\
    \    var notes_index_start_note = -1\n    var notes_index_end_note = -1\n    var\
    \ notes_index_start_beat = -1\n    var notes_index_end_beat = -1\n    var notes_index_start_note\
    \ = -1\n    var notes_index_end_note = -1\n    var notes_index_start_beat = -1\n\
    \    var notes_index_end_beat = -1\n    var notes_index_start_note = -1\n    var\
    \ notes_index_end_note = -1\n    var notes_index_start_beat = -1\n    var notes_index_end_beat\
    \ = -1\n    var notes_index_start_note = -1\n    var notes_index_end_note = -1\n\
    \    var notes_index_start_beat\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpf25o166y.swift:24:9: error: invalid redeclaration of 'notes_index_start'\n\
    \    var notes_index_start = -1\n        ^\n/tmp/tmpf25o166y.swift:20:9: note:\
    \ 'notes_index_start' previously declared here\n    var notes_index_start = -1\n\
    \        ^\n/tmp/tmpf25o166y.swift:25:9: error: invalid redeclaration of 'notes_index_end'\n\
    \    var notes_index_end = -1\n        ^\n/tmp/tmpf25o166y.swift:21:9: note: 'notes_index_end'\
    \ previously declared here\n    var notes_index_end = -1\n        ^\n/tmp/tmpf25o166y.swift:30:9:\
    \ error: invalid redeclaration of 'notes_index_start_beat'\n    var notes_index_start_beat\
    \ = -1\n        ^\n/tmp/tmpf25o166y.swift:26:9: note: 'notes_index_start_beat'\
    \ previously declared here\n    var notes_index_start_beat = -1\n        ^\n/tmp/tmpf25o166y.swift:31:9:\
    \ error: invalid redeclaration of 'notes_index_end_beat'\n    var notes_index_end_beat\
    \ = -1\n        ^\n/tmp/tmpf25o166y.swift:27:9: note: 'notes_index_end_beat' previously\
    \ declared here\n    var notes_index_end_beat = -1\n        ^\n/tmp/tmpf25o166y.swift:36:9:\
    \ error: invalid redeclaration of 'notes_index_start_note'\n    var notes_index_start_note\
    \ = -1\n        ^\n/tmp/tmpf25o166y.swift:32:9: note: 'notes_index_start_note'\
    \ previously declared here\n    var notes_index_start_note = -1\n        ^\n/tmp/tmpf25o166y.swift:37:9:\
    \ error: invalid redeclaration of 'notes_index_end_note'\n    var notes_index_end_note\
    \ = -1\n        ^\n/tmp/tmpf25o166y.swift:33:9: note: 'notes_index_end_note' previously\
    \ declared here\n    var notes_index_end_note = -1\n        ^\n/tmp/tmpf25o166y.swift:38:9:\
    \ error: invalid redeclaration of 'notes_index_start_beat'\n    var notes_index_start_beat\
    \ = -1\n        ^\n/tmp/tmpf25o166y.swift:26:9: note: 'notes_index_start_beat'\
    \ previously declared here\n    var notes_index_start_beat = -1\n        ^\n/tmp/tmpf25o166y.swift:39:9:\
    \ error: invalid redeclaration of 'notes_index_end_beat'\n    var notes_index_end_beat\
    \ = -1\n        ^\n/tmp/tmpf25o166y.swift:27:9: note: 'notes_index_end_beat' previously\
    \ declared here\n    var notes_index_end_beat = -1\n        ^\n/tmp/tmpf25o166y"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    for c in music_string {\n        if c == 'o' {\n            if note\
    \ != \"\" {\n                notes.append(note)\n                note = \"\"\n\
    \            }\n            beat = 0\n            last = 0\n        } else if\
    \ c == '|' {\n            if note != \"\" {\n                notes.append(note)\n\
    \                note = \"\"\n            }\n            beat = 0\n          \
    \  last = 1\n        } else if c == '.' {\n            if note != \"\" {\n   \
    \             notes.append(note)\n                note = \"\"\n            }\n\
    \            beat = 1\n            last = 0\n        } else {\n            note\
    \ = note + String(c)\n        }\n        beats.append(beat)\n    }\n    if note\
    \ != \"\" {\n        notes.append(note)\n    }\n    return beats\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpm0hbw6xz.swift:18:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpm0hbw6xz.swift:25:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmpm0hbw6xz.swift:32:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.' {\n                       ^~~\n\
    \                       \".\"\n/tmp/tmpm0hbw6xz.swift:16:9: warning: variable\
    \ 'last' was written to, but never read\n    var last = 0\n        ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = String()\n    var note_count = 0\n    var last_note\
    \ = String()\n    var last_note_count = 0\n    var last_beat = 0\n    var last_beat_count\
    \ = 0\n    var last_note_index = -1\n    var last_note_index2 = -1\n    var last_note_index3\
    \ = -1\n    var last_note_index4 = -1\n    var last_note_index5 = -1\n    var\
    \ last_note_index6 = -1\n    var last_note_index7 = -1\n    var last_note_index8\
    \ = -1\n    var last_note_index9 = -1\n    var last_note_index10 = -1\n    var\
    \ last_note_index11 = -1\n    var last_note_index12 = -1\n    var last_note_index13\
    \ = -1\n    var last_note_index14 = -1\n    var last_note_index15 = -1\n    var\
    \ last_note_index16 = -1\n    var last_note_index17 = -1\n    var last_note_index18\
    \ = -1\n    var last_note_index19 = -1\n    var last_note_index20 = -1\n    var\
    \ last_note_index21 = -1\n    var last_note_index22 = -1\n    var last_note_index23\
    \ = -1\n    var last_note_index24 = -1\n    var last_note_index25 = -1\n    var\
    \ last_note_index26 = -1\n    var last_note_index27 = -1\n    var last_note_index28\
    \ = -1\n    var last_note_index29 = -1\n    var last_note_index30 = -1\n    var\
    \ last_note_index31 = -1\n    var last_note_index32 = -1\n    var last_note_index33\
    \ = -1\n    var last_note_index34 = -1\n    var last_note_index35 = -1\n    var\
    \ last_note_index36 = -1\n    var last_note_index37 = -1\n    var last_note_index38\
    \ = -1\n    var last_note_index39 = -1\n    var last_note_index40 = -1\n    var\
    \ last_note_index41 = -1\n    var last_note_index42 = -1\n    var last_note_index43\
    \ = -1\n    var last_note_index44 = -1\n    var last_note_index45 = -1\n    var\
    \ last_note_index46 = -1\n    var last_note_index47 = -1\n    var last_note_index48\
    \ = -1\n    var last_note_index49 = -1\n    var last_note_index50 = -1\n    var\
    \ last_note_index51 = -1\n    var last_note_index52 = -1\n    var last_note_index53\
    \ = -1\n    var last_note_index54 = -1\n    var last_note_index55 = -1\n    var\
    \ last_note_index56 = -1\n    var last_note_index57 = -1\n    var last_note_index58\
    \ = -1\n    var last_note_index59 = -1\n    var last_note_index60 = -1\n    var\
    \ last_note_index61 = -1\n    var last_note_index62 = -1\n    var last_note_index63\
    \ = -1\n    var last_note_index64 = -1\n    var last_note_index65 = -1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpn_yl0jiz.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpn_yl0jiz.swift:13:9: warning:\
    \ initialization of variable 'beat' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n/tmp/tmpn_yl0jiz.swift:14:9:\
    \ warning: initialization of variable 'note' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note = String()\n    ~~~~^~~~\n\
    \    _\n/tmp/tmpn_yl0jiz.swift:15:9: warning: initialization of variable 'note_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_count = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpn_yl0jiz.swift:16:9:\
    \ warning: initialization of variable 'last_note' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var last_note = String()\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpn_yl0jiz.swift:17:9: warning: initialization of variable 'last_note_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_note_count = 0\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpn_yl0jiz.swift:18:9:\
    \ warning: initialization of variable 'last_beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var last_beat = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpn_yl0jiz.swift:19:9: warning: initialization of variable 'last_beat_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_beat_count = 0\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpn_yl0jiz.swift:20:9:\
    \ warning: initialization of variable 'last_note_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var last_note_index = -1\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpn_yl0jiz.swift:21:9: warning: initialization\
    \ of variable 'last_note_index2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var last_note_index2 = -1\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpn_yl0jiz.swift:22:9: w"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var lastNote = \"\"\n    var lastNoteIndex = 0\n    var lastNoteIndex2\
    \ = 0\n    var lastNoteIndex3 = 0\n    var lastNoteIndex4 = 0\n    var lastNoteIndex5\
    \ = 0\n    var lastNoteIndex6 = 0\n    var lastNoteIndex7 = 0\n    var lastNoteIndex8\
    \ = 0\n    var lastNoteIndex9 = 0\n    var lastNoteIndex10 = 0\n    var lastNoteIndex11\
    \ = 0\n    var lastNoteIndex12 = 0\n    var lastNoteIndex13 = 0\n    var lastNoteIndex14\
    \ = 0\n    var lastNoteIndex15 = 0\n    var lastNoteIndex16 = 0\n    var lastNoteIndex17\
    \ = 0\n    var lastNoteIndex18 = 0\n    var lastNoteIndex19 = 0\n    var lastNoteIndex20\
    \ = 0\n    var lastNoteIndex21 = 0\n    var lastNoteIndex22 = 0\n    var lastNoteIndex23\
    \ = 0\n    var lastNoteIndex24 = 0\n    var lastNoteIndex25 = 0\n    var lastNoteIndex26\
    \ = 0\n    var lastNoteIndex27 = 0\n    var lastNoteIndex28 = 0\n    var lastNoteIndex29\
    \ = 0\n    var lastNoteIndex30 = 0\n    var lastNoteIndex31 = 0\n    var lastNoteIndex32\
    \ = 0\n    var lastNoteIndex33 = 0\n    var lastNoteIndex34 = 0\n    var lastNoteIndex35\
    \ = 0\n    var lastNoteIndex36 = 0\n    var lastNoteIndex37 = 0\n    var lastNoteIndex38\
    \ = 0\n    var lastNoteIndex39 = 0\n    var lastNoteIndex40 = 0\n    var lastNoteIndex41\
    \ = 0\n    var lastNoteIndex42 = 0\n    var lastNoteIndex43 = 0\n    var lastNoteIndex44\
    \ = 0\n    var lastNoteIndex45 = 0\n    var lastNoteIndex46 = 0\n    var lastNoteIndex47\
    \ = 0\n    var lastNoteIndex48 = 0\n    var lastNoteIndex49 = 0\n    var lastNoteIndex50\
    \ = 0\n    var lastNoteIndex51 = 0\n    var lastNoteIndex52 = 0\n    var lastNoteIndex53\
    \ = 0\n    var lastNoteIndex54 = 0\n    var lastNoteIndex55 = 0\n    var lastNoteIndex56\
    \ = 0\n    var lastNoteIndex57 = 0\n    var lastNoteIndex58 = 0\n    var lastNoteIndex59\
    \ = 0\n    var lastNoteIndex60 = 0\n    var lastNoteIndex61 = 0\n    var lastNoteIndex62\
    \ = 0\n    var lastNoteIndex63 = 0\n    var lastNoteIndex64 = 0\n    var lastNoteIndex65\
    \ = 0\n    var lastNoteIndex66 = 0\n    var lastNoteIndex67 = 0\n    var lastNoteIndex68\
    \ = 0\n    var lastNoteIndex69 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp6_5snskc.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp6_5snskc.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp6_5snskc.swift:14:9:\
    \ warning: initialization of variable 'beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmp6_5snskc.swift:15:9: warning: initialization of variable 'note' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var note\
    \ = \"\"\n    ~~~~^~~~\n    _\n/tmp/tmp6_5snskc.swift:16:9: warning: initialization\
    \ of variable 'last' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var last = 0\n    ~~~~^~~~\n    _\n/tmp/tmp6_5snskc.swift:17:9:\
    \ warning: initialization of variable 'lastNote' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var lastNote = \"\"\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmp6_5snskc.swift:18:9: warning: initialization of variable 'lastNoteIndex'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var lastNoteIndex = 0\n    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmp6_5snskc.swift:19:9:\
    \ warning: initialization of variable 'lastNoteIndex2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var lastNoteIndex2 = 0\n\
    \    ~~~~^~~~~~~~~~~~~~\n    _\n/tmp/tmp6_5snskc.swift:20:9: warning: initialization\
    \ of variable 'lastNoteIndex3' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var lastNoteIndex3 = 0\n    ~~~~^~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp6_5snskc.swift:21:9: warning: initialization of variable 'lastNoteIndex4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var lastNoteIndex4 = 0\n    ~~~~^~~~~~~~~~~~~~\n    _\n/tmp/tmp6_5snskc.swift:22:9:\
    \ warning: initialization of variable 'lastNoteIndex5' was "
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_index2\
    \ = 0\n    var current_note_length_index3 = 0\n    var current_note_length_index4\
    \ = 0\n    var current_note_length_index5 = 0\n    var current_note_length_index6\
    \ = 0\n    var current_note_length_index7 = 0\n    var current_note_length_index8\
    \ = 0\n    var current_note_length_index9 = 0\n    var current_note_length_index10\
    \ = 0\n    var current_note_length_index11 = 0\n    var current_note_length_index12\
    \ = 0\n    var current_note_length_index13 = 0\n    var current_note_length_index14\
    \ = 0\n    var current_note_length_index15 = 0\n    var current_note_length_index16\
    \ = 0\n    var current_note_length_index17 = 0\n    var current_note_length_index18\
    \ = 0\n    var current_note_length_index19 = 0\n    var current_note_length_index20\
    \ = 0\n    var current_note_length_index21 = 0\n    var current_note_length_index22\
    \ = 0\n    var current_note_length_index23 = 0\n    var current_note_length_index24\
    \ = 0\n    var current_note_length_index25 = 0\n    var current_note_length_index26\
    \ = 0\n    var current_note_length_index27 = 0\n    var current_note_length_index28\
    \ = 0\n    var current_note_length_index29 = 0\n    var current_note_length_index30\
    \ = 0\n    var current_note_length_index31 = 0\n    var current_note_length_index32\
    \ = 0\n    var current_note_length_index33 = 0\n    var current_note_length_index34\
    \ = 0\n    var current_note_length_index35 = 0\n    var current_note_length_index36\
    \ = 0\n    var current_note_length_index37 = 0\n    var current_note_length_index38\
    \ = 0\n    var current_note_length_index39 = 0\n    var current_note_length_index40\
    \ = 0\n    var current_note_length_index41 = 0\n    var current_note_length_index42\
    \ = 0\n    var current_note_length_index43 = 0\n    var current_note_length_index44\
    \ = 0\n    var current_note_length_index45 = 0\n    var current_note_length_index46\
    \ = 0\n    var current_note_length_index47 = 0\n    var current_note_length_index48\
    \ = 0\n    var current_note_length_index49 = 0\n    var current_note_length_index50\
    \ = 0\n    var current_note_length_index51 = 0\n    var current_note_length_index52\
    \ = 0\n    var current_note_length_index53 = 0\n    var current_note_length_index54\
    \ = 0\n    var current_note_length_index55 = 0\n    var current_note_length_index56\
    \ = 0\n    var current_note_length_index57 = 0\n    var current_note_length_index58\
    \ = 0\n    var current_note_length_index59 = 0\n    var current_note_length_index60\
    \ = 0\n    var current_note_length_index61 = 0\n    var current_note_\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpkpfinihc.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_note_\n        ^\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var notes_index = 0\n\
    \    var notes_length_index = 0\n    var notes_length_index2 = 0\n    var notes_length_index3\
    \ = 0\n    var notes_length_index4 = 0\n    var notes_length_index5 = 0\n    var\
    \ notes_length_index6 = 0\n    var notes_length_index7 = 0\n    var notes_length_index8\
    \ = 0\n    var notes_length_index9 = 0\n    var notes_length_index10 = 0\n   \
    \ var notes_length_index11 = 0\n    var notes_length_index12 = 0\n    var notes_length_index13\
    \ = 0\n    var notes_length_index14 = 0\n    var notes_length_index15 = 0\n  \
    \  var notes_length_index16 = 0\n    var notes_length_index17 = 0\n    var notes_length_index18\
    \ = 0\n    var notes_length_index19 = 0\n    var notes_length_index20 = 0\n  \
    \  var notes_length_index21 = 0\n    var notes_length_index22 = 0\n    var notes_length_index23\
    \ = 0\n    var notes_length_index24 = 0\n    var notes_length_index25 = 0\n  \
    \  var notes_length_index26 = 0\n    var notes_length_index27 = 0\n    var notes_length_index28\
    \ = 0\n    var notes_length_index29 = 0\n    var notes_length_index30 = 0\n  \
    \  var notes_length_index31 = 0\n    var notes_length_index32 = 0\n    var notes_length_index33\
    \ = 0\n    var notes_length_index34 = 0\n    var notes_length_index35 = 0\n  \
    \  var notes_length_index36 = 0\n    var notes_length_index37 = 0\n    var notes_length_index38\
    \ = 0\n    var notes_length_index39 = 0\n    var notes_length_index40 = 0\n  \
    \  var notes_length_index41 = 0\n    var notes_length_index42 = 0\n    var notes_length_index43\
    \ = 0\n    var notes_length_index44 = 0\n    var notes_length_index45 = 0\n  \
    \  var notes_length_index46 = 0\n    var notes_length_index47 = 0\n    var notes_length_index48\
    \ = 0\n    var notes_length_index49 = 0\n    var notes_length_index50 = 0\n  \
    \  var notes_length_index51 = 0\n    var notes_length_index52 = 0\n    var notes_length_index53\
    \ = 0\n    var notes_length_index54 = 0\n    var notes_length_index55 = 0\n  \
    \  var notes_length_index56 = 0\n    var notes_length_index57 = 0\n    var notes_length_index58\
    \ = 0\n    var notes_length_index59 = 0\n    var notes_length_index60 = 0\n  \
    \  var notes_length_index61 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8wh68uht.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp8wh68uht.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp8wh68uht.swift:14:9:\
    \ warning: initialization of variable 'notes_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:15:9: warning: initialization\
    \ of variable 'notes_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_index = 0\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmp8wh68uht.swift:16:9: warning: initialization of variable 'notes_length_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:17:9:\
    \ warning: initialization of variable 'notes_length_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:18:9: warning:\
    \ initialization of variable 'notes_length_index3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var notes_length_index3 = 0\n   \
    \ ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:19:9: warning: initialization\
    \ of variable 'notes_length_index4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_length_index4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp8wh68uht.swift:20:9: warning: initialization of variable 'notes_length_index5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:21:9:\
    \ warning: initialization of variable 'notes_length_index6' was never used; consider\
    \ replacing with assi"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array: [Int]\
    \ = []\n    var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_value\
    \ = 0\n    var current_note_length_value_next = 0\n    var current_note_length_value_next_next\
    \ = 0\n    var current_note_length_value_next_next_next = 0\n    var current_note_length_value_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next = 0\n    var\
    \ current_note_length_value_next_next_next_next_next_next = 0\n    var current_note_length_value_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpu3q9_c78.swift:28:9: error: invalid redeclaration of 'current_note_length_value_next_next_next_next_next_next_next_next_next_next'\n\
    \    var current_note_length_value_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpu3q9_c78.swift:27:9: note: 'current_note_length_value_next_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpu3q9_c78.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next'\n\
    \    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpu3q9_c78.swift:29:9: note: 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpu3q9_c78.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next'\n\
    \    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpu3q9_c78.swift:31:9: note: 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpu3q9_c78.swift:33:9: error: invalid redeclaration of\
    \ 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next'\n\
    \    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpu3q9_c78.swift:31:9: note: 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpu3q9_c78.swift:34:9: error: invalid redeclaratio"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var note_index\
    \ = 0\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_beat\
    \ = 0\n    var last_beat_index = 0\n    var last_note_index = 0\n    var last_note_beat\
    \ = 0\n    var last_note_beat_index = 0\n    var last_note_beat_index2 = 0\n \
    \   var last_note_beat_index3 = 0\n    var last_note_beat_index4 = 0\n    var\
    \ last_note_beat_index5 = 0\n    var last_note_beat_index6 = 0\n    var last_note_beat_index7\
    \ = 0\n    var last_note_beat_index8 = 0\n    var last_note_beat_index9 = 0\n\
    \    var last_note_beat_index10 = 0\n    var last_note_beat_index11 = 0\n    var\
    \ last_note_beat_index12 = 0\n    var last_note_beat_index13 = 0\n    var last_note_beat_index14\
    \ = 0\n    var last_note_beat_index15 = 0\n    var last_note_beat_index16 = 0\n\
    \    var last_note_beat_index17 = 0\n    var last_note_beat_index18 = 0\n    var\
    \ last_note_beat_index19 = 0\n    var last_note_beat_index20 = 0\n    var last_note_beat_index21\
    \ = 0\n    var last_note_beat_index22 = 0\n    var last_note_beat_index23 = 0\n\
    \    var last_note_beat_index24 = 0\n    var last_note_beat_index25 = 0\n    var\
    \ last_note_beat_index26 = 0\n    var last_note_beat_index27 = 0\n    var last_note_beat_index28\
    \ = 0\n    var last_note_beat_index29 = 0\n    var last_note_beat_index30 = 0\n\
    \    var last_note_beat_index31 = 0\n    var last_note_beat_index32 = 0\n    var\
    \ last_note_beat_index33 = 0\n    var last_note_beat_index34 = 0\n    var last_note_beat_index35\
    \ = 0\n    var last_note_beat_index36 = 0\n    var last_note_beat_index37 = 0\n\
    \    var last_note_beat_index38 = 0\n    var last_note_beat_index39 = 0\n    var\
    \ last_note_beat_index40 = 0\n    var last_note_beat_index41 = 0\n    var last_note_beat_index42\
    \ = 0\n    var last_note_beat_index43 = 0\n    var last_note_beat_index44 = 0\n\
    \    var last_note_beat_index45 = 0\n    var last_note_beat_index46 = 0\n    var\
    \ last_note_beat_index47 = 0\n    var last_note_beat_index48 = 0\n    var last_note_beat_index49\
    \ = 0\n    var last_note_beat_index50 = 0\n    var last_note_beat_index51 = 0\n\
    \    var last_note_beat_index52 = 0\n    var last_note_beat_index53 = 0\n    var\
    \ last_note_beat_index54 = 0\n    var last_note_beat_index55 = 0\n    var last_note_beat_index56\
    \ = 0\n    var last_note_beat\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpz_359nkw.swift:21:9: error: invalid redeclaration of 'last_note_index'\n\
    \    var last_note_index = 0\n        ^\n/tmp/tmpz_359nkw.swift:18:9: note: 'last_note_index'\
    \ previously declared here\n    var last_note_index = 0\n        ^\n/tmp/tmpz_359nkw.swift:79:9:\
    \ error: type annotation missing in pattern\n    var last_note_beat\n        ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_beats = [String]()\n    var notes_beats_rest\
    \ = [String]()\n    var notes_rest = [String]()\n    var notes_rest2 = []\n  \
    \  var notes_rest3 = []\n    var notes_rest4 = []\n    var notes_rest5 = []\n\
    \    var notes_rest6 = []\n    var notes_rest7 = []\n    var notes_rest8 = []\n\
    \    var notes_rest9 = []\n    var notes_rest10 = []\n    var notes_rest11 = []\n\
    \    var notes_rest12 = []\n    var notes_rest13 = []\n    var notes_rest14 =\
    \ []\n    var notes_rest15 = []\n    var notes_rest16 = []\n    var notes_rest17\
    \ = []\n    var notes_rest18 = []\n    var notes_rest19 = []\n    var notes_rest20\
    \ = []\n    var notes_rest21 = []\n    var notes_rest22 = []\n    var notes_rest23\
    \ = []\n    var notes_rest24 = []\n    var notes_rest25 = []\n    var notes_rest26\
    \ = []\n    var notes_rest27 = []\n    var notes_rest28 = []\n    var notes_rest29\
    \ = []\n    var notes_rest30 = []\n    var notes_rest31 = []\n    var notes_rest32\
    \ = []\n    var notes_rest33 = []\n    var notes_rest34 = []\n    var notes_rest35\
    \ = []\n    var notes_rest36 = []\n    var notes_rest37 = []\n    var notes_rest38\
    \ = []\n    var notes_rest39 = []\n    var notes_rest40 = []\n    var notes_rest41\
    \ = []\n    var notes_rest42 = []\n    var notes_rest43 = []\n    var notes_rest44\
    \ = []\n    var notes_rest45 = []\n    var notes_rest46 = []\n    var notes_rest47\
    \ = []\n    var notes_rest48 = []\n    var notes_rest49 = []\n    var notes_rest50\
    \ = []\n    var notes_rest51 = []\n    var notes_rest52 = []\n    var notes_rest53\
    \ = []\n    var notes_rest54 = []\n    var notes_rest55 = []\n    var notes_rest56\
    \ = []\n    var notes_rest57 = []\n    var notes_rest58 = []\n    var notes_rest59\
    \ = []\n    var notes_rest60 = []\n    var notes_rest61 = []\n    var notes_rest62\
    \ = []\n    var notes_rest63 = []\n    var notes_rest64 = []\n    var notes_rest65\
    \ = []\n    var notes_rest66 = []\n    var \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmplrg3qpvx.swift:82:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmplrg3qpvx.swift:17:23: error: empty collection literal requires an\
    \ explicit type\n    var notes_rest2 = []\n                      ^~\n/tmp/tmplrg3qpvx.swift:18:23:\
    \ error: empty collection literal requires an explicit type\n    var notes_rest3\
    \ = []\n                      ^~\n/tmp/tmplrg3qpvx.swift:19:23: error: empty collection\
    \ literal requires an explicit type\n    var notes_rest4 = []\n              \
    \        ^~\n/tmp/tmplrg3qpvx.swift:20:23: error: empty collection literal requires\
    \ an explicit type\n    var notes_rest5 = []\n                      ^~\n/tmp/tmplrg3qpvx.swift:21:23:\
    \ error: empty collection literal requires an explicit type\n    var notes_rest6\
    \ = []\n                      ^~\n/tmp/tmplrg3qpvx.swift:22:23: error: empty collection\
    \ literal requires an explicit type\n    var notes_rest7 = []\n              \
    \        ^~\n/tmp/tmplrg3qpvx.swift:23:23: error: empty collection literal requires\
    \ an explicit type\n    var notes_rest8 = []\n                      ^~\n/tmp/tmplrg3qpvx.swift:24:23:\
    \ error: empty collection literal requires an explicit type\n    var notes_rest9\
    \ = []\n                      ^~\n/tmp/tmplrg3qpvx.swift:25:24: error: empty collection\
    \ literal requires an explicit type\n    var notes_rest10 = []\n             \
    \          ^~\n/tmp/tmplrg3qpvx.swift:26:24: error: empty collection literal requires\
    \ an explicit type\n    var notes_rest11 = []\n                       ^~\n/tmp/tmplrg3qpvx.swift:27:24:\
    \ error: empty collection literal requires an explicit type\n    var notes_rest12\
    \ = []\n                       ^~\n/tmp/tmplrg3qpvx.swift:28:24: error: empty\
    \ collection literal requires an explicit type\n    var notes_rest13 = []\n  \
    \                     ^~\n/tmp/tmplrg3qpvx.swift:29:24: error: empty collection\
    \ literal requires an explicit type\n    var notes_rest14 = []\n             \
    \          ^~\n/tmp/tmplrg3qpvx.swift:30:24: error: empty collection literal requires\
    \ an explicit type\n    var notes_rest15 = []\n                       ^~\n/tmp/tmplrg3qpvx.swift:31:24:\
    \ err"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNoteBeat = 0\n\
    \    var lastNoteBeatCount = 0\n    var lastNoteBeatCount2 = 0\n    var lastNoteBeatCount3\
    \ = 0\n    var lastNoteBeatCount4 = 0\n    var lastNoteBeatCount5 = 0\n    var\
    \ lastNoteBeatCount6 = 0\n    var lastNoteBeatCount7 = 0\n    var lastNoteBeatCount8\
    \ = 0\n    var lastNoteBeatCount9 = 0\n    var lastNoteBeatCount10 = 0\n    var\
    \ lastNoteBeatCount11 = 0\n    var lastNoteBeatCount12 = 0\n    var lastNoteBeatCount13\
    \ = 0\n    var lastNoteBeatCount14 = 0\n    var lastNoteBeatCount15 = 0\n    var\
    \ lastNoteBeatCount16 = 0\n    var lastNoteBeatCount17 = 0\n    var lastNoteBeatCount18\
    \ = 0\n    var lastNoteBeatCount19 = 0\n    var lastNoteBeatCount20 = 0\n    var\
    \ lastNoteBeatCount21 = 0\n    var lastNoteBeatCount22 = 0\n    var lastNoteBeatCount23\
    \ = 0\n    var lastNoteBeatCount24 = 0\n    var lastNoteBeatCount25 = 0\n    var\
    \ lastNoteBeatCount26 = 0\n    var lastNoteBeatCount27 = 0\n    var lastNoteBeatCount28\
    \ = 0\n    var lastNoteBeatCount29 = 0\n    var lastNoteBeatCount30 = 0\n    var\
    \ lastNoteBeatCount31 = 0\n    var lastNoteBeatCount32 = 0\n    var lastNoteBeatCount33\
    \ = 0\n    var lastNoteBeatCount34 = 0\n    var lastNoteBeatCount35 = 0\n    var\
    \ lastNoteBeatCount36 = 0\n    var lastNoteBeatCount37 = 0\n    var lastNoteBeatCount38\
    \ = 0\n    var lastNoteBeatCount39 = 0\n    var lastNoteBeatCount40 = 0\n    var\
    \ lastNoteBeatCount41 = 0\n    var lastNoteBeatCount42 = 0\n    var lastNoteBeatCount43\
    \ = 0\n    var lastNoteBeatCount44 = 0\n    var lastNoteBeatCount45 = 0\n    var\
    \ lastNoteBeatCount46 = 0\n    var lastNoteBeatCount47 = 0\n    var lastNoteBeatCount48\
    \ = 0\n    var lastNoteBeatCount49 = 0\n    var lastNoteBeatCount50 = 0\n    var\
    \ lastNoteBeatCount51 = 0\n    var lastNoteBeatCount52 = 0\n    var \n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppx7wp1yp.swift:72:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmppx7wp1yp.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmppx7wp1yp.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmppx7wp1yp.swift:14:9:\
    \ warning: initialization of variable 'beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmppx7wp1yp.swift:15:9: warning: initialization of variable 'note' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var note\
    \ = \"\"\n    ~~~~^~~~\n    _\n/tmp/tmppx7wp1yp.swift:16:9: warning: initialization\
    \ of variable 'last' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var last = 0\n    ~~~~^~~~\n    _\n/tmp/tmppx7wp1yp.swift:17:9:\
    \ warning: initialization of variable 'lastNote' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var lastNote = \"\"\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmppx7wp1yp.swift:18:9: warning: initialization of variable 'lastBeat'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var lastBeat = 0\n    ~~~~^~~~~~~~\n    _\n/tmp/tmppx7wp1yp.swift:19:9: warning:\
    \ initialization of variable 'lastNoteBeat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var lastNoteBeat = 0\n    ~~~~^~~~~~~~~~~~\n\
    \    _\n/tmp/tmppx7wp1yp.swift:20:9: warning: initialization of variable 'lastNoteBeatCount'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var lastNoteBeatCount = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmppx7wp1yp.swift:21:9:\
    \ warning: initialization of variable 'lastNoteBeatCount2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var lastNoteBeatCount2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmppx7wp1y"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var notes: [String] = []\n    var beats_counter: Int = 0\n    var note_counter:\
    \ Int = 0\n    var note_length: Int = 0\n    var note_length_string: String =\
    \ music_string[note_counter]\n    note_counter += 1\n    while note_counter <\
    \ music_string.characters.count {\n        note_length += 1\n        if note_length\
    \ == 1 {\n            notes.append(note_length_string)\n            note_length_string\
    \ = music_string[note_counter]\n            note_counter += 1\n        } else\
    \ {\n            note_length_string = music_string[note_counter]\n        }\n\
    \        if note_length_string == \"|\" {\n            beats_counter += 1\n  \
    \          beats.append(beats_counter)\n            beats_counter = 0\n      \
    \      note_length_string = music_string[note_counter]\n            note_counter\
    \ += 1\n        } else {\n            beats_counter = 0\n        }\n    }\n  \
    \  return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp5ejqv348.swift:17:50: error: cannot convert value of type 'Character'\
    \ to specified type 'String'\n    var note_length_string: String = music_string[note_counter]\n\
    \                                     ~~~~~~~~~~~~^~~~~~~~~~~~~~\n/tmp/tmp5ejqv348.swift:19:39:\
    \ error: 'characters' is unavailable: Please use String directly\n    while note_counter\
    \ < music_string.characters.count {\n                                      ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5ejqv348.swift:23:46:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  note_length_string = music_string[note_counter]\n                         \
    \        ~~~~~~~~~~~~^~~~~~~~~~~~~~\n/tmp/tmp5ejqv348.swift:26:46: error: cannot\
    \ assign value of type 'Character' to type 'String'\n            note_length_string\
    \ = music_string[note_counter]\n                                 ~~~~~~~~~~~~^~~~~~~~~~~~~~\n\
    /tmp/tmp5ejqv348.swift:32:46: error: cannot assign value of type 'Character' to\
    \ type 'String'\n            note_length_string = music_string[note_counter]\n\
    \                                 ~~~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_count = 0\n    var beats_count = 0\n\
    \    var notes_last_beat = 0\n    var notes_last_beat_index = 0\n    var notes_last_beat_count\
    \ = 0\n    var notes_last_beat_count_index = 0\n    var notes_last_beat_count_index2\
    \ = 0\n    var notes_last_beat_count_index3 = 0\n    var notes_last_beat_count_index4\
    \ = 0\n    var notes_last_beat_count_index5 = 0\n    var notes_last_beat_count_index6\
    \ = 0\n    var notes_last_beat_count_index7 = 0\n    var notes_last_beat_count_index8\
    \ = 0\n    var notes_last_beat_count_index9 = 0\n    var notes_last_beat_count_index10\
    \ = 0\n    var notes_last_beat_count_index11 = 0\n    var notes_last_beat_count_index12\
    \ = 0\n    var notes_last_beat_count_index13 = 0\n    var notes_last_beat_count_index14\
    \ = 0\n    var notes_last_beat_count_index15 = 0\n    var notes_last_beat_count_index16\
    \ = 0\n    var notes_last_beat_count_index17 = 0\n    var notes_last_beat_count_index18\
    \ = 0\n    var notes_last_beat_count_index19 = 0\n    var notes_last_beat_count_index20\
    \ = 0\n    var notes_last_beat_count_index21 = 0\n    var notes_last_beat_count_index22\
    \ = 0\n    var notes_last_beat_count_index23 = 0\n    var notes_last_beat_count_index24\
    \ = 0\n    var notes_last_beat_count_index25 = 0\n    var notes_last_beat_count_index26\
    \ = 0\n    var notes_last_beat_count_index27 = 0\n    var notes_last_beat_count_index28\
    \ = 0\n    var notes_last_beat_count_index29 = 0\n    var notes_last_beat_count_index30\
    \ = 0\n    var notes_last_beat_count_index31 = 0\n    var notes_last_beat_count_index32\
    \ = 0\n    var notes_last_beat_count_index33 = 0\n    var notes_last_beat_count_index34\
    \ = 0\n    var notes_last_beat_count_index35 = 0\n    var notes_last_beat_count_index36\
    \ = 0\n    var notes_last_beat_count_index37 = 0\n    var notes_last_beat_count_index38\
    \ = 0\n    var notes_last_beat_count_index39 = 0\n    var notes_last_beat_count_index40\
    \ = 0\n    var notes_last_beat_count_index41 = 0\n    var notes_last_beat_count_index42\
    \ = 0\n    var notes_last_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpewe5nw90.swift:61:9: error: type annotation missing in pattern\n\
    \    var notes_last_\n        ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = String()\n    var current_note_length\
    \ = Int()\n    for character in music_string {\n        switch character {\n \
    \       case \"o\":\n            current_note = \"o\"\n            current_note_length\
    \ = 4\n        case \"o|\":\n            current_note = \"o|\"\n            current_note_length\
    \ = 2\n        case \".|\":\n            current_note = \".|\"\n            current_note_length\
    \ = 1\n        default:\n            current_note = \"\"\n            current_note_length\
    \ = 0\n        }\n        if current_note != \"\" {\n            beats.append(current_beat)\n\
    \            current_beat = 0\n            current_note = \"\"\n            current_note_length\
    \ = 0\n        }\n        current_beat += current_note_length\n    }\n    beats.append(current_beat)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpxo5xz0f0.swift:21:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmpxo5xz0f0.swift:24:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \".|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var note = String()\n    var last_note = String()\n\
    \    var last_beat = 0\n    var last_beat_count = 0\n    var last_beat_direction\
    \ = String()\n    var last_beat_direction_count = 0\n    var last_beat_direction_direction\
    \ = String()\n    var last_beat_direction_direction_count = 0\n    var last_beat_direction_direction_direction\
    \ = String()\n    var last_beat_direction_direction_direction_count = 0\n    var\
    \ last_beat_direction_direction_direction_direction = String()\n    var last_beat_direction_direction_direction_direction_count\
    \ = 0\n    var last_beat_direction_direction_direction_direction_direction = String()\n\
    \    var last_beat_direction_direction_direction_direction_direction_count = 0\n\
    \    var last_beat_direction_direction_direction_direction_direction_direction\
    \ = String()\n    var last_beat_direction_direction_direction_direction_direction_direction_count\
    \ = 0\n    var last_beat_direction_direction_direction_direction_direction_direction_direction\
    \ = String()\n    var last_beat_direction_direction_direction_direction_direction_direction_direction_count\
    \ = 0\n    var last_beat_direction_direction_direction_direction_direction_direction_direction_direction\
    \ = String()\n    var last_beat_direction_direction_direction_direction_direction_direction_direction_direction_count\
    \ = 0\n    var last_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction\
    \ = String()\n    var last_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction_count\
    \ = 0\n    var last_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction\
    \ = String()\n    var last_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction_count\
    \ = 0\n    var last_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction\
    \ = String()\n    var last_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction_count\
    \ = 0\n    var last_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction\
    \ = String()\n    var last_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction_count\
    \ = 0\n    var last_beat_direction_direction_direction_direction_direction_direction_direction_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmptr0q7pzp.swift:37:9: error: invalid redeclaration of 'last_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction_count'\n\
    \    var last_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction_count\
    \ = 0\n        ^\n/tmp/tmptr0q7pzp.swift:35:9: note: 'last_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction_count'\
    \ previously declared here\n    var last_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction_count\
    \ = 0\n        ^\n/tmp/tmptr0q7pzp.swift:38:9: error: invalid redeclaration of\
    \ 'last_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction'\n\
    \    var last_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction\
    \ = String()\n        ^\n/tmp/tmptr0q7pzp.swift:36:9: note: 'last_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction'\
    \ previously declared here\n    var last_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction\
    \ = String()\n        ^\n/tmp/tmptr0q7pzp.swift:42:9: error: type annotation missing\
    \ in pattern\n    var last_beat_direction_direction_direction_direction_direction_direction_direction_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var last_note = 0\n    var last_beat =\
    \ 0\n    var last_beats = 0\n    var last_beats_count = 0\n    var last_beats_count_count\
    \ = 0\n    var last_beats_count_count_count = 0\n    var last_beats_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count = 0\n    var last_beats_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count = 0\n    var\
    \ last_beats_count_count_count_count_count_count_count_count = 0\n    var last_beats_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpw3ajrsd9.swift:37:9: error: type annotation missing in pattern\n\
    \    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array = [Int]()\n\
    \    var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_string\
    \ = \"\"\n    var current_note_length_string_index = 0\n    var current_note_length_string_value\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_index = 0\n    var current_note_length_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string = \"\"\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_kyklyq_.swift:26:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_index = 0\n        ^\n\
    /tmp/tmp_kyklyq_.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp_kyklyq_.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp_kyklyq_.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp_kyklyq_.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp_kyklyq_.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp_kyklyq_.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp_kyklyq_.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp_kyklyq_.swift:31:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp_kyklyq_.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp_kyklyq_.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = String()\n    var current_octave\
    \ = 0\n    var current_note_is_last = false\n    var current_note_octave = 0\n\
    \    var current_note_octave_is_last = false\n    var current_note_octave_octave\
    \ = 0\n    var current_note_octave_octave_is_last = false\n    var current_note_octave_octave_octave\
    \ = 0\n    var current_note_octave_octave_octave_is_last = false\n    var current_note_octave_octave_octave_octave\
    \ = 0\n    var current_note_octave_octave_octave_octave_is_last = false\n    var\
    \ current_note_octave_octave_octave_octave_octave = 0\n    var current_note_octave_octave_octave_octave_octave_is_last\
    \ = false\n    var current_note_octave_octave_octave_octave_octave_octave = 0\n\
    \    var current_note_octave_octave_octave_octave_octave_octave_is_last = false\n\
    \    var current_note_octave_octave_octave_octave_octave_octave_octave = 0\n \
    \   var current_note_octave_octave_octave_octave_octave_octave_octave_is_last\
    \ = false\n    var current_note_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = 0\n    var current_note_octave_octave_octave_octave_octave_octave_octave_octave_is_last\
    \ = false\n    var current_note_octave_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = 0\n    var current_note_octave_octave_octave_octave_octave_octave_octave_octave_is_last\
    \ = false\n    var current_note_octave_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = 0\n    var current_note_octave_octave_octave_octave_octave_octave_octave_octave_octave_is_last\
    \ = false\n    var current_note_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = 0\n    var current_note_octave_octave_octave_octave_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpptuq5__r.swift:34:9: error: invalid redeclaration of 'current_note_octave_octave_octave_octave_octave_octave_octave_octave_is_last'\n\
    \    var current_note_octave_octave_octave_octave_octave_octave_octave_octave_is_last\
    \ = false\n        ^\n/tmp/tmpptuq5__r.swift:32:9: note: 'current_note_octave_octave_octave_octave_octave_octave_octave_octave_is_last'\
    \ previously declared here\n    var current_note_octave_octave_octave_octave_octave_octave_octave_octave_is_last\
    \ = false\n        ^\n/tmp/tmpptuq5__r.swift:35:9: error: invalid redeclaration\
    \ of 'current_note_octave_octave_octave_octave_octave_octave_octave_octave_octave'\n\
    \    var current_note_octave_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = 0\n        ^\n/tmp/tmpptuq5__r.swift:33:9: note: 'current_note_octave_octave_octave_octave_octave_octave_octave_octave_octave'\
    \ previously declared here\n    var current_note_octave_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = 0\n        ^\n/tmp/tmpptuq5__r.swift:38:9: error: type annotation missing\
    \ in pattern\n    var current_note_octave_octave_octave_octave_\n        ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var notes_index = 0\n\
    \    var notes_length_index = 0\n    var notes_length_index2 = 0\n    var notes_length_index3\
    \ = 0\n    var notes_length_index4 = 0\n    var notes_length_index5 = 0\n    var\
    \ notes_length_index6 = 0\n    var notes_length_index7 = 0\n    var notes_length_index8\
    \ = 0\n    var notes_length_index9 = 0\n    var notes_length_index10 = 0\n   \
    \ var notes_length_index11 = 0\n    var notes_length_index12 = 0\n    var notes_length_index13\
    \ = 0\n    var notes_length_index14 = 0\n    var notes_length_index15 = 0\n  \
    \  var notes_length_index16 = 0\n    var notes_length_index17 = 0\n    var notes_length_index18\
    \ = 0\n    var notes_length_index19 = 0\n    var notes_length_index20 = 0\n  \
    \  var notes_length_index21 = 0\n    var notes_length_index22 = 0\n    var notes_length_index23\
    \ = 0\n    var notes_length_index24 = 0\n    var notes_length_index25 = 0\n  \
    \  var notes_length_index26 = 0\n    var notes_length_index27 = 0\n    var notes_length_index28\
    \ = 0\n    var notes_length_index29 = 0\n    var notes_length_index30 = 0\n  \
    \  var notes_length_index31 = 0\n    var notes_length_index32 = 0\n    var notes_length_index33\
    \ = 0\n    var notes_length_index34 = 0\n    var notes_length_index35 = 0\n  \
    \  var notes_length_index36 = 0\n    var notes_length_index37 = 0\n    var notes_length_index38\
    \ = 0\n    var notes_length_index39 = 0\n    var notes_length_index40 = 0\n  \
    \  var notes_length_index41 = 0\n    var notes_length_index42 = 0\n    var notes_length_index43\
    \ = 0\n    var notes_length_index44 = 0\n    var notes_length_index45 = 0\n  \
    \  var notes_length_index46 = 0\n    var notes_length_index47 = 0\n    var notes_length_index48\
    \ = 0\n    var notes_length_index49 = 0\n    var notes_length_index50 = 0\n  \
    \  var notes_length_index51 = 0\n    var notes_length_index52 = 0\n    var notes_length_index53\
    \ = 0\n    var notes_length_index54 = 0\n    var notes_length_index55 = 0\n  \
    \  var notes_length_index56 = 0\n    var notes_length_index57 = 0\n    var notes_length_index58\
    \ = 0\n    var notes_length_index59 = 0\n    var notes_length_index60 = 0\n  \
    \  var notes_length_index61 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8wh68uht.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp8wh68uht.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp8wh68uht.swift:14:9:\
    \ warning: initialization of variable 'notes_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:15:9: warning: initialization\
    \ of variable 'notes_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_index = 0\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmp8wh68uht.swift:16:9: warning: initialization of variable 'notes_length_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:17:9:\
    \ warning: initialization of variable 'notes_length_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:18:9: warning:\
    \ initialization of variable 'notes_length_index3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var notes_length_index3 = 0\n   \
    \ ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:19:9: warning: initialization\
    \ of variable 'notes_length_index4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_length_index4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp8wh68uht.swift:20:9: warning: initialization of variable 'notes_length_index5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:21:9:\
    \ warning: initialization of variable 'notes_length_index6' was never used; consider\
    \ replacing with assi"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var note_index = 0\n    var note_length = 0\n\
    \    var note_length_index = 0\n    var note_index = 0\n    var note_index2 =\
    \ 0\n    var note_index3 = 0\n    var note_index4 = 0\n    var note_index5 = 0\n\
    \    var note_index6 = 0\n    var note_index7 = 0\n    var note_index8 = 0\n \
    \   var note_index9 = 0\n    var note_index10 = 0\n    var note_index11 = 0\n\
    \    var note_index12 = 0\n    var note_index13 = 0\n    var note_index14 = 0\n\
    \    var note_index15 = 0\n    var note_index16 = 0\n    var note_index17 = 0\n\
    \    var note_index18 = 0\n    var note_index19 = 0\n    var note_index20 = 0\n\
    \    var note_index21 = 0\n    var note_index22 = 0\n    var note_index23 = 0\n\
    \    var note_index24 = 0\n    var note_index25 = 0\n    var note_index26 = 0\n\
    \    var note_index27 = 0\n    var note_index28 = 0\n    var note_index29 = 0\n\
    \    var note_index30 = 0\n    var note_index31 = 0\n    var note_index32 = 0\n\
    \    var note_index33 = 0\n    var note_index34 = 0\n    var note_index35 = 0\n\
    \    var note_index36 = 0\n    var note_index37 = 0\n    var note_index38 = 0\n\
    \    var note_index39 = 0\n    var note_index40 = 0\n    var note_index41 = 0\n\
    \    var note_index42 = 0\n    var note_index43 = 0\n    var note_index44 = 0\n\
    \    var note_index45 = 0\n    var note_index46 = 0\n    var note_index47 = 0\n\
    \    var note_index48 = 0\n    var note_index49 = 0\n    var note_index50 = 0\n\
    \    var note_index51 = 0\n    var note_index52 = 0\n    var note_index53 = 0\n\
    \    var note_index54 = 0\n    var note_index55 = 0\n    var note_index56 = 0\n\
    \    var note_index57 = 0\n    var note_index58 = 0\n    var note_index59 = 0\n\
    \    var note_index60 = 0\n    var note_index61 = 0\n    var note_index62 = 0\n\
    \    var note_index63 = 0\n    var note_index64 = 0\n    var note_index65 = 0\n\
    \    var note_index66 = 0\n    var note_index67 = 0\n    var note_index68 = 0\n\
    \    var note_index69 = 0\n    var note_index70 = 0\n    var note_index71 = 0\n\
    \    var note_index72 = 0\n    var note_index73 = 0\n    var note_index74 = 0\n\
    \    var note_index75 = 0\n    var note_index76 = 0\n    var note_index77 = 0\n\
    \    var note_index78 = 0\n    var note_index79 = 0\n    var note_index80 = 0\n\
    \    var note_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmprxpobeat.swift:17:9: error: invalid redeclaration of 'note_index'\n\
    \    var note_index = 0\n        ^\n/tmp/tmprxpobeat.swift:14:9: note: 'note_index'\
    \ previously declared here\n    var note_index = 0\n        ^\n/tmp/tmprxpobeat.swift:97:9:\
    \ error: type annotation missing in pattern\n    var note_index\n        ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = String()\n    var current_note_index\
    \ = 0\n    var current_note_length = 4\n    var current_note_length_index = 0\n\
    \    var current_note_length = 4\n    var current_note_length_index = 0\n    var\
    \ current_note_length = 4\n    var current_note_length_index = 0\n    var current_note_length\
    \ = 4\n    var current_note_length_index = 0\n    var current_note_length = 4\n\
    \    var current_note_length_index = 0\n    var current_note_length = 4\n    var\
    \ current_note_length_index = 0\n    var current_note_length = 4\n    var current_note_length_index\
    \ = 0\n    var current_note_length = 4\n    var current_note_length_index = 0\n\
    \    var current_note_length = 4\n    var current_note_length_index = 0\n    var\
    \ current_note_length = 4\n    var current_note_length_index = 0\n    var current_note_length\
    \ = 4\n    var current_note_length_index = 0\n    var current_note_length = 4\n\
    \    var current_note_length_index = 0\n    var current_note_length = 4\n    var\
    \ current_note_length_index = 0\n    var current_note_length = 4\n    var current_note_length_index\
    \ = 0\n    var current_note_length = 4\n    var current_note_length_index = 0\n\
    \    var current_note_length = 4\n    var current_note_length_index = 0\n    var\
    \ current_note_length = 4\n    var current_note_length_index = 0\n    var current_note_length\
    \ = 4\n    var current_note_length_index = 0\n    var current_note_length = 4\n\
    \    var current_note_length_index = 0\n    var current_note_length = 4\n    var\
    \ current_note_length_index = 0\n    var current_note_length = 4\n    var current_note_length_index\
    \ = 0\n    var current_note_length = 4\n    var current_note_length_index = 0\n\
    \    var current_note_length = 4\n    var current_note_length_index = 0\n    var\
    \ current_note_length = 4\n    var current_note_length_index = 0\n    var current_note_length\
    \ = 4\n    var current_note_length_index = 0\n    var current_note_length = 4\n\
    \    var current_note_length_index = 0\n    var current_note_length = 4\n    var\
    \ current_note_length_index = 0\n    var current_note_length = 4\n    var current_note_length_index\
    \ = 0\n    var current_note_length = 4\n    var current_note_length_index = 0\n\
    \    var current_note_length = 4\n    var current_note_length_index = 0\n    var\
    \ current_note_length = 4\n    var current_note_length_index = 0\n    var current_note_length\
    \ = 4\n    var current_note_length_index = 0\n    var current_note_length = 4\n\
    \    var current_note_length_index = 0\n    var current_note_length = 4\n    var\
    \ current_note_length_index = 0\n    var current_note_length = 4\n    var current_note_length_index\
    \ = 0\n    var current_note_length = 4\n    var current_note_length_index = 0\n\
    \    var current_note_length = 4\n    var current_note_length_index = 0\n    var\
    \ current_note_length = 4\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpe3cn7yfg.swift:18:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = 4\n        ^\n/tmp/tmpe3cn7yfg.swift:16:9: note:\
    \ 'current_note_length' previously declared here\n    var current_note_length\
    \ = 4\n        ^\n/tmp/tmpe3cn7yfg.swift:19:9: error: invalid redeclaration of\
    \ 'current_note_length_index'\n    var current_note_length_index = 0\n       \
    \ ^\n/tmp/tmpe3cn7yfg.swift:17:9: note: 'current_note_length_index' previously\
    \ declared here\n    var current_note_length_index = 0\n        ^\n/tmp/tmpe3cn7yfg.swift:20:9:\
    \ error: invalid redeclaration of 'current_note_length'\n    var current_note_length\
    \ = 4\n        ^\n/tmp/tmpe3cn7yfg.swift:16:9: note: 'current_note_length' previously\
    \ declared here\n    var current_note_length = 4\n        ^\n/tmp/tmpe3cn7yfg.swift:21:9:\
    \ error: invalid redeclaration of 'current_note_length_index'\n    var current_note_length_index\
    \ = 0\n        ^\n/tmp/tmpe3cn7yfg.swift:17:9: note: 'current_note_length_index'\
    \ previously declared here\n    var current_note_length_index = 0\n        ^\n\
    /tmp/tmpe3cn7yfg.swift:22:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = 4\n        ^\n/tmp/tmpe3cn7yfg.swift:16:9: note:\
    \ 'current_note_length' previously declared here\n    var current_note_length\
    \ = 4\n        ^\n/tmp/tmpe3cn7yfg.swift:23:9: error: invalid redeclaration of\
    \ 'current_note_length_index'\n    var current_note_length_index = 0\n       \
    \ ^\n/tmp/tmpe3cn7yfg.swift:17:9: note: 'current_note_length_index' previously\
    \ declared here\n    var current_note_length_index = 0\n        ^\n/tmp/tmpe3cn7yfg.swift:24:9:\
    \ error: invalid redeclaration of 'current_note_length'\n    var current_note_length\
    \ = 4\n        ^\n/tmp/tmpe3cn7yfg.swift:16:9: note: 'current_note_length' previously\
    \ declared here\n    var current_note_length = 4\n        ^\n/tmp/tmpe3cn7yfg.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_index'\n    var current_note_length_index\
    \ = 0\n        ^\n/tmp/tmpe3cn7yfg.swift:17:9: note: 'current_note_length_index'\
    \ previously declared here\n    var "
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    for c in music_string {\n        if c == \"o\" {\n            if note\
    \ != \"\" {\n                notes.append(note)\n                note = \"\"\n\
    \            }\n            beat = 0\n            last = 0\n        } else if\
    \ c == \"|\" {\n            if note != \"\" {\n                notes.append(note)\n\
    \                note = \"\"\n            }\n            beat = 0\n          \
    \  last = 1\n        } else if c == \".\" {\n            if note != \"\" {\n \
    \               notes.append(note)\n                note = \"\"\n            }\n\
    \            beat = 1\n            last = 0\n        } else {\n            if\
    \ note == \"\" {\n                note = c\n            } else {\n           \
    \     note += c\n            }\n        }\n        beats.append(beat)\n    }\n\
    \    if note != \"\" {\n        notes.append(note)\n    }\n    return beats\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpoqna5oap.swift:41:24: error: cannot assign value of type 'Character'\
    \ to type 'String'\n                note = c\n                       ^\n/tmp/tmpoqna5oap.swift:43:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                note += c\n                        ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var current_beat = 0\n    var current_note = \"\"\n    var current_note_index\
    \ = 0\n    var current_note_length = 0\n    var current_note_length_index = 0\n\
    \    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpe6_9vbg4.swift:25:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpe6_9vbg4.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpe6_9vbg4.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpe6_9vbg4.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpe6_9vbg4.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpe6_9vbg4.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpe6_9vbg4.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpe6_9vbg4.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpe6_9vbg4.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpe6_9vbg4.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpe6_9vbg4.swift:30:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpe6_9vbg4.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_valu"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var notes_index = 0\n\
    \    var notes_length_index = 0\n    var notes_length_index2 = 0\n    var notes_length_index3\
    \ = 0\n    var notes_length_index4 = 0\n    var notes_length_index5 = 0\n    var\
    \ notes_length_index6 = 0\n    var notes_length_index7 = 0\n    var notes_length_index8\
    \ = 0\n    var notes_length_index9 = 0\n    var notes_length_index10 = 0\n   \
    \ var notes_length_index11 = 0\n    var notes_length_index12 = 0\n    var notes_length_index13\
    \ = 0\n    var notes_length_index14 = 0\n    var notes_length_index15 = 0\n  \
    \  var notes_length_index16 = 0\n    var notes_length_index17 = 0\n    var notes_length_index18\
    \ = 0\n    var notes_length_index19 = 0\n    var notes_length_index20 = 0\n  \
    \  var notes_length_index21 = 0\n    var notes_length_index22 = 0\n    var notes_length_index23\
    \ = 0\n    var notes_length_index24 = 0\n    var notes_length_index25 = 0\n  \
    \  var notes_length_index26 = 0\n    var notes_length_index27 = 0\n    var notes_length_index28\
    \ = 0\n    var notes_length_index29 = 0\n    var notes_length_index30 = 0\n  \
    \  var notes_length_index31 = 0\n    var notes_length_index32 = 0\n    var notes_length_index33\
    \ = 0\n    var notes_length_index34 = 0\n    var notes_length_index35 = 0\n  \
    \  var notes_length_index36 = 0\n    var notes_length_index37 = 0\n    var notes_length_index38\
    \ = 0\n    var notes_length_index39 = 0\n    var notes_length_index40 = 0\n  \
    \  var notes_length_index41 = 0\n    var notes_length_index42 = 0\n    var notes_length_index43\
    \ = 0\n    var notes_length_index44 = 0\n    var notes_length_index45 = 0\n  \
    \  var notes_length_index46 = 0\n    var notes_length_index47 = 0\n    var notes_length_index48\
    \ = 0\n    var notes_length_index49 = 0\n    var notes_length_index50 = 0\n  \
    \  var notes_length_index51 = 0\n    var notes_length_index52 = 0\n    var notes_length_index53\
    \ = 0\n    var notes_length_index54 = 0\n    var notes_length_index55 = 0\n  \
    \  var notes_length_index56 = 0\n    var notes_length_index57 = 0\n    var notes_length_index58\
    \ = 0\n    var notes_length_index59 = 0\n    var notes_length_index60 = 0\n  \
    \  var notes_length_index61 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8wh68uht.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp8wh68uht.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp8wh68uht.swift:14:9:\
    \ warning: initialization of variable 'notes_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:15:9: warning: initialization\
    \ of variable 'notes_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_index = 0\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmp8wh68uht.swift:16:9: warning: initialization of variable 'notes_length_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:17:9:\
    \ warning: initialization of variable 'notes_length_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:18:9: warning:\
    \ initialization of variable 'notes_length_index3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var notes_length_index3 = 0\n   \
    \ ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:19:9: warning: initialization\
    \ of variable 'notes_length_index4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_length_index4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp8wh68uht.swift:20:9: warning: initialization of variable 'notes_length_index5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:21:9:\
    \ warning: initialization of variable 'notes_length_index6' was never used; consider\
    \ replacing with assi"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var lastNote = \"\"\n    for char in music_string {\n        if char\
    \ == \"o\" {\n            if note != \"\" {\n                notes.append(note)\n\
    \                note = \"\"\n            }\n            last = beat\n       \
    \     beat = 0\n        } else if char == \"|\" {\n            if note != \"\"\
    \ {\n                notes.append(note)\n                note = \"\"\n       \
    \     }\n            last = beat\n            beat = 0\n        } else if char\
    \ == \".\" {\n            if note != \"\" {\n                notes.append(note)\n\
    \                note = \"\"\n            }\n            last = beat\n       \
    \     beat = 0\n        } else {\n            if note == \"\" {\n            \
    \    note = String(char)\n            } else {\n                note += String(char)\n\
    \            }\n        }\n        beat = beat + 1\n    }\n    notes.append(note)\n\
    \    for note in notes {\n        if note != \"\" {\n            beats.append(last\
    \ - notes.indexOf(note))\n        }\n    }\n    return beats\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp0w0o6xmi.swift:52:39: error: value of type '[String]' has no member\
    \ 'indexOf'\n            beats.append(last - notes.indexOf(note))\n          \
    \                      ~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var notes_index = 0\n\
    \    var notes_length_index = 0\n    var notes_length_index2 = 0\n    var notes_length_index3\
    \ = 0\n    var notes_length_index4 = 0\n    var notes_length_index5 = 0\n    var\
    \ notes_length_index6 = 0\n    var notes_length_index7 = 0\n    var notes_length_index8\
    \ = 0\n    var notes_length_index9 = 0\n    var notes_length_index10 = 0\n   \
    \ var notes_length_index11 = 0\n    var notes_length_index12 = 0\n    var notes_length_index13\
    \ = 0\n    var notes_length_index14 = 0\n    var notes_length_index15 = 0\n  \
    \  var notes_length_index16 = 0\n    var notes_length_index17 = 0\n    var notes_length_index18\
    \ = 0\n    var notes_length_index19 = 0\n    var notes_length_index20 = 0\n  \
    \  var notes_length_index21 = 0\n    var notes_length_index22 = 0\n    var notes_length_index23\
    \ = 0\n    var notes_length_index24 = 0\n    var notes_length_index25 = 0\n  \
    \  var notes_length_index26 = 0\n    var notes_length_index27 = 0\n    var notes_length_index28\
    \ = 0\n    var notes_length_index29 = 0\n    var notes_length_index30 = 0\n  \
    \  var notes_length_index31 = 0\n    var notes_length_index32 = 0\n    var notes_length_index33\
    \ = 0\n    var notes_length_index34 = 0\n    var notes_length_index35 = 0\n  \
    \  var notes_length_index36 = 0\n    var notes_length_index37 = 0\n    var notes_length_index38\
    \ = 0\n    var notes_length_index39 = 0\n    var notes_length_index40 = 0\n  \
    \  var notes_length_index41 = 0\n    var notes_length_index42 = 0\n    var notes_length_index43\
    \ = 0\n    var notes_length_index44 = 0\n    var notes_length_index45 = 0\n  \
    \  var notes_length_index46 = 0\n    var notes_length_index47 = 0\n    var notes_length_index48\
    \ = 0\n    var notes_length_index49 = 0\n    var notes_length_index50 = 0\n  \
    \  var notes_length_index51 = 0\n    var notes_length_index52 = 0\n    var notes_length_index53\
    \ = 0\n    var notes_length_index54 = 0\n    var notes_length_index55 = 0\n  \
    \  var notes_length_index56 = 0\n    var notes_length_index57 = 0\n    var notes_length_index58\
    \ = 0\n    var notes_length_index59 = 0\n    var notes_length_index60 = 0\n  \
    \  var notes_length_index61 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8wh68uht.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp8wh68uht.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp8wh68uht.swift:14:9:\
    \ warning: initialization of variable 'notes_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:15:9: warning: initialization\
    \ of variable 'notes_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_index = 0\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmp8wh68uht.swift:16:9: warning: initialization of variable 'notes_length_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:17:9:\
    \ warning: initialization of variable 'notes_length_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:18:9: warning:\
    \ initialization of variable 'notes_length_index3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var notes_length_index3 = 0\n   \
    \ ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:19:9: warning: initialization\
    \ of variable 'notes_length_index4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_length_index4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp8wh68uht.swift:20:9: warning: initialization of variable 'notes_length_index5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:21:9:\
    \ warning: initialization of variable 'notes_length_index6' was never used; consider\
    \ replacing with assi"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var current_note = \"\"\n    var current_beat\
    \ = 0\n    var current_beats_count = 0\n    var current_note_count = 0\n    var\
    \ current_note_length = 0\n    var current_note_length_count = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_index2 = 0\n    var current_note_length_index3\
    \ = 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmps0_wvkca.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmps0_wvkca.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmps0_wvkca.swift:14:9:\
    \ warning: initialization of variable 'current_note' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var current_note = \"\"\
    \n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmps0_wvkca.swift:15:9: warning: initialization\
    \ of variable 'current_beat' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var current_beat = 0\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmps0_wvkca.swift:16:9: warning: initialization of variable 'current_beats_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var current_beats_count = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmps0_wvkca.swift:17:9:\
    \ warning: initialization of variable 'current_note_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var current_note_count\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmps0_wvkca.swift:18:9: warning:\
    \ initialization of variable 'current_note_length' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var current_note_length = 0\n   \
    \ ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmps0_wvkca.swift:19:9: warning: initialization\
    \ of variable 'current_note_length_count' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var current_note_length_count = 0\n  \
    \  ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmps0_wvkca.swift:20:9: warning:\
    \ initialization of variable 'current_note_length_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var current_note_length_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmps0_wvkca.swift:21:9:\
    \ warning: initialization of variable 'current_note_length_index"
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beats_count = 0\n    var note_length = 0\n\
    \    var note_count = 0\n    var note = \"\"\n    var last_note = \"\"\n    var\
    \ last_beat = 0\n    var last_beat_count = 0\n    var last_note_length = 0\n \
    \   var last_note_count = 0\n    var last_note = \"\"\n    var last_note_length\
    \ = 0\n    var last_note = \"\"\n    var last_note_length = 0\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n    var last_note = \"\"\n    var last_note\
    \ = \"\"\n    var last_note = \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp46p6pc6m.swift:23:9: error: invalid redeclaration of 'last_note'\n\
    \    var last_note = \"\"\n        ^\n/tmp/tmp46p6pc6m.swift:18:9: note: 'last_note'\
    \ previously declared here\n    var last_note = \"\"\n        ^\n/tmp/tmp46p6pc6m.swift:24:9:\
    \ error: invalid redeclaration of 'last_note_length'\n    var last_note_length\
    \ = 0\n        ^\n/tmp/tmp46p6pc6m.swift:21:9: note: 'last_note_length' previously\
    \ declared here\n    var last_note_length = 0\n        ^\n/tmp/tmp46p6pc6m.swift:25:9:\
    \ error: invalid redeclaration of 'last_note'\n    var last_note = \"\"\n    \
    \    ^\n/tmp/tmp46p6pc6m.swift:18:9: note: 'last_note' previously declared here\n\
    \    var last_note = \"\"\n        ^\n/tmp/tmp46p6pc6m.swift:26:9: error: invalid\
    \ redeclaration of 'last_note_length'\n    var last_note_length = 0\n        ^\n\
    /tmp/tmp46p6pc6m.swift:21:9: note: 'last_note_length' previously declared here\n\
    \    var last_note_length = 0\n        ^\n/tmp/tmp46p6pc6m.swift:27:9: error:\
    \ invalid redeclaration of 'last_note'\n    var last_note = \"\"\n        ^\n\
    /tmp/tmp46p6pc6m.swift:18:9: note: 'last_note' previously declared here\n    var\
    \ last_note = \"\"\n        ^\n/tmp/tmp46p6pc6m.swift:28:9: error: invalid redeclaration\
    \ of 'last_note'\n    var last_note = \"\"\n        ^\n/tmp/tmp46p6pc6m.swift:18:9:\
    \ note: 'last_note' previously declared here\n    var last_note = \"\"\n     \
    \   ^\n/tmp/tmp46p6pc6m.swift:29:9: error: invalid redeclaration of 'last_note'\n\
    \    var last_note = \"\"\n        ^\n/tmp/tmp46p6pc6m.swift:18:9: note: 'last_note'\
    \ previously declared here\n    var last_note = \"\"\n        ^\n/tmp/tmp46p6pc6m.swift:30:9:\
    \ error: invalid redeclaration of 'last_note'\n    var last_note = \"\"\n    \
    \    ^\n/tmp/tmp46p6pc6m.swift:18:9: note: 'last_note' previously declared here\n\
    \    var last_note = \"\"\n        ^\n/tmp/tmp46p6pc6m.swift:31:9: error: invalid\
    \ redeclaration of 'last_note'\n    var last_note = \"\"\n        ^\n/tmp/tmp46p6pc6m.swift:18:9:\
    \ note: 'last_note' previously declared here\n    var last_note = \"\"\n     \
    \   ^\n/tmp/tmp46p6pc6m.swift:32:9: error: invalid redeclaration of 'last_note'\n\
    \    var last_note = \"\"\n "
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var last_note = 0\n    var last_beat =\
    \ 0\n    var last_beats = 0\n    var last_beats_count = 0\n    var last_beats_count_count\
    \ = 0\n    var last_beats_count_count_count = 0\n    var last_beats_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count = 0\n    var last_beats_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count = 0\n    var\
    \ last_beats_count_count_count_count_count_count_count_count = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp9jnx7urk.swift:31:9: error: type annotation missing in pattern\n\
    \    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array = [Int]()\n\
    \    var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_string\
    \ = \"\"\n    var current_note_length_string_length = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_value = 0\n    var current_note_length_string_value_length\
    \ = 0\n    var current_note_length_string_value_length_index = 0\n    var current_note_length_string_value_length_value\
    \ = 0\n    var current_note_length_string_value_length_value_index = 0\n    var\
    \ current_note_length_string_value_length_value_index = 0\n    var current_note_length_string_value_length_value_index\
    \ = 0\n    var current_note_length_string_value_length_value_index = 0\n    var\
    \ current_note_length_string_value_length_value_index = 0\n    var current_note_length_string_value_length_value_index\
    \ = 0\n    var current_note_length_string_value_length_value_index = 0\n    var\
    \ current_note_length_string_value_length_value_index = 0\n    var current_note_length_string_value_length_value_index\
    \ = 0\n    var current_note_length_string_value_length_value_index = 0\n    var\
    \ current_note_length_string_value_length_value_index = 0\n    var current_note_length_string_value_length_value_index\
    \ = 0\n    var current_note_length_string_value_length_value_index = 0\n    var\
    \ current_note_length_string_value_length_value_index = 0\n    var current_note_length_string_value_length_value_index\
    \ = 0\n    var current_note_length_string_value_length_value_index = 0\n    var\
    \ current_note_length_string_value_length_value_index = 0\n    var current_note_length_string_value_length_value_index\
    \ = 0\n    var current_note_length_string_value_length_value_index = 0\n    var\
    \ current_note_length_string_value_length_value_index = 0\n    var current_note_length_string_value_length_value_index\
    \ = 0\n    var current_note_length_string_value_length_value_index = 0\n    var\
    \ current_note_length_string_value_length_value_index = 0\n    var current_note_length_string_value_length_value_index\
    \ = 0\n    var current_note_length_string_value_length_value_index = 0\n    var\
    \ current_note_length_string_value_length_value_index = 0\n    var current_note_length_string_value_length_value_index\
    \ = 0\n    var current_note_length_string_value_length_value_index = 0\n    var\
    \ current_note_length_string_value_length_value_index = 0\n    var current_note_length_string_value_length_value_index\
    \ = 0\n    var current_note_length_string_value_length_value_index = 0\n    var\
    \ current_note_length_string_value_length_value_index = 0\n    var current_note_length_string_value_length_value_index\
    \ = 0\n    var current_note_length_string_value_length_value_index = 0\n    var\
    \ current_note_length_string_value_length_value_index = 0\n    var current_note_length_string_value_length_value_index\
    \ = 0\n    var current_note_length_string_value_length_value_index = 0\n    var\
    \ current_note_length_string_value_length_value_index = 0\n    var current_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp0fxnpmd_.swift:25:9: error: invalid redeclaration of 'current_note_length_string_value_length_value_index'\n\
    \    var current_note_length_string_value_length_value_index = 0\n        ^\n\
    /tmp/tmp0fxnpmd_.swift:24:9: note: 'current_note_length_string_value_length_value_index'\
    \ previously declared here\n    var current_note_length_string_value_length_value_index\
    \ = 0\n        ^\n/tmp/tmp0fxnpmd_.swift:26:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_length_value_index'\n    var current_note_length_string_value_length_value_index\
    \ = 0\n        ^\n/tmp/tmp0fxnpmd_.swift:24:9: note: 'current_note_length_string_value_length_value_index'\
    \ previously declared here\n    var current_note_length_string_value_length_value_index\
    \ = 0\n        ^\n/tmp/tmp0fxnpmd_.swift:27:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_length_value_index'\n    var current_note_length_string_value_length_value_index\
    \ = 0\n        ^\n/tmp/tmp0fxnpmd_.swift:24:9: note: 'current_note_length_string_value_length_value_index'\
    \ previously declared here\n    var current_note_length_string_value_length_value_index\
    \ = 0\n        ^\n/tmp/tmp0fxnpmd_.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_length_value_index'\n    var current_note_length_string_value_length_value_index\
    \ = 0\n        ^\n/tmp/tmp0fxnpmd_.swift:24:9: note: 'current_note_length_string_value_length_value_index'\
    \ previously declared here\n    var current_note_length_string_value_length_value_index\
    \ = 0\n        ^\n/tmp/tmp0fxnpmd_.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_length_value_index'\n    var current_note_length_string_value_length_value_index\
    \ = 0\n        ^\n/tmp/tmp0fxnpmd_.swift:24:9: note: 'current_note_length_string_value_length_value_index'\
    \ previously declared here\n    var current_note_length_string_value_length_value_index\
    \ = 0\n        ^\n/tmp/tmp0fxnpmd_.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_length_value_index'\n    var current_note_length_string_value_length_"
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var lastbeat = 0\n    var lastnote = \"\"\n    var lastbeatbeat = 0\n\
    \    var lastnotenote = \"\"\n    var lastbeatbeatbeat = 0\n    var lastnotenotenote\
    \ = \"\"\n    var lastbeatbeatbeatbeat = 0\n    var lastnotenotenotenote = \"\"\
    \n    var lastbeatbeatbeatbeatbeat = 0\n    var lastnotenotenotenotenote = \"\"\
    \n    var lastbeatbeatbeatbeatbeatbeat = 0\n    var lastnotenotenotenotenotenote\
    \ = \"\"\n    var lastbeatbeatbeatbeatbeatbeat = 0\n    var lastnotenotenotenotenotenote\
    \ = \"\"\n    var lastbeatbeatbeatbeatbeatbeatbeat = 0\n    var lastnotenotenotenotenotenote\
    \ = \"\"\n    var lastbeatbeatbeatbeatbeatbeatbeat = 0\n    var lastnotenotenotenotenotenote\
    \ = \"\"\n    var lastbeatbeatbeatbeatbeatbeatbeat = 0\n    var lastnotenotenotenotenotenote\
    \ = \"\"\n    var lastbeatbeatbeatbeatbeatbeatbeatbeat = 0\n    var lastnotenotenotenotenotenote\
    \ = \"\"\n    var lastbeatbeatbeatbeatbeatbeatbeatbeat = 0\n    var lastnotenotenotenotenotenote\
    \ = \"\"\n    var lastbeatbeatbeatbeatbeatbeatbeatbeat = 0\n    var lastnotenotenotenotenotenote\
    \ = \"\"\n    var lastbeatbeatbeatbeatbeatbeatbeat = 0\n    var lastnotenotenotenotenotenote\
    \ = \"\"\n    var lastbeatbeatbeatbeatbeatbeatbeat = 0\n    var lastnotenotenotenotenotenote\
    \ = \"\"\n    var lastbeatbeatbeatbeatbeatbeatbeat = 0\n    var lastnotenotenotenotenotenote\
    \ = \"\"\n    var lastbeatbeatbeatbeatbeatbeatbeat = 0\n    var lastnotenotenotenotenotenote\
    \ = \"\"\n    var lastbeatbeatbeatbeatbeatbeatbeat = 0\n    var lastnotenotenotenotenotenote\
    \ = \"\"\n    var lastbeatbeatbeatbeatbeatbeatbeat = 0\n    var lastnotenotenotenotenotenote\
    \ = \"\"\n    var lastbeatbeatbeatbeatbeatbeatbeat = 0\n    var lastnotenotenotenotenotenote\
    \ = \"\"\n    var lastbeatbeatbeatbeatbeatbeatbeat = 0\n    var lastnotenotenotenotenotenote\
    \ = \"\"\n    var lastbeatbeatbeatbeatbeatbeatbeat = 0\n    var lastnotenotenotenotenotenote\
    \ = \"\"\n    var lastbeatbeatbeatbeatbeatbeat = 0\n    var lastnotenotenotenotenotenote\
    \ = \"\"\n    var lastbeatbeatbeatbeatbeatbeat = 0\n    var lastnotenotenotenotenotenote\
    \ = \"\"\n    var lastbeatbeatbeatbeatbeatbeatbeat = 0\n    var lastnotenotenotenotenote\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpcdxiqv_i.swift:29:9: error: invalid redeclaration of 'lastbeatbeatbeatbeatbeatbeat'\n\
    \    var lastbeatbeatbeatbeatbeatbeat = 0\n        ^\n/tmp/tmpcdxiqv_i.swift:27:9:\
    \ note: 'lastbeatbeatbeatbeatbeatbeat' previously declared here\n    var lastbeatbeatbeatbeatbeatbeat\
    \ = 0\n        ^\n/tmp/tmpcdxiqv_i.swift:30:9: error: invalid redeclaration of\
    \ 'lastnotenotenotenotenotenote'\n    var lastnotenotenotenotenotenote = \"\"\n\
    \        ^\n/tmp/tmpcdxiqv_i.swift:28:9: note: 'lastnotenotenotenotenotenote'\
    \ previously declared here\n    var lastnotenotenotenotenotenote = \"\"\n    \
    \    ^\n/tmp/tmpcdxiqv_i.swift:32:9: error: invalid redeclaration of 'lastnotenotenotenotenotenote'\n\
    \    var lastnotenotenotenotenotenote = \"\"\n        ^\n/tmp/tmpcdxiqv_i.swift:28:9:\
    \ note: 'lastnotenotenotenotenotenote' previously declared here\n    var lastnotenotenotenotenotenote\
    \ = \"\"\n        ^\n/tmp/tmpcdxiqv_i.swift:33:9: error: invalid redeclaration\
    \ of 'lastbeatbeatbeatbeatbeatbeatbeat'\n    var lastbeatbeatbeatbeatbeatbeatbeat\
    \ = 0\n        ^\n/tmp/tmpcdxiqv_i.swift:31:9: note: 'lastbeatbeatbeatbeatbeatbeatbeat'\
    \ previously declared here\n    var lastbeatbeatbeatbeatbeatbeatbeat = 0\n   \
    \     ^\n/tmp/tmpcdxiqv_i.swift:34:9: error: invalid redeclaration of 'lastnotenotenotenotenotenote'\n\
    \    var lastnotenotenotenotenotenote = \"\"\n        ^\n/tmp/tmpcdxiqv_i.swift:28:9:\
    \ note: 'lastnotenotenotenotenotenote' previously declared here\n    var lastnotenotenotenotenotenote\
    \ = \"\"\n        ^\n/tmp/tmpcdxiqv_i.swift:35:9: error: invalid redeclaration\
    \ of 'lastbeatbeatbeatbeatbeatbeatbeat'\n    var lastbeatbeatbeatbeatbeatbeatbeat\
    \ = 0\n        ^\n/tmp/tmpcdxiqv_i.swift:31:9: note: 'lastbeatbeatbeatbeatbeatbeatbeat'\
    \ previously declared here\n    var lastbeatbeatbeatbeatbeatbeatbeat = 0\n   \
    \     ^\n/tmp/tmpcdxiqv_i.swift:36:9: error: invalid redeclaration of 'lastnotenotenotenotenotenote'\n\
    \    var lastnotenotenotenotenotenote = \"\"\n        ^\n/tmp/tmpcdxiqv_i.swift:28:9:\
    \ note: 'lastnotenotenotenotenotenote' previously declared here\n    var lastnotenotenotenotenotenote\
    \ = \"\"\n        ^\n/tmp/tmpcdxiq"
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var current_note = \"\
    \"\n    var current_note_length = 0\n    var current_beat = 0\n    var current_beat_length\
    \ = 0\n    var current_note_length = 0\n    var current_note_index = 0\n    var\
    \ current_note_char = \"\"\n    var current_note_char_length = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_length_index = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_length_index = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_length_index = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_length_index = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_length_index = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_length_index = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_length_index = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_length_index = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_length_index = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_length_index = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_length_index = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_length_index = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_length_index = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_length_index = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_length_index = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_length_index = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_length_index = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_length_index = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_length_index = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_length_index = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_length_index = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_length_index = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_length_index = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_length_index = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_length_index = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_length_index = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_length_index = 0\n    var current_note_char_length_index\
    \ = 0\n    var current_note_char_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmprz31i23o.swift:19:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = 0\n        ^\n/tmp/tmprz31i23o.swift:16:9: note:\
    \ 'current_note_length' previously declared here\n    var current_note_length\
    \ = 0\n        ^\n/tmp/tmprz31i23o.swift:24:9: error: invalid redeclaration of\
    \ 'current_note_char_length_index'\n    var current_note_char_length_index = 0\n\
    \        ^\n/tmp/tmprz31i23o.swift:23:9: note: 'current_note_char_length_index'\
    \ previously declared here\n    var current_note_char_length_index = 0\n     \
    \   ^\n/tmp/tmprz31i23o.swift:25:9: error: invalid redeclaration of 'current_note_char_length_index'\n\
    \    var current_note_char_length_index = 0\n        ^\n/tmp/tmprz31i23o.swift:23:9:\
    \ note: 'current_note_char_length_index' previously declared here\n    var current_note_char_length_index\
    \ = 0\n        ^\n/tmp/tmprz31i23o.swift:26:9: error: invalid redeclaration of\
    \ 'current_note_char_length_index'\n    var current_note_char_length_index = 0\n\
    \        ^\n/tmp/tmprz31i23o.swift:23:9: note: 'current_note_char_length_index'\
    \ previously declared here\n    var current_note_char_length_index = 0\n     \
    \   ^\n/tmp/tmprz31i23o.swift:27:9: error: invalid redeclaration of 'current_note_char_length_index'\n\
    \    var current_note_char_length_index = 0\n        ^\n/tmp/tmprz31i23o.swift:23:9:\
    \ note: 'current_note_char_length_index' previously declared here\n    var current_note_char_length_index\
    \ = 0\n        ^\n/tmp/tmprz31i23o.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_char_length_index'\n    var current_note_char_length_index = 0\n\
    \        ^\n/tmp/tmprz31i23o.swift:23:9: note: 'current_note_char_length_index'\
    \ previously declared here\n    var current_note_char_length_index = 0\n     \
    \   ^\n/tmp/tmprz31i23o.swift:29:9: error: invalid redeclaration of 'current_note_char_length_index'\n\
    \    var current_note_char_length_index = 0\n        ^\n/tmp/tmprz31i23o.swift:23:9:\
    \ note: 'current_note_char_length_index' previously declared here\n    var current_note_char_length_index\
    \ = 0\n        ^\n/tmp/tmprz31i23o.swift:30:9: error: inval"
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = 0\n    var note_count\
    \ = 0\n    var notes_count = 0\n    var note_length = 0\n    var note_length_count\
    \ = 0\n    var note_length_index = 0\n    var note_length_index2 = 0\n    var\
    \ note_length_index3 = 0\n    var note_length_index4 = 0\n    var note_length_index5\
    \ = 0\n    var note_length_index6 = 0\n    var note_length_index7 = 0\n    var\
    \ note_length_index8 = 0\n    var note_length_index9 = 0\n    var note_length_index10\
    \ = 0\n    var note_length_index11 = 0\n    var note_length_index12 = 0\n    var\
    \ note_length_index13 = 0\n    var note_length_index14 = 0\n    var note_length_index15\
    \ = 0\n    var note_length_index16 = 0\n    var note_length_index17 = 0\n    var\
    \ note_length_index18 = 0\n    var note_length_index19 = 0\n    var note_length_index20\
    \ = 0\n    var note_length_index21 = 0\n    var note_length_index22 = 0\n    var\
    \ note_length_index23 = 0\n    var note_length_index24 = 0\n    var note_length_index25\
    \ = 0\n    var note_length_index26 = 0\n    var note_length_index27 = 0\n    var\
    \ note_length_index28 = 0\n    var note_length_index29 = 0\n    var note_length_index30\
    \ = 0\n    var note_length_index31 = 0\n    var note_length_index32 = 0\n    var\
    \ note_length_index33 = 0\n    var note_length_index34 = 0\n    var note_length_index35\
    \ = 0\n    var note_length_index36 = 0\n    var note_length_index37 = 0\n    var\
    \ note_length_index38 = 0\n    var note_length_index39 = 0\n    var note_length_index40\
    \ = 0\n    var note_length_index41 = 0\n    var note_length_index42 = 0\n    var\
    \ note_length_index43 = 0\n    var note_length_index44 = 0\n    var note_length_index45\
    \ = 0\n    var note_length_index46 = 0\n    var note_length_index47 = 0\n    var\
    \ note_length_index48 = 0\n    var note_length_index49 = 0\n    var note_length_index50\
    \ = 0\n    var note_length_index51 = 0\n    var note_length_index52 = 0\n    var\
    \ note_length_index53 = 0\n    var note_length_index54 = 0\n    var note_length_index55\
    \ = 0\n    var note_length_index56 = 0\n    var note_length_index57 = 0\n    var\
    \ note_length_index58 = 0\n    var note_length_index59 = 0\n    var note_length_index60\
    \ = 0\n    var note_length_index61 = 0\n    var note_length_index62 = 0\n    var\
    \ note_length_index63 = 0\n    var note_length_index64 = 0\n    var note_length_index65\
    \ = 0\n    var note_length_index66 = 0\n    var note_length_index67 = 0\n    var\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(parse_music(music_string: \"\"\
    ) == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4, 4, 4,\
    \ 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string:\
    \ \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmplp2jz_ou.swift:87:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmplp2jz_ou.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmplp2jz_ou.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmplp2jz_ou.swift:14:9:\
    \ warning: initialization of variable 'beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmplp2jz_ou.swift:15:9: warning: initialization of variable 'note' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var note\
    \ = 0\n    ~~~~^~~~\n    _\n/tmp/tmplp2jz_ou.swift:16:9: warning: initialization\
    \ of variable 'note_count' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_count = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmplp2jz_ou.swift:17:9:\
    \ warning: initialization of variable 'notes_count' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var notes_count = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmplp2jz_ou.swift:18:9: warning: initialization of variable 'note_length'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_length = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmplp2jz_ou.swift:19:9:\
    \ warning: initialization of variable 'note_length_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var note_length_count =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmplp2jz_ou.swift:20:9: warning: initialization\
    \ of variable 'note_length_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_length_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmplp2jz_ou.swift:21:9: warning: initialization of variable 'note_length_index2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_length_index2 = 0"
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beats_count = 0\n    var note_length = 0\n\
    \    var note_index = 0\n    var note = \"\"\n    var note_char = \"\"\n    var\
    \ note_char_index = 0\n    var note_char_length = 0\n    var note_char_char =\
    \ \"\"\n    var note_char_char_index = 0\n    var note_char_char_length = 0\n\
    \    var note_char_char_char = \"\"\n    var note_char_char_char_index = 0\n \
    \   var note_char_char_char_length = 0\n    var note_char_char_char_char = \"\"\
    \n    var note_char_char_char_char_index = 0\n    var note_char_char_char_char_length\
    \ = 0\n    var note_char_char_char_char_char = \"\"\n    var note_char_char_char_char_char_index\
    \ = 0\n    var note_char_char_char_char_char_length = 0\n    var note_char_char_char_char_char_char\
    \ = \"\"\n    var note_char_char_char_char_char_char_index = 0\n    var note_char_char_char_char_char_char_length\
    \ = 0\n    var note_char_char_char_char_char_char_char = \"\"\n    var note_char_char_char_char_char_char_index\
    \ = 0\n    var note_char_char_char_char_char_char_length = 0\n    var note_char_char_char_char_char_char_char\
    \ = \"\"\n    var note_char_char_char_char_char_char_char_index = 0\n    var note_char_char_char_char_char_char_char_length\
    \ = 0\n    var note_char_char_char_char_char_char_char_char = \"\"\n    var note_char_char_char_char_char_char_char_index\
    \ = 0\n    var note_char_char_char_char_char_char_char_length = 0\n    var note_char_char_char_char_char_char_char_char\
    \ = \"\"\n    var note_char_char_char_char_char_char_char_index = 0\n    var note_char_char_char_char_char_char_char_length\
    \ = 0\n    var note_char_char_char_char_char_char_char_char = \"\"\n    var note_char_char_char_char_char_char_char_index\
    \ = 0\n    var note_char_char_char_char_char_char_char_length = 0\n    var note_char_char_char_char_char_char_char_char\
    \ = \"\"\n    var note_char_char_char_char_char_char_char_index = 0\n    var note_char_char_char_char_char_char_char_length\
    \ = 0\n    var note_char_char_char_char_char_char_char_char = \"\"\n    var note_char_char_char_char_char_char_char_index\
    \ = 0\n    var note_char_char_char_char_char_char_char_length = 0\n    var note_char_char_char_char_char_char_char_char\
    \ = \"\"\n    var note_char_char_char_char_char_char_char_index = 0\n    var note_char_char_char_char_char_char_char_length\
    \ = 0\n    var note_char_char_char_char_char_char_char_char = \"\"\n    var note_char_char_char_char_char_char_char_index\
    \ = 0\n    var note_char_char_char_char_char_char_char_char_length = 0\n    var\
    \ note_char_char_char_char_char_char_char_char_char\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp14d0fbxx.swift:37:9: error: invalid redeclaration of 'note_char_char_char_char_char_char_index'\n\
    \    var note_char_char_char_char_char_char_index = 0\n        ^\n/tmp/tmp14d0fbxx.swift:34:9:\
    \ note: 'note_char_char_char_char_char_char_index' previously declared here\n\
    \    var note_char_char_char_char_char_char_index = 0\n        ^\n/tmp/tmp14d0fbxx.swift:38:9:\
    \ error: invalid redeclaration of 'note_char_char_char_char_char_char_length'\n\
    \    var note_char_char_char_char_char_char_length = 0\n        ^\n/tmp/tmp14d0fbxx.swift:35:9:\
    \ note: 'note_char_char_char_char_char_char_length' previously declared here\n\
    \    var note_char_char_char_char_char_char_length = 0\n        ^\n/tmp/tmp14d0fbxx.swift:39:9:\
    \ error: invalid redeclaration of 'note_char_char_char_char_char_char_char'\n\
    \    var note_char_char_char_char_char_char_char = \"\"\n        ^\n/tmp/tmp14d0fbxx.swift:36:9:\
    \ note: 'note_char_char_char_char_char_char_char' previously declared here\n \
    \   var note_char_char_char_char_char_char_char = \"\"\n        ^\n/tmp/tmp14d0fbxx.swift:43:9:\
    \ error: invalid redeclaration of 'note_char_char_char_char_char_char_char_index'\n\
    \    var note_char_char_char_char_char_char_char_index = 0\n        ^\n/tmp/tmp14d0fbxx.swift:40:9:\
    \ note: 'note_char_char_char_char_char_char_char_index' previously declared here\n\
    \    var note_char_char_char_char_char_char_char_index = 0\n        ^\n/tmp/tmp14d0fbxx.swift:44:9:\
    \ error: invalid redeclaration of 'note_char_char_char_char_char_char_char_length'\n\
    \    var note_char_char_char_char_char_char_char_length = 0\n        ^\n/tmp/tmp14d0fbxx.swift:41:9:\
    \ note: 'note_char_char_char_char_char_char_char_length' previously declared here\n\
    \    var note_char_char_char_char_char_char_char_length = 0\n        ^\n/tmp/tmp14d0fbxx.swift:45:9:\
    \ error: invalid redeclaration of 'note_char_char_char_char_char_char_char_char'\n\
    \    var note_char_char_char_char_char_char_char_char = \"\"\n        ^\n/tmp/tmp14d0fbxx.swift:42:9:\
    \ note: 'note_char_char_char_char_char_char_char_char' previously declared here\n\
    \    var note_char_char_char_char_char_char_char_char ="
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var notes = [String]()\n    var notes_length\
    \ = 0\n    var notes_length2 = 0\n    var notes_length3 = 0\n    var notes_length4\
    \ = 0\n    var notes_length5 = 0\n    var notes_length6 = 0\n    var notes_length7\
    \ = 0\n    var notes_length8 = 0\n    var notes_length9 = 0\n    var notes_length10\
    \ = 0\n    var notes_length11 = 0\n    var notes_length12 = 0\n    var notes_length13\
    \ = 0\n    var notes_length14 = 0\n    var notes_length15 = 0\n    var notes_length16\
    \ = 0\n    var notes_length17 = 0\n    var notes_length18 = 0\n    var notes_length19\
    \ = 0\n    var notes_length20 = 0\n    var notes_length21 = 0\n    var notes_length22\
    \ = 0\n    var notes_length23 = 0\n    var notes_length24 = 0\n    var notes_length25\
    \ = 0\n    var notes_length26 = 0\n    var notes_length27 = 0\n    var notes_length28\
    \ = 0\n    var notes_length29 = 0\n    var notes_length30 = 0\n    var notes_length31\
    \ = 0\n    var notes_length32 = 0\n    var notes_length33 = 0\n    var notes_length34\
    \ = 0\n    var notes_length35 = 0\n    var notes_length36 = 0\n    var notes_length37\
    \ = 0\n    var notes_length38 = 0\n    var notes_length39 = 0\n    var notes_length40\
    \ = 0\n    var notes_length41 = 0\n    var notes_length42 = 0\n    var notes_length43\
    \ = 0\n    var notes_length44 = 0\n    var notes_length45 = 0\n    var notes_length46\
    \ = 0\n    var notes_length47 = 0\n    var notes_length48 = 0\n    var notes_length49\
    \ = 0\n    var notes_length50 = 0\n    var notes_length51 = 0\n    var notes_length52\
    \ = 0\n    var notes_length53 = 0\n    var notes_length54 = 0\n    var notes_length55\
    \ = 0\n    var notes_length56 = 0\n    var notes_length57 = 0\n    var notes_length58\
    \ = 0\n    var notes_length59 = 0\n    var notes_length60 = 0\n    var notes_length61\
    \ = 0\n    var notes_length62 = 0\n    var notes_length63 = 0\n    var notes_length64\
    \ = 0\n    var notes_length65 = 0\n    var notes_length66 = 0\n    var notes_length67\
    \ = 0\n    var notes_length68 = 0\n    var notes_length69 = 0\n    var notes_length70\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmptfcvlsby.swift:86:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmptfcvlsby.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmptfcvlsby.swift:13:9: warning:\
    \ initialization of variable 'beat' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n/tmp/tmptfcvlsby.swift:14:9:\
    \ warning: initialization of variable 'note' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmptfcvlsby.swift:15:9: warning: initialization of variable 'notes' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var notes\
    \ = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmptfcvlsby.swift:16:9: warning: initialization\
    \ of variable 'notes_length' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_length = 0\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmptfcvlsby.swift:17:9: warning: initialization of variable 'notes_length2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length2 = 0\n    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmptfcvlsby.swift:18:9:\
    \ warning: initialization of variable 'notes_length3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length3 = 0\n\
    \    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmptfcvlsby.swift:19:9: warning: initialization\
    \ of variable 'notes_length4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_length4 = 0\n    ~~~~^~~~~~~~~~~~~\n  \
    \  _\n/tmp/tmptfcvlsby.swift:20:9: warning: initialization of variable 'notes_length5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length5 = 0\n    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmptfcvlsby.swift:21:9:\
    \ warning: initialization of variable 'notes_length6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length6 = 0\n\
    \    ~~~~^~~~~~~"
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_string\
    \ = \"\"\n    var current_note_length_string_index = 0\n    var current_note_length_string_value\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_index = 0\n    var current_note_length_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string = \"\"\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppzpchrsx.swift:26:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_index = 0\n        ^\n\
    /tmp/tmppzpchrsx.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:31:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmppzpchrsx.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var note_count = 0\n    var note_index = 0\n \
    \   var note_string = \"\"\n    var note_length = 0\n    var note_last_beat =\
    \ 0\n    var note_last_beat_count = 0\n    var note_last_beat_length = 0\n   \
    \ var note_last_beat_note = 0\n    var note_last_beat_note_count = 0\n    var\
    \ note_last_beat_note_length = 0\n    var note_last_beat_note_note = 0\n    var\
    \ note_last_beat_note_note_count = 0\n    var note_last_beat_note_note_length\
    \ = 0\n    var note_last_beat_note_note_note = 0\n    var note_last_beat_note_note_note_count\
    \ = 0\n    var note_last_beat_note_note_note_length = 0\n    var note_last_beat_note_note_note\
    \ = 0\n    var note_last_beat_note_note_note_count = 0\n    var note_last_beat_note_note_note_length\
    \ = 0\n    var note_last_beat_note_note_note = 0\n    var note_last_beat_note_note_note_count\
    \ = 0\n    var note_last_beat_note_note_note_length = 0\n    var note_last_beat_note_note_note\
    \ = 0\n    var note_last_beat_note_note_note_count = 0\n    var note_last_beat_note_note_note_length\
    \ = 0\n    var note_last_beat_note_note_note = 0\n    var note_last_beat_note_note_note_count\
    \ = 0\n    var note_last_beat_note_note_note_length = 0\n    var note_last_beat_note_note_note\
    \ = 0\n    var note_last_beat_note_note_note_count = 0\n    var note_last_beat_note_note_note_length\
    \ = 0\n    var note_last_beat_note_note_note = 0\n    var note_last_beat_note_note_note_count\
    \ = 0\n    var note_last_beat_note_note_note_length = 0\n    var note_last_beat_note_note_note\
    \ = 0\n    var note_last_beat_note_note_note_count = 0\n    var note_last_beat_note_note_note_length\
    \ = 0\n    var note_last_beat_note_note_note = 0\n    var note_last_beat_note_note_note_count\
    \ = 0\n    var note_last_beat_note_note_note_length = 0\n    var note_last_beat_note_note_note\
    \ = 0\n    var note_last_beat_note_note_note_count = 0\n    var note_last_beat_note_note_note_length\
    \ = 0\n    var note_last_beat_note_note_note = 0\n    var note_last_beat_note_note_note_count\
    \ = 0\n    var note_last_beat_note_note_note_length = 0\n    var note_last_beat_note_note_note\
    \ = 0\n    var note_last_beat_note_note_note_count = 0\n    var note_last_beat_note_note_note_length\
    \ = 0\n    var note_last_beat_note_note_note = 0\n    var note_last_beat_note_note_note\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp2i1jg0ot.swift:30:9: error: invalid redeclaration of 'note_last_beat_note_note_note'\n\
    \    var note_last_beat_note_note_note = 0\n        ^\n/tmp/tmp2i1jg0ot.swift:27:9:\
    \ note: 'note_last_beat_note_note_note' previously declared here\n    var note_last_beat_note_note_note\
    \ = 0\n        ^\n/tmp/tmp2i1jg0ot.swift:31:9: error: invalid redeclaration of\
    \ 'note_last_beat_note_note_note_count'\n    var note_last_beat_note_note_note_count\
    \ = 0\n        ^\n/tmp/tmp2i1jg0ot.swift:28:9: note: 'note_last_beat_note_note_note_count'\
    \ previously declared here\n    var note_last_beat_note_note_note_count = 0\n\
    \        ^\n/tmp/tmp2i1jg0ot.swift:32:9: error: invalid redeclaration of 'note_last_beat_note_note_note_length'\n\
    \    var note_last_beat_note_note_note_length = 0\n        ^\n/tmp/tmp2i1jg0ot.swift:29:9:\
    \ note: 'note_last_beat_note_note_note_length' previously declared here\n    var\
    \ note_last_beat_note_note_note_length = 0\n        ^\n/tmp/tmp2i1jg0ot.swift:33:9:\
    \ error: invalid redeclaration of 'note_last_beat_note_note_note'\n    var note_last_beat_note_note_note\
    \ = 0\n        ^\n/tmp/tmp2i1jg0ot.swift:27:9: note: 'note_last_beat_note_note_note'\
    \ previously declared here\n    var note_last_beat_note_note_note = 0\n      \
    \  ^\n/tmp/tmp2i1jg0ot.swift:34:9: error: invalid redeclaration of 'note_last_beat_note_note_note_count'\n\
    \    var note_last_beat_note_note_note_count = 0\n        ^\n/tmp/tmp2i1jg0ot.swift:28:9:\
    \ note: 'note_last_beat_note_note_note_count' previously declared here\n    var\
    \ note_last_beat_note_note_note_count = 0\n        ^\n/tmp/tmp2i1jg0ot.swift:35:9:\
    \ error: invalid redeclaration of 'note_last_beat_note_note_note_length'\n   \
    \ var note_last_beat_note_note_note_length = 0\n        ^\n/tmp/tmp2i1jg0ot.swift:29:9:\
    \ note: 'note_last_beat_note_note_note_length' previously declared here\n    var\
    \ note_last_beat_note_note_note_length = 0\n        ^\n/tmp/tmp2i1jg0ot.swift:36:9:\
    \ error: invalid redeclaration of 'note_last_beat_note_note_note'\n    var note_last_beat_note_note_note\
    \ = 0\n        ^\n/tmp/tmp2i1jg0ot.swift:27:9: note: 'note_last_beat_note_note_note"
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = music_string.characters\n    var beat = 0\n    var note = 0\n\
    \    var last = 0\n    var last_beat = 0\n    var last_note = 0\n    var last_last_beat\
    \ = 0\n    var last_last_note = 0\n    var last_last_last_beat = 0\n    var last_last_last_note\
    \ = 0\n    var last_last_last_last_beat = 0\n    var last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_beat = 0\n    var last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_beat = 0\n    var last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_beat = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_beat = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_last_beat = 0\n  \
    \  var last_last_last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_last_note = 0\n  \
    \  var last_last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_last_beat = 0\n  \
    \  var last_last_last_last_last_last_last_last_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpsff65xv8.swift:13:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var notes = music_string.characters\n             \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpsff65xv8.swift:27:9: error: invalid redeclaration of 'last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpsff65xv8.swift:25:9:\
    \ note: 'last_last_last_last_last_beat' previously declared here\n    var last_last_last_last_last_beat\
    \ = 0\n        ^\n/tmp/tmpsff65xv8.swift:28:9: error: invalid redeclaration of\
    \ 'last_last_last_last_last_note'\n    var last_last_last_last_last_note = 0\n\
    \        ^\n/tmp/tmpsff65xv8.swift:26:9: note: 'last_last_last_last_last_note'\
    \ previously declared here\n    var last_last_last_last_last_note = 0\n      \
    \  ^\n/tmp/tmpsff65xv8.swift:31:9: error: invalid redeclaration of 'last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpsff65xv8.swift:29:9:\
    \ note: 'last_last_last_last_last_last_beat' previously declared here\n    var\
    \ last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpsff65xv8.swift:32:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_note'\n    var\
    \ last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpsff65xv8.swift:30:9:\
    \ note: 'last_last_last_last_last_last_note' previously declared here\n    var\
    \ last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpsff65xv8.swift:35:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpsff65xv8.swift:33:9:\
    \ note: 'last_last_last_last_last_last_last_beat' previously declared here\n \
    \   var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpsff65xv8.swift:36:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_note'\n\
    \    var last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpsff65xv8.swift:34:9:\
    \ note: 'last_last_last_last_l"
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var current_beat = 0\n    var current_note = \"\"\
    \n    var current_note_length = 0\n    var current_note_length_count = 0\n   \
    \ var current_note_length_index = 0\n    var current_note_length_index2 = 0\n\
    \    var current_note_length_index3 = 0\n    var current_note_length_index4 =\
    \ 0\n    var current_note_length_index5 = 0\n    var current_note_length_index6\
    \ = 0\n    var current_note_length_index7 = 0\n    var current_note_length_index8\
    \ = 0\n    var current_note_length_index9 = 0\n    var current_note_length_index10\
    \ = 0\n    var current_note_length_index11 = 0\n    var current_note_length_index12\
    \ = 0\n    var current_note_length_index13 = 0\n    var current_note_length_index14\
    \ = 0\n    var current_note_length_index15 = 0\n    var current_note_length_index16\
    \ = 0\n    var current_note_length_index17 = 0\n    var current_note_length_index18\
    \ = 0\n    var current_note_length_index19 = 0\n    var current_note_length_index20\
    \ = 0\n    var current_note_length_index21 = 0\n    var current_note_length_index22\
    \ = 0\n    var current_note_length_index23 = 0\n    var current_note_length_index24\
    \ = 0\n    var current_note_length_index25 = 0\n    var current_note_length_index26\
    \ = 0\n    var current_note_length_index27 = 0\n    var current_note_length_index28\
    \ = 0\n    var current_note_length_index29 = 0\n    var current_note_length_index30\
    \ = 0\n    var current_note_length_index31 = 0\n    var current_note_length_index32\
    \ = 0\n    var current_note_length_index33 = 0\n    var current_note_length_index34\
    \ = 0\n    var current_note_length_index35 = 0\n    var current_note_length_index36\
    \ = 0\n    var current_note_length_index37 = 0\n    var current_note_length_index38\
    \ = 0\n    var current_note_length_index39 = 0\n    var current_note_length_index40\
    \ = 0\n    var current_note_length_index41 = 0\n    var current_note_length_index42\
    \ = 0\n    var current_note_length_index43 = 0\n    var current_note_length_index44\
    \ = 0\n    var current_note_length_index45 = 0\n    var current_note_length_index46\
    \ = 0\n    var current_note_length_index47 = 0\n    var current_note_length_index48\
    \ = 0\n    var current_note_length_index49 = 0\n    var current_note_length_index50\
    \ = 0\n    var current_note_length_index51 = 0\n    var current_note_length_index52\
    \ = 0\n    var current_note_length_index53 = 0\n    var current_note_length_index54\
    \ = 0\n    var current_note_length_index55 = 0\n    var current_note_length_index56\
    \ = 0\n    var current_note_length_index57 = 0\n    var current_note_length_index58\
    \ = 0\n    var current_note_length_index59 = 0\n    var current_note_length_index60\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbehusjzy.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_note_length_index60\n        ^\n"
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var notes: [String] = []\n    var beats_count = 0\n    var note_length =\
    \ 0\n    var note_index = 0\n    var note_char = \"\"\n    var note_char_index\
    \ = 0\n    var note_char_length = 0\n    var note_char_index2 = 0\n    var note_char_length2\
    \ = 0\n    var note_char_index3 = 0\n    var note_char_length3 = 0\n    var note_char_index4\
    \ = 0\n    var note_char_length4 = 0\n    var note_char_index5 = 0\n    var note_char_length5\
    \ = 0\n    var note_char_index6 = 0\n    var note_char_length6 = 0\n    var note_char_index7\
    \ = 0\n    var note_char_length7 = 0\n    var note_char_index8 = 0\n    var note_char_length8\
    \ = 0\n    var note_char_index9 = 0\n    var note_char_length9 = 0\n    var note_char_index10\
    \ = 0\n    var note_char_length10 = 0\n    var note_char_index11 = 0\n    var\
    \ note_char_length11 = 0\n    var note_char_index12 = 0\n    var note_char_length12\
    \ = 0\n    var note_char_index13 = 0\n    var note_char_length13 = 0\n    var\
    \ note_char_index14 = 0\n    var note_char_length14 = 0\n    var note_char_index15\
    \ = 0\n    var note_char_length15 = 0\n    var note_char_index16 = 0\n    var\
    \ note_char_length16 = 0\n    var note_char_index17 = 0\n    var note_char_length17\
    \ = 0\n    var note_char_index18 = 0\n    var note_char_length18 = 0\n    var\
    \ note_char_index19 = 0\n    var note_char_length19 = 0\n    var note_char_index20\
    \ = 0\n    var note_char_length20 = 0\n    var note_char_index21 = 0\n    var\
    \ note_char_length21 = 0\n    var note_char_index22 = 0\n    var note_char_length22\
    \ = 0\n    var note_char_index23 = 0\n    var note_char_length23 = 0\n    var\
    \ note_char_index24 = 0\n    var note_char_length24 = 0\n    var note_char_index25\
    \ = 0\n    var note_char_length25 = 0\n    var note_char_index26 = 0\n    var\
    \ note_char_length26 = 0\n    var note_char_index27 = 0\n    var note_char_length27\
    \ = 0\n    var note_char_index28 = 0\n    var note_char_length28 = 0\n    var\
    \ note_char_index29 = 0\n    var note_char_length29 = 0\n    var note_char_index30\
    \ = 0\n    var note_char_length30 = 0\n    var note_char_index31 = 0\n    var\
    \ note_char_length31 = 0\n    var note_char_index32 = 0\n    var note_char_length32\
    \ = 0\n    var note_char_index33 = 0\n    var note_char_length33 = 0\n    var\
    \ note_char_index34 = 0\n    var note_char_length34 = 0\n    var note_char_index35\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpm4ghb_i3.swift:12:9: warning: variable 'beats' was never used;\
    \ consider replacing with '_' or removing it\n    var beats: [Int] = []\n    \
    \    ^~~~~\n        _\n/tmp/tmpm4ghb_i3.swift:13:9: warning: variable 'notes'\
    \ was never used; consider replacing with '_' or removing it\n    var notes: [String]\
    \ = []\n        ^~~~~\n        _\n/tmp/tmpm4ghb_i3.swift:14:9: warning: initialization\
    \ of variable 'beats_count' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var beats_count = 0\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmpm4ghb_i3.swift:15:9: warning: initialization of variable 'note_length'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_length = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpm4ghb_i3.swift:16:9:\
    \ warning: initialization of variable 'note_index' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_index = 0\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmpm4ghb_i3.swift:17:9: warning: initialization of variable 'note_char'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_char = \"\"\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpm4ghb_i3.swift:18:9:\
    \ warning: initialization of variable 'note_char_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var note_char_index = 0\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpm4ghb_i3.swift:19:9: warning: initialization\
    \ of variable 'note_char_length' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_char_length = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpm4ghb_i3.swift:20:9: warning: initialization of variable 'note_char_index2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_char_index2 = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpm4ghb_i3.swift:21:9:\
    \ warning: initialization of variable 'note_char_length2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var note_char_length2 =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpm4ghb_i3.swift:22:9: warning: initializat"
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = Int()\n    var note_count = 0\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpm2jhh8zq.swift:17:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = Int()\n        ^\n/tmp/tmpm2jhh8zq.swift:16:9: note: 'note_length'\
    \ previously declared here\n    var note_length = Int()\n        ^\n/tmp/tmpm2jhh8zq.swift:18:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = Int()\n\
    \        ^\n/tmp/tmpm2jhh8zq.swift:16:9: note: 'note_length' previously declared\
    \ here\n    var note_length = Int()\n        ^\n/tmp/tmpm2jhh8zq.swift:19:9: error:\
    \ invalid redeclaration of 'note_length'\n    var note_length = Int()\n      \
    \  ^\n/tmp/tmpm2jhh8zq.swift:16:9: note: 'note_length' previously declared here\n\
    \    var note_length = Int()\n        ^\n/tmp/tmpm2jhh8zq.swift:20:9: error: invalid\
    \ redeclaration of 'note_length'\n    var note_length = Int()\n        ^\n/tmp/tmpm2jhh8zq.swift:16:9:\
    \ note: 'note_length' previously declared here\n    var note_length = Int()\n\
    \        ^\n/tmp/tmpm2jhh8zq.swift:21:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = Int()\n        ^\n/tmp/tmpm2jhh8zq.swift:16:9: note: 'note_length'\
    \ previously declared here\n    var note_length = Int()\n        ^\n/tmp/tmpm2jhh8zq.swift:22:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = Int()\n\
    \        ^\n/tmp/tmpm2jhh8zq.swift:16:9: note: 'note_length' previously declared\
    \ here\n    var note_length = Int()\n        ^\n/tmp/tmpm2jhh8zq.swift:23:9: error:\
    \ invalid redeclaration of 'note_length'\n    var note_length = Int()\n      \
    \  ^\n/tmp/tmpm2jhh8zq.swift:16:9: note: 'note_length' previously declared here\n\
    \    var note_length = Int()\n        ^\n/tmp/tmpm2jhh8zq.swift:24:9: error: invalid\
    \ redeclaration of 'note_length'\n    var note_length = Int()\n        ^\n/tmp/tmpm2jhh8zq.swift:16:9:\
    \ note: 'note_length' previously declared here\n    var note_length = Int()\n\
    \        ^\n/tmp/tmpm2jhh8zq.swift:25:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = Int()\n        ^\n/tmp/tmpm2jhh8zq.swift:16:9: note: 'note_length'\
    \ previously declared here\n    var note_length = Int()\n        ^\n/tmp/tmpm2jhh8zq.swift:"
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    for c in\
    \ music_string {\n        if c == 'o' {\n            if note != \"\" {\n     \
    \           beats.append(beat)\n                notes.append(note)\n         \
    \       beat = 0\n                note = \"\"\n            }\n        } else {\n\
    \            if note != \"\" {\n                note += c\n            } else\
    \ {\n                note += c\n            }\n        }\n    }\n    beats.append(beat)\n\
    \    notes.append(note)\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmph9c1vn36.swift:17:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmph9c1vn36.swift:26:25: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n                note += c\n            \
    \            ^\n/tmp/tmph9c1vn36.swift:28:25: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n                note += c\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array = [Int]()\n\
    \    var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_index2\
    \ = 0\n    var current_note_length_index3 = 0\n    var current_note_length_index4\
    \ = 0\n    var current_note_length_index5 = 0\n    var current_note_length_index6\
    \ = 0\n    var current_note_length_index7 = 0\n    var current_note_length_index8\
    \ = 0\n    var current_note_length_index9 = 0\n    var current_note_length_index10\
    \ = 0\n    var current_note_length_index11 = 0\n    var current_note_length_index12\
    \ = 0\n    var current_note_length_index13 = 0\n    var current_note_length_index14\
    \ = 0\n    var current_note_length_index15 = 0\n    var current_note_length_index16\
    \ = 0\n    var current_note_length_index17 = 0\n    var current_note_length_index18\
    \ = 0\n    var current_note_length_index19 = 0\n    var current_note_length_index20\
    \ = 0\n    var current_note_length_index21 = 0\n    var current_note_length_index22\
    \ = 0\n    var current_note_length_index23 = 0\n    var current_note_length_index24\
    \ = 0\n    var current_note_length_index25 = 0\n    var current_note_length_index26\
    \ = 0\n    var current_note_length_index27 = 0\n    var current_note_length_index28\
    \ = 0\n    var current_note_length_index29 = 0\n    var current_note_length_index30\
    \ = 0\n    var current_note_length_index31 = 0\n    var current_note_length_index32\
    \ = 0\n    var current_note_length_index33 = 0\n    var current_note_length_index34\
    \ = 0\n    var current_note_length_index35 = 0\n    var current_note_length_index36\
    \ = 0\n    var current_note_length_index37 = 0\n    var current_note_length_index38\
    \ = 0\n    var current_note_length_index39 = 0\n    var current_note_length_index40\
    \ = 0\n    var current_note_length_index41 = 0\n    var current_note_length_index42\
    \ = 0\n    var current_note_length_index43 = 0\n    var current_note_length_index44\
    \ = 0\n    var current_note_length_index45 = 0\n    var current_note_length_index46\
    \ = 0\n    var current_note_length_index47 = 0\n    var current_note_length_index48\
    \ = 0\n    var current_note_length_index49 = 0\n    var current_note_length_index50\
    \ = 0\n    var current_note_length_index51 = 0\n    var current_note_length_index52\
    \ = 0\n    var current_note_length_index53 = 0\n    var current_note_length_index54\
    \ = 0\n    var current_note_length_index55 = 0\n    var current_note_length_index56\
    \ = 0\n    var current_note_length_index57 = 0\n    var current_note_length_index58\
    \ = 0\n    var current_note_length_index59 = 0\n    var current_note_length_index60\
    \ = 0\n    var current_note_length_index61 = 0\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmc41sztz.swift:12:9: warning: initialization of variable 'beats_array'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats_array = [Int]()\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpmc41sztz.swift:13:9:\
    \ warning: initialization of variable 'current_beat' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var current_beat = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpmc41sztz.swift:14:9: warning: initialization\
    \ of variable 'current_note' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var current_note = 0\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmpmc41sztz.swift:15:9: warning: initialization of variable 'current_note_length'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var current_note_length = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpmc41sztz.swift:16:9:\
    \ warning: initialization of variable 'current_note_length_index' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpmc41sztz.swift:17:9:\
    \ warning: initialization of variable 'current_note_length_index2' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpmc41sztz.swift:18:9:\
    \ warning: initialization of variable 'current_note_length_index3' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index3\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpmc41sztz.swift:19:9:\
    \ warning: initialization of variable 'current_note_length_index4' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index4\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpmc41sztz.swift:20:9:\
    \ warning: initialization of variable 'current_note_length_index5' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index5\
    \ = 0\n    ~~~~^~~~~"
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var note_index\
    \ = 0\n    var note_length = 0\n    var note_length_index = 0\n    var note_length_index2\
    \ = 0\n    var note_length_index3 = 0\n    var note_length_index4 = 0\n    var\
    \ note_length_index5 = 0\n    var note_length_index6 = 0\n    var note_length_index7\
    \ = 0\n    var note_length_index8 = 0\n    var note_length_index9 = 0\n    var\
    \ note_length_index10 = 0\n    var note_length_index11 = 0\n    var note_length_index12\
    \ = 0\n    var note_length_index13 = 0\n    var note_length_index14 = 0\n    var\
    \ note_length_index15 = 0\n    var note_length_index16 = 0\n    var note_length_index17\
    \ = 0\n    var note_length_index18 = 0\n    var note_length_index19 = 0\n    var\
    \ note_length_index20 = 0\n    var note_length_index21 = 0\n    var note_length_index22\
    \ = 0\n    var note_length_index23 = 0\n    var note_length_index24 = 0\n    var\
    \ note_length_index25 = 0\n    var note_length_index26 = 0\n    var note_length_index27\
    \ = 0\n    var note_length_index28 = 0\n    var note_length_index29 = 0\n    var\
    \ note_length_index30 = 0\n    var note_length_index31 = 0\n    var note_length_index32\
    \ = 0\n    var note_length_index33 = 0\n    var note_length_index34 = 0\n    var\
    \ note_length_index35 = 0\n    var note_length_index36 = 0\n    var note_length_index37\
    \ = 0\n    var note_length_index38 = 0\n    var note_length_index39 = 0\n    var\
    \ note_length_index40 = 0\n    var note_length_index41 = 0\n    var note_length_index42\
    \ = 0\n    var note_length_index43 = 0\n    var note_length_index44 = 0\n    var\
    \ note_length_index45 = 0\n    var note_length_index46 = 0\n    var note_length_index47\
    \ = 0\n    var note_length_index48 = 0\n    var note_length_index49 = 0\n    var\
    \ note_length_index50 = 0\n    var note_length_index51 = 0\n    var note_length_index52\
    \ = 0\n    var note_length_index53 = 0\n    var note_length_index54 = 0\n    var\
    \ note_length_index55 = 0\n    var note_length_index56 = 0\n    var note_length_index57\
    \ = 0\n    var note_length_index58 = 0\n    var note_length_index59 = 0\n    var\
    \ note_length_index60 = 0\n    var note_length_index61 = 0\n    var note_length_index62\
    \ = 0\n    var note_length_index63 = 0\n    var note_length_index64 = 0\n    var\
    \ note_length_index65 = 0\n    var note_length_index66 = 0\n    var note_length_index67\
    \ = 0\n    var note_length_index68 = 0\n    var note_length_index69\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp3y90a2yc.swift:86:9: error: type annotation missing in pattern\n\
    \    var note_length_index69\n        ^\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_string\
    \ = \"\"\n    var current_note_length_string_index = 0\n    var current_note_length_string_value\
    \ = 0\n    var current_note_length_string_length = 0\n    var current_note_length_string_length_index\
    \ = 0\n    var current_note_length_string_length_value = 0\n    var current_note_length_string_length_string\
    \ = \"\"\n    var current_note_length_string_length_string_index = 0\n    var\
    \ current_note_length_string_length_string_value = 0\n    var current_note_length_string_length_string_length\
    \ = 0\n    var current_note_length_string_length_string_length_index = 0\n   \
    \ var current_note_length_string_length_string_length_value = 0\n    var current_note_length_string_length_string_length_string\
    \ = \"\"\n    var current_note_length_string_length_string_length_string_index\
    \ = 0\n    var current_note_length_string_length_string_length_string_value =\
    \ 0\n    var current_note_length_string_length_string_length_string_length = 0\n\
    \    var current_note_length_string_length_string_length_string_length_index =\
    \ 0\n    var current_note_length_string_length_string_length_string_length_value\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string\
    \ = \"\"\n    var current_note_length_string_length_string_length_string_length_string_index\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_value\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_value\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string\
    \ = \"\"\n    var current_note_length_string_length_string_length_string_length_string_length_string_index\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string_value\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string_length_value\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string_length_string\
    \ = \"\"\n    var current_note_length_string_length_string_length_string_length_string_length_string_length_string_index\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string_length_value\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string_length_string_length_value\
    \ = 0\n    var current_note_length_string_length_string_length_string_\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdcr9znan.swift:49:9: error: invalid redeclaration of 'current_note_length_string_length_string_length_string_length_string_length_string_length_value'\n\
    \    var current_note_length_string_length_string_length_string_length_string_length_string_length_value\
    \ = 0\n        ^\n/tmp/tmpdcr9znan.swift:46:9: note: 'current_note_length_string_length_string_length_string_length_string_length_string_length_value'\
    \ previously declared here\n    var current_note_length_string_length_string_length_string_length_string_length_string_length_value\
    \ = 0\n        ^\n/tmp/tmpdcr9znan.swift:53:9: error: type annotation missing\
    \ in pattern\n    var current_note_length_string_length_string_length_string_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var notes_index = 0\n\
    \    var notes_length_index = 0\n    var notes_length_index2 = 0\n    var notes_length_index3\
    \ = 0\n    var notes_length_index4 = 0\n    var notes_length_index5 = 0\n    var\
    \ notes_length_index6 = 0\n    var notes_length_index7 = 0\n    var notes_length_index8\
    \ = 0\n    var notes_length_index9 = 0\n    var notes_length_index10 = 0\n   \
    \ var notes_length_index11 = 0\n    var notes_length_index12 = 0\n    var notes_length_index13\
    \ = 0\n    var notes_length_index14 = 0\n    var notes_length_index15 = 0\n  \
    \  var notes_length_index16 = 0\n    var notes_length_index17 = 0\n    var notes_length_index18\
    \ = 0\n    var notes_length_index19 = 0\n    var notes_length_index20 = 0\n  \
    \  var notes_length_index21 = 0\n    var notes_length_index22 = 0\n    var notes_length_index23\
    \ = 0\n    var notes_length_index24 = 0\n    var notes_length_index25 = 0\n  \
    \  var notes_length_index26 = 0\n    var notes_length_index27 = 0\n    var notes_length_index28\
    \ = 0\n    var notes_length_index29 = 0\n    var notes_length_index30 = 0\n  \
    \  var notes_length_index31 = 0\n    var notes_length_index32 = 0\n    var notes_length_index33\
    \ = 0\n    var notes_length_index34 = 0\n    var notes_length_index35 = 0\n  \
    \  var notes_length_index36 = 0\n    var notes_length_index37 = 0\n    var notes_length_index38\
    \ = 0\n    var notes_length_index39 = 0\n    var notes_length_index40 = 0\n  \
    \  var notes_length_index41 = 0\n    var notes_length_index42 = 0\n    var notes_length_index43\
    \ = 0\n    var notes_length_index44 = 0\n    var notes_length_index45 = 0\n  \
    \  var notes_length_index46 = 0\n    var notes_length_index47 = 0\n    var notes_length_index48\
    \ = 0\n    var notes_length_index49 = 0\n    var notes_length_index50 = 0\n  \
    \  var notes_length_index51 = 0\n    var notes_length_index52 = 0\n    var notes_length_index53\
    \ = 0\n    var notes_length_index54 = 0\n    var notes_length_index55 = 0\n  \
    \  var notes_length_index56 = 0\n    var notes_length_index57 = 0\n    var notes_length_index58\
    \ = 0\n    var notes_length_index59 = 0\n    var notes_length_index60 = 0\n  \
    \  var notes_length_index61 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8wh68uht.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp8wh68uht.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp8wh68uht.swift:14:9:\
    \ warning: initialization of variable 'notes_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:15:9: warning: initialization\
    \ of variable 'notes_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_index = 0\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmp8wh68uht.swift:16:9: warning: initialization of variable 'notes_length_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:17:9:\
    \ warning: initialization of variable 'notes_length_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:18:9: warning:\
    \ initialization of variable 'notes_length_index3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var notes_length_index3 = 0\n   \
    \ ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:19:9: warning: initialization\
    \ of variable 'notes_length_index4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_length_index4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp8wh68uht.swift:20:9: warning: initialization of variable 'notes_length_index5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:21:9:\
    \ warning: initialization of variable 'notes_length_index6' was never used; consider\
    \ replacing with assi"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_string\
    \ = \"\"\n    var current_note_length_string_index = 0\n    var current_note_length_string_value\
    \ = 0\n    var current_note_length_string_length = 0\n    var current_note_length_string_length_index\
    \ = 0\n    var current_note_length_string_length_value = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp11z1vys9.swift:24:9: error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp11z1vys9.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared here\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp11z1vys9.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp11z1vys9.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared here\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp11z1vys9.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp11z1vys9.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared here\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp11z1vys9.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp11z1vys9.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared here\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp11z1vys9.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp11z1vys9.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared here\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp11z1vys9.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp11z1vys9.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared her"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = music_string[0]\n    for c in\
    \ music_string {\n        if c == 'o' {\n            beats.append(current_beat)\n\
    \            current_beat = 0\n            current_note = music_string[0]\n  \
    \      } else if c == '|' {\n            beats.append(current_beat)\n        \
    \    current_beat += 1\n            current_note = music_string[0]\n        }\
    \ else if c == '.' {\n            beats.append(current_beat)\n            current_beat\
    \ = 0\n            current_note = music_string[0]\n        } else {\n        \
    \    current_beat += 1\n            current_note = c\n        }\n    }\n    beats.append(current_beat)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpw5js4yoj.swift:16:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpw5js4yoj.swift:20:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmpw5js4yoj.swift:24:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.' {\n                       ^~~\n\
    \                       \".\"\n/tmp/tmpw5js4yoj.swift:14:24: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var current_note = music_string[0]\n                       ^~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpw5js4yoj.swift:19:28:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            current_note = music_string[0]\n  \
    \                         ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpw5js4yoj.swift:23:28: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            current_note = music_string[0]\n                           ^~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpw5js4yoj.swift:27:28:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            current_note = music_string[0]\n  \
    \                         ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpw5js4yoj.swift:14:9: warning: variable\
    \ 'current_note' was written to, but never read\n    var current_note"
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var notes_length_index\
    \ = 0\n    var notes_length_index2 = 0\n    var notes_length_index3 = 0\n    var\
    \ notes_length_index4 = 0\n    var notes_length_index5 = 0\n    var notes_length_index6\
    \ = 0\n    var notes_length_index7 = 0\n    var notes_length_index8 = 0\n    var\
    \ notes_length_index9 = 0\n    var notes_length_index10 = 0\n    var notes_length_index11\
    \ = 0\n    var notes_length_index12 = 0\n    var notes_length_index13 = 0\n  \
    \  var notes_length_index14 = 0\n    var notes_length_index15 = 0\n    var notes_length_index16\
    \ = 0\n    var notes_length_index17 = 0\n    var notes_length_index18 = 0\n  \
    \  var notes_length_index19 = 0\n    var notes_length_index20 = 0\n    var notes_length_index21\
    \ = 0\n    var notes_length_index22 = 0\n    var notes_length_index23 = 0\n  \
    \  var notes_length_index24 = 0\n    var notes_length_index25 = 0\n    var notes_length_index26\
    \ = 0\n    var notes_length_index27 = 0\n    var notes_length_index28 = 0\n  \
    \  var notes_length_index29 = 0\n    var notes_length_index30 = 0\n    var notes_length_index31\
    \ = 0\n    var notes_length_index32 = 0\n    var notes_length_index33 = 0\n  \
    \  var notes_length_index34 = 0\n    var notes_length_index35 = 0\n    var notes_length_index36\
    \ = 0\n    var notes_length_index37 = 0\n    var notes_length_index38 = 0\n  \
    \  var notes_length_index39 = 0\n    var notes_length_index40 = 0\n    var notes_length_index41\
    \ = 0\n    var notes_length_index42 = 0\n    var notes_length_index43 = 0\n  \
    \  var notes_length_index44 = 0\n    var notes_length_index45 = 0\n    var notes_length_index46\
    \ = 0\n    var notes_length_index47 = 0\n    var notes_length_index48 = 0\n  \
    \  var notes_length_index49 = 0\n    var notes_length_index50 = 0\n    var notes_length_index51\
    \ = 0\n    var notes_length_index52 = 0\n    var notes_length_index53 = 0\n  \
    \  var notes_length_index54 = 0\n    var notes_length_index55 = 0\n    var notes_length_index56\
    \ = 0\n    var notes_length_index57 = 0\n    var notes_length_index58 = 0\n  \
    \  var notes_length_index59 = 0\n    var notes_length_index60 = 0\n    var notes_length_index61\
    \ = 0\n    var notes_length_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpumzer969.swift:76:9: error: type annotation missing in pattern\n\
    \    var notes_length_index\n        ^\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = 0\n    var last_note\
    \ = 0\n    var last_beat = 0\n    var last_beats = 0\n    var last_beats_count\
    \ = 0\n    var last_beats_count_count = 0\n    var last_beats_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count = 0\n    var last_beats_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count = 0\n    var last_beats_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count = 0\n\
    \    var last_beats_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpg58pn_bf.swift:35:9: error: type annotation missing in pattern\n\
    \    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    for char\
    \ in music_string {\n        switch char {\n        case \"o\":\n            notes.append(note)\n\
    \            beats.append(beat)\n            note = \"\"\n            beat = 0\n\
    \        case \"|\":\n            notes.append(note)\n            beats.append(beat)\n\
    \            note = \"\"\n            beat = 0\n        default:\n           \
    \ note += char\n        }\n    }\n    notes.append(note)\n    beats.append(beat)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmposdmvq9i.swift:29:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            note += char\n             \
    \       ^\n"
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var lastNote = \"\"\n    var lastNoteBeat = 0\n    var lastNoteBeatCount\
    \ = 0\n    var lastNoteBeatCount2 = 0\n    var lastNoteBeatCount3 = 0\n    var\
    \ lastNoteBeatCount4 = 0\n    var lastNoteBeatCount5 = 0\n    var lastNoteBeatCount6\
    \ = 0\n    var lastNoteBeatCount7 = 0\n    var lastNoteBeatCount8 = 0\n    var\
    \ lastNoteBeatCount9 = 0\n    var lastNoteBeatCount10 = 0\n    var lastNoteBeatCount11\
    \ = 0\n    var lastNoteBeatCount12 = 0\n    var lastNoteBeatCount13 = 0\n    var\
    \ lastNoteBeatCount14 = 0\n    var lastNoteBeatCount15 = 0\n    var lastNoteBeatCount16\
    \ = 0\n    var lastNoteBeatCount17 = 0\n    var lastNoteBeatCount18 = 0\n    var\
    \ lastNoteBeatCount19 = 0\n    var lastNoteBeatCount20 = 0\n    var lastNoteBeatCount21\
    \ = 0\n    var lastNoteBeatCount22 = 0\n    var lastNoteBeatCount23 = 0\n    var\
    \ lastNoteBeatCount24 = 0\n    var lastNoteBeatCount25 = 0\n    var lastNoteBeatCount26\
    \ = 0\n    var lastNoteBeatCount27 = 0\n    var lastNoteBeatCount28 = 0\n    var\
    \ lastNoteBeatCount29 = 0\n    var lastNoteBeatCount30 = 0\n    var lastNoteBeatCount31\
    \ = 0\n    var lastNoteBeatCount32 = 0\n    var lastNoteBeatCount33 = 0\n    var\
    \ lastNoteBeatCount34 = 0\n    var lastNoteBeatCount35 = 0\n    var lastNoteBeatCount36\
    \ = 0\n    var lastNoteBeatCount37 = 0\n    var lastNoteBeatCount38 = 0\n    var\
    \ lastNoteBeatCount39 = 0\n    var lastNoteBeatCount40 = 0\n    var lastNoteBeatCount41\
    \ = 0\n    var lastNoteBeatCount42 = 0\n    var lastNoteBeatCount43 = 0\n    var\
    \ lastNoteBeatCount44 = 0\n    var lastNoteBeatCount45 = 0\n    var lastNoteBeatCount46\
    \ = 0\n    var lastNoteBeatCount47 = 0\n    var lastNoteBeatCount48 = 0\n    var\
    \ lastNoteBeatCount49 = 0\n    var lastNoteBeatCount50 = 0\n    var lastNoteBeatCount51\
    \ = 0\n    var lastNoteBeatCount52 = 0\n    var lastNoteBeatCount53\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpc__0eva3.swift:71:9: error: type annotation missing in pattern\n\
    \    var lastNoteBeatCount53\n        ^\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = String()\n    var note_count = 0\n    var last_note\
    \ = String()\n    var last_note_count = 0\n    var last_beat = 0\n    var last_beat_count\
    \ = 0\n    var last_note_count = 0\n    var last_note_beat = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count = 0\n  \
    \  var last_note_beat_count = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count = 0\n  \
    \  var last_note_beat_count = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count = 0\n  \
    \  var last_note_beat_count = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count = 0\n  \
    \  var last_note_beat_count = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count = 0\n  \
    \  var last_note_beat_count = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count = 0\n  \
    \  var last_note_beat_count = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count = 0\n  \
    \  var last_note_beat_count = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count = 0\n  \
    \  var last_note_beat_count = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count = 0\n  \
    \  var last_note_beat_count = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count = 0\n  \
    \  var last_note_beat_count = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count = 0\n  \
    \  var last_note_beat_count = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count = 0\n  \
    \  var last_note_beat_count = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count = 0\n  \
    \  var last_note_beat_count = 0\n    var last_note_beat_count = 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpepycpicf.swift:20:9: error: invalid redeclaration of 'last_note_count'\n\
    \    var last_note_count = 0\n        ^\n/tmp/tmpepycpicf.swift:17:9: note: 'last_note_count'\
    \ previously declared here\n    var last_note_count = 0\n        ^\n/tmp/tmpepycpicf.swift:23:9:\
    \ error: invalid redeclaration of 'last_note_beat_count'\n    var last_note_beat_count\
    \ = 0\n        ^\n/tmp/tmpepycpicf.swift:22:9: note: 'last_note_beat_count' previously\
    \ declared here\n    var last_note_beat_count = 0\n        ^\n/tmp/tmpepycpicf.swift:24:9:\
    \ error: invalid redeclaration of 'last_note_beat_count'\n    var last_note_beat_count\
    \ = 0\n        ^\n/tmp/tmpepycpicf.swift:22:9: note: 'last_note_beat_count' previously\
    \ declared here\n    var last_note_beat_count = 0\n        ^\n/tmp/tmpepycpicf.swift:25:9:\
    \ error: invalid redeclaration of 'last_note_beat_count'\n    var last_note_beat_count\
    \ = 0\n        ^\n/tmp/tmpepycpicf.swift:22:9: note: 'last_note_beat_count' previously\
    \ declared here\n    var last_note_beat_count = 0\n        ^\n/tmp/tmpepycpicf.swift:26:9:\
    \ error: invalid redeclaration of 'last_note_beat_count'\n    var last_note_beat_count\
    \ = 0\n        ^\n/tmp/tmpepycpicf.swift:22:9: note: 'last_note_beat_count' previously\
    \ declared here\n    var last_note_beat_count = 0\n        ^\n/tmp/tmpepycpicf.swift:27:9:\
    \ error: invalid redeclaration of 'last_note_beat_count'\n    var last_note_beat_count\
    \ = 0\n        ^\n/tmp/tmpepycpicf.swift:22:9: note: 'last_note_beat_count' previously\
    \ declared here\n    var last_note_beat_count = 0\n        ^\n/tmp/tmpepycpicf.swift:28:9:\
    \ error: invalid redeclaration of 'last_note_beat_count'\n    var last_note_beat_count\
    \ = 0\n        ^\n/tmp/tmpepycpicf.swift:22:9: note: 'last_note_beat_count' previously\
    \ declared here\n    var last_note_beat_count = 0\n        ^\n/tmp/tmpepycpicf.swift:29:9:\
    \ error: invalid redeclaration of 'last_note_beat_count'\n    var last_note_beat_count\
    \ = 0\n        ^\n/tmp/tmpepycpicf.swift:22:9: note: 'last_note_beat_count' previously\
    \ declared here\n    var last_note_beat_count = 0\n        ^\n/tmp/tmpepycpicf.swift:30:9:\
    \ error: invalid "
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n \
    \   var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var last\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpz812l24a.swift:19:9: error: invalid redeclaration of 'lastBeat'\n\
    \    var lastBeat = 0\n        ^\n/tmp/tmpz812l24a.swift:17:9: note: 'lastBeat'\
    \ previously declared here\n    var lastBeat = 0\n        ^\n/tmp/tmpz812l24a.swift:20:9:\
    \ error: invalid redeclaration of 'lastNote'\n    var lastNote = \"\"\n      \
    \  ^\n/tmp/tmpz812l24a.swift:18:9: note: 'lastNote' previously declared here\n\
    \    var lastNote = \"\"\n        ^\n/tmp/tmpz812l24a.swift:21:9: error: invalid\
    \ redeclaration of 'lastBeat'\n    var lastBeat = 0\n        ^\n/tmp/tmpz812l24a.swift:17:9:\
    \ note: 'lastBeat' previously declared here\n    var lastBeat = 0\n        ^\n\
    /tmp/tmpz812l24a.swift:22:9: error: invalid redeclaration of 'lastNote'\n    var\
    \ lastNote = \"\"\n        ^\n/tmp/tmpz812l24a.swift:18:9: note: 'lastNote' previously\
    \ declared here\n    var lastNote = \"\"\n        ^\n/tmp/tmpz812l24a.swift:23:9:\
    \ error: invalid redeclaration of 'lastBeat'\n    var lastBeat = 0\n        ^\n\
    /tmp/tmpz812l24a.swift:17:9: note: 'lastBeat' previously declared here\n    var\
    \ lastBeat = 0\n        ^\n/tmp/tmpz812l24a.swift:24:9: error: invalid redeclaration\
    \ of 'lastNote'\n    var lastNote = \"\"\n        ^\n/tmp/tmpz812l24a.swift:18:9:\
    \ note: 'lastNote' previously declared here\n    var lastNote = \"\"\n       \
    \ ^\n/tmp/tmpz812l24a.swift:25:9: error: invalid redeclaration of 'lastBeat'\n\
    \    var lastBeat = 0\n        ^\n/tmp/tmpz812l24a.swift:17:9: note: 'lastBeat'\
    \ previously declared here\n    var lastBeat = 0\n        ^\n/tmp/tmpz812l24a.swift:26:9:\
    \ error: invalid redeclaration of 'lastNote'\n    var lastNote = \"\"\n      \
    \  ^\n/tmp/tmpz812l24a.swift:18:9: note: 'lastNote' previously declared here\n\
    \    var lastNote = \"\"\n        ^\n/tmp/tmpz812l24a.swift:27:9: error: invalid\
    \ redeclaration of 'lastBeat'\n    var lastBeat = 0\n        ^\n/tmp/tmpz812l24a.swift:17:9:\
    \ note: 'lastBeat' previously declared here\n    var lastBeat = 0\n        ^\n\
    /tmp/tmpz812l24a.swift:28:9: error: invalid redeclaration of 'lastNote'\n    var\
    \ lastNote = \"\"\n        ^\n/tmp/tmpz812l24a.swift:18:9: note: 'lastNote' previously\
    \ declared here\n    var lastNote = \""
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var note_index = 0\n    var note_length = 0\n\
    \    var note_length_index = 0\n    var note_length_index2 = 0\n    var note_length_index3\
    \ = 0\n    var note_length_index4 = 0\n    var note_length_index5 = 0\n    var\
    \ note_length_index6 = 0\n    var note_length_index7 = 0\n    var note_length_index8\
    \ = 0\n    var note_length_index9 = 0\n    var note_length_index10 = 0\n    var\
    \ note_length_index11 = 0\n    var note_length_index12 = 0\n    var note_length_index13\
    \ = 0\n    var note_length_index14 = 0\n    var note_length_index15 = 0\n    var\
    \ note_length_index16 = 0\n    var note_length_index17 = 0\n    var note_length_index18\
    \ = 0\n    var note_length_index19 = 0\n    var note_length_index20 = 0\n    var\
    \ note_length_index21 = 0\n    var note_length_index22 = 0\n    var note_length_index23\
    \ = 0\n    var note_length_index24 = 0\n    var note_length_index25 = 0\n    var\
    \ note_length_index26 = 0\n    var note_length_index27 = 0\n    var note_length_index28\
    \ = 0\n    var note_length_index29 = 0\n    var note_length_index30 = 0\n    var\
    \ note_length_index31 = 0\n    var note_length_index32 = 0\n    var note_length_index33\
    \ = 0\n    var note_length_index34 = 0\n    var note_length_index35 = 0\n    var\
    \ note_length_index36 = 0\n    var note_length_index37 = 0\n    var note_length_index38\
    \ = 0\n    var note_length_index39 = 0\n    var note_length_index40 = 0\n    var\
    \ note_length_index41 = 0\n    var note_length_index42 = 0\n    var note_length_index43\
    \ = 0\n    var note_length_index44 = 0\n    var note_length_index45 = 0\n    var\
    \ note_length_index46 = 0\n    var note_length_index47 = 0\n    var note_length_index48\
    \ = 0\n    var note_length_index49 = 0\n    var note_length_index50 = 0\n    var\
    \ note_length_index51 = 0\n    var note_length_index52 = 0\n    var note_length_index53\
    \ = 0\n    var note_length_index54 = 0\n    var note_length_index55 = 0\n    var\
    \ note_length_index56 = 0\n    var note_length_index57 = 0\n    var note_length_index58\
    \ = 0\n    var note_length_index59 = 0\n    var note_length_index60 = 0\n    var\
    \ note_length_index61 = 0\n    var note_length_index62 = 0\n    var note_length_index63\
    \ = 0\n    var note_length_index64 = 0\n    var note_length_index65 = 0\n    var\
    \ note_length_index66 = 0\n    var note_length_index67 = 0\n    var note_length_index68\
    \ = 0\n    var note_length_index69 = 0\n    var note_length_index70 = 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpxc7o08o_.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpxc7o08o_.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmpxc7o08o_.swift:14:9:\
    \ warning: initialization of variable 'note_index' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_index = 0\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmpxc7o08o_.swift:15:9: warning: initialization of variable 'note_length'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_length = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpxc7o08o_.swift:16:9:\
    \ warning: initialization of variable 'note_length_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var note_length_index =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpxc7o08o_.swift:17:9: warning: initialization\
    \ of variable 'note_length_index2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_length_index2 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpxc7o08o_.swift:18:9: warning: initialization of variable 'note_length_index3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_length_index3 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpxc7o08o_.swift:19:9:\
    \ warning: initialization of variable 'note_length_index4' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var note_length_index4\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpxc7o08o_.swift:20:9: warning:\
    \ initialization of variable 'note_length_index5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_length_index5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpxc7o08o_.swift:21:9: warning: initialization of variable 'note_length_index6'\
    \ was never used; consider replacing with assignment to '_' or remov"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = Int()\n    var note_count = 0\n    var last_note\
    \ = Int()\n    var last_note_count = 0\n    var last_note_index = -1\n    var\
    \ last_note_index2 = -1\n    var last_note_index3 = -1\n    var last_note_index4\
    \ = -1\n    var last_note_index5 = -1\n    var last_note_index6 = -1\n    var\
    \ last_note_index7 = -1\n    var last_note_index8 = -1\n    var last_note_index9\
    \ = -1\n    var last_note_index10 = -1\n    var last_note_index11 = -1\n    var\
    \ last_note_index12 = -1\n    var last_note_index13 = -1\n    var last_note_index14\
    \ = -1\n    var last_note_index15 = -1\n    var last_note_index16 = -1\n    var\
    \ last_note_index17 = -1\n    var last_note_index18 = -1\n    var last_note_index19\
    \ = -1\n    var last_note_index20 = -1\n    var last_note_index21 = -1\n    var\
    \ last_note_index22 = -1\n    var last_note_index23 = -1\n    var last_note_index24\
    \ = -1\n    var last_note_index25 = -1\n    var last_note_index26 = -1\n    var\
    \ last_note_index27 = -1\n    var last_note_index28 = -1\n    var last_note_index29\
    \ = -1\n    var last_note_index30 = -1\n    var last_note_index31 = -1\n    var\
    \ last_note_index32 = -1\n    var last_note_index33 = -1\n    var last_note_index34\
    \ = -1\n    var last_note_index35 = -1\n    var last_note_index36 = -1\n    var\
    \ last_note_index37 = -1\n    var last_note_index38 = -1\n    var last_note_index39\
    \ = -1\n    var last_note_index40 = -1\n    var last_note_index41 = -1\n    var\
    \ last_note_index42 = -1\n    var last_note_index43 = -1\n    var last_note_index44\
    \ = -1\n    var last_note_index45 = -1\n    var last_note_index46 = -1\n    var\
    \ last_note_index47 = -1\n    var last_note_index48 = -1\n    var last_note_index49\
    \ = -1\n    var last_note_index50 = -1\n    var last_note_index51 = -1\n    var\
    \ last_note_index52 = -1\n    var last_note_index53 = -1\n    var last_note_index54\
    \ = -1\n    var last_note_index55 = -1\n    var last_note_index56 = -1\n    var\
    \ last_note_index57 = -1\n    var last_note_index58 = -1\n    var last_note_index59\
    \ = -1\n    var last_note_index60 = -1\n    var last_note_index61 = -1\n    var\
    \ last_note_index62 = -1\n    var last_note_index63 = -1\n    var last_note_index64\
    \ = -1\n    var last_note_index65 = -1\n    var last_note_index66 = -1\n    var\
    \ last_note\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpw2j54bou.swift:84:9: error: type annotation missing in pattern\n\
    \    var last_note\n        ^\n"
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = String()\n    var last_note =\
    \ String()\n    var last_beat = 0\n    var last_note_index = 0\n    var last_note_index2\
    \ = 0\n    var last_note_index3 = 0\n    var last_note_index4 = 0\n    var last_note_index5\
    \ = 0\n    var last_note_index6 = 0\n    var last_note_index7 = 0\n    var last_note_index8\
    \ = 0\n    var last_note_index9 = 0\n    var last_note_index10 = 0\n    var last_note_index11\
    \ = 0\n    var last_note_index12 = 0\n    var last_note_index13 = 0\n    var last_note_index14\
    \ = 0\n    var last_note_index15 = 0\n    var last_note_index16 = 0\n    var last_note_index17\
    \ = 0\n    var last_note_index18 = 0\n    var last_note_index19 = 0\n    var last_note_index20\
    \ = 0\n    var last_note_index21 = 0\n    var last_note_index22 = 0\n    var last_note_index23\
    \ = 0\n    var last_note_index24 = 0\n    var last_note_index25 = 0\n    var last_note_index26\
    \ = 0\n    var last_note_index27 = 0\n    var last_note_index28 = 0\n    var last_note_index29\
    \ = 0\n    var last_note_index30 = 0\n    var last_note_index31 = 0\n    var last_note_index32\
    \ = 0\n    var last_note_index33 = 0\n    var last_note_index34 = 0\n    var last_note_index35\
    \ = 0\n    var last_note_index36 = 0\n    var last_note_index37 = 0\n    var last_note_index38\
    \ = 0\n    var last_note_index39 = 0\n    var last_note_index40 = 0\n    var last_note_index41\
    \ = 0\n    var last_note_index42 = 0\n    var last_note_index43 = 0\n    var last_note_index44\
    \ = 0\n    var last_note_index45 = 0\n    var last_note_index46 = 0\n    var last_note_index47\
    \ = 0\n    var last_note_index48 = 0\n    var last_note_index49 = 0\n    var last_note_index50\
    \ = 0\n    var last_note_index51 = 0\n    var last_note_index52 = 0\n    var last_note_index53\
    \ = 0\n    var last_note_index54 = 0\n    var last_note_index55 = 0\n    var last_note_index56\
    \ = 0\n    var last_note_index57 = 0\n    var last_note_index58 = 0\n    var last_note_index59\
    \ = 0\n    var last_note_index60 = 0\n    var last_note_index61 = 0\n    var last_note_index62\
    \ = 0\n    var last_note_index63 = 0\n    var last_note_index64 = 0\n    var last_note_index65\
    \ = 0\n    var last_note_index66 = 0\n    var last_note_index67 = 0\n    var last_note_index68\
    \ = 0\n    var last_note_index69 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpzf7cc2cl.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpzf7cc2cl.swift:13:9: warning:\
    \ initialization of variable 'current_beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var current_beat = 0\n    ~~~~^~~~~~~~~~~~\n\
    \    _\n/tmp/tmpzf7cc2cl.swift:14:9: warning: initialization of variable 'current_note'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var current_note = String()\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpzf7cc2cl.swift:15:9:\
    \ warning: initialization of variable 'last_note' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var last_note = String()\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpzf7cc2cl.swift:16:9: warning: initialization of variable 'last_beat'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_beat = 0\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpzf7cc2cl.swift:17:9:\
    \ warning: initialization of variable 'last_note_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var last_note_index = 0\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpzf7cc2cl.swift:18:9: warning: initialization\
    \ of variable 'last_note_index2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var last_note_index2 = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpzf7cc2cl.swift:19:9: warning: initialization of variable 'last_note_index3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_note_index3 = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpzf7cc2cl.swift:20:9:\
    \ warning: initialization of variable 'last_note_index4' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var last_note_index4 =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpzf7cc2cl.swift:21:9: warning: initialization\
    \ of variable 'last_note_index5' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var last_note_in"
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var notes_index = 0\n\
    \    var notes_length_index = 0\n    var notes_length_index2 = 0\n    var notes_length_index3\
    \ = 0\n    var notes_length_index4 = 0\n    var notes_length_index5 = 0\n    var\
    \ notes_length_index6 = 0\n    var notes_length_index7 = 0\n    var notes_length_index8\
    \ = 0\n    var notes_length_index9 = 0\n    var notes_length_index10 = 0\n   \
    \ var notes_length_index11 = 0\n    var notes_length_index12 = 0\n    var notes_length_index13\
    \ = 0\n    var notes_length_index14 = 0\n    var notes_length_index15 = 0\n  \
    \  var notes_length_index16 = 0\n    var notes_length_index17 = 0\n    var notes_length_index18\
    \ = 0\n    var notes_length_index19 = 0\n    var notes_length_index20 = 0\n  \
    \  var notes_length_index21 = 0\n    var notes_length_index22 = 0\n    var notes_length_index23\
    \ = 0\n    var notes_length_index24 = 0\n    var notes_length_index25 = 0\n  \
    \  var notes_length_index26 = 0\n    var notes_length_index27 = 0\n    var notes_length_index28\
    \ = 0\n    var notes_length_index29 = 0\n    var notes_length_index30 = 0\n  \
    \  var notes_length_index31 = 0\n    var notes_length_index32 = 0\n    var notes_length_index33\
    \ = 0\n    var notes_length_index34 = 0\n    var notes_length_index35 = 0\n  \
    \  var notes_length_index36 = 0\n    var notes_length_index37 = 0\n    var notes_length_index38\
    \ = 0\n    var notes_length_index39 = 0\n    var notes_length_index40 = 0\n  \
    \  var notes_length_index41 = 0\n    var notes_length_index42 = 0\n    var notes_length_index43\
    \ = 0\n    var notes_length_index44 = 0\n    var notes_length_index45 = 0\n  \
    \  var notes_length_index46 = 0\n    var notes_length_index47 = 0\n    var notes_length_index48\
    \ = 0\n    var notes_length_index49 = 0\n    var notes_length_index50 = 0\n  \
    \  var notes_length_index51 = 0\n    var notes_length_index52 = 0\n    var notes_length_index53\
    \ = 0\n    var notes_length_index54 = 0\n    var notes_length_index55 = 0\n  \
    \  var notes_length_index56 = 0\n    var notes_length_index57 = 0\n    var notes_length_index58\
    \ = 0\n    var notes_length_index59 = 0\n    var notes_length_index60 = 0\n  \
    \  var notes_length_index61 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8wh68uht.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp8wh68uht.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp8wh68uht.swift:14:9:\
    \ warning: initialization of variable 'notes_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:15:9: warning: initialization\
    \ of variable 'notes_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_index = 0\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmp8wh68uht.swift:16:9: warning: initialization of variable 'notes_length_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:17:9:\
    \ warning: initialization of variable 'notes_length_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:18:9: warning:\
    \ initialization of variable 'notes_length_index3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var notes_length_index3 = 0\n   \
    \ ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:19:9: warning: initialization\
    \ of variable 'notes_length_index4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_length_index4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp8wh68uht.swift:20:9: warning: initialization of variable 'notes_length_index5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:21:9:\
    \ warning: initialization of variable 'notes_length_index6' was never used; consider\
    \ replacing with assi"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    for c in\
    \ music_string {\n        if c == 'o' {\n            if note != \"\" {\n     \
    \           beats.append(beat)\n                notes.append(note)\n         \
    \       beat = 0\n                note = \"\"\n            }\n        } else {\n\
    \            note += String(c)\n        }\n    }\n    if note != \"\" {\n    \
    \    beats.append(beat)\n        notes.append(note)\n    }\n    return beats\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp2bomu0xq.swift:17:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n"
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var beats_length = 0\n\
    \    var beats_index = 0\n    var notes_index = 0\n    var notes_length_index\
    \ = 0\n    var notes_length_index2 = 0\n    var notes_length_index3 = 0\n    var\
    \ notes_length_index4 = 0\n    var notes_length_index5 = 0\n    var notes_length_index6\
    \ = 0\n    var notes_length_index7 = 0\n    var notes_length_index8 = 0\n    var\
    \ notes_length_index9 = 0\n    var notes_length_index10 = 0\n    var notes_length_index11\
    \ = 0\n    var notes_length_index12 = 0\n    var notes_length_index13 = 0\n  \
    \  var notes_length_index14 = 0\n    var notes_length_index15 = 0\n    var notes_length_index16\
    \ = 0\n    var notes_length_index17 = 0\n    var notes_length_index18 = 0\n  \
    \  var notes_length_index19 = 0\n    var notes_length_index20 = 0\n    var notes_length_index21\
    \ = 0\n    var notes_length_index22 = 0\n    var notes_length_index23 = 0\n  \
    \  var notes_length_index24 = 0\n    var notes_length_index25 = 0\n    var notes_length_index26\
    \ = 0\n    var notes_length_index27 = 0\n    var notes_length_index28 = 0\n  \
    \  var notes_length_index29 = 0\n    var notes_length_index30 = 0\n    var notes_length_index31\
    \ = 0\n    var notes_length_index32 = 0\n    var notes_length_index33 = 0\n  \
    \  var notes_length_index34 = 0\n    var notes_length_index35 = 0\n    var notes_length_index36\
    \ = 0\n    var notes_length_index37 = 0\n    var notes_length_index38 = 0\n  \
    \  var notes_length_index39 = 0\n    var notes_length_index40 = 0\n    var notes_length_index41\
    \ = 0\n    var notes_length_index42 = 0\n    var notes_length_index43 = 0\n  \
    \  var notes_length_index44 = 0\n    var notes_length_index45 = 0\n    var notes_length_index46\
    \ = 0\n    var notes_length_index47 = 0\n    var notes_length_index48 = 0\n  \
    \  var notes_length_index49 = 0\n    var notes_length_index50 = 0\n    var notes_length_index51\
    \ = 0\n    var notes_length_index52 = 0\n    var notes_length_index53 = 0\n  \
    \  var notes_length_index54 = 0\n    var notes_length_index55 = 0\n    var notes_length_index56\
    \ = 0\n    var notes_length_index57 = 0\n    var notes_length_index58 = 0\n  \
    \  var notes_length_index59 = 0\n    var notes_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp3prizmk9.swift:77:9: error: type annotation missing in pattern\n\
    \    var notes_\n        ^\n"
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_value\
    \ = 0\n    var current_note_length_value_index = 0\n    var current_note_length_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1902vg0i.swift:66:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp1902vg0i.swift:24:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp1902vg0i.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp1902vg0i.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp1902vg0i.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp1902vg0i.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp1902vg0i.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp1902vg0i.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var last = 0\n    var last_beat = 0\n\
    \    var last_note = 0\n    var last_last_beat = 0\n    var last_last_note = 0\n\
    \    var last_last_last_beat = 0\n    var last_last_last_note = 0\n    var last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_note = 0\n    var last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_note = 0\n    var last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_last_beat = 0\n  \
    \  var last_last_last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_last_note = 0\n  \
    \  var last_last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_last_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpt3b3_o2w.swift:26:9: error: invalid redeclaration of 'last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpt3b3_o2w.swift:24:9:\
    \ note: 'last_last_last_last_last_beat' previously declared here\n    var last_last_last_last_last_beat\
    \ = 0\n        ^\n/tmp/tmpt3b3_o2w.swift:27:9: error: invalid redeclaration of\
    \ 'last_last_last_last_last_note'\n    var last_last_last_last_last_note = 0\n\
    \        ^\n/tmp/tmpt3b3_o2w.swift:25:9: note: 'last_last_last_last_last_note'\
    \ previously declared here\n    var last_last_last_last_last_note = 0\n      \
    \  ^\n/tmp/tmpt3b3_o2w.swift:30:9: error: invalid redeclaration of 'last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpt3b3_o2w.swift:28:9:\
    \ note: 'last_last_last_last_last_last_beat' previously declared here\n    var\
    \ last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpt3b3_o2w.swift:31:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_note'\n    var\
    \ last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpt3b3_o2w.swift:29:9:\
    \ note: 'last_last_last_last_last_last_note' previously declared here\n    var\
    \ last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpt3b3_o2w.swift:34:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpt3b3_o2w.swift:32:9:\
    \ note: 'last_last_last_last_last_last_last_beat' previously declared here\n \
    \   var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpt3b3_o2w.swift:35:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_note'\n\
    \    var last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpt3b3_o2w.swift:33:9:\
    \ note: 'last_last_last_last_last_last_last_note' previously declared here\n \
    \   var last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpt3b3_o2w.swift:36:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpt3b3_o2w.swift:32:9: "
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var notes_index = 0\n\
    \    var notes_length_index = 0\n    var notes_length_index2 = 0\n    var notes_length_index3\
    \ = 0\n    var notes_length_index4 = 0\n    var notes_length_index5 = 0\n    var\
    \ notes_length_index6 = 0\n    var notes_length_index7 = 0\n    var notes_length_index8\
    \ = 0\n    var notes_length_index9 = 0\n    var notes_length_index10 = 0\n   \
    \ var notes_length_index11 = 0\n    var notes_length_index12 = 0\n    var notes_length_index13\
    \ = 0\n    var notes_length_index14 = 0\n    var notes_length_index15 = 0\n  \
    \  var notes_length_index16 = 0\n    var notes_length_index17 = 0\n    var notes_length_index18\
    \ = 0\n    var notes_length_index19 = 0\n    var notes_length_index20 = 0\n  \
    \  var notes_length_index21 = 0\n    var notes_length_index22 = 0\n    var notes_length_index23\
    \ = 0\n    var notes_length_index24 = 0\n    var notes_length_index25 = 0\n  \
    \  var notes_length_index26 = 0\n    var notes_length_index27 = 0\n    var notes_length_index28\
    \ = 0\n    var notes_length_index29 = 0\n    var notes_length_index30 = 0\n  \
    \  var notes_length_index31 = 0\n    var notes_length_index32 = 0\n    var notes_length_index33\
    \ = 0\n    var notes_length_index34 = 0\n    var notes_length_index35 = 0\n  \
    \  var notes_length_index36 = 0\n    var notes_length_index37 = 0\n    var notes_length_index38\
    \ = 0\n    var notes_length_index39 = 0\n    var notes_length_index40 = 0\n  \
    \  var notes_length_index41 = 0\n    var notes_length_index42 = 0\n    var notes_length_index43\
    \ = 0\n    var notes_length_index44 = 0\n    var notes_length_index45 = 0\n  \
    \  var notes_length_index46 = 0\n    var notes_length_index47 = 0\n    var notes_length_index48\
    \ = 0\n    var notes_length_index49 = 0\n    var notes_length_index50 = 0\n  \
    \  var notes_length_index51 = 0\n    var notes_length_index52 = 0\n    var notes_length_index53\
    \ = 0\n    var notes_length_index54 = 0\n    var notes_length_index55 = 0\n  \
    \  var notes_length_index56 = 0\n    var notes_length_index57 = 0\n    var notes_length_index58\
    \ = 0\n    var notes_length_index59 = 0\n    var notes_length_index60 = 0\n  \
    \  var notes_length_index61 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8wh68uht.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp8wh68uht.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp8wh68uht.swift:14:9:\
    \ warning: initialization of variable 'notes_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:15:9: warning: initialization\
    \ of variable 'notes_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_index = 0\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmp8wh68uht.swift:16:9: warning: initialization of variable 'notes_length_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:17:9:\
    \ warning: initialization of variable 'notes_length_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:18:9: warning:\
    \ initialization of variable 'notes_length_index3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var notes_length_index3 = 0\n   \
    \ ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:19:9: warning: initialization\
    \ of variable 'notes_length_index4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_length_index4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp8wh68uht.swift:20:9: warning: initialization of variable 'notes_length_index5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:21:9:\
    \ warning: initialization of variable 'notes_length_index6' was never used; consider\
    \ replacing with assi"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var notes_index = 0\n\
    \    var notes_length_index = 0\n    var notes_length_index2 = 0\n    var notes_length_index3\
    \ = 0\n    var notes_length_index4 = 0\n    var notes_length_index5 = 0\n    var\
    \ notes_length_index6 = 0\n    var notes_length_index7 = 0\n    var notes_length_index8\
    \ = 0\n    var notes_length_index9 = 0\n    var notes_length_index10 = 0\n   \
    \ var notes_length_index11 = 0\n    var notes_length_index12 = 0\n    var notes_length_index13\
    \ = 0\n    var notes_length_index14 = 0\n    var notes_length_index15 = 0\n  \
    \  var notes_length_index16 = 0\n    var notes_length_index17 = 0\n    var notes_length_index18\
    \ = 0\n    var notes_length_index19 = 0\n    var notes_length_index20 = 0\n  \
    \  var notes_length_index21 = 0\n    var notes_length_index22 = 0\n    var notes_length_index23\
    \ = 0\n    var notes_length_index24 = 0\n    var notes_length_index25 = 0\n  \
    \  var notes_length_index26 = 0\n    var notes_length_index27 = 0\n    var notes_length_index28\
    \ = 0\n    var notes_length_index29 = 0\n    var notes_length_index30 = 0\n  \
    \  var notes_length_index31 = 0\n    var notes_length_index32 = 0\n    var notes_length_index33\
    \ = 0\n    var notes_length_index34 = 0\n    var notes_length_index35 = 0\n  \
    \  var notes_length_index36 = 0\n    var notes_length_index37 = 0\n    var notes_length_index38\
    \ = 0\n    var notes_length_index39 = 0\n    var notes_length_index40 = 0\n  \
    \  var notes_length_index41 = 0\n    var notes_length_index42 = 0\n    var notes_length_index43\
    \ = 0\n    var notes_length_index44 = 0\n    var notes_length_index45 = 0\n  \
    \  var notes_length_index46 = 0\n    var notes_length_index47 = 0\n    var notes_length_index48\
    \ = 0\n    var notes_length_index49 = 0\n    var notes_length_index50 = 0\n  \
    \  var notes_length_index51 = 0\n    var notes_length_index52 = 0\n    var notes_length_index53\
    \ = 0\n    var notes_length_index54 = 0\n    var notes_length_index55 = 0\n  \
    \  var notes_length_index56 = 0\n    var notes_length_index57 = 0\n    var notes_length_index58\
    \ = 0\n    var notes_length_index59 = 0\n    var notes_length_index60 = 0\n  \
    \  var notes_length_index61 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8wh68uht.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp8wh68uht.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp8wh68uht.swift:14:9:\
    \ warning: initialization of variable 'notes_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:15:9: warning: initialization\
    \ of variable 'notes_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_index = 0\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmp8wh68uht.swift:16:9: warning: initialization of variable 'notes_length_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:17:9:\
    \ warning: initialization of variable 'notes_length_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:18:9: warning:\
    \ initialization of variable 'notes_length_index3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var notes_length_index3 = 0\n   \
    \ ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:19:9: warning: initialization\
    \ of variable 'notes_length_index4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_length_index4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp8wh68uht.swift:20:9: warning: initialization of variable 'notes_length_index5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8wh68uht.swift:21:9:\
    \ warning: initialization of variable 'notes_length_index6' was never used; consider\
    \ replacing with assi"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var note_index = 0\n    var note_length = 0\n\
    \    var note_length_index = 0\n    var note_length_index2 = 0\n    var note_length_index3\
    \ = 0\n    var note_length_index4 = 0\n    var note_length_index5 = 0\n    var\
    \ note_length_index6 = 0\n    var note_length_index7 = 0\n    var note_length_index8\
    \ = 0\n    var note_length_index9 = 0\n    var note_length_index10 = 0\n    var\
    \ note_length_index11 = 0\n    var note_length_index12 = 0\n    var note_length_index13\
    \ = 0\n    var note_length_index14 = 0\n    var note_length_index15 = 0\n    var\
    \ note_length_index16 = 0\n    var note_length_index17 = 0\n    var note_length_index18\
    \ = 0\n    var note_length_index19 = 0\n    var note_length_index20 = 0\n    var\
    \ note_length_index21 = 0\n    var note_length_index22 = 0\n    var note_length_index23\
    \ = 0\n    var note_length_index24 = 0\n    var note_length_index25 = 0\n    var\
    \ note_length_index26 = 0\n    var note_length_index27 = 0\n    var note_length_index28\
    \ = 0\n    var note_length_index29 = 0\n    var note_length_index30 = 0\n    var\
    \ note_length_index31 = 0\n    var note_length_index32 = 0\n    var note_length_index33\
    \ = 0\n    var note_length_index34 = 0\n    var note_length_index35 = 0\n    var\
    \ note_length_index36 = 0\n    var note_length_index37 = 0\n    var note_length_index38\
    \ = 0\n    var note_length_index39 = 0\n    var note_length_index40 = 0\n    var\
    \ note_length_index41 = 0\n    var note_length_index42 = 0\n    var note_length_index43\
    \ = 0\n    var note_length_index44 = 0\n    var note_length_index45 = 0\n    var\
    \ note_length_index46 = 0\n    var note_length_index47 = 0\n    var note_length_index48\
    \ = 0\n    var note_length_index49 = 0\n    var note_length_index50 = 0\n    var\
    \ note_length_index51 = 0\n    var note_length_index52 = 0\n    var note_length_index53\
    \ = 0\n    var note_length_index54 = 0\n    var note_length_index55 = 0\n    var\
    \ note_length_index56 = 0\n    var note_length_index57 = 0\n    var note_length_index58\
    \ = 0\n    var note_length_index59 = 0\n    var note_length_index60 = 0\n    var\
    \ note_length_index61 = 0\n    var note_length_index62 = 0\n    var note_length_index63\
    \ = 0\n    var note_length_index64 = 0\n    var note_length_index65 = 0\n    var\
    \ note_length_index66 = 0\n    var note_length_index67 = 0\n    var note_length_index68\
    \ = 0\n    var note_length_index69 = 0\n    var note_length_index70 = 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpxc7o08o_.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpxc7o08o_.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmpxc7o08o_.swift:14:9:\
    \ warning: initialization of variable 'note_index' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_index = 0\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmpxc7o08o_.swift:15:9: warning: initialization of variable 'note_length'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_length = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpxc7o08o_.swift:16:9:\
    \ warning: initialization of variable 'note_length_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var note_length_index =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpxc7o08o_.swift:17:9: warning: initialization\
    \ of variable 'note_length_index2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_length_index2 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpxc7o08o_.swift:18:9: warning: initialization of variable 'note_length_index3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_length_index3 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpxc7o08o_.swift:19:9:\
    \ warning: initialization of variable 'note_length_index4' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var note_length_index4\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpxc7o08o_.swift:20:9: warning:\
    \ initialization of variable 'note_length_index5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_length_index5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpxc7o08o_.swift:21:9: warning: initialization of variable 'note_length_index6'\
    \ was never used; consider replacing with assignment to '_' or remov"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var note_index\
    \ = 0\n    var note_index2 = 0\n    var note_length = 0\n    var note_length2\
    \ = 0\n    var note_length3 = 0\n    var note_length4 = 0\n    var note_length5\
    \ = 0\n    var note_length6 = 0\n    var note_length7 = 0\n    var note_length8\
    \ = 0\n    var note_length9 = 0\n    var note_length10 = 0\n    var note_length11\
    \ = 0\n    var note_length12 = 0\n    var note_length13 = 0\n    var note_length14\
    \ = 0\n    var note_length15 = 0\n    var note_length16 = 0\n    var note_length17\
    \ = 0\n    var note_length18 = 0\n    var note_length19 = 0\n    var note_length20\
    \ = 0\n    var note_length21 = 0\n    var note_length22 = 0\n    var note_length23\
    \ = 0\n    var note_length24 = 0\n    var note_length25 = 0\n    var note_length26\
    \ = 0\n    var note_length27 = 0\n    var note_length28 = 0\n    var note_length29\
    \ = 0\n    var note_length30 = 0\n    var note_length31 = 0\n    var note_length32\
    \ = 0\n    var note_length33 = 0\n    var note_length34 = 0\n    var note_length35\
    \ = 0\n    var note_length36 = 0\n    var note_length37 = 0\n    var note_length38\
    \ = 0\n    var note_length39 = 0\n    var note_length40 = 0\n    var note_length41\
    \ = 0\n    var note_length42 = 0\n    var note_length43 = 0\n    var note_length44\
    \ = 0\n    var note_length45 = 0\n    var note_length46 = 0\n    var note_length47\
    \ = 0\n    var note_length48 = 0\n    var note_length49 = 0\n    var note_length50\
    \ = 0\n    var note_length51 = 0\n    var note_length52 = 0\n    var note_length53\
    \ = 0\n    var note_length54 = 0\n    var note_length55 = 0\n    var note_length56\
    \ = 0\n    var note_length57 = 0\n    var note_length58 = 0\n    var note_length59\
    \ = 0\n    var note_length60 = 0\n    var note_length61 = 0\n    var note_length62\
    \ = 0\n    var note_length63 = 0\n    var note_length64 = 0\n    var note_length65\
    \ = 0\n    var note_length66 = 0\n    var note_length67 = 0\n    var note_length68\
    \ = 0\n    var note_length69 = 0\n    var note_length70 = 0\n    var note_length71\
    \ = 0\n    var note_length72 = 0\n    var note_length73 = 0\n    var note_length74\
    \ = 0\n    var note_length75 = 0\n    var note_length76 = 0\n    var note_length77\
    \ = 0\n    var note_length78 = 0\n    var note_length79 = 0\n    var note_length80\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp5o7v5vb3.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp5o7v5vb3.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp5o7v5vb3.swift:14:9:\
    \ warning: initialization of variable 'beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmp5o7v5vb3.swift:15:9: warning: initialization of variable 'note' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var note\
    \ = \"\"\n    ~~~~^~~~\n    _\n/tmp/tmp5o7v5vb3.swift:16:9: warning: initialization\
    \ of variable 'note_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_index = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmp5o7v5vb3.swift:17:9:\
    \ warning: initialization of variable 'note_index2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_index2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp5o7v5vb3.swift:18:9: warning: initialization of variable 'note_length'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_length = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp5o7v5vb3.swift:19:9:\
    \ warning: initialization of variable 'note_length2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var note_length2 = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp5o7v5vb3.swift:20:9: warning: initialization\
    \ of variable 'note_length3' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_length3 = 0\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmp5o7v5vb3.swift:21:9: warning: initialization of variable 'note_length4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_length4 = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp5o7v5vb3.swift:22:9:\
    \ warning: initialization of variable 'note_length5' was "
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = Int()\n    var last = 0\n    var last_beat =\
    \ 0\n    var last_note = 0\n    var last_last_beat = 0\n    var last_last_note\
    \ = 0\n    var last_last_last_beat = 0\n    var last_last_last_note = 0\n    var\
    \ last_last_last_last_beat = 0\n    var last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_beat = 0\n    var last_last_last_last_last_note = 0\n\
    \    var last_last_last_last_last_beat = 0\n    var last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_beat = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_beat = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_last_beat = 0\n  \
    \  var last_last_last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_last_last_note = 0\n\
    \    var last_last_last_last_last_last_last_last_last_last_last_beat = 0\n   \
    \ var last_last_last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpc2dwgdrv.swift:26:9: error: invalid redeclaration of 'last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpc2dwgdrv.swift:24:9:\
    \ note: 'last_last_last_last_last_beat' previously declared here\n    var last_last_last_last_last_beat\
    \ = 0\n        ^\n/tmp/tmpc2dwgdrv.swift:27:9: error: invalid redeclaration of\
    \ 'last_last_last_last_last_note'\n    var last_last_last_last_last_note = 0\n\
    \        ^\n/tmp/tmpc2dwgdrv.swift:25:9: note: 'last_last_last_last_last_note'\
    \ previously declared here\n    var last_last_last_last_last_note = 0\n      \
    \  ^\n/tmp/tmpc2dwgdrv.swift:30:9: error: invalid redeclaration of 'last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpc2dwgdrv.swift:28:9:\
    \ note: 'last_last_last_last_last_last_beat' previously declared here\n    var\
    \ last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpc2dwgdrv.swift:31:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_note'\n    var\
    \ last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpc2dwgdrv.swift:29:9:\
    \ note: 'last_last_last_last_last_last_note' previously declared here\n    var\
    \ last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpc2dwgdrv.swift:34:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpc2dwgdrv.swift:32:9:\
    \ note: 'last_last_last_last_last_last_last_beat' previously declared here\n \
    \   var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpc2dwgdrv.swift:35:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_note'\n\
    \    var last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpc2dwgdrv.swift:33:9:\
    \ note: 'last_last_last_last_last_last_last_note' previously declared here\n \
    \   var last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpc2dwgdrv.swift:38:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpc2dwgdrv.sw"
  stdout: ''
  timestamp: 1660013973
