language: swift
name: HumanEval_61_correct_bracketing
results:
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    for openingBracket in openingBrackets {\n        if openingBracket == \"\
    (\" {\n            openingBrackets.removeLast()\n            closingBrackets.append(\"\
    )\")\n        } else if openingBracket == \")\" {\n            openingBrackets.removeLast()\n\
    \            closingBrackets.append(\"(\")\n        }\n    }\n\n    return openingBrackets.count\
    \ == 0 && closingBrackets.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe92l3dky.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe92l3dky.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n\n    while openingBracketsIndex < openingBracketsCount {\n        guard\
    \ openingBrackets[openingBracketsIndex] == '(' || openingBrackets[openingBracketsIndex]\
    \ == '[' || openingBrackets[openingBracketsIndex] == '{' else {\n            return\
    \ false\n        }\n        openingBracketsIndex += 1\n    }\n\n    while closingBracketsIndex\
    \ < closingBracketsCount {\n        guard closingBrackets[closingBracketsIndex]\
    \ == ')' || closingBrackets[closingBracketsIndex] == ']' || closingBrackets[closingBracketsIndex]\
    \ == '}' else {\n            return false\n        }\n        closingBracketsIndex\
    \ += 1\n    }\n\n    return openingBracketsIndex == closingBracketsIndex\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy0jbgyd2.swift:21:56: error: single-quoted string literal found,\
    \ use '\"'\n        guard openingBrackets[openingBracketsIndex] == '(' || openingBrackets[openingBracketsIndex]\
    \ == '[' || openingBrackets[openingBracketsIndex] == '{' else {\n            \
    \                                           ^~~\n                            \
    \                           \"(\"\n/tmp/tmpy0jbgyd2.swift:21:104: error: single-quoted\
    \ string literal found, use '\"'\n        guard openingBrackets[openingBracketsIndex]\
    \ == '(' || openingBrackets[openingBracketsIndex] == '[' || openingBrackets[openingBracketsIndex]\
    \ == '{' else {\n                                                            \
    \                                           ^~~\n                            \
    \                                                                           \"\
    [\"\n/tmp/tmpy0jbgyd2.swift:21:152: error: single-quoted string literal found,\
    \ use '\"'\n        guard openingBrackets[openingBracketsIndex] == '(' || openingBrackets[openingBracketsIndex]\
    \ == '[' || openingBrackets[openingBracketsIndex] == '{' else {\n            \
    \                                                                            \
    \                                                               ^~~\n        \
    \                                                                            \
    \                                                                   \"{\"\n/tmp/tmpy0jbgyd2.swift:28:56:\
    \ error: single-quoted string literal found, use '\"'\n        guard closingBrackets[closingBracketsIndex]\
    \ == ')' || closingBrackets[closingBracketsIndex] == ']' || closingBrackets[closingBracketsIndex]\
    \ == '}' else {\n                                                       ^~~\n\
    \                                                       \")\"\n/tmp/tmpy0jbgyd2.swift:28:104:\
    \ error: single-quoted string literal found, use '\"'\n        guard closingBrackets[closingBracketsIndex]\
    \ == ')' || closingBrackets[closingBracketsIndex] == ']' || closingBrackets[closingBracketsIndex]\
    \ == '}' else {\n                                                            \
    \          "
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.characters.split{$0 == \")\"}.map(String.init)\n\
    \    let closingBrackets = brackets.characters.split{$0 == \"(\"}.map(String.init)\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        if\
    \ !closingBrackets.contains(openingBracket) {\n            return false\n    \
    \    }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppqa8lkm0.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    let openingBrackets = brackets.characters.split{$0\
    \ == \")\"}.map(String.init)\n                                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmppqa8lkm0.swift:14:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    let closingBrackets\
    \ = brackets.characters.split{$0 == \"(\"}.map(String.init)\n                \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    while openingBracketIndex < brackets.endIndex {\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        openingBracketIndex\
    \ += 1\n        if openingBracket == \"(\" {\n            openingBracketIndex\
    \ += 1\n            if openingBracketIndex < brackets.endIndex {\n           \
    \     let closingBracket = brackets[openingBracketIndex]\n                openingBracketIndex\
    \ += 1\n                closingBracketIndex += 1\n                if closingBracket\
    \ == \")\" {\n                    openingBracketIndex += 1\n                 \
    \   if openingBracketIndex < brackets.endIndex {\n                        let\
    \ closingBracket = brackets[openingBracketIndex]\n                        openingBracketIndex\
    \ += 1\n                        closingBracketIndex += 1\n                   \
    \     if closingBracket == \")\" {\n                            openingBracketIndex\
    \ += 1\n                            if openingBracketIndex < brackets.endIndex\
    \ {\n                                let closingBracket = brackets[openingBracketIndex]\n\
    \                                openingBracketIndex += 1\n                  \
    \              closingBracketIndex += 1\n                                if closingBracket\
    \ == \")\" {\n                                    openingBracketIndex += 1\n \
    \                                   if openingBracketIndex < brackets.endIndex\
    \ {\n                                        let closingBracket = brackets[openingBracketIndex]\n\
    \                                        openingBracketIndex += 1\n          \
    \                              closingBracketIndex += 1\n                    \
    \                    if closingBracket == \")\" {\n                          \
    \                  openingBracketIndex += 1\n                                \
    \            if openingBracketIndex < brackets.endIndex {\n                  \
    \                              let closingBracket = brackets[openingBracketIndex]\n\
    \                                                openingBracketIndex += 1\n  \
    \                                              closingBracketIndex += 1\n    \
    \                                            if closingBracket == \")\" {\n  \
    \                                                  openingBracketIndex += 1\n\
    \                                                    if openingBracketIndex <\
    \ brackets.endIndex {\n                                                      \
    \  let closingBracket = brackets[openingBracketIndex]\n                      \
    \                                  openingBracketIndex += 1\n                \
    \                                        closingBracketIndex += 1\n          \
    \                                              if closingBracket == \")\" {\n\
    \                                                            openingBracketIndex\
    \ += 1\n                                                            if openingBracketIndex\
    \ < brackets.endIndex {\n                                                    \
    \            let closingBracket = brackets[openingBracketIndex]\n            \
    \                                                    openingBracketIndex += 1\n\
    \                                                                closingBracketIndex\
    \ += 1\n                                                                if closingBracket\
    \ == \")\" {\n                                                               \
    \     openingBracket\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpikjb7dnl.swift:90:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmpikjb7dnl.swift:58:104:\
    \ note: to match this opening '{'\n                                          \
    \                  if openingBracketIndex < brackets.endIndex {\n            \
    \                                                                            \
    \               ^\n/tmp/tmpikjb7dnl.swift:90:66: error: expected '}' at end of\
    \ brace statement\nassert(correct_bracketing(brackets: \"()()(()())()))()\") ==\
    \ false)\n                                                                 ^\n\
    /tmp/tmpikjb7dnl.swift:56:82: note: to match this opening '{'\n              \
    \                                          if closingBracket == \")\" {\n    \
    \                                                                            \
    \ ^\n/tmp/tmpikjb7dnl.swift:90:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmpikjb7dnl.swift:52:96:\
    \ note: to match this opening '{'\n                                          \
    \          if openingBracketIndex < brackets.endIndex {\n                    \
    \                                                                           ^\n\
    /tmp/tmpikjb7dnl.swift:90:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmpikjb7dnl.swift:50:74:\
    \ note: to match this opening '{'\n                                          \
    \      if closingBracket == \")\" {\n                                        \
    \                                 ^\n/tmp/tmpikjb7dnl.swift:90:66: error: expected\
    \ '}' at end of brace statement\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmpikjb7dnl.swift:46:88: note"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n\n    while openingBracketsCount > 0 && closingBracketsCount\
    \ > 0 {\n        if openingBrackets[openingBracketsCount - 1] == closingBrackets[0]\
    \ {\n            openingBracketsCount -= 1\n            closingBracketsCount -=\
    \ 1\n        } else {\n            return false\n        }\n    }\n\n    return\
    \ openingBracketsCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_vfbm9em.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_vfbm9em.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_vfbm9em.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp_vfbm9em.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp_vfbm9em.swift:19:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if openingBrackets[openingBracketsCount - 1] == closingBrackets[0] {\n\
    \           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp_vfbm9em.swift:19:57: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        if openingBrackets[openingBracketsCount - 1] == closingBrackets[0]\
    \ {\n                                                        ^~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marke"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n    for\
    \ openingBracket in openingBrackets {\n        if closingBrackets.contains(openingBracket)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbffu247q.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbffu247q.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for openingBracket in openingBrackets {\n\
    \        let closingBracket = closingBrackets.first(where: { $0 == openingBracket\
    \ })\n        if closingBracket == nil {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8v1qtv0r.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp8v1qtv0r.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n    var openingBracketsCountIndex = 0\n    var closingBracketsCountIndex\
    \ = 0\n    var openingBracketsCountMax = openingBracketsCount\n    var closingBracketsCountMax\
    \ = closingBracketsCount\n\n    while openingBracketsCountIndex < openingBracketsCount\
    \ {\n        openingBracketsCountIndex += 1\n        if openingBracketsCountIndex\
    \ == openingBracketsCount {\n            openingBracketsCountIndex = 0\n     \
    \       openingBracketsCountMax += 1\n        }\n        if openingBrackets[openingBracketsCountIndex]\
    \ == '(' {\n            openingBracketsCountMax -= 1\n            if openingBracketsCountMax\
    \ == 0 {\n                openingBracketsCountMax = openingBracketsCount\n   \
    \             openingBracketsCount += 1\n            }\n        }\n    }\n   \
    \ while closingBracketsCountIndex < closingBracketsCount {\n        closingBracketsCountIndex\
    \ += 1\n        if closingBracketsCountIndex == closingBracketsCount {\n     \
    \       closingBracketsCountIndex = 0\n            closingBracketsCountMax +=\
    \ 1\n        }\n        if closingBrackets[closingBracketsCountIndex] == ')' {\n\
    \            closingBracketsCountMax -= 1\n            if closingBracketsCountMax\
    \ == 0 {\n                closingBracketsCountMax = closingBracketsCount\n   \
    \             closingBracketsCount += 1\n            }\n        }\n    }\n\n \
    \   if openingBracketsCountMax != closingBracketsCountMax {\n        return false\n\
    \    }\n\n    if openingBracketsCount != closingBracketsCount {\n        return\
    \ false\n    }\n\n    if openingBracketsCount > 0 && closingBracketsCount > 0\
    \ {\n        if openingBrackets[openingBracketsCount - 1] != closingBrackets[closingBracketsCount\
    \ - 1] {\n            return false\n        }\n    }\n\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd25rgei3.swift:30:58: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketsCountIndex] == '(' {\n \
    \                                                        ^~~\n               \
    \                                          \"(\"\n/tmp/tmpd25rgei3.swift:44:58:\
    \ error: single-quoted string literal found, use '\"'\n        if closingBrackets[closingBracketsCountIndex]\
    \ == ')' {\n                                                         ^~~\n   \
    \                                                      \")\"\n/tmp/tmpd25rgei3.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpd25rgei3.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd25rgei3.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpd25rgei3.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpd25rgei3.swift:30:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if openingBrackets[openingBracketsCountIndex] == '(' {\n           ^~~~~~~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = 1\n    var closingBracketsCount = 1\n    var bracketsCount\
    \ = brackets.characters.count\n\n    while openingBracketsCount > 0 || closingBracketsCount\
    \ > 0 || bracketsCount > 0 {\n        if openingBracketsCount == 0 {\n       \
    \     openingBrackets.removeLast()\n            openingBracketsCount--\n     \
    \   }\n        if closingBracketsCount == 0 {\n            closingBrackets.removeLast()\n\
    \            closingBracketsCount--\n        }\n        if bracketsCount == 0\
    \ {\n            brackets.removeLast()\n            bracketsCount--\n        }\n\
    \        if openingBracketsCount == 0 {\n            openingBrackets.removeLast()\n\
    \            openingBracketsCount--\n        }\n        if closingBracketsCount\
    \ == 0 {\n            closingBrackets.removeLast()\n            closingBracketsCount--\n\
    \        }\n        if bracketsCount == 0 {\n            brackets.removeLast()\n\
    \            bracketsCount--\n        }\n    }\n    return brackets.characters.count\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpeuaotjhh.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpeuaotjhh.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpeuaotjhh.swift:17:34: error: 'characters' is unavailable:\
    \ Please use String directly\n    var bracketsCount = brackets.characters.count\n\
    \                                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpeuaotjhh.swift:22:33: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n            openingBracketsCount--\n       \
    \                         ^~\n/tmp/tmpeuaotjhh.swift:26:33: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n            closingBracketsCount--\n\
    \                                ^~\n/tmp/tmpeuaotjhh.swift:29:22: error: cannot\
    \ use mutating member on immutable value: 'brackets' is a 'let' constant\n   \
    \         brackets.removeLast()\n            ~~~~~~~~ ^\n/tmp/tmpeuaotjhh.swift:30:26:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  bracketsCount--\n                         ^~\n/tmp/tmpeuaotjhh.swift:34:33:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  openingBracketsCount--\n                                ^~\n/tmp/tmpeuaotjhh.swift:38:33:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  closingBracketsCount--\n                                ^~\n/tmp/tmpeuaotjhh.swift:41:22:\
    \ error: cannot use mutating member on immutable value: 'brackets' is a 'let'\
    \ constant\n            br"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm3fj981y.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpm3fj981y.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n    var openingBracketsCountIndex = 0\n    var closingBracketsCountIndex\
    \ = 0\n    var openingBracketsCountMax = openingBracketsCount\n    var closingBracketsCountMax\
    \ = closingBracketsCount\n    var openingBracketsCountMaxIndex = 0\n    var closingBracketsCountMaxIndex\
    \ = 0\n    var openingBracketsCountMin = openingBracketsCount\n    var closingBracketsCountMin\
    \ = closingBracketsCount\n    var openingBracketsCountMinIndex = 0\n    var closingBracketsCountMinIndex\
    \ = 0\n    var openingBracketsCountMaxMin = openingBracketsCount\n    var closingBracketsCountMaxMin\
    \ = closingBracketsCount\n    var openingBracketsCountMaxMinIndex = 0\n    var\
    \ closingBracketsCountMaxMinIndex = 0\n    var openingBracketsCountMinMax = openingBracketsCount\n\
    \    var closingBracketsCountMinMax = closingBracketsCount\n    var openingBracketsCountMinMaxIndex\
    \ = 0\n    var closingBracketsCountMinMaxIndex = 0\n    var openingBracketsCountMaxMinMax\
    \ = openingBracketsCount\n    var closingBracketsCountMaxMinMax = closingBracketsCount\n\
    \    var openingBracketsCountMaxMinMaxIndex = 0\n    var closingBracketsCountMaxMinMaxIndex\
    \ = 0\n    var openingBracketsCountMinMaxMin = openingBracketsCount\n    var closingBracketsCountMinMaxMin\
    \ = closingBracketsCount\n    var openingBracketsCountMinMaxMinIndex = 0\n   \
    \ var closingBracketsCountMinMaxMinIndex = 0\n    var openingBracketsCountMaxMinMaxMin\
    \ = openingBracketsCount\n    var closingBracketsCountMaxMinMaxMin = closingBracketsCount\n\
    \    var openingBracketsCountMaxMinMaxMinIndex = 0\n    var closingBracketsCountMaxMinMaxMinIndex\
    \ = 0\n    var openingBracketsCountMinMaxMinMax = openingBracketsCount\n    var\
    \ closingBracketsCountMinMaxMinMax = closingBracketsCount\n    var openingBracket\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxu6wcw3u.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpxu6wcw3u.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpxu6wcw3u.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpxu6wcw3u.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpxu6wcw3u.swift:51:9: error: type annotation\
    \ missing in pattern\n    var openingBracket\n        ^\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    for openingBracket in openingBrackets\
    \ {\n        if let closingBracket = closingBrackets.firstIndex(of: openingBracket)\
    \ {\n            closingBrackets.remove(at: closingBracket)\n        } else {\n\
    \            return false\n        }\n    }\n    \n    return openingBrackets.count\
    \ == closingBrackets.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplsh_by07.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmplsh_by07.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    var openingBracketIndex = 0\n    var closingBracketIndex = 0\n\n    while\
    \ openingBracketIndex < openingBrackets.count {\n        guard openingBrackets[openingBracketIndex]\
    \ == '(' else {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n\n        while closingBracketIndex < closingBrackets.count {\n      \
    \      guard closingBrackets[closingBracketIndex] == ')' else {\n            \
    \    return false\n            }\n\n            closingBracketIndex += 1\n   \
    \     }\n\n        openingBracketIndex += 1\n    }\n\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp56ocgb5h.swift:20:55: error: single-quoted string literal found,\
    \ use '\"'\n        guard openingBrackets[openingBracketIndex] == '(' else {\n\
    \                                                      ^~~\n                 \
    \                                     \"(\"\n/tmp/tmp56ocgb5h.swift:27:59: error:\
    \ single-quoted string literal found, use '\"'\n            guard closingBrackets[closingBracketIndex]\
    \ == ')' else {\n                                                          ^~~\n\
    \                                                          \")\"\n/tmp/tmp56ocgb5h.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp56ocgb5h.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp56ocgb5h.swift:20:15: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        guard\
    \ openingBrackets[openingBracketIndex] == '(' else {\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp56ocgb5h.swift:27:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            guard closingBrackets[closingBracketIndex]\
    \ == ')' else {\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp56ocgb5h.swift:13:9:\
    \ warning: variable 'openingBrackets' was never mutated"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = brackets.characters.count\n\
    \    var closingBracketCount = brackets.characters.count\n\n    while openingBracketIndex\
    \ < openingBracketCount {\n        if openingBrackets[openingBracketIndex] ==\
    \ \")\" {\n            closingBracketIndex--\n        } else if openingBrackets[openingBracketIndex]\
    \ != \"(\" {\n            return false\n        }\n        openingBracketIndex++\n\
    \    }\n\n    while closingBracketIndex < closingBracketCount {\n        if closingBrackets[closingBracketIndex]\
    \ == \")\" {\n            openingBracketIndex++\n        } else if closingBrackets[closingBracketIndex]\
    \ != \"(\" {\n            return false\n        }\n        closingBracketIndex++\n\
    \    }\n\n    return openingBracketIndex == closingBracketIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp95ml8e68.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp95ml8e68.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp95ml8e68.swift:17:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp95ml8e68.swift:18:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp95ml8e68.swift:20:31: error: referencing operator function\
    \ '<' on 'BinaryInteger' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \    while openingBracketIndex < openingBracketCount {\n                     \
    \         ^\nSwift.BinaryInteger:1:11: note: where 'Self' = 'String.Index'\nextension\
    \ BinaryInteger {\n          ^\n/tmp/tmp95ml8e68.swift:22:32: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n            closingBracketIndex--\n\
    \                               ^~\n/tmp/tmp95ml8e68.swift:26:28: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        openingBracketIndex++\n\
    \                           ^~\n/tmp/tmp95ml8e68.swift:29:31: error: referencing\
    \ operator function '<' on 'BinaryInteger' requires that 'String.Index' c"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    var openingBracketsIndex = 0\n    var closingBracketsIndex = 0\n\n    while\
    \ openingBracketsIndex < openingBrackets.count {\n        if openingBrackets[openingBracketsIndex]\
    \ == '(' {\n            openingBracketsIndex += 1\n        } else if openingBrackets[openingBracketsIndex]\
    \ == ')' {\n            openingBracketsIndex += 1\n            closingBracketsIndex\
    \ += 1\n        } else {\n            return false\n        }\n    }\n\n    while\
    \ closingBracketsIndex < closingBrackets.count {\n        if closingBrackets[closingBracketsIndex]\
    \ == '(' {\n            closingBracketsIndex += 1\n        } else if closingBrackets[closingBracketsIndex]\
    \ == ')' {\n            closingBracketsIndex += 1\n            openingBracketsIndex\
    \ += 1\n        } else {\n            return false\n        }\n    }\n\n    return\
    \ openingBracketsIndex == closingBracketsIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpeem1kiun.swift:20:53: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketsIndex] == '(' {\n      \
    \                                              ^~~\n                         \
    \                           \"(\"\n/tmp/tmpeem1kiun.swift:22:60: error: single-quoted\
    \ string literal found, use '\"'\n        } else if openingBrackets[openingBracketsIndex]\
    \ == ')' {\n                                                           ^~~\n \
    \                                                          \")\"\n/tmp/tmpeem1kiun.swift:31:53:\
    \ error: single-quoted string literal found, use '\"'\n        if closingBrackets[closingBracketsIndex]\
    \ == '(' {\n                                                    ^~~\n        \
    \                                            \"(\"\n/tmp/tmpeem1kiun.swift:33:60:\
    \ error: single-quoted string literal found, use '\"'\n        } else if closingBrackets[closingBracketsIndex]\
    \ == ')' {\n                                                           ^~~\n \
    \                                                          \")\"\n/tmp/tmpeem1kiun.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpeem1kiun.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpeem1kiun.swift:20:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[openingBracketsIndex] == '(' {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n    while openingBracketsIndex < openingBracketsCount {\n        openingBracketsIndex\
    \ += 1\n        if openingBrackets[openingBracketsIndex] == '(' {\n          \
    \  openingBracketsCount -= 1\n            if openingBracketsCount == 0 {\n   \
    \             openingBracketsIndex += 1\n            }\n        }\n    }\n   \
    \ while closingBracketsIndex < closingBracketsCount {\n        closingBracketsIndex\
    \ += 1\n        if closingBrackets[closingBracketsIndex] == ')' {\n          \
    \  closingBracketsCount -= 1\n            if closingBracketsCount == 0 {\n   \
    \             closingBracketsIndex += 1\n            }\n        }\n    }\n   \
    \ return openingBracketsIndex == closingBracketsIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp65xjsnu1.swift:21:53: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketsIndex] == '(' {\n      \
    \                                              ^~~\n                         \
    \                           \"(\"\n/tmp/tmp65xjsnu1.swift:30:53: error: single-quoted\
    \ string literal found, use '\"'\n        if closingBrackets[closingBracketsIndex]\
    \ == ')' {\n                                                    ^~~\n        \
    \                                            \")\"\n/tmp/tmp65xjsnu1.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp65xjsnu1.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp65xjsnu1.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp65xjsnu1.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp65xjsnu1.swift:21:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if openingBrackets[openingBracketsIndex] == '(' {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: no"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for openingBracket\
    \ in openingBrackets {\n        if !closingBrackets.contains(where: { $0 == openingBracket\
    \ }) {\n            return false\n        }\n    }\n    \n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj6zcidfp.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpj6zcidfp.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        guard openingBrackets[openingBracketIndex] == \")\" else {\n        \
    \    return false\n        }\n\n        openingBracketIndex += 1\n\n        if\
    \ openingBracketIndex == brackets.endIndex {\n            return true\n      \
    \  }\n\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n\n        openingBracketIndex += 1\n    }\n\
    \n    while closingBracketIndex < brackets.endIndex {\n        guard closingBrackets[closingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n\n        closingBracketIndex\
    \ += 1\n\n        if closingBracketIndex == brackets.endIndex {\n            return\
    \ true\n        }\n\n        guard closingBrackets[closingBracketIndex] == \"\
    )\" else {\n            return false\n        }\n\n        closingBracketIndex\
    \ += 1\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzm849fpq.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzm849fpq.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzm849fpq.swift:23:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpzm849fpq.swift:33:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmpzm849fpq.swift:41:29: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n        closingBracketIndex += 1\n\
    \        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpzm849fpq.swift:51:29: error: binary\
    \ operator '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n\
    \        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n\n    while openingBracketIndex < brackets.endIndex {\n        switch brackets[openingBracketIndex]\
    \ {\n        case \")\":\n            closingBracketCount++\n            openingBracketCount--\n\
    \            if openingBracketCount < 0 {\n                openingBracketIndex\
    \ = brackets.startIndex\n                openingBracketCount = 0\n           \
    \ }\n        case \")\":\n            openingBracketCount++\n            closingBracketCount--\n\
    \            if closingBracketCount < 0 {\n                closingBracketIndex\
    \ = brackets.startIndex\n                closingBracketCount = 0\n           \
    \ }\n        default:\n            openingBracketCount++\n            closingBracketCount++\n\
    \        }\n        openingBracketIndex++\n    }\n\n    return openingBracketCount\
    \ == closingBracketCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu6s061pw.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpu6s061pw.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpu6s061pw.swift:23:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            closingBracketCount++\n        \
    \                       ^~\n/tmp/tmpu6s061pw.swift:24:32: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            openingBracketCount--\n   \
    \                            ^~\n/tmp/tmpu6s061pw.swift:30:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            openingBracketCount++\n\
    \                               ^~\n/tmp/tmpu6s061pw.swift:31:32: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketCount--\n\
    \                               ^~\n/tmp/tmpu6s061pw.swift:37:32: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            openingBracketCount++\n\
    \                               ^~\n/tmp/tmpu6s061pw.swift:38:32: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            closingBracketCount++\n\
    \                               ^~\n/tmp/tmpu6s061pw.swift:29:14: warning: literal\
    \ value is already handled by previous pattern; consider removing it\n       \
    \ case \")\":\n             ^~~\n/tmp/tmpu6s061pw.swift:22:14: note: first occurrence\
    \ of identical literal pattern is here\n        case \")\":\n             ^~~\n\
    /tmp/tmpu6s061pw.swift:40:28: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n        openingBracketIndex++\n                           ^~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    guard openingBrackets.count ==\
    \ closingBrackets.count else {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        guard let closingBracket = closingBrackets.first\
    \ {\n            return openingBracket == closingBracket\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy04b5cle.swift:19:58: error: expected 'else' after 'guard' condition\n\
    \        guard let closingBracket = closingBrackets.first {\n                \
    \                                         ^\n                                \
    \                         else \n/tmp/tmpy04b5cle.swift:13:36: error: value of\
    \ type 'String' has no member 'components'\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpy04b5cle.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm3fj981y.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpm3fj981y.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        let char =\
    \ brackets[openingBracketIndex]\n        if char == \"(\" {\n            openingBracketCount\
    \ += 1\n        } else if char == \")\" {\n            closingBracketCount +=\
    \ 1\n        }\n        openingBracketIndex += 1\n    }\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n    if openingBracketCount\
    \ == 0 {\n        return true\n    }\n    if openingBracketCount > 1 {\n     \
    \   return false\n    }\n    if openingBracketIndex == brackets.endIndex {\n \
    \       return true\n    }\n    let char = brackets[openingBracketIndex]\n   \
    \ if char == \"(\" {\n        openingBracketIndex += 1\n    }\n    if closingBracketIndex\
    \ == brackets.endIndex {\n        return true\n    }\n    let closingBracket =\
    \ brackets[closingBracketIndex]\n    if closingBracket == \"(\" {\n        closingBracketIndex\
    \ += 1\n    }\n    if openingBracketIndex == brackets.endIndex {\n        return\
    \ true\n    }\n    let openingBracket = brackets[openingBracketIndex]\n    if\
    \ closingBracket == \")\" {\n        closingBracketIndex += 1\n    }\n    if openingBracket\
    \ == \")\" {\n        openingBracketIndex += 1\n    }\n    if closingBracket ==\
    \ \")\" {\n        closingBracketIndex += 1\n    }\n    return openingBracketIndex\
    \ == brackets.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmsi3ynxr.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpmsi3ynxr.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpmsi3ynxr.swift:26:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpmsi3ynxr.swift:42:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmpmsi3ynxr.swift:49:29: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n        closingBracketIndex += 1\n\
    \        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpmsi3ynxr.swift:56:29: error: binary\
    \ operator '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n\
    \        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpmsi3ynxr.swift:59:29:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^ \
    \ ~\n/tmp/tmpmsi3ynxr.swift:62:29: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n        closingBracketIndex +=\
    \ 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm3fj981y.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpm3fj981y.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    var openingBracketIndex = openingBrackets.startIndex\n    var closingBracketIndex\
    \ = closingBrackets.startIndex\n\n    while openingBracketIndex < openingBrackets.endIndex\
    \ {\n        if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n            return false\n        }\n\n        openingBracketIndex += 1\n\
    \        closingBracketIndex += 1\n    }\n\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnxhy7nvn.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpnxhy7nvn.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpnxhy7nvn.swift:24:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpnxhy7nvn.swift:25:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    guard openingBrackets.count ==\
    \ closingBrackets.count else {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        guard let closingBracket = closingBrackets.first\
    \ else {\n            return false\n        }\n        if openingBracket != closingBracket\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc8dzpyls.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpc8dzpyls.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for openingBracket\
    \ in openingBrackets {\n        let closingBracket = closingBrackets.first(where:\
    \ { $0 == openingBracket })\n        \n        if closingBracket == nil {\n  \
    \          return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbp7e5nlm.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpbp7e5nlm.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    var openingBracketIndex = openingBrackets.startIndex\n    var closingBracketIndex\
    \ = closingBrackets.startIndex\n\n    while openingBracketIndex < openingBrackets.endIndex\
    \ {\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n    \
    \        return false\n        }\n\n        openingBracketIndex += 1\n       \
    \ closingBracketIndex += 1\n    }\n\n    while closingBracketIndex < closingBrackets.endIndex\
    \ {\n        guard closingBrackets[closingBracketIndex] != \"(\" else {\n    \
    \        return false\n        }\n\n        openingBracketIndex += 1\n       \
    \ closingBracketIndex += 1\n    }\n\n    return openingBracketIndex == openingBrackets.endIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptiyi_dk7.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptiyi_dk7.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptiyi_dk7.swift:24:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmptiyi_dk7.swift:25:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmptiyi_dk7.swift:33:29: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n        openingBracketIndex += 1\n\
    \        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmptiyi_dk7.swift:34:29: error: binary\
    \ operator '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n\
    \        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm3fj981y.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpm3fj981y.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    let openingBracketCount = openingBrackets.count\n\
    \    let closingBracketCount = closingBrackets.count\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        if let index = openingBrackets.firstIndex(of:\
    \ openingBracket) {\n            let closingBracket = closingBrackets[index]\n\
    \            if openingBracket != closingBracket {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp48z3o172.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp48z3o172.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    while openingBracketIndex < brackets.endIndex {\n\
    \        if openingBrackets[openingBracketIndex] == \")\" {\n            closingBracketIndex\
    \ = openingBracketIndex\n        } else {\n            openingBracketIndex +=\
    \ 1\n        }\n    }\n    while closingBracketIndex < brackets.endIndex {\n \
    \       if closingBrackets[closingBracketIndex] == \")\" {\n            openingBracketIndex\
    \ = closingBracketIndex\n        } else {\n            closingBracketIndex +=\
    \ 1\n        }\n    }\n    return openingBracketIndex == closingBracketIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpretstw1o.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpretstw1o.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpretstw1o.swift:21:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpretstw1o.swift:28:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n"
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n\n    while openingBracketsIndex < openingBracketsCount {\n        if openingBrackets[openingBracketsIndex]\
    \ == \")\" {\n            openingBracketsIndex += 1\n            closingBracketsIndex\
    \ += 1\n        } else if openingBrackets[openingBracketsIndex] != \"(\" {\n \
    \           openingBracketsIndex += 1\n        } else {\n            openingBracketsIndex\
    \ += 1\n            closingBracketsIndex += 1\n            openingBracketsCount\
    \ -= 1\n            closingBracketsCount -= 1\n        }\n    }\n\n    return\
    \ openingBracketsIndex == openingBracketsCount\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbmnz0p_w.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbmnz0p_w.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbmnz0p_w.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpbmnz0p_w.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpbmnz0p_w.swift:21:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if openingBrackets[openingBracketsIndex] == \")\" {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpbmnz0p_w.swift:24:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        } else if openingBrackets[openingBracketsIndex]\
    \ != \"(\" {\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Cha"
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var bracketCount = 0\n    var lastChar = brackets.characters.last!\n    for\
    \ char in brackets.characters {\n        if char == lastChar {\n            bracketCount\
    \ += 1\n        } else {\n            if bracketCount == 0 {\n               \
    \ return false\n            }\n            bracketCount = 0\n        }\n     \
    \   lastChar = char\n    }\n    return bracketCount == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps44j2uqd.swift:14:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var lastChar = brackets.characters.last!\n        \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmps44j2uqd.swift:15:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in brackets.characters {\n               \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n\n    if openingBracketsCount != closingBracketsCount\
    \ {\n        return false\n    }\n\n    for index in 0..<openingBracketsCount\
    \ {\n        let openingBracket = openingBrackets[index]\n        let closingBracket\
    \ = closingBrackets[index]\n        if openingBracket != closingBracket {\n  \
    \          return false\n        }\n    }\n\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0lg5hv2_.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp0lg5hv2_.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp0lg5hv2_.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp0lg5hv2_.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp0lg5hv2_.swift:23:30: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        let openingBracket = openingBrackets[index]\n                       \
    \      ^~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp0lg5hv2_.swift:24:30: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        let closingBracket = closingBrackets[index]\n                       \
    \      ^~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n     "
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeFirst()\n    closingBrackets.removeLast()\n    if openingBrackets.isEmpty\
    \ {\n        return true\n    }\n    if closingBrackets.isEmpty {\n        return\
    \ false\n    }\n    if openingBrackets.first != closingBrackets.last {\n     \
    \   return false\n    }\n    if openingBrackets.first == closingBrackets.first\
    \ {\n        return true\n    }\n    return correct_bracketing(String(openingBrackets[1..<openingBrackets.count]))\n\
    \        && correct_bracketing(String(closingBrackets[1..<closingBrackets.count]))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1081rnw_.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1081rnw_.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1081rnw_.swift:29:31: error: missing argument label\
    \ 'brackets:' in call\n    return correct_bracketing(String(openingBrackets[1..<openingBrackets.count]))\n\
    \                              ^\n                              brackets: \n/tmp/tmp1081rnw_.swift:30:31:\
    \ error: missing argument label 'brackets:' in call\n        && correct_bracketing(String(closingBrackets[1..<closingBrackets.count]))\n\
    \                              ^\n                              brackets: \n"
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n    var openingBracketsCountIndex = 0\n    var closingBracketsCountIndex\
    \ = 0\n\n    while openingBracketsIndex < openingBracketsCount {\n        if openingBrackets[openingBracketsIndex]\
    \ == \")\" {\n            closingBracketsCountIndex++\n            if closingBracketsCountIndex\
    \ == closingBracketsCount {\n                return true\n            }\n    \
    \    } else {\n            openingBracketsCountIndex++\n            if openingBracketsCountIndex\
    \ == openingBracketsCount {\n                return false\n            }\n   \
    \     }\n        openingBracketsIndex++\n    }\n\n    while closingBracketsIndex\
    \ < closingBracketsCount {\n        if closingBrackets[closingBracketsIndex] ==\
    \ \")\" {\n            openingBracketsCountIndex++\n            if openingBracketsCountIndex\
    \ == openingBracketsCount {\n                return false\n            }\n   \
    \     } else {\n            closingBracketsCountIndex++\n            if closingBracketsCountIndex\
    \ == closingBracketsCount {\n                return true\n            }\n    \
    \    }\n        closingBracketsIndex++\n    }\n\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpilsuu05y.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpilsuu05y.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpilsuu05y.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpilsuu05y.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpilsuu05y.swift:23:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if openingBrackets[openingBracketsIndex] == \")\" {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpilsuu05y.swift:24:38:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  closingBracketsCountIndex++\n                                     ^~\n/tmp/tmpilsuu05y.swift:29:38:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  openingBracketsCountIndex++\n                                     ^~\n/tmp/tmpilsuu05y.swift:34:2"
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        if openingBrackets[openingBracketIndex] == \")\" {\n            closingBracketIndex\
    \ = openingBracketIndex + 1\n        } else {\n            openingBracketIndex\
    \ = openingBracketIndex + 1\n        }\n    }\n\n    while closingBracketIndex\
    \ < brackets.endIndex {\n        if closingBrackets[closingBracketIndex] == \"\
    )\" {\n            openingBracketIndex = closingBracketIndex + 1\n        } else\
    \ {\n            closingBracketIndex = closingBracketIndex + 1\n        }\n  \
    \  }\n\n    return openingBracketIndex == closingBracketIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7pkpp21p.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7pkpp21p.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7pkpp21p.swift:20:55: error: binary operator '+' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ = openingBracketIndex + 1\n                                  ~~~~~~~~~~~~~~~~~~~\
    \ ^ ~\n/tmp/tmp7pkpp21p.swift:20:55: note: overloads for '+' exist with these\
    \ partially matching parameter lists: (Int, Int)\n            closingBracketIndex\
    \ = openingBracketIndex + 1\n                                                \
    \      ^\n/tmp/tmp7pkpp21p.swift:22:55: error: binary operator '+' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ = openingBracketIndex + 1\n                                  ~~~~~~~~~~~~~~~~~~~\
    \ ^ ~\n/tmp/tmp7pkpp21p.swift:22:55: note: overloads for '+' exist with these\
    \ partially matching parameter lists: (Int, Int)\n            openingBracketIndex\
    \ = openingBracketIndex + 1\n                                                \
    \      ^\n/tmp/tmp7pkpp21p.swift:28:55: error: binary operator '+' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ = closingBracketIndex + 1\n                                  ~~~~~~~~~~~~~~~~~~~\
    \ ^ ~\n/tmp/tmp7pkpp21p.swift:28:55: note: overloads for '+' exist with these\
    \ partially matching parameter lists: (Int, Int)\n            openingBracketIndex\
    \ = closingBracketIndex + 1\n                                                \
    \      ^\n/tmp/tmp7pkpp21p.s"
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    while openingBracketIndex < brackets.endIndex {\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n        if openingBracket == \"(\" {\n    \
    \        if closingBracket == \")\" {\n                openingBracketIndex +=\
    \ 1\n                closingBracketIndex += 1\n            } else {\n        \
    \        openingBracketIndex += 1\n            }\n        } else if openingBracket\
    \ == \")\" {\n            if closingBracket == \"(\" {\n                openingBracketIndex\
    \ += 1\n                closingBracketIndex += 1\n            } else {\n     \
    \           openingBracketIndex += 1\n            }\n        } else {\n      \
    \      openingBracketIndex += 1\n            closingBracketIndex += 1\n      \
    \  }\n    }\n    return openingBracketIndex == brackets.endIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi37f4aiq.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpi37f4aiq.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpi37f4aiq.swift:22:37: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n                openingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpi37f4aiq.swift:23:37:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n                closingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpi37f4aiq.swift:25:37: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n                openingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpi37f4aiq.swift:29:37:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n                openingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpi37f4aiq.swift:30:37: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n                closingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpi37f4aiq.swift:32:37:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n                openingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpi37f4aiq.swift:35:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpi"
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm3fj981y.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpm3fj981y.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    var openingCount = brackets.characters.count\n    var closingCount = brackets.characters.count\n\
    \    for openingIndex in 0..<openingCount {\n        let openingChar = opening[openingIndex]\n\
    \        if openingChar == \")\" {\n            closingCount -= 1\n        } else\
    \ if openingChar == \"(\" {\n            openingCount -= 1\n        }\n    }\n\
    \    for closingIndex in 0..<closingCount {\n        let closingChar = closing[closingIndex]\n\
    \        if closingChar == \")\" {\n            openingCount += 1\n        } else\
    \ if closingChar == \"(\" {\n            closingCount += 1\n        }\n    }\n\
    \    return openingCount == closingCount\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4c1bf_3j.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp4c1bf_3j.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp4c1bf_3j.swift:15:33:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingCount\
    \ = brackets.characters.count\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp4c1bf_3j.swift:16:33: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingCount = brackets.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp4c1bf_3j.swift:18:27: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ openingChar = opening[openingIndex]\n                          ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4c1bf_3j.swift:26:27:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        let closingChar = closing[closingIndex]\n\
    \                          ^~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp4c1bf_3j.swift:13:9: warning: variable\
    \ 'opening' was never mutat"
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    var openingCount = brackets.characters.count\n    var closingCount = brackets.characters.count\n\
    \    var openingIndex = 0\n    var closingIndex = 0\n    while openingIndex <\
    \ openingCount {\n        opening = brackets.substringWithRange(NSMakeRange(openingIndex,\
    \ 1))\n        closing = brackets.substringWithRange(NSMakeRange(closingIndex,\
    \ 1))\n        if opening == \"(\" && closing == \")\" {\n            openingIndex++\n\
    \            closingIndex++\n        } else if opening == \"(\" && closing ==\
    \ \"(\" {\n            openingIndex++\n            closingIndex++\n        } else\
    \ if opening == \"(\" && closing == \"[\" {\n            openingIndex++\n    \
    \        closingIndex++\n        } else if opening == \"(\" && closing == \"]\"\
    \ {\n            openingIndex++\n            closingIndex++\n        } else if\
    \ opening == \"(\" && closing == \"{\" {\n            openingIndex++\n       \
    \     closingIndex++\n        } else if opening == \"(\" && closing == \"}\" {\n\
    \            openingIndex++\n            closingIndex++\n        } else if opening\
    \ == \"(\" && closing == \"<\" {\n            openingIndex++\n            closingIndex++\n\
    \        } else if opening == \"(\" && closing == \">\" {\n            openingIndex++\n\
    \            closingIndex++\n        } else if opening == \"(\" && closing ==\
    \ \"/\" {\n            openingIndex++\n            closingIndex++\n        } else\
    \ if opening == \"(\" && closing == \"|\" {\n            openingIndex++\n    \
    \        closingIndex++\n        } else if opening == \"(\" && closing == \"\\\
    \\\" {\n            openingIndex++\n            closingIndex++\n        } else\
    \ if opening == \"(\" && closing == \"?\" {\n            openingIndex++\n    \
    \        closingIndex++\n        } else if opening == \"(\" && closing == \"!\"\
    \ {\n            openingIndex++\n            closingIndex++\n        } else if\
    \ opening == \"(\" && closing == \"=\" && !(openingIndex == closingIndex + 1 &&\
    \ closingIndex == brackets.characters.count - 1) {\n            openingIndex++\n\
    \            closingIndex++\n        } else if opening == \"(\" && closing ==\
    \ \"-\" {\n            openingIndex++\n            closingIndex++\n        } else\
    \ if opening == \"(\" && closing == \"+\" {\n            openingIndex++\n    \
    \        closingIndex++\n        } else if opening == \"(\" && closing == \"*\"\
    \ {\n            openingIndex++\n            closingIndex++\n        } else if\
    \ opening == \"(\" && closing \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvm0opw0p.swift:73:44: error: expected '{' after 'if' condition\n\
    \        } else if opening == \"(\" && closing \n                            \
    \               ^\n/tmp/tmpvm0opw0p.swift:100:66: error: expected '}' at end of\
    \ brace statement\nassert(correct_bracketing(brackets: \"()()(()())()))()\") ==\
    \ false)\n                                                                 ^\n\
    /tmp/tmpvm0opw0p.swift:12:51: note: to match this opening '{'\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n                                                  ^\n/tmp/tmpvm0opw0p.swift:13:28:\
    \ error: 'characters' is unavailable: Please use String directly\n    var opening\
    \ = brackets.characters\n                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpvm0opw0p.swift:14:28: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closing = brackets.characters\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvm0opw0p.swift:15:33: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingCount = brackets.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvm0opw0p.swift:16:33: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingCount = brackets.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvm0opw0p.swift:20:47: error: cannot find 'NSMakeRange'\
    \ in scope\n        opening = brackets.substringWithRange(NSMakeRange(openingIndex,\
    \ 1))\n                                              ^~~~~~~~~~~\n/tmp/tmpvm0opw0p.swift:20:28:\
    \ error: value of type 'String' has no member 'substringW"
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: CharacterSet.openingParenthesis)\n\
    \    let closingBrackets = brackets.components(separatedBy: CharacterSet.closingParenthesis)\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0hbkafak.swift:13:60: error: cannot find 'CharacterSet' in scope\n\
    \    let openingBrackets = brackets.components(separatedBy: CharacterSet.openingParenthesis)\n\
    \                                                           ^~~~~~~~~~~~\n/tmp/tmp0hbkafak.swift:13:36:\
    \ error: value of type 'String' has no member 'components'\n    let openingBrackets\
    \ = brackets.components(separatedBy: CharacterSet.openingParenthesis)\n      \
    \                    ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp0hbkafak.swift:14:60: error:\
    \ cannot find 'CharacterSet' in scope\n    let closingBrackets = brackets.components(separatedBy:\
    \ CharacterSet.closingParenthesis)\n                                         \
    \                  ^~~~~~~~~~~~\n/tmp/tmp0hbkafak.swift:14:36: error: value of\
    \ type 'String' has no member 'components'\n    let closingBrackets = brackets.components(separatedBy:\
    \ CharacterSet.closingParenthesis)\n                          ~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm3fj981y.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpm3fj981y.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    var openingCount = brackets.characters.count\n    var closingCount = brackets.characters.count\n\
    \    var openingIndex = 0\n    var closingIndex = 0\n    var openingChar = opening[openingIndex]\n\
    \    var closingChar = closing[closingIndex]\n\n    while openingIndex < openingCount\
    \ {\n        openingIndex++\n        openingChar = opening[openingIndex]\n   \
    \     if openingChar == \")\" {\n            closingIndex++\n            closingChar\
    \ = closing[closingIndex]\n            if closingChar == \")\" {\n           \
    \     openingIndex++\n                openingChar = opening[openingIndex]\n  \
    \              if openingChar == \")\" {\n                    closingIndex++\n\
    \                    closingChar = closing[closingIndex]\n                   \
    \ if closingChar == \")\" {\n                        openingIndex++\n        \
    \                openingChar = opening[openingIndex]\n                       \
    \ if openingChar == \")\" {\n                            closingIndex++\n    \
    \                        closingChar = closing[closingIndex]\n               \
    \             if closingChar == \")\" {\n                                openingIndex++\n\
    \                                openingChar = opening[openingIndex]\n       \
    \                         if openingChar == \")\" {\n                        \
    \            closingIndex++\n                                    closingChar =\
    \ closing[closingIndex]\n                                    if closingChar ==\
    \ \")\" {\n                                        openingIndex++\n          \
    \                              openingChar = opening[openingIndex]\n         \
    \                               if openingChar == \")\" {\n                  \
    \                          closingIndex++\n                                  \
    \          closingChar = closing[closingIndex]\n                             \
    \               if closingChar == \")\" {\n                                  \
    \              openingIndex++\n                                              \
    \  openingChar = opening[openingIndex]\n                                     \
    \           if openingChar == \")\" {\n                                      \
    \              closingIndex++\n                                              \
    \      closingChar = closing[closingIndex]\n                                 \
    \                   if closingChar == \")\" {\n                              \
    \                          openingIndex++\n                                  \
    \                      openingChar = opening[openingIndex]\n                 \
    \                                       if openingChar == \")\" {\n          \
    \                                                  closingIndex++\n          \
    \                                                  closingChar = closing[closingIndex]\n\
    \                                                            if closingChar ==\
    \ \")\" {\n                                                                openingIndex++\n\
    \                                                                openingChar =\
    \ opening[openingIndex]\n                                                    \
    \            if openingChar == \")\" {\n                                     \
    \                               closingIndex++\n                             \
    \                                       closingChar = closing[closingIndex]\n\
    \                                                                    if closingChar\
    \ == \")\" {\n                                                               \
    \         openingIndex++\n                                                   \
    \                     openingChar = opening[openingIndex]\n                  \
    \                                                  }\n                       \
    \                                         }\n                                \
    \                            }\n                                             \
    \           }\n                                                    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa6l95_74.swift:104:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmpa6l95_74.swift:52:67:\
    \ note: to match this opening '{'\n                                          \
    \  if closingChar == \")\" {\n                                               \
    \                   ^\n/tmp/tmpa6l95_74.swift:104:66: error: expected '}' at end\
    \ of brace statement\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmpa6l95_74.swift:49:63: note: to match this opening '{'\n         \
    \                               if openingChar == \")\" {\n                  \
    \                                            ^\n/tmp/tmpa6l95_74.swift:104:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmpa6l95_74.swift:46:59: note: to match this opening\
    \ '{'\n                                    if closingChar == \")\" {\n       \
    \                                                   ^\n/tmp/tmpa6l95_74.swift:104:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmpa6l95_74.swift:43:55: note: to match this opening\
    \ '{'\n                                if openingChar == \")\" {\n           \
    \                                           ^\n/tmp/tmpa6l95_74.swift:104:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmpa6l95_74.swift:40:51: note: to match this opening\
    \ '{'\n                            if closingChar == \")\" {\n               \
    \                                   ^\n/tmp/tmpa6l95_74.swift:104:66: error: expected\
    \ '}' at end of brace statement\nassert(corr"
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm3fj981y.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpm3fj981y.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    var openingCount = brackets.characters.count\n    var closingCount = brackets.characters.count\n\
    \    var openingIndex = 0\n    var closingIndex = 0\n    while openingIndex <\
    \ openingCount {\n        opening = brackets.substringWithRange(NSMakeRange(openingIndex,\
    \ 1))\n        closing = brackets.substringWithRange(NSMakeRange(closingIndex,\
    \ 1))\n        if opening == \"(\" && closing == \")\" {\n            openingIndex++\n\
    \            closingIndex++\n        } else if opening == \"(\" && closing ==\
    \ \"(\" {\n            openingIndex++\n            closingIndex++\n        } else\
    \ if opening == \"(\" && closing == \"[\" {\n            openingIndex++\n    \
    \        closingIndex++\n        } else if opening == \"(\" && closing == \"]\"\
    \ {\n            openingIndex++\n            closingIndex++\n        } else if\
    \ opening == \"(\" && closing == \"{\" {\n            openingIndex++\n       \
    \     closingIndex++\n        } else if opening == \"(\" && closing == \"}\" {\n\
    \            openingIndex++\n            closingIndex++\n        } else if opening\
    \ == \"(\" && closing == \"<\" {\n            openingIndex++\n            closingIndex++\n\
    \        } else if opening == \"(\" && closing == \">\" {\n            openingIndex++\n\
    \            closingIndex++\n        } else if opening == \"(\" && closing ==\
    \ \"/\" {\n            openingIndex++\n            closingIndex++\n        } else\
    \ if opening == \"(\" && closing == \"%\" {\n            openingIndex++\n    \
    \        closingIndex++\n        } else if opening == \"(\" && closing == \"!\"\
    \ {\n            openingIndex++\n            closingIndex++\n        } else if\
    \ opening == \"(\" && closing == \"=\" && !(openingIndex == 0 && closingIndex\
    \ == openingCount) {\n            openingIndex++\n            closingIndex++\n\
    \        } else if opening == \"(\" && closing == \"-\" {\n            openingIndex++\n\
    \            closingIndex++\n        } else if opening == \"(\" && closing ==\
    \ \"+\" {\n            openingIndex++\n            closingIndex++\n        } else\
    \ if opening == \"(\" && closing == \"*\" {\n            openingIndex++\n    \
    \        closingIndex++\n        } else if opening == \"(\" && closing == \"?\"\
    \ {\n            openingIndex++\n            closingIndex++\n        } else if\
    \ opening == \"(\" && closing == \"|\" {\n            openingIndex++\n       \
    \     closingIndex++\n        } else if opening == \"(\" && closing == \"&\" {\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1naufor0.swift:101:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmp1naufor0.swift:19:39:\
    \ note: to match this opening '{'\n    while openingIndex < openingCount {\n \
    \                                     ^\n/tmp/tmp1naufor0.swift:101:66: error:\
    \ expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmp1naufor0.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmp1naufor0.swift:13:28: error: 'characters'\
    \ is unavailable: Please use String directly\n    var opening = brackets.characters\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1naufor0.swift:14:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing = brackets.characters\n        \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp1naufor0.swift:15:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingCount = brackets.characters.count\n    \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1naufor0.swift:16:33: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingCount = brackets.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1naufor0.swift:20:47: error: cannot find 'NSMakeRange'\
    \ in scope\n        opening = brackets.s"
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        switch brackets[openingBracketIndex]\
    \ {\n        case \"(\":\n            openingBracketCount += 1\n        case \"\
    [\":\n            openingBracketCount += 1\n        case \"{\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"}\":\n            openingBracketCount += 1\n        case \"[\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"(\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"(\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"(\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"(\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"(\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"(\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"(\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracket\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcnm4re9z.swift:119:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmpcnm4re9z.swift:19:51:\
    \ note: to match this opening '{'\n    while openingBracketIndex < brackets.endIndex\
    \ {\n                                                  ^\n/tmp/tmpcnm4re9z.swift:119:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmpcnm4re9z.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpcnm4re9z.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcnm4re9z.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcnm4re9z.swift:92:13: error: cannot find 'openingBracket'\
    \ in scope\n            openingBracket\n            ^~~~~~~~~~~~~~\n/tmp/tmpcnm4re9z.swift:27:14:\
    \ warning: literal value is already handled by previous pattern; consider removing\
    \ it\n        case \"(\":\n             ^~~\n/tmp/tmpcnm4re9z.swift:21:14: note:\
    \ first occurrence of identical literal pattern is here\n        case \"(\":\n\
    \             ^~~\n/tmp/tmpcnm4re9z.swift:31:14: warning: literal value is already\
    \ handled by previous pattern; consider removing it\n        case \"[\":\n   \
    \          ^~~\n/tmp/tmpcnm4re9z.swift:23:14: note: first occurrence of identical\
    \ literal pattern is here\n        case \"[\":\n          "
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    var openingCount = brackets.characters.count\n    var closingCount = brackets.characters.count\n\
    \    var openingIndex = 0\n    var closingIndex = 0\n    while openingIndex <\
    \ openingCount {\n        opening = brackets.substringWithRange(NSMakeRange(openingIndex,\
    \ 1))\n        closing = brackets.substringWithRange(NSMakeRange(closingIndex,\
    \ 1))\n        if opening == closing {\n            openingIndex++\n         \
    \   closingIndex++\n        } else {\n            if opening == \"(\" {\n    \
    \            openingIndex++\n                closingIndex++\n            } else\
    \ {\n                if closing == \")\" {\n                    openingIndex++\n\
    \                    closingIndex++\n                } else {\n              \
    \      if opening == \"(\" {\n                        openingIndex++\n       \
    \                 closingIndex++\n                    } else {\n             \
    \           if closing == \")\" {\n                            openingIndex++\n\
    \                            closingIndex++\n                        } else {\n\
    \                            if opening == \"(\" {\n                         \
    \       openingIndex++\n                                closingIndex++\n     \
    \                       } else {\n                                if closing ==\
    \ \")\" {\n                                    openingIndex++\n              \
    \                      closingIndex++\n                                } else\
    \ {\n                                    if opening == \"(\" {\n             \
    \                           openingIndex++\n                                 \
    \       closingIndex++\n                                    } else {\n       \
    \                                 if closing == \")\" {\n                    \
    \                        openingIndex++\n                                    \
    \        closingIndex++\n                                        } else {\n  \
    \                                          if opening == \"(\" {\n           \
    \                                     openingIndex++\n                       \
    \                         closingIndex++\n                                   \
    \         } else {\n                                                if closing\
    \ == \")\" {\n                                                    openingIndex++\n\
    \                                                    closingIndex++\n        \
    \                                        }\n                                 \
    \           }\n                                        }\n                   \
    \                 }\n                                }\n                     \
    \       }\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    return openingIndex == closingIndex\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptk9aenzd.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmptk9aenzd.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmptk9aenzd.swift:15:33:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingCount\
    \ = brackets.characters.count\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmptk9aenzd.swift:16:33: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingCount = brackets.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptk9aenzd.swift:20:47: error: cannot find 'NSMakeRange'\
    \ in scope\n        opening = brackets.substringWithRange(NSMakeRange(openingIndex,\
    \ 1))\n                                              ^~~~~~~~~~~\n/tmp/tmptk9aenzd.swift:20:28:\
    \ error: value of type 'String' has no member 'substringWithRange'\n        opening\
    \ = brackets.substringWithRange(NSMakeRange(openingIndex, 1))\n              \
    \    ~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmptk9aenzd.swift:21:47: error: cannot\
    \ find 'NSMakeRange' in scope\n        closing = brackets.substringWithRange(NSMakeRange(closingIndex,\
    \ 1))\n                                              ^~~~~~~~~~~\n/tmp/tmptk9aenzd.swift:21:28:\
    \ error: value of type 'String' has no member 'substringWithRange'\n        closing\
    \ = brackets.substringWithRange(NSMakeRange(closingIndex, 1))\n              \
    \    ~~~~~~~~ ^"
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketCount = brackets.characters.count\n    var closingBracketCount\
    \ = brackets.characters.count\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n\n    while openingBracketIndex < openingBracketCount {\n        openingBracketIndex\
    \ = openingBrackets.firstIndex(of: \"(\", at: openingBracketIndex)\n        if\
    \ openingBracketIndex == nil {\n            break\n        }\n        openingBracketIndex\
    \ = openingBrackets.firstIndex(of: \"(\", at: openingBracketIndex!.successor())\n\
    \        if openingBracketIndex == nil {\n            break\n        }\n     \
    \   openingBracketCount = openingBracketIndex!.successor() - openingBracketIndex!.predecessor()\n\
    \    }\n\n    while closingBracketIndex < closingBracketCount {\n        closingBracketIndex\
    \ = closingBrackets.firstIndex(of: \")\", at: closingBracketIndex)\n        if\
    \ closingBracketIndex == nil {\n            break\n        }\n        closingBracketIndex\
    \ = closingBrackets.firstIndex(of: \")\", at: closingBracketIndex!.successor())\n\
    \        if closingBracketIndex == nil {\n            break\n        }\n     \
    \   closingBracketCount = closingBracketIndex!.successor() - closingBracketIndex!.predecessor()\n\
    \    }\n\n    return openingBracketCount == closingBracketCount\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw8_p31q1.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpw8_p31q1.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpw8_p31q1.swift:15:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpw8_p31q1.swift:16:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpw8_p31q1.swift:21:47: error: cannot assign value of\
    \ type 'String.Index?' to type 'Int'\n        openingBracketIndex = openingBrackets.firstIndex(of:\
    \ \"(\", at: openingBracketIndex)\n                              ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpw8_p31q1.swift:21:71: error: extra argument 'at' in call\n        openingBracketIndex\
    \ = openingBrackets.firstIndex(of: \"(\", at: openingBracketIndex)\n         \
    \                                               ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpw8_p31q1.swift:22:32: warning: comparing non-optional value of type 'Int'\
    \ to 'nil' always returns false\n        if openingBracketIndex == nil {\n   \
    \        ~~~~~~~~~~~~~~~~~~~ ^  ~~~\n/tmp/tmpw8_p31q1.swift:25:47: error: cannot\
    \ assign val"
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        let openingBracket = openingBrackets[i]\n\
    \        let closingBracket = closingBrackets[i]\n        if openingBracket !=\
    \ closingBracket {\n            return false\n        }\n    }\n    \n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppj5xq286.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmppj5xq286.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        if openingBracket\
    \ == \"(\" {\n            openingBracketIndex += 1\n            if openingBracketIndex\
    \ < brackets.endIndex {\n                openingBracket = brackets[openingBracketIndex]\n\
    \            }\n            openingBrackets.append(openingBracket)\n        }\
    \ else if openingBracket == \")\" {\n            openingBracketIndex += 1\n  \
    \          if openingBracketIndex < brackets.endIndex {\n                openingBracket\
    \ = brackets[openingBracketIndex]\n            }\n            closingBrackets.append(openingBracket)\n\
    \        } else {\n            return false\n        }\n    }\n\n    while closingBracketIndex\
    \ < brackets.endIndex {\n        let closingBracket = brackets[closingBracketIndex]\n\
    \        if closingBracket == \"(\" {\n            closingBracketIndex += 1\n\
    \            if closingBracketIndex < brackets.endIndex {\n                closingBracket\
    \ = brackets[closingBracketIndex]\n            }\n            openingBrackets.append(closingBracket)\n\
    \        } else if closingBracket == \")\" {\n            closingBracketIndex\
    \ += 1\n            if closingBracketIndex < brackets.endIndex {\n           \
    \     closingBracket = brackets[closingBracketIndex]\n            }\n        \
    \    closingBrackets.append(closingBracket)\n        } else {\n            return\
    \ false\n        }\n    }\n\n    return openingBrackets.count == closingBrackets.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpolqazjta.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpolqazjta.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpolqazjta.swift:21:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpolqazjta.swift:23:17: error:\
    \ cannot assign to value: 'openingBracket' is a 'let' constant\n             \
    \   openingBracket = brackets[openingBracketIndex]\n                ^~~~~~~~~~~~~~\n\
    /tmp/tmpolqazjta.swift:19:9: note: change 'let' to 'var' to make it mutable\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        ^~~\n   \
    \     var\n/tmp/tmpolqazjta.swift:27:33: error: binary operator '+=' cannot be\
    \ applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpolqazjta.swift:29:17: error:\
    \ cannot assign to value: 'openingBracket' is a 'let' constant\n             \
    \   openingBracket = brackets[openingBracketIndex]\n                ^~~~~~~~~~~~~~\n\
    /tmp/tmpolqazjta.swift:19:9: note: change 'let' to 'var' to make it mutable\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        ^~~\n   \
    \     var\n/tmp/tmpolqazjta.swift:40:33: error: binary operator '+=' cannot be\
    \ applied to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpolqazjta.swift:42:17: error:\
    \ cannot assign to value: 'closingBracket' is a 'let' constant\n             \
    \   closingBracket = brac"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var bracketStack = [String]()\n    var bracketCount = 0\n    for char in\
    \ brackets {\n        if char == \"(\" {\n            bracketStack.append(char)\n\
    \            bracketCount += 1\n        } else if char == \")\" {\n          \
    \  if bracketCount > 0 {\n                bracketCount -= 1\n            } else\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ bracketCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpf81iiwca.swift:17:33: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            bracketStack.append(char)\n\
    \                                ^\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    for openingBracket in openingBrackets {\n        if closingBrackets.contains(openingBracket)\
    \ {\n            closingBrackets.remove(openingBracket)\n        } else {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa5i80_gv.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpa5i80_gv.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpa5i80_gv.swift:18:29: error: no exact matches in call\
    \ to instance method 'remove'\n            closingBrackets.remove(openingBracket)\n\
    \                            ^\n/tmp/tmpa5i80_gv.swift:18:29: note: candidate\
    \ expects value of type 'String.Index' for parameter #1 (got 'Character')\n  \
    \          closingBrackets.remove(openingBracket)\n                          \
    \  ^\n/tmp/tmpa5i80_gv.swift:18:29: note: candidate expects value of type 'String.Index'\
    \ for parameter #1 (got 'Character')\n            closingBrackets.remove(openingBracket)\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var bracketsStack = [String]()\n    var bracketsStackCopy = [String]()\n\
    \    var bracketsStackCopy2 = []\n    var bracketsStackCopy3 = []\n    var bracketsStackCopy4\
    \ = []\n    var bracketsStackCopy5 = []\n    var bracketsStackCopy6 = []\n   \
    \ var bracketsStackCopy7 = []\n    var bracketsStackCopy8 = []\n    var bracketsStackCopy9\
    \ = []\n    var bracketsStackCopy10 = []\n    var bracketsStackCopy11 = []\n \
    \   var bracketsStackCopy12 = []\n    var bracketsStackCopy13 = []\n    var bracketsStackCopy14\
    \ = []\n    var bracketsStackCopy15 = []\n    var bracketsStackCopy16 = []\n \
    \   var bracketsStackCopy17 = []\n    var bracketsStackCopy18 = []\n    var bracketsStackCopy19\
    \ = []\n    var bracketsStackCopy20 = []\n    var bracketsStackCopy21 = []\n \
    \   var bracketsStackCopy22 = []\n    var bracketsStackCopy23 = []\n    var bracketsStackCopy24\
    \ = []\n    var bracketsStackCopy25 = []\n    var bracketsStackCopy26 = []\n \
    \   var bracketsStackCopy27 = []\n    var bracketsStackCopy28 = []\n    var bracketsStackCopy29\
    \ = []\n    var bracketsStackCopy30 = []\n    var bracketsStackCopy31 = []\n \
    \   var bracketsStackCopy32 = []\n    var bracketsStackCopy33 = []\n    var bracketsStackCopy34\
    \ = []\n    var bracketsStackCopy35 = []\n    var bracketsStackCopy36 = []\n \
    \   var bracketsStackCopy37 = []\n    var bracketsStackCopy38 = []\n    var bracketsStackCopy39\
    \ = []\n    var bracketsStackCopy40 = []\n    var bracketsStackCopy41 = []\n \
    \   var bracketsStackCopy42 = []\n    var bracketsStackCopy43 = []\n    var bracketsStackCopy44\
    \ = []\n    var bracketsStackCopy45 = []\n    var bracketsStackCopy46 = []\n \
    \   var bracketsStackCopy47 = []\n    var bracketsStackCopy48 = []\n    var bracketsStackCopy49\
    \ = []\n    var bracketsStackCopy50 = []\n    var bracketsStackCopy51 = []\n \
    \   var bracketsStackCopy52 = []\n    var bracketsStackCopy53 = []\n    var bracketsStackCopy54\
    \ = []\n    var bracketsStackCopy55 = []\n    var bracketsStackCopy56 = []\n \
    \   var bracketsStackCopy57 = []\n    var bracketsStackCopy58 = []\n    var bracketsStackCopy59\
    \ = []\n    var bracketsStackCopy60 = []\n    var bracketsStackCopy61 = []\n \
    \   var bracket\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjnls395t.swift:15:30: error: empty collection literal requires\
    \ an explicit type\n    var bracketsStackCopy2 = []\n                        \
    \     ^~\n/tmp/tmpjnls395t.swift:16:30: error: empty collection literal requires\
    \ an explicit type\n    var bracketsStackCopy3 = []\n                        \
    \     ^~\n/tmp/tmpjnls395t.swift:17:30: error: empty collection literal requires\
    \ an explicit type\n    var bracketsStackCopy4 = []\n                        \
    \     ^~\n/tmp/tmpjnls395t.swift:18:30: error: empty collection literal requires\
    \ an explicit type\n    var bracketsStackCopy5 = []\n                        \
    \     ^~\n/tmp/tmpjnls395t.swift:19:30: error: empty collection literal requires\
    \ an explicit type\n    var bracketsStackCopy6 = []\n                        \
    \     ^~\n/tmp/tmpjnls395t.swift:20:30: error: empty collection literal requires\
    \ an explicit type\n    var bracketsStackCopy7 = []\n                        \
    \     ^~\n/tmp/tmpjnls395t.swift:21:30: error: empty collection literal requires\
    \ an explicit type\n    var bracketsStackCopy8 = []\n                        \
    \     ^~\n/tmp/tmpjnls395t.swift:22:30: error: empty collection literal requires\
    \ an explicit type\n    var bracketsStackCopy9 = []\n                        \
    \     ^~\n/tmp/tmpjnls395t.swift:23:31: error: empty collection literal requires\
    \ an explicit type\n    var bracketsStackCopy10 = []\n                       \
    \       ^~\n/tmp/tmpjnls395t.swift:24:31: error: empty collection literal requires\
    \ an explicit type\n    var bracketsStackCopy11 = []\n                       \
    \       ^~\n/tmp/tmpjnls395t.swift:25:31: error: empty collection literal requires\
    \ an explicit type\n    var bracketsStackCopy12 = []\n                       \
    \       ^~\n/tmp/tmpjnls395t.swift:26:31: error: empty collection literal requires\
    \ an explicit type\n    var bracketsStackCopy13 = []\n                       \
    \       ^~\n/tmp/tmpjnls395t.swift:27:31: error: empty collection literal requires\
    \ an explicit type\n    var bracketsStackCopy14 = []\n                       \
    \       ^~\n/tmp/tmpjnls395t.swift:28:31: error: empty collection literal "
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    var openingIndex = 0\n    var closingIndex = 0\n    while openingIndex <\
    \ opening.count {\n        openingIndex++\n        if opening[openingIndex] ==\
    \ '(' {\n            opening.removeSubrange(openingIndex, opening.count - openingIndex)\n\
    \            openingIndex--\n        }\n    }\n    while closingIndex < closing.count\
    \ {\n        closingIndex++\n        if closing[closingIndex] == ')' {\n     \
    \       closing.removeSubrange(closingIndex, closing.count - closingIndex)\n \
    \           closingIndex--\n        }\n    }\n    return opening.count == closing.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps4_opagk.swift:19:37: error: single-quoted string literal found,\
    \ use '\"'\n        if opening[openingIndex] == '(' {\n                      \
    \              ^~~\n                                    \"(\"\n/tmp/tmps4_opagk.swift:26:37:\
    \ error: single-quoted string literal found, use '\"'\n        if closing[closingIndex]\
    \ == ')' {\n                                    ^~~\n                        \
    \            \")\"\n/tmp/tmps4_opagk.swift:13:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    var opening = brackets.characters\n        \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmps4_opagk.swift:14:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var closing = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmps4_opagk.swift:18:21: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n        openingIndex++\n                    ^~\n/tmp/tmps4_opagk.swift:19:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if opening[openingIndex] == '(' {\n   \
    \        ^~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmps4_opagk.swift:20:21: error: no exact matches\
    \ in call to instance method 'removeSubrange'\n            opening.removeSubrange(openingIndex,\
    \ opening.count - openingIndex)\n                    ^\n/tmp/tmps4_opagk.swift:20:21:\
    \ note: candidate has partially matching parameter list (Range<String.Index>)\n\
    \            opening.removeSubrange(openingIndex, opening.count - openingIndex)\n\
    \                    ^\n/tmp/tmps4_opagk.swift:20:21: note: candidate has partially\
    \ matching parameter list (Range<String.Index>)\n            opening.removeSubrange(open"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n    openingBrackets.reverse()\n\
    \    closingBrackets.reverse()\n    for openingBracket in openingBrackets {\n\
    \        if closingBrackets.contains(openingBracket) {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpys3i1xt8.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpys3i1xt8.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpys3i1xt8.swift:17:21: error: value of type 'String'\
    \ has no member 'reverse'\n    openingBrackets.reverse()\n    ~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n/tmp/tmpys3i1xt8.swift:18:21: error: value of type 'String' has no\
    \ member 'reverse'\n    closingBrackets.reverse()\n    ~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n    for\
    \ openingBracket in openingBrackets {\n        if closingBrackets.contains(openingBracket)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbffu247q.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbffu247q.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    let openingBracketCount = openingBrackets.count\n\
    \    let closingBracketCount = closingBrackets.count\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        let closingBracketIndex = openingBrackets.firstIndex(of:\
    \ openingBracket)\n        if closingBracketIndex == nil {\n            return\
    \ false\n        }\n        let closingBracket = openingBrackets[closingBracketIndex!]\n\
    \        if openingBracket != closingBracket {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp69nv9p30.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp69nv9p30.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    let openingBracketCount = openingBrackets.count\n\
    \    let closingBracketCount = closingBrackets.count\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        let closingBracketIndex = openingBrackets.firstIndex(of:\
    \ openingBracket)\n        if closingBracketIndex == nil {\n            return\
    \ false\n        }\n        let closingBracket = openingBrackets[closingBracketIndex!]\n\
    \        if openingBracket != closingBracket {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp69nv9p30.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp69nv9p30.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    return openingBrackets.count\
    \ == closingBrackets.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfbz4cdko.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpfbz4cdko.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var bracketCount = 0\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    for character in brackets {\n        switch character {\n        case\
    \ \")\":\n            closingBracketCount++\n        case \")\":\n           \
    \ bracketCount++\n        case \"(\":\n            openingBracketCount++\n   \
    \     case \"(\":\n            bracketCount++\n        default:\n            break\n\
    \        }\n    }\n    if bracketCount != openingBracketCount {\n        return\
    \ false\n    }\n    if bracketCount != closingBracketCount {\n        return false\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4sub32wt.swift:19:32: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            closingBracketCount++\n                  \
    \             ^~\n/tmp/tmp4sub32wt.swift:21:25: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            bracketCount++\n               \
    \         ^~\n/tmp/tmp4sub32wt.swift:23:32: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n            openingBracketCount++\n           \
    \                    ^~\n/tmp/tmp4sub32wt.swift:25:25: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            bracketCount++\n          \
    \              ^~\n/tmp/tmp4sub32wt.swift:20:14: warning: literal value is already\
    \ handled by previous pattern; consider removing it\n        case \")\":\n   \
    \          ^~~\n/tmp/tmp4sub32wt.swift:18:14: note: first occurrence of identical\
    \ literal pattern is here\n        case \")\":\n             ^~~\n/tmp/tmp4sub32wt.swift:24:14:\
    \ warning: literal value is already handled by previous pattern; consider removing\
    \ it\n        case \"(\":\n             ^~~\n/tmp/tmp4sub32wt.swift:22:14: note:\
    \ first occurrence of identical literal pattern is here\n        case \"(\":\n\
    \             ^~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    let openingBracketCount = openingBrackets.count\n\
    \    let closingBracketCount = closingBrackets.count\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n    if openingBracketCount\
    \ == 0 {\n        return true\n    }\n    let openingBracket = openingBrackets[0]\n\
    \    let closingBracket = closingBrackets[0]\n    if openingBracket != closingBracket\
    \ {\n        return false\n    }\n    return correct_bracketing(openingBrackets.dropFirst())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9mx4u7_7.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp9mx4u7_7.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp9mx4u7_7.swift:28:31: error: missing argument label 'brackets:'\
    \ in call\n    return correct_bracketing(openingBrackets.dropFirst())\n      \
    \                        ^\n                              brackets: \n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = brackets.characters.count\n\
    \n    while openingBracketIndex < brackets.endIndex {\n        openingBracketCount\
    \ -= 1\n        if openingBracketCount < 0 {\n            openingBracketIndex\
    \ = brackets.startIndex\n            openingBracketCount = brackets.characters.count\n\
    \        }\n        if openingBrackets[openingBracketIndex] == '(' {\n       \
    \     openingBracketIndex += 1\n            openingBracketCount += 1\n       \
    \ } else if openingBrackets[openingBracketIndex] == ')' {\n            openingBracketIndex\
    \ += 1\n            openingBracketCount -= 1\n        }\n    }\n\n    while closingBracketIndex\
    \ < brackets.endIndex {\n        closingBracketCount += 1\n        if closingBracketCount\
    \ > 0 {\n            closingBracketIndex += 1\n            closingBracketCount\
    \ -= 1\n        }\n        if closingBrackets[closingBracketIndex] == '(' {\n\
    \            closingBracketIndex += 1\n            closingBracketCount += 1\n\
    \        } else if closingBrackets[closingBracketIndex] == ')' {\n           \
    \ closingBracketIndex += 1\n            closingBracketCount -= 1\n        }\n\
    \    }\n\n    return openingBracketIndex == closingBracketIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm7m45k84.swift:25:52: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketIndex] == '(' {\n       \
    \                                            ^~~\n                           \
    \                        \"(\"\n/tmp/tmpm7m45k84.swift:28:59: error: single-quoted\
    \ string literal found, use '\"'\n        } else if openingBrackets[openingBracketIndex]\
    \ == ')' {\n                                                          ^~~\n  \
    \                                                        \")\"\n/tmp/tmpm7m45k84.swift:40:52:\
    \ error: single-quoted string literal found, use '\"'\n        if closingBrackets[closingBracketIndex]\
    \ == '(' {\n                                                   ^~~\n         \
    \                                          \"(\"\n/tmp/tmpm7m45k84.swift:43:59:\
    \ error: single-quoted string literal found, use '\"'\n        } else if closingBrackets[closingBracketIndex]\
    \ == ')' {\n                                                          ^~~\n  \
    \                                                        \")\"\n/tmp/tmpm7m45k84.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpm7m45k84.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpm7m45k84.swift:17:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpm7m45k84.swift:23:44: error: 'characters' is unavaila"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    var openingCount = brackets.characters.count\n    var closingCount = brackets.characters.count\n\
    \    var openingIndex = 0\n    var closingIndex = 0\n    while openingIndex <\
    \ openingCount {\n        opening = brackets[openingIndex..<openingIndex].characters\n\
    \        openingIndex += 1\n        if opening.isEmpty {\n            continue\n\
    \        }\n        if opening.first == \"(\" {\n            if openingIndex <\
    \ openingCount {\n                opening = brackets[openingIndex..<openingIndex].characters\n\
    \                openingIndex += 1\n            }\n            if opening.first\
    \ == \"(\" {\n                openingCount += 1\n                openingIndex\
    \ += 1\n            } else {\n                openingCount -= 1\n            }\n\
    \        } else {\n            openingCount -= 1\n        }\n    }\n    while\
    \ closingIndex < closingCount {\n        closing = brackets[closingIndex..<closingIndex].characters\n\
    \        closingIndex += 1\n        if closing.isEmpty {\n            continue\n\
    \        }\n        if closing.first == \")\" {\n            if closingIndex <\
    \ closingCount {\n                closing = brackets[closingIndex..<closingIndex].characters\n\
    \                closingIndex += 1\n            }\n            if closing.first\
    \ == \")\" {\n                closingCount += 1\n                closingIndex\
    \ += 1\n            } else {\n                closingCount -= 1\n            }\n\
    \        } else {\n            closingCount -= 1\n        }\n    }\n    return\
    \ openingCount == closingCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjo0hppg0.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpjo0hppg0.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpjo0hppg0.swift:15:33:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingCount\
    \ = brackets.characters.count\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpjo0hppg0.swift:16:33: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingCount = brackets.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpjo0hppg0.swift:20:19: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an integer range, use a String.Index range instead.\n\
    \        opening = brackets[openingIndex..<openingIndex].characters\n        \
    \          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript<R>(bounds:\
    \ R) -> String where R : RangeExpression, R.Bound == Int { get }\n           ^\n\
    /tmp/tmpjo0hppg0.swift:20:57: error: 'characters' is unavailable: Please use String\
    \ directly\n        opening = brackets[openingIndex..<openingIndex].characters\n\
    \                                                        ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tm"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n    openingBrackets.reverse()\n\
    \    closingBrackets.reverse()\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n    while openingBracketsIndex < openingBrackets.count {\n        if closingBrackets[closingBracketsIndex]\
    \ == openingBrackets[openingBracketsIndex] {\n            openingBracketsIndex\
    \ += 1\n            closingBracketsIndex += 1\n        } else {\n            if\
    \ openingBrackets[openingBracketsIndex] == \")\" {\n                openingBracketsIndex\
    \ += 1\n            } else {\n                return false\n            }\n  \
    \      }\n    }\n    return openingBracketsIndex == closingBracketsIndex\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptmod0nzv.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptmod0nzv.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptmod0nzv.swift:17:21: error: value of type 'String'\
    \ has no member 'reverse'\n    openingBrackets.reverse()\n    ~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n/tmp/tmptmod0nzv.swift:18:21: error: value of type 'String' has no\
    \ member 'reverse'\n    closingBrackets.reverse()\n    ~~~~~~~~~~~~~~~ ^~~~~~~\n\
    /tmp/tmptmod0nzv.swift:22:12: error: 'subscript(_:)' is unavailable: cannot subscript\
    \ String with an Int, use a String.Index instead.\n        if closingBrackets[closingBracketsIndex]\
    \ == openingBrackets[openingBracketsIndex] {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptmod0nzv.swift:22:53:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if closingBrackets[closingBracketsIndex]\
    \ == openingBrackets[openingBracketsIndex] {\n                               \
    \                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptmod0nzv.swift:26:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            if openingBrackets[openingBracketsIndex]\
    \ == \")\" {\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSw"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for openingBracket in openingBrackets {\n\
    \        if !closingBrackets.contains(where: { $0 == openingBracket }) {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkg29ckh1.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpkg29ckh1.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    let openingBracketCount = openingBrackets.count\n\
    \    let closingBracketCount = closingBrackets.count\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        if let closingBracket = closingBrackets.firstIndex(of:\
    \ openingBracket) {\n            closingBrackets.remove(at: closingBracket)\n\
    \        }\n    }\n    return openingBrackets.count == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_6ewir0h.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp_6ewir0h.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    let openingBracketCount = openingBrackets.count\n\
    \    let closingBracketCount = closingBrackets.count\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        let closingBracketIndex = openingBrackets.firstIndex(of:\
    \ openingBracket)\n        if closingBracketIndex == nil {\n            return\
    \ false\n        }\n        let closingBracket = openingBrackets[closingBracketIndex!]\n\
    \        if openingBracket != closingBracket {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp69nv9p30.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp69nv9p30.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    while openingBracketIndex < brackets.endIndex {\n\
    \        openingBracketIndex = openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex]\
    \ != \")\" {\n            return false\n        }\n        openingBracketIndex\
    \ = openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex] !=\
    \ \")\" {\n            return false\n        }\n        openingBracketIndex =\
    \ openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex] !=\
    \ \")\" {\n            return false\n        }\n        openingBracketIndex =\
    \ openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex] !=\
    \ \")\" {\n            return false\n        }\n        openingBracketIndex =\
    \ openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex] !=\
    \ \")\" {\n            return false\n        }\n        openingBracketIndex =\
    \ openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex] !=\
    \ \")\" {\n            return false\n        }\n        openingBracketIndex =\
    \ openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex] !=\
    \ \")\" {\n            return false\n        }\n        openingBracketIndex =\
    \ openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex] !=\
    \ \")\" {\n            return false\n        }\n        openingBracketIndex =\
    \ openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex] !=\
    \ \")\" {\n            return false\n        }\n        openingBracketIndex =\
    \ openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex] !=\
    \ \")\" {\n            return false\n        }\n        openingBracketIndex =\
    \ openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex] !=\
    \ \")\" {\n            return false\n        }\n        openingBracketIndex =\
    \ openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex] !=\
    \ \")\" {\n            return false\n        }\n        openingBracketIndex =\
    \ openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex] !=\
    \ \")\" {\n            return false\n        }\n        openingBracketIndex =\
    \ openingBracketIndex + 1\n        if openingBra\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcfj_4_tk.swift:71:22: error: expected '{' after 'if' condition\n\
    \        if openingBra\n                     ^\n/tmp/tmpcfj_4_tk.swift:98:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmpcfj_4_tk.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpcfj_4_tk.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcfj_4_tk.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcfj_4_tk.swift:18:51: error: binary operator '+' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ = openingBracketIndex + 1\n                              ~~~~~~~~~~~~~~~~~~~\
    \ ^ ~\n/tmp/tmpcfj_4_tk.swift:18:51: note: overloads for '+' exist with these\
    \ partially matching parameter lists: (Int, Int)\n        openingBracketIndex\
    \ = openingBracketIndex + 1\n                                                \
    \  ^\n/tmp/tmpcfj_4_tk.swift:22:51: error: binary operator '+' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n        openingBracketIndex =\
    \ openingBracketIndex + 1\n                              ~~~~~~~~~~~~~~~~~~~ ^\
    \ ~\n/tmp/tmpcfj_4_tk.swift:22:51: note: overloads for '+' exist with these partially\
    \ matching parameter lists: (Int, Int)\n        openingBracketIndex = openingBracketIndex\
    \ + 1\n                                                  ^\n/tmp/tmpcfj_4_tk.swift:26:5"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n\n    while openingBracketsIndex < openingBracketsCount {\n        openingBracketsIndex\
    \ += 1\n        if openingBrackets[openingBracketsIndex] == '(' {\n          \
    \  openingBracketsCount -= 1\n            openingBrackets[openingBracketsIndex]\
    \ = ')'\n            closingBracketsCount += 1\n            closingBrackets[closingBracketsIndex]\
    \ = '('\n        }\n    }\n\n    while closingBracketsIndex < closingBracketsCount\
    \ {\n        closingBracketsIndex += 1\n        if closingBrackets[closingBracketsIndex]\
    \ == ')' {\n            closingBracketsCount -= 1\n            openingBracketsCount\
    \ += 1\n            openingBrackets[openingBracketsIndex] = '('\n            closingBrackets[closingBracketsIndex]\
    \ = ')'\n        }\n    }\n\n    return openingBracketsCount == closingBracketsCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpph0agme5.swift:22:53: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketsIndex] == '(' {\n      \
    \                                              ^~~\n                         \
    \                           \"(\"\n/tmp/tmpph0agme5.swift:24:53: error: single-quoted\
    \ string literal found, use '\"'\n            openingBrackets[openingBracketsIndex]\
    \ = ')'\n                                                    ^~~\n           \
    \                                         \")\"\n/tmp/tmpph0agme5.swift:26:53:\
    \ error: single-quoted string literal found, use '\"'\n            closingBrackets[closingBracketsIndex]\
    \ = '('\n                                                    ^~~\n           \
    \                                         \"(\"\n/tmp/tmpph0agme5.swift:32:53:\
    \ error: single-quoted string literal found, use '\"'\n        if closingBrackets[closingBracketsIndex]\
    \ == ')' {\n                                                    ^~~\n        \
    \                                            \")\"\n/tmp/tmpph0agme5.swift:35:53:\
    \ error: single-quoted string literal found, use '\"'\n            openingBrackets[openingBracketsIndex]\
    \ = '('\n                                                    ^~~\n           \
    \                                         \"(\"\n/tmp/tmpph0agme5.swift:36:53:\
    \ error: single-quoted string literal found, use '\"'\n            closingBrackets[closingBracketsIndex]\
    \ = ')'\n                                                    ^~~\n           \
    \                                         \")\"\n/tmp/tmpph0agme5.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpph0agme5.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted "
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for openingBracket\
    \ in openingBrackets {\n        let closingBracket = closingBrackets.firstIndex(of:\
    \ openingBracket)\n        if closingBracket == nil {\n            return false\n\
    \        }\n        \n        if openingBracket != closingBracket! {\n       \
    \     return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9k8gd4fy.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp9k8gd4fy.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters.reversed().map { String($0) }\n    var\
    \ closing = brackets.characters.reversed().map { String($0) }\n    opening.removeLast()\n\
    \    closing.removeLast()\n    opening.removeFirst()\n    closing.removeFirst()\n\
    \    opening.removeFirst()\n    closing.removeFirst()\n    opening.removeFirst()\n\
    \    closing.removeFirst()\n    opening.removeFirst()\n    closing.removeFirst()\n\
    \    opening.removeFirst()\n    closing.removeFirst()\n    opening.removeFirst()\n\
    \    closing.removeFirst()\n    opening.removeFirst()\n    closing.removeFirst()\n\
    \    opening.removeFirst()\n    closing.removeFirst()\n    opening.removeFirst()\n\
    \    closing.removeFirst()\n    opening.removeFirst()\n    closing.removeFirst()\n\
    \    opening.removeFirst()\n    closing.removeFirst()\n    opening.removeFirst()\n\
    \    closing.removeFirst()\n    opening.removeFirst()\n    closing.removeFirst()\n\
    \    opening.removeFirst()\n    closing.removeFirst()\n    opening.removeFirst()\n\
    \    closing.removeFirst()\n    opening.removeFirst()\n    closing.removeFirst()\n\
    \    opening.removeFirst()\n    closing.removeFirst()\n    opening.removeFirst()\n\
    \    closing.removeFirst()\n    opening.removeFirst()\n    closing.removeFirst()\n\
    \    opening.removeFirst()\n    closing.removeFirst()\n    opening.removeFirst()\n\
    \    closing.removeFirst()\n    opening.removeFirst()\n    closing.removeFirst()\n\
    \    opening.removeFirst()\n    closing.removeFirst()\n    opening.removeFirst()\n\
    \    closing.removeFirst()\n    opening.removeFirst()\n    closing.removeFirst()\n\
    \    opening.removeFirst()\n    closing.removeFirst()\n    opening.removeFirst()\n\
    \    closing.removeFirst()\n    opening.removeFirst()\n    closing.removeFirst()\n\
    \    opening.removeFirst()\n    closing.removeFirst()\n    opening.removeFirst()\n\
    \    closing.removeFirst()\n    opening.removeFirst()\n    closing.removeFirst()\n\
    \    opening.removeFirst()\n    closing.removeFirst()\n    opening.removeFirst()\n\
    \    closing.removeFirst()\n    opening.remove\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd9pdy7ao.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters.reversed().map {\
    \ String($0) }\n                           ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpd9pdy7ao.swift:14:28: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closing = brackets.characters.reversed().map\
    \ { String($0) }\n                           ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpd9pdy7ao.swift:83:13: error: cannot reference\
    \ 'mutating' method as function value\n    opening.remove\n            ^\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    guard openingBrackets.count ==\
    \ closingBrackets.count else {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        guard let closingBracket = closingBrackets.first\
    \ else {\n            return false\n        }\n        if openingBracket != closingBracket\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc8dzpyls.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpc8dzpyls.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = 0\n    var closingBracketIndex = 0\n    while openingBracketIndex\
    \ < openingBrackets.count {\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n    }\n    while closingBracketIndex < closingBrackets.count {\n     \
    \   guard closingBrackets[closingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        closingBracketIndex += 1\n    }\n    if openingBracketIndex\
    \ != closingBracketIndex {\n        return false\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmgl2xzka.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpmgl2xzka.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpmgl2xzka.swift:18:15: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        guard\
    \ openingBrackets[openingBracketIndex] == \")\" else {\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmgl2xzka.swift:24:15:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        guard closingBrackets[closingBracketIndex]\
    \ == \")\" else {\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmgl2xzka.swift:13:9:\
    \ warning: variable 'openingBrackets' was never mutated; consider changing to\
    \ 'let' constant\n    var openingBrackets = brackets.characters\n    ~~~ ^\n \
    \   let\n/tmp/tmpmgl2xzka.swift:14:9: warning: variable 'closingBrackets' was\
    \ never mutated; consider changing to 'let' constant\n    var closingBrackets\
    \ = brackets.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    opening.removeFirst()\n    opening.removeLast()\n    closing.removeFirst()\n\
    \    closing.removeLast()\n    if opening.isEmpty {\n        return closing.isEmpty\n\
    \    }\n    if closing.isEmpty {\n        return opening.isEmpty\n    }\n    if\
    \ opening.first == closing.first {\n        return correct_bracketing(opening.dropFirst(),\
    \ closing.dropFirst())\n    }\n    if opening.last == closing.last {\n       \
    \ return correct_bracketing(opening.dropLast(), closing.dropLast())\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9bix93s1.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp9bix93s1.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp9bix93s1.swift:26:64:\
    \ error: extra argument in call\n        return correct_bracketing(opening.dropFirst(),\
    \ closing.dropFirst())\n                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\n\
    /tmp/tmp9bix93s1.swift:26:43: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to expected argument type 'String'\n        return correct_bracketing(opening.dropFirst(),\
    \ closing.dropFirst())\n                                          ^\n        \
    \                          String(            )\n/tmp/tmp9bix93s1.swift:29:63:\
    \ error: extra argument in call\n        return correct_bracketing(opening.dropLast(),\
    \ closing.dropLast())\n                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\n\
    /tmp/tmp9bix93s1.swift:29:43: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to expected argument type 'String'\n        return correct_bracketing(opening.dropLast(),\
    \ closing.dropLast())\n                                          ^\n         \
    \                         String(           )\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    for openingBracket in openingBrackets\
    \ {\n        if let closingBracket = closingBrackets.firstIndex(of: openingBracket)\
    \ {\n            closingBrackets.remove(at: closingBracket)\n        }\n    }\n\
    \    \n    return openingBrackets.count == closingBrackets.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjpmome56.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpjpmome56.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm3fj981y.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpm3fj981y.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n\n        if openingBracket == \"(\" {\n  \
    \          openingBracketIndex += 1\n        } else if openingBracket == \")\"\
    \ {\n            openingBracketIndex += 1\n            closingBracketIndex -=\
    \ 1\n        } else {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        }\n\n        if openingBracketIndex >= brackets.endIndex {\n \
    \           break\n        }\n\n        if closingBracketIndex >= brackets.endIndex\
    \ {\n            break\n        }\n\n        if openingBracket != closingBracket\
    \ {\n            return false\n        }\n    }\n\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp24m1vr4w.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp24m1vr4w.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp24m1vr4w.swift:23:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp24m1vr4w.swift:25:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp24m1vr4w.swift:26:33: error: binary operator '-=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ -= 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp24m1vr4w.swift:28:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp24m1vr4w.swift:29:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    var openingCount = brackets.characters.count\n    var closingCount = brackets.characters.count\n\
    \    var openingIndex = 0\n    var closingIndex = 0\n    var openingChar = opening[openingIndex]\n\
    \    var closingChar = closing[closingIndex]\n\n    while openingIndex < openingCount\
    \ {\n        openingIndex++\n        openingChar = opening[openingIndex]\n   \
    \     if openingChar == \")\" {\n            closingIndex++\n            closingChar\
    \ = closing[closingIndex]\n            if closingChar == \")\" {\n           \
    \     openingIndex++\n                openingChar = opening[openingIndex]\n  \
    \              if openingChar == \")\" {\n                    closingIndex++\n\
    \                    closingChar = closing[closingIndex]\n                   \
    \ if closingChar == \")\" {\n                        openingIndex++\n        \
    \                openingChar = opening[openingIndex]\n                       \
    \ if openingChar == \")\" {\n                            closingIndex++\n    \
    \                        closingChar = closing[closingIndex]\n               \
    \             if closingChar == \")\" {\n                                openingIndex++\n\
    \                                openingChar = opening[openingIndex]\n       \
    \                         if openingChar == \")\" {\n                        \
    \            closingIndex++\n                                    closingChar =\
    \ closing[closingIndex]\n                                    if closingChar ==\
    \ \")\" {\n                                        openingIndex++\n          \
    \                              openingChar = opening[openingIndex]\n         \
    \                               if openingChar == \")\" {\n                  \
    \                          closingIndex++\n                                  \
    \          closingChar = closing[closingIndex]\n                             \
    \               if closingChar == \")\" {\n                                  \
    \              openingIndex++\n                                              \
    \  openingChar = opening[openingIndex]\n                                     \
    \           if openingChar == \")\" {\n                                      \
    \              closingIndex++\n                                              \
    \      closingChar = closing[closingIndex]\n                                 \
    \                   if closingChar == \")\" {\n                              \
    \                          openingIndex++\n                                  \
    \                      openingChar = opening[openingIndex]\n                 \
    \                                       if openingChar == \")\" {\n          \
    \                                                  closingIndex++\n          \
    \                                                  closingChar = closing[closingIndex]\n\
    \                                                            if closingChar ==\
    \ \")\" {\n                                                                openingIndex++\n\
    \                                                                openingChar =\
    \ opening[openingIndex]\n                                                    \
    \            if openingChar == \")\" {\n                                     \
    \                               closingIndex++\n                             \
    \                                       closingChar = closing[closingIndex]\n\
    \                                                                    if closingChar\
    \ == \")\" {\n                                                               \
    \         openingIndex++\n                                                   \
    \                     openingChar = opening[openingIndex]\n                  \
    \                                                  }\n                       \
    \                                         }\n                                \
    \                            }\n                                             \
    \           }\n                                                    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa6l95_74.swift:104:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmpa6l95_74.swift:52:67:\
    \ note: to match this opening '{'\n                                          \
    \  if closingChar == \")\" {\n                                               \
    \                   ^\n/tmp/tmpa6l95_74.swift:104:66: error: expected '}' at end\
    \ of brace statement\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmpa6l95_74.swift:49:63: note: to match this opening '{'\n         \
    \                               if openingChar == \")\" {\n                  \
    \                                            ^\n/tmp/tmpa6l95_74.swift:104:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmpa6l95_74.swift:46:59: note: to match this opening\
    \ '{'\n                                    if closingChar == \")\" {\n       \
    \                                                   ^\n/tmp/tmpa6l95_74.swift:104:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmpa6l95_74.swift:43:55: note: to match this opening\
    \ '{'\n                                if openingChar == \")\" {\n           \
    \                                           ^\n/tmp/tmpa6l95_74.swift:104:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmpa6l95_74.swift:40:51: note: to match this opening\
    \ '{'\n                            if closingChar == \")\" {\n               \
    \                                   ^\n/tmp/tmpa6l95_74.swift:104:66: error: expected\
    \ '}' at end of brace statement\nassert(corr"
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.characters.split{$0 == \")\"}.map(String.init)\n\
    \    let closingBrackets = brackets.characters.split{$0 == \"(\"}.map(String.init)\n\
    \    return openingBrackets.count == closingBrackets.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmph_ftfpla.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    let openingBrackets = brackets.characters.split{$0\
    \ == \")\"}.map(String.init)\n                                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmph_ftfpla.swift:14:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    let closingBrackets\
    \ = brackets.characters.split{$0 == \"(\"}.map(String.init)\n                \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    for openingBracket in openingBrackets\
    \ {\n        if let closingBracket = closingBrackets.first {\n            if openingBracket\
    \ != closingBracket {\n                return false\n            }\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp14a9y6cd.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp14a9y6cd.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        switch brackets[openingBracketIndex]\
    \ {\n        case ')':\n            closingBracketCount++\n            if closingBracketCount\
    \ > 1 {\n                openingBracketCount--\n            }\n        case ')':\n\
    \            openingBracketCount++\n            if openingBracketCount > 1 {\n\
    \                closingBracketCount--\n            }\n        default:\n    \
    \        openingBracketCount = 0\n            closingBracketCount = 0\n      \
    \  }\n        openingBracketIndex++\n    }\n    return openingBracketCount ==\
    \ closingBracketCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk_ij4nir.swift:21:14: error: single-quoted string literal found,\
    \ use '\"'\n        case ')':\n             ^~~\n             \")\"\n/tmp/tmpk_ij4nir.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case ')':\n   \
    \          ^~~\n             \")\"\n/tmp/tmpk_ij4nir.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpk_ij4nir.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpk_ij4nir.swift:22:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            closingBracketCount++\n        \
    \                       ^~\n/tmp/tmpk_ij4nir.swift:24:36: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n                openingBracketCount--\n\
    \                                   ^~\n/tmp/tmpk_ij4nir.swift:27:32: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            openingBracketCount++\n\
    \                               ^~\n/tmp/tmpk_ij4nir.swift:29:36: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n                closingBracketCount--\n\
    \                                   ^~\n/tmp/tmpk_ij4nir.swift:26:14: warning:\
    \ literal value is already handled by previous pattern; consider removing it\n\
    \        case ')':\n             ^~~\n/tmp/tmpk_ij4nir.swift:21:14: note: first\
    \ occurrence of identical literal pattern is here\n        case ')':\n       \
    \      ^~~\n/tmp/tmpk_ij4nir.swift:35:28: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n        openingBracketIndex++\n               \
    \            ^~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    guard openingBrackets.count >\
    \ 0 && closingBrackets.count > 0 else {\n        return false\n    }\n    for\
    \ openingBracket in openingBrackets {\n        for closingBracket in closingBrackets\
    \ {\n            if openingBracket != closingBracket {\n                return\
    \ false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4xau8dcp.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp4xau8dcp.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    for openingBracket in openingBrackets {\n        if closingBrackets.contains(openingBracket)\
    \ {\n            closingBrackets.remove(openingBracket)\n        } else {\n  \
    \          return false\n        }\n    }\n\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrb9jbkw.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdrb9jbkw.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdrb9jbkw.swift:18:29: error: no exact matches in call\
    \ to instance method 'remove'\n            closingBrackets.remove(openingBracket)\n\
    \                            ^\n/tmp/tmpdrb9jbkw.swift:18:29: note: candidate\
    \ expects value of type 'String.Index' for parameter #1 (got 'Character')\n  \
    \          closingBrackets.remove(openingBracket)\n                          \
    \  ^\n/tmp/tmpdrb9jbkw.swift:18:29: note: candidate expects value of type 'String.Index'\
    \ for parameter #1 (got 'Character')\n            closingBrackets.remove(openingBracket)\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    var openingCount = brackets.characters.count\n    var closingCount = brackets.characters.count\n\
    \    var openingIndex = 0\n    var closingIndex = 0\n    while openingIndex <\
    \ openingCount {\n        opening = brackets.substringWithRange(NSMakeRange(openingIndex,\
    \ 1))\n        closing = brackets.substringWithRange(NSMakeRange(closingIndex,\
    \ 1))\n        if opening == \"(\" && closing == \")\" {\n            openingIndex++\n\
    \            closingIndex++\n            continue\n        }\n        if opening\
    \ == \"(\" && closing != \")\" {\n            openingIndex++\n            continue\n\
    \        }\n        if opening != \")\" && opening != \"(\" {\n            openingIndex++\n\
    \            continue\n        }\n        if opening == \"(\" && closingCount\
    \ == 1 {\n            openingIndex++\n            closingIndex++\n           \
    \ continue\n        }\n        if opening != \")\" && opening != \"(\" && closingCount\
    \ == 1 {\n            openingIndex++\n            closingIndex++\n           \
    \ continue\n        }\n        if opening != \")\" && opening != \"(\" && closingCount\
    \ != 1 {\n            openingIndex++\n            continue\n        }\n      \
    \  if opening != \")\" && opening != \"(\" && closingCount != 1 {\n          \
    \  openingIndex++\n            closingIndex++\n            continue\n        }\n\
    \        if opening != \")\" && opening != \"(\" && closingCount != 1 {\n    \
    \        openingIndex++\n            closingIndex++\n            continue\n  \
    \      }\n        if opening != \")\" && opening != \"(\" && closingCount != 1\
    \ {\n            openingIndex++\n            closingIndex++\n            continue\n\
    \        }\n        if opening != \")\" && opening != \"(\" && closingCount !=\
    \ 1 {\n            openingIndex++\n            closingIndex++\n            continue\n\
    \        }\n        if opening != \")\" && opening != \"(\" && closingCount !=\
    \ 1 {\n            openingIndex++\n            closingIndex++\n            continue\n\
    \        }\n        if opening != \")\" && opening != \"(\" && closingCount !=\
    \ 1 {\n            openingIndex++\n            closingIndex++\n            continue\n\
    \        }\n        if opening != \")\" && opening != \"(\" && closingCount !=\
    \ 1 {\n            openingIndex++\n            closingIndex++\n            continue\n\
    \        }\n        if opening != \")\" && opening != \"(\" && closingCount !=\
    \ 1 {\n            openingIndex++\n            closingIndex++\n            continue\n\
    \        }\n        if opening != \")\" && opening != \"(\" && closingCount !=\
    \ 1 {\n            openingIndex++\n            closingIndex++\n            continue\n\
    \        }\n        if opening != \")\" && opening != \"(\" && closingCount !=\
    \ 1 {\n            openingIndex++\n            closing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphshtl3ic.swift:123:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmphshtl3ic.swift:19:39:\
    \ note: to match this opening '{'\n    while openingIndex < openingCount {\n \
    \                                     ^\n/tmp/tmphshtl3ic.swift:123:66: error:\
    \ expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmphshtl3ic.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmphshtl3ic.swift:13:28: error: 'characters'\
    \ is unavailable: Please use String directly\n    var opening = brackets.characters\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphshtl3ic.swift:14:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing = brackets.characters\n        \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmphshtl3ic.swift:15:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingCount = brackets.characters.count\n    \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphshtl3ic.swift:16:33: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingCount = brackets.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphshtl3ic.swift:20:47: error: cannot find 'NSMakeRange'\
    \ in scope\n        opening = brackets.s"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    var openingBracketsCount = 1\n    var closingBracketsCount = 1\n\n    for\
    \ openingBracket in openingBrackets {\n        if closingBrackets.contains(openingBracket)\
    \ {\n            closingBracketsCount++\n        } else {\n            openingBracketsCount++\n\
    \        }\n    }\n\n    return openingBracketsCount == closingBracketsCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_1w9i956.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_1w9i956.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_1w9i956.swift:21:33: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            closingBracketsCount++\n       \
    \                         ^~\n/tmp/tmp_1w9i956.swift:23:33: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            openingBracketsCount++\n\
    \                                ^~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm3fj981y.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpm3fj981y.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n\n    if openingBracketsCount == 0 {\n        return\
    \ true\n    }\n\n    if openingBracketsCount > closingBracketsCount {\n      \
    \  return false\n    }\n\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n\n    while openingBracketIndex < openingBracketsCount {\n        openingBracketIndex\
    \ = openingBracketIndex + 1\n        closingBracketIndex = openingBracketIndex\n\
    \        while closingBracketIndex < closingBracketsCount {\n            closingBracketIndex\
    \ = closingBracketIndex + 1\n            if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n                return false\n  \
    \          }\n        }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp93zb_t4_.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp93zb_t4_.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp93zb_t4_.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp93zb_t4_.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp93zb_t4_.swift:34:16: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp93zb_t4_.swift:34:56: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n            if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:1"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = 0\n    var closingBracketIndex = 0\n    while openingBracketIndex\
    \ < openingBrackets.count {\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n    }\n    while closingBracketIndex < closingBrackets.count {\n     \
    \   guard closingBrackets[closingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        closingBracketIndex += 1\n    }\n    if openingBracketIndex\
    \ == closingBracketIndex {\n        return true\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe5ji6f76.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe5ji6f76.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe5ji6f76.swift:18:15: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        guard\
    \ openingBrackets[openingBracketIndex] == \")\" else {\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpe5ji6f76.swift:24:15:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        guard closingBrackets[closingBracketIndex]\
    \ == \")\" else {\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpe5ji6f76.swift:13:9:\
    \ warning: variable 'openingBrackets' was never mutated; consider changing to\
    \ 'let' constant\n    var openingBrackets = brackets.characters\n    ~~~ ^\n \
    \   let\n/tmp/tmpe5ji6f76.swift:14:9: warning: variable 'closingBrackets' was\
    \ never mutated; consider changing to 'let' constant\n    var closingBrackets\
    \ = brackets.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for openingBracket\
    \ in openingBrackets {\n        let closingBracket = closingBrackets.firstIndex(of:\
    \ openingBracket)\n        \n        if closingBracket == nil {\n            return\
    \ false\n        }\n        \n        if openingBracket != closingBracket {\n\
    \            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpics5j8c_.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpics5j8c_.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm3fj981y.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpm3fj981y.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = 0\n    var closingBracketIndex = 0\n\n    while\
    \ openingBracketIndex < openingBrackets.count {\n        if openingBrackets[openingBracketIndex]\
    \ == '(' {\n            openingBracketIndex += 1\n            if openingBracketIndex\
    \ < openingBrackets.count {\n                openingBrackets[openingBracketIndex]\
    \ = ')'\n                closingBrackets[closingBracketIndex] = ')'\n        \
    \        closingBracketIndex += 1\n            }\n        } else {\n         \
    \   openingBracketIndex += 1\n        }\n    }\n\n    return openingBracketIndex\
    \ == closingBracketIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm5fyv4zv.swift:19:52: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketIndex] == '(' {\n       \
    \                                            ^~~\n                           \
    \                        \"(\"\n/tmp/tmpm5fyv4zv.swift:22:56: error: single-quoted\
    \ string literal found, use '\"'\n                openingBrackets[openingBracketIndex]\
    \ = ')'\n                                                       ^~~\n        \
    \                                               \")\"\n/tmp/tmpm5fyv4zv.swift:23:56:\
    \ error: single-quoted string literal found, use '\"'\n                closingBrackets[closingBracketIndex]\
    \ = ')'\n                                                       ^~~\n        \
    \                                               \")\"\n/tmp/tmpm5fyv4zv.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpm5fyv4zv.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpm5fyv4zv.swift:19:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[openingBracketIndex] == '(' {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpm5fyv4zv.swift:22:32:\
    \ error: cannot assign through subscript: subscript is get-only\n            \
    \    openingBrackets[openingBracketIndex] = ')'\n                ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpm5fyv4zv.swift:23:32: error: cannot assign through subscrip"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    for openingBracket in openingBrackets {\n        if closingBrackets.contains(openingBracket)\
    \ {\n            closingBrackets.remove(openingBracket)\n        } else {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa5i80_gv.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpa5i80_gv.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpa5i80_gv.swift:18:29: error: no exact matches in call\
    \ to instance method 'remove'\n            closingBrackets.remove(openingBracket)\n\
    \                            ^\n/tmp/tmpa5i80_gv.swift:18:29: note: candidate\
    \ expects value of type 'String.Index' for parameter #1 (got 'Character')\n  \
    \          closingBrackets.remove(openingBracket)\n                          \
    \  ^\n/tmp/tmpa5i80_gv.swift:18:29: note: candidate expects value of type 'String.Index'\
    \ for parameter #1 (got 'Character')\n            closingBrackets.remove(openingBracket)\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    var openingCount = 1\n    var closingCount = 1\n    for openingIndex in 0..<opening.count\
    \ {\n        if opening[openingIndex] == '(' {\n            openingCount += 1\n\
    \        } else if opening[openingIndex] == ')' {\n            openingCount -=\
    \ 1\n        }\n    }\n    for closingIndex in 0..<closing.count {\n        if\
    \ closing[closingIndex] == '(' {\n            closingCount += 1\n        } else\
    \ if closing[closingIndex] == ')' {\n            closingCount -= 1\n        }\n\
    \    }\n    return openingCount == 0 && closingCount == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp12cy3br4.swift:18:37: error: single-quoted string literal found,\
    \ use '\"'\n        if opening[openingIndex] == '(' {\n                      \
    \              ^~~\n                                    \"(\"\n/tmp/tmp12cy3br4.swift:20:44:\
    \ error: single-quoted string literal found, use '\"'\n        } else if opening[openingIndex]\
    \ == ')' {\n                                           ^~~\n                 \
    \                          \")\"\n/tmp/tmp12cy3br4.swift:25:37: error: single-quoted\
    \ string literal found, use '\"'\n        if closing[closingIndex] == '(' {\n\
    \                                    ^~~\n                                   \
    \ \"(\"\n/tmp/tmp12cy3br4.swift:27:44: error: single-quoted string literal found,\
    \ use '\"'\n        } else if closing[closingIndex] == ')' {\n               \
    \                            ^~~\n                                           \"\
    )\"\n/tmp/tmp12cy3br4.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp12cy3br4.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp12cy3br4.swift:18:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if opening[openingIndex] == '(' {\n   \
    \        ^~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp12cy3br4.swift:20:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        } else if opening[openingIndex] == ')' {\n                  ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    let openingBracketCount = openingBrackets.count\n\
    \    let closingBracketCount = closingBrackets.count\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        if !brackets.contains(openingBracket) {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpth4aiwmq.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpth4aiwmq.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: CharacterSet.openingParenthesis)\n\
    \    let closingBrackets = brackets.components(separatedBy: CharacterSet.closingParenthesis)\n\
    \    return openingBrackets.count == closingBrackets.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5gfdrqok.swift:13:60: error: cannot find 'CharacterSet' in scope\n\
    \    let openingBrackets = brackets.components(separatedBy: CharacterSet.openingParenthesis)\n\
    \                                                           ^~~~~~~~~~~~\n/tmp/tmp5gfdrqok.swift:13:36:\
    \ error: value of type 'String' has no member 'components'\n    let openingBrackets\
    \ = brackets.components(separatedBy: CharacterSet.openingParenthesis)\n      \
    \                    ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp5gfdrqok.swift:14:60: error:\
    \ cannot find 'CharacterSet' in scope\n    let closingBrackets = brackets.components(separatedBy:\
    \ CharacterSet.closingParenthesis)\n                                         \
    \                  ^~~~~~~~~~~~\n/tmp/tmp5gfdrqok.swift:14:36: error: value of\
    \ type 'String' has no member 'components'\n    let closingBrackets = brackets.components(separatedBy:\
    \ CharacterSet.closingParenthesis)\n                          ~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm3fj981y.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpm3fj981y.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for openingBracket\
    \ in openingBrackets {\n        let closingBracket = closingBrackets.first(where:\
    \ { $0 == openingBracket })\n        \n        if closingBracket == nil {\n  \
    \          return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbp7e5nlm.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpbp7e5nlm.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    while openingBracketIndex < brackets.endIndex {\n\
    \        openingBracketIndex = openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex]\
    \ != \")\" {\n            return false\n        }\n        openingBracketIndex\
    \ = openingBracketIndex + 1\n    }\n    while closingBracketIndex < brackets.endIndex\
    \ {\n        closingBracketIndex = closingBracketIndex + 1\n        if closingBrackets[closingBracketIndex]\
    \ != \")\" {\n            return false\n        }\n        closingBracketIndex\
    \ = closingBracketIndex + 1\n    }\n    if openingBracketIndex != closingBracketIndex\
    \ {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfo8kiaaj.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfo8kiaaj.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfo8kiaaj.swift:18:51: error: binary operator '+' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ = openingBracketIndex + 1\n                              ~~~~~~~~~~~~~~~~~~~\
    \ ^ ~\n/tmp/tmpfo8kiaaj.swift:18:51: note: overloads for '+' exist with these\
    \ partially matching parameter lists: (Int, Int)\n        openingBracketIndex\
    \ = openingBracketIndex + 1\n                                                \
    \  ^\n/tmp/tmpfo8kiaaj.swift:22:51: error: binary operator '+' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n        openingBracketIndex =\
    \ openingBracketIndex + 1\n                              ~~~~~~~~~~~~~~~~~~~ ^\
    \ ~\n/tmp/tmpfo8kiaaj.swift:22:51: note: overloads for '+' exist with these partially\
    \ matching parameter lists: (Int, Int)\n        openingBracketIndex = openingBracketIndex\
    \ + 1\n                                                  ^\n/tmp/tmpfo8kiaaj.swift:25:51:\
    \ error: binary operator '+' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n        closingBracketIndex = closingBracketIndex + 1\n         \
    \                     ~~~~~~~~~~~~~~~~~~~ ^ ~\n/tmp/tmpfo8kiaaj.swift:25:51: note:\
    \ overloads for '+' exist with these partially matching parameter lists: (Int,\
    \ Int)\n        closingBracketIndex = closingBracketIndex + 1\n              \
    \                                    ^\n/tmp/tmpfo8kiaaj.swift:29:51: error: binary\
    \ operator '+' cannot be"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n\n    if openingBracketsCount == 0 {\n        return\
    \ false\n    }\n\n    if openingBracketsCount == 1 {\n        if openingBrackets[0]\
    \ == closingBrackets[0] {\n            return true\n        }\n    }\n\n    if\
    \ openingBracketsCount > 1 {\n        for openingBracket in openingBrackets {\n\
    \            if openingBracket == closingBrackets[0] {\n                openingBracketsCount\
    \ = openingBracketsCount - 1\n                closingBracketsCount = closingBracketsCount\
    \ - 1\n            } else {\n                openingBracketsCount = openingBracketsCount\
    \ - 1\n            }\n        }\n    }\n\n    if openingBracketsCount != closingBracketsCount\
    \ {\n        return false\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0_6g18p_.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp0_6g18p_.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp0_6g18p_.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp0_6g18p_.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp0_6g18p_.swift:23:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if openingBrackets[0] == closingBrackets[0] {\n           ^~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp0_6g18p_.swift:23:34:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[0] == closingBrackets[0]\
    \ {\n                                 ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp0_"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    var openingBracketsCount = 1\n    var closingBracketsCount = 1\n\n    for\
    \ openingBracket in openingBrackets {\n        if openingBracket == \"(\" {\n\
    \            openingBracketsCount += 1\n        } else if openingBracket == \"\
    )\" {\n            openingBracketsCount -= 1\n        }\n    }\n\n    for closingBracket\
    \ in closingBrackets {\n        if closingBracket == \"(\" {\n            closingBracketsCount\
    \ += 1\n        } else if closingBracket == \")\" {\n            closingBracketsCount\
    \ -= 1\n        }\n    }\n\n    return openingBracketsCount == 0 && closingBracketsCount\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzh3rm_yz.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzh3rm_yz.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzh3rm_yz.swift:13:9: warning: variable 'openingBrackets'\
    \ was never mutated; consider changing to 'let' constant\n    var openingBrackets\
    \ = brackets.characters\n    ~~~ ^\n    let\n/tmp/tmpzh3rm_yz.swift:14:9: warning:\
    \ variable 'closingBrackets' was never mutated; consider changing to 'let' constant\n\
    \    var closingBrackets = brackets.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    var openingBracketIndex = openingBrackets.startIndex\n    while openingBracketIndex\
    \ < openingBrackets.endIndex {\n        let closingBracketIndex = closingBrackets.startIndex\n\
    \        while closingBracketIndex < closingBrackets.endIndex {\n            if\
    \ openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n                return false\n            }\n            closingBracketIndex\
    \ += 1\n        }\n        openingBracketIndex += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdiix8_9j.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdiix8_9j.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdiix8_9j.swift:23:13: error: cannot convert value of\
    \ type 'String.Index' to expected argument type 'Int'\n            closingBracketIndex\
    \ += 1\n            ^\n/tmp/tmpdiix8_9j.swift:25:29: error: binary operator '+='\
    \ cannot be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        openingBracketIndex = openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex]\
    \ != \")\" {\n            openingBracketIndex = openingBracketIndex - 1\n    \
    \        break\n        }\n    }\n\n    while closingBracketIndex < brackets.endIndex\
    \ {\n        closingBracketIndex = closingBracketIndex + 1\n        if closingBrackets[closingBracketIndex]\
    \ != \")\" {\n            closingBracketIndex = closingBracketIndex - 1\n    \
    \        break\n        }\n    }\n\n    if openingBracketIndex == brackets.endIndex\
    \ {\n        return true\n    }\n\n    if openingBracketIndex < closingBracketIndex\
    \ {\n        return false\n    }\n\n    return openingBracketIndex == closingBracketIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi2t02qoj.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpi2t02qoj.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpi2t02qoj.swift:19:51: error: binary operator '+' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ = openingBracketIndex + 1\n                              ~~~~~~~~~~~~~~~~~~~\
    \ ^ ~\n/tmp/tmpi2t02qoj.swift:19:51: note: overloads for '+' exist with these\
    \ partially matching parameter lists: (Int, Int)\n        openingBracketIndex\
    \ = openingBracketIndex + 1\n                                                \
    \  ^\n/tmp/tmpi2t02qoj.swift:21:55: error: binary operator '-' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ = openingBracketIndex - 1\n                                  ~~~~~~~~~~~~~~~~~~~\
    \ ^ ~\n/tmp/tmpi2t02qoj.swift:21:55: note: overloads for '-' exist with these\
    \ partially matching parameter lists: (Int, Int)\n            openingBracketIndex\
    \ = openingBracketIndex - 1\n                                                \
    \      ^\n/tmp/tmpi2t02qoj.swift:27:51: error: binary operator '+' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n        closingBracketIndex =\
    \ closingBracketIndex + 1\n                              ~~~~~~~~~~~~~~~~~~~ ^\
    \ ~\n/tmp/tmpi2t02qoj.swift:27:51: note: overloads for '+' exist with these partially\
    \ matching parameter lists: (Int, Int)\n        closingBracketIndex = closingBracketIndex\
    \ + 1\n                                                  ^\n/tmp/tmpi2t02qoj.swift:29:55:\
    \ error: binary operat"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        openingBracketIndex\
    \ += 1\n        if openingBracket == \"(\" {\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n        }\n        if openingBracket\
    \ == \")\" {\n            openingBracketIndex += 1\n        }\n        if openingBracket\
    \ == \"{\" {\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n        }\n        if openingBracket\
    \ == \"}\" {\n            openingBracketIndex += 1\n        }\n        if openingBracket\
    \ == \"[\" {\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n        }\n        if openingBracket == \"]\" {\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n        }\n        if openingBracket == \"(\" {\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n        }\n        if openingBracket == \")\" {\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n        }\n        if openingBracket == \"{\" {\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n        }\n        if openingBracket == \"}\" {\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n        }\n        if openingBracket == \"[\" {\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n        }\n        if openingBracket\
    \ == \"]\" {\n            openingBracketIndex += 1\n            \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7e9zdsja.swift:108:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmp7e9zdsja.swift:18:51:\
    \ note: to match this opening '{'\n    while openingBracketIndex < brackets.endIndex\
    \ {\n                                                  ^\n/tmp/tmp7e9zdsja.swift:108:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmp7e9zdsja.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmp7e9zdsja.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7e9zdsja.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7e9zdsja.swift:20:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp7e9zdsja.swift:22:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp7e9zdsja.swift:23:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp7e9zdsja.swift:26:33: error:\
    \ binary operator '+=' cannot be applied to operands of ty"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = 0\n    var closingBracketIndex = 0\n    while openingBracketIndex\
    \ < openingBrackets.count {\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < openingBrackets.count else {\n   \
    \         return true\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == openingBrackets[openingBracketIndex - 1] else {\n            return false\n\
    \        }\n        openingBracketIndex += 1\n    }\n    while closingBracketIndex\
    \ < closingBrackets.count {\n        guard closingBrackets[closingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        closingBracketIndex\
    \ += 1\n        guard closingBracketIndex < closingBrackets.count else {\n   \
    \         return true\n        }\n        guard closingBrackets[closingBracketIndex]\
    \ == closingBrackets[closingBracketIndex - 1] else {\n            return false\n\
    \        }\n        closingBracketIndex += 1\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptf6j20xf.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptf6j20xf.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptf6j20xf.swift:18:15: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        guard\
    \ openingBrackets[openingBracketIndex] == \")\" else {\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptf6j20xf.swift:25:15:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        guard openingBrackets[openingBracketIndex]\
    \ == openingBrackets[openingBracketIndex - 1] else {\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptf6j20xf.swift:25:55:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        guard openingBrackets[openingBracketIndex]\
    \ == openingBrackets[openingBracketIndex - 1] else {\n                       \
    \                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptf6j20xf.swift:31:15:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use "
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm3fj981y.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpm3fj981y.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n\n    while openingBracketIndex < brackets.endIndex {\n        switch brackets[openingBracketIndex]\
    \ {\n        case ')':\n            openingBracketCount--\n            if openingBracketCount\
    \ == 0 {\n                openingBracketIndex = openingBracketIndex + 1\n    \
    \        }\n        case ')':\n            openingBracketCount--\n           \
    \ if openingBracketCount == 0 {\n                openingBracketIndex = openingBracketIndex\
    \ + 1\n            }\n        default:\n            openingBracketCount++\n  \
    \      }\n    }\n\n    while closingBracketIndex < brackets.endIndex {\n     \
    \   switch brackets[closingBracketIndex] {\n        case '(':\n            closingBracketCount++\n\
    \            if closingBracketCount == 0 {\n                closingBracketIndex\
    \ = closingBracketIndex + 1\n            }\n        case '(':\n            closingBracketCount++\n\
    \            if closingBracketCount == 0 {\n                closingBracketIndex\
    \ = closingBracketIndex + 1\n            }\n        default:\n            closingBracketCount--\n\
    \        }\n    }\n\n    return openingBracketCount == closingBracketCount\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6p_tnzkz.swift:22:14: error: single-quoted string literal found,\
    \ use '\"'\n        case ')':\n             ^~~\n             \")\"\n/tmp/tmp6p_tnzkz.swift:27:14:\
    \ error: single-quoted string literal found, use '\"'\n        case ')':\n   \
    \          ^~~\n             \")\"\n/tmp/tmp6p_tnzkz.swift:39:14: error: single-quoted\
    \ string literal found, use '\"'\n        case '(':\n             ^~~\n      \
    \       \"(\"\n/tmp/tmp6p_tnzkz.swift:44:14: error: single-quoted string literal\
    \ found, use '\"'\n        case '(':\n             ^~~\n             \"(\"\n/tmp/tmp6p_tnzkz.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp6p_tnzkz.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp6p_tnzkz.swift:23:32: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n            openingBracketCount--\n        \
    \                       ^~\n/tmp/tmp6p_tnzkz.swift:25:59: error: binary operator\
    \ '+' cannot be applied to operands of type 'String.Index' and 'Int'\n       \
    \         openingBracketIndex = openingBracketIndex + 1\n                    \
    \                  ~~~~~~~~~~~~~~~~~~~ ^ ~\n/tmp/tmp6p_tnzkz.swift:25:59: note:\
    \ overloads for '+' exist with these partially matching parameter lists: (Int,\
    \ Int)\n                openingBracketIndex = openingBracketIndex + 1\n      \
    \                                                    ^\n/tmp/tmp6p_tnzkz.swift:28:32:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  openingBracketCount--\n                               ^~\n/tmp/tmp6p_tnzkz.swift:30:59:\
    \ error: binary operator '+' cannot be applied to oper"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    var openingCount = brackets.characters.count\n    var closingCount = brackets.characters.count\n\
    \n    if openingCount == 0 {\n        return true\n    }\n\n    if openingCount\
    \ > 0 {\n        opening.removeLast()\n    }\n\n    if openingCount != closingCount\
    \ {\n        return false\n    }\n\n    if opening.first == closing.first {\n\
    \        opening.removeFirst()\n        closing.removeFirst()\n    }\n\n    if\
    \ opening.last == closing.last {\n        opening.removeLast()\n        closing.removeLast()\n\
    \    }\n\n    if opening.count != closing.count {\n        return false\n    }\n\
    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpv_ezbbge.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpv_ezbbge.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpv_ezbbge.swift:15:33:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingCount\
    \ = brackets.characters.count\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpv_ezbbge.swift:16:33: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingCount = brackets.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpv_ezbbge.swift:15:9: warning: variable 'openingCount'\
    \ was never mutated; consider changing to 'let' constant\n    var openingCount\
    \ = brackets.characters.count\n    ~~~ ^\n    let\n/tmp/tmpv_ezbbge.swift:16:9:\
    \ warning: variable 'closingCount' was never mutated; consider changing to 'let'\
    \ constant\n    var closingCount = brackets.characters.count\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    while openingBracketIndex < brackets.endIndex {\n\
    \        guard openingBrackets[openingBracketIndex] == \")\" else {\n        \
    \    return false\n        }\n        openingBracketIndex += 1\n        guard\
    \ openingBrackets[openingBracketIndex] == \")\" else {\n            return false\n\
    \        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        open\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvqnmxku7.swift:104:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmpvqnmxku7.swift:12:51:\
    \ note: to match this opening '{'\nfunc correct_bracketing(brackets: String) ->\
    \ Bool {\n                                                  ^\n/tmp/tmpvqnmxku7.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpvqnmxku7.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvqnmxku7.swift:21:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpvqnmxku7.swift:25:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmpvqnmxku7.swift:29:29: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n        openingBracketIndex += 1\n\
    \        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpvqnmxku7.swift:33:29: error: binary\
    \ operator '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n\
    \        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpvqnmxku7.swift:37:29:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^ \
    \ ~\n/tmp/tmpvqnmxku7.swift:41:29: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' "
  stdout: ''
  timestamp: 1659979823
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var bracketCount = 0\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    for character in brackets {\n        if character == \"(\" {\n    \
    \        openingBracketCount += 1\n        } else if character == \")\" {\n  \
    \          closingBracketCount += 1\n        } else if character == \"(\" {\n\
    \            bracketCount += 1\n        } else if character == \")\" {\n     \
    \       bracketCount -= 1\n        }\n    }\n    return bracketCount == 0 && openingBracketCount\
    \ == closingBracketCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmp1_sh6j8y/tmp1_sh6j8y.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9e66f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9e63efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9e63ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9e63ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_sh6j8y                        0x0000555d3241d75b <unavailable> + 5979

    5    libc.so.6                          0x00002ad9e68e4460 __libc_start_main +
    245

    6    tmp1_sh6j8y                        0x0000555d3241d099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeLast()\n    closingBrackets.removeLast()\n    if openingBrackets.isEmpty\
    \ {\n        return false\n    }\n    if closingBrackets.isEmpty {\n        return\
    \ true\n    }\n    if openingBrackets.first != closingBrackets.first {\n     \
    \   return false\n    }\n    return correct_bracketing(openingBrackets.dropFirst(),\
    \ closingBrackets.dropFirst())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpml6lktrp.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpml6lktrp.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpml6lktrp.swift:26:76: error: extra argument in call\n\
    \    return correct_bracketing(openingBrackets.dropFirst(), closingBrackets.dropFirst())\n\
    \                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\n\
    /tmp/tmpml6lktrp.swift:26:47: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to expected argument type 'String'\n    return correct_bracketing(openingBrackets.dropFirst(),\
    \ closingBrackets.dropFirst())\n                                             \
    \ ^\n                              String(                    )\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n            return false\n        }\n        openingBracketIndex += 1\n \
    \       closingBracketIndex += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtb7glhx.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpmtb7glhx.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpmtb7glhx.swift:22:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpmtb7glhx.swift:23:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        guard openingBrackets[openingBracketIndex] == \")\" else {\n        \
    \    return false\n        }\n        openingBracketIndex += 1\n        guard\
    \ openingBrackets[openingBracketIndex] == \")\" else {\n            return false\n\
    \        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        open\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp98xqwod8.swift:105:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmp98xqwod8.swift:12:51:\
    \ note: to match this opening '{'\nfunc correct_bracketing(brackets: String) ->\
    \ Bool {\n                                                  ^\n/tmp/tmp98xqwod8.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp98xqwod8.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp98xqwod8.swift:22:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp98xqwod8.swift:26:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmp98xqwod8.swift:30:29: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n        openingBracketIndex += 1\n\
    \        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp98xqwod8.swift:34:29: error: binary\
    \ operator '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n\
    \        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp98xqwod8.swift:38:29:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^ \
    \ ~\n/tmp/tmp98xqwod8.swift:42:29: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' "
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var bracketCount = 0\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    for char in brackets {\n        switch char {\n        case \"(\":\n\
    \            openingBracketCount++\n        case \"[\":\n            bracketCount++\n\
    \        case \"{\":\n            bracketCount++\n        case \"(\":\n      \
    \      closingBracketCount++\n        case \"}\":\n            closingBracketCount++\n\
    \        default:\n            bracketCount++\n        }\n    }\n    return bracketCount\
    \ == openingBracketCount && bracketCount == closingBracketCount\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6t1dk6f9.swift:19:32: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            openingBracketCount++\n                  \
    \             ^~\n/tmp/tmp6t1dk6f9.swift:21:25: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            bracketCount++\n               \
    \         ^~\n/tmp/tmp6t1dk6f9.swift:23:25: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n            bracketCount++\n                  \
    \      ^~\n/tmp/tmp6t1dk6f9.swift:25:32: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            closingBracketCount++\n                  \
    \             ^~\n/tmp/tmp6t1dk6f9.swift:27:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            closingBracketCount++\n        \
    \                       ^~\n/tmp/tmp6t1dk6f9.swift:29:25: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            bracketCount++\n          \
    \              ^~\n/tmp/tmp6t1dk6f9.swift:24:14: warning: literal value is already\
    \ handled by previous pattern; consider removing it\n        case \"(\":\n   \
    \          ^~~\n/tmp/tmp6t1dk6f9.swift:18:14: note: first occurrence of identical\
    \ literal pattern is here\n        case \"(\":\n             ^~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n    if openingBrackets.isEmpty\
    \ {\n        return false\n    }\n    if closingBrackets.isEmpty {\n        return\
    \ true\n    }\n    if openingBrackets.first == closingBrackets.last {\n      \
    \  return true\n    }\n    if openingBrackets.first == \")\" {\n        openingBrackets.removeFirst()\n\
    \        return correct_bracketing(brackets: String(openingBrackets))\n    }\n\
    \    if closingBrackets.first == \"(\" {\n        closingBrackets.removeFirst()\n\
    \        return correct_bracketing(brackets: String(closingBrackets))\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqu8rfbzf.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqu8rfbzf.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketCount = brackets.characters.count\n    var closingBracketCount\
    \ = brackets.characters.count\n    var openingBracketIndex = openingBrackets.startIndex\n\
    \    var closingBracketIndex = closingBrackets.startIndex\n    while openingBracketIndex\
    \ < openingBrackets.endIndex {\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        closingBracketIndex += 1\n    }\n    while openingBracketIndex\
    \ < openingBrackets.endIndex {\n        guard openingBrackets[openingBracketIndex]\
    \ != \"(\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        closingBracketIndex += 1\n    }\n    while openingBracketIndex\
    \ < openingBrackets.endIndex {\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        closingBracketIndex += 1\n    }\n    while openingBracketIndex\
    \ < openingBrackets.endIndex {\n        guard openingBrackets[openingBracketIndex]\
    \ != \"(\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        closingBracketIndex += 1\n    }\n    while openingBracketIndex\
    \ < openingBrackets.endIndex {\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        closingBracketIndex += 1\n    }\n    while openingBracketIndex\
    \ < openingBrackets.endIndex {\n        guard openingBrackets[openingBracketIndex]\
    \ != \"(\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        closingBracketIndex += 1\n    }\n    while openingBracketIndex\
    \ < openingBrackets.endIndex {\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        closingBracketIndex += 1\n    }\n    while openingBracketIndex\
    \ < openingBrackets.endIndex {\n        guard openingBrackets[openingBracketIndex]\
    \ != \"(\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        closingBra\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi48cha2s.swift:100:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmpi48cha2s.swift:12:51:\
    \ note: to match this opening '{'\nfunc correct_bracketing(brackets: String) ->\
    \ Bool {\n                                                  ^\n/tmp/tmpi48cha2s.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpi48cha2s.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpi48cha2s.swift:15:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpi48cha2s.swift:16:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpi48cha2s.swift:23:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpi48cha2s.swift:24:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmpi48cha2s.s"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm3fj981y.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpm3fj981y.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    opening.removeFirst()\n    opening.removeLast()\n    closing.removeFirst()\n\
    \    closing.removeLast()\n    if opening.isEmpty() {\n        return false\n\
    \    }\n    if closing.isEmpty() {\n        return true\n    }\n    if opening.first\
    \ == closing.last {\n        return true\n    }\n    if opening.last == closing.first\
    \ {\n        return false\n    }\n    if opening.first == closing.first {\n  \
    \      return correct_bracketing(String(opening.dropFirst()))\n    }\n    if opening.last\
    \ == closing.last {\n        return correct_bracketing(String(opening.dropLast()))\n\
    \    }\n    return correct_bracketing(String(opening.dropFirst())) && correct_bracketing(String(opening.dropLast()))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbqm0oete.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpbqm0oete.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpbqm0oete.swift:19:16:\
    \ error: cannot call value of non-function type 'Bool'\n    if opening.isEmpty()\
    \ {\n               ^      ~~\n                      \n/tmp/tmpbqm0oete.swift:22:16:\
    \ error: cannot call value of non-function type 'Bool'\n    if closing.isEmpty()\
    \ {\n               ^      ~~\n                      \n/tmp/tmpbqm0oete.swift:32:35:\
    \ error: missing argument label 'brackets:' in call\n        return correct_bracketing(String(opening.dropFirst()))\n\
    \                                  ^\n                                  brackets:\
    \ \n/tmp/tmpbqm0oete.swift:35:35: error: missing argument label 'brackets:' in\
    \ call\n        return correct_bracketing(String(opening.dropLast()))\n      \
    \                            ^\n                                  brackets: \n\
    /tmp/tmpbqm0oete.swift:37:31: error: missing argument label 'brackets:' in call\n\
    \    return correct_bracketing(String(opening.dropFirst())) && correct_bracketing(String(opening.dropLast()))\n\
    \                              ^\n                              brackets: \n/tmp/tmpbqm0oete.swift:37:82:\
    \ error: missing argument label 'brackets:' in call\n    return correct_bracketing(String(opening.dropFirst()))\
    \ && correct_bracketing(String(opening.dropLast()))\n                        \
    \                                                         ^\n                \
    \                                                                 brackets: \n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    guard openingBrackets.count ==\
    \ closingBrackets.count else {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        if let closingBracket = closingBrackets.firstIndex(of:\
    \ openingBracket) {\n            closingBrackets.remove(at: closingBracket)\n\
    \        }\n    }\n    return openingBrackets.count == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7wpy7zk9.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp7wpy7zk9.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n\n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzmkbdjm9.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzmkbdjm9.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzmkbdjm9.swift:21:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[i] != closingBrackets[i] {\n           ^~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpzmkbdjm9.swift:21:34:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n                                 ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpzmkbdjm9.swift:13:9: warning:\
    \ variable 'openingBrackets' was never mutated; consider changing to 'let' constant\n\
    \    var openingBrackets = brackets.characters\n    ~~~ ^\n    let\n/tmp/tmpzmkbdjm9.swift:14:9:\
    \ warning: variable 'closingBrackets' was never mutated; consider changing to\
    \ 'let' constant\n    var closingBrackets = brackets.characters\n    ~~~ ^\n \
    \   let\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: CharacterSet.openingParenthesis)\n\
    \    let closingBrackets = brackets.components(separatedBy: CharacterSet.closingParenthesis)\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxggo1q2a.swift:13:60: error: cannot find 'CharacterSet' in scope\n\
    \    let openingBrackets = brackets.components(separatedBy: CharacterSet.openingParenthesis)\n\
    \                                                           ^~~~~~~~~~~~\n/tmp/tmpxggo1q2a.swift:13:36:\
    \ error: value of type 'String' has no member 'components'\n    let openingBrackets\
    \ = brackets.components(separatedBy: CharacterSet.openingParenthesis)\n      \
    \                    ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpxggo1q2a.swift:14:60: error:\
    \ cannot find 'CharacterSet' in scope\n    let closingBrackets = brackets.components(separatedBy:\
    \ CharacterSet.closingParenthesis)\n                                         \
    \                  ^~~~~~~~~~~~\n/tmp/tmpxggo1q2a.swift:14:36: error: value of\
    \ type 'String' has no member 'components'\n    let closingBrackets = brackets.components(separatedBy:\
    \ CharacterSet.closingParenthesis)\n                          ~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm3fj981y.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpm3fj981y.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    opening.removeLast()\n    closing.removeLast()\n    if opening.isEmpty {\n\
    \        return closing.isEmpty && closing.count == 0\n    }\n    if closing.isEmpty\
    \ {\n        return closing.count == 0\n    }\n    if opening.count != closing.count\
    \ {\n        return false\n    }\n    for index in 0..<opening.count {\n     \
    \   if opening[index] != closing[index] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu5wf88j6.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpu5wf88j6.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpu5wf88j6.swift:27:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if opening[index] != closing[index] {\n\
    \           ^~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpu5wf88j6.swift:27:30: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if opening[index] != closing[index] {\n                             ^~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        guard openingBrackets[openingBracketIndex] == \")\" else {\n        \
    \    return false\n        }\n        openingBracketIndex += 1\n        closingBracketIndex\
    \ += 1\n    }\n\n    while openingBracketIndex < brackets.endIndex {\n       \
    \ guard openingBrackets[openingBracketIndex] != \"(\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        closingBracketIndex\
    \ += 1\n    }\n\n    while closingBracketIndex < brackets.endIndex {\n       \
    \ guard closingBrackets[closingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        closingBracketIndex\
    \ += 1\n    }\n\n    while closingBracketIndex < brackets.endIndex {\n       \
    \ guard closingBrackets[closingBracketIndex] != \"(\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        closingBracketIndex\
    \ += 1\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp1fpwt2t.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpp1fpwt2t.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpp1fpwt2t.swift:22:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpp1fpwt2t.swift:23:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmpp1fpwt2t.swift:30:29: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n        openingBracketIndex += 1\n\
    \        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpp1fpwt2t.swift:31:29: error: binary\
    \ operator '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n\
    \        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpp1fpwt2t.swift:38:29:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^ \
    \ ~\n/tmp/tmpp1fpwt2t.swift:39:29: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n        closingBracketIndex +=\
    \ 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpp1fpwt2t.swift:46:29: error: binary\
    \ operator '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n\
    \        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpp1fpwt2t.swift:47:29:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ an"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: CharacterSet.openingParenthesis)\n\
    \    let closingBrackets = brackets.components(separatedBy: CharacterSet.closingParenthesis)\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxggo1q2a.swift:13:60: error: cannot find 'CharacterSet' in scope\n\
    \    let openingBrackets = brackets.components(separatedBy: CharacterSet.openingParenthesis)\n\
    \                                                           ^~~~~~~~~~~~\n/tmp/tmpxggo1q2a.swift:13:36:\
    \ error: value of type 'String' has no member 'components'\n    let openingBrackets\
    \ = brackets.components(separatedBy: CharacterSet.openingParenthesis)\n      \
    \                    ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpxggo1q2a.swift:14:60: error:\
    \ cannot find 'CharacterSet' in scope\n    let closingBrackets = brackets.components(separatedBy:\
    \ CharacterSet.closingParenthesis)\n                                         \
    \                  ^~~~~~~~~~~~\n/tmp/tmpxggo1q2a.swift:14:36: error: value of\
    \ type 'String' has no member 'components'\n    let closingBrackets = brackets.components(separatedBy:\
    \ CharacterSet.closingParenthesis)\n                          ~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var bracketStack = [String]()\n    var bracketCount = 0\n    for bracket\
    \ in brackets {\n        if bracket == \"(\" {\n            bracketStack.append(bracket)\n\
    \            bracketCount++\n        } else if bracket == \")\" {\n          \
    \  if bracketCount > 0 {\n                bracketCount--\n            } else {\n\
    \                return false\n            }\n        }\n    }\n    if bracketCount\
    \ != 0 {\n        return false\n    }\n    for bracket in bracketStack {\n   \
    \     if bracket != \"(\" {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy89sazg7.swift:17:33: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            bracketStack.append(bracket)\n\
    \                                ^\n/tmp/tmpy89sazg7.swift:18:25: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            bracketCount++\n\
    \                        ^~\n/tmp/tmpy89sazg7.swift:21:29: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n                bracketCount--\n\
    \                            ^~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    var openingCount = 1\n    var closingCount = 1\n    for _ in brackets.characters\
    \ {\n        if opening.last == closing.first {\n            opening.removeLast()\n\
    \            openingCount -= 1\n        } else {\n            closing.removeFirst()\n\
    \            closingCount += 1\n        }\n    }\n    return openingCount == 0\
    \ && closingCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpufn9yk_x.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpufn9yk_x.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpufn9yk_x.swift:17:23:\
    \ error: 'characters' is unavailable: Please use String directly\n    for _ in\
    \ brackets.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm3fj981y.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpm3fj981y.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var bracketCount = 0\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    for bracket in brackets {\n        if bracket == \"(\" {\n        \
    \    openingBracketCount++\n        } else if bracket == \")\" {\n           \
    \ closingBracketCount++\n        } else {\n            bracketCount++\n      \
    \  }\n    }\n    return bracketCount == openingBracketCount && bracketCount ==\
    \ closingBracketCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr16iecyy.swift:18:32: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            openingBracketCount++\n                  \
    \             ^~\n/tmp/tmpr16iecyy.swift:20:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            closingBracketCount++\n        \
    \                       ^~\n/tmp/tmpr16iecyy.swift:22:25: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            bracketCount++\n          \
    \              ^~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    while openingBracketIndex < brackets.endIndex {\n\
    \        let openingBracket = brackets.characters[openingBracketIndex]\n     \
    \   let closingBracket = brackets.characters[closingBracketIndex]\n        if\
    \ openingBracket == \"(\" {\n            openingBracketIndex += 1\n          \
    \  if openingBracketIndex >= brackets.endIndex {\n                return false\n\
    \            }\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \")\" {\n            openingBracketIndex += 1\n            if openingBracketIndex\
    \ >= brackets.endIndex {\n                return false\n            }\n      \
    \      closingBracketIndex += 1\n            openingBracketIndex += 1\n      \
    \  } else {\n            openingBracketIndex += 1\n            if openingBracketIndex\
    \ >= brackets.endIndex {\n                return false\n            }\n      \
    \  }\n    }\n    return openingBracketIndex == closingBracketIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsbescu8_.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpsbescu8_.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpsbescu8_.swift:18:39: error: 'characters' is unavailable:\
    \ Please use String directly\n        let openingBracket = brackets.characters[openingBracketIndex]\n\
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpsbescu8_.swift:19:39: error: 'characters' is unavailable:\
    \ Please use String directly\n        let closingBracket = brackets.characters[closingBracketIndex]\n\
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpsbescu8_.swift:21:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpsbescu8_.swift:25:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpsbescu8_.swift:27:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpsbescu8_.swift:31:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.characters.split{$0 == \")\"}.map(String.init)\n\
    \    let closingBrackets = brackets.characters.split{$0 == \"(\"}.map(String.init)\n\
    \    return openingBrackets.count == closingBrackets.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmph_ftfpla.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    let openingBrackets = brackets.characters.split{$0\
    \ == \")\"}.map(String.init)\n                                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmph_ftfpla.swift:14:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    let closingBrackets\
    \ = brackets.characters.split{$0 == \"(\"}.map(String.init)\n                \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        switch brackets[openingBracketIndex]\
    \ {\n        case ')':\n            openingBracketCount--\n            if openingBracketCount\
    \ == 0 {\n                openingBracketIndex = openingBracketIndex + 1\n    \
    \        }\n        case ')':\n            closingBracketCount++\n           \
    \ if closingBracketCount == 1 {\n                closingBracketIndex = closingBracketIndex\
    \ + 1\n            }\n        default:\n            openingBracketCount++\n  \
    \          closingBracketCount = 0\n        }\n    }\n    return openingBracketIndex\
    \ == brackets.endIndex && closingBracketIndex == brackets.endIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqau44_jt.swift:21:14: error: single-quoted string literal found,\
    \ use '\"'\n        case ')':\n             ^~~\n             \")\"\n/tmp/tmpqau44_jt.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case ')':\n   \
    \          ^~~\n             \")\"\n/tmp/tmpqau44_jt.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqau44_jt.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqau44_jt.swift:22:32: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n            openingBracketCount--\n        \
    \                       ^~\n/tmp/tmpqau44_jt.swift:24:59: error: binary operator\
    \ '+' cannot be applied to operands of type 'String.Index' and 'Int'\n       \
    \         openingBracketIndex = openingBracketIndex + 1\n                    \
    \                  ~~~~~~~~~~~~~~~~~~~ ^ ~\n/tmp/tmpqau44_jt.swift:24:59: note:\
    \ overloads for '+' exist with these partially matching parameter lists: (Int,\
    \ Int)\n                openingBracketIndex = openingBracketIndex + 1\n      \
    \                                                    ^\n/tmp/tmpqau44_jt.swift:27:32:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  closingBracketCount++\n                               ^~\n/tmp/tmpqau44_jt.swift:29:59:\
    \ error: binary operator '+' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n                closingBracketIndex = closingBracketIndex + 1\n \
    \                                     ~~~~~~~~~~~~~~~~~~~ ^ ~\n/tmp/tmpqau44_jt.swift:29:59:\
    \ note: overloads for '+' exist with these partially matching parameter list"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for openingBracket\
    \ in openingBrackets {\n        if let closingBracket = closingBrackets.firstIndex(of:\
    \ openingBracket) {\n            closingBrackets.remove(at: closingBracket)\n\
    \        }\n    }\n    \n    return openingBrackets.count == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmjzlowp4.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpmjzlowp4.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters.split{$0 == \")\"}.count\n    var closing\
    \ = brackets.characters.split{$0 == \"(\"}.count\n    return opening == closing\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpumz0z0mq.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters.split{$0 == \")\"\
    }.count\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpumz0z0mq.swift:14:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing = brackets.characters.split{$0 ==\
    \ \"(\"}.count\n                           ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpumz0z0mq.swift:13:9: warning: variable\
    \ 'opening' was never mutated; consider changing to 'let' constant\n    var opening\
    \ = brackets.characters.split{$0 == \")\"}.count\n    ~~~ ^\n    let\n/tmp/tmpumz0z0mq.swift:14:9:\
    \ warning: variable 'closing' was never mutated; consider changing to 'let' constant\n\
    \    var closing = brackets.characters.split{$0 == \"(\"}.count\n    ~~~ ^\n \
    \   let\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: CharacterSet.openingParenthesis)\n\
    \    let closingBrackets = brackets.components(separatedBy: CharacterSet.closingParenthesis)\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxggo1q2a.swift:13:60: error: cannot find 'CharacterSet' in scope\n\
    \    let openingBrackets = brackets.components(separatedBy: CharacterSet.openingParenthesis)\n\
    \                                                           ^~~~~~~~~~~~\n/tmp/tmpxggo1q2a.swift:13:36:\
    \ error: value of type 'String' has no member 'components'\n    let openingBrackets\
    \ = brackets.components(separatedBy: CharacterSet.openingParenthesis)\n      \
    \                    ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpxggo1q2a.swift:14:60: error:\
    \ cannot find 'CharacterSet' in scope\n    let closingBrackets = brackets.components(separatedBy:\
    \ CharacterSet.closingParenthesis)\n                                         \
    \                  ^~~~~~~~~~~~\n/tmp/tmpxggo1q2a.swift:14:36: error: value of\
    \ type 'String' has no member 'components'\n    let closingBrackets = brackets.components(separatedBy:\
    \ CharacterSet.closingParenthesis)\n                          ~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    while openingBracketIndex < brackets.endIndex {\n\
    \        if openingBrackets[openingBracketIndex] == \")\" {\n            closingBracketIndex--\n\
    \        } else if openingBrackets[openingBracketIndex] != \"(\" {\n         \
    \   return false\n        }\n        openingBracketIndex++\n    }\n    while closingBracketIndex\
    \ < brackets.endIndex {\n        if closingBrackets[closingBracketIndex] == \"\
    )\" {\n            openingBracketIndex++\n        } else if closingBrackets[closingBracketIndex]\
    \ != \"(\" {\n            return false\n        }\n        closingBracketIndex++\n\
    \    }\n    return openingBracketIndex == closingBracketIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbeymnjci.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbeymnjci.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbeymnjci.swift:19:32: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n            closingBracketIndex--\n        \
    \                       ^~\n/tmp/tmpbeymnjci.swift:23:28: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        openingBracketIndex++\n       \
    \                    ^~\n/tmp/tmpbeymnjci.swift:27:32: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            openingBracketIndex++\n   \
    \                            ^~\n/tmp/tmpbeymnjci.swift:31:28: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n        closingBracketIndex++\n\
    \                           ^~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n\n    while openingBracketsIndex < openingBracketsCount {\n        openingBracketsIndex\
    \ += 1\n        if openingBrackets[openingBracketsIndex] != \")\" {\n        \
    \    continue\n        }\n        openingBracketsIndex += 1\n        if openingBrackets[openingBracketsIndex]\
    \ != \")\" {\n            continue\n        }\n        openingBracketsIndex +=\
    \ 1\n        if openingBrackets[openingBracketsIndex] != \")\" {\n           \
    \ continue\n        }\n        openingBracketsIndex += 1\n        if openingBrackets[openingBracketsIndex]\
    \ != \")\" {\n            continue\n        }\n        openingBracketsIndex +=\
    \ 1\n        if openingBrackets[openingBracketsIndex] != \")\" {\n           \
    \ continue\n        }\n        openingBracketsIndex += 1\n        if openingBrackets[openingBracketsIndex]\
    \ != \")\" {\n            continue\n        }\n        openingBracketsIndex +=\
    \ 1\n        if openingBrackets[openingBracketsIndex] != \")\" {\n           \
    \ continue\n        }\n        openingBracketsIndex += 1\n        if openingBrackets[openingBracketsIndex]\
    \ != \")\" {\n            continue\n        }\n        openingBracketsIndex +=\
    \ 1\n        if openingBrackets[openingBracketsIndex] != \")\" {\n           \
    \ continue\n        }\n        openingBracketsIndex += 1\n        if openingBrackets[openingBracketsIndex]\
    \ != \")\" {\n            continue\n        }\n        openingBracketsIndex +=\
    \ 1\n        if openingBrackets[openingBracketsIndex] != \")\" {\n           \
    \ continue\n        }\n        openingBracketsIndex += 1\n        if openingBrackets[openingBracketsIndex]\
    \ != \")\" {\n            continue\n        }\n        openingBracketsIndex +=\
    \ 1\n        if openingBrackets[openingBracketsIndex] != \")\" {\n           \
    \ continue\n        }\n        openingBracketsIndex += 1\n        if openingBrackets[openingBracketsIndex]\
    \ != \")\" {\n            continue\n        }\n        openingBracketsIndex +=\
    \ 1\n        if openingBrackets[opening\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6dlnycw5.swift:79:1: error: expected ']' in expression list\n}\n\
    ^\n/tmp/tmp6dlnycw5.swift:78:27: note: to match this opening '['\n        if openingBrackets[opening\n\
    \                          ^\n/tmp/tmp6dlnycw5.swift:105:66: error: expected '}'\
    \ at end of brace statement\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmp6dlnycw5.swift:12:51: note: to match this opening '{'\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n                                                  ^\n/tmp/tmp6dlnycw5.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp6dlnycw5.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp6dlnycw5.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp6dlnycw5.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp6dlnycw5.swift:22:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if openingBrackets[openingBracketsIndex] != \")\" {"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n    var openingBracketsCountIndex = 0\n    var closingBracketsCountIndex\
    \ = 0\n\n    while openingBracketsCount > 0 || closingBracketsCount > 0 {\n  \
    \      if openingBracketsCount > 0 {\n            if openingBrackets[openingBracketsIndex]\
    \ == \")\" {\n                openingBracketsCount -= 1\n                openingBracketsIndex\
    \ += 1\n            } else if openingBrackets[openingBracketsIndex] != \"(\" {\n\
    \                openingBracketsCount -= 1\n                openingBracketsIndex\
    \ += 1\n            } else {\n                openingBracketsCount -= 1\n    \
    \            openingBracketsIndex += 1\n                openingBracketsCountIndex\
    \ += 1\n            }\n        }\n\n        if closingBracketsCount > 0 {\n  \
    \          if closingBrackets[closingBracketsIndex] == \")\" {\n             \
    \   closingBracketsCount -= 1\n                closingBracketsIndex += 1\n   \
    \         } else if closingBrackets[closingBracketsIndex] != \"(\" {\n       \
    \         closingBracketsCount -= 1\n                closingBracketsIndex += 1\n\
    \            } else {\n                closingBracketsCount -= 1\n           \
    \     closingBracketsIndex += 1\n                closingBracketsCountIndex +=\
    \ 1\n            }\n        }\n    }\n\n    if openingBracketsCount != closingBracketsCount\
    \ {\n        return false\n    }\n\n    if openingBracketsIndex < closingBracketsIndex\
    \ {\n        return true\n    }\n\n    if openingBracketsIndex > closingBracketsIndex\
    \ {\n        return false\n    }\n\n    return openingBracketsIndex == closingBracketsIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2z22rjfa.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2z22rjfa.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2z22rjfa.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp2z22rjfa.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp2z22rjfa.swift:24:16: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            if openingBrackets[openingBracketsIndex] == \")\" {\n           \
    \    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp2z22rjfa.swift:27:23: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            } else if openingBrackets[openingBracketsIndex] != \"(\" {\n    \
    \                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscrip"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm3fj981y.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpm3fj981y.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets.characters[openingBracketIndex]\n        if openingBracket == \"\
    (\" {\n            openingBracketCount++\n        } else if openingBracket ==\
    \ \")\" {\n            openingBracketCount--\n        }\n\n        if openingBracketCount\
    \ == 0 {\n            openingBracketIndex++\n        }\n\n        if openingBracketCount\
    \ == 0 {\n            closingBracketIndex++\n        }\n    }\n\n    while closingBracketIndex\
    \ < brackets.endIndex {\n        let closingBracket = brackets.characters[closingBracketIndex]\n\
    \        if closingBracket == \")\" {\n            closingBracketCount++\n   \
    \     } else if closingBracket == \"(\" {\n            closingBracketCount--\n\
    \        }\n\n        if closingBracketCount == 0 {\n            closingBracketIndex++\n\
    \        }\n\n        if closingBracketCount == 0 {\n            openingBracketIndex++\n\
    \        }\n    }\n\n    return openingBracketCount == 0 && closingBracketCount\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfr2ssc3j.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfr2ssc3j.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfr2ssc3j.swift:21:39: error: 'characters' is unavailable:\
    \ Please use String directly\n        let openingBracket = brackets.characters[openingBracketIndex]\n\
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfr2ssc3j.swift:23:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketCount++\n        \
    \                       ^~\n/tmp/tmpfr2ssc3j.swift:25:32: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            openingBracketCount--\n   \
    \                            ^~\n/tmp/tmpfr2ssc3j.swift:29:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            openingBracketIndex++\n\
    \                               ^~\n/tmp/tmpfr2ssc3j.swift:33:32: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            closingBracketIndex++\n\
    \                               ^~\n/tmp/tmpfr2ssc3j.swift:38:39: error: 'characters'\
    \ is unavailable: Please use String directly\n        let closingBracket = brackets.characters[closingBracketIndex]\n\
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfr2ssc3j.swift:40:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    opening.removeLast()\n    closing.removeFirst()\n    if opening.isEmpty()\
    \ {\n        return true\n    }\n    if closing.isEmpty() {\n        return false\n\
    \    }\n    if opening.first == closing.first {\n        return correct_bracketing(opening.dropFirst(),\
    \ closing.dropLast())\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp81ttbzbc.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp81ttbzbc.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp81ttbzbc.swift:17:16:\
    \ error: cannot call value of non-function type 'Bool'\n    if opening.isEmpty()\
    \ {\n               ^      ~~\n                      \n/tmp/tmp81ttbzbc.swift:20:16:\
    \ error: cannot call value of non-function type 'Bool'\n    if closing.isEmpty()\
    \ {\n               ^      ~~\n                      \n/tmp/tmp81ttbzbc.swift:24:64:\
    \ error: extra argument in call\n        return correct_bracketing(opening.dropFirst(),\
    \ closing.dropLast())\n                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\n\
    /tmp/tmp81ttbzbc.swift:24:43: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to expected argument type 'String'\n        return correct_bracketing(opening.dropFirst(),\
    \ closing.dropLast())\n                                          ^\n         \
    \                         String(            )\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var bracketsStack = [String]()\n    var bracketsStackCopy = [String]()\n\
    \    var openingBrackets = brackets.characters\n\n    for char in openingBrackets\
    \ {\n        if char == \"(\" {\n            bracketsStack.append(char)\n    \
    \    }\n        if char == \")\" {\n            if bracketsStack.count > 0 {\n\
    \                bracketsStack.removeLast()\n            }\n        }\n    }\n\
    \n    for char in openingBrackets {\n        if char == \"(\" {\n            bracketsStackCopy.append(char)\n\
    \        }\n        if char == \")\" {\n            if bracketsStackCopy.count\
    \ > 0 {\n                bracketsStackCopy.removeLast()\n            }\n     \
    \   }\n    }\n\n    return bracketsStack.count == bracketsStackCopy.count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsg00vm91.swift:15:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpsg00vm91.swift:19:34: error: cannot convert value of\
    \ type 'Character' to expected argument type 'String'\n            bracketsStack.append(char)\n\
    \                                 ^\n/tmp/tmpsg00vm91.swift:30:38: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       bracketsStackCopy.append(char)\n                                     ^\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var bracketCount = 0\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    var openingBrackets = brackets\n    for char in openingBrackets {\n\
    \        if char == '(' {\n            openingBracketCount += 1\n        } else\
    \ if char == ')' {\n            closingBracketCount += 1\n        }\n    }\n \
    \   if openingBracketCount != closingBracketCount {\n        return false\n  \
    \  }\n    for char in openingBrackets {\n        if char == '(' {\n          \
    \  bracketCount += 1\n        } else if char == ')' {\n            bracketCount\
    \ -= 1\n        }\n    }\n    if bracketCount != 0 {\n        return false\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_34t6pfi.swift:18:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmp_34t6pfi.swift:20:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmp_34t6pfi.swift:28:20: error: single-quoted\
    \ string literal found, use '\"'\n        if char == '(' {\n                 \
    \  ^~~\n                   \"(\"\n/tmp/tmp_34t6pfi.swift:30:27: error: single-quoted\
    \ string literal found, use '\"'\n        } else if char == ')' {\n          \
    \                ^~~\n                          \")\"\n/tmp/tmp_34t6pfi.swift:16:9:\
    \ warning: variable 'openingBrackets' was never mutated; consider changing to\
    \ 'let' constant\n    var openingBrackets = brackets\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        let openingBracket = openingBrackets[i]\n\
    \        let closingBracket = closingBrackets[i]\n        \n        if openingBracket\
    \ != closingBracket {\n            return false\n        }\n    }\n    \n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp2uxztq1.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpp2uxztq1.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        openingBracketCount += 1\n        if\
    \ openingBracket == \"(\" {\n            openingBracketIndex += 1\n        } else\
    \ if openingBracket == \")\" {\n            openingBracketIndex += 1\n       \
    \     closingBracketCount += 1\n            if closingBracketCount > 1 {\n   \
    \             closingBracketIndex += 1\n                closingBracketCount =\
    \ 0\n            }\n        } else {\n            openingBracketIndex += 1\n \
    \       }\n    }\n    return openingBracketCount == closingBracketCount\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi9b1duy3.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpi9b1duy3.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpi9b1duy3.swift:23:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpi9b1duy3.swift:25:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpi9b1duy3.swift:28:37: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n                closingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpi9b1duy3.swift:32:33:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for openingBracket\
    \ in openingBrackets {\n        if let closingBracket = closingBrackets.firstIndex(of:\
    \ openingBracket) {\n            closingBrackets.remove(at: closingBracket)\n\
    \        }\n    }\n    \n    return openingBrackets.count == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmjzlowp4.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpmjzlowp4.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    var openingBracketsCount = 1\n    var closingBracketsCount = 1\n\n    for\
    \ index in 0..<brackets.characters.count {\n        let character = brackets.characters[index]\n\
    \        switch character {\n        case \")\":\n            closingBracketsCount--\n\
    \        case \"(\":\n            openingBracketsCount--\n        default:\n \
    \           break\n        }\n\n        if openingBracketsCount < 0 {\n      \
    \      return false\n        }\n\n        if closingBracketsCount < 0 {\n    \
    \        return false\n        }\n\n        if openingBracketsCount == 0 {\n \
    \           openingBrackets.removeAtIndex(index)\n        }\n\n        if closingBracketsCount\
    \ == 0 {\n            closingBrackets.removeAtIndex(index)\n        }\n    }\n\
    \n    return brackets.characters.count == openingBrackets.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6_bkrdvy.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp6_bkrdvy.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp6_bkrdvy.swift:19:31: error: 'characters' is unavailable:\
    \ Please use String directly\n    for index in 0..<brackets.characters.count {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp6_bkrdvy.swift:20:25: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ character = brackets.characters[index]\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp6_bkrdvy.swift:20:34:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ character = brackets.characters[index]\n                                 ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp6_bkrdvy.swift:23:33:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  closingBracketsCount--\n                                ^~\n/tmp/tmp6_bkrdvy.swift:25:33:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  openingBracketsCount--\n                                ^~\n/tmp/tmp6_bkrdvy.swift:39:29:\
    \ error: value of type 'String' has no member 'removeAt"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for openingBracket\
    \ in openingBrackets {\n        if let closingBracket = closingBrackets.firstIndex(of:\
    \ openingBracket) {\n            closingBrackets.remove(at: closingBracket)\n\
    \        }\n    }\n    \n    return openingBrackets.count == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmjzlowp4.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpmjzlowp4.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    return openingBrackets.count\
    \ == closingBrackets.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfbz4cdko.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpfbz4cdko.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm3fj981y.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpm3fj981y.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n\n    if openingBracketsCount == 0 {\n        return\
    \ true\n    }\n\n    if openingBracketsCount == 1 {\n        if openingBrackets[0]\
    \ == closingBrackets[0] {\n            return true\n        }\n    }\n\n    if\
    \ openingBracketsCount > 1 {\n        if openingBrackets[0] == closingBrackets[openingBracketsCount\
    \ - 1] {\n            openingBrackets.remove(at: openingBracketsCount - 1)\n \
    \           closingBrackets.remove(at: 0)\n            openingBracketsCount -=\
    \ 1\n            closingBracketsCount -= 1\n        }\n    }\n\n    if openingBracketsCount\
    \ != closingBracketsCount {\n        return false\n    }\n\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_oyf_ldb.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_oyf_ldb.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_oyf_ldb.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp_oyf_ldb.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp_oyf_ldb.swift:23:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if openingBrackets[0] == closingBrackets[0] {\n           ^~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_oyf_ldb.swift:23:34:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[0] == closingBrackets[0]\
    \ {\n                                 ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp_o"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n\n    if openingBracketsCount == 0 {\n        return\
    \ true\n    }\n\n    if openingBracketsCount == 1 {\n        if openingBrackets[0]\
    \ == closingBrackets[0] {\n            return true\n        }\n    }\n\n    if\
    \ openingBracketsCount > 1 {\n        if openingBrackets[0] == closingBrackets[openingBracketsCount\
    \ - 1] {\n            openingBracketsCount--\n        }\n    }\n\n    if openingBracketsCount\
    \ != closingBracketsCount {\n        return false\n    }\n\n    if openingBrackets[0]\
    \ != closingBrackets[0] {\n        return false\n    }\n\n    return correct_bracketing(brackets:\
    \ brackets)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqko3kse_.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqko3kse_.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqko3kse_.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpqko3kse_.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpqko3kse_.swift:23:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if openingBrackets[0] == closingBrackets[0] {\n           ^~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpqko3kse_.swift:23:34:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[0] == closingBrackets[0]\
    \ {\n                                 ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpqk"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    while openingBracketIndex < brackets.endIndex {\n\
    \        guard openingBrackets[openingBracketIndex] == \")\" else {\n        \
    \    return false\n        }\n        openingBracketIndex += 1\n        guard\
    \ openingBrackets[openingBracketIndex] == \")\" else {\n            return false\n\
    \        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        open\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvqnmxku7.swift:104:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmpvqnmxku7.swift:12:51:\
    \ note: to match this opening '{'\nfunc correct_bracketing(brackets: String) ->\
    \ Bool {\n                                                  ^\n/tmp/tmpvqnmxku7.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpvqnmxku7.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvqnmxku7.swift:21:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpvqnmxku7.swift:25:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmpvqnmxku7.swift:29:29: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n        openingBracketIndex += 1\n\
    \        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpvqnmxku7.swift:33:29: error: binary\
    \ operator '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n\
    \        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpvqnmxku7.swift:37:29:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^ \
    \ ~\n/tmp/tmpvqnmxku7.swift:41:29: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' "
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var bracketCount = 0\n    var lastChar = brackets.characters.last!\n    for\
    \ char in brackets.characters {\n        if char == lastChar {\n            bracketCount\
    \ += 1\n        } else {\n            bracketCount = 0\n        }\n        lastChar\
    \ = char\n    }\n    return bracketCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpud0xu1j9.swift:14:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var lastChar = brackets.characters.last!\n        \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpud0xu1j9.swift:15:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in brackets.characters {\n               \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    guard openingBrackets.count ==\
    \ closingBrackets.count else {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        guard let closingBracket = closingBrackets.firstIndex(of:\
    \ openingBracket) else { return false }\n        guard openingBracket != closingBracket\
    \ else { return false }\n        guard openingBrackets.count > 1 else { return\
    \ false }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcqabk51t.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpcqabk51t.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    for openingBracket in openingBrackets {\n        if closingBrackets.contains(openingBracket)\
    \ {\n            closingBrackets.remove(openingBracket)\n        } else {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa5i80_gv.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpa5i80_gv.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpa5i80_gv.swift:18:29: error: no exact matches in call\
    \ to instance method 'remove'\n            closingBrackets.remove(openingBracket)\n\
    \                            ^\n/tmp/tmpa5i80_gv.swift:18:29: note: candidate\
    \ expects value of type 'String.Index' for parameter #1 (got 'Character')\n  \
    \          closingBrackets.remove(openingBracket)\n                          \
    \  ^\n/tmp/tmpa5i80_gv.swift:18:29: note: candidate expects value of type 'String.Index'\
    \ for parameter #1 (got 'Character')\n            closingBrackets.remove(openingBracket)\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm3fj981y.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpm3fj981y.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        let currentChar\
    \ = brackets.characters[openingBracketIndex]\n        if currentChar == \")\"\
    \ {\n            closingBracketCount++\n        } else if currentChar == \"(\"\
    \ {\n            openingBracketCount++\n        }\n        openingBracketIndex++\n\
    \    }\n    while closingBracketIndex < brackets.endIndex {\n        let currentChar\
    \ = brackets.characters[closingBracketIndex]\n        if currentChar == \")\"\
    \ {\n            closingBracketCount--\n        } else if currentChar == \"(\"\
    \ {\n            openingBracketCount--\n        }\n        closingBracketIndex++\n\
    \    }\n    return openingBracketCount == 0 && closingBracketCount == 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpigilds62.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpigilds62.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpigilds62.swift:20:36: error: 'characters' is unavailable:\
    \ Please use String directly\n        let currentChar = brackets.characters[openingBracketIndex]\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpigilds62.swift:22:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            closingBracketCount++\n        \
    \                       ^~\n/tmp/tmpigilds62.swift:24:32: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            openingBracketCount++\n   \
    \                            ^~\n/tmp/tmpigilds62.swift:26:28: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n        openingBracketIndex++\n\
    \                           ^~\n/tmp/tmpigilds62.swift:29:36: error: 'characters'\
    \ is unavailable: Please use String directly\n        let currentChar = brackets.characters[closingBracketIndex]\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpigilds62.swift:31:32: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n            closingBracketCount--\n        \
    \                       ^~\n/tmp/tmpigilds62.swift:33:32: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            openingB"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    var openingCount = brackets.characters.count\n    var closingCount = brackets.characters.count\n\
    \    var openingIndex = 0\n    var closingIndex = 0\n\n    while openingIndex\
    \ < openingCount {\n        opening = brackets[openingIndex..<openingIndex+closingCount]\n\
    \        closing = brackets[openingIndex+closingCount..<openingCount+closingCount+openingCount]\n\
    \        openingIndex += openingCount\n        closingIndex += openingCount\n\
    \        openingCount = brackets.characters.count\n        closingCount = brackets.characters.count\n\
    \    }\n\n    return openingIndex == openingCount && closingIndex == closingCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdmgx783d.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpdmgx783d.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpdmgx783d.swift:15:33:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingCount\
    \ = brackets.characters.count\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpdmgx783d.swift:16:33: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingCount = brackets.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdmgx783d.swift:21:19: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an integer range, use a String.Index range instead.\n\
    \        opening = brackets[openingIndex..<openingIndex+closingCount]\n      \
    \            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound == Int\
    \ { get }\n           ^\n/tmp/tmpdmgx783d.swift:22:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n        closing = brackets[openingIndex+closingCount..<openingCount+closingCount+openingCount]\n\
    \                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.S"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for openingBracket\
    \ in openingBrackets {\n        if !closingBrackets.contains(where: { $0 == openingBracket\
    \ }) {\n            return false\n        }\n    }\n    \n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj6zcidfp.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpj6zcidfp.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        openingBracketCount++\n\n        if\
    \ openingBracket == \"(\" {\n            openingBracketIndex++\n        } else\
    \ if openingBracket == \")\" {\n            openingBracketIndex++\n          \
    \  closingBracketCount++\n        } else if openingBracket == \"{\" {\n      \
    \      openingBracketIndex++\n            closingBracketCount++\n        } else\
    \ if openingBracket == \"}\" {\n            openingBracketIndex++\n          \
    \  closingBracketCount++\n        } else if openingBracket == \"[\" {\n      \
    \      openingBracketIndex++\n            closingBracketCount++\n        } else\
    \ if openingBracket == \"]\" {\n            openingBracketIndex++\n          \
    \  closingBracketCount++\n        } else if openingBracket == \"<\" {\n      \
    \      openingBracketIndex++\n            closingBracketCount++\n        } else\
    \ if openingBracket == \">\" {\n            openingBracketIndex++\n          \
    \  closingBracketCount++\n        } else if openingBracket == \"(\" {\n      \
    \      openingBracketIndex++\n            closingBracketCount++\n        } else\
    \ if openingBracket == \")\" {\n            openingBracketIndex++\n          \
    \  closingBracketCount++\n        } else if openingBracket == \"{\" {\n      \
    \      openingBracketIndex++\n            closingBracketCount++\n        } else\
    \ if openingBracket == \"}\" {\n            openingBracketIndex++\n          \
    \  closingBracketCount++\n        } else if openingBracket == \"[\" {\n      \
    \      openingBracketIndex++\n            closingBracketCount++\n        } else\
    \ if openingBracket == \"]\" {\n            openingBracketIndex++\n          \
    \  closingBracketCount++\n        } else if openingBracket == \"<\" {\n      \
    \      openingBracketIndex++\n            closingBracketCount++\n        } else\
    \ if openingBracket == \">\" {\n            openingBracketIndex++\n          \
    \  closingBracketCount++\n        \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbe648s99.swift:98:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmpbe648s99.swift:20:51:\
    \ note: to match this opening '{'\n    while openingBracketIndex < brackets.endIndex\
    \ {\n                                                  ^\n/tmp/tmpbe648s99.swift:98:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmpbe648s99.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpbe648s99.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbe648s99.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbe648s99.swift:22:28: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        openingBracketCount++\n            \
    \               ^~\n/tmp/tmpbe648s99.swift:25:32: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            openingBracketIndex++\n   \
    \                            ^~\n/tmp/tmpbe648s99.swift:27:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            openingBracketIndex++\n\
    \                               ^~\n/tmp/tmpbe648s99.swift:28:32: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            closingBracketCount++\n\
    \                               ^~\n/tmp/tmpbe648s99.swift:30:32: er"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketCount = brackets.characters.count\n    var closingBracketCount\
    \ = brackets.characters.count\n\n    for openingBracket in openingBrackets {\n\
    \        if openingBracket == \"(\" {\n            openingBracketCount--\n   \
    \     } else if openingBracket == \")\" {\n            openingBracketCount++\n\
    \        }\n    }\n\n    for closingBracket in closingBrackets {\n        if closingBracket\
    \ == \"(\" {\n            closingBracketCount++\n        } else if closingBracket\
    \ == \")\" {\n            closingBracketCount--\n        }\n    }\n\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpo9x21goj.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpo9x21goj.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpo9x21goj.swift:15:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpo9x21goj.swift:16:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpo9x21goj.swift:20:32: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n            openingBracketCount--\n        \
    \                       ^~\n/tmp/tmpo9x21goj.swift:22:32: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            openingBracketCount++\n   \
    \                            ^~\n/tmp/tmpo9x21goj.swift:28:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            closingBracketCount++\n\
    \                               ^~\n/tmp/tmpo9x21goj.swift:30:32: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketCount--\n\
    \                               ^~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var bracketCount = 0\n    for bracket in brackets {\n        if bracket ==\
    \ \"(\" {\n            bracketCount++\n        } else if bracket == \")\" {\n\
    \            bracketCount--\n        }\n    }\n    return bracketCount == 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy16cxs2e.swift:16:25: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            bracketCount++\n                        ^~\n\
    /tmp/tmpy16cxs2e.swift:18:25: error: cannot find operator '--' in scope; did you\
    \ mean '-= 1'?\n            bracketCount--\n                        ^~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters.count\n    var closing = 0\n    for c in\
    \ brackets.characters {\n        if c == \")\" {\n            closing++\n    \
    \    } else if c == \"(\" {\n            opening--\n        }\n    }\n    return\
    \ opening == 0 && closing == brackets.characters.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpctsohzsa.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters.count\n         \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpctsohzsa.swift:15:23: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in brackets.characters {\n                  \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpctsohzsa.swift:17:20:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  closing++\n                   ^~\n/tmp/tmpctsohzsa.swift:19:20: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            opening--\n \
    \                  ^~\n/tmp/tmpctsohzsa.swift:22:48: error: 'characters' is unavailable:\
    \ Please use String directly\n    return opening == 0 && closing == brackets.characters.count\n\
    \                                               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    opening.removeFirst()\n    closing.removeLast()\n    if opening.isEmpty()\
    \ {\n        return true\n    }\n    if closing.isEmpty() {\n        return false\n\
    \    }\n    if opening.first == closing.first {\n        return correct_bracketing(opening.dropFirst(),\
    \ closing.dropLast())\n    }\n    return correct_bracketing(opening.dropLast(),\
    \ closing.dropFirst())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzwat6iu3.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpzwat6iu3.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpzwat6iu3.swift:17:16:\
    \ error: cannot call value of non-function type 'Bool'\n    if opening.isEmpty()\
    \ {\n               ^      ~~\n                      \n/tmp/tmpzwat6iu3.swift:20:16:\
    \ error: cannot call value of non-function type 'Bool'\n    if closing.isEmpty()\
    \ {\n               ^      ~~\n                      \n/tmp/tmpzwat6iu3.swift:24:64:\
    \ error: extra argument in call\n        return correct_bracketing(opening.dropFirst(),\
    \ closing.dropLast())\n                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\n\
    /tmp/tmpzwat6iu3.swift:24:43: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to expected argument type 'String'\n        return correct_bracketing(opening.dropFirst(),\
    \ closing.dropLast())\n                                          ^\n         \
    \                         String(            )\n/tmp/tmpzwat6iu3.swift:26:59:\
    \ error: extra argument in call\n    return correct_bracketing(opening.dropLast(),\
    \ closing.dropFirst())\n                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\n\
    /tmp/tmpzwat6iu3.swift:26:39: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to expected argument type 'String'\n    return correct_bracketing(opening.dropLast(),\
    \ closing.dropFirst())\n                                      ^\n            \
    \                  String(           )\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm3fj981y.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpm3fj981y.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for openingBracket\
    \ in openingBrackets {\n        if let closingBracket = closingBrackets.firstIndex(of:\
    \ openingBracket) {\n            closingBrackets.remove(at: closingBracket)\n\
    \        }\n    }\n    \n    return openingBrackets.count == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmjzlowp4.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpmjzlowp4.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = brackets.characters.count\n\
    \    var closingBracketCount = brackets.characters.count\n\n    while openingBracketIndex\
    \ < openingBracketCount {\n        let openingBracket = brackets.characters[openingBracketIndex]\n\
    \        if openingBracket == \"(\" {\n            openingBracketIndex += 1\n\
    \        } else if openingBracket == \")\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else {\n            return\
    \ false\n        }\n    }\n\n    while closingBracketIndex < closingBracketCount\
    \ {\n        let closingBracket = brackets.characters[closingBracketIndex]\n \
    \       if closingBracket == \"(\" {\n            closingBracketIndex += 1\n \
    \       } else if closingBracket == \")\" {\n            closingBracketIndex +=\
    \ 1\n            openingBracketIndex += 1\n        } else {\n            return\
    \ false\n        }\n    }\n\n    return openingBracketIndex == closingBracketIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkox6wzny.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpkox6wzny.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpkox6wzny.swift:17:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpkox6wzny.swift:18:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpkox6wzny.swift:20:31: error: referencing operator function\
    \ '<' on 'BinaryInteger' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \    while openingBracketIndex < openingBracketCount {\n                     \
    \         ^\nSwift.BinaryInteger:1:11: note: where 'Self' = 'String.Index'\nextension\
    \ BinaryInteger {\n          ^\n/tmp/tmpkox6wzny.swift:21:39: error: 'characters'\
    \ is unavailable: Please use String directly\n        let openingBracket = brackets.characters[openingBracketIndex]\n\
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpkox6wzny.swift:23:33: error: binary operator '+=' cannot\
    \ be applied to operands of type "
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        guard openingBrackets[openingBracketIndex] == \")\" else {\n        \
    \    return false\n        }\n        openingBracketIndex += 1\n        guard\
    \ openingBracketIndex < brackets.endIndex else {\n            return false\n \
    \       }\n        closingBracketIndex += 1\n        guard closingBracketIndex\
    \ < brackets.endIndex else {\n            return false\n        }\n        guard\
    \ openingBrackets[openingBracketIndex] == openingBrackets[closingBracketIndex]\
    \ else {\n            return false\n        }\n        openingBracketIndex +=\
    \ 1\n        closingBracketIndex += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjpfdxcb6.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpjpfdxcb6.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpjpfdxcb6.swift:22:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpjpfdxcb6.swift:26:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmpjpfdxcb6.swift:33:29: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n        openingBracketIndex += 1\n\
    \        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpjpfdxcb6.swift:34:29: error: binary\
    \ operator '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n\
    \        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        if openingBracket == \"(\" {\n    \
    \        openingBracketCount++\n        } else if openingBracket == \")\" {\n\
    \            openingBracketCount--\n        }\n        openingBracketIndex++\n\
    \    }\n\n    while closingBracketIndex < brackets.endIndex {\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n        if closingBracket == \"(\" {\n    \
    \        closingBracketCount++\n        } else if closingBracket == \")\" {\n\
    \            closingBracketCount--\n        }\n        closingBracketIndex++\n\
    \    }\n\n    return openingBracketCount == 0 && closingBracketCount == 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcjr54ocl.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcjr54ocl.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcjr54ocl.swift:23:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketCount++\n        \
    \                       ^~\n/tmp/tmpcjr54ocl.swift:25:32: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            openingBracketCount--\n   \
    \                            ^~\n/tmp/tmpcjr54ocl.swift:27:28: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n        openingBracketIndex++\n\
    \                           ^~\n/tmp/tmpcjr54ocl.swift:33:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            closingBracketCount++\n\
    \                               ^~\n/tmp/tmpcjr54ocl.swift:35:32: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketCount--\n\
    \                               ^~\n/tmp/tmpcjr54ocl.swift:37:28: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        closingBracketIndex++\n\
    \                           ^~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    let openingBracketCount = openingBrackets.count\n\
    \    let closingBracketCount = closingBrackets.count\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        if let closingBracket = closingBrackets.firstIndex(of:\
    \ openingBracket) {\n            let openingBracketIndex = openingBrackets.firstIndex(of:\
    \ openingBracket)\n            let closingBracketIndex = closingBrackets.firstIndex(of:\
    \ closingBracket)\n            let openingBracketCount = openingBrackets.count\n\
    \            let closingBracketCount = closingBrackets.count\n            if openingBracketIndex\
    \ == closingBracketIndex {\n                openingBrackets.removeSubrange(openingBracketIndex..<closingBracketIndex)\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6ymw22s.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpp6ymw22s.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n    if openingBrackets.isEmpty\
    \ {\n        return false\n    }\n    if closingBrackets.isEmpty {\n        return\
    \ true\n    }\n    if openingBrackets.first != closingBrackets.last {\n      \
    \  return false\n    }\n    openingBrackets.removeFirst()\n    closingBrackets.removeLast()\n\
    \    if openingBrackets.isEmpty {\n        return true\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return false\n    }\n    return openingBrackets.first == closingBrackets.first\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa39jgjuu.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpa39jgjuu.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    return openingBrackets.count\
    \ == closingBrackets.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfbz4cdko.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpfbz4cdko.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    // remove opening brackets\n    for openingBracket in openingBrackets {\n\
    \        if closingBrackets.contains(openingBracket) {\n            closingBrackets.remove(openingBracket)\n\
    \        }\n    }\n\n    // remove closing brackets\n    for closingBracket in\
    \ closingBrackets {\n        if openingBrackets.contains(closingBracket) {\n \
    \           openingBrackets.remove(closingBracket)\n        }\n    }\n\n    return\
    \ openingBrackets.count == 0 && closingBrackets.count == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7l_ks5gp.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7l_ks5gp.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7l_ks5gp.swift:19:29: error: no exact matches in call\
    \ to instance method 'remove'\n            closingBrackets.remove(openingBracket)\n\
    \                            ^\n/tmp/tmp7l_ks5gp.swift:19:29: note: candidate\
    \ expects value of type 'String.Index' for parameter #1 (got 'Character')\n  \
    \          closingBrackets.remove(openingBracket)\n                          \
    \  ^\n/tmp/tmp7l_ks5gp.swift:19:29: note: candidate expects value of type 'String.Index'\
    \ for parameter #1 (got 'Character')\n            closingBrackets.remove(openingBracket)\n\
    \                            ^\n/tmp/tmp7l_ks5gp.swift:26:29: error: no exact\
    \ matches in call to instance method 'remove'\n            openingBrackets.remove(closingBracket)\n\
    \                            ^\n/tmp/tmp7l_ks5gp.swift:26:29: note: candidate\
    \ expects value of type 'String.Index' for parameter #1 (got 'Character')\n  \
    \          openingBrackets.remove(closingBracket)\n                          \
    \  ^\n/tmp/tmp7l_ks5gp.swift:26:29: note: candidate expects value of type 'String.Index'\
    \ for parameter #1 (got 'Character')\n            openingBrackets.remove(closingBracket)\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n    var openingBracketsCountIndex = 0\n    var closingBracketsCountIndex\
    \ = 0\n    while openingBracketsIndex < openingBracketsCount {\n        openingBracketsCountIndex\
    \ += 1\n        if openingBracketsCountIndex == openingBracketsCount {\n     \
    \       openingBracketsCountIndex = 0\n            openingBracketsCount += 1\n\
    \        }\n        if openingBrackets[openingBracketsIndex] == \")\" {\n    \
    \        openingBracketsCount -= 1\n            if openingBracketsCount == 0 {\n\
    \                openingBracketsIndex += 1\n                openingBracketsCountIndex\
    \ = 0\n            }\n        }\n    }\n    while closingBracketsIndex < closingBracketsCount\
    \ {\n        closingBracketsCountIndex += 1\n        if closingBracketsCountIndex\
    \ == closingBracketsCount {\n            closingBracketsCountIndex = 0\n     \
    \       closingBracketsCount += 1\n        }\n        if closingBrackets[closingBracketsIndex]\
    \ == \")\" {\n            closingBracketsCount -= 1\n            if closingBracketsCount\
    \ == 0 {\n                closingBracketsIndex += 1\n                closingBracketsCountIndex\
    \ = 0\n            }\n        }\n    }\n    return openingBracketsIndex == closingBracketsIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz2r4ordi.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpz2r4ordi.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpz2r4ordi.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpz2r4ordi.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpz2r4ordi.swift:27:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if openingBrackets[openingBracketsIndex] == \")\" {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpz2r4ordi.swift:41:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if closingBrackets[closingBracketsIndex]\
    \ == \")\" {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    return openingBrackets.count\
    \ == closingBrackets.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfbz4cdko.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpfbz4cdko.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeLast()\n    closingBrackets.removeLast()\n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n    while openingBracketsIndex < openingBrackets.count\
    \ {\n        if openingBrackets[openingBracketsIndex] != closingBrackets[closingBracketsIndex]\
    \ {\n            return false\n        }\n        openingBracketsIndex += 1\n\
    \        closingBracketsIndex += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqnn90f5j.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqnn90f5j.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqnn90f5j.swift:23:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[openingBracketsIndex] != closingBrackets[closingBracketsIndex]\
    \ {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpqnn90f5j.swift:23:53: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        if openingBrackets[openingBracketsIndex] != closingBrackets[closingBracketsIndex]\
    \ {\n                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n\n    while openingBracketIndex < brackets.endIndex {\n        switch brackets[openingBracketIndex]\
    \ {\n        case \")\":\n            closingBracketCount++\n            if closingBracketCount\
    \ > 1 {\n                openingBracketCount--\n            }\n        case \"\
    )\":\n            openingBracketCount++\n            if openingBracketCount >\
    \ 1 {\n                closingBracketCount--\n            }\n        default:\n\
    \            openingBracketCount = 0\n            closingBracketCount = 0\n  \
    \      }\n        openingBracketIndex++\n    }\n\n    return openingBracketCount\
    \ == closingBracketCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu701fk8n.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpu701fk8n.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpu701fk8n.swift:23:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            closingBracketCount++\n        \
    \                       ^~\n/tmp/tmpu701fk8n.swift:25:36: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n                openingBracketCount--\n\
    \                                   ^~\n/tmp/tmpu701fk8n.swift:28:32: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            openingBracketCount++\n\
    \                               ^~\n/tmp/tmpu701fk8n.swift:30:36: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n                closingBracketCount--\n\
    \                                   ^~\n/tmp/tmpu701fk8n.swift:27:14: warning:\
    \ literal value is already handled by previous pattern; consider removing it\n\
    \        case \")\":\n             ^~~\n/tmp/tmpu701fk8n.swift:22:14: note: first\
    \ occurrence of identical literal pattern is here\n        case \")\":\n     \
    \        ^~~\n/tmp/tmpu701fk8n.swift:36:28: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n        openingBracketIndex++\n               \
    \            ^~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = 0\n    var closingBracketIndex = 0\n    var isCorrect\
    \ = true\n\n    while openingBracketIndex < openingBrackets.count {\n        guard\
    \ openingBrackets[openingBracketIndex] == \")\" else {\n            isCorrect\
    \ = false\n            break\n        }\n        openingBracketIndex += 1\n  \
    \  }\n\n    while closingBracketIndex < closingBrackets.count {\n        guard\
    \ closingBrackets[closingBracketIndex] == \")\" else {\n            isCorrect\
    \ = false\n            break\n        }\n        closingBracketIndex += 1\n  \
    \  }\n\n    if openingBracketIndex == openingBrackets.count {\n        return\
    \ true\n    }\n\n    if openingBracketIndex < closingBracketIndex {\n        return\
    \ false\n    }\n\n    if openingBracketIndex > closingBracketIndex {\n       \
    \ return true\n    }\n\n    return isCorrect\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9pc4d33p.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9pc4d33p.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9pc4d33p.swift:20:15: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        guard\
    \ openingBrackets[openingBracketIndex] == \")\" else {\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9pc4d33p.swift:28:15:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        guard closingBrackets[closingBracketIndex]\
    \ == \")\" else {\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9pc4d33p.swift:13:9:\
    \ warning: variable 'openingBrackets' was never mutated; consider changing to\
    \ 'let' constant\n    var openingBrackets = brackets.characters\n    ~~~ ^\n \
    \   let\n/tmp/tmp9pc4d33p.swift:14:9: warning: variable 'closingBrackets' was\
    \ never mutated; consider changing to 'let' constant\n    var closingBrackets\
    \ = brackets.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    let openingBracketCount = openingBrackets.count\n\
    \    let closingBracketCount = closingBrackets.count\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        if !brackets.contains(openingBracket) {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpth4aiwmq.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpth4aiwmq.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm3fj981y.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpm3fj981y.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n    if openingBrackets.isEmpty\
    \ {\n        return false\n    }\n    if closingBrackets.isEmpty {\n        return\
    \ true\n    }\n    if openingBrackets.first == closingBrackets.last {\n      \
    \  return true\n    }\n    if openingBrackets.first == \")\" {\n        openingBrackets.removeFirst()\n\
    \        return correct_bracketing(String(brackets).replacingOccurrences(of: \"\
    ((\", with: String(openingBrackets)))\n    }\n    if closingBrackets.first ==\
    \ \"(\" {\n        closingBrackets.removeFirst()\n        return correct_bracketing(String(brackets).replacingOccurrences(of:\
    \ \")(\", with: String(closingBrackets)))\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcn5d_wlx.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcn5d_wlx.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcn5d_wlx.swift:28:35: error: missing argument label\
    \ 'brackets:' in call\n        return correct_bracketing(String(brackets).replacingOccurrences(of:\
    \ \"((\", with: String(openingBrackets)))\n                                  ^\n\
    \                                  brackets: \n/tmp/tmpcn5d_wlx.swift:28:52: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        return\
    \ correct_bracketing(String(brackets).replacingOccurrences(of: \"((\", with: String(openingBrackets)))\n\
    \                                  ~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcn5d_wlx.swift:32:35:\
    \ error: missing argument label 'brackets:' in call\n        return correct_bracketing(String(brackets).replacingOccurrences(of:\
    \ \")(\", with: String(closingBrackets)))\n                                  ^\n\
    \                                  brackets: \n/tmp/tmpcn5d_wlx.swift:32:52: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        return\
    \ correct_bracketing(String(brackets).replacingOccurrences(of: \")(\", with: String(closingBrackets)))\n\
    \                                  ~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979824
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    var currentOpeningBracket = openingBrackets.startIndex\n    while currentOpeningBracket\
    \ != openingBrackets.endIndex {\n        if openingBrackets[currentOpeningBracket]\
    \ == '(' {\n            openingBracketCount += 1\n        }\n        if openingBrackets[currentOpeningBracket]\
    \ == ')' {\n            openingBracketCount -= 1\n        }\n        currentOpeningBracket\
    \ += 1\n    }\n    currentOpeningBracket = openingBrackets.startIndex\n    while\
    \ currentOpeningBracket != openingBrackets.endIndex {\n        if openingBrackets[currentOpeningBracket]\
    \ == '(' {\n            openingBracketCount += 1\n        }\n        if openingBrackets[currentOpeningBracket]\
    \ == ')' {\n            openingBracketCount -= 1\n        }\n        currentOpeningBracket\
    \ += 1\n    }\n    if openingBracketCount != 0 {\n        return false\n    }\n\
    \    currentOpeningBracket = openingBrackets.startIndex\n    while currentOpeningBracket\
    \ != openingBrackets.endIndex {\n        if openingBrackets[currentOpeningBracket]\
    \ == '(' {\n            openingBracketCount += 1\n        }\n        if openingBrackets[currentOpeningBracket]\
    \ == ')' {\n            openingBracketCount -= 1\n        }\n        currentOpeningBracket\
    \ += 1\n    }\n    if openingBracketCount != 0 {\n        return false\n    }\n\
    \    currentOpeningBracket = openingBrackets.startIndex\n    while currentOpeningBracket\
    \ != openingBrackets.endIndex {\n        if openingBrackets[currentOpeningBracket]\
    \ == '(' {\n            openingBracketCount += 1\n        }\n        if openingBrackets[currentOpeningBracket]\
    \ == ')' {\n            openingBracketCount -= 1\n        }\n        currentOpeningBracket\
    \ += 1\n    }\n    if openingBracketCount != 0 {\n        return false\n    }\n\
    \    currentOpeningBracket = openingBrackets.startIndex\n    while currentOpeningBracket\
    \ != openingBrackets.endIndex {\n        if openingBrackets[currentOpeningBracket]\
    \ == '(' {\n            openingBracket\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1qqrbk6d.swift:21:54: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[currentOpeningBracket] == '(' {\n     \
    \                                                ^~~\n                       \
    \                              \"(\"\n/tmp/tmp1qqrbk6d.swift:24:54: error: single-quoted\
    \ string literal found, use '\"'\n        if openingBrackets[currentOpeningBracket]\
    \ == ')' {\n                                                     ^~~\n       \
    \                                              \")\"\n/tmp/tmp1qqrbk6d.swift:31:54:\
    \ error: single-quoted string literal found, use '\"'\n        if openingBrackets[currentOpeningBracket]\
    \ == '(' {\n                                                     ^~~\n       \
    \                                              \"(\"\n/tmp/tmp1qqrbk6d.swift:34:54:\
    \ error: single-quoted string literal found, use '\"'\n        if openingBrackets[currentOpeningBracket]\
    \ == ')' {\n                                                     ^~~\n       \
    \                                              \")\"\n/tmp/tmp1qqrbk6d.swift:44:54:\
    \ error: single-quoted string literal found, use '\"'\n        if openingBrackets[currentOpeningBracket]\
    \ == '(' {\n                                                     ^~~\n       \
    \                                              \"(\"\n/tmp/tmp1qqrbk6d.swift:47:54:\
    \ error: single-quoted string literal found, use '\"'\n        if openingBrackets[currentOpeningBracket]\
    \ == ')' {\n                                                     ^~~\n       \
    \                                              \")\"\n/tmp/tmp1qqrbk6d.swift:57:54:\
    \ error: single-quoted string literal found, use '\"'\n        if openingBrackets[currentOpeningBracket]\
    \ == '(' {\n                                                     ^~~\n       \
    \                                              \"(\"\n/tmp/tmp1qqrbk6d.swift:60:54:\
    \ error: single-quoted string literal found, use '\"'\n        if openingBrackets[currentOpeningBracket]\
    \ == ')' {\n                                                     ^~~\n       \
    \                                              \")\"\n/tmp/tmp1qqrbk6d"
  stdout: ''
  timestamp: 1659979824
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    guard openingBrackets.count ==\
    \ closingBrackets.count else {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        guard let closingBracket = closingBrackets.first\
    \ else {\n            return false\n        }\n        if openingBracket != closingBracket\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc8dzpyls.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpc8dzpyls.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979822
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm3fj981y.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpm3fj981y.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = brackets.characters.count\n\
    \n    while openingBracketIndex < brackets.endIndex {\n        let nextOpeningBracketIndex\
    \ = openingBracketIndex + 1\n        let nextClosingBracketIndex = openingBracketIndex\
    \ + 2\n\n        if openingBrackets[nextOpeningBracketIndex] != closingBrackets[nextClosingBracketIndex]\
    \ {\n            openingBracketCount = openingBracketCount - 1\n        }\n\n\
    \        if openingBracketCount == 0 {\n            return true\n        }\n\n\
    \        openingBracketIndex = nextOpeningBracketIndex\n        closingBracketIndex\
    \ = nextClosingBracketIndex\n    }\n\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk1rngtcm.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpk1rngtcm.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpk1rngtcm.swift:17:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpk1rngtcm.swift:20:39: error: cannot convert value of\
    \ type 'String.Index' to expected argument type 'Int'\n        let nextOpeningBracketIndex\
    \ = openingBracketIndex + 1\n                                      ^\n/tmp/tmpk1rngtcm.swift:21:39:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n        let nextClosingBracketIndex = openingBracketIndex + 2\n     \
    \                                 ^\n"
  stdout: ''
  timestamp: 1659979824
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    while openingBracketIndex < brackets.endIndex {\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        if openingBracket\
    \ == \"(\" {\n            openingBracketIndex += 1\n            if openingBracketIndex\
    \ < brackets.endIndex {\n                openingBracket = brackets[openingBracketIndex]\n\
    \            }\n            openingBrackets.append(openingBracket)\n        }\
    \ else if openingBracket == \")\" {\n            openingBracketIndex += 1\n  \
    \          if openingBracketIndex < brackets.endIndex {\n                openingBracket\
    \ = brackets[openingBracketIndex]\n            }\n            openingBrackets.append(openingBracket)\n\
    \            closingBracketIndex -= 1\n        } else {\n            openingBracketIndex\
    \ += 1\n        }\n    }\n    while closingBracketIndex < brackets.endIndex {\n\
    \        let closingBracket = brackets[closingBracketIndex]\n        if closingBracket\
    \ == \"(\" {\n            closingBracketIndex += 1\n            if closingBracketIndex\
    \ < brackets.endIndex {\n                closingBracket = brackets[closingBracketIndex]\n\
    \            }\n            closingBrackets.append(closingBracket)\n        }\
    \ else if closingBracket == \")\" {\n            closingBracketIndex += 1\n  \
    \          if closingBracketIndex < brackets.endIndex {\n                closingBracket\
    \ = brackets[closingBracketIndex]\n            }\n            closingBrackets.append(closingBracket)\n\
    \            openingBracketIndex -= 1\n        } else {\n            closingBracketIndex\
    \ += 1\n        }\n    }\n    return openingBrackets.count == closingBrackets.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp37w29oag.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp37w29oag.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp37w29oag.swift:20:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp37w29oag.swift:22:17: error:\
    \ cannot assign to value: 'openingBracket' is a 'let' constant\n             \
    \   openingBracket = brackets[openingBracketIndex]\n                ^~~~~~~~~~~~~~\n\
    /tmp/tmp37w29oag.swift:18:9: note: change 'let' to 'var' to make it mutable\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        ^~~\n   \
    \     var\n/tmp/tmp37w29oag.swift:26:33: error: binary operator '+=' cannot be\
    \ applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp37w29oag.swift:28:17: error:\
    \ cannot assign to value: 'openingBracket' is a 'let' constant\n             \
    \   openingBracket = brackets[openingBracketIndex]\n                ^~~~~~~~~~~~~~\n\
    /tmp/tmp37w29oag.swift:18:9: note: change 'let' to 'var' to make it mutable\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        ^~~\n   \
    \     var\n/tmp/tmp37w29oag.swift:31:33: error: binary operator '-=' cannot be\
    \ applied to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ -= 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp37w29oag.swift:33:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            op"
  stdout: ''
  timestamp: 1659979824
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    var openingBracketsCount = 1\n    var closingBracketsCount = 1\n\n    for\
    \ openingBracket in openingBrackets {\n        if openingBracket == \"(\" {\n\
    \            openingBracketsCount += 1\n        } else if openingBracket == \"\
    )\" {\n            openingBracketsCount -= 1\n        }\n\n        if openingBracketsCount\
    \ == 0 {\n            return false\n        }\n    }\n\n    for closingBracket\
    \ in closingBrackets {\n        if closingBracket == \"(\" {\n            closingBracketsCount\
    \ += 1\n        } else if closingBracket == \")\" {\n            closingBracketsCount\
    \ -= 1\n        }\n\n        if closingBracketsCount == 0 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpouoqpl4u.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpouoqpl4u.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpouoqpl4u.swift:13:9: warning: variable 'openingBrackets'\
    \ was never mutated; consider changing to 'let' constant\n    var openingBrackets\
    \ = brackets.characters\n    ~~~ ^\n    let\n/tmp/tmpouoqpl4u.swift:14:9: warning:\
    \ variable 'closingBrackets' was never mutated; consider changing to 'let' constant\n\
    \    var closingBrackets = brackets.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659979824
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    var openingCount = brackets.characters.count\n    var closingCount = brackets.characters.count\n\
    \    var openingIndex = 0\n    var closingIndex = 0\n    while openingIndex <\
    \ openingCount {\n        opening = brackets[openingIndex..<openingIndex].characters\n\
    \        openingIndex += 1\n        if opening.isEmpty {\n            continue\n\
    \        }\n        closing = brackets[closingIndex..<closingIndex].characters\n\
    \        closingIndex += 1\n        if closing.isEmpty {\n            continue\n\
    \        }\n        if opening.first != closing.first {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr2w7qvv8.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpr2w7qvv8.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpr2w7qvv8.swift:15:33:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingCount\
    \ = brackets.characters.count\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpr2w7qvv8.swift:16:33: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingCount = brackets.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpr2w7qvv8.swift:20:19: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an integer range, use a String.Index range instead.\n\
    \        opening = brackets[openingIndex..<openingIndex].characters\n        \
    \          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript<R>(bounds:\
    \ R) -> String where R : RangeExpression, R.Bound == Int { get }\n           ^\n\
    /tmp/tmpr2w7qvv8.swift:20:57: error: 'characters' is unavailable: Please use String\
    \ directly\n        opening = brackets[openingIndex..<openingIndex].characters\n\
    \                                                        ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tm"
  stdout: ''
  timestamp: 1659979824
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        openingBracketCount += 1\n        if\
    \ openingBracket == \"(\" {\n            openingBracketIndex += 1\n        } else\
    \ if openingBracket == \")\" {\n            openingBracketIndex += 1\n       \
    \     closingBracketCount += 1\n            if closingBracketCount > 1 {\n   \
    \             closingBracketIndex += 1\n                closingBracketCount =\
    \ 0\n            }\n        } else {\n            return false\n        }\n  \
    \  }\n    return openingBracketCount == closingBracketCount\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi8je3enn.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpi8je3enn.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpi8je3enn.swift:23:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpi8je3enn.swift:25:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpi8je3enn.swift:28:37: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n                closingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659979824
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    for openingBracket in openingBrackets {\n        if closingBrackets.contains(openingBracket)\
    \ {\n            closingBrackets.remove(openingBracket)\n        } else {\n  \
    \          return false\n        }\n    }\n\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrb9jbkw.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdrb9jbkw.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdrb9jbkw.swift:18:29: error: no exact matches in call\
    \ to instance method 'remove'\n            closingBrackets.remove(openingBracket)\n\
    \                            ^\n/tmp/tmpdrb9jbkw.swift:18:29: note: candidate\
    \ expects value of type 'String.Index' for parameter #1 (got 'Character')\n  \
    \          closingBrackets.remove(openingBracket)\n                          \
    \  ^\n/tmp/tmpdrb9jbkw.swift:18:29: note: candidate expects value of type 'String.Index'\
    \ for parameter #1 (got 'Character')\n            closingBrackets.remove(openingBracket)\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    guard openingBrackets.count !=\
    \ closingBrackets.count else {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        let closingBracket = closingBrackets.firstIndex(of:\
    \ openingBracket)\n        if closingBracket == nil {\n            return false\n\
    \        }\n        if openingBracket != closingBracket! {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8iyborh8.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp8iyborh8.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979824
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    var openingCount = 1\n    var closingCount = 1\n    var openingIndex = 0\n\
    \    var closingIndex = 0\n    while openingIndex < opening.count {\n        let\
    \ openingChar = opening[openingIndex]\n        openingIndex += 1\n        if openingChar\
    \ == \")\" {\n            closingIndex += 1\n            closingCount -= 1\n \
    \           if closingCount == 0 {\n                openingIndex -= 1\n      \
    \          openingCount += 1\n            }\n        } else if openingChar ==\
    \ \"(\" {\n            openingIndex += 1\n            openingCount += 1\n    \
    \    }\n    }\n    while closingIndex < closing.count {\n        let closingChar\
    \ = closing[closingIndex]\n        closingIndex += 1\n        if closingChar ==\
    \ \")\" {\n            openingIndex -= 1\n            openingCount -= 1\n    \
    \        if openingCount == 0 {\n                closingIndex -= 1\n         \
    \       closingCount += 1\n            }\n        } else if closingChar == \"\
    (\" {\n            closingIndex += 1\n            closingCount += 1\n        }\n\
    \    }\n    return openingIndex == 0 && closingIndex == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfgk4k7nq.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpfgk4k7nq.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpfgk4k7nq.swift:20:27:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        let openingChar = opening[openingIndex]\n\
    \                          ^~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpfgk4k7nq.swift:35:27: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        let closingChar = closing[closingIndex]\n                          ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpfgk4k7nq.swift:13:9:\
    \ warning: variable 'opening' was never mutated; consider changing to 'let' constant\n\
    \    var opening = brackets.characters\n    ~~~ ^\n    let\n/tmp/tmpfgk4k7nq.swift:14:9:\
    \ warning: variable 'closing' was never mutated; consider changing to 'let' constant\n\
    \    var closing = brackets.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659979824
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    let openingBracketCount = openingBrackets.count\n\
    \    let closingBracketCount = closingBrackets.count\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        let closingBracketIndex = openingBrackets.firstIndex(of:\
    \ openingBracket)\n        if closingBracketIndex == nil {\n            return\
    \ false\n        }\n        if openingBracketIndex! != closingBracketIndex! {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphnt3_9sm.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmphnt3_9sm.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979824
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.characters.split{$0 == \")\"}.map(String.init)\n\
    \    let closingBrackets = brackets.characters.split{$0 == \"(\"}.map(String.init)\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpajqxjhpa.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    let openingBrackets = brackets.characters.split{$0\
    \ == \")\"}.map(String.init)\n                                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpajqxjhpa.swift:14:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    let closingBrackets\
    \ = brackets.characters.split{$0 == \"(\"}.map(String.init)\n                \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659979824
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    return openingBrackets.count\
    \ == closingBrackets.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfbz4cdko.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpfbz4cdko.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    let openingBracketCount = openingBrackets.count\n\
    \    let closingBracketCount = closingBrackets.count\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        if let closingBracket = closingBrackets.firstIndex(of:\
    \ openingBracket) {\n            let openingBracketIndex = openingBrackets.index(openingBracket,\
    \ offsetBy: 1)\n            let closingBracketIndex = closingBrackets.index(closingBracket,\
    \ offsetBy: 1)\n            let openingBracketText = openingBrackets[openingBracketIndex]\n\
    \            let closingBracketText = closingBrackets[closingBracketIndex]\n \
    \           if openingBracketText != closingBracketText {\n                return\
    \ false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqnqgy_3x.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpqnqgy_3x.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979824
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: CharacterSet.openingParenthesis)\n\
    \    let closingBrackets = brackets.components(separatedBy: CharacterSet.closingParenthesis)\n\
    \    return openingBrackets.count == closingBrackets.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5gfdrqok.swift:13:60: error: cannot find 'CharacterSet' in scope\n\
    \    let openingBrackets = brackets.components(separatedBy: CharacterSet.openingParenthesis)\n\
    \                                                           ^~~~~~~~~~~~\n/tmp/tmp5gfdrqok.swift:13:36:\
    \ error: value of type 'String' has no member 'components'\n    let openingBrackets\
    \ = brackets.components(separatedBy: CharacterSet.openingParenthesis)\n      \
    \                    ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp5gfdrqok.swift:14:60: error:\
    \ cannot find 'CharacterSet' in scope\n    let closingBrackets = brackets.components(separatedBy:\
    \ CharacterSet.closingParenthesis)\n                                         \
    \                  ^~~~~~~~~~~~\n/tmp/tmp5gfdrqok.swift:14:36: error: value of\
    \ type 'String' has no member 'components'\n    let closingBrackets = brackets.components(separatedBy:\
    \ CharacterSet.closingParenthesis)\n                          ~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    while openingBracketIndex < brackets.endIndex {\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n        if openingBracket == \"(\" {\n    \
    \        openingBracketIndex += 1\n        } else if openingBracket == \")\" {\n\
    \            closingBracketIndex += 1\n        } else {\n            return false\n\
    \        }\n    }\n    return openingBracketIndex == closingBracketIndex\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe986vny4.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe986vny4.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe986vny4.swift:21:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpe986vny4.swift:23:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n"
  stdout: ''
  timestamp: 1659979824
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    return openingBrackets.count\
    \ == closingBrackets.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfbz4cdko.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpfbz4cdko.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    while openingBracketIndex < brackets.endIndex {\n\
    \        if openingBrackets[openingBracketIndex] == \")\" {\n            closingBracketIndex\
    \ = openingBracketIndex + 1\n        } else if openingBrackets[openingBracketIndex]\
    \ != \"(\" {\n            return false\n        } else {\n            openingBracketIndex\
    \ += 1\n        }\n    }\n    while closingBracketIndex < brackets.endIndex {\n\
    \        if closingBrackets[closingBracketIndex] == \")\" {\n            openingBracketIndex\
    \ = closingBracketIndex + 1\n        } else if closingBrackets[closingBracketIndex]\
    \ != \"(\" {\n            return false\n        } else {\n            closingBracketIndex\
    \ += 1\n        }\n    }\n    return openingBracketIndex == closingBracketIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp44mycj6p.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp44mycj6p.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp44mycj6p.swift:19:55: error: binary operator '+' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ = openingBracketIndex + 1\n                                  ~~~~~~~~~~~~~~~~~~~\
    \ ^ ~\n/tmp/tmp44mycj6p.swift:19:55: note: overloads for '+' exist with these\
    \ partially matching parameter lists: (Int, Int)\n            closingBracketIndex\
    \ = openingBracketIndex + 1\n                                                \
    \      ^\n/tmp/tmp44mycj6p.swift:23:33: error: binary operator '+=' cannot be\
    \ applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp44mycj6p.swift:28:55: error:\
    \ binary operator '+' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex = closingBracketIndex + 1\n         \
    \                         ~~~~~~~~~~~~~~~~~~~ ^ ~\n/tmp/tmp44mycj6p.swift:28:55:\
    \ note: overloads for '+' exist with these partially matching parameter lists:\
    \ (Int, Int)\n            openingBracketIndex = closingBracketIndex + 1\n    \
    \                                                  ^\n/tmp/tmp44mycj6p.swift:32:33:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n"
  stdout: ''
  timestamp: 1659979824
