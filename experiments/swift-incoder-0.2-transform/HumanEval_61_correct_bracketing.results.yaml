language: swift
name: HumanEval_61_correct_bracketing
results:
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    for openingBracket in openingBrackets {\n        if openingBracket == \"\
    (\" {\n            openingBrackets.removeLast()\n            closingBrackets.append(\"\
    )\")\n        } else if openingBracket == \")\" {\n            openingBrackets.removeLast()\n\
    \            closingBrackets.append(\"(\")\n        }\n    }\n\n    return openingBrackets.count\
    \ == 0 && closingBrackets.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe92l3dky.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe92l3dky.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n\n    while openingBracketsIndex < openingBracketsCount {\n        guard\
    \ openingBrackets[openingBracketsIndex] == '(' || openingBrackets[openingBracketsIndex]\
    \ == '[' || openingBrackets[openingBracketsIndex] == '{' else {\n            return\
    \ false\n        }\n        openingBracketsIndex += 1\n    }\n\n    while closingBracketsIndex\
    \ < closingBracketsCount {\n        guard closingBrackets[closingBracketsIndex]\
    \ == ')' || closingBrackets[closingBracketsIndex] == ']' || closingBrackets[closingBracketsIndex]\
    \ == '}' else {\n            return false\n        }\n        closingBracketsIndex\
    \ += 1\n    }\n\n    return openingBracketsIndex == closingBracketsIndex\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy0jbgyd2.swift:21:56: error: single-quoted string literal found,\
    \ use '\"'\n        guard openingBrackets[openingBracketsIndex] == '(' || openingBrackets[openingBracketsIndex]\
    \ == '[' || openingBrackets[openingBracketsIndex] == '{' else {\n            \
    \                                           ^~~\n                            \
    \                           \"(\"\n/tmp/tmpy0jbgyd2.swift:21:104: error: single-quoted\
    \ string literal found, use '\"'\n        guard openingBrackets[openingBracketsIndex]\
    \ == '(' || openingBrackets[openingBracketsIndex] == '[' || openingBrackets[openingBracketsIndex]\
    \ == '{' else {\n                                                            \
    \                                           ^~~\n                            \
    \                                                                           \"\
    [\"\n/tmp/tmpy0jbgyd2.swift:21:152: error: single-quoted string literal found,\
    \ use '\"'\n        guard openingBrackets[openingBracketsIndex] == '(' || openingBrackets[openingBracketsIndex]\
    \ == '[' || openingBrackets[openingBracketsIndex] == '{' else {\n            \
    \                                                                            \
    \                                                               ^~~\n        \
    \                                                                            \
    \                                                                   \"{\"\n/tmp/tmpy0jbgyd2.swift:28:56:\
    \ error: single-quoted string literal found, use '\"'\n        guard closingBrackets[closingBracketsIndex]\
    \ == ')' || closingBrackets[closingBracketsIndex] == ']' || closingBrackets[closingBracketsIndex]\
    \ == '}' else {\n                                                       ^~~\n\
    \                                                       \")\"\n/tmp/tmpy0jbgyd2.swift:28:104:\
    \ error: single-quoted string literal found, use '\"'\n        guard closingBrackets[closingBracketsIndex]\
    \ == ')' || closingBrackets[closingBracketsIndex] == ']' || closingBrackets[closingBracketsIndex]\
    \ == '}' else {\n                                                            \
    \          "
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.characters.split{$0 == \")\"}.map(String.init)\n\
    \    let closingBrackets = brackets.characters.split{$0 == \"(\"}.map(String.init)\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        if\
    \ !closingBrackets.contains(openingBracket) {\n            return false\n    \
    \    }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppqa8lkm0.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    let openingBrackets = brackets.characters.split{$0\
    \ == \")\"}.map(String.init)\n                                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmppqa8lkm0.swift:14:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    let closingBrackets\
    \ = brackets.characters.split{$0 == \"(\"}.map(String.init)\n                \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    while openingBracketIndex < brackets.endIndex {\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        openingBracketIndex\
    \ += 1\n        if openingBracket == \"(\" {\n            openingBracketIndex\
    \ += 1\n            if openingBracketIndex < brackets.endIndex {\n           \
    \     let closingBracket = brackets[openingBracketIndex]\n                openingBracketIndex\
    \ += 1\n                closingBracketIndex += 1\n                if closingBracket\
    \ == \")\" {\n                    openingBracketIndex += 1\n                 \
    \   if openingBracketIndex < brackets.endIndex {\n                        let\
    \ closingBracket = brackets[openingBracketIndex]\n                        openingBracketIndex\
    \ += 1\n                        closingBracketIndex += 1\n                   \
    \     if closingBracket == \")\" {\n                            openingBracketIndex\
    \ += 1\n                            if openingBracketIndex < brackets.endIndex\
    \ {\n                                let closingBracket = brackets[openingBracketIndex]\n\
    \                                openingBracketIndex += 1\n                  \
    \              closingBracketIndex += 1\n                                if closingBracket\
    \ == \")\" {\n                                    openingBracketIndex += 1\n \
    \                                   if openingBracketIndex < brackets.endIndex\
    \ {\n                                        let closingBracket = brackets[openingBracketIndex]\n\
    \                                        openingBracketIndex += 1\n          \
    \                              closingBracketIndex += 1\n                    \
    \                    if closingBracket == \")\" {\n                          \
    \                  openingBracketIndex += 1\n                                \
    \            if openingBracketIndex < brackets.endIndex {\n                  \
    \                              let closingBracket = brackets[openingBracketIndex]\n\
    \                                                openingBracketIndex += 1\n  \
    \                                              closingBracketIndex += 1\n    \
    \                                            if closingBracket == \")\" {\n  \
    \                                                  openingBracketIndex += 1\n\
    \                                                    if openingBracketIndex <\
    \ brackets.endIndex {\n                                                      \
    \  let closingBracket = brackets[openingBracketIndex]\n                      \
    \                                  openingBracketIndex += 1\n                \
    \                                        closingBracketIndex += 1\n          \
    \                                              if closingBracket == \")\" {\n\
    \                                                            openingBracketIndex\
    \ += 1\n                                                            if openingBracketIndex\
    \ < brackets.endIndex {\n                                                    \
    \            let closingBracket = brackets[openingBracketIndex]\n            \
    \                                                    openingBracketIndex += 1\n\
    \                                                                closingBracketIndex\
    \ += 1\n                                                                if closingBracket\
    \ == \")\" {\n                                                               \
    \     openingBracket\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpikjb7dnl.swift:90:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmpikjb7dnl.swift:58:104:\
    \ note: to match this opening '{'\n                                          \
    \                  if openingBracketIndex < brackets.endIndex {\n            \
    \                                                                            \
    \               ^\n/tmp/tmpikjb7dnl.swift:90:66: error: expected '}' at end of\
    \ brace statement\nassert(correct_bracketing(brackets: \"()()(()())()))()\") ==\
    \ false)\n                                                                 ^\n\
    /tmp/tmpikjb7dnl.swift:56:82: note: to match this opening '{'\n              \
    \                                          if closingBracket == \")\" {\n    \
    \                                                                            \
    \ ^\n/tmp/tmpikjb7dnl.swift:90:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmpikjb7dnl.swift:52:96:\
    \ note: to match this opening '{'\n                                          \
    \          if openingBracketIndex < brackets.endIndex {\n                    \
    \                                                                           ^\n\
    /tmp/tmpikjb7dnl.swift:90:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmpikjb7dnl.swift:50:74:\
    \ note: to match this opening '{'\n                                          \
    \      if closingBracket == \")\" {\n                                        \
    \                                 ^\n/tmp/tmpikjb7dnl.swift:90:66: error: expected\
    \ '}' at end of brace statement\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmpikjb7dnl.swift:46:88: note"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n\n    while openingBracketsCount > 0 && closingBracketsCount\
    \ > 0 {\n        if openingBrackets[openingBracketsCount - 1] == closingBrackets[0]\
    \ {\n            openingBracketsCount -= 1\n            closingBracketsCount -=\
    \ 1\n        } else {\n            return false\n        }\n    }\n\n    return\
    \ openingBracketsCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_vfbm9em.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_vfbm9em.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_vfbm9em.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp_vfbm9em.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp_vfbm9em.swift:19:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if openingBrackets[openingBracketsCount - 1] == closingBrackets[0] {\n\
    \           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp_vfbm9em.swift:19:57: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        if openingBrackets[openingBracketsCount - 1] == closingBrackets[0]\
    \ {\n                                                        ^~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marke"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n    for\
    \ openingBracket in openingBrackets {\n        if closingBrackets.contains(openingBracket)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbffu247q.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbffu247q.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for openingBracket in openingBrackets {\n\
    \        let closingBracket = closingBrackets.first(where: { $0 == openingBracket\
    \ })\n        if closingBracket == nil {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8v1qtv0r.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp8v1qtv0r.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n    var openingBracketsCountIndex = 0\n    var closingBracketsCountIndex\
    \ = 0\n    var openingBracketsCountMax = openingBracketsCount\n    var closingBracketsCountMax\
    \ = closingBracketsCount\n\n    while openingBracketsCountIndex < openingBracketsCount\
    \ {\n        openingBracketsCountIndex += 1\n        if openingBracketsCountIndex\
    \ == openingBracketsCount {\n            openingBracketsCountIndex = 0\n     \
    \       openingBracketsCountMax += 1\n        }\n        if openingBrackets[openingBracketsCountIndex]\
    \ == '(' {\n            openingBracketsCountMax -= 1\n            if openingBracketsCountMax\
    \ == 0 {\n                openingBracketsCountMax = openingBracketsCount\n   \
    \             openingBracketsCount += 1\n            }\n        }\n    }\n   \
    \ while closingBracketsCountIndex < closingBracketsCount {\n        closingBracketsCountIndex\
    \ += 1\n        if closingBracketsCountIndex == closingBracketsCount {\n     \
    \       closingBracketsCountIndex = 0\n            closingBracketsCountMax +=\
    \ 1\n        }\n        if closingBrackets[closingBracketsCountIndex] == ')' {\n\
    \            closingBracketsCountMax -= 1\n            if closingBracketsCountMax\
    \ == 0 {\n                closingBracketsCountMax = closingBracketsCount\n   \
    \             closingBracketsCount += 1\n            }\n        }\n    }\n\n \
    \   if openingBracketsCountMax != closingBracketsCountMax {\n        return false\n\
    \    }\n\n    if openingBracketsCount != closingBracketsCount {\n        return\
    \ false\n    }\n\n    if openingBracketsCount > 0 && closingBracketsCount > 0\
    \ {\n        if openingBrackets[openingBracketsCount - 1] != closingBrackets[closingBracketsCount\
    \ - 1] {\n            return false\n        }\n    }\n\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd25rgei3.swift:30:58: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketsCountIndex] == '(' {\n \
    \                                                        ^~~\n               \
    \                                          \"(\"\n/tmp/tmpd25rgei3.swift:44:58:\
    \ error: single-quoted string literal found, use '\"'\n        if closingBrackets[closingBracketsCountIndex]\
    \ == ')' {\n                                                         ^~~\n   \
    \                                                      \")\"\n/tmp/tmpd25rgei3.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpd25rgei3.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd25rgei3.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpd25rgei3.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpd25rgei3.swift:30:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if openingBrackets[openingBracketsCountIndex] == '(' {\n           ^~~~~~~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = 1\n    var closingBracketsCount = 1\n    var bracketsCount\
    \ = brackets.characters.count\n\n    while openingBracketsCount > 0 || closingBracketsCount\
    \ > 0 || bracketsCount > 0 {\n        if openingBracketsCount == 0 {\n       \
    \     openingBrackets.removeLast()\n            openingBracketsCount--\n     \
    \   }\n        if closingBracketsCount == 0 {\n            closingBrackets.removeLast()\n\
    \            closingBracketsCount--\n        }\n        if bracketsCount == 0\
    \ {\n            brackets.removeLast()\n            bracketsCount--\n        }\n\
    \        if openingBracketsCount == 0 {\n            openingBrackets.removeLast()\n\
    \            openingBracketsCount--\n        }\n        if closingBracketsCount\
    \ == 0 {\n            closingBrackets.removeLast()\n            closingBracketsCount--\n\
    \        }\n        if bracketsCount == 0 {\n            brackets.removeLast()\n\
    \            bracketsCount--\n        }\n    }\n    return brackets.characters.count\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpeuaotjhh.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpeuaotjhh.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpeuaotjhh.swift:17:34: error: 'characters' is unavailable:\
    \ Please use String directly\n    var bracketsCount = brackets.characters.count\n\
    \                                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpeuaotjhh.swift:22:33: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n            openingBracketsCount--\n       \
    \                         ^~\n/tmp/tmpeuaotjhh.swift:26:33: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n            closingBracketsCount--\n\
    \                                ^~\n/tmp/tmpeuaotjhh.swift:29:22: error: cannot\
    \ use mutating member on immutable value: 'brackets' is a 'let' constant\n   \
    \         brackets.removeLast()\n            ~~~~~~~~ ^\n/tmp/tmpeuaotjhh.swift:30:26:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  bracketsCount--\n                         ^~\n/tmp/tmpeuaotjhh.swift:34:33:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  openingBracketsCount--\n                                ^~\n/tmp/tmpeuaotjhh.swift:38:33:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  closingBracketsCount--\n                                ^~\n/tmp/tmpeuaotjhh.swift:41:22:\
    \ error: cannot use mutating member on immutable value: 'brackets' is a 'let'\
    \ constant\n            br"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm3fj981y.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpm3fj981y.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n    var openingBracketsCountIndex = 0\n    var closingBracketsCountIndex\
    \ = 0\n    var openingBracketsCountMax = openingBracketsCount\n    var closingBracketsCountMax\
    \ = closingBracketsCount\n    var openingBracketsCountMaxIndex = 0\n    var closingBracketsCountMaxIndex\
    \ = 0\n    var openingBracketsCountMin = openingBracketsCount\n    var closingBracketsCountMin\
    \ = closingBracketsCount\n    var openingBracketsCountMinIndex = 0\n    var closingBracketsCountMinIndex\
    \ = 0\n    var openingBracketsCountMaxMin = openingBracketsCount\n    var closingBracketsCountMaxMin\
    \ = closingBracketsCount\n    var openingBracketsCountMaxMinIndex = 0\n    var\
    \ closingBracketsCountMaxMinIndex = 0\n    var openingBracketsCountMinMax = openingBracketsCount\n\
    \    var closingBracketsCountMinMax = closingBracketsCount\n    var openingBracketsCountMinMaxIndex\
    \ = 0\n    var closingBracketsCountMinMaxIndex = 0\n    var openingBracketsCountMaxMinMax\
    \ = openingBracketsCount\n    var closingBracketsCountMaxMinMax = closingBracketsCount\n\
    \    var openingBracketsCountMaxMinMaxIndex = 0\n    var closingBracketsCountMaxMinMaxIndex\
    \ = 0\n    var openingBracketsCountMinMaxMin = openingBracketsCount\n    var closingBracketsCountMinMaxMin\
    \ = closingBracketsCount\n    var openingBracketsCountMinMaxMinIndex = 0\n   \
    \ var closingBracketsCountMinMaxMinIndex = 0\n    var openingBracketsCountMaxMinMaxMin\
    \ = openingBracketsCount\n    var closingBracketsCountMaxMinMaxMin = closingBracketsCount\n\
    \    var openingBracketsCountMaxMinMaxMinIndex = 0\n    var closingBracketsCountMaxMinMaxMinIndex\
    \ = 0\n    var openingBracketsCountMinMaxMinMax = openingBracketsCount\n    var\
    \ closingBracketsCountMinMaxMinMax = closingBracketsCount\n    var openingBracket\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxu6wcw3u.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpxu6wcw3u.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpxu6wcw3u.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpxu6wcw3u.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpxu6wcw3u.swift:51:9: error: type annotation\
    \ missing in pattern\n    var openingBracket\n        ^\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    for openingBracket in openingBrackets\
    \ {\n        if let closingBracket = closingBrackets.firstIndex(of: openingBracket)\
    \ {\n            closingBrackets.remove(at: closingBracket)\n        } else {\n\
    \            return false\n        }\n    }\n    \n    return openingBrackets.count\
    \ == closingBrackets.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplsh_by07.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmplsh_by07.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    var openingBracketIndex = 0\n    var closingBracketIndex = 0\n\n    while\
    \ openingBracketIndex < openingBrackets.count {\n        guard openingBrackets[openingBracketIndex]\
    \ == '(' else {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n\n        while closingBracketIndex < closingBrackets.count {\n      \
    \      guard closingBrackets[closingBracketIndex] == ')' else {\n            \
    \    return false\n            }\n\n            closingBracketIndex += 1\n   \
    \     }\n\n        openingBracketIndex += 1\n    }\n\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp56ocgb5h.swift:20:55: error: single-quoted string literal found,\
    \ use '\"'\n        guard openingBrackets[openingBracketIndex] == '(' else {\n\
    \                                                      ^~~\n                 \
    \                                     \"(\"\n/tmp/tmp56ocgb5h.swift:27:59: error:\
    \ single-quoted string literal found, use '\"'\n            guard closingBrackets[closingBracketIndex]\
    \ == ')' else {\n                                                          ^~~\n\
    \                                                          \")\"\n/tmp/tmp56ocgb5h.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp56ocgb5h.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp56ocgb5h.swift:20:15: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        guard\
    \ openingBrackets[openingBracketIndex] == '(' else {\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp56ocgb5h.swift:27:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            guard closingBrackets[closingBracketIndex]\
    \ == ')' else {\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp56ocgb5h.swift:13:9:\
    \ warning: variable 'openingBrackets' was never mutated"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = brackets.characters.count\n\
    \    var closingBracketCount = brackets.characters.count\n\n    while openingBracketIndex\
    \ < openingBracketCount {\n        if openingBrackets[openingBracketIndex] ==\
    \ \")\" {\n            closingBracketIndex--\n        } else if openingBrackets[openingBracketIndex]\
    \ != \"(\" {\n            return false\n        }\n        openingBracketIndex++\n\
    \    }\n\n    while closingBracketIndex < closingBracketCount {\n        if closingBrackets[closingBracketIndex]\
    \ == \")\" {\n            openingBracketIndex++\n        } else if closingBrackets[closingBracketIndex]\
    \ != \"(\" {\n            return false\n        }\n        closingBracketIndex++\n\
    \    }\n\n    return openingBracketIndex == closingBracketIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp95ml8e68.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp95ml8e68.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp95ml8e68.swift:17:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp95ml8e68.swift:18:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp95ml8e68.swift:20:31: error: referencing operator function\
    \ '<' on 'BinaryInteger' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \    while openingBracketIndex < openingBracketCount {\n                     \
    \         ^\nSwift.BinaryInteger:1:11: note: where 'Self' = 'String.Index'\nextension\
    \ BinaryInteger {\n          ^\n/tmp/tmp95ml8e68.swift:22:32: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n            closingBracketIndex--\n\
    \                               ^~\n/tmp/tmp95ml8e68.swift:26:28: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        openingBracketIndex++\n\
    \                           ^~\n/tmp/tmp95ml8e68.swift:29:31: error: referencing\
    \ operator function '<' on 'BinaryInteger' requires that 'String.Index' c"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    var openingBracketsIndex = 0\n    var closingBracketsIndex = 0\n\n    while\
    \ openingBracketsIndex < openingBrackets.count {\n        if openingBrackets[openingBracketsIndex]\
    \ == '(' {\n            openingBracketsIndex += 1\n        } else if openingBrackets[openingBracketsIndex]\
    \ == ')' {\n            openingBracketsIndex += 1\n            closingBracketsIndex\
    \ += 1\n        } else {\n            return false\n        }\n    }\n\n    while\
    \ closingBracketsIndex < closingBrackets.count {\n        if closingBrackets[closingBracketsIndex]\
    \ == '(' {\n            closingBracketsIndex += 1\n        } else if closingBrackets[closingBracketsIndex]\
    \ == ')' {\n            closingBracketsIndex += 1\n            openingBracketsIndex\
    \ += 1\n        } else {\n            return false\n        }\n    }\n\n    return\
    \ openingBracketsIndex == closingBracketsIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpeem1kiun.swift:20:53: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketsIndex] == '(' {\n      \
    \                                              ^~~\n                         \
    \                           \"(\"\n/tmp/tmpeem1kiun.swift:22:60: error: single-quoted\
    \ string literal found, use '\"'\n        } else if openingBrackets[openingBracketsIndex]\
    \ == ')' {\n                                                           ^~~\n \
    \                                                          \")\"\n/tmp/tmpeem1kiun.swift:31:53:\
    \ error: single-quoted string literal found, use '\"'\n        if closingBrackets[closingBracketsIndex]\
    \ == '(' {\n                                                    ^~~\n        \
    \                                            \"(\"\n/tmp/tmpeem1kiun.swift:33:60:\
    \ error: single-quoted string literal found, use '\"'\n        } else if closingBrackets[closingBracketsIndex]\
    \ == ')' {\n                                                           ^~~\n \
    \                                                          \")\"\n/tmp/tmpeem1kiun.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpeem1kiun.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpeem1kiun.swift:20:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[openingBracketsIndex] == '(' {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n    while openingBracketsIndex < openingBracketsCount {\n        openingBracketsIndex\
    \ += 1\n        if openingBrackets[openingBracketsIndex] == '(' {\n          \
    \  openingBracketsCount -= 1\n            if openingBracketsCount == 0 {\n   \
    \             openingBracketsIndex += 1\n            }\n        }\n    }\n   \
    \ while closingBracketsIndex < closingBracketsCount {\n        closingBracketsIndex\
    \ += 1\n        if closingBrackets[closingBracketsIndex] == ')' {\n          \
    \  closingBracketsCount -= 1\n            if closingBracketsCount == 0 {\n   \
    \             closingBracketsIndex += 1\n            }\n        }\n    }\n   \
    \ return openingBracketsIndex == closingBracketsIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp65xjsnu1.swift:21:53: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketsIndex] == '(' {\n      \
    \                                              ^~~\n                         \
    \                           \"(\"\n/tmp/tmp65xjsnu1.swift:30:53: error: single-quoted\
    \ string literal found, use '\"'\n        if closingBrackets[closingBracketsIndex]\
    \ == ')' {\n                                                    ^~~\n        \
    \                                            \")\"\n/tmp/tmp65xjsnu1.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp65xjsnu1.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp65xjsnu1.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp65xjsnu1.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp65xjsnu1.swift:21:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if openingBrackets[openingBracketsIndex] == '(' {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: no"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for openingBracket\
    \ in openingBrackets {\n        if !closingBrackets.contains(where: { $0 == openingBracket\
    \ }) {\n            return false\n        }\n    }\n    \n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj6zcidfp.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpj6zcidfp.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        guard openingBrackets[openingBracketIndex] == \")\" else {\n        \
    \    return false\n        }\n\n        openingBracketIndex += 1\n\n        if\
    \ openingBracketIndex == brackets.endIndex {\n            return true\n      \
    \  }\n\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n\n        openingBracketIndex += 1\n    }\n\
    \n    while closingBracketIndex < brackets.endIndex {\n        guard closingBrackets[closingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n\n        closingBracketIndex\
    \ += 1\n\n        if closingBracketIndex == brackets.endIndex {\n            return\
    \ true\n        }\n\n        guard closingBrackets[closingBracketIndex] == \"\
    )\" else {\n            return false\n        }\n\n        closingBracketIndex\
    \ += 1\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzm849fpq.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzm849fpq.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzm849fpq.swift:23:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpzm849fpq.swift:33:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmpzm849fpq.swift:41:29: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n        closingBracketIndex += 1\n\
    \        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpzm849fpq.swift:51:29: error: binary\
    \ operator '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n\
    \        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n\n    while openingBracketIndex < brackets.endIndex {\n        switch brackets[openingBracketIndex]\
    \ {\n        case \")\":\n            closingBracketCount++\n            openingBracketCount--\n\
    \            if openingBracketCount < 0 {\n                openingBracketIndex\
    \ = brackets.startIndex\n                openingBracketCount = 0\n           \
    \ }\n        case \")\":\n            openingBracketCount++\n            closingBracketCount--\n\
    \            if closingBracketCount < 0 {\n                closingBracketIndex\
    \ = brackets.startIndex\n                closingBracketCount = 0\n           \
    \ }\n        default:\n            openingBracketCount++\n            closingBracketCount++\n\
    \        }\n        openingBracketIndex++\n    }\n\n    return openingBracketCount\
    \ == closingBracketCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu6s061pw.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpu6s061pw.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpu6s061pw.swift:23:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            closingBracketCount++\n        \
    \                       ^~\n/tmp/tmpu6s061pw.swift:24:32: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            openingBracketCount--\n   \
    \                            ^~\n/tmp/tmpu6s061pw.swift:30:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            openingBracketCount++\n\
    \                               ^~\n/tmp/tmpu6s061pw.swift:31:32: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketCount--\n\
    \                               ^~\n/tmp/tmpu6s061pw.swift:37:32: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            openingBracketCount++\n\
    \                               ^~\n/tmp/tmpu6s061pw.swift:38:32: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            closingBracketCount++\n\
    \                               ^~\n/tmp/tmpu6s061pw.swift:29:14: warning: literal\
    \ value is already handled by previous pattern; consider removing it\n       \
    \ case \")\":\n             ^~~\n/tmp/tmpu6s061pw.swift:22:14: note: first occurrence\
    \ of identical literal pattern is here\n        case \")\":\n             ^~~\n\
    /tmp/tmpu6s061pw.swift:40:28: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n        openingBracketIndex++\n                           ^~\n"
  stdout: ''
  timestamp: 1659824978
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    guard openingBrackets.count ==\
    \ closingBrackets.count else {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        guard let closingBracket = closingBrackets.first\
    \ {\n            return openingBracket == closingBracket\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy04b5cle.swift:19:58: error: expected 'else' after 'guard' condition\n\
    \        guard let closingBracket = closingBrackets.first {\n                \
    \                                         ^\n                                \
    \                         else \n/tmp/tmpy04b5cle.swift:13:36: error: value of\
    \ type 'String' has no member 'components'\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpy04b5cle.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824978
