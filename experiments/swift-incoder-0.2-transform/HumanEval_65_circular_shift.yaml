name: HumanEval_65_circular_shift
language: swift
prompt: "\n/// Circular shift the digits of the integer x, shift the digits right\
  \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
  \ return digits reversed.\n/// >>> circular_shift(x: 12, shift: 1)\n/// \"21\"\n\
  /// >>> circular_shift(x: 12, shift: 2)\n/// \"12\"\nfunc circular_shift(x: Int,\
  \ shift: Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(circular_shift(x: 100, shift: 2) == \"001\"\
  )\nassert(circular_shift(x: 12, shift: 2) == \"12\")\nassert(circular_shift(x: 97,\
  \ shift: 8) == \"79\")\nassert(circular_shift(x: 12, shift: 1) == \"21\")\nassert(circular_shift(x:\
  \ 11, shift: 101) == \"11\")"
completions: ["    let digits = x.toString()\n    let shift = shift % len(digits)\n\
    \    return digits[0..<shift] + digits[shift..<len(digits)].reversed()", "   \
    \ var s = String(x)\n    if shift > s.count {\n        return s.reversed()\n \
    \   }\n    var digits = Array(s.characters)\n    for _ in 0..<shift {\n      \
    \  digits.reverse()\n    }\n    return String(digits)", "    var s = String(x)\n\
    \    for i := 0; i < shift; i++ {\n        s = String(s.characters[s.startIndex.advancedBy(i)])\n\
    \    }\n    return s", "    var s = String(x)\n    if shift > s.count {\n    \
    \    s = s.reversed()\n    }\n    var result = \"\"\n    for i := 0; i < shift;\
    \ i++ {\n        result = String(s.characters[s.startIndex.advancedBy(i)])\n \
    \   }\n    return result", "    if shift > x.bitLength {\n        return x.reversed()\n\
    \    }\n    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result\
    \ = String(x.bitAt(i) + x.bitAt(shift-i))\n    }\n    return result", "    let\
    \ digits = x.digits\n    let shiftDigits = digits.reversed()\n    let shiftDigit\
    \ = shiftDigits % 10\n    let digit = digits[shiftDigits.count - shift]\n    return\
    \ String(digit) + String(digits[shiftDigits.count - shift - 1])", "    var s =\
    \ String(x)\n    for _ in 0..<shift {\n        s = String(Int(s)! - Int(s)! +\
    \ Int(s)!)\n    }\n    return s", "    var result = \"\"\n    for digit in x.toString()\
    \ {\n        result = digit.characters.reversed().append(result)\n    }\n    return\
    \ String(result).substring(shift)", "    var s = \"\"\n    for i := 0; i < shift;\
    \ i++ {\n        s = String(format: \"%0*d\", i, x) + s\n    }\n    return s",
  "    let digits = x.digits\n    let shiftDigits = digits.reversed()\n    let shiftDigitCount\
    \ = shiftDigits.count\n    let shiftDigitIndex = shiftDigits.firstIndex(where:\
    \ { $0 >= shift })\n    let shiftDigitCount = shiftDigits.count\n    if shiftDigitIndex\
    \ == -1 && shiftDigitCount > shift {\n        return digits.reversed()\n    }\n\
    \    if shiftDigitIndex == -1 && shiftDigitCount < shift {\n        return digits.reversed()\n\
    \    }\n    if shiftDigitIndex != -1 && shiftDigitCount > shift {\n        return\
    \ digits[shiftDigitIndex..<shiftDigitIndex + shift].reversed()\n    }\n    if\
    \ shiftDigitIndex != -1 && shiftDigitCount < shift {\n        return digits[shiftDigitIndex..<shiftDigitIndex\
    \ + shift].reversed()\n    }\n    return digits.reversed()", "    var s = String(x)\n\
    \    if shift > s.count {\n        s = s.reversed()\n    }\n    return s.stringByPaddingToLength(s.count,\
    \ shift, \"\", true)", "    var s = String(x)\n    if shift > s.count {\n    \
    \    s = s.reversed()\n    }\n    return s.stringByPaddingToLength(s.count, shift,\
    \ \"\", \"\").reversed()", "    var s = \"\"\n    var i = Int(x)\n    var j =\
    \ Int(shift)\n    var k = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n   \
    \ var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var t = Int(0)\n\
    \    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n    var x = Int(0)\n\
    \    var y = Int(0)\n    var z = Int(0)\n    var a = Int(0)\n    var b = Int(0)\n\
    \    var c = Int(0)\n    var d = Int(0)\n    var e = Int(0)\n    var f = Int(0)\n\
    \    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n\
    \    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var t = Int(0)\n\
    \    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n    var x = Int(0)\n\
    \    var y = Int(0)\n    var z = Int(0)\n    var a = Int(0)\n    var b = Int(0)\n\
    \    var c = Int(0)\n    var d = Int(0)\n    var e = Int(0)\n    var f = Int(0)\n\
    \    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n\
    \    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var t = Int(0)\n\
    \    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n    var x = Int(0)\n\
    \    var y = Int(0)\n    var z = Int(0)\n    var a = Int(0)\n    var b = Int(0)\n\
    \    var c = Int(0)\n    var d = Int(0)\n    var e = Int(0)\n    var f = Int(0)\n\
    \    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n\
    \    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var t = Int(0)\n\
    \    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n    var x = Int(0)\n\
    \    var y = Int(0)\n    var z = Int(0)\n    var a = Int(0)\n    var b = Int(0)\n\
    \    var c = Int(0)\n    var d = Int(0)\n    var e = Int(0)\n    var f = Int(0)\n\
    \    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n\
    \    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n\
    \    var p = ", "    if shift > x.bitLength {\n        return x.reverse()\n  \
    \  }\n    var result = \"\"\n    var carry = 0\n    for i := 0; i < x.bitLength;\
    \ i++ {\n        var digit = x.uint(i)\n        if digit < 10 {\n            digit\
    \ *= 10\n            digit += carry\n            carry = digit / 10\n        \
    \    digit %= 10\n        } else {\n            digit -= carry\n            carry\
    \ = 1\n        }\n        result += String(digit)\n    }\n    if carry != 0 {\n\
    \        result += \"0\"\n    }\n    return result.reverse()", "    if shift >\
    \ x.count {\n        return x.reversed()\n    }\n    var result = String()\n \
    \   for _ in 0..<shift {\n        result = String(x.suffix(x.count - shift) +\
    \ result)\n    }\n    return String(x.prefix(shift) + result)", "    var result\
    \ = \"\"\n    for i := 0; i < shift; i++ {\n        result = String(format: \"\
    %0*d\", i, x) + result\n    }\n    if shift < x.count {\n        result = String(format:\
    \ \"%0*d\", x.count - shift, x) + result\n    }\n    return result", "    var\
    \ s = String(x)\n    if shift > s.count {\n        return s.reversed()\n    }\n\
    \    var carry = 0\n    for i := 0; i < shift; i++ {\n        var digit = s.digits[i]\n\
    \        digit = digit + carry\n        digit = digit % 10\n        carry = digit\
    \ / 10\n        s.digits[i] = digit\n    }\n    if carry > 0 {\n        s.digits[shift]\
    \ = carry\n    }\n    return s", "    var s = \"\"\n    for i := 0; i < shift;\
    \ i++ {\n        s += String(x%10)\n        x /= 10\n    }\n    for i := 0; i\
    \ < shift; i++ {\n        x /= 10\n    }\n    return s + String(x)", "    let\
    \ digits = x.toInt()\n    var result = \"\"\n    for digit in digits {\n     \
    \   result = String(digit) + result\n    }\n    if shift > result.characters.count\
    \ {\n        return String(result.characters.reversed())\n    }\n    return String(result.characters.prefix(shift))",
  "    var s = String(x)\n    for i := 0; i < shift; i++ {\n        s = String(s.characters[s.startIndex.advancedBy(i)])\n\
    \    }\n    return s", "    var result = \"\"\n    for digit in x.toString() {\n\
    \        if digit == \"0\" {\n            continue\n        }\n        result\
    \ += \"0\"\n    }\n    for _ in 0..<shift {\n        result += \"0\"\n    }\n\
    \    for digit in x.toString() {\n        if digit == \"0\" {\n            continue\n\
    \        }\n        result += digit\n    }\n    return result", "    if shift\
    \ > x.bitLength {\n        return x.reversed()\n    }\n    var result = \"\"\n\
    \    for _ in 0..<shift {\n        result += \"0\"\n    }\n    for _ in 0..<x.bitLength-shift\
    \ {\n        result += \"1\"\n    }\n    return result", "    var s = \"\"\n \
    \   for i := 0; i < shift; i++ {\n        s += String(x)\n        x = x >> 1\n\
    \    }\n    return s", "    if shift > x.bitLength {\n        return x.reverse()\n\
    \    }\n    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result\
    \ = String(x.bits.rightShiftLeft(shift-i)) + result\n    }\n    return result",
  "    var s = \"\"\n    var i = shift % len(x)\n    for _ in 0..<shift {\n      \
    \  s = x[i] + s\n        i += 1\n    }\n    return s", "    var s = \"\"\n   \
    \ for i := 0; i < shift; i++ {\n        s += String(x)\n        x = x >> 1\n \
    \   }\n    return s", "    var s = String(x)\n    if shift > s.count {\n     \
    \   return s.reversed()\n    }\n    if shift < 0 {\n        shift = -shift\n \
    \   }\n    var carry = 0\n    for i := 0; i < shift; i++ {\n        carry += Int(s[i])\n\
    \        s[i] = carry % 10\n        carry /= 10\n    }\n    return s", "    let\
    \ digits = x.toInt()\n    let shiftDigits = shift % 10\n    let shiftDigit = shift\
    \ / 10\n    var result = \"\"\n    for digit in digits {\n        if digit > 0\
    \ {\n            result += String(digit - shiftDigits)\n        }\n    }\n   \
    \ if shiftDigit > 0 {\n        result += String(shiftDigit)\n    }\n    return\
    \ result", '    return x.toRadixString(shift)', "    var s = \"\"\n    for i :=\
    \ 0; i < shift; i++ {\n        s = String(format: \"%0*d\", i, x) + s\n    }\n\
    \    return s", '    return String(x.reversed().prefix(shift).reversed())', " \
    \   if shift > x.bitLength {\n        return x.reverse()\n    }\n    var result\
    \ = \"\"\n    for _ in 0..<shift {\n        result = String(x.toInt()) + result\n\
    \        x = x >> 1\n    }\n    return result", "    var result = \"\"\n    for\
    \ _ in 0..<shift {\n        result = String(x % 10) + result\n        x = x /\
    \ 10\n    }\n    if shift > result.characters.count {\n        return String(result.reversed())\n\
    \    }\n    return String(result)", '    return x.toRadixString(shift).reverse()',
  "    var s = String(x)\n    for i := 0; i < shift; i++ {\n        s = String(s.characters[s.startIndex.advancedBy(i)])\n\
    \    }\n    return s", "    let digits = x.digits\n    let shift = shift % len(digits)\n\
    \    return String((digits[0..<shift] + digits[shift..<len(digits)]).reversed())",
  "    var s = \"\"\n    for i := 0; i < shift; i++ {\n        s += String(x)\n  \
    \  }\n    for i := shift - 1; i >= 0; i-- {\n        s += String(x)\n    }\n \
    \   return s", "    if shift > x.bitLength {\n        return x.reverse()\n   \
    \ }\n    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result =\
    \ x.digits[i%x.digits.length] + result\n    }\n    return result", "    var s\
    \ = \"\"\n    var i = shift % len(x)\n    for _, b in enumerate(x) {\n       \
    \ if i >= len(b) {\n            s += b[i:]\n            break\n        }\n   \
    \     s += b\n        i -= 1\n    }\n    return s", "    var result = \"\"\n \
    \   for digit := 0; digit < shift; digit++ {\n        result += \"0\"\n    }\n\
    \    for digit := 0; digit < x; digit++ {\n        result += \"1\"\n    }\n  \
    \  return result", "    var result = \"\"\n    var remainder = x % 10\n    for\
    \ _ in 0..<shift {\n        result = String(remainder) + result\n        remainder\
    \ = (remainder % 10) + 10\n    }\n    return String(result)", "    var s = String(x)\n\
    \    if shift > s.count {\n        return s.reversed()\n    }\n    for _ in 0..<shift\
    \ {\n        s = String(s.reversed()) + s\n    }\n    return s", "    var result\
    \ = \"\"\n    for i := 0; i < shift; i++ {\n        result = String(format: \"\
    %0*d\", 0, x) + result\n        x = x >> 1\n    }\n    if shift > 0 {\n      \
    \  result = String(format: \"%0*d\", 0, x) + result\n    }\n    return result",
  "    if shift > x.count {\n        return x.reversed()\n    }\n    var result =\
    \ \"\"\n    for i := 0; i < shift; i++ {\n        result = String(x.digits[i])\
    \ + result\n    }\n    return result", "    var s = \"\"\n    for i := 0; i <\
    \ shift; i++ {\n        s += String(x%10)\n        x /= 10\n    }\n    for i :=\
    \ shift; i < 0; i++ {\n        s += String(x%10)\n        x /= 10\n    }\n   \
    \ return s", "    var s = String(x)\n    if shift > s.count {\n        return\
    \ s.reversed()\n    }\n    for i := 0; i < shift; i++ {\n        s = s.reversed()\n\
    \    }\n    return s", '    return x.toRadixString(shift).reverse()', '    return
    x.toRadixString(shift).reverse()', '    return x.toString(radix: 10, radixBits:
    shift)', "    var s = \"\"\n    for i := 0; i < shift; i++ {\n        s += String(x%10)\n\
    \        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        x /= 10\n \
    \   }\n    return s + String(x)", "    if shift > x.bitLength {\n        return\
    \ x.reverse()\n    }\n    var result = \"\"\n    for i := 0; i < shift; i++ {\n\
    \        result = x.digits[i%x.digitLength] + result\n    }\n    return result",
  "    var s = \"\"\n    var i = shift % len(x)\n    for _ in 0..<shift {\n      \
    \  s = x[i%len(x)] + s\n        i = i / len(x)\n    }\n    return s", "    if\
    \ shift > x.bitLength {\n        return x.reversed()\n    }\n    var result =\
    \ \"\"\n    var carry = 0\n    for digit in x.bits.reversed() {\n        var newDigit\
    \ = digit\n        if carry > 0 {\n            newDigit = carry & 1\n        \
    \    carry >>= 1\n        }\n        result += String(newDigit)\n    }\n    if\
    \ carry > 0 {\n        result += \"1\"\n    }\n    return result.reversed()",
  '    return x.toString(radix: 10, from: x.truncatingRemainder(dividingBy: shift))',
  "    var s = String(x)\n    if shift > s.count {\n        return String(s.reversed())\n\
    \    }\n    if shift < 0 {\n        shift = -shift\n    }\n    if shift > s.count\
    \ {\n        shift = s.count - 1\n    }\n    var i = 0\n    for c in s.characters\
    \ {\n        if i == shift {\n            i += 1\n            continue\n     \
    \   }\n        i += 1\n    }\n    return String(s.characters.dropLast(shift))",
  "    var s = String(x)\n    if shift > s.count {\n        return String(s.reversed())\n\
    \    }\n    if shift < 0 {\n        shift = -shift\n    }\n    if shift > s.count\
    \ {\n        shift = s.count - 1\n    }\n    var i = 0\n    for _ in 0..<shift\
    \ {\n        i += 1\n        s = String(s.characters.dropLast())\n    }\n    return\
    \ s", "    if shift > x.count {\n        return x.reverse()\n    }\n    var result\
    \ = \"\"\n    for _ in 0..<shift {\n        result = x.reverse() + result\n  \
    \  }\n    return result", "    var s = String(x)\n    if shift > s.count {\n \
    \       return s[s.startIndex..<s.startIndex+s.count].reversed()\n    }\n    return\
    \ s[s.startIndex..<s.startIndex+shift]", "    var s = String(x)\n    if shift\
    \ > s.count {\n        return s.reversed()\n    }\n    for _ in 0..<shift {\n\
    \        s = s.reversed()\n    }\n    return s", "    var result = \"\"\n    for\
    \ digit in x.toString() {\n        result = String(digit) + result\n    }\n  \
    \  if shift > result.length {\n        result = String(result.characters.reversed())\
    \ + result\n    }\n    return result", "    var result = \"\"\n    for digit :=\
    \ 0; digit < shift; digit++ {\n        result += \"0\"\n    }\n    for digit :=\
    \ 0; digit < x; digit++ {\n        result += \"1\"\n    }\n    return result",
  "    var result = \"\"\n    var carry = 0\n    for digit in x.toString() {\n   \
    \     let digit = digit.toInt()\n        let newDigit = digit + carry + shift\n\
    \        carry = newDigit / 10\n        newDigit = newDigit % 10\n        result\
    \ = String(newDigit) + result\n    }\n    if carry > 0 {\n        result = String(carry)\
    \ + result\n    }\n    return result", "    var s = \"\"\n    for i := 0; i <\
    \ shift; i++ {\n        s += String(x%10)\n        x /= 10\n    }\n    if shift\
    \ < len(x) {\n        s += String(x%10)\n    }\n    return s", "    let digits\
    \ = x.digits\n    let length = digits.length\n    if shift > length {\n      \
    \  return digits.reversed()\n    }\n    var result = \"\"\n    for i in 0..<shift\
    \ {\n        let digit = digits[i]\n        result += String(digit)\n    }\n \
    \   for i in 0..<length {\n        let digit = digits[i]\n        result += String(digit)\n\
    \    }\n    return result", "    var result = \"\"\n    for digit in x.toString()\
    \ {\n        result = digit.characters.reversed()[Int(digit.characters.count)\
    \ - Int(shift)].toString() + result\n    }\n    return result", "    var s = String(x)\n\
    \    for i := 0; i < shift; i++ {\n        s = String(s.characters[s.startIndex.advancedBy(i)])\n\
    \    }\n    return s", "    let digits = x.digits\n    let shift = shift % len(digits)\n\
    \    let result = String()\n    for _ in 0..<shift {\n        result.append(digits[len(digits)-shift])\n\
    \    }\n    result.append(digits[shift])\n    return result.reversed()", "   \
    \ let digits = x.digits\n    let shift = shift % digits.count\n    let digits_count\
    \ = digits.count\n    let digits_shift = shift / digits_count\n    let digits_shift_count\
    \ = digits_count - digits_shift\n    let digits_shift_digits = digits[digits_shift_count\
    \ ..< digits_count]\n    let digits_shift_digits_count = digits_shift_digits.count\n\
    \    let digits_shift_digits_shift_count = digits_shift_digits_count - digits_shift_count\n\
    \    let digits_shift_digits_shift_digits = digits_shift_digits[digits_shift_digits_shift_count\
    \ ..< digits_shift_digits_count]\n    let digits_shift_digits_shift_digits_count\
    \ = digits_shift_digits_shift_digits.count\n    let digits_shift_digits_shift_digits_shift_count\
    \ = digits_shift_digits_shift_digits_shift_count - digits_shift_digits_shift_count\n\
    \    let digits_shift_digits_shift_digits_shift_digits = digits_shift_digits_shift_digits[digits_shift_digits_shift_digits_shift_count\
    \ ..< digits_shift_digits_shift_digits_count]\n    let digits_shift_digits_shift_digits_shift_digits_count\
    \ = digits_shift_digits_shift_digits_shift_digits_shift_count - digits_shift_digits_shift_count\n\
    \    let digits_shift_digits_shift_digits_shift_digits_shift_count = digits_shift_digits_shift_digits_shift_digits_shift_digits_count\
    \ - digits_shift_digits_shift_count\n    let digits_shift_digits_shift_digits_shift_digits_shift_digits_count\
    \ = digits_shift_digits_shift_digits_shift_digits_shift_digits_shift_count - digits_shift_digits_shift_count\n\
    \    let digits_shift_digits_shift_digits_shift_digits_shift_digits_shift_count\
    \ = digits_shift_digits_shift_digits_shift_digits_shift_digits_shift_digits_count\
    \ - digits_shift_digits_shift_count\n    let digits_shift_digits_shift_digits_shift_digits_shift_digits_shift_digits_count\
    \ = digits_shift_digits_shift_digits_shift_digits_shift_digits_shift_digits_shift_digits_count\
    \ - digits_shift_digits_shift_count\n    let digits_shift_digits_shift_digits_shift_digits_shift_digits_shift_digits_shift_digits_count\
    \ = digits_shift_digits_shift_digits_shift_digits_shift_digits_shift_digits_shift_digits_shift_digits_count\
    \ - digits_shift_digits_shift_count\n    let digits_shift_digits_shift_digits_shift_digits_shift_digits_shift_digits_shift_digits_shift_digits_count\
    \ = digits_shift_digits_shift_digits_shift_digits_", "    var s = \"\"\n    var\
    \ i = shift % len(x)\n    for _ in 0..<shift {\n        s += x[len(x) - 1 - i]\n\
    \        i += 1\n    }\n    return s", "    var result = \"\"\n    var remainder\
    \ = x % 10\n    for _ in 0..<shift {\n        result = String(remainder) + result\n\
    \        remainder = (remainder % 10) + 10\n    }\n    if shift > result.characters.count\
    \ {\n        return String(result.reversed()[result.characters.count - shift -\
    \ 1 ..< 0])\n    }\n    return String(result) + String(remainder)", "    var result\
    \ = \"\"\n    for i := 0; i < shift; i++ {\n        result = String(format: \"\
    %0*d\", i, x) + result\n    }\n    if shift < x.count {\n        result = String(format:\
    \ \"%0*d\", x.count - shift, x) + result\n    }\n    return result", "    let\
    \ digits = x.digits\n    let shift = shift % len(digits)\n    let digits_reversed\
    \ = digits[0..<shift].reversed()\n    return String(digits_reversed) + digits[shift]",
  "    let digits = x.toInt()\n    let shift = Int(pow(2, shift))\n    var result\
    \ = \"\"\n    for digit in digits {\n        result += \"\\((digit - digits) >>\
    \ shift)\"\n    }\n    return result", "    var s = String(x)\n    if shift >\
    \ s.count {\n        return s.reversed()\n    }\n    var carry = 0\n    for i\
    \ := 0; i < s.count; i++ {\n        var digit = s.digits[i]\n        if digit\
    \ < 0 {\n            digit += 10\n            carry = 1\n        } else {\n  \
    \          carry = 0\n        }\n        digit += shift - i\n        digit %=\
    \ 10\n        s.digits[i] = digit\n    }\n    if carry {\n        s.digits.append(0)\n\
    \    }\n    return s", "    if shift > x.count {\n        return x.reversed()\n\
    \    }\n    var result = \"\"\n    for _ in 0..<shift {\n        result += \"\
    0\"\n    }\n    for _ in 0..<x.count {\n        result += String(x.digits[x.count\
    \ - 1 - _])\n    }\n    return result", "    if shift > x.count {\n        return\
    \ x.reversed()\n    }\n    var result = \"\"\n    for _ in 0..<shift {\n     \
    \   result = String(x.digits[x.count - shift]) + result\n    }\n    return result",
  "    var s = \"\"\n    for i := 0; i < shift; i++ {\n        s = String(x >> uint(i))\
    \ + (s[i] != nil ? s[i] : \"\")\n    }\n    return s", "    var s = \"\"\n   \
    \ for i := 0; i < shift; i++ {\n        s += String(x%10)\n        x /= 10\n \
    \   }\n    for i := 0; i < shift; i++ {\n        x /= 10\n        s += String(x%10)\n\
    \    }\n    return s", "    var s = String(x)\n    if shift > s.count {\n    \
    \    s = s.reversed()\n    }\n    return s.stringByPaddingToLength(s.count, shift,\
    \ \"\", true)", "    if shift > x.bitLength {\n        return x.reversed()\n \
    \   }\n    var result = \"\"\n    var carry = 0\n    for digit in x.bits() {\n\
    \        var digit = digit << shift\n        digit += carry\n        carry = digit\
    \ >> 8\n        digit = digit & 0xff\n        result += String(digit)\n    }\n\
    \    if carry != 0 {\n        result += \"1\"\n    }\n    return result", "  \
    \  var result = \"\"\n    var remainder = x % shift\n    for _ in 0..<shift {\n\
    \        result += String(x % 10)\n        x /= 10\n    }\n    if remainder >\
    \ 0 {\n        result += String(remainder)\n    }\n    return result", "    var\
    \ result = \"\"\n    for digit in x.toString() {\n        result = digit.characters.reversed().append(result)\n\
    \    }\n    return String(result).characters.reversed().prefix(shift).append(result)",
  "    if shift > x.bitLength {\n        return x.reverse()\n    }\n    var result\
    \ = \"\"\n    var carry = 0\n    for i := 0; i < shift; i++ {\n        var digit\
    \ = x >> uint(i) & 1\n        result += String(digit)\n        carry = digit <<\
    \ 1\n    }\n    if carry != 0 {\n        result += \"1\"\n    }\n    return result",
  "    let digits = x.digits\n    var result = \"\"\n    for digit in digits {\n \
    \       result = String(digit) + result\n    }\n    if shift > digits.count {\n\
    \        return String(digits.reversed())\n    }\n    if shift < 0 {\n       \
    \ return String(digits[digits.count - shift..<digits.count])\n    }\n    return\
    \ String(digits[0..<(digits.count - shift)])", "    var s = \"\"\n    for i :=\
    \ 0; i < shift; i++ {\n        s += String(x%10)\n        x /= 10\n    }\n   \
    \ for i := shift; i < 0; i++ {\n        s += String(x%10)\n        x /= 10\n \
    \   }\n    return s", "    let digits = x.toInt()\n    let shift = shift % digits\n\
    \    let result = String(digits)\n    if shift > 0 {\n        let remainder =\
    \ digits - shift\n        let remainderString = String(remainder)\n        result\
    \ = remainderString + result\n    }\n    return result", "    let digits = x.digits\n\
    \    var result = \"\"\n    for index in 0..<shift {\n        result = digits[index]\
    \ + result\n    }\n    for index in 0..<shift {\n        result = digits[shift\
    \ + index] + result\n    }\n    return result", "    var s = String(x)\n    if\
    \ shift > s.count {\n        s = s[s.startIndex..<s.startIndex.advancedBy(-shift)].reversed()\n\
    \    }\n    return s", "    if shift > x.count {\n        return x.reversed()\n\
    \    }\n    var s = \"\"\n    for _ in 0..<shift {\n        s = String(x.digits[x.count\
    \ - 1 - Int(x.count)] % 10) + s\n        x.digits[x.count - 1 - Int(x.count)]\
    \ = x.digits[x.count]\n        x.digits[x.count] = 0\n    }\n    return s", " \
    \   var s = String(x)\n    if shift > s.count {\n        s = s.reversed()\n  \
    \  }\n    return String(s.characters.prefix(shift))", "    var s = String(x)\n\
    \    if shift > s.count {\n        return s.reversed()\n    }\n    var shiftDigits\
    \ = shift % s.count\n    if shiftDigits == 0 {\n        return s.reversed()\n\
    \    }\n    var digits = String(x)\n    digits = digits[0..<shiftDigits] + digits[shiftDigits..<s.count]\n\
    \    return digits.reversed()", "    var result = \"\"\n    for i := 0; i < shift;\
    \ i++ {\n        result = String(Int(x)) + result\n        x = x >> 1\n    }\n\
    \    if shift < 0 {\n        result = String(Int(x)) + result\n    }\n    return\
    \ result", "    var s = \"\"\n    for i := 0; i < shift; i++ {\n        s += String(x%10)\n\
    \        x /= 10\n    }\n    if shift > len(s) {\n        for i := len(s) - 1;\
    \ i >= shift; i-- {\n            s += String(x%10)\n            x /= 10\n    \
    \    }\n    }\n    return s", "    var result = \"\"\n    for i := 0; i < shift;\
    \ i++ {\n        result = String(format: \"%0*d\", i, x) + result\n    }\n   \
    \ if shift < 0 {\n        result = String(format: \"%0*d\", -shift, x) + result\n\
    \    }\n    return result", "    var s = String(x)\n    if shift > s.count {\n\
    \        return s.reversed()\n    }\n    if shift < 0 {\n        shift = -shift\n\
    \    }\n    for i := 0; i < shift; i++ {\n        s = String(s.characters[s.startIndex.advancedBy(i)])\n\
    \    }\n    return s", "    var s = String(x)\n    if shift > s.count {\n    \
    \    s = s[s.count - shift - 1 : s.count]\n    }\n    return s", "    var s =\
    \ String(x)\n    if shift > s.count {\n        return s.reversed()\n    }\n  \
    \  for _ in 0..<shift {\n        s = s.reversed()\n    }\n    return s", "   \
    \ var s = \"\"\n    for i := 0; i < shift; i++ {\n        s += String(x)\n   \
    \     x = x >> 1\n    }\n    return s", "    let digits = x.toInt()\n    let shift\
    \ = Int(shift).max(0)\n    let result = String()\n    var i = 0\n    while i <\
    \ digits {\n        let digit = digits[i]\n        let digitShifted = digit >>\
    \ shift\n        if digitShifted != 0 {\n            result += String(digitShifted)\n\
    \        }\n        i += 1\n    }\n    if shift > digits {\n        let digitShifted\
    \ = digits[digits-1] >> shift\n        if digitShifted != 0 {\n            result\
    \ += String(digitShifted)\n        }\n    }\n    return result.reversed()", " \
    \   var s = \"\"\n    var i = shift\n    for c in x.unicodeScalars {\n       \
    \ if i == 0 {\n            s = String(c.value)\n        } else {\n           \
    \ s = String(c.value) + s\n        }\n        i -= 1\n    }\n    return s", " \
    \   var result = \"\"\n    for digit in x.toString() {\n        result += String(digit)[(shift\
    \ - Int(digit)) + 1]\n    }\n    return result.reversed()", "    var result =\
    \ \"\"\n    var carry = 0\n    for digit in x.toString() {\n        let digitAsInt\
    \ = Int(digit)\n        let digitAsInt = digitAsInt + carry << shift\n       \
    \ let digitAsString = String(digitAsInt)\n        carry = digitAsInt >> shift\n\
    \        result = digitAsString + result\n    }\n    if carry > 0 {\n        result\
    \ = String(UInt32(carry) + UInt32(result)) + String(UInt32(carry))\n    }\n  \
    \  return result", "    if shift > x.bitLength {\n        return x.reverse()\n\
    \    }\n    var result = \"\"\n    for _ in 0..<shift {\n        result = String(x.toInt())\
    \ + result\n        x = x >> 1\n    }\n    return result", "    var result = \"\
    \"\n    for i := 0; i < shift; i++ {\n        result = String(format: \"%0*d\"\
    , 0, x) + result\n        x = x >> 1\n    }\n    return result", "    let digits\
    \ = x.digits\n    let shiftDigits = digits.reversed()\n    let shiftDigit = shiftDigits[shift]\n\
    \    let digit = digits[shift]\n    let result = String(digit) + String(shiftDigit)\n\
    \    return result", "    if shift > x.bitLength {\n        return x.reverse()\n\
    \    }\n    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result\
    \ = String(x.bitAt(i) + x.bitAt(shift-i))\n    }\n    return result", "    let\
    \ digits = x.toInt()\n    let shift = shift % digits\n    let result = String()\n\
    \    if shift > 0 {\n        let remainder = digits - shift\n        for _ in\
    \ 0..<remainder {\n            result.append(0)\n        }\n    }\n    for _ in\
    \ 0..<shift {\n        result.append(0)\n    }\n    result.append(x)\n    return\
    \ result.reversed()", "    var s = String(x)\n    if shift > s.count {\n     \
    \   return s.reversed()\n    }\n    for i := 0; i < shift; i++ {\n        s =\
    \ s.reversed()\n    }\n    return s", "    var s = String(x)\n    if shift > s.count\
    \ {\n        shift = s.count - 1\n    }\n    for _ in 0..<shift {\n        s =\
    \ s.reversed()\n    }\n    return s", "    var s = \"\"\n    for i := 0; i < shift;\
    \ i++ {\n        s = String(x >> uint(i)) + (s[i] != nil ? s[i] : \"\")\n    }\n\
    \    return s", "    var s = \"\"\n    var i = 0\n    for c in x.String() {\n\
    \        if i == shift {\n            s += String(c)\n        } else {\n     \
    \       s += String(c)\n        }\n        i += 1\n    }\n    return s", "   \
    \ var s = String(x)\n    if shift > s.count {\n        s = s.reversed()\n    }\n\
    \    return s.stringByPaddingToLength(s.count, shift, \"\", true)", "    var s\
    \ = \"\"\n    var n = x\n    var i = shift\n    for {\n        if i == 0 {\n \
    \           break\n        }\n        s += String(n)\n        n = n >> 1\n   \
    \     i -= 1\n    }\n    return s", "    let digits = x.digits\n    if shift >\
    \ digits.count {\n        return digits.reversed()\n    }\n    let digit = digits[digits.startIndex]\n\
    \    digits[digits.startIndex] = digits[digits.startIndex + shift]\n    digits[digits.startIndex\
    \ + shift] = digit\n    return String(digits)", "    if shift > x.bitLength {\n\
    \        return x.reversed()\n    }\n    var result = \"\"\n    for _ in 0..<shift\
    \ {\n        result = String(x.toInt()) + result\n        x = x >> 1\n    }\n\
    \    return result", "    var s = String(x)\n    for i := 0; i < shift; i++ {\n\
    \        s = String(s.characters[s.startIndex.advancedBy(i)])\n    }\n    return\
    \ s", "    var s = String(x)\n    if shift > s.count {\n        s = s[s.count\
    \ - shift - 1 ..< s.count].reversed()\n    }\n    return s", "    var s = String(x)\n\
    \    if shift > s.count {\n        return s.reversed()\n    }\n    var carry =\
    \ 0\n    for i := 0; i < shift; i++ {\n        carry += Int(s[i]) - Int(s[i -\
    \ 1])\n        s[i] = Int(carry)\n        carry >>= 8\n    }\n    if carry > 0\
    \ {\n        s.append(String(carry))\n    }\n    return s", "    if shift > x.bitLength\
    \ {\n        return x.reversed()\n    }\n    var result = \"\"\n    var carry\
    \ = 0\n    for digit in x.bits.reversed() {\n        var digit = digit << shift\n\
    \        digit += carry\n        carry = digit >> 8\n        digit = digit & 0xff\n\
    \        result += String(digit)\n    }\n    if carry != 0 {\n        result +=\
    \ \"1\"\n    }\n    return result", "    let digits = x.toInt()\n    let result\
    \ = String()\n    var carry = 0\n    for digit in digits {\n        let digit\
    \ = digit + carry\n        carry = digit / 10\n        digit = digit % 10\n  \
    \      result = String(digit) + result\n    }\n    if carry > 0 {\n        result\
    \ = String(carry) + result\n    }\n    if shift > result.characters.count {\n\
    \        return result.reversed()\n    }\n    return result", "    var s = \"\"\
    \n    for i := 0; i < shift; i++ {\n        s += String(x%10)\n        x /= 10\n\
    \    }\n    for i := 0; i < shift; i++ {\n        x /= 10\n    }\n    return s\
    \ + String(x)", "    var s = \"\"\n    for i := 0; i < shift; i++ {\n        s\
    \ = String(x%10) + s\n        x = x/10\n    }\n    if shift > len(s) {\n     \
    \   for i := len(s) - 1; i >= shift; i-- {\n            s = String(x%10) + s\n\
    \            x = x/10\n        }\n    }\n    return s", "    var result = \"\"\
    \n    for digit in x.toString() {\n        result = digit.characters.reversed()[Int(shift)\
    \ % Int(digit.characters.count)] + result\n        shift -= Int(digit.characters.count)\n\
    \    }\n    return result", "    var s = String(x)\n    if shift > s.count {\n\
    \        s = s[s.count - shift - 1 : s.count]\n    } else {\n        s = s[0 :\
    \ shift]\n    }\n    return s", "    var s = \"\"\n    for i := 0; i < shift;\
    \ i++ {\n        s += String(x%10)\n        x /= 10\n    }\n    for i := 0; i\
    \ < shift; i++ {\n        x /= 10\n    }\n    return s + String(x)", "    let\
    \ digits = x.digits\n    let shift = shift % len(digits)\n    if shift > len(digits)\
    \ {\n        return digits[0..<shift].reversed()\n    }\n    return digits[0..<shift]",
  "    var result = \"\"\n    for digit in x.toString() {\n        result = digit.unicodeScalars.first!.value\
    \ + result\n    }\n    return String(result).reversed().prefix(shift)", "    if\
    \ shift > x.bitLength {\n        return x.reverse()\n    }\n    var result = \"\
    \"\n    for _ in 0..<shift {\n        result = String(x.toInt()) + result\n  \
    \      x = x >> 1\n    }\n    return result", "    let digits = x.toInt()\n  \
    \  let result = String()\n    if digits < shift {\n        return String(digits)\n\
    \    }\n    if digits > shift {\n        let remainder = digits % shift\n    \
    \    digits = digits - remainder\n        digits = digits + shift\n    }\n   \
    \ for _ in 0..<digits {\n        result = String(digits) + result\n    }\n   \
    \ return result.reversed()", "    let digits = x.toInt()\n    if digits < 0 {\n\
    \        digits = -digits\n    }\n    let shift = shift % digits\n    if shift\
    \ == 0 {\n        return x.toString()\n    }\n    let digits_shifted = digits\
    \ - shift\n    return String(digits_shifted).reverse()", "    var s = String(x)\n\
    \    if shift > s.count {\n        return s.reversed()\n    }\n    var carry =\
    \ 0\n    for i := 0; i < s.count; i++ {\n        var digit = s.digits[i]\n   \
    \     if digit < 0 {\n            digit += 10\n            carry = 1\n       \
    \ } else {\n            carry = 0\n        }\n        s.digits[i] = digit + carry\
    \ << shift\n    }\n    return s", "    let digits = x.toInt()\n    var result\
    \ = \"\"\n    for _ in 0..<shift {\n        result = String(digits) + result\n\
    \        digits >>= 1\n    }\n    return result.reversed()", "    var s = String(x)\n\
    \    if shift > s.count {\n        s = s[s.count - shift - 1 ..< s.count].reversed()\n\
    \    }\n    return s", "    let digits = x.toInt()\n    let shift = shift % digits\n\
    \    let result = String()\n    for _ in 0..<shift {\n        result = String(digits)\
    \ + result\n    }\n    return String(digits[0..<(digits - shift)..<digits])",
  "    var result = \"\"\n    for digit in x.toString() {\n        result += String(digit)[(shift\
    \ - result.length) % len(String(digit))]\n    }\n    return result", "    var\
    \ s = String(x)\n    if shift > s.count {\n        return s.reversed()\n    }\n\
    \    for i := 0; i < shift; i++ {\n        s = String(s.characters[s.startIndex.advancedBy(i)])\n\
    \    }\n    return s", "    var s = String(x)\n    if shift > s.count {\n    \
    \    s = s.reversed()\n    }\n    return s.stringByPaddingToLength(s.count, shift,\
    \ \"\", true)", "    var result = \"\"\n    var shiftDigits = shift % 10\n   \
    \ var shiftRemainder = shift / 10\n    for digit in x.toString() {\n        if\
    \ digit == \"0\" {\n            result += digit\n        } else {\n          \
    \  result += String(digit) + String(shiftDigits)\n        }\n    }\n    if shiftRemainder\
    \ > 0 {\n        result += String(shiftRemainder)\n    }\n    return result.reversed()",
  "    var result = \"\"\n    for digit in x.toString() {\n        result = digit.stringByAppendingString(result)\n\
    \    }\n    if shift > result.characters.count {\n        return result.reversed()\n\
    \    }\n    return result.stringByAppendingString(String(repeating: \"\", count:\
    \ shift - result.characters.count))", '    return x.toRadixString(shift)', " \
    \   if shift > x.count {\n        return x.reversed()\n    }\n    var result =\
    \ \"\"\n    for i := 0; i < shift; i++ {\n        result = String(x.digits[i])\
    \ + result\n    }\n    return result", "    if shift > x.truncatingRemainder(dividingBy:\
    \ 10).magnitude.magnitude {\n        return x.reversed()\n    }\n    var result\
    \ = \"\"\n    var remainder = x.truncatingRemainder(dividingBy: 10)\n    for _\
    \ in 0..<shift {\n        result = String(remainder) + result\n        remainder\
    \ = remainder.quotientModulo(10)\n    }\n    return result", "    let digits =\
    \ x.digits\n    let length = digits.count\n    if shift > length {\n        return\
    \ digits.reversed()\n    }\n    let digit = digits[length-shift]\n    let digits\
    \ = digits.prefix(length-shift)\n    let result = digits.reversed()\n    return\
    \ String(result) + digit", "    var s = \"\"\n    for i := 0; i < shift; i++ {\n\
    \        s += String(x%10)\n        x /= 10\n    }\n    for i := 0; i < shift;\
    \ i++ {\n        x /= 10\n    }\n    return s", "    if shift > x.bitLength {\n\
    \        return x.reverse()\n    }\n    var result = \"\"\n    var carry = 0\n\
    \    for i := 0; i < shift; i++ {\n        var digit = x >> uint(i) & 1\n    \
    \    result += digit\n        carry = digit >> 1\n    }\n    if carry != 0 {\n\
    \        result += \"1\"\n    }\n    return result", "    var result = \"\"\n\
    \    for digit in x.toString() {\n        result = String(digit) + result\n  \
    \  }\n    if shift > result.length {\n        return String(result.reverse())\n\
    \    }\n    return String(result.prefix(shift) + result.suffix(result.length +\
    \ shift - shift))", "    let digits = x.digits\n    if shift > digits.count {\n\
    \        return digits.reversed()\n    }\n    let digit = digits[shift]\n    let\
    \ digits = digits.dropFirst(shift)\n    return digits.reverse().append(digit)",
  "    var result = \"\"\n    var remainder = x % 10\n    for _ in 0..<shift {\n \
    \       result += String(remainder)\n        remainder = remainder / 10\n    }\n\
    \    if remainder > 0 {\n        result += String(remainder)\n    }\n    return\
    \ result.reversed()", "    var s = \"\"\n    for i := 0; i < shift; i++ {\n  \
    \      s = digits[(x + i) % 10] + s\n    }\n    return s", "    var s = String(x)\n\
    \    if shift > s.count {\n        return String(s.reversed())\n    }\n    \n\
    \    var result = \"\"\n    var carry = 0\n    for i := 0; i < s.count; i++ {\n\
    \        var digit = s.digits[i]\n        var newDigit = digit + carry + Int(pow(10,\
    \ shift)) * Int(pow(10, -shift))\n        carry = newDigit / Int(pow(10, shift))\n\
    \        result = String(newDigit % Int(pow(10, shift)))\n    }\n    if carry\
    \ > 0 {\n        result = String(result) + String(carry)\n    }\n    return result",
  "    let digits = x.digits\n    let shift = shift % len(digits)\n    let result\
    \ = String()\n    for digit in digits {\n        result += digits[digit].stringByReplacingCharactersInRange(\n\
    \            Range<String.Index>(start: digit.index, end: digit.index + 1),\n\
    \            withString: digits[digit].stringByReplacingCharactersInRange(\n \
    \               Range<String.Index>(start: digit.index, end: digit.index + shift),\n\
    \                withString: digits[digit].stringByReplacingCharactersInRange(\n\
    \                    Range<String.Index>(start: digit.index, end: digit.index\
    \ + len(digits) - shift),\n                    withString: digits[digit].stringByReplacingCharactersInRange(\n\
    \                        Range<String.Index>(start: digit.index, end: digit.index\
    \ + len(digits)),\n                        withString: digits[digit].stringByReplacingCharactersInRange(\n\
    \                            Range<String.Index>(start: digit.index, end: digit.index\
    \ + len(digits)),\n                            withString: digits[digit].stringByReplacingCharactersInRange(\n\
    \                                Range<String.Index>(start: digit.index, end:\
    \ digit.index + len(digits)),\n                                withString: digits[digit].stringByReplacingCharactersInRange(\n\
    \                                    Range<String.Index>(start: digit.index, end:\
    \ digit.index + len(digits)),\n                                    withString:\
    \ digits[digit].stringByReplacingCharactersInRange(\n                        \
    \                Range<String.Index>(start: digit.index, end: digit.index + len(digits)),\n\
    \                                        withString: digits[digit].stringByReplacingCharactersInRange(\n\
    \                                            Range<String.Index>(start: digit.index,\
    \ end: digit.index + len(digits)),\n                                         \
    \   withString: digits[digit].stringByReplacingCharactersInRange(\n          \
    \                                      Range<String.Index>(start: digit.index,\
    \ end: digit.index + len(digits)),\n                                         \
    \       withString: digits[digit].stringByReplacingCharactersInRange(\n      \
    \                                              Range<String.Index>(start: digit.index,\
    \ end: digit.index + len(digits)),\n                                         \
    \           withString: digits[digit].stringByReplacingCharactersInRange(\n  \
    \                                                      Range<String.Index>(start:\
    \ digit.index, end: digit.index + len(digits)),\n                            \
    \                            withString: digits[digit].stringByReplacingCharactersInRange(\n\
    \                                                            Range<String.Index>(start:\
    \ digit.index, end: digit.index + len(digits)),\n                            \
    \                                withString: digits[digit].stringByReplacingCharactersInRange(\n\
    \                                                                Range<String.",
  "    let digits = x.toInt()\n    let shiftDigits = shift % 10\n    let shiftDigit\
    \ = shift / 10\n    var result = \"\"\n    for digit in digits {\n        if digit\
    \ > 0 {\n            result += String(digit)\n        }\n    }\n    if shiftDigits\
    \ > 0 {\n        result += String(digits[digits.startIndex.advancedBy(shiftDigits)])\n\
    \    }\n    if shiftDigit > 0 {\n        result += String(digits[digits.startIndex.advancedBy(shiftDigit)])\n\
    \    }\n    return result", "    var result = \"\"\n    var remainder = x % shift\n\
    \    if remainder == 0 {\n        return String(x >> shift)\n    }\n    for _\
    \ in 0..<shift {\n        result += String(remainder)\n        remainder = x %\
    \ shift\n    }\n    result += String(remainder)\n    return result", "    var\
    \ s = String(x)\n    for i := 0; i < shift; i++ {\n        s = String(s.characters[s.startIndex.advancedBy(i)])\n\
    \    }\n    return s", "    let digits = x.toString()\n    var result = \"\"\n\
    \    for index in 0..<digits.count {\n        let digit = digits[index]\n    \
    \    let digitShifted = digit + shift\n        if digitShifted > 9 {\n       \
    \     digitShifted -= 9\n        }\n        result += String(digitShifted)\n \
    \   }\n    return result.reversed()", "    let digits = x.toInt()\n    let shiftDigits\
    \ = shift % digits\n    let digitsToShift = digits - shiftDigits\n    let digitsToShiftString\
    \ = String(digitsToShift)\n    let digitsToShiftStringReversed = digitsToShiftString.reversed()\n\
    \    let digitsToShiftStringReversedString = String(digitsToShiftStringReversed)\n\
    \    return digitsToShiftStringReversedString", "    var result = \"\"\n    for\
    \ digit in x.toString() {\n        result = String(digit) + result\n    }\n  \
    \  if shift > result.length {\n        return String(result.reverse())\n    }\n\
    \    return String(result[(result.length - shift)..<result.length])", "    var\
    \ s = String(x)\n    if shift > s.count {\n        return s.reversed()\n    }\n\
    \    for _ in 0..<shift {\n        s = String(s.characters.dropLast())\n    }\n\
    \    return s", "    var s = String(x)\n    if shift > s.count {\n        return\
    \ s.reversed()\n    }\n    var carry = 0\n    for i := 0; i < shift; i++ {\n \
    \       var digit = s.digits[i]\n        if digit < 0 {\n            digit +=\
    \ 10\n            carry = 1\n        } else {\n            carry = 0\n       \
    \ }\n        s.digits[i] = digit\n    }\n    if carry {\n        s.digits[shift]\
    \ = -1\n    }\n    return s", '    return x.toRadixString(shift).reverse()', " \
    \   var s = String(x)\n    if shift > s.count {\n        s = s.reversed()\n  \
    \  }\n    return String(s.characters.prefix(s.count - shift))", "    var s = String(x)\n\
    \    if shift > s.count {\n        return s.reversed()\n    }\n    if shift <\
    \ 0 {\n        shift = -shift\n    }\n    var carry = 0\n    for i := 0; i < shift;\
    \ i++ {\n        var digit = s.digits[i]\n        carry = digit + carry\n    \
    \    s.digits[i] = carry % 10\n        carry = carry / 10\n    }\n    if carry\
    \ != 0 {\n        s.digits[shift] = carry\n    }\n    return s", "    let digits\
    \ = x.toInt()\n    let shift = Int(shift) % Int(digits.count)\n    let digits_reversed\
    \ = digits % Int(digits.count)\n    return String(digits_reversed) + String(digits)",
  "    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result = String(Int(x))\
    \ + result\n        x = x >> 1\n    }\n    if shift > len(result) {\n        result\
    \ = String(Int(x)) + result\n    }\n    return result", "    var s = \"\"\n  \
    \  var i = shift\n    for c in x.unicodeScalars {\n        s += String(c.value)\n\
    \        i -= 1\n        if i < 0 {\n            i = shift + i\n        }\n  \
    \  }\n    return s", "    var result = \"\"\n    var remainder = x % 10\n    for\
    \ _ in 0..<shift {\n        result += String(remainder)\n        remainder = remainder\
    \ / 10\n    }\n    result += String(remainder)\n    return result", "    var s\
    \ = String(x)\n    for i := 0; i < shift; i++ {\n        s = String(Int(s[i])\
    \ - Int(s[i+shift]) + Int(s[i]))\n    }\n    return s", "    if shift > x.bitLength\
    \ {\n        return x.reversed()\n    }\n    var result = \"\"\n    for i := 0;\
    \ i < shift; i++ {\n        result = x.digits[i]+result\n    }\n    return result",
  "    var s = String(x)\n    for i := 0; i < shift; i++ {\n        s = String(s.characters[s.startIndex.advancedBy(i)])\n\
    \    }\n    return s", "    var s = String(x)\n    if shift > s.count {\n    \
    \    return s.reversed()\n    }\n    for _ in 0..<shift {\n        s = s.reversed()\n\
    \    }\n    return s", "    var s = \"\"\n    for i := 0; i < shift; i++ {\n \
    \       s += String(x)\n        x = x >> 1\n    }\n    return s", "    if shift\
    \ > x.truncatingRemainder(dividingBy: 10).magnitude.magnitude {\n        return\
    \ x.reversed()\n    }\n    var result = \"\"\n    for _ in 0..<shift {\n     \
    \   result = String(x.truncatingRemainder(dividingBy: 10) + 10) + result\n   \
    \     x = x.truncatingRemainder(dividingBy: 10)\n    }\n    return result", " \
    \   var s = \"\"\n    for i := 0; i < shift; i++ {\n        s = String(format:\
    \ \"%0*d\", i, x) + s\n    }\n    if shift < 0 {\n        s = String(format: \"\
    %0*d\", -shift, x) + s\n    }\n    return s", "    if shift > x.truncatingRemainder(dividingBy:\
    \ 10).magnitude.magnitude.magnitude {\n        return x.reversed()\n    }\n  \
    \  return x.reversed().prefix(shift).reversed()", "    var s = \"\"\n    var i\
    \ = shift\n    for _ in 0..<shift {\n        s += String(x)\n        x = x >>\
    \ 1\n    }\n    if shift > 0 {\n        s += String(x)\n    }\n    return s",
  "    if shift > x.bitLength {\n        return x.reversed()\n    }\n    var result\
    \ = \"\"\n    for _ in 0..<shift {\n        result = String(x.toInt()) + result\n\
    \        x = x >> 1\n    }\n    return result", "    var s = String(x)\n    if\
    \ shift > s.count {\n        shift = s.count - 1\n    }\n    for i := 0; i < shift;\
    \ i++ {\n        s = s.reversed()\n    }\n    return s", "    if shift > x.bitLength\
    \ {\n        return x.reverse()\n    }\n    var result = \"\"\n    for _ in 0..<shift\
    \ {\n        result = String(x.bitShiftLeft(shift))\n    }\n    return result",
  "    var s = \"\"\n    for i := 0; i < shift; i++ {\n        s = String(x >> uint(i))\
    \ + (s[i] != nil ? s[i] : \"\")\n    }\n    return s", "    var result = \"\"\n\
    \    for digit in x.toString() {\n        result = digit.characters.reversed().append(result)\n\
    \    }\n    if shift > result.characters.count {\n        return result.reversed()\n\
    \    }\n    return result.characters.reversed().prefix(shift).append(result)",
  "    var s = \"\"\n    var i = shift\n    for digit := 0; digit < len(x); digit++\
    \ {\n        s += String(x[digit])\n        if digit < shift {\n            s\
    \ += String(x[digit+shift])\n        }\n    }\n    return s", "    var s = String(x)\n\
    \    for i := 0; i < shift; i++ {\n        s = String(Int(s[i])) + s\n    }\n\
    \    return s", "    var result = \"\"\n    for digit in x.toString() {\n    \
    \    result += String(digit)[(shift - result.length) % len(digit)]\n    }\n  \
    \  return result", '    return x.toRadixString(shift)', "    if shift > x.count\
    \ {\n        return x.reversed()\n    }\n    var result = String()\n    for _\
    \ in 0..<shift {\n        result = x.reversed()\n    }\n    return result + x",
  "    var result = \"\"\n    var remainder = x % 10\n    for _ in 0..<shift {\n \
    \       result = String(remainder) + result\n        remainder = remainder / 10\n\
    \    }\n    return String(remainder) + result", "    var s = String(x)\n    for\
    \ i := 0; i < shift; i++ {\n        s = String(s.characters[s.startIndex.advancedBy(i)])\n\
    \    }\n    return s", "    if shift > x.bitLength {\n        return x.reverse()\n\
    \    }\n    var result = \"\"\n    var carry = 0\n    for digit in x.bits.reversed()\
    \ {\n        var digit = digit\n        for _ in 0..<shift {\n            digit\
    \ = digit.rightShift()\n        }\n        digit += carry\n        carry = digit\
    \ >> 8\n        digit &= 0xff\n        result += digit.bits.reversed()\n    }\n\
    \    if carry != 0 {\n        result += \"0\"\n    }\n    return result", "  \
    \  var s = String(x)\n    if shift > s.count {\n        return s.reversed()\n\
    \    }\n    var carry = 0\n    for i := 0; i < shift; i++ {\n        carry +=\
    \ Int(s[i]) - Int(s[s.count-i-1])\n        s[i] = carry % 10\n        carry /=\
    \ 10\n    }\n    return s", "    var s = String(x)\n    if shift > s.count {\n\
    \        s = s[s.count - shift - 1 ..< s.count].reversed()\n    }\n    return\
    \ s", "    let digits = x.toInt()\n    let shift = Int(shift)\n    if shift >\
    \ digits {\n        return String(digits).reversed()\n    }\n    var result =\
    \ \"\"\n    for _ in 0..shift {\n        result = String(digits) + result\n  \
    \  }\n    return result", "    var result = \"\"\n    for _ in 0..<shift {\n \
    \       result = String(format: \"%0*d\", 0, x) + result\n        x = x >> 1\n\
    \    }\n    return result", "    var s = String(x)\n    if shift > s.count {\n\
    \        shift = s.count - 1\n    }\n    if shift < 0 {\n        shift = 0\n \
    \   }\n    for i := 0; i < shift; i++ {\n        s = String(s.characters[s.startIndex.advancedBy(i)])\n\
    \    }\n    return s", "    var s = String(x)\n    if shift > s.count {\n    \
    \    return String(s.reversed())\n    }\n    var carry = 0\n    for i := 0; i\
    \ < shift; i++ {\n        carry += Int(s[i]) - Int(s[s.count-i-1])\n        s[i]\
    \ = carry % 10\n        carry /= 10\n    }\n    if carry > 0 {\n        s.append(String(carry))\n\
    \    }\n    return s", "    var s = \"\"\n    for i := 0; i < shift; i++ {\n \
    \       s = String(x >> uint(i)) + (s[i] != nil ? s[i] : \"\")\n    }\n    return\
    \ s", "    var s = String(x)\n    if shift > s.count {\n        s = s.reversed()\n\
    \    }\n    return s.stringByPaddingToLength(s.count, shift, \"\", true)", " \
    \   var s = \"\"\n    var i = shift % len(x)\n    for _ in 0..<shift {\n     \
    \   s = x[len(x)-len(s)-1] + s\n    }\n    return s", "    var result = \"\"\n\
    \    for digit in x.toString() {\n        result = String(digit) + result\n  \
    \  }\n    if shift > result.length {\n        return String(result.reversed())\n\
    \    }\n    return String(result[(result.length - shift)..<result.length])", " \
    \   if shift > x.bitLength {\n        return x.reversed()\n    }\n    var result\
    \ = \"\"\n    for _ in 0..<shift {\n        result = String(x.reversed()) + result\n\
    \        x = x >> 1\n    }\n    return result", "    var result = \"\"\n    for\
    \ i := 0; i < shift; i++ {\n        result = String(format: \"%0*d\", i, x) +\
    \ result\n    }\n    if shift > x.count {\n        result = String(format: \"\
    %0*d\", x.count-shift, x) + result\n    }\n    return result"]
stop_tokens:
- "\n}"
