name: HumanEval_65_circular_shift
language: swift
prompt: "\n/// Circular shift the digits of the integer x, shift the digits right\
  \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
  \ return digits reversed.\n/// >>> circular_shift(x: 12, shift: 1)\n/// \"21\"\n\
  /// >>> circular_shift(x: 12, shift: 2)\n/// \"12\"\nfunc circular_shift(x: Int,\
  \ shift: Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(circular_shift(x: 100, shift: 2) == \"001\"\
  )\nassert(circular_shift(x: 12, shift: 2) == \"12\")\nassert(circular_shift(x: 97,\
  \ shift: 8) == \"79\")\nassert(circular_shift(x: 12, shift: 1) == \"21\")\nassert(circular_shift(x:\
  \ 11, shift: 101) == \"11\")"
completions: ["    let digits = x.toString()\n    let shift = shift % len(digits)\n\
    \    return digits[0..<shift] + digits[shift..<len(digits)].reversed()", "   \
    \ var s = String(x)\n    if shift > s.count {\n        return s.reversed()\n \
    \   }\n    var digits = Array(s.characters)\n    for _ in 0..<shift {\n      \
    \  digits.reverse()\n    }\n    return String(digits)", "    var s = String(x)\n\
    \    for i := 0; i < shift; i++ {\n        s = String(s.characters[s.startIndex.advancedBy(i)])\n\
    \    }\n    return s", "    var s = String(x)\n    if shift > s.count {\n    \
    \    s = s.reversed()\n    }\n    var result = \"\"\n    for i := 0; i < shift;\
    \ i++ {\n        result = String(s.characters[s.startIndex.advancedBy(i)])\n \
    \   }\n    return result", "    if shift > x.bitLength {\n        return x.reversed()\n\
    \    }\n    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result\
    \ = String(x.bitAt(i) + x.bitAt(shift-i))\n    }\n    return result", "    let\
    \ digits = x.digits\n    let shiftDigits = digits.reversed()\n    let shiftDigit\
    \ = shiftDigits % 10\n    let digit = digits[shiftDigits.count - shift]\n    return\
    \ String(digit) + String(digits[shiftDigits.count - shift - 1])", "    var s =\
    \ String(x)\n    for _ in 0..<shift {\n        s = String(Int(s)! - Int(s)! +\
    \ Int(s)!)\n    }\n    return s", "    var result = \"\"\n    for digit in x.toString()\
    \ {\n        result = digit.characters.reversed().append(result)\n    }\n    return\
    \ String(result).substring(shift)", "    var s = \"\"\n    for i := 0; i < shift;\
    \ i++ {\n        s = String(format: \"%0*d\", i, x) + s\n    }\n    return s",
  "    let digits = x.digits\n    let shiftDigits = digits.reversed()\n    let shiftDigitCount\
    \ = shiftDigits.count\n    let shiftDigitIndex = shiftDigits.firstIndex(where:\
    \ { $0 >= shift })\n    let shiftDigitCount = shiftDigits.count\n    if shiftDigitIndex\
    \ == -1 && shiftDigitCount > shift {\n        return digits.reversed()\n    }\n\
    \    if shiftDigitIndex == -1 && shiftDigitCount < shift {\n        return digits.reversed()\n\
    \    }\n    if shiftDigitIndex != -1 && shiftDigitCount > shift {\n        return\
    \ digits[shiftDigitIndex..<shiftDigitIndex + shift].reversed()\n    }\n    if\
    \ shiftDigitIndex != -1 && shiftDigitCount < shift {\n        return digits[shiftDigitIndex..<shiftDigitIndex\
    \ + shift].reversed()\n    }\n    return digits.reversed()", "    var s = String(x)\n\
    \    if shift > s.count {\n        s = s.reversed()\n    }\n    return s.stringByPaddingToLength(s.count,\
    \ shift, \"\", true)", "    var s = String(x)\n    if shift > s.count {\n    \
    \    s = s.reversed()\n    }\n    return s.stringByPaddingToLength(s.count, shift,\
    \ \"\", \"\").reversed()", "    var s = \"\"\n    var i = Int(x)\n    var j =\
    \ Int(shift)\n    var k = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n   \
    \ var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var t = Int(0)\n\
    \    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n    var x = Int(0)\n\
    \    var y = Int(0)\n    var z = Int(0)\n    var a = Int(0)\n    var b = Int(0)\n\
    \    var c = Int(0)\n    var d = Int(0)\n    var e = Int(0)\n    var f = Int(0)\n\
    \    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n\
    \    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var t = Int(0)\n\
    \    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n    var x = Int(0)\n\
    \    var y = Int(0)\n    var z = Int(0)\n    var a = Int(0)\n    var b = Int(0)\n\
    \    var c = Int(0)\n    var d = Int(0)\n    var e = Int(0)\n    var f = Int(0)\n\
    \    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n\
    \    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var t = Int(0)\n\
    \    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n    var x = Int(0)\n\
    \    var y = Int(0)\n    var z = Int(0)\n    var a = Int(0)\n    var b = Int(0)\n\
    \    var c = Int(0)\n    var d = Int(0)\n    var e = Int(0)\n    var f = Int(0)\n\
    \    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n\
    \    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var t = Int(0)\n\
    \    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n    var x = Int(0)\n\
    \    var y = Int(0)\n    var z = Int(0)\n    var a = Int(0)\n    var b = Int(0)\n\
    \    var c = Int(0)\n    var d = Int(0)\n    var e = Int(0)\n    var f = Int(0)\n\
    \    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n\
    \    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n\
    \    var p = ", "    if shift > x.bitLength {\n        return x.reverse()\n  \
    \  }\n    var result = \"\"\n    var carry = 0\n    for i := 0; i < x.bitLength;\
    \ i++ {\n        var digit = x.uint(i)\n        if digit < 10 {\n            digit\
    \ *= 10\n            digit += carry\n            carry = digit / 10\n        \
    \    digit %= 10\n        } else {\n            digit -= carry\n            carry\
    \ = 1\n        }\n        result += String(digit)\n    }\n    if carry != 0 {\n\
    \        result += \"0\"\n    }\n    return result.reverse()", "    if shift >\
    \ x.count {\n        return x.reversed()\n    }\n    var result = String()\n \
    \   for _ in 0..<shift {\n        result = String(x.suffix(x.count - shift) +\
    \ result)\n    }\n    return String(x.prefix(shift) + result)", "    var result\
    \ = \"\"\n    for i := 0; i < shift; i++ {\n        result = String(format: \"\
    %0*d\", i, x) + result\n    }\n    if shift < x.count {\n        result = String(format:\
    \ \"%0*d\", x.count - shift, x) + result\n    }\n    return result", "    var\
    \ s = String(x)\n    if shift > s.count {\n        return s.reversed()\n    }\n\
    \    var carry = 0\n    for i := 0; i < shift; i++ {\n        var digit = s.digits[i]\n\
    \        digit = digit + carry\n        digit = digit % 10\n        carry = digit\
    \ / 10\n        s.digits[i] = digit\n    }\n    if carry > 0 {\n        s.digits[shift]\
    \ = carry\n    }\n    return s", "    var s = \"\"\n    for i := 0; i < shift;\
    \ i++ {\n        s += String(x%10)\n        x /= 10\n    }\n    for i := 0; i\
    \ < shift; i++ {\n        x /= 10\n    }\n    return s + String(x)", "    let\
    \ digits = x.toInt()\n    var result = \"\"\n    for digit in digits {\n     \
    \   result = String(digit) + result\n    }\n    if shift > result.characters.count\
    \ {\n        return String(result.characters.reversed())\n    }\n    return String(result.characters.prefix(shift))",
  "    var s = String(x)\n    for i := 0; i < shift; i++ {\n        s = String(s.characters[s.startIndex.advancedBy(i)])\n\
    \    }\n    return s"]
stop_tokens:
- "\n}"
