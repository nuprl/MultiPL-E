language: swift
name: HumanEval_47_median
results:
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2\
    \ {\n        return Double(l.first!)\n    }\n    var mid = l.count / 2\n    return\
    \ Double(l[mid])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp28gf0ah4/tmp28gf0ah4.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acaf0f41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acaf0c38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acaf0c38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acaf0c377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28gf0ah4                        0x000055b07aaa668d <unavailable> + 5773

    5    libc.so.6                          0x00002acaf112d460 __libc_start_main +
    245

    6    tmp28gf0ah4                        0x000055b07aaa61e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 2 {\n     \
    \   return Double(l.first!)\n    }\n    var m = Double(l.first!)\n    for x in\
    \ l.dropFirst() {\n        if x < m {\n            m = x\n        }\n    }\n \
    \   return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpu4dipqw8.swift:14:14: error: binary operator '<' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        if x < m {\n           ~ ^ ~\n\
    /tmp/tmpu4dipqw8.swift:14:14: note: overloads for '<' exist with these partially\
    \ matching parameter lists: (Int, Int)\n        if x < m {\n             ^\n/tmp/tmpu4dipqw8.swift:15:17:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n            m = x\n\
    \                ^\n                Double( )\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.last! + l.first!) / Double(l.count - 1)\n   \
    \ } else {\n        return Double(l.first!)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpzwassk3d/tmpzwassk3d.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a2530cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a25003b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a25003988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a250027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzwassk3d                        0x00005646e34c9661 <unavailable> + 5729

    5    libc.so.6                          0x00002b9a254f8460 __libc_start_main +
    245

    6    tmpzwassk3d                        0x00005646e34c92a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 1 {\n        return sorted[(sorted.count - 1) / 2]\n    }\n    return\
    \ (sorted[(sorted.count - 1) / 2] + sorted[(sorted.count - 1) / 2 - 1]) / 2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpk4r8t5a4.swift:10:22: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return sorted[(sorted.count - 1)\
    \ / 2]\n               ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n               Double(\
    \                       )\n/tmp/tmpk4r8t5a4.swift:12:82: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return (sorted[(sorted.count\
    \ - 1) / 2] + sorted[(sorted.count - 1) / 2 - 1]) / 2\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    \           Double(                                                          \
    \        )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 0 {\n        return Double(l.count / 2)\n    }\n    return Double(0)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpthc1w5dz/tmpthc1w5dz.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cb9884c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cb957bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cb957b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cb957a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpthc1w5dz                        0x000055d2b473b531 <unavailable> + 5425

    5    libc.so.6                          0x00002b2cb9a70460 __libc_start_main +
    245

    6    tmpthc1w5dz                        0x000055d2b473b179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659824640
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return Double(l[l.count / 2 - 1] + l[l.count / 2]) / 2.0\n \
    \   }\n    return Double(l[l.count / 2] + l[l.count / 2 - 1]) / 2.0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp_uivorso/tmp_uivorso.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c795d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c792c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c792c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c792c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_uivorso                        0x000055fcf71e8501 <unavailable> + 5377

    5    libc.so.6                          0x00002b9c797bc460 __libc_start_main +
    245

    6    tmp_uivorso                        0x000055fcf71e8149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824640
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[(sorted.count - 1) / 2] + sorted[sorted.count\
    \ / 2])\n    } else {\n        return Double(sorted[(sorted.count - 1) / 2 - 1]\
    \ + sorted[sorted.count / 2 - 1])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp56rjzmw4/tmp56rjzmw4.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88a7862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88a7559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88a7559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88a75587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp56rjzmw4                        0x0000561ad5c1c501 <unavailable> + 5377

    5    libc.so.6                          0x00002b88a7a4e460 __libc_start_main +
    245

    6    tmp56rjzmw4                        0x0000561ad5c1c149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count -\
    \ 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpo6o7z4m8.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpo6o7z4m8.swift:12:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvrjl3d55.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpvrjl3d55.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    let mid = n / 2\n    let left = l[0 ..< mid]\n\
    \    let right = l[mid..<n]\n    let median = median(left)\n    if median.isNaN\
    \ || median.isInfinite {\n        return median\n    }\n    return median.doubleValue\
    \ + median(right)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe8afpvzj.swift:15:25: error: missing argument label 'l:' in call\n\
    \    let median = median(left)\n                        ^\n                  \
    \      l: \n/tmp/tmpe8afpvzj.swift:15:25: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n    let median = median(left)\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    let mid = n / 2\n    let leftMedian = median(l.prefix(mid))\n\
    \    let rightMedian = median(l.suffix(mid))\n    return Double(leftMedian) +\
    \ Double(rightMedian) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp8yh533lw.swift:13:29: error: missing argument label 'l:' in call\n\
    \    let leftMedian = median(l.prefix(mid))\n                            ^\n \
    \                           l: \n/tmp/tmp8yh533lw.swift:14:30: error: missing\
    \ argument label 'l:' in call\n    let rightMedian = median(l.suffix(mid))\n \
    \                            ^\n                             l: \n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var sortedList = l.sorted()\n    if sortedList.count\
    \ % 2 == 0 {\n        return sortedList[sortedList.count / 2]\n    }\n    return\
    \ sortedList[sortedList.count / 2 - 1] + sortedList[sortedList.count / 2]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpsnjtcybb.swift:10:26: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return sortedList[sortedList.count\
    \ / 2]\n               ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n               Double(\
    \                         )\n/tmp/tmpsnjtcybb.swift:12:49: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return sortedList[sortedList.count\
    \ / 2 - 1] + sortedList[sortedList.count / 2]\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                                                          \
    \      )\n"
  stdout: ''
  timestamp: 1659824641
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.count / 2)\n    }\n    return l[0]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp14c4t5zw.swift:13:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[0]\n           ~^~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return 0\n    }\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    var\
    \ low = l[0]\n    var high = l[0]\n    for v in l[1..] {\n        if v < low {\n\
    \            low = v\n        }\n        if v > high {\n            high = v\n\
    \        }\n    }\n    return (high + low) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpzfp0uy_u.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[n/2]\n               ~^~~~~\n\
    \               Double( )\n/tmp/tmpzfp0uy_u.swift:17:17: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n    for v in l[1..] {\n                ^~\n\
    \                ...\n/tmp/tmpzfp0uy_u.swift:25:25: error: cannot convert return\
    \ expression of type 'Int' to return type 'Double'\n    return (high + low) /\
    \ 2\n           ~~~~~~~~~~~~~^~~\n           Double(         )\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count / 2) - 1]\n    } else {\n        return\
    \ l[(l.count / 2)]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpnszair_s.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count / 2) - 1]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpnszair_s.swift:13:17:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count / 2)]\n               ~^~~~~~~~~~~~~~~\n          \
    \     Double(         )\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.last! + l.first!) / Double(l.count - 1)\n   \
    \ }\n    return l.first!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp66k2oqug.swift:13:19: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l.first!\n           ~~~~~~~^\n\
    \           Double( )\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[0]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpr7yscqb4.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpr7yscqb4.swift:13:13:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[0]\n           ~^~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp4ovsu437.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp4ovsu437.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return 0\n    }\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    var\
    \ mid = n / 2\n    var left = l[:mid]\n    var right = l[mid:]\n    var m1 = median(left)\n\
    \    var m2 = median(right)\n    if m1 < m2 {\n        return m1\n    }\n    return\
    \ m2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp87jyukig.swift:16:18: error: expected expression in list of expressions\n\
    \    var left = l[:mid]\n                 ^\n/tmp/tmp87jyukig.swift:17:23: error:\
    \ expected expression in list of expressions\n    var right = l[mid:]\n      \
    \                ^\n/tmp/tmp87jyukig.swift:13:17: error: cannot convert return\
    \ expression of type 'Int' to return type 'Double'\n        return l[n/2]\n  \
    \             ~^~~~~\n               Double( )\n/tmp/tmp87jyukig.swift:16:22:\
    \ error: missing argument for parameter #1 in call\n    var left = l[:mid]\n \
    \                    ^\n                     <#Int#>\nSwift.Array:16:23: note:\
    \ 'subscript(_:)' declared here\n    @inlinable public subscript(index: Int) ->\
    \ Element { get set }\n                      ^\n/tmp/tmp87jyukig.swift:17:23:\
    \ error: missing argument for parameter #1 in call\n    var right = l[mid:]\n\
    \                      ^\n                      <#Int#>\nSwift.Array:16:23: note:\
    \ 'subscript(_:)' declared here\n    @inlinable public subscript(index: Int) ->\
    \ Element { get set }\n                      ^\n/tmp/tmp87jyukig.swift:18:21:\
    \ error: missing argument label 'l:' in call\n    var m1 = median(left)\n    \
    \                ^\n                    l: \n/tmp/tmp87jyukig.swift:19:21: error:\
    \ missing argument label 'l:' in call\n    var m2 = median(right)\n          \
    \          ^\n                    l: \n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.count / 2)\n    }\n    return l[0]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp14c4t5zw.swift:13:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[0]\n           ~^~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var sortedList = l\n    sortedList.sort()\n\
    \    return sortedList[Int(sortedList.count / 2)]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpxdizty8y.swift:10:22: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return sortedList[Int(sortedList.count\
    \ / 2)]\n           ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n           Double(\
    \                              )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count -\
    \ 1) / 2] - l[(l.count - 2) / 2].0) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp6lw6h74z.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp6lw6h74z.swift:12:14:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \    return (l[(l.count - 1) / 2] - l[(l.count - 2) / 2].0) / 2.0\n          \
    \   ^\n            Double(             )\n/tmp/tmp6lw6h74z.swift:12:34: error:\
    \ cannot convert value of type 'Int' to expected argument type 'Double'\n    return\
    \ (l[(l.count - 1) / 2] - l[(l.count - 2) / 2].0) / 2.0\n                    \
    \             ^\n           Double(                                        )\n\
    /tmp/tmp6lw6h74z.swift:12:57: error: value of type 'Int' has no member '0'\n \
    \   return (l[(l.count - 1) / 2] - l[(l.count - 2) / 2].0) / 2.0\n           \
    \                        ~~~~~~~~~~~~~~~~~~~~ ^\n"
  stdout: ''
  timestamp: 1659978432
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count\
    \ - 1) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpzyjkjbgk.swift:10:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    let mid = n / 2\n    let left = l[..<mid]\n\
    \    let right = l[mid..<n]\n    return Double(left.reduce(0.0, +) / Double(left.count)\
    \ + right.reduce(0.0, +) / Double(right.count))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpp9yr2bnx.swift:15:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return Double(left.reduce(0.0, +) / Double(left.count)\
    \ + right.reduce(0.0, +) / Double(right.count))\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978466
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.last! + l.first!) / Double(l.count - 1)\n   \
    \ }\n    return Double(l.first!)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpcshugaag/tmpcshugaag.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10f5893c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10f558ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10f558a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10f55897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcshugaag                        0x000055c45fddf661 <unavailable> + 5729

    5    libc.so.6                          0x00002b10f5a7f460 __libc_start_main +
    245

    6    tmpcshugaag                        0x000055c45fddf2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[0]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpr7yscqb4.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpr7yscqb4.swift:13:13:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[0]\n           ~^~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n == 0 {\n    \
    \    return 0\n    }\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n/2-1] + l[n/2])/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpc87p75l3.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[n/2]\n               ~^~~~~\n\
    \               Double( )\n/tmp/tmpc87p75l3.swift:15:31: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return (l[n/2-1]\
    \ + l[n/2])/2\n           ~~~~~~~~~~~~~~~~~~~^~\n           Double(          \
    \    )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return Double(l[l.count / 2 - 1] + l[l.count / 2]) / 2.0\n \
    \   }\n    return Double(l[l.count / 2 - 1] + l[l.count / 2 - 1]) / 2.0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpd8ko3fh9/tmpd8ko3fh9.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b537f5c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b537f2bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b537f2bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b537f2bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8ko3fh9                        0x0000560aba459501 <unavailable> + 5377

    5    libc.so.6                          0x00002b537f7b1460 __libc_start_main +
    245

    6    tmpd8ko3fh9                        0x0000560aba459149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] - l[(l.count - 1) / 2 - 1] + l[(l.count - 1) / 2]) / 2.0\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpacdgh_78.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpacdgh_78.swift:13:16:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n        return\
    \ (l[(l.count - 1) / 2] - l[(l.count - 1) / 2 - 1] + l[(l.count - 1) / 2]) / 2.0\n\
    \               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978443
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.last! + l.first!) / 2.0\n    }\n    return Double(l.first!)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp09266hy3/tmp09266hy3.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1969533c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b196922ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b196922a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19692297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp09266hy3                        0x00005593865eb74d <unavailable> + 5965

    5    libc.so.6                          0x00002b196971f460 __libc_start_main +
    245

    6    tmp09266hy3                        0x00005593865eb2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] - l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpcc5hpxq3.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpcc5hpxq3.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] - l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmpwbfzxjfq/tmpwbfzxjfq.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0c42c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0c3fb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0c3fb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0c3fb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwbfzxjfq                        0x000055eade416471 <unavailable> + 5233

    5    libc.so.6                          0x00002ba0c44ad460 __libc_start_main +
    245

    6    tmpwbfzxjfq                        0x000055eade4160b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978424
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmpwbfzxjfq/tmpwbfzxjfq.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0c42c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0c3fb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0c3fb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0c3fb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwbfzxjfq                        0x000055eade416471 <unavailable> + 5233

    5    libc.so.6                          0x00002ba0c44ad460 __libc_start_main +
    245

    6    tmpwbfzxjfq                        0x000055eade4160b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.isEmpty\
    \ {\n        return Double.nan\n    }\n    let mid = sorted.count / 2\n    return\
    \ sorted[mid]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp185ljbl4.swift:13:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return sorted[mid]\n           ~~~~~~^~~~~\n\
    \           Double(    )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2\
    \ {\n        return Double(l.first!)\n    }\n    var mid = l.count / 2\n    return\
    \ Double(l[mid])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp28gf0ah4/tmp28gf0ah4.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acaf0f41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acaf0c38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acaf0c38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acaf0c377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28gf0ah4                        0x000055b07aaa668d <unavailable> + 5773

    5    libc.so.6                          0x00002acaf112d460 __libc_start_main +
    245

    6    tmp28gf0ah4                        0x000055b07aaa61e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplsfet2jk.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmplsfet2jk.swift:13:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.count / 2)\n    }\n    return Double(l.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp4c5ft6ef/tmp4c5ft6ef.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af826b28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af82681fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af82681f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af82681e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c5ft6ef                        0x000055eb2389a531 <unavailable> + 5425

    5    libc.so.6                          0x00002af826d14460 __libc_start_main +
    245

    6    tmp4c5ft6ef                        0x000055eb2389a179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let count = l.count\n    if count < 2 {\n\
    \        return Double(l.first!)\n    }\n    let mid = count / 2\n    let left\
    \ = l[..mid]\n    let right = l[mid..<count]\n    return Double(median(left) +\
    \ median(right)) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpo9ocvdrl.swift:13:18: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    let left = l[..mid]\n                 ^~\n        \
    \         ...\n/tmp/tmpo9ocvdrl.swift:15:26: error: missing argument label 'l:'\
    \ in call\n    return Double(median(left) + median(right)) / 2\n             \
    \            ^\n                         l: \n/tmp/tmpo9ocvdrl.swift:15:41: error:\
    \ missing argument label 'l:' in call\n    return Double(median(left) + median(right))\
    \ / 2\n                                        ^\n                           \
    \             l: \n/tmp/tmpo9ocvdrl.swift:15:41: error: cannot convert value of\
    \ type 'ArraySlice<Int>' to expected argument type '[Int]'\n    return Double(median(left)\
    \ + median(right)) / 2\n                                        ^\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    if n % 2 == 0 {\n        return l[n/2]\n   \
    \ }\n    var mid = n / 2\n    var left = l[mid]\n    var right = l[mid+1]\n  \
    \  if left < right {\n        return left\n    }\n    return right\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmo1dptcy.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[n/2]\n               ~^~~~~\n\
    \               Double( )\n/tmp/tmpmo1dptcy.swift:19:16: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return left\n\
    \               ^~~~\n               Double( )\n/tmp/tmpmo1dptcy.swift:21:12:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return right\n           ^~~~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    if n % 2 == 0 {\n        return l[n/2]\n   \
    \ }\n    var low = l[0]\n    var high = l[n-1]\n    for index in 1..(n-1)/2 {\n\
    \        if l[index] > high {\n            high = l[index]\n        } else if\
    \ l[index] < low {\n            low = l[index]\n        }\n    }\n    return (high\
    \ + low)/2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpewzxzm6g.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[n/2]\n               ~^~~~~\n\
    \               Double( )\n/tmp/tmpewzxzm6g.swift:17:19: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n    for index in 1..(n-1)/2 {\n        \
    \          ^~\n                  ...\n/tmp/tmpewzxzm6g.swift:24:18: error: cannot\
    \ convert value of type 'Int' to expected argument type 'Double'\n    return (high\
    \ + low)/2.0\n                 ^\n           Double(     )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    return Double(l[mid])\
    \ + Double(l[mid-1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe08_ml60.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvrjl3d55.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpvrjl3d55.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return median(l, Double(0))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp27onfjhz.swift:8:22: error: extra argument in call\n    return\
    \ median(l, Double(0))\n                 ~~~~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmpwbfzxjfq/tmpwbfzxjfq.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0c42c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0c3fb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0c3fb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0c3fb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwbfzxjfq                        0x000055eade416471 <unavailable> + 5233

    5    libc.so.6                          0x00002ba0c44ad460 __libc_start_main +
    245

    6    tmpwbfzxjfq                        0x000055eade4160b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpg8wuf8m4.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpg8wuf8m4.swift:13:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1\
    \ {\n        return l[0]\n    }\n    return Double(l[l.count / 2]) + Double(l[(l.count\
    \ - 1) / 2]) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmppvof796s.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 1 {\n        return Double(l[l.count / 2])\n    } else {\n        return\
    \ (Double(l[l.count / 2 - 1]) + Double(l[l.count / 2])) / 2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 2 {\n     \
    \   return Double(l.first!)\n    }\n    var mid = n / 2\n    var left = l[0 ..<\
    \ mid]\n    var right = l[mid..<n]\n    return median(left) + median(right) /\
    \ 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe_u7_jxc.swift:15:19: error: missing argument label 'l:' in call\n\
    \    return median(left) + median(right) / 2\n                  ^\n          \
    \        l: \n/tmp/tmpe_u7_jxc.swift:15:19: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n    return median(left)\
    \ + median(right) / 2\n                  ^\n/tmp/tmpe_u7_jxc.swift:15:34: error:\
    \ missing argument label 'l:' in call\n    return median(left) + median(right)\
    \ / 2\n                                 ^\n                                 l:\
    \ \n/tmp/tmpe_u7_jxc.swift:15:34: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    return median(left) + median(right) /\
    \ 2\n                                 ^\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n     \
    \   return 0\n    }\n    let mid = n / 2\n    let left = l[0 ..< mid]\n    let\
    \ right = l[mid..<n]\n    return median(left) + median(right) / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_3hn3fto.swift:15:19: error: missing argument label 'l:' in call\n\
    \    return median(left) + median(right) / 2\n                  ^\n          \
    \        l: \n/tmp/tmp_3hn3fto.swift:15:19: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n    return median(left)\
    \ + median(right) / 2\n                  ^\n/tmp/tmp_3hn3fto.swift:15:34: error:\
    \ missing argument label 'l:' in call\n    return median(left) + median(right)\
    \ / 2\n                                 ^\n                                 l:\
    \ \n/tmp/tmp_3hn3fto.swift:15:34: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    return median(left) + median(right) /\
    \ 2\n                                 ^\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmpwbfzxjfq/tmpwbfzxjfq.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0c42c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0c3fb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0c3fb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0c3fb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwbfzxjfq                        0x000055eade416471 <unavailable> + 5233

    5    libc.so.6                          0x00002ba0c44ad460 __libc_start_main +
    245

    6    tmpwbfzxjfq                        0x000055eade4160b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 2 {\n     \
    \   return l[0]\n    }\n    var mid = n / 2\n    var m1 = median(l[0 ..< mid])\n\
    \    var m2 = median(l[mid..<n])\n    return m1 + (m2 - m1) / (n - 1)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmnh0rg2f.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpmnh0rg2f.swift:13:21: error: missing argument\
    \ label 'l:' in call\n    var m1 = median(l[0 ..< mid])\n                    ^\n\
    \                    l: \n/tmp/tmpmnh0rg2f.swift:13:22: error: cannot convert\
    \ value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n    var m1\
    \ = median(l[0 ..< mid])\n                     ^\n/tmp/tmpmnh0rg2f.swift:14:21:\
    \ error: missing argument label 'l:' in call\n    var m2 = median(l[mid..<n])\n\
    \                    ^\n                    l: \n/tmp/tmpmnh0rg2f.swift:14:22:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    var m2 = median(l[mid..<n])\n                     ^\n/tmp/tmpmnh0rg2f.swift:15:15:\
    \ error: no '+' candidates produce the expected contextual result type 'Double'\n\
    \    return m1 + (m2 - m1) / (n - 1)\n              ^\nSwift.Duration:6:24: note:\
    \ '+' produces 'Duration', not the expected contextual result type 'Double'\n\
    \    public static func + (lhs: Duration, rhs: Duration) -> Duration\n       \
    \                ^\n_Concurrency.ContinuousClock.Instant:9:35: note: '+' produces\
    \ 'ContinuousClock.Instant', not the expected contextual result type 'Double'\n\
    \    @inlinable public static func + (lhs: ContinuousClock.Instant, rhs: Duration)\
    \ -> ContinuousClock.Instant\n                                  ^\n_Concurrency.SuspendingClock.Instant:16:24:\
    \ note: '+' produces 'SuspendingClock.Instant', not the expected contextual result\
    \ type 'Double'\n    public static func + (lhs: SuspendingClock.Instant, rhs:\
    \ Duration) -> SuspendingClock.Instant\n                       ^\nSwift.AdditiveArithmetic:3:17:\
    \ note: '+' produces 'Duration', not the expected contextual result type 'Double'\n\
    \    static func + (lhs: Self, rhs: Self) -> Self\n                ^\nSwift.Duration:6:24:\
    \ note: '+' produces 'Duration', not the expected contextual result type 'Double'\n\
    \    public static func + (lhs: Duration, rhs:"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1\
    \ {\n        return l[0]\n    }\n    return Double(l.count / 2) + l[(l.count -\
    \ 1) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpui9k2xg9.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpui9k2xg9.swift:12:35: error: cannot convert\
    \ value of type 'Int' to expected argument type 'Double'\n    return Double(l.count\
    \ / 2) + l[(l.count - 1) / 2]\n                                  ^\n         \
    \                        Double(             )\n"
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp4ovsu437.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp4ovsu437.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 2 {\n     \
    \   return Double(l.first!)\n    }\n    var mid = Double(l.first!)\n    var low\
    \ = Double(l.first!)\n    var high = Double(l.first!)\n    for x in l {\n    \
    \    if x < low {\n            low = x\n        } else if x > high {\n       \
    \     high = x\n        } else {\n            mid = (low + high) / 2\n       \
    \ }\n    }\n    return mid\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpwcsj_gpr.swift:16:14: error: binary operator '<' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        if x < low {\n           ~ ^\
    \ ~~~\n/tmp/tmpwcsj_gpr.swift:16:14: note: overloads for '<' exist with these\
    \ partially matching parameter lists: (Int, Int)\n        if x < low {\n     \
    \        ^\n/tmp/tmpwcsj_gpr.swift:17:19: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n            low = x\n                  ^\n               \
    \   Double( )\n/tmp/tmpwcsj_gpr.swift:18:21: error: binary operator '>' cannot\
    \ be applied to operands of type 'Int' and 'Double'\n        } else if x > high\
    \ {\n                  ~ ^ ~~~~\n/tmp/tmpwcsj_gpr.swift:18:21: note: overloads\
    \ for '>' exist with these partially matching parameter lists: (Int, Int)\n  \
    \      } else if x > high {\n                    ^\n/tmp/tmpwcsj_gpr.swift:19:20:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n            high\
    \ = x\n                   ^\n                   Double( )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count -\
    \ 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpo6o7z4m8.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpo6o7z4m8.swift:12:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return Double(l[l.count / 2 - 1] + l[l.count / 2]) / 2.0\n \
    \   }\n    return Double(l[l.count / 2] + l[l.count / 2 - 1]) / 2.0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp_uivorso/tmp_uivorso.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c795d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c792c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c792c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c792c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_uivorso                        0x000055fcf71e8501 <unavailable> + 5377

    5    libc.so.6                          0x00002b9c797bc460 __libc_start_main +
    245

    6    tmp_uivorso                        0x000055fcf71e8149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplsfet2jk.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmplsfet2jk.swift:13:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvrjl3d55.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpvrjl3d55.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var sortedList = l\n    sortedList.sort()\n\
    \    return sortedList[Int(ceil(Double(sortedList.count) / 2.0))]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpzfypuc8r.swift:10:27: error: cannot find 'ceil' in scope\n    return\
    \ sortedList[Int(ceil(Double(sortedList.count) / 2.0))]\n                    \
    \      ^~~~\n/tmp/tmpzfypuc8r.swift:10:22: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n    return sortedList[Int(ceil(Double(sortedList.count)\
    \ / 2.0))]\n           ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                                              )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return Double(l[l.count / 2 - 1] + l[l.count / 2]) / 2\n   \
    \ }\n    return Double(l[l.count / 2] + l[l.count / 2 - 1]) / 2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpdzgsr4be/tmpdzgsr4be.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc8b8ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc8b5e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc8b5e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc8b5e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdzgsr4be                        0x000056140339d501 <unavailable> + 5377

    5    libc.so.6                          0x00002afc8bad7460 __libc_start_main +
    245

    6    tmpdzgsr4be                        0x000056140339d149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvrjl3d55.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpvrjl3d55.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] - l[(l.count - 2) / 2].0) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplpmwj66s.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmplpmwj66s.swift:13:14:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \    return (l[(l.count - 1) / 2] - l[(l.count - 2) / 2].0) / 2.0\n          \
    \   ^\n            Double(             )\n/tmp/tmplpmwj66s.swift:13:34: error:\
    \ cannot convert value of type 'Int' to expected argument type 'Double'\n    return\
    \ (l[(l.count - 1) / 2] - l[(l.count - 2) / 2].0) / 2.0\n                    \
    \             ^\n           Double(                                        )\n\
    /tmp/tmplpmwj66s.swift:13:57: error: value of type 'Int' has no member '0'\n \
    \   return (l[(l.count - 1) / 2] - l[(l.count - 2) / 2].0) / 2.0\n           \
    \                        ~~~~~~~~~~~~~~~~~~~~ ^\n"
  stdout: ''
  timestamp: 1659978432
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 2 {\n     \
    \   return Double(l.first!)\n    }\n    let mid = n / 2\n    let leftMedian =\
    \ median(l.prefix(mid))\n    let rightMedian = median(l.suffix(mid))\n    return\
    \ Double(leftMedian) + Double(rightMedian) / 2.0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp0sxcjwv5.swift:13:29: error: missing argument label 'l:' in call\n\
    \    let leftMedian = median(l.prefix(mid))\n                            ^\n \
    \                           l: \n/tmp/tmp0sxcjwv5.swift:14:30: error: missing\
    \ argument label 'l:' in call\n    let rightMedian = median(l.suffix(mid))\n \
    \                            ^\n                             l: \n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count\
    \ - 1) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpzyjkjbgk.swift:10:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.count / 2)\n    }\n    return l[0]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp14c4t5zw.swift:13:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[0]\n           ~^~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return Double(l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_5cjuq3w.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return (l[0] + l[l.count - 1]) / 2\n    }\n    return l[0]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe1hhjy_p.swift:11:40: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return (l[0] + l[l.count - 1]) /\
    \ 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~^~~\n               Double(      \
    \              )\n/tmp/tmpe1hhjy_p.swift:13:13: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n    return l[0]\n           ~^~~\n  \
    \         Double( )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvrjl3d55.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpvrjl3d55.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l[l.count / 2])\n    }\n    return Double(l.first!)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpzc53i3os/tmpzc53i3os.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac738509c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac738200b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac738200988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7381ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzc53i3os                        0x000055c11ed2670d <unavailable> + 5901

    5    libc.so.6                          0x00002ac7386f5460 __libc_start_main +
    245

    6    tmpzc53i3os                        0x000055c11ed26269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpg8wuf8m4.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpg8wuf8m4.swift:13:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    let m = n / 2\n  \
    \  if n % 2 == 1 {\n        return l[m]\n    }\n    let low = l[m]\n    let high\
    \ = l[n - 1]\n    return (high - low) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpce84h2d5.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[m]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpce84h2d5.swift:15:18: error: cannot convert\
    \ value of type 'Int' to expected argument type 'Double'\n    return (high - low)\
    \ / 2.0\n                 ^\n           Double(     )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return Double(0)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpfys3dio1.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    if n == 1 {\n        return l[0]\n    }\n  \
    \  var mid = Double(n / 2)\n    var left = l[0 ..< mid]\n    var right = l[mid..<n]\n\
    \    return median(left) + median(right) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpafpl2lnb.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpafpl2lnb.swift:16:17: error: no exact matches\
    \ in call to subscript \n    var left = l[0 ..< mid]\n                ^\nSwift.Collection:2:23:\
    \ note: candidate requires that the types 'Array<Int>.Index' (aka 'Int') and 'Double'\
    \ be equivalent (requirement specified as 'Self.Index' == 'R.Bound')\n    @inlinable\
    \ public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression, Self.Index\
    \ == R.Bound { get }\n                      ^\nSwift.MutableCollection:2:23: note:\
    \ candidate requires that the types 'Array<Int>.Index' (aka 'Int') and 'Double'\
    \ be equivalent (requirement specified as 'Self.Index' == 'R.Bound')\n    @inlinable\
    \ public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression, Self.Index\
    \ == R.Bound { get set }\n                      ^\n/tmp/tmpafpl2lnb.swift:17:19:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \    var right = l[mid..<n]\n                  ^\n                  Int( )\n/tmp/tmpafpl2lnb.swift:18:19:\
    \ error: missing argument label 'l:' in call\n    return median(left) + median(right)\
    \ / 2.0\n                  ^\n                  l: \n/tmp/tmpafpl2lnb.swift:18:34:\
    \ error: missing argument label 'l:' in call\n    return median(left) + median(right)\
    \ / 2.0\n                                 ^\n                                \
    \ l: \n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 2 {\n     \
    \   return l[0]\n    }\n    var mid = n / 2\n    var m1 = median(l[0 ..< mid])\n\
    \    var m2 = median(l[mid..<n])\n    return m1 + (m2 - m1) * Double(mid) / Double(n)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpv9dvq0l3.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpv9dvq0l3.swift:13:21: error: missing argument\
    \ label 'l:' in call\n    var m1 = median(l[0 ..< mid])\n                    ^\n\
    \                    l: \n/tmp/tmpv9dvq0l3.swift:13:22: error: cannot convert\
    \ value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n    var m1\
    \ = median(l[0 ..< mid])\n                     ^\n/tmp/tmpv9dvq0l3.swift:14:21:\
    \ error: missing argument label 'l:' in call\n    var m2 = median(l[mid..<n])\n\
    \                    ^\n                    l: \n/tmp/tmpv9dvq0l3.swift:14:22:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    var m2 = median(l[mid..<n])\n                     ^\n/tmp/tmpv9dvq0l3.swift:15:15:\
    \ error: no '+' candidates produce the expected contextual result type 'Double'\n\
    \    return m1 + (m2 - m1) * Double(mid) / Double(n)\n              ^\nSwift.Duration:6:24:\
    \ note: '+' produces 'Duration', not the expected contextual result type 'Double'\n\
    \    public static func + (lhs: Duration, rhs: Duration) -> Duration\n       \
    \                ^\n_Concurrency.ContinuousClock.Instant:9:35: note: '+' produces\
    \ 'ContinuousClock.Instant', not the expected contextual result type 'Double'\n\
    \    @inlinable public static func + (lhs: ContinuousClock.Instant, rhs: Duration)\
    \ -> ContinuousClock.Instant\n                                  ^\n_Concurrency.SuspendingClock.Instant:16:24:\
    \ note: '+' produces 'SuspendingClock.Instant', not the expected contextual result\
    \ type 'Double'\n    public static func + (lhs: SuspendingClock.Instant, rhs:\
    \ Duration) -> SuspendingClock.Instant\n                       ^\nSwift.AdditiveArithmetic:3:17:\
    \ note: '+' produces 'Duration', not the expected contextual result type 'Double'\n\
    \    static func + (lhs: Self, rhs: Self) -> Self\n                ^\nSwift.Duration:6:24:\
    \ note: '+' produces 'Duration', not the expected contextual result type 'Double'\n\
    \    public static func + (lhs"
  stdout: ''
  timestamp: 1659978428
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return Double(0)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpfys3dio1.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 2 {\n     \
    \   return Double(l.first!)\n    }\n    let mid = n / 2\n    let left = median(l[0..<mid])\n\
    \    let right = median(l[mid..<n])\n    return left + right / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp7nx8qc3f.swift:13:23: error: missing argument label 'l:' in call\n\
    \    let left = median(l[0..<mid])\n                      ^\n                \
    \      l: \n/tmp/tmp7nx8qc3f.swift:13:24: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n    let left = median(l[0..<mid])\n\
    \                       ^\n/tmp/tmp7nx8qc3f.swift:14:24: error: missing argument\
    \ label 'l:' in call\n    let right = median(l[mid..<n])\n                   \
    \    ^\n                       l: \n/tmp/tmp7nx8qc3f.swift:14:25: error: cannot\
    \ convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \    let right = median(l[mid..<n])\n                        ^\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return Double(l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_5cjuq3w.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 1 {\n        return Double(l.last!) / 2.0\n    }\n    return Double(l.last!\
    \ + l.first!) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpo2xi63ym/tmpo2xi63ym.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad456976c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad45666db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad45666d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad45666c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo2xi63ym                        0x00005636fa6aa5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002ad456b62460 __libc_start_main +
    245

    6    tmpo2xi63ym                        0x00005636fa6aa239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return (l[0] + l[l.count - 1]) / 2\n    }\n    return l[0]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe1hhjy_p.swift:11:40: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return (l[0] + l[l.count - 1]) /\
    \ 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~^~~\n               Double(      \
    \              )\n/tmp/tmpe1hhjy_p.swift:13:13: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n    return l[0]\n           ~^~~\n  \
    \         Double( )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var sortedList = l\n    sortedList.sort()\n\
    \    return sortedList[Int(sortedList.count / 2)]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpxdizty8y.swift:10:22: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return sortedList[Int(sortedList.count\
    \ / 2)]\n           ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n           Double(\
    \                              )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let count = l.count\n    if count < 2 {\n\
    \        return Double(l.first!)\n    }\n    let mid = count / 2\n    let left\
    \ = l.prefix(mid)\n    let right = l.suffix(mid)\n    return median(left) + median(right)\
    \ / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpslqgb8u7.swift:15:19: error: missing argument label 'l:' in call\n\
    \    return median(left) + median(right) / 2.0\n                  ^\n        \
    \          l: \n/tmp/tmpslqgb8u7.swift:15:19: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n    return median(left)\
    \ + median(right) / 2.0\n                  ^\n/tmp/tmpslqgb8u7.swift:15:34: error:\
    \ missing argument label 'l:' in call\n    return median(left) + median(right)\
    \ / 2.0\n                                 ^\n                                \
    \ l: \n/tmp/tmpslqgb8u7.swift:15:34: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    return median(left) + median(right) /\
    \ 2.0\n                                 ^\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplsfet2jk.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmplsfet2jk.swift:13:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.last! + l.first!) / 2.0\n    }\n    return l.first!\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpkr1usbxi.swift:13:19: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l.first!\n           ~~~~~~~^\n\
    \           Double( )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplsfet2jk.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmplsfet2jk.swift:13:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count -\
    \ 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp5s8o17td.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp5s8o17td.swift:12:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvrjl3d55.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpvrjl3d55.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmpwbfzxjfq/tmpwbfzxjfq.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0c42c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0c3fb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0c3fb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0c3fb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwbfzxjfq                        0x000055eade416471 <unavailable> + 5233

    5    libc.so.6                          0x00002ba0c44ad460 __libc_start_main +
    245

    6    tmpwbfzxjfq                        0x000055eade4160b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count\
    \ - 1) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpzyjkjbgk.swift:10:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ < 2 {\n        return Double(sorted[0])\n    }\n    let mid = sorted.count /\
    \ 2\n    return Double(sorted[mid])\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp_aut_riw/tmp_aut_riw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b475b848c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b475b53fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b475b53f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b475b53e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_aut_riw                        0x0000558b8153d5ed <unavailable> + 5613

    5    libc.so.6                          0x00002b475ba34460 __libc_start_main +
    245

    6    tmp_aut_riw                        0x0000558b8153d149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.last! + l.first!) / Double(l.count - 1)\n   \
    \ }\n    return l.first!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp66k2oqug.swift:13:19: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l.first!\n           ~~~~~~~^\n\
    \           Double( )\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.last! + l.first!) / Double(l.count - 1)\n   \
    \ }\n    return Double(l.first!)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpcshugaag/tmpcshugaag.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10f5893c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10f558ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10f558a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10f55897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcshugaag                        0x000055c45fddf661 <unavailable> + 5729

    5    libc.so.6                          0x00002b10f5a7f460 __libc_start_main +
    245

    6    tmpcshugaag                        0x000055c45fddf2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count / 2) - 1]\n    } else {\n        return\
    \ l[(l.count / 2)]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpnszair_s.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count / 2) - 1]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpnszair_s.swift:13:17:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count / 2)]\n               ~^~~~~~~~~~~~~~~\n          \
    \     Double(         )\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpg8wuf8m4.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpg8wuf8m4.swift:13:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmpwbfzxjfq/tmpwbfzxjfq.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0c42c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0c3fb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0c3fb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0c3fb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwbfzxjfq                        0x000055eade416471 <unavailable> + 5233

    5    libc.so.6                          0x00002ba0c44ad460 __libc_start_main +
    245

    6    tmpwbfzxjfq                        0x000055eade4160b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n == 0 {\n    \
    \    return 0\n    }\n    if n == 1 {\n        return l[0]\n    }\n    if n %\
    \ 2 == 0 {\n        return median(l[1..<(n / 2)])\n    }\n    return median(l[(n\
    \ / 2)..<n])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpikn4h3v7.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpikn4h3v7.swift:16:23: error: missing argument\
    \ label 'l:' in call\n        return median(l[1..<(n / 2)])\n                \
    \      ^\n                      l: \n/tmp/tmpikn4h3v7.swift:16:24: error: cannot\
    \ convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \        return median(l[1..<(n / 2)])\n                       ^\n/tmp/tmpikn4h3v7.swift:18:19:\
    \ error: missing argument label 'l:' in call\n    return median(l[(n / 2)..<n])\n\
    \                  ^\n                  l: \n/tmp/tmpikn4h3v7.swift:18:20: error:\
    \ cannot convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \    return median(l[(n / 2)..<n])\n                   ^\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    if n == 1 {\n        return l[0]\n    }\n  \
    \  var m = Double.nan\n    for x in l {\n        if Double.isNaN(m) || x < m {\n\
    \            m = x\n        }\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpz8znz2wm.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpz8znz2wm.swift:17:12: error: instance member\
    \ 'isNaN' cannot be used on type 'Double'; did you mean to use a value of this\
    \ type instead?\n        if Double.isNaN(m) || x < m {\n           ^~~~~~\n/tmp/tmpz8znz2wm.swift:17:19:\
    \ error: cannot call value of non-function type 'Bool'\n        if Double.isNaN(m)\
    \ || x < m {\n                  ^\n/tmp/tmpz8znz2wm.swift:17:35: error: cannot\
    \ convert value of type 'Double' to expected argument type 'Int'\n        if Double.isNaN(m)\
    \ || x < m {\n                                  ^\n                          \
    \        Int( )\n/tmp/tmpz8znz2wm.swift:18:17: error: cannot assign value of type\
    \ 'Int' to type 'Double'\n            m = x\n                ^\n             \
    \   Double( )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpg8wuf8m4.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpg8wuf8m4.swift:13:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2].doubleValue)\
    \ / 2\n    }\n    return l[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp0dfbblmf.swift:11:74: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return (l[(l.count - 1) / 2] + l[(l.count\
    \ - 1) / 2].doubleValue) / 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    \               Double(                                                      )\n\
    /tmp/tmp0dfbblmf.swift:11:61: error: value of type 'Int' has no member 'doubleValue'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2].doubleValue) / 2\n\
    \                                       ~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~\n/tmp/tmp0dfbblmf.swift:13:13:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[0]\n           ~^~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659978428
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    return Double(l.sorted()[mid])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpv9o9k4dl.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.isEmpty\
    \ {\n        return Double.nan\n    }\n    let mid = sorted.count / 2\n    return\
    \ Double(sorted[mid])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpz0xres6a/tmpz0xres6a.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b818933dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8189034b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8189034988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81890337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz0xres6a                        0x0000555ce515e6dd <unavailable> + 5853

    5    libc.so.6                          0x00002b8189529460 __libc_start_main +
    245

    6    tmpz0xres6a                        0x0000555ce515e239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return (l[0] + l[l.count - 1]) / 2\n    }\n    return l[0]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe1hhjy_p.swift:11:40: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return (l[0] + l[l.count - 1]) /\
    \ 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~^~~\n               Double(      \
    \              )\n/tmp/tmpe1hhjy_p.swift:13:13: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n    return l[0]\n           ~^~~\n  \
    \         Double( )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.last! + l.first!) / Double(l.count - 1)\n   \
    \ }\n    return l.first!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp66k2oqug.swift:13:19: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l.first!\n           ~~~~~~~^\n\
    \           Double( )\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp4ovsu437.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp4ovsu437.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvrjl3d55.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpvrjl3d55.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count -\
    \ 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp5s8o17td.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp5s8o17td.swift:12:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2\
    \ {\n        return Double(l.first!)\n    }\n    var mid = l.count / 2\n    return\
    \ Double(l[mid])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp28gf0ah4/tmp28gf0ah4.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acaf0f41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acaf0c38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acaf0c38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acaf0c377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28gf0ah4                        0x000055b07aaa668d <unavailable> + 5773

    5    libc.so.6                          0x00002acaf112d460 __libc_start_main +
    245

    6    tmp28gf0ah4                        0x000055b07aaa61e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n == 0 {\n    \
    \    return 0\n    }\n    if n == 1 {\n        return l[0]\n    }\n    if n %\
    \ 2 == 0 {\n        return median(l.prefix(n / 2)) + median(l.suffix(n / 2))\n\
    \    }\n    return median(l.suffix(n / 2))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvou742hy.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpvou742hy.swift:16:23: error: missing argument\
    \ label 'l:' in call\n        return median(l.prefix(n / 2)) + median(l.suffix(n\
    \ / 2))\n                      ^\n                      l: \n/tmp/tmpvou742hy.swift:16:25:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n        return median(l.prefix(n / 2)) + median(l.suffix(n / 2))\n\
    \                        ^\n/tmp/tmpvou742hy.swift:16:49: error: missing argument\
    \ label 'l:' in call\n        return median(l.prefix(n / 2)) + median(l.suffix(n\
    \ / 2))\n                                                ^\n                 \
    \                               l: \n/tmp/tmpvou742hy.swift:18:19: error: missing\
    \ argument label 'l:' in call\n    return median(l.suffix(n / 2))\n          \
    \        ^\n                  l: \n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    if l.count % 2\
    \ == 0 {\n        return l[mid]\n    }\n    return Double(l[mid-1] + l[mid])/2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpu2bx2zf_.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpu2bx2zf_.swift:14:17: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return l[mid]\n\
    \               ~^~~~~\n               Double( )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return Double(l.first! + l.last!) / 2.0\n    }\n    return Double(l.first!\
    \ + l.last!) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpy726xfau/tmpy726xfau.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6c1209c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6c0f00b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6c0f00988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6c0eff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy726xfau                        0x0000558841ccb6dd <unavailable> + 5853

    5    libc.so.6                          0x00002ac6c13f5460 __libc_start_main +
    245

    6    tmpy726xfau                        0x0000558841ccb239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978425
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.count / 2)\n    }\n    return Double(l.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp4c5ft6ef/tmp4c5ft6ef.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af826b28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af82681fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af82681f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af82681e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c5ft6ef                        0x000055eb2389a531 <unavailable> + 5425

    5    libc.so.6                          0x00002af826d14460 __libc_start_main +
    245

    6    tmp4c5ft6ef                        0x000055eb2389a179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.sortedLastIndex()) / Double(l.count)\n    }\n\
    \    return Double(l.sortedLastIndex())\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmppmbxu6gk.swift:11:25: error: value of type '[Int]' has no member\
    \ 'sortedLastIndex'\n        return Double(l.sortedLastIndex()) / Double(l.count)\n\
    \                      ~ ^~~~~~~~~~~~~~~\n/tmp/tmppmbxu6gk.swift:13:21: error:\
    \ value of type '[Int]' has no member 'sortedLastIndex'\n    return Double(l.sortedLastIndex())\n\
    \                  ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count -\
    \ 1) / 2] - l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_js7axmb.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp_js7axmb.swift:12:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] - l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvrjl3d55.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpvrjl3d55.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 2 {\n     \
    \   return Double(l.first!)\n    }\n    let mid = n / 2\n    let left = l[..<mid]\n\
    \    let right = l[mid..<n]\n    return median(left) + median(right) / 2\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpz061ghwx.swift:15:19: error: missing argument label 'l:' in call\n\
    \    return median(left) + median(right) / 2\n                  ^\n          \
    \        l: \n/tmp/tmpz061ghwx.swift:15:19: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n    return median(left)\
    \ + median(right) / 2\n                  ^\n/tmp/tmpz061ghwx.swift:15:34: error:\
    \ missing argument label 'l:' in call\n    return median(left) + median(right)\
    \ / 2\n                                 ^\n                                 l:\
    \ \n/tmp/tmpz061ghwx.swift:15:34: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    return median(left) + median(right) /\
    \ 2\n                                 ^\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let count = l.count\n    if count < 2 {\n\
    \        return Double(l.first!)\n    }\n    let mid = count / 2\n    let left\
    \ = median(l[0..<mid])\n    let right = median(l[mid..<count])\n    return left\
    \ + right / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp6g6sv2r8.swift:13:23: error: missing argument label 'l:' in call\n\
    \    let left = median(l[0..<mid])\n                      ^\n                \
    \      l: \n/tmp/tmp6g6sv2r8.swift:13:24: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n    let left = median(l[0..<mid])\n\
    \                       ^\n/tmp/tmp6g6sv2r8.swift:14:24: error: missing argument\
    \ label 'l:' in call\n    let right = median(l[mid..<count])\n               \
    \        ^\n                       l: \n/tmp/tmp6g6sv2r8.swift:14:25: error: cannot\
    \ convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \    let right = median(l[mid..<count])\n                        ^\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.last! + l.first!) / Double(l.count - 1)\n   \
    \ }\n    return l.first!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp66k2oqug.swift:13:19: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l.first!\n           ~~~~~~~^\n\
    \           Double( )\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 2 {\n     \
    \   return l[0]\n    }\n    var mid = n / 2\n    var low = l[mid]\n    var high\
    \ = l[n - 1]\n    if low == high {\n        return low\n    }\n    if low > high\
    \ {\n        return median(l.subarray(0, mid))\n    }\n    return median(l.subarray(mid\
    \ + 1, n - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe8r2mlc9.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpe8r2mlc9.swift:16:16: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return low\n\
    \               ^~~\n               Double( )\n/tmp/tmpe8r2mlc9.swift:19:25: error:\
    \ value of type '[Int]' has no member 'subarray'\n        return median(l.subarray(0,\
    \ mid))\n                      ~ ^~~~~~~~\n/tmp/tmpe8r2mlc9.swift:19:23: error:\
    \ missing argument label 'l:' in call\n        return median(l.subarray(0, mid))\n\
    \                      ^\n                      l: \n/tmp/tmpe8r2mlc9.swift:21:19:\
    \ error: missing argument label 'l:' in call\n    return median(l.subarray(mid\
    \ + 1, n - 1))\n                  ^\n                  l: \n/tmp/tmpe8r2mlc9.swift:21:21:\
    \ error: value of type '[Int]' has no member 'subarray'\n    return median(l.subarray(mid\
    \ + 1, n - 1))\n                  ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpg8wuf8m4.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpg8wuf8m4.swift:13:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 2 {\n     \
    \   return Double(l.first!)\n    }\n    let mid = n / 2\n    let left = median(l[0..<mid])\n\
    \    let right = median(l[mid..<n])\n    return left + right / 2.0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpu9m98qyt.swift:13:23: error: missing argument label 'l:' in call\n\
    \    let left = median(l[0..<mid])\n                      ^\n                \
    \      l: \n/tmp/tmpu9m98qyt.swift:13:24: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n    let left = median(l[0..<mid])\n\
    \                       ^\n/tmp/tmpu9m98qyt.swift:14:24: error: missing argument\
    \ label 'l:' in call\n    let right = median(l[mid..<n])\n                   \
    \    ^\n                       l: \n/tmp/tmpu9m98qyt.swift:14:25: error: cannot\
    \ convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \    let right = median(l[mid..<n])\n                        ^\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count\
    \ - 1) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpzyjkjbgk.swift:10:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[(sorted.count - 1) / 2] + sorted[sorted.count\
    \ / 2 - 1]) / 2\n    }\n    return sorted[sorted.count / 2]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpo7q_ox7l.swift:12:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return sorted[sorted.count / 2]\n  \
    \         ~~~~~~^~~~~~~~~~~~~~~~~~\n           Double(                 )\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp4ovsu437.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp4ovsu437.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.last! + l.first!) / Double(l.count - 1)\n   \
    \ }\n    return l.first!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp66k2oqug.swift:13:19: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l.first!\n           ~~~~~~~^\n\
    \           Double( )\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count\
    \ - 1) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpzyjkjbgk.swift:10:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return 0\n    }\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ Double(l[n/2] + l[n/2-1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpwol7f0ur.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[n/2]\n               ~^~~~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvrjl3d55.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpvrjl3d55.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.last! + l.first!) / Double(l.count - 1)\n   \
    \ }\n    return l.first!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp66k2oqug.swift:13:19: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l.first!\n           ~~~~~~~^\n\
    \           Double( )\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    if l.count % 2\
    \ == 0 {\n        return l[mid]\n    }\n    return Double(l[mid-1] + l[mid])/2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmprs50o9_8.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmprs50o9_8.swift:14:17: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return l[mid]\n\
    \               ~^~~~~\n               Double( )\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 2 {\n     \
    \   return Double(l.first!)\n    }\n    var m = Double(l.first!)\n    for x in\
    \ l.dropFirst() {\n        if x < m {\n            m = x\n        }\n    }\n \
    \   return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpu4dipqw8.swift:14:14: error: binary operator '<' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        if x < m {\n           ~ ^ ~\n\
    /tmp/tmpu4dipqw8.swift:14:14: note: overloads for '<' exist with these partially\
    \ matching parameter lists: (Int, Int)\n        if x < m {\n             ^\n/tmp/tmpu4dipqw8.swift:15:17:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n            m = x\n\
    \                ^\n                Double( )\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvrjl3d55.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpvrjl3d55.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return 0\n    }\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ l[n/2-1] + l[n/2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphh3fj5ke.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[n/2]\n               ~^~~~~\n\
    \               Double( )\n/tmp/tmphh3fj5ke.swift:15:21: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return l[n/2-1]\
    \ + l[n/2]\n           ~~~~~~~~~^~~~~~~~\n           Double(          )\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpg8wuf8m4.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpg8wuf8m4.swift:13:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let count = l.count\n    if count < 2 {\n\
    \        return Double(l.first!)\n    }\n    let mid = count / 2\n    let leftMedian\
    \ = median(l.prefix(mid))\n    let rightMedian = median(l.suffix(mid))\n    return\
    \ Double(leftMedian) + Double(rightMedian) / 2.0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpl7oim_he.swift:13:29: error: missing argument label 'l:' in call\n\
    \    let leftMedian = median(l.prefix(mid))\n                            ^\n \
    \                           l: \n/tmp/tmpl7oim_he.swift:14:30: error: missing\
    \ argument label 'l:' in call\n    let rightMedian = median(l.suffix(mid))\n \
    \                            ^\n                             l: \n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n     \
    \   return 0\n    }\n    let mid = n / 2\n    let leftMedian = median(l[0..<mid])\n\
    \    let rightMedian = median(l[mid..<n])\n    return Double(leftMedian) + Double(rightMedian)\
    \ / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpopo9nxj6.swift:13:29: error: missing argument label 'l:' in call\n\
    \    let leftMedian = median(l[0..<mid])\n                            ^\n    \
    \                        l: \n/tmp/tmpopo9nxj6.swift:13:30: error: cannot convert\
    \ value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n    let leftMedian\
    \ = median(l[0..<mid])\n                             ^\n/tmp/tmpopo9nxj6.swift:14:30:\
    \ error: missing argument label 'l:' in call\n    let rightMedian = median(l[mid..<n])\n\
    \                             ^\n                             l: \n/tmp/tmpopo9nxj6.swift:14:31:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    let rightMedian = median(l[mid..<n])\n                        \
    \      ^\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    let mid = n / 2\n    let left = l[..<mid]\n\
    \    let right = l[mid..<n]\n    return Double(left.reduce(0.0, +) / Double(left.count)\
    \ + right.reduce(0.0, +) / Double(right.count))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpp9yr2bnx.swift:15:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return Double(left.reduce(0.0, +) / Double(left.count)\
    \ + right.reduce(0.0, +) / Double(right.count))\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978466
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpg8wuf8m4.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpg8wuf8m4.swift:13:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return (l[0] + l[l.count - 1]) / 2\n    }\n    return l[0]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe1hhjy_p.swift:11:40: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return (l[0] + l[l.count - 1]) /\
    \ 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~^~~\n               Double(      \
    \              )\n/tmp/tmpe1hhjy_p.swift:13:13: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n    return l[0]\n           ~^~~\n  \
    \         Double( )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ < 2 {\n        return Double(sorted[0])\n    }\n    let middle = sorted.count\
    \ / 2\n    return Double(sorted[middle])\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpylsimy45/tmpylsimy45.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4416ae1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44167d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44167d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44167d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpylsimy45                        0x00005564ac7205ed <unavailable> + 5613

    5    libc.so.6                          0x00002b4416ccd460 __libc_start_main +
    245

    6    tmpylsimy45                        0x00005564ac720149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    if n % 2 == 0 {\n        return l.sorted()[n\
    \ / 2]\n    }\n    return l.sorted()[(n - 1) / 2]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpw581w3vw.swift:13:26: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l.sorted()[n / 2]\n     \
    \          ~~~~~~~~~~^~~~~~~\n               Double(          )\n/tmp/tmpw581w3vw.swift:15:22:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l.sorted()[(n - 1) / 2]\n           ~~~~~~~~~~^~~~~~~~~~~~~\n    \
    \       Double(                )\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmpwbfzxjfq/tmpwbfzxjfq.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0c42c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0c3fb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0c3fb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0c3fb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwbfzxjfq                        0x000055eade416471 <unavailable> + 5233

    5    libc.so.6                          0x00002ba0c44ad460 __libc_start_main +
    245

    6    tmpwbfzxjfq                        0x000055eade4160b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count\
    \ - 1) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpzyjkjbgk.swift:10:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[(l.count -\
    \ 1) / 2] + l[l.count / 2 - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp5s1cp5v3.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp5s1cp5v3.swift:12:33:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[(l.count - 1) / 2] + l[l.count / 2 - 1]\n           ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                                  )\n"
  stdout: ''
  timestamp: 1659978426
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 2 {\n     \
    \   return Double(l.first!)\n    }\n    var mid = n / 2\n    var left = l.subarray(0,\
    \ mid)\n    var right = l.subarray(mid)\n    return median(left) + median(right)\
    \ / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp9b_fx89v.swift:13:18: error: value of type '[Int]' has no member\
    \ 'subarray'\n    var left = l.subarray(0, mid)\n               ~ ^~~~~~~~\n/tmp/tmp9b_fx89v.swift:14:19:\
    \ error: value of type '[Int]' has no member 'subarray'\n    var right = l.subarray(mid)\n\
    \                ~ ^~~~~~~~\n/tmp/tmp9b_fx89v.swift:15:19: error: missing argument\
    \ label 'l:' in call\n    return median(left) + median(right) / 2.0\n        \
    \          ^\n                  l: \n/tmp/tmp9b_fx89v.swift:15:34: error: missing\
    \ argument label 'l:' in call\n    return median(left) + median(right) / 2.0\n\
    \                                 ^\n                                 l: \n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplsfet2jk.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmplsfet2jk.swift:13:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplsfet2jk.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmplsfet2jk.swift:13:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let count = l.count\n    if count < 2 {\n\
    \        return Double(l.first!)\n    }\n    let middle = count / 2\n    let left\
    \ = l[0 ..< middle]\n    let right = l[middle ..< count]\n    let median = median(left)\n\
    \    if median.isNaN {\n        return median\n    }\n    return median.max(median(right))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpyp_get2n.swift:15:25: error: missing argument label 'l:' in call\n\
    \    let median = median(left)\n                        ^\n                  \
    \      l: \n/tmp/tmpyp_get2n.swift:15:25: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n    let median = median(left)\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.last! + l.first!) / 2.0\n    }\n    return l.first!\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpkr1usbxi.swift:13:19: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l.first!\n           ~~~~~~~^\n\
    \           Double( )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 2 {\n     \
    \   return Double(l.first!)\n    }\n    let mid = n / 2\n    let left = l.prefix(mid)\n\
    \    let right = l.suffix(mid)\n    return median(left) + median(right) / 2.0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp6ht301hh.swift:15:19: error: missing argument label 'l:' in call\n\
    \    return median(left) + median(right) / 2.0\n                  ^\n        \
    \          l: \n/tmp/tmp6ht301hh.swift:15:19: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n    return median(left)\
    \ + median(right) / 2.0\n                  ^\n/tmp/tmp6ht301hh.swift:15:34: error:\
    \ missing argument label 'l:' in call\n    return median(left) + median(right)\
    \ / 2.0\n                                 ^\n                                \
    \ l: \n/tmp/tmp6ht301hh.swift:15:34: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    return median(left) + median(right) /\
    \ 2.0\n                                 ^\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvrjl3d55.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpvrjl3d55.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count\
    \ - 1) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpzyjkjbgk.swift:10:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplsfet2jk.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmplsfet2jk.swift:13:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return Double(l.last! + l.first!) / 2.0\n    }\n    return\
    \ Double(l.last! + l.first!)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmppmeu2xyi/tmppmeu2xyi.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e93496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9318db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9318d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9318c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppmeu2xyi                        0x000055efff57a661 <unavailable> + 5729

    5    libc.so.6                          0x00002b5e93682460 __libc_start_main +
    245

    6    tmppmeu2xyi                        0x000055efff57a2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 2 {\n     \
    \   return l[0]\n    }\n    var mid = n / 2\n    var m1 = median(l[0...mid])\n\
    \    var m2 = median(l[mid...n])\n    return (m1 + m2) / 2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpi5r66pfy.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpi5r66pfy.swift:13:21: error: missing argument\
    \ label 'l:' in call\n    var m1 = median(l[0...mid])\n                    ^\n\
    \                    l: \n/tmp/tmpi5r66pfy.swift:13:22: error: cannot convert\
    \ value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n    var m1\
    \ = median(l[0...mid])\n                     ^\n/tmp/tmpi5r66pfy.swift:14:21:\
    \ error: missing argument label 'l:' in call\n    var m2 = median(l[mid...n])\n\
    \                    ^\n                    l: \n/tmp/tmpi5r66pfy.swift:14:22:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    var m2 = median(l[mid...n])\n                     ^\n/tmp/tmpi5r66pfy.swift:15:16:\
    \ error: cannot convert value of type 'String' to expected argument type 'Double'\n\
    \    return (m1 + m2) / 2\n               ^\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmpwbfzxjfq/tmpwbfzxjfq.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0c42c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0c3fb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0c3fb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0c3fb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwbfzxjfq                        0x000055eade416471 <unavailable> + 5233

    5    libc.so.6                          0x00002ba0c44ad460 __libc_start_main +
    245

    6    tmpwbfzxjfq                        0x000055eade4160b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978424
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 0 {\n        return Double(l.last!) / Double(l.count)\n    }\n    return Double(0)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpa9lg_57m/tmpa9lg_57m.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10a0114c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b109fe0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b109fe0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b109fe0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa9lg_57m                        0x00005597fa5445d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b10a0300460 __libc_start_main +
    245

    6    tmpa9lg_57m                        0x00005597fa544219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n == 0 {\n    \
    \    return 0\n    }\n    if n == 1 {\n        return l[0]\n    }\n    if n %\
    \ 2 == 0 {\n        return median(l[1..<(n - 1)])\n    }\n    return median(l[(n\
    \ - 1) / 2..<n])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpveiui347.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpveiui347.swift:16:23: error: missing argument\
    \ label 'l:' in call\n        return median(l[1..<(n - 1)])\n                \
    \      ^\n                      l: \n/tmp/tmpveiui347.swift:16:24: error: cannot\
    \ convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \        return median(l[1..<(n - 1)])\n                       ^\n/tmp/tmpveiui347.swift:18:19:\
    \ error: missing argument label 'l:' in call\n    return median(l[(n - 1) / 2..<n])\n\
    \                  ^\n                  l: \n/tmp/tmpveiui347.swift:18:20: error:\
    \ cannot convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \    return median(l[(n - 1) / 2..<n])\n                   ^\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return 0\n    }\n    var m = Double(l.count)\n    var sum = 0\n    for x in\
    \ l {\n        sum += x\n    }\n    var x = sum / Double(n)\n    var y = Double(l.count)\n\
    \    for x in l {\n        y -= x\n    }\n    return x / y\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpp12yq230.swift:17:17: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    var x = sum / Double(n)\n      \
    \      ~~~ ^ ~~~~~~~~~\n/tmp/tmpp12yq230.swift:17:17: note: overloads for '/'\
    \ exist with these partially matching parameter lists: (Double, Double), (Duration,\
    \ Double), (Int, Int)\n    var x = sum / Double(n)\n                ^\n/tmp/tmpp12yq230.swift:20:14:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \        y -= x\n             ^\n             Double( )\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmpwbfzxjfq/tmpwbfzxjfq.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0c42c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0c3fb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0c3fb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0c3fb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwbfzxjfq                        0x000055eade416471 <unavailable> + 5233

    5    libc.so.6                          0x00002ba0c44ad460 __libc_start_main +
    245

    6    tmpwbfzxjfq                        0x000055eade4160b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n == 0 {\n    \
    \    return 0\n    }\n    if n == 1 {\n        return l[0]\n    }\n    var m =\
    \ Double(0)\n    var m1 = Double(0)\n    var m2 = Double(0)\n    for x in l {\n\
    \        m = (m + x) / 2\n        m1 = (m1 + m) / 2\n        m2 = (m2 + m) / 2\n\
    \    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpke7x68pd.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpke7x68pd.swift:19:18: error: cannot convert\
    \ value of type 'Int' to expected argument type 'Double'\n        m = (m + x)\
    \ / 2\n                 ^\n                 Double( )\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 2 {\n     \
    \   return Double(l.first!)\n    }\n    var mid = n / 2\n    var low = Double(l.first!)\n\
    \    var high = Double(l.last!)\n    if low == high {\n        return low\n  \
    \  }\n    if low > high {\n        high = low\n        mid = mid - 1\n    }\n\
    \    if mid % 2 == 0 {\n        return median(l[mid..<(n - 1)])\n    }\n    return\
    \ median(l[mid..<(n - 1)])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmptuezgy23.swift:23:23: error: missing argument label 'l:' in call\n\
    \        return median(l[mid..<(n - 1)])\n                      ^\n          \
    \            l: \n/tmp/tmptuezgy23.swift:23:24: error: cannot convert value of\
    \ type 'ArraySlice<Int>' to expected argument type '[Int]'\n        return median(l[mid..<(n\
    \ - 1)])\n                       ^\n/tmp/tmptuezgy23.swift:25:19: error: missing\
    \ argument label 'l:' in call\n    return median(l[mid..<(n - 1)])\n         \
    \         ^\n                  l: \n/tmp/tmptuezgy23.swift:25:20: error: cannot\
    \ convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \    return median(l[mid..<(n - 1)])\n                   ^\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[0]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpr7yscqb4.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpr7yscqb4.swift:13:13:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[0]\n           ~^~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n == 0 {\n    \
    \    return 0\n    }\n    if n == 1 {\n        return l[0]\n    }\n    if n %\
    \ 2 == 0 {\n        return median(l[1..<(n - 1)])\n    }\n    return median(l[1..<(n\
    \ - 1)], l[(n - 1)..<n])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpanftlrvv.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpanftlrvv.swift:16:23: error: missing argument\
    \ label 'l:' in call\n        return median(l[1..<(n - 1)])\n                \
    \      ^\n                      l: \n/tmp/tmpanftlrvv.swift:16:24: error: cannot\
    \ convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \        return median(l[1..<(n - 1)])\n                       ^\n/tmp/tmpanftlrvv.swift:18:36:\
    \ error: extra argument in call\n    return median(l[1..<(n - 1)], l[(n - 1)..<n])\n\
    \                 ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~\n/tmp/tmpanftlrvv.swift:18:20:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    return median(l[1..<(n - 1)], l[(n - 1)..<n])\n               \
    \    ^\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.count / 2)\n    }\n    return Double(l.first!)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpcvzdsxqw/tmpcvzdsxqw.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7c3cbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7c39b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7c39b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7c39b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcvzdsxqw                        0x00005575668125d1 <unavailable> + 5585

    5    libc.so.6                          0x00002af7c3ea8460 __libc_start_main +
    245

    6    tmpcvzdsxqw                        0x0000557566812219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978425
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l[l.count / 2])\n    }\n    return Double(l.first!)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpzc53i3os/tmpzc53i3os.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac738509c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac738200b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac738200988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7381ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzc53i3os                        0x000055c11ed2670d <unavailable> + 5901

    5    libc.so.6                          0x00002ac7386f5460 __libc_start_main +
    245

    6    tmpzc53i3os                        0x000055c11ed26269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.last! + l.first!) / 2.0\n    }\n    return l.first!\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpkr1usbxi.swift:13:19: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l.first!\n           ~~~~~~~^\n\
    \           Double( )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count\
    \ - 1) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpzyjkjbgk.swift:10:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count -\
    \ 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpo6o7z4m8.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpo6o7z4m8.swift:12:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return 0\n    }\n    var m = Double(l.count)\n    var sum = 0\n    for x in\
    \ l {\n        sum += x\n    }\n    for x in l {\n        m = (sum - x) / Double(n)\n\
    \    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpax1fox8w.swift:18:18: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n        m = (sum - x) / Double(n)\n    \
    \             ^\n            Double(  )\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count\
    \ - 1) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpzyjkjbgk.swift:10:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    return l[mid]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpyplfrx6w.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpyplfrx6w.swift:13:13: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return l[mid]\n\
    \           ~^~~~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return Double(l[l.count / 2 - 1] + l[l.count / 2]) / 2\n   \
    \ }\n    return Double(l[l.count / 2 - 1] + l[l.count / 2 - 1]) / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp7x3y4xg0/tmp7x3y4xg0.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b476dc05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b476d8fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b476d8fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b476d8fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7x3y4xg0                        0x0000562260a77501 <unavailable> + 5377

    5    libc.so.6                          0x00002b476ddf1460 __libc_start_main +
    245

    6    tmp7x3y4xg0                        0x0000562260a77149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 2 {\n     \
    \   return Double(l.first!)\n    }\n    var m = Double(l.first!)\n    for x in\
    \ l.dropFirst() {\n        if x < m {\n            m = x\n        }\n    }\n \
    \   return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpu4dipqw8.swift:14:14: error: binary operator '<' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        if x < m {\n           ~ ^ ~\n\
    /tmp/tmpu4dipqw8.swift:14:14: note: overloads for '<' exist with these partially\
    \ matching parameter lists: (Int, Int)\n        if x < m {\n             ^\n/tmp/tmpu4dipqw8.swift:15:17:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n            m = x\n\
    \                ^\n                Double( )\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 2 {\n     \
    \   return Double(l.first!)\n    }\n    if n % 2 == 0 {\n        return median(l:\
    \ l.prefix(l.count / 2))\n    }\n    return median(l: l.suffix(l.count / 2))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpxywi_yu4.swift:13:28: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n        return median(l: l.prefix(l.count\
    \ / 2))\n                           ^\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvrjl3d55.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpvrjl3d55.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvrjl3d55.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpvrjl3d55.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2\
    \ {\n        return l[0]\n    }\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    }\n    return (l[(l.count - 1) / 2] + l[l.count / 2 - 1]) / 2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpwqp34ryn.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpwqp34ryn.swift:13:17: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return l[(l.count\
    \ - 1) / 2]\n               ~^~~~~~~~~~~~~~~~~~~\n               Double(     \
    \        )\n/tmp/tmpwqp34ryn.swift:15:56: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n    return (l[(l.count - 1) / 2] + l[l.count\
    \ / 2 - 1]) / 2\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    \           Double(                                        )\n"
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 0 {\n        return Double(l[l.count / 2])\n    }\n    return 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpmhh88ezs/tmpmhh88ezs.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6de2137c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6de1e2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6de1e2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6de1e2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmhh88ezs                        0x000055eb90f4867d <unavailable> + 5757

    5    libc.so.6                          0x00002b6de2323460 __libc_start_main +
    245

    6    tmpmhh88ezs                        0x000055eb90f481d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659978425
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.last! + l.first!) / Double(l.count - 1)\n   \
    \ }\n    return Double(l.first!)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpcshugaag/tmpcshugaag.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10f5893c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10f558ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10f558a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10f55897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcshugaag                        0x000055c45fddf661 <unavailable> + 5729

    5    libc.so.6                          0x00002b10f5a7f460 __libc_start_main +
    245

    6    tmpcshugaag                        0x000055c45fddf2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var sortedList = l.sorted()\n    if sortedList.count\
    \ % 2 == 0 {\n        return sortedList[(sortedList.count / 2) - 1]\n    } else\
    \ {\n        return sortedList[(sortedList.count / 2)]\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpzuxnr0lz.swift:10:26: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return sortedList[(sortedList.count\
    \ / 2) - 1]\n               ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n         \
    \      Double(                               )\n/tmp/tmpzuxnr0lz.swift:12:26:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return sortedList[(sortedList.count / 2)]\n               ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n\
    \               Double(                           )\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.count / 2)\n    }\n    return Double(l.first!)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpcvzdsxqw/tmpcvzdsxqw.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7c3cbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7c39b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7c39b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7c39b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcvzdsxqw                        0x00005575668125d1 <unavailable> + 5585

    5    libc.so.6                          0x00002af7c3ea8460 __libc_start_main +
    245

    6    tmpcvzdsxqw                        0x0000557566812219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpg8wuf8m4.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpg8wuf8m4.swift:13:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    if n % 2 == 0 {\n        let mid = n / 2\n \
    \       return Double(l.sorted(by: <).first!) + Double(l.sorted(by: >).first!)\
    \ / Double(mid)\n    }\n    let mid = n / 2\n    return Double(l.sorted(by: <).last!)\
    \ + Double(l.sorted(by: >).last!) / Double(mid)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpny8isbvc/tmpny8isbvc.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9533da7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9533a9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9533a9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9533a9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpny8isbvc                        0x000055bc9dbda611 <unavailable> + 5649

    5    libc.so.6                          0x00002b9533f93460 __libc_start_main +
    245

    6    tmpny8isbvc                        0x000055bc9dbda259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978426
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 2 {\n     \
    \   return Double(l.first!)\n    }\n    var mid = n / 2\n    var low = l[mid]\n\
    \    var high = l[n - 1]\n    if low < high {\n        return low\n    }\n   \
    \ return high\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvpe1afxg.swift:16:16: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return low\n               ^~~\n\
    \               Double( )\n/tmp/tmpvpe1afxg.swift:18:12: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return high\n \
    \          ^~~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvrjl3d55.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpvrjl3d55.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 2 {\n     \
    \   return Double(l.first!)\n    }\n    var mid = n / 2\n    var left = l[mid..<n]\n\
    \    var right = l[..<mid]\n    return median(left) + median(right) / 2.0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpfeqx5w6i.swift:15:19: error: missing argument label 'l:' in call\n\
    \    return median(left) + median(right) / 2.0\n                  ^\n        \
    \          l: \n/tmp/tmpfeqx5w6i.swift:15:19: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n    return median(left)\
    \ + median(right) / 2.0\n                  ^\n/tmp/tmpfeqx5w6i.swift:15:34: error:\
    \ missing argument label 'l:' in call\n    return median(left) + median(right)\
    \ / 2.0\n                                 ^\n                                \
    \ l: \n/tmp/tmpfeqx5w6i.swift:15:34: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    return median(left) + median(right) /\
    \ 2.0\n                                 ^\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count -\
    \ 1) / 2] - l[(l.count - 1) / 2 - 1] + l[(l.count - 1) / 2 + 1]) / 2.0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpciit7iyj.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpciit7iyj.swift:12:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    return (l[(l.count\
    \ - 1) / 2] - l[(l.count - 1) / 2 - 1] + l[(l.count - 1) / 2 + 1]) / 2.0\n   \
    \        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978445
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpg8wuf8m4.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpg8wuf8m4.swift:13:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n == 0 {\n    \
    \    return 0\n    }\n    if n == 1 {\n        return l[0]\n    }\n    if n %\
    \ 2 == 0 {\n        return median(l[1..<(n - 1)])\n    }\n    let mid = n / 2\n\
    \    return median(l[mid..<(n - mid)])\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmptkqaeb7b.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmptkqaeb7b.swift:16:23: error: missing argument\
    \ label 'l:' in call\n        return median(l[1..<(n - 1)])\n                \
    \      ^\n                      l: \n/tmp/tmptkqaeb7b.swift:16:24: error: cannot\
    \ convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \        return median(l[1..<(n - 1)])\n                       ^\n/tmp/tmptkqaeb7b.swift:19:19:\
    \ error: missing argument label 'l:' in call\n    return median(l[mid..<(n - mid)])\n\
    \                  ^\n                  l: \n/tmp/tmptkqaeb7b.swift:19:20: error:\
    \ cannot convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \    return median(l[mid..<(n - mid)])\n                   ^\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[0]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpr7yscqb4.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpr7yscqb4.swift:13:13:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[0]\n           ~^~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return 0\n    }\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    var\
    \ low = l[0]\n    var high = l[0]\n    for i in 1..n {\n        if l[i] < low\
    \ {\n            low = l[i]\n        }\n        if l[i] > high {\n           \
    \ high = l[i]\n        }\n    }\n    return ((high - low) / Double(n)).rounded(.toNearestOrAwayFromZero)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpodkhn1uf.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[n/2]\n               ~^~~~~\n\
    \               Double( )\n/tmp/tmpodkhn1uf.swift:17:15: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n    for i in 1..n {\n              ^~\n\
    \              ...\n/tmp/tmpodkhn1uf.swift:25:19: error: cannot convert value\
    \ of type 'Int' to expected argument type 'Double'\n    return ((high - low) /\
    \ Double(n)).rounded(.toNearestOrAwayFromZero)\n                  ^\n        \
    \    Double(     )\n"
  stdout: ''
  timestamp: 1659978426
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] - l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpcc5hpxq3.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpcc5hpxq3.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] - l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return Double(l[(l.count\
    \ - 1) / 2] + l[l.count / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_0_cx219.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978426
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.count / 2)\n    }\n    return Double(l.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp4c5ft6ef/tmp4c5ft6ef.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af826b28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af82681fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af82681f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af82681e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c5ft6ef                        0x000055eb2389a531 <unavailable> + 5425

    5    libc.so.6                          0x00002af826d14460 __libc_start_main +
    245

    6    tmp4c5ft6ef                        0x000055eb2389a179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659978424
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.count / 2)\n    }\n    return Double(l.first!)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpcvzdsxqw/tmpcvzdsxqw.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7c3cbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7c39b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7c39b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7c39b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcvzdsxqw                        0x00005575668125d1 <unavailable> + 5585

    5    libc.so.6                          0x00002af7c3ea8460 __libc_start_main +
    245

    6    tmpcvzdsxqw                        0x0000557566812219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvrjl3d55.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpvrjl3d55.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmpwbfzxjfq/tmpwbfzxjfq.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0c42c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0c3fb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0c3fb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0c3fb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwbfzxjfq                        0x000055eade416471 <unavailable> + 5233

    5    libc.so.6                          0x00002ba0c44ad460 __libc_start_main +
    245

    6    tmpwbfzxjfq                        0x000055eade4160b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvrjl3d55.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpvrjl3d55.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[0]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpr7yscqb4.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpr7yscqb4.swift:13:13:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[0]\n           ~^~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        return sorted[(sorted.count - 1) / 2]\n    } else {\n  \
    \      return sorted[(sorted.count - 1) / 2] + sorted[(sorted.count - 1) / 2 -\
    \ 1]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpox0ci7ec.swift:10:22: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return sorted[(sorted.count - 1)\
    \ / 2]\n               ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n               Double(\
    \                       )\n/tmp/tmpox0ci7ec.swift:12:47: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return sorted[(sorted.count\
    \ - 1) / 2] + sorted[(sorted.count - 1) / 2 - 1]\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \               Double(                                                      \
    \      )\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp4ovsu437.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp4ovsu437.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824645
