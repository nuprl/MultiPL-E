language: swift
name: HumanEval_47_median
results:
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2\
    \ {\n        return Double(l.first!)\n    }\n    var mid = l.count / 2\n    return\
    \ Double(l[mid])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp28gf0ah4/tmp28gf0ah4.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acaf0f41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acaf0c38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acaf0c38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acaf0c377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28gf0ah4                        0x000055b07aaa668d <unavailable> + 5773

    5    libc.so.6                          0x00002acaf112d460 __libc_start_main +
    245

    6    tmp28gf0ah4                        0x000055b07aaa61e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 2 {\n     \
    \   return Double(l.first!)\n    }\n    var m = Double(l.first!)\n    for x in\
    \ l.dropFirst() {\n        if x < m {\n            m = x\n        }\n    }\n \
    \   return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpu4dipqw8.swift:14:14: error: binary operator '<' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        if x < m {\n           ~ ^ ~\n\
    /tmp/tmpu4dipqw8.swift:14:14: note: overloads for '<' exist with these partially\
    \ matching parameter lists: (Int, Int)\n        if x < m {\n             ^\n/tmp/tmpu4dipqw8.swift:15:17:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n            m = x\n\
    \                ^\n                Double( )\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.last! + l.first!) / Double(l.count - 1)\n   \
    \ } else {\n        return Double(l.first!)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpzwassk3d/tmpzwassk3d.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a2530cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a25003b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a25003988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a250027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzwassk3d                        0x00005646e34c9661 <unavailable> + 5729

    5    libc.so.6                          0x00002b9a254f8460 __libc_start_main +
    245

    6    tmpzwassk3d                        0x00005646e34c92a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 1 {\n        return sorted[(sorted.count - 1) / 2]\n    }\n    return\
    \ (sorted[(sorted.count - 1) / 2] + sorted[(sorted.count - 1) / 2 - 1]) / 2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpk4r8t5a4.swift:10:22: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return sorted[(sorted.count - 1)\
    \ / 2]\n               ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n               Double(\
    \                       )\n/tmp/tmpk4r8t5a4.swift:12:82: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return (sorted[(sorted.count\
    \ - 1) / 2] + sorted[(sorted.count - 1) / 2 - 1]) / 2\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    \           Double(                                                          \
    \        )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 0 {\n        return Double(l.count / 2)\n    }\n    return Double(0)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpthc1w5dz/tmpthc1w5dz.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cb9884c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cb957bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cb957b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cb957a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpthc1w5dz                        0x000055d2b473b531 <unavailable> + 5425

    5    libc.so.6                          0x00002b2cb9a70460 __libc_start_main +
    245

    6    tmpthc1w5dz                        0x000055d2b473b179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659824640
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return Double(l[l.count / 2 - 1] + l[l.count / 2]) / 2.0\n \
    \   }\n    return Double(l[l.count / 2] + l[l.count / 2 - 1]) / 2.0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp_uivorso/tmp_uivorso.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c795d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c792c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c792c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c792c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_uivorso                        0x000055fcf71e8501 <unavailable> + 5377

    5    libc.so.6                          0x00002b9c797bc460 __libc_start_main +
    245

    6    tmp_uivorso                        0x000055fcf71e8149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824640
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[(sorted.count - 1) / 2] + sorted[sorted.count\
    \ / 2])\n    } else {\n        return Double(sorted[(sorted.count - 1) / 2 - 1]\
    \ + sorted[sorted.count / 2 - 1])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp56rjzmw4/tmp56rjzmw4.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88a7862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88a7559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88a7559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88a75587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp56rjzmw4                        0x0000561ad5c1c501 <unavailable> + 5377

    5    libc.so.6                          0x00002b88a7a4e460 __libc_start_main +
    245

    6    tmp56rjzmw4                        0x0000561ad5c1c149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count -\
    \ 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpo6o7z4m8.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpo6o7z4m8.swift:12:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvrjl3d55.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpvrjl3d55.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    let mid = n / 2\n    let left = l[0 ..< mid]\n\
    \    let right = l[mid..<n]\n    let median = median(left)\n    if median.isNaN\
    \ || median.isInfinite {\n        return median\n    }\n    return median.doubleValue\
    \ + median(right)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe8afpvzj.swift:15:25: error: missing argument label 'l:' in call\n\
    \    let median = median(left)\n                        ^\n                  \
    \      l: \n/tmp/tmpe8afpvzj.swift:15:25: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n    let median = median(left)\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    let mid = n / 2\n    let leftMedian = median(l.prefix(mid))\n\
    \    let rightMedian = median(l.suffix(mid))\n    return Double(leftMedian) +\
    \ Double(rightMedian) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp8yh533lw.swift:13:29: error: missing argument label 'l:' in call\n\
    \    let leftMedian = median(l.prefix(mid))\n                            ^\n \
    \                           l: \n/tmp/tmp8yh533lw.swift:14:30: error: missing\
    \ argument label 'l:' in call\n    let rightMedian = median(l.suffix(mid))\n \
    \                            ^\n                             l: \n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var sortedList = l.sorted()\n    if sortedList.count\
    \ % 2 == 0 {\n        return sortedList[sortedList.count / 2]\n    }\n    return\
    \ sortedList[sortedList.count / 2 - 1] + sortedList[sortedList.count / 2]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpsnjtcybb.swift:10:26: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return sortedList[sortedList.count\
    \ / 2]\n               ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n               Double(\
    \                         )\n/tmp/tmpsnjtcybb.swift:12:49: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return sortedList[sortedList.count\
    \ / 2 - 1] + sortedList[sortedList.count / 2]\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                                                          \
    \      )\n"
  stdout: ''
  timestamp: 1659824641
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.count / 2)\n    }\n    return l[0]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp14c4t5zw.swift:13:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[0]\n           ~^~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return 0\n    }\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    var\
    \ low = l[0]\n    var high = l[0]\n    for v in l[1..] {\n        if v < low {\n\
    \            low = v\n        }\n        if v > high {\n            high = v\n\
    \        }\n    }\n    return (high + low) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpzfp0uy_u.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[n/2]\n               ~^~~~~\n\
    \               Double( )\n/tmp/tmpzfp0uy_u.swift:17:17: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n    for v in l[1..] {\n                ^~\n\
    \                ...\n/tmp/tmpzfp0uy_u.swift:25:25: error: cannot convert return\
    \ expression of type 'Int' to return type 'Double'\n    return (high + low) /\
    \ 2\n           ~~~~~~~~~~~~~^~~\n           Double(         )\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count / 2) - 1]\n    } else {\n        return\
    \ l[(l.count / 2)]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpnszair_s.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count / 2) - 1]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpnszair_s.swift:13:17:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count / 2)]\n               ~^~~~~~~~~~~~~~~\n          \
    \     Double(         )\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.last! + l.first!) / Double(l.count - 1)\n   \
    \ }\n    return l.first!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp66k2oqug.swift:13:19: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l.first!\n           ~~~~~~~^\n\
    \           Double( )\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[0]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpr7yscqb4.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpr7yscqb4.swift:13:13:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[0]\n           ~^~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp4ovsu437.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp4ovsu437.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return 0\n    }\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    var\
    \ mid = n / 2\n    var left = l[:mid]\n    var right = l[mid:]\n    var m1 = median(left)\n\
    \    var m2 = median(right)\n    if m1 < m2 {\n        return m1\n    }\n    return\
    \ m2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp87jyukig.swift:16:18: error: expected expression in list of expressions\n\
    \    var left = l[:mid]\n                 ^\n/tmp/tmp87jyukig.swift:17:23: error:\
    \ expected expression in list of expressions\n    var right = l[mid:]\n      \
    \                ^\n/tmp/tmp87jyukig.swift:13:17: error: cannot convert return\
    \ expression of type 'Int' to return type 'Double'\n        return l[n/2]\n  \
    \             ~^~~~~\n               Double( )\n/tmp/tmp87jyukig.swift:16:22:\
    \ error: missing argument for parameter #1 in call\n    var left = l[:mid]\n \
    \                    ^\n                     <#Int#>\nSwift.Array:16:23: note:\
    \ 'subscript(_:)' declared here\n    @inlinable public subscript(index: Int) ->\
    \ Element { get set }\n                      ^\n/tmp/tmp87jyukig.swift:17:23:\
    \ error: missing argument for parameter #1 in call\n    var right = l[mid:]\n\
    \                      ^\n                      <#Int#>\nSwift.Array:16:23: note:\
    \ 'subscript(_:)' declared here\n    @inlinable public subscript(index: Int) ->\
    \ Element { get set }\n                      ^\n/tmp/tmp87jyukig.swift:18:21:\
    \ error: missing argument label 'l:' in call\n    var m1 = median(left)\n    \
    \                ^\n                    l: \n/tmp/tmp87jyukig.swift:19:21: error:\
    \ missing argument label 'l:' in call\n    var m2 = median(right)\n          \
    \          ^\n                    l: \n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.count / 2)\n    }\n    return l[0]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp14c4t5zw.swift:13:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[0]\n           ~^~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659824640
