name: HumanEval_10_make_palindrome
language: swift
prompt: "\n/// Find the shortest palindrome that begins with a supplied string.\n\
  /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
  \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
  \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(string:\
  \ \"\")\n/// \"\"\n/// >>> make_palindrome(string: \"cat\")\n/// \"catac\"\n///\
  \ >>> make_palindrome(string: \"cata\")\n/// \"catac\"\nfunc make_palindrome(string:\
  \ String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(make_palindrome(string: \"\") == \"\")\n\
  assert(make_palindrome(string: \"x\") == \"x\")\nassert(make_palindrome(string:\
  \ \"xyz\") == \"xyzyx\")\nassert(make_palindrome(string: \"xyx\") == \"xyx\")\n\
  assert(make_palindrome(string: \"jerry\") == \"jerryrrej\")"
completions: ["    var palindrome = \"\"\n    var longestPalindrome = \"\"\n    for\
    \ character in string {\n        if character == character {\n            palindrome\
    \ += character\n        }\n    }\n    for character in string {\n        if character\
    \ == character {\n            palindrome += character\n        }\n        if character\
    \ == palindrome[longestPalindrome.count-1] {\n            longestPalindrome +=\
    \ character\n        }\n    }\n    return longestPalindrome + palindrome", " \
    \   if string == \"\" {\n        return \"\"\n    }\n\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix\
    \ = \"\"\n    var longestPalindromeSuffix = \"\"\n\n    for character in string\
    \ {\n        if character == character {\n            longestPalindromeLength\
    \ += 1\n        } else {\n            longestPalindromeLength = 0\n        }\n\
    \n        if longestPalindromeLength > longestPalindromeLength {\n           \
    \ longestPalindrome = character\n            longestPalindromeLength = longestPalindromeLength\n\
    \            longestPalindromePrefix = string\n            longestPalindromeSuffix\
    \ = string\n        } else {\n            longestPalindromeSuffix += character\n\
    \        }\n    }\n\n    if longestPalindromeLength > longestPalindromeLength\
    \ {\n        longestPalindrome = longestPalindromeSuffix\n        longestPalindromeLength\
    \ = longestPalindromeLength\n        longestPalindromePrefix = longestPalindromePrefix\n\
    \        longestPalindromeSuffix = string\n    }\n\n    return longestPalindromePrefix\
    \ + longestPalindrome", "\tlet reverse = string.reversed()\n\tlet prefix = string.prefix(string.reversed())\n\
    \treturn prefix + reverse", "    var result = string\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeIndex\
    \ = 0\n    var longestPalindromeIndexStart = 0\n    var longestPalindromeIndexEnd\
    \ = 0\n    var longestPalindromeIndexStartReverse = 0\n    var longestPalindromeIndexEndReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n   \
    \ var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n   \
    \ var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n   \
    \ var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n   \
    \ var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse", "    if\
    \ string == \"\" {\n        return \"\"\n    }\n    var longestPalindrome = string\n\
    \    var longestPalindromeLength = 0\n    for index in 0..<string.characters.count\
    \ {\n        let currentChar = string.characters[index]\n        let currentCharLength\
    \ = string.characters.count\n        let currentCharReversed = currentChar.reversed()\n\
    \        let currentCharReversedLength = currentCharReversed.count\n        if\
    \ currentCharLength > longestPalindromeLength {\n            longestPalindrome\
    \ = string\n            longestPalindromeLength = currentCharLength\n        }\n\
    \        if currentCharLength == longestPalindromeLength && currentChar == currentCharReversed\
    \ {\n            longestPalindrome = string\n            longestPalindromeLength\
    \ = currentCharLength\n        }\n    }\n    return longestPalindrome", "    var\
    \ reverse = \"\"\n    var longest = \"\"\n    for c in string {\n        reverse\
    \ = reverse.stringByAppendingString(String(c.reversed()))\n        if longest.characters.count\
    \ < reverse.characters.count {\n            longest = reverse\n        }\n   \
    \ }\n    return longest", "    var result = \"\"\n    var longest = 0\n    for\
    \ c in string {\n        if c == string[longest] {\n            longest++\n  \
    \      } else {\n            if longest > 0 {\n                result = string[longest..<longest+longest].reversed().append(result)\n\
    \            }\n            longest = 0\n        }\n    }\n    if longest > 0\
    \ {\n        result = string[longest..<longest+longest].reversed().append(result)\n\
    \    }\n    return result", "    var result = \"\"\n    var longest = 0\n    for\
    \ c in string {\n        if c == string[longest] {\n            longest++\n  \
    \      } else {\n            if longest > 0 {\n                result += string[longest-1...longest]\n\
    \            }\n            longest = 1\n            result += string[longest-1...longest]\n\
    \        }\n    }\n    if longest > 0 {\n        result += string[longest-1...longest]\n\
    \    }\n    return result", "    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefixLength = 0\n    for _ in 0..<string.characters.count\
    \ {\n        let currentChar = string[string.startIndex]\n        let currentCharLength\
    \ = string.characters.count\n        let currentPalindrome = make_palindrome_helper(currentChar,\
    \ currentCharLength)\n        if currentPalindrome != \"\" {\n            if currentPalindromeLength\
    \ < longestPalindromeLength {\n                longestPalindrome = currentPalindrome\n\
    \                longestPalindromeLength = currentPalindromeLength\n         \
    \       longestPalindromePrefixLength = currentCharLength\n            }\n   \
    \     }\n    }\n    return longestPalindrome", "    var result = \"\"\n    var\
    \ longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    for c in\
    \ string {\n        if isPalindrome(character: c) {\n            longestPalindromeLength\
    \ += 1\n            if longestPalindromeLength > longestPalindrome.length {\n\
    \                longestPalindrome = string[longestPalindromeLength..<longestPalindromeLength\
    \ + longestPalindromeLength]\n            }\n        } else {\n            longestPalindromeLength\
    \ = 0\n        }\n        result += c\n    }\n    if longestPalindromeLength >\
    \ longestPalindrome.length {\n        longestPalindrome = string[longestPalindromeLength..<longestPalindromeLength\
    \ + longestPalindromeLength]\n    }\n    return result + longestPalindrome", "\t\
    let maxPalindrome = findLongestPalindrome(string: string)\n\tlet reversedString\
    \ = reverseString(string: maxPalindrome)\n\treturn string + reversedString", " \
    \   if string == \"\" {\n        return \"\"\n    }\n\n    // Find longest postfix\
    \ that is a palindrome.\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    for index in 0..<string.count {\n        let currentChar = string[index]\n\
    \        let nextChar = string[(index + 1) % string.count]\n        if currentChar\
    \ == nextChar {\n            longestPalindromeLength += 1\n        } else {\n\
    \            break\n        }\n    }\n\n    // Append reverse of the string prefix\
    \ that comes before the palindromic suffix.\n    var reversedString = string\n\
    \    for index in 0..<longestPalindromeLength {\n        reversedString.append(string[(longestPalindromeLength\
    \ - index - 1) % string.count])\n    }\n\n    return reversedString + longestPalindrome",
  "    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromeIndex = 0\n    var longestPalindromePrefix = \"\"\n    var\
    \ longestPalindromeSuffix = \"a\"\n    var longestPalindromeSuffixIndex = 0\n\
    \    var longestPalindromeSuffixReverse = \"\"\n    var longestPalindromeSuffixReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalin", "    if string == \"\" {\n        return \"\"\n\
    \    }\n    var longestPalindrome = string\n    var longestPalindromeLength =\
    \ 0\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    for character in string {\n        if character == character {\n  \
    \          continue\n        }\n        var palindrome = string\n        var palindromeLength\
    \ = 0\n        var palindromePrefixLength = 0\n        var palindromeSuffixLength\
    \ = 0\n        for index in 0..<string.count {\n            if character == string[index]\
    \ {\n                palindrome = palindrome[index..<string.count-index]\n   \
    \             palindromeLength += 1\n                if palindromeLength > longestPalindromeLength\
    \ {\n                    longestPalindrome = palindrome\n                    longestPalindromeLength\
    \ = palindromeLength\n                    longestPalindromePrefixLength = palindromePrefixLength\n\
    \                    longestPalindromeSuffixLength = palindromeSuffixLength\n\
    \                }\n                continue\n            }\n            if character\
    \ == string[index] {\n                palindrome = palindrome[index..<string.count-index]\n\
    \                palindromeLength += 1\n                palindromePrefixLength\
    \ += 1\n                if palindromeLength > longestPalindromeLength {\n    \
    \                longestPalindrome = palindrome\n                    longestPalindromeLength\
    \ = palindromeLength\n                    longestPalindromePrefixLength = palindromePrefixLength\n\
    \                    longestPalindromeSuffixLength = palindromeSuffixLength\n\
    \                }\n                continue\n            }\n            if character\
    \ == string[index] {\n                palindrome = palindrome[index..<string.count-index]\n\
    \                palindromeLength += 1\n                palindromeSuffixLength\
    \ += 1\n                if palindromeLength > longestPalindromeLength {\n    \
    \                longestPalindrome = palindrome\n                    longestPalindromeLength\
    \ = palindromeLength\n                    longestPalindromePrefixLength = palindromePrefixLength\n\
    \                    longestPalindromeSuffixLength = palindromeSuffixLength\n\
    \                }\n                continue\n            }\n        }\n    }\n\
    \    return longestPalindrome", "    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for character in string {\n        if character == character {\n  \
    \          longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome.length {\n                longestPalindrome = string\n \
    \           }\n        } else {\n            longestPalindromeLength = 0\n   \
    \     }\n    }\n    var reversedString = \"\"\n    for character in longestPalindrome\
    \ {\n        reversedString += character\n    }\n    return reversedString + longestPalindrome",
  "    var longestPalindrome = string\n    var longestPalindromeLength = string.length\n\
    \    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\
    \n    var longestPalindromePostfix = \"\"\n    var longestPalindromePostfixLength\
    \ = 0\n    var longestPalindromePostfixPrefix = \"\"\n    var longestPalindromePostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfix = \"\"\n    var longestPalindromePostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPrefix = \"\"\n    var longestPalindromePostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfix = \"\"\n    var longestPalindromePostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPrefix = \"\"\n    var longestPalindromePostfixPostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfix = \"\"\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfixLength = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixSuffix = \"\"\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfix = \"\"\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfixPostfixLength = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix =\
    \ \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix =\
    \ \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePost", "    var result = string\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix\
    \ = \"\"\n    var longestPalindromeSuffix = \"\"\n    for character in string\
    \ {\n        if character == character {\n            longestPalindromeLength\
    \ += 1\n            if longestPalindromeLength > longestPalindromeLength {\n \
    \               longestPalindrome = longestPalindromePrefix\n                longestPalindromeLength\
    \ = longestPalindromeLength\n            }\n        } else {\n            if longestPalindromeLength\
    \ > longestPalindromeLength {\n                longestPalindrome = longestPalindromeSuffix\n\
    \                longestPalindromeLength = longestPalindromeLength\n         \
    \   }\n            longestPalindromeLength = 0\n            longestPalindromePrefix\
    \ = character\n            longestPalindromeSuffix = character\n        }\n  \
    \  }\n    if longestPalindromeLength > longestPalindromeLength {\n        longestPalindrome\
    \ = longestPalindromeSuffix\n        longestPalindromeLength = longestPalindromeLength\n\
    \    }\n    for character in string {\n        if character == character {\n \
    \           longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindromeLength {\n                longestPalindrome = longestPalindromePrefix\n\
    \                longestPalindromeLength = longestPalindromeLength\n         \
    \   }\n        } else {\n            if longestPalindromeLength > longestPalindromeLength\
    \ {\n                longestPalindrome = longestPalindromeSuffix\n           \
    \     longestPalindromeLength = longestPalindromeLength\n            }\n     \
    \       longestPalindromeLength = 0\n            longestPalindromePrefix = character\n\
    \            longestPalindromeSuffix = character\n        }\n    }\n    if longestPalindromeLength\
    \ > longestPalindromeLength {\n        longestPalindrome = longestPalindromeSuffix\n\
    \        longestPalindromeLength = longestPalindromeLength\n    }\n    for character\
    \ in string {\n        if character == character {\n            longestPalindromeLength\
    \ += 1\n            if longestPalindromeLength > longestPalindromeLength {\n \
    \               longestPalindrome = longestPalindromePrefix\n                longestPalindromeLength\
    \ = longestPalindromeLength\n            }\n        } else {\n            if longestPalindromeLength\
    \ > longestPalindrome", "    var result = \"\"\n    var longestPalindrome = \"\
    \"\n    var longestPalindromeLength = 0\n    var longestPalindromeIndex = 0\n\
    \    var longestPalindromeIndexStart = 0\n    var longestPalindromeIndexEnd =\
    \ 0\n    var longestPalindromeIndexStartReverse = 0\n    var longestPalindromeIndexEndReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n   \
    \ var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n   \
    \ var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n   \
    \ var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n   \
    \ var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse", "    let\
    \ reversed = string.reversed()\n    let prefixLength = string.characters.count\
    \ - reversed.characters.count\n    let prefixString = string.characters.suffix(prefixLength)\n\
    \    return prefixString + reversed", "    var longestPalindrome = string\n  \
    \  var longestPalindromeLength = 0\n    for _ in 0..<string.count {\n        let\
    \ longestPalindromePrefix = longestPalindrome[longestPalindromeLength..<longestPalindrome.count]\n\
    \        let longestPalindromeSuffix = longestPalindrome[longestPalindromeLength..<longestPalindrome.count].reversed()\n\
    \        if longestPalindromePrefix.isPalindrome && longestPalindromeSuffix.isPalindrome\
    \ {\n            longestPalindromeLength += 1\n            longestPalindrome =\
    \ longestPalindrome[longestPalindromeLength..<longestPalindrome.count]\n     \
    \   } else {\n            break\n        }\n    }\n    return longestPalindrome"]
stop_tokens:
- "\n}"
