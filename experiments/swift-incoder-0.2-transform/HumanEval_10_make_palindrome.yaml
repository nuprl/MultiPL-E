name: HumanEval_10_make_palindrome
language: swift
prompt: "\n/// Find the shortest palindrome that begins with a supplied string.\n\
  /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
  \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
  \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(string:\
  \ \"\")\n/// \"\"\n/// >>> make_palindrome(string: \"cat\")\n/// \"catac\"\n///\
  \ >>> make_palindrome(string: \"cata\")\n/// \"catac\"\nfunc make_palindrome(string:\
  \ String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(make_palindrome(string: \"\") == \"\")\n\
  assert(make_palindrome(string: \"x\") == \"x\")\nassert(make_palindrome(string:\
  \ \"xyz\") == \"xyzyx\")\nassert(make_palindrome(string: \"xyx\") == \"xyx\")\n\
  assert(make_palindrome(string: \"jerry\") == \"jerryrrej\")"
completions: ["    var palindrome = \"\"\n    var longestPalindrome = \"\"\n    for\
    \ character in string {\n        if character == character {\n            palindrome\
    \ += character\n        }\n    }\n    for character in string {\n        if character\
    \ == character {\n            palindrome += character\n        }\n        if character\
    \ == palindrome[longestPalindrome.count-1] {\n            longestPalindrome +=\
    \ character\n        }\n    }\n    return longestPalindrome + palindrome", " \
    \   if string == \"\" {\n        return \"\"\n    }\n\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix\
    \ = \"\"\n    var longestPalindromeSuffix = \"\"\n\n    for character in string\
    \ {\n        if character == character {\n            longestPalindromeLength\
    \ += 1\n        } else {\n            longestPalindromeLength = 0\n        }\n\
    \n        if longestPalindromeLength > longestPalindromeLength {\n           \
    \ longestPalindrome = character\n            longestPalindromeLength = longestPalindromeLength\n\
    \            longestPalindromePrefix = string\n            longestPalindromeSuffix\
    \ = string\n        } else {\n            longestPalindromeSuffix += character\n\
    \        }\n    }\n\n    if longestPalindromeLength > longestPalindromeLength\
    \ {\n        longestPalindrome = longestPalindromeSuffix\n        longestPalindromeLength\
    \ = longestPalindromeLength\n        longestPalindromePrefix = longestPalindromePrefix\n\
    \        longestPalindromeSuffix = string\n    }\n\n    return longestPalindromePrefix\
    \ + longestPalindrome", "\tlet reverse = string.reversed()\n\tlet prefix = string.prefix(string.reversed())\n\
    \treturn prefix + reverse", "    var result = string\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeIndex\
    \ = 0\n    var longestPalindromeIndexStart = 0\n    var longestPalindromeIndexEnd\
    \ = 0\n    var longestPalindromeIndexStartReverse = 0\n    var longestPalindromeIndexEndReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n   \
    \ var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n   \
    \ var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n   \
    \ var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n   \
    \ var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse", "    if\
    \ string == \"\" {\n        return \"\"\n    }\n    var longestPalindrome = string\n\
    \    var longestPalindromeLength = 0\n    for index in 0..<string.characters.count\
    \ {\n        let currentChar = string.characters[index]\n        let currentCharLength\
    \ = string.characters.count\n        let currentCharReversed = currentChar.reversed()\n\
    \        let currentCharReversedLength = currentCharReversed.count\n        if\
    \ currentCharLength > longestPalindromeLength {\n            longestPalindrome\
    \ = string\n            longestPalindromeLength = currentCharLength\n        }\n\
    \        if currentCharLength == longestPalindromeLength && currentChar == currentCharReversed\
    \ {\n            longestPalindrome = string\n            longestPalindromeLength\
    \ = currentCharLength\n        }\n    }\n    return longestPalindrome", "    var\
    \ reverse = \"\"\n    var longest = \"\"\n    for c in string {\n        reverse\
    \ = reverse.stringByAppendingString(String(c.reversed()))\n        if longest.characters.count\
    \ < reverse.characters.count {\n            longest = reverse\n        }\n   \
    \ }\n    return longest", "    var result = \"\"\n    var longest = 0\n    for\
    \ c in string {\n        if c == string[longest] {\n            longest++\n  \
    \      } else {\n            if longest > 0 {\n                result = string[longest..<longest+longest].reversed().append(result)\n\
    \            }\n            longest = 0\n        }\n    }\n    if longest > 0\
    \ {\n        result = string[longest..<longest+longest].reversed().append(result)\n\
    \    }\n    return result", "    var result = \"\"\n    var longest = 0\n    for\
    \ c in string {\n        if c == string[longest] {\n            longest++\n  \
    \      } else {\n            if longest > 0 {\n                result += string[longest-1...longest]\n\
    \            }\n            longest = 1\n            result += string[longest-1...longest]\n\
    \        }\n    }\n    if longest > 0 {\n        result += string[longest-1...longest]\n\
    \    }\n    return result", "    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefixLength = 0\n    for _ in 0..<string.characters.count\
    \ {\n        let currentChar = string[string.startIndex]\n        let currentCharLength\
    \ = string.characters.count\n        let currentPalindrome = make_palindrome_helper(currentChar,\
    \ currentCharLength)\n        if currentPalindrome != \"\" {\n            if currentPalindromeLength\
    \ < longestPalindromeLength {\n                longestPalindrome = currentPalindrome\n\
    \                longestPalindromeLength = currentPalindromeLength\n         \
    \       longestPalindromePrefixLength = currentCharLength\n            }\n   \
    \     }\n    }\n    return longestPalindrome", "    var result = \"\"\n    var\
    \ longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    for c in\
    \ string {\n        if isPalindrome(character: c) {\n            longestPalindromeLength\
    \ += 1\n            if longestPalindromeLength > longestPalindrome.length {\n\
    \                longestPalindrome = string[longestPalindromeLength..<longestPalindromeLength\
    \ + longestPalindromeLength]\n            }\n        } else {\n            longestPalindromeLength\
    \ = 0\n        }\n        result += c\n    }\n    if longestPalindromeLength >\
    \ longestPalindrome.length {\n        longestPalindrome = string[longestPalindromeLength..<longestPalindromeLength\
    \ + longestPalindromeLength]\n    }\n    return result + longestPalindrome", "\t\
    let maxPalindrome = findLongestPalindrome(string: string)\n\tlet reversedString\
    \ = reverseString(string: maxPalindrome)\n\treturn string + reversedString", " \
    \   if string == \"\" {\n        return \"\"\n    }\n\n    // Find longest postfix\
    \ that is a palindrome.\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    for index in 0..<string.count {\n        let currentChar = string[index]\n\
    \        let nextChar = string[(index + 1) % string.count]\n        if currentChar\
    \ == nextChar {\n            longestPalindromeLength += 1\n        } else {\n\
    \            break\n        }\n    }\n\n    // Append reverse of the string prefix\
    \ that comes before the palindromic suffix.\n    var reversedString = string\n\
    \    for index in 0..<longestPalindromeLength {\n        reversedString.append(string[(longestPalindromeLength\
    \ - index - 1) % string.count])\n    }\n\n    return reversedString + longestPalindrome",
  "    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromeIndex = 0\n    var longestPalindromePrefix = \"\"\n    var\
    \ longestPalindromeSuffix = \"a\"\n    var longestPalindromeSuffixIndex = 0\n\
    \    var longestPalindromeSuffixReverse = \"\"\n    var longestPalindromeSuffixReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalin", "    if string == \"\" {\n        return \"\"\n\
    \    }\n    var longestPalindrome = string\n    var longestPalindromeLength =\
    \ 0\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    for character in string {\n        if character == character {\n  \
    \          continue\n        }\n        var palindrome = string\n        var palindromeLength\
    \ = 0\n        var palindromePrefixLength = 0\n        var palindromeSuffixLength\
    \ = 0\n        for index in 0..<string.count {\n            if character == string[index]\
    \ {\n                palindrome = palindrome[index..<string.count-index]\n   \
    \             palindromeLength += 1\n                if palindromeLength > longestPalindromeLength\
    \ {\n                    longestPalindrome = palindrome\n                    longestPalindromeLength\
    \ = palindromeLength\n                    longestPalindromePrefixLength = palindromePrefixLength\n\
    \                    longestPalindromeSuffixLength = palindromeSuffixLength\n\
    \                }\n                continue\n            }\n            if character\
    \ == string[index] {\n                palindrome = palindrome[index..<string.count-index]\n\
    \                palindromeLength += 1\n                palindromePrefixLength\
    \ += 1\n                if palindromeLength > longestPalindromeLength {\n    \
    \                longestPalindrome = palindrome\n                    longestPalindromeLength\
    \ = palindromeLength\n                    longestPalindromePrefixLength = palindromePrefixLength\n\
    \                    longestPalindromeSuffixLength = palindromeSuffixLength\n\
    \                }\n                continue\n            }\n            if character\
    \ == string[index] {\n                palindrome = palindrome[index..<string.count-index]\n\
    \                palindromeLength += 1\n                palindromeSuffixLength\
    \ += 1\n                if palindromeLength > longestPalindromeLength {\n    \
    \                longestPalindrome = palindrome\n                    longestPalindromeLength\
    \ = palindromeLength\n                    longestPalindromePrefixLength = palindromePrefixLength\n\
    \                    longestPalindromeSuffixLength = palindromeSuffixLength\n\
    \                }\n                continue\n            }\n        }\n    }\n\
    \    return longestPalindrome", "    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for character in string {\n        if character == character {\n  \
    \          longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome.length {\n                longestPalindrome = string\n \
    \           }\n        } else {\n            longestPalindromeLength = 0\n   \
    \     }\n    }\n    var reversedString = \"\"\n    for character in longestPalindrome\
    \ {\n        reversedString += character\n    }\n    return reversedString + longestPalindrome",
  "    var longestPalindrome = string\n    var longestPalindromeLength = string.length\n\
    \    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\
    \n    var longestPalindromePostfix = \"\"\n    var longestPalindromePostfixLength\
    \ = 0\n    var longestPalindromePostfixPrefix = \"\"\n    var longestPalindromePostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfix = \"\"\n    var longestPalindromePostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPrefix = \"\"\n    var longestPalindromePostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfix = \"\"\n    var longestPalindromePostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPrefix = \"\"\n    var longestPalindromePostfixPostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfix = \"\"\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfixLength = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixSuffix = \"\"\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfix = \"\"\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfixPostfixLength = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix =\
    \ \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix =\
    \ \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePost", "    var result = string\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix\
    \ = \"\"\n    var longestPalindromeSuffix = \"\"\n    for character in string\
    \ {\n        if character == character {\n            longestPalindromeLength\
    \ += 1\n            if longestPalindromeLength > longestPalindromeLength {\n \
    \               longestPalindrome = longestPalindromePrefix\n                longestPalindromeLength\
    \ = longestPalindromeLength\n            }\n        } else {\n            if longestPalindromeLength\
    \ > longestPalindromeLength {\n                longestPalindrome = longestPalindromeSuffix\n\
    \                longestPalindromeLength = longestPalindromeLength\n         \
    \   }\n            longestPalindromeLength = 0\n            longestPalindromePrefix\
    \ = character\n            longestPalindromeSuffix = character\n        }\n  \
    \  }\n    if longestPalindromeLength > longestPalindromeLength {\n        longestPalindrome\
    \ = longestPalindromeSuffix\n        longestPalindromeLength = longestPalindromeLength\n\
    \    }\n    for character in string {\n        if character == character {\n \
    \           longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindromeLength {\n                longestPalindrome = longestPalindromePrefix\n\
    \                longestPalindromeLength = longestPalindromeLength\n         \
    \   }\n        } else {\n            if longestPalindromeLength > longestPalindromeLength\
    \ {\n                longestPalindrome = longestPalindromeSuffix\n           \
    \     longestPalindromeLength = longestPalindromeLength\n            }\n     \
    \       longestPalindromeLength = 0\n            longestPalindromePrefix = character\n\
    \            longestPalindromeSuffix = character\n        }\n    }\n    if longestPalindromeLength\
    \ > longestPalindromeLength {\n        longestPalindrome = longestPalindromeSuffix\n\
    \        longestPalindromeLength = longestPalindromeLength\n    }\n    for character\
    \ in string {\n        if character == character {\n            longestPalindromeLength\
    \ += 1\n            if longestPalindromeLength > longestPalindromeLength {\n \
    \               longestPalindrome = longestPalindromePrefix\n                longestPalindromeLength\
    \ = longestPalindromeLength\n            }\n        } else {\n            if longestPalindromeLength\
    \ > longestPalindrome", "    var result = \"\"\n    var longestPalindrome = \"\
    \"\n    var longestPalindromeLength = 0\n    var longestPalindromeIndex = 0\n\
    \    var longestPalindromeIndexStart = 0\n    var longestPalindromeIndexEnd =\
    \ 0\n    var longestPalindromeIndexStartReverse = 0\n    var longestPalindromeIndexEndReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n   \
    \ var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n   \
    \ var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n   \
    \ var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n   \
    \ var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse", "    let\
    \ reversed = string.reversed()\n    let prefixLength = string.characters.count\
    \ - reversed.characters.count\n    let prefixString = string.characters.suffix(prefixLength)\n\
    \    return prefixString + reversed", "    var longestPalindrome = string\n  \
    \  var longestPalindromeLength = 0\n    for _ in 0..<string.count {\n        let\
    \ longestPalindromePrefix = longestPalindrome[longestPalindromeLength..<longestPalindrome.count]\n\
    \        let longestPalindromeSuffix = longestPalindrome[longestPalindromeLength..<longestPalindrome.count].reversed()\n\
    \        if longestPalindromePrefix.isPalindrome && longestPalindromeSuffix.isPalindrome\
    \ {\n            longestPalindromeLength += 1\n            longestPalindrome =\
    \ longestPalindrome[longestPalindromeLength..<longestPalindrome.count]\n     \
    \   } else {\n            break\n        }\n    }\n    return longestPalindrome",
  "    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\n   \
    \ var longestPalindromePostfix = \"\"\n    var longestPalindromePostfixLength\
    \ = 0\n    var longestPalindromePostfixPrefix = \"\"\n    var longestPalindromePostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfix = \"\"\n    var longestPalindromePostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPrefix = \"\"\n    var longestPalindromePostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfix = \"\"\n    var longestPalindromePostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPrefix = \"\"\n    var longestPalindromePostfixPostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfix = \"\"\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfixLength = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixSuffix = \"\"\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfix = \"\"\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfixPostfixLength = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix =\
    \ \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix =\
    \ \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPost", "\tlet reversed = string.reversed()\n\
    \tlet prefixLength = string.characters.count - reversed.characters.count\n\tlet\
    \ postfix = string.characters.suffix(from: prefixLength)\n\treturn string + reversed\
    \ + postfix", "    if string == \"\" {\n        return \"\"\n    }\n    var reverse\
    \ = \"\"\n    var longestPalindrome = \"\"\n    for i := 0; i < len(string); i++\
    \ {\n        if string[i] != string[len(string)-(i+1)] {\n            longestPalindrome\
    \ = string[:i]\n            break\n        }\n    }\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] != string[len(string)-(i+1)] {\n            reverse\
    \ = reverse + string[i]\n        }\n    }\n    return longestPalindrome + reverse",
  "    if string == \"\" {\n        return \"\"\n    }\n    var reversedString = string\n\
    \    var longestPalindromicPostfix = 0\n    for postfix := string.length; postfix\
    \ > 0; postfix-- {\n        if string[postfix - 1] != string[postfix] {\n    \
    \        break\n        }\n        longestPalindromicPostfix = postfix\n    }\n\
    \    if longestPalindromicPostfix > 0 {\n        reversedString = reversedString[longestPalindromicPostfix...].appendingString(string[longestPalindromicPostfix..<string.count])\n\
    \    }\n    return reversedString", "\tlet reverse = string.reversed()\n\tlet\
    \ prefix = string.prefix(string.reversed())\n\treturn prefix + reverse", "   \
    \ let reverse = string.reversed()\n    let longest = longestPalindrome(string:\
    \ string)\n    let prefix = reverse.prefix(string: longest)\n    return prefix\
    \ + longest", "    if string == \"\" {\n        return \"\"\n    }\n    var reversed\
    \ = string\n    var longestPalindrome = string\n    for _ in 0..<string.count\
    \ {\n        let start = reversed.index(of: reversed[0])\n        let end = reversed.index(of:\
    \ reversed[reversed.count - 1])\n        let substring = reversed[start..<end]\n\
    \        if substring == string {\n            longestPalindrome = substring\n\
    \        }\n        reversed = reversed[..<reversed.index(of: reversed[0], offsetBy:\
    \ -1)..<reversed.index(of: reversed[reversed.count - 1], offsetBy: -1)]\n    }\n\
    \    return longestPalindrome", "    var reverse = \"\"\n    var longest = \"\"\
    \n    for c in string {\n        reverse = reverse.stringByAppendingString(String(c.reversed()))\n\
    \        if longest.characters.count < reverse.characters.count {\n          \
    \  longest = reverse\n        }\n    }\n    return longest", "    var result =\
    \ \"\"\n    var longest = 0\n    for c in string {\n        if c != string[longest]\
    \ {\n            longest = longest\n        } else {\n            longest = longest\
    \ + 1\n        }\n    }\n    for pos in 0..<longest {\n        let start = string.index(string.startIndex,\
    \ offsetBy: pos)\n        let end = string.index(string.startIndex, offsetBy:\
    \ pos + 1)\n        let reversed = string[start..<end].reversed()\n        result\
    \ = result + reversed + string[start..<end]\n    }\n    return result", "    var\
    \ reverse = \"\"\n    var longest = \"\"\n    for c in string {\n        if c\
    \ != string[string.index(before: reverse.endIndex, offsetBy: 1)] {\n         \
    \   longest = longest.prefix(longest.endIndex.predecessor())\n            reverse\
    \ = reverse.prefix(longest.endIndex.predecessor())\n        }\n        reverse\
    \ = reverse.prefix(longest.endIndex.predecessor())\n        reverse = reverse.prefix(longest.endIndex.predecessor())\n\
    \        reverse = reverse.prefix(longest.endIndex.predecessor())\n        reverse\
    \ = reverse.prefix(longest.endIndex.predecessor())\n        reverse = reverse.prefix(longest.endIndex.predecessor())\n\
    \        reverse = reverse.prefix(longest.endIndex.predecessor())\n        reverse\
    \ = reverse.prefix(longest.endIndex.predecessor())\n        reverse = reverse.prefix(longest.endIndex.predecessor())\n\
    \        reverse = reverse.prefix(longest.endIndex.predecessor())\n        reverse\
    \ = reverse.prefix(longest.endIndex.predecessor())\n        reverse = reverse.prefix(longest.endIndex.predecessor())\n\
    \        reverse = reverse.prefix(longest.endIndex.predecessor())\n        reverse\
    \ = reverse.prefix(longest.endIndex.predecessor())\n        reverse = reverse.prefix(longest.endIndex.predecessor())\n\
    \        reverse = reverse.prefix(longest.endIndex.predecessor())\n        reverse\
    \ = reverse.prefix(longest.endIndex.predecessor())\n        reverse = reverse.prefix(longest.endIndex.predecessor())\n\
    \        reverse = reverse.prefix(longest.endIndex.predecessor())\n        reverse\
    \ = reverse.prefix(longest.endIndex.predecessor())\n        reverse = reverse.prefix(longest.endIndex.predecessor())\n\
    \        reverse = reverse.prefix(longest.endIndex.predecessor())\n        reverse\
    \ = reverse.prefix(longest.endIndex.predecessor())\n        reverse = reverse.prefix(longest.endIndex.predecessor())\n\
    \        reverse = reverse.prefix(longest.endIndex.predecessor())\n        reverse\
    \ = reverse.prefix(longest.endIndex.predecessor())\n        reverse = reverse.prefix(longest.endIndex.predecessor())\n\
    \        reverse", "    if string == \"\" {\n        return \"\"\n    }\n\n  \
    \  var longestPalindrome = string\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromePrefixLength = 0\n\n    for character in string {\n       \
    \ if character == character {\n            longestPalindromeLength += 1\n    \
    \        if longestPalindromeLength > longestPalindromePrefixLength {\n      \
    \          longestPalindromePrefixLength = longestPalindromeLength\n         \
    \   }\n        } else {\n            longestPalindromeLength = 0\n           \
    \ longestPalindromePrefixLength = 0\n        }\n    }\n\n    var longestPalindromeSuffix\
    \ = string\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixPrefixLength\
    \ = 0\n\n    for character in string {\n        if character == character {\n\
    \            longestPalindromeSuffixLength += 1\n            if longestPalindromeSuffixLength\
    \ > longestPalindromeSuffixPrefixLength {\n                longestPalindromeSuffixPrefixLength\
    \ = longestPalindromeSuffixLength\n            }\n        } else {\n         \
    \   longestPalindromeSuffixLength = 0\n            longestPalindromeSuffixPrefixLength\
    \ = 0\n        }\n    }\n\n    var longestPalindromePaddedSuffix = string\n  \
    \  var longestPalindromePaddedSuffixLength = 0\n    var longestPalindromePaddedSuffixPrefixLength\
    \ = 0\n\n    for character in string {\n        if character == character {\n\
    \            longestPalindromePaddedSuffixLength += 1\n            if longestPalindromePaddedSuffixLength\
    \ > longestPalindromePaddedSuffixPrefixLength {\n                longestPalindromePaddedSuffixPrefixLength\
    \ = longestPalindromePaddedSuffixLength\n            }\n        } else {\n   \
    \         longestPalindromePaddedSuffixLength = 0\n            longestPalindromePaddedSuffixPrefixLength\
    \ = 0\n        }\n    }\n\n    var longestPalindromePaddedSuffix = string\n  \
    \  var longestPalindromePaddedSuffixLength = 0\n    var longestPalindromePaddedSuffixPrefixLength\
    \ = 0\n\n    for character in string {\n        if character == character {\n\
    \            longestPalindromePaddedSuffixLength += 1\n            if longestPalindromePaddedSuffixLength\
    \ > longestPalindromePaddedSuffixPrefixLength {\n                longestPalindromePaddedSuffixPrefixLength\
    \ = longestPalindromePaddedSuffixLength\n            }\n        } else {\n   \
    \         longestPalindromePaddedSuffixLength = 0\n            longestPalindromePaddedSuffixPrefixLength\
    \ = 0\n        }\n    }", "    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeStart = 0\n    var longestPalindromeEnd = 0\n\
    \    var longestPalindromePalindrome = \"\"\n    var longestPalindromePalindromeLength\
    \ = 0\n    var longestPalindromePalindromeStart = 0\n    var longestPalindromePalindromeEnd\
    \ = 0\n    var longestPalindromePalindromePalindrome = \"\"\n    var longestPalindromePalindromePalindromeLength\
    \ = 0\n    var longestPalindromePalindromePalindromeStart = 0\n    var longestPalindromePalindromePalindromeEnd\
    \ = 0\n    var longestPalindromePalindromePalindromePalindrome = \"\"\n    var\
    \ longestPalindromePalindromePalindromePalindromeLength = 0\n    for i := 0; i\
    \ < len(string); i++ {\n        if string[i] == string[len(string)-1-i ] {\n \
    \           longestPalindromePalindromePalindromePalindrome += string[i]\n   \
    \         longestPalindromePalindromePalindromePalindromeLength += 1\n       \
    \     if longestPalindromePalindromePalindromeLength > longestPalindromePalindromePalindromeLength\
    \ {\n                longestPalindromePalindromePalindrome = longestPalindromePalindromePalindromePalindrome\n\
    \                longestPalindromePalindromePalindromeLength = longestPalindromePalindromePalindromeLength\n\
    \                longestPalindromePalindromePalindromeStart = i\n            \
    \    longestPalindromePalindromePalindromeEnd = i\n            }\n        } else\
    \ {\n            longestPalindromePalindromePalindrome += string[i]\n        \
    \    longestPalindromePalindromePalindromeLength += 1\n            if longestPalindromePalindromePalindromeLength\
    \ > longestPalindromePalindromePalindromeLength {\n                longestPalindromePalindromePalindrome\
    \ = longestPalindromePalindromePalindromePalindrome\n                longestPalindromePalindromePalindromeLength\
    \ = longestPalindromeP", "    var reversed = string\n    var longestPalindrome\
    \ = \"\"\n    for _ in 0..<string.count {\n        let longestPalindromeIndex\
    \ = reversed.index(longestPalindrome, reversed.endIndex, offsetBy: -1)\n     \
    \   let longestPalindromeSubstring = reversed[longestPalindromeIndex..<reversed.endIndex]\n\
    \        let longestPalindromeSubstringReversed = reversed[longestPalindromeIndex..<reversed.endIndex.reversed()]\n\
    \        if longestPalindromeSubstring == longestPalindromeSubstringReversed {\n\
    \            reversed = reversed[longestPalindromeIndex..<reversed.endIndex.reversed()]\n\
    \        } else {\n            reversed = longestPalindromeSubstringReversed\n\
    \        }\n    }\n    return reversed", "\tlet length = string.characters.count\n\
    \tlet reverse = string.characters.reverse()\n\tlet prefixLength = length - reverse.count\n\
    \tlet prefix = String(string.characters.prefix(prefixLength))\n\tlet suffix =\
    \ String(string.characters.suffix(length - prefixLength))\n\treturn prefix + reverse",
  "    if string == \"\" {\n        return \"\"\n    }\n    var reverse = \"\"\n \
    \   var longestPalindrome = \"\"\n    for i := 0; i < len(string); i++ {\n   \
    \     var currentChar = string[i]\n        var currentReverse = \"\"\n       \
    \ for j := 0; j < len(reverse); j++ {\n            var currentReverseChar = reverse[j]\n\
    \            if currentChar == currentReverseChar {\n                currentReverse\
    \ += currentChar\n            } else {\n                break\n            }\n\
    \        }\n        if currentReverse == reverse {\n            longestPalindrome\
    \ += currentChar\n        } else {\n            longestPalindrome += currentReverse\n\
    \        }\n        reverse = currentReverse\n    }\n    return longestPalindrome",
  "\tlet reversed = string.reversed()\n\tlet prefix = reversed.prefix(string: string)\n\
    \treturn prefix + reversed", "    if string == \"\" {\n        return \"\"\n \
    \   }\n    var reversed = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLen\
    \ = 0\n    for i := 0; i < len(string); i++ {\n        if string[i] != string[len(string)-1-i]\
    \ {\n            longestPalindromeLen += 1\n            if longestPalindromeLen\
    \ > longestPalindromeLen {\n                longestPalindrome = string\n     \
    \           longestPalindromeLen = len(string)\n            }\n        } else\
    \ {\n            longestPalindromeLen += 1\n        }\n    }\n    for i := 0;\
    \ i < len(string); i++ {\n        reversed = reversed + string[len(string)-1-i]\n\
    \    }\n    return reversed + longestPalindrome", "    if string == \"\" {\n \
    \       return \"\"\n    }\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefixLength = 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == string[len(string)-i-1] {\n            longestPalindromeLength++\n\
    \            longestPalindromePrefixLength++\n        } else {\n            if\
    \ longestPalindromeLength > longestPalindromePrefixLength {\n                longestPalindrome\
    \ = string[longestPalindromePrefixLength:longestPalindromeLength]\n          \
    \      longestPalindromeLength = 0\n                longestPalindromePrefixLength\
    \ = 0\n            }\n        }\n    }\n    if longestPalindromeLength > longestPalindromePrefixLength\
    \ {\n        longestPalindrome = string[longestPalindromePrefixLength:longestPalindromeLength]\n\
    \    }\n    return longestPalindrome", "    if string == \"\" {\n        return\
    \ \"\"\n    }\n    var reversed = \"\"\n    var longestPalindrome = \"\"\n   \
    \ for c in string {\n        if c != string[string.startIndex.advancedBy(-1)]\
    \ {\n            reversed = reversed.appending(c)\n            longestPalindrome\
    \ = longestPalindrome.appending(c)\n        }\n    }\n    if longestPalindrome\
    \ == \"\" {\n        return string\n    }\n    return reversed.appending(longestPalindrome)",
  "\tlet reverse = string.reversed()\n\tlet prefix = reverse.prefix(string: string)\n\
    \tlet suffix = reverse.suffix(string: string)\n\treturn prefix + suffix", "  \
    \  let reversedString = reverseString(string)\n    let longestPalindrome = longestPalindromePrefix(string:\
    \ reversedString)\n    return string + longestPalindrome", "\tlet maxLen = string.characters.count\n\
    \tlet maxLenPalindrome = maxLen / 2\n\tlet maxLenPalindromePadded = maxLenPalindrome\
    \ + maxLen % 2\n\tlet maxLenPalindromePaddedString = String(maxLenPalindromePadded)\n\
    \tlet maxLenPalindromePaddedStringPadded = String(maxLenPalindromePadded)\n\t\
    let maxLenPalindromePaddedStringPaddedReversed = String(maxLenPalindromePadded)\n\
    \tlet maxLenPalindromePaddedStringPaddedReversedReversed = String(maxLenPalindromePadded)\n\
    \tlet maxLenPalindromePaddedStringPaddedReversedReversedReversed = String(maxLenPalindromePadded)\n\
    \tlet maxLenPalindromePaddedStringPaddedReversedReversedReversedReversed = String(maxLenPalindromePadded)\n\
    \tlet maxLenPalindromePaddedStringPaddedReversedReversedReversedReversedReversed\
    \ = String(maxLenPalindromePadded)\n\tlet maxLenPalindromePaddedStringPaddedReversedReversedReversedReversedReversedReversed\
    \ = String(maxLenPalindromePadded)\n\tlet maxLenPalindromePaddedStringPaddedReversedReversedReversedReversedReversedReversed\
    \ = String(maxLenPalindromePadded)\n\tlet maxLenPalindromePaddedStringPaddedReversedReversedReversedReversedReversedReversedReversed\
    \ = String(maxLenPalindromePadded)\n\tlet maxLenPalindromePaddedStringPaddedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = String(maxLenPalindromePadded)\n\tlet maxLenPalindromePaddedStringPaddedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = String(maxLenPalindromePadded)\n\tlet maxLenPalindromePaddedStringPaddedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = String(maxLenPalindromePadded)\n\tlet maxLenPalindromePaddedStringPaddedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = String(maxLenPalindro", "    if string == \"\" {\n        return \"\"\n  \
    \  }\n\n    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n\
    \n    for i := 0; i < len(string); i++ {\n        if string[i] != string[len(string)-1-i]\
    \ {\n            longestPalindromeLength = 0\n            longestPalindrome =\
    \ \"\"\n        }\n\n        if longestPalindromeLength < len(string) - i {\n\
    \            longestPalindromeLength = len(string) - i\n            longestPalindrome\
    \ = string[i..]\n        }\n    }\n\n    return longestPalindrome + string[longestPalindromeLength..]",
  "    var longestPalindrome = string\n    var longestPalindromeLength = longestPalindrome.characters.count\n\
    \    var longestPalindromeIndex = 0\n    var longestPalindromeSuffixIndex = longestPalindromeLength\
    \ - 1\n    var longestPalindromeSuffixIndexReversed = longestPalindromeSuffixIndex\n\
    \    var longestPalindromeSuffixReversed = longestPalindromeSuffix\n    var longestPalindromeSuffixReversedLength\
    \ = longestPalindromeSuffixReversed.characters.count\n    var longestPalindromeSuffixReversedIndex\
    \ = 0\n    var longestPalindromeSuffixReversedIndexReversed = longestPalindromeSuffixReversedLength\
    \ - 1\n    var longestPalindromeSuffixReversedIndexReversed = 0\n    var longestPalindromeSuffixReversedReversed\
    \ = longestPalindromeSuffixReversed\n    var longestPalindromeSuffixReversedReversedLength\
    \ = longestPalindromeSuffixReversedReversed.characters.count\n    var longestPalindromeSuffixReversedReversedIndex\
    \ = 0\n    var longestPalindromeSuffixReversedReversedIndexReversed = longestPalindromeSuffixReversedReversedLength\
    \ - 1\n    var longestPalindromeSuffixReversedReversedIndexReversed = 0\n    var\
    \ longestPalindromeSuffixReversedReversedReversedLength = longestPalindromeSuffixReversedReversedReversed.characters.count\n\
    \    var longestPalindromeSuffixReversedReversedIndexReversed = 0\n    var longestPalindromeSuffixReversedReversedIndexReversed\
    \ = 0\n    var longestPalindromeSuffixReversedReversedReversedLength = longestPalindromeSuffixReversedReversedReversedLength\
    \ - 1\n    var longestPalindromeSuffixReversedReversedReversedIndexReversed =\
    \ 0\n    var longestPalindromeSuffixReversedReversedReversedIndexReversed = 0\n\
    \    var longestPalindromeSuffixReversedReversedReversedReversedLength = longestPalindromeSuffixReversedReversedReversedLength\
    \ - 1\n    var longestPalindromeSuffixReversedReversedReversedIndexReversed =\
    \ 0\n    var longestPalindromeSuffixReversedReversedReversedIndexReversed = 0\n\
    \    var longestPalindromeSuffixReversedReversedReversedReversedLength = longestPalindromeSuffixReversedReversedReversedLength\
    \ - 1\n    var longestPalindromeSuffixReversedReversedReversedIndexReversed =\
    \ 0\n    var longestPalindromeSuffixReversedReversedReversedIndexReverse", "\t\
    let longestPalindrome = longestPalindrome(string: string)\n\tlet reversedString\
    \ = reversedString(string: string)\n\treturn longestPalindrome + reversedString",
  "    var palindrome = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = string.length\n    var longestPalindromePrefix: String = \"\"\n    var longestPalindromeSuffix:\
    \ String = \"\"\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixPrefix:\
    \ String = \"\"\n    var longestPalindromeSuffixSuffix: String = \"\"\n    var\
    \ longestPalindromeSuffixSuffixLength = 0\n    var longestPalindromeSuffixSuffixPrefix:\
    \ String = \"\"\n    var longestPalindromeSuffixSuffixSuffix: String = \"\"\n\
    \    var longestPalindromeSuffixSuffixSuffixLength = 0\n    var longestPalindromeSuffixSuffixSuffixPrefix:\
    \ String = \"\"\n    var longestPalindromeSuffixSuffixSuffixSuffix: String = \"\
    \"\n    var longestPalindromeSuffixSuffixSuffixSuffixLength = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixPrefix:\
    \ String = \"\"\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffix: String\
    \ = \"\"\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixLength = 0\n\
    \    var longestPalindromeSuffixSuffixSuffixSuffixSuffixPrefix: String = \"\"\n\
    \    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffix: String = \"\"\n\
    \    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixLength = 0\n   \
    \ var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixPrefix: String = \"\
    \"\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffix: String\
    \ = \"\"\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixPrefix:\
    \ String = \"\"\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix:\
    \ String = \"\"\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixPrefix:\
    \ String = \"\"\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix:\
    \ String = \"\"\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixPrefix:\
    \ String = \"\"\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix:\
    \ String = \"\"\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixPrefix:\
    \ String = \"\"\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix:\
    \ String", "    var result = \"\"\n    var longestPalindrome = \"\"\n    for character\
    \ in string {\n        let index = string.index(of: character)\n        if index\
    \ != nil {\n            let suffixString = string[index!.advanced(by: -1)]\n \
    \           let reversedSuffixString = suffixString.reversed()\n            if\
    \ longestPalindrome == \"\" {\n                longestPalindrome = reversedSuffixString\n\
    \            } else {\n                let longestPalindromeLength = longestPalindrome.count\n\
    \                let reversedSuffixStringLength = reversedSuffixString.count\n\
    \                if longestPalindromeLength < reversedSuffixStringLength {\n \
    \                   longestPalindrome = reversedSuffixString\n               \
    \ }\n            }\n        }\n    }\n    result += longestPalindrome\n    return\
    \ result", "    var result = \"\"\n    var longestPalindrome = \"\"\n    for character\
    \ in string {\n        if character == character {\n            result += character\n\
    \            continue\n        }\n        longestPalindrome = longestPalindrome\
    \ + character\n    }\n    for character in string {\n        if character == character\
    \ {\n            result += character\n            continue\n        }\n      \
    \  if longestPalindrome == longestPalindrome[longestPalindrome.startIndex.predecessor()...]\
    \ {\n            result += character\n        }\n    }\n    return result", " \
    \   var palindrome = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for character in string {\n        if character == character {\n  \
    \          palindrome += character\n        } else {\n            if longestPalindromeLength\
    \ < palindrome.length {\n                longestPalindrome = palindrome\n    \
    \            longestPalindromeLength = palindrome.length\n            }\n    \
    \        palindrome = character\n        }\n    }\n    if longestPalindromeLength\
    \ < palindrome.length {\n        longestPalindrome = palindrome\n        longestPalindromeLength\
    \ = palindrome.length\n    }\n    return longestPalindrome + palindrome.replacingCharacters(in:\
    \ longestPalindromeLength..<palindrome.length, with: \"\")", "    if string ==\
    \ \"\" {\n        return \"\"\n    }\n    var reversedString = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    for character in string {\n\
    \        reversedString += String(character).reversed()\n        if longestPalindromeLength\
    \ < reversedString.count {\n            longestPalindrome = reversedString\n \
    \           longestPalindromeLength = reversedString.count\n        }\n    }\n\
    \    return longestPalindrome + String(string[longestPalindromeLength..<string.count])",
  "\tlet maxLen = string.count\n\tlet maxIndex = string.index(string.startIndex, offsetBy:\
    \ maxLen)\n\tlet maxPalindrome = string[maxIndex..<maxIndex.advanced(by: maxLen\
    \ - 1)].reversed()\n\treturn maxPalindrome + string", "    if string == \"\" {\n\
    \        return \"\"\n    }\n\n    var reversed = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n\n    for character in string {\n\
    \        if character == character {\n            reversed = reversed.appending(character)\n\
    \        } else {\n            reversed = reversed.appending(character).reversed()\n\
    \            if longestPalindromeLength < reversed.count {\n                longestPalindrome\
    \ = reversed\n                longestPalindromeLength = reversed.count\n     \
    \       }\n        }\n    }\n\n    return longestPalindrome", "    if string ==\
    \ \"\" {\n        return \"\"\n    }\n    var reversed = string\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    for index in 0..<string.count\
    \ {\n        let currentChar = string[index]\n        if currentChar == string[index.reversed]\
    \ {\n            reversed = reversed.dropLast()\n            longestPalindrome\
    \ = longestPalindrome.appending(string[index.reversed])\n            longestPalindromeLength\
    \ = longestPalindromeLength + index\n        }\n    }\n    if longestPalindromeLength\
    \ > longestPalindrome.count {\n        return \"\"\n    }\n    return longestPalindrome",
  "    if string == \"\" {\n        return \"\"\n    }\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = string.length\n    var longestPalindromeIndex\
    \ = longestPalindrome.length - 1\n    for index in 0..<longestPalindromeIndex\
    \ {\n        let char = string[index]\n        let reversedChar = reverseString(char)\n\
    \        if reversedChar == char {\n            longestPalindromeLength -= 1\n\
    \        } else {\n            longestPalindrome = longestPalindrome[longestPalindromeIndex..<longestPalindromeIndex\
    \ - 1] + reverseString(char) + longestPalindrome[longestPalindromeIndex..<longestPalindromeIndex]\n\
    \            longestPalindromeLength = longestPalindrome.length\n            longestPalindromeIndex\
    \ = longestPalindrome.length - 1\n        }\n    }\n    return longestPalindrome",
  "    if string == \"\" {\n        return \"\"\n    }\n    var reversed = \"\"\n\
    \    var longest = 0\n    for c in string {\n        if c != string[longest] {\n\
    \            longest = longest\n        } else {\n            longest = longest\
    \ + 1\n        }\n    }\n    for c in string {\n        reversed = reversed +\
    \ string[longest-longest-1] + c\n    }\n    return reversed", "    var result\
    \ = \"\"\n    var longestPalindrome = \"\"\n    for char in string {\n       \
    \ if char == char.lowercased() {\n            longestPalindrome = char\n     \
    \   }\n    }\n    for char in string {\n        if char == char.lowercased() {\n\
    \            result += char\n        }\n    }\n    result += longestPalindrome\n\
    \    for char in string {\n        if char == char.lowercased() {\n          \
    \  result += char\n        }\n    }\n    return result", "    var result = \"\"\
    \n    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    for\
    \ character in string {\n        if character == character {\n            result\
    \ += character\n            continue\n        }\n        if longestPalindromeLength\
    \ < character.count {\n            longestPalindrome = character\n           \
    \ longestPalindromeLength = character.count\n        }\n    }\n    if longestPalindromeLength\
    \ == 0 {\n        return result\n    }\n    var reversedString = \"\"\n    for\
    \ character in string {\n        reversedString += character\n    }\n    reversedString\
    \ = reversedString[longestPalindromeLength..<reversedString.count]\n    result\
    \ += reversedString\n    return result", "    var longestPalindrome = string\n\
    \    var longestPalindromeLength = longestPalindrome.characters.count\n    var\
    \ longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\n   \
    \ var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    for character in string.characters {\n        if character == longestPalindrome[longestPalindromeLength]\
    \ {\n            longestPalindromeLength += 1\n            longestPalindromeSuffix\
    \ += String(character)\n            longestPalindromeSuffixLength += 1\n     \
    \   } else {\n            if longestPalindromeLength > longestPalindromePrefixLength\
    \ {\n                longestPalindromePrefix = String(character)\n           \
    \     longestPalindromePrefixLength += 1\n            }\n            if longestPalindromeLength\
    \ > longestPalindromeSuffixLength {\n                longestPalindromeSuffix =\
    \ String(character)\n                longestPalindromeSuffixLength += 1\n    \
    \        }\n        }\n    }\n    if longestPalindromeLength > longestPalindromePrefixLength\
    \ {\n        longestPalindrome = longestPalindromePrefix + String(reverseString(longestPalindromeSuffix))\n\
    \    }\n    return longestPalindrome", "    var longestPalindrome = \"\"\n   \
    \ var longestPalindromeLength = 0\n    for character in string {\n        if character\
    \ == character {\n            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome.length {\n                longestPalindrome = string\n \
    \           }\n        } else {\n            longestPalindromeLength = 0\n   \
    \     }\n    }\n    return longestPalindrome", "    let longestPalindrome = longestPalindrome(string:\
    \ string)\n    let reversedLongestPalindrome = reverseString(string: longestPalindrome)\n\
    \    return string + reversedLongestPalindrome", "    if string == \"\" {\n  \
    \      return \"\"\n    }\n\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeStart = 0\n    var longestPalindromeEnd = string.length\n\
    \n    for start in 0..<longestPalindromeEnd {\n        var end = start\n     \
    \   var palindrome = string[start:end]\n\n        while end < longestPalindromeEnd\
    \ {\n            end += 1\n            if palindrome != string[start:end] {\n\
    \                break\n            }\n        }\n\n        if end > longestPalindromeEnd\
    \ {\n            break\n        }\n\n        longestPalindromeLength += 1\n  \
    \      longestPalindromeStart = start\n        longestPalindromeEnd = end\n  \
    \      longestPalindrome = palindrome\n    }\n\n    if longestPalindromeLength\
    \ > longestPalindromeEnd {\n        return \"\"\n    }\n\n    var reversedString\
    \ = string[longestPalindromeStart..<longestPalindromeEnd]\n    reversedString\
    \ = reversedString.reverse()\n\n    return string + reversedString", "    var\
    \ result = \"\"\n    var longestPalindrome = \"\"\n    for char in string {\n\
    \        if char == char.lowercased() {\n            result += char\n        }\n\
    \    }\n    for char in string {\n        if char == char.lowercased() {\n   \
    \         result += char\n        }\n        if char == char.uppercased() {\n\
    \            result += char\n        }\n    }\n    for char in string {\n    \
    \    if char == char.lowercased() {\n            result += char\n        }\n \
    \       if char == char.uppercased() {\n            result += char\n        }\n\
    \        if char == char.capitalized() {\n            result += char\n       \
    \ }\n    }\n    for char in string {\n        if char == char.lowercased() {\n\
    \            result += char\n        }\n        if char == char.uppercased() {\n\
    \            result += char\n        }\n        if char == char.capitalized()\
    \ {\n            result += char\n        }\n        if char == char.numeric()\
    \ {\n            result += char\n        }\n    }\n    for char in string {\n\
    \        if char == char.lowercased() {\n            result += char\n        }\n\
    \        if char == char.uppercased() {\n            result += char\n        }\n\
    \        if char == char.capitalized() {\n            result += char\n       \
    \ }\n        if char == char.numeric() {\n            result += char\n       \
    \ }\n        if char == char.numeric(from: 2) {\n            result += char\n\
    \        }\n    }\n    for char in string {\n        if char == char.lowercased()\
    \ {\n            result += char\n        }\n        if char == char.uppercased()\
    \ {\n            result += char\n        }\n        if char == char.capitalized()\
    \ {\n            result += char\n        }\n        if char == char.numeric()\
    \ {\n            result += char\n        }\n        if char == char.numeric(from:\
    \ 2) {\n            result += char\n        }\n        if char == char.numeric(from:\
    \ 3) {\n            result += char\n        }\n    }\n    for char in string {\n\
    \        if char == char.lowercased() {\n            result += char\n        }\n\
    \        if char == char.uppercased() {\n            result += char\n        }\n\
    \        if char == char.capitalized() {\n            result += char\n       \
    \ }\n        if char == char.numeric() {\n            result += char\n       \
    \ }\n        if char == char.numeric(from: 2) {\n            result += char\n\
    \        }\n        if char == char.numeric(from: 3) {\n            result +=\
    \ char\n        }\n        if char == char.numeric(from: 4) {\n            result\
    \ += char\n        }\n    }\n    for char in string {\n        if char == char.lowercased()\
    \ {\n            result += char\n        }\n        if ", "    if string == \"\
    \" {\n        return \"\"\n    }\n    var longestPalindrome = string\n    var\
    \ longestPalindromeLength = string.length\n    var longestPalindromePrefix = \"\
    \"\n    var longestPalindromeSuffix = \"\"\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    for i := 0; i < longestPalindromeLength;\
    \ i++ {\n        var isPalindrome = true\n        var currentChar = string[i]\n\
    \        var currentCharLength = string.length\n        for j := i + 1; j < longestPalindromeLength;\
    \ j++ {\n            if currentChar == string[j] {\n                currentCharLength--\n\
    \            } else {\n                isPalindrome = false\n                break\n\
    \            }\n        }\n        if isPalindrome {\n            if longestPalindromeLength\
    \ < currentCharLength {\n                longestPalindrome = string\n        \
    \        longestPalindromeLength = currentCharLength\n                longestPalindromePrefix\
    \ = string\n                longestPalindromePrefixLength = i\n              \
    \  longestPalindromeSuffix = string\n                longestPalindromeSuffixLength\
    \ = j\n            }\n        }\n    }\n    if longestPalindromeLength == 0 {\n\
    \        return \"\"\n    }\n    var longestPalindromePrefix = string\n    var\
    \ longestPalindromeSuffix = string\n    var longestPalindromePrefixLength = 0\n\
    \    var longestPalindromeSuffixLength = 0\n    for i := 0; i < longestPalindromeLength;\
    \ i++ {\n        var isPalindrome = true\n        var currentChar = string[i]\n\
    \        var currentCharLength = string.length\n        for j := i + 1; j < longestPalindromeLength;\
    \ j++ {\n            if currentChar == string[j] {\n                currentCharLength--\n\
    \            } else {\n                isPalindrome = false\n                break\n\
    \            }\n        }\n        if isPalindrome {\n            if longestPalindromeLength\
    \ < currentCharLength {\n                longestPalindromePrefix = string\n  \
    \              longestPalindromePrefixLength = i\n                longestPalindromeSuffix\
    \ = string\n                longestPalindromeSuffixLength = j\n            }\n\
    \        }\n    }\n    return longestPalindromePrefix + string[longestPalindromePrefixLength..<longestPalindromeSuffixLength]\
    \ + longestPalindromeSuffix", "    if string == \"\" {\n        return \"\"\n\
    \    }\n    var reversed = \"\"\n    var longestPalindrome = \"\"\n    for letter\
    \ in string {\n        reversed = letter + reversed\n        if longestPalindrome\
    \ == \"\" {\n            longestPalindrome = reversed\n        }\n        if longestPalindrome\
    \ == reversed {\n            longestPalindrome = reversed\n        }\n    }\n\
    \    return longestPalindrome", "\tlet reverse = string.reversed()\n\tlet prefix\
    \ = string.prefix(string.reversed())\n\treturn prefix + reverse", "    let reversedString\
    \ = string.reversed()\n    let prefixString = reversedString.prefix(string: string)\n\
    \    let suffixString = reversedString.suffix(string: string)\n    return prefixString\
    \ + suffixString", "    var result = \"\"\n    var longest = 0\n    for c in string\
    \ {\n        if c != string[longest] {\n            longest = longest\n      \
    \  } else {\n            longest = longest + 1\n        }\n    }\n    for i :=\
    \ 0; i < longest; i++ {\n        result = result + string[longest-i-1]\n    }\n\
    \    result = result + string[longest]\n    return result", "    if string ==\
    \ \"\" {\n        return \"\"\n    }\n    var reversedString = string\n    var\
    \ longestPalindromicSuffix = \"\"\n    var longestPalindromicPrefixLength = 0\n\
    \    for _ in 0..<string.count {\n        let currentChar = string[string.startIndex]\n\
    \        let currentCharIndex = string.index(string.startIndex, offsetBy: 1)\n\
    \        let currentCharLength = string.distance(from: currentCharIndex, to: currentChar)\n\
    \        if currentChar == string[currentCharIndex] {\n            longestPalindromicSuffix\
    \ += string[currentCharIndex]\n            longestPalindromicPrefixLength += currentCharLength\n\
    \        } else {\n            if longestPalindromicPrefixLength > longestPalindromicSuffix.count\
    \ {\n                reversedString += string[currentCharIndex..<currentCharIndex+currentCharLength]\n\
    \                longestPalindromicSuffix = string[currentCharIndex]\n       \
    \         longestPalindromicPrefixLength = currentCharLength\n            } else\
    \ {\n                reversedString += string[currentCharIndex..<currentCharIndex+currentCharLength]\n\
    \                longestPalindromicSuffix += string[currentCharIndex]\n      \
    \          longestPalindromicPrefixLength += currentCharLength\n            }\n\
    \        }\n    }\n    return reversedString", "\tlet reverse = string.reversed()\n\
    \tlet prefix = string.prefix(string.reversed())\n\treturn prefix + reverse", " \
    \   var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromeStart = 0\n    var longestPalindromeEnd = 0\n    var longestPalindromePalindrome\
    \ = \"\"\n    var longestPalindromePalindromeLength = 0\n    var longestPalindromePalindromeStart\
    \ = 0\n    var longestPalindromePalindromeEnd = 0\n    var longestPalindromePalindromePalindrome\
    \ = \"\"\n    var longestPalindromePalindromePalindromeLength = 0\n    var longestPalindromePalindromePalindromeStart\
    \ = 0\n    var longestPalindromePalindromePalindromeEnd = 0\n    var longestPalindromePalindromePalindromePalindrome\
    \ = \"\"\n    var longestPalindromePalindromePalindromePalindromeLength = 0\n\
    \    for start in 0..<string.characters.count {\n        var end = start\n   \
    \     var palindrome = string[start..<end]\n        var palindromeLength = palindrome.characters.count\n\
    \        var palindromeStart = start\n        var palindromeEnd = end\n      \
    \  var palindromePalindrome = palindrome\n        var palindromePalindromeLength\
    \ = palindromeLength\n        var palindromePalindromeStart = start\n        var\
    \ palindromePalindromeEnd = end\n        var palindromePalindromePalindrome =\
    \ palindromePalindrome\n        var palindromePalindromePalindromeLength = palindromePalindromeLength\n\
    \        var palindromePalindromePalindromeStart = start\n        var palindromePalindromePalindromeEnd\
    \ = end\n        var palindromePalindromePalindromePalindrome = palindromePalindromePalindrome\n\
    \        var palindromePalindromePalindromePalindromeLength = palindromePalindromePalindromeLength\n\
    \        var palindromePalindromePalindromePalindromeStart = start\n        var\
    \ palindromePalindromePalindromePalindromeEnd = end\n        var palindromePalindromePalindromePalindromePalindrome\
    \ = palindromePalin", "    if string == \"\" {\n        return \"\"\n    }\n \
    \   var reversed = \"\"\n    var longest = 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] != string[longest] {\n            longest = i\n\
    \        }\n    }\n    for i := 0; i < len(string); i++ {\n        if string[i]\
    \ != string[longest] {\n            reversed = reversed[0:longest] + string[i]\
    \ + reversed[longest+1:]\n            break\n        }\n    }\n    return reversed",
  "    var result = \"\"\n    var longestPalindrome = \"\"\n    for character in string\
    \ {\n        if character == character {\n            result += character\n  \
    \      } else {\n            if longestPalindrome == \"\" {\n                longestPalindrome\
    \ = character\n            } else {\n                longestPalindrome += character\n\
    \            }\n        }\n    }\n    if longestPalindrome == \"\" {\n       \
    \ return result\n    }\n    for character in string {\n        if character ==\
    \ character {\n            result += character\n        } else {\n           \
    \ result += longestPalindrome\n            longestPalindrome = \"\"\n        }\n\
    \    }\n    return result", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    for c in string {\n        if c == longestPalindrome {\n       \
    \     result += string[string.startIndex.advancedBy(longestPalindrome.startIndex)]\n\
    \        } else {\n            result += c\n        }\n        longestPalindrome\
    \ = longestPalindrome.successor()\n    }\n    return result", "    if string ==\
    \ \"\" {\n        return \"\"\n    }\n    var reverse = \"\"\n    var longestPalindrome\
    \ = \"\"\n    for i := 0; i < len(string); i++ {\n        var prefix = string[i..<i]\n\
    \        var suffix = string[i..<i+1]\n        if isPalindrome(prefix) && isPalindrome(suffix)\
    \ {\n            longestPalindrome = longestPalindrome[..<longestPalindrome.count-1]\
    \ + prefix + suffix\n            reverse = reverse[..<reverse.count-1] + prefix\
    \ + suffix\n        }\n    }\n    return longestPalindrome", "    if string ==\
    \ \"\" {\n        return \"\"\n    }\n    var longestPalindrome = string\n   \
    \ var longestPalindromeLength = string.length\n    var longestPalindromePrefix\
    \ = \"\"\n    var longestPalindromeSuffix = \"\"\n    var longestPalindromePostfix\
    \ = \"\"\n    var longestPalindromePostfixLength = string.length\n    var longestPalindromePostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixSuffix = \"\"\n    var longestPalindromePostfixPostfix\
    \ = \"\"\n    var longestPalindromePostfixPostfixLength = string.length\n    var\
    \ longestPalindromePostfixPostfixPrefix = \"\"\n    var longestPalindromePostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfix = \"\"\n    var longestPalindromePostfixPostfixPostfixLength\
    \ = string.length\n    var longestPalindromePostfixPostfixPostfixPrefix = \"\"\
    \n    var longestPalindromePostfixPostfixPostfixSuffix = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixLength = string.length\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPrefix = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfix = \"\"\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixLength = string.length\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix = \"\"\n \
    \   var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix = \"\"\n  \
    \  var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix = \"\"\n  \
    \  var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength = string.length\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPrefix = \"\
    \"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = string.length\n    var longestPalindromePostfixPostfixPostfixPost", "    var\
    \ longestPalindrome = string\n    var longestPalindromeLength = longestPalindrome.characters.count\n\
    \    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\
    \n    var longestPalindromeSuffixLength = 0\n    for character in string.characters\
    \ {\n        if character == longestPalindrome[longestPalindromeLength] {\n  \
    \          longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindromeSuffixLength {\n                longestPalindromeSuffix =\
    \ String(character)\n                longestPalindromeSuffixLength = longestPalindromeSuffix.characters.count\n\
    \            }\n        } else {\n            longestPalindromeLength = 0\n  \
    \          longestPalindromePrefix = String(character)\n            longestPalindromeSuffixLength\
    \ = 0\n        }\n    }\n    if longestPalindromeLength > longestPalindromeSuffixLength\
    \ {\n        longestPalindromeSuffix = String(longestPalindrome[longestPalindromeLength..<longestPalindromeSuffixLength])\n\
    \    }\n    return longestPalindromePrefix + longestPalindromeSuffix", "    if\
    \ string == \"\" {\n        return \"\"\n    }\n    var reverse = \"\"\n    var\
    \ longest = 0\n    for i := 0; i < len(string); i++ {\n        if string[i] !=\
    \ string[longest] {\n            longest = i\n        }\n    }\n    for i := 0;\
    \ i < longest; i++ {\n        reverse += string[i]\n    }\n    reverse += string[longest]\n\
    \    return reverse", "    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = longestPalindrome.characters.count\n    var longestPalindromePrefix = \"\"\
    \n    var longestPalindromeSuffix = \"\"\n    for character in string {\n    \
    \    if character == longestPalindrome[longestPalindromeLength-1] {\n        \
    \    longestPalindromeLength--\n        } else {\n            longestPalindromePrefix\
    \ = character\n            longestPalindromeSuffix = character\n            longestPalindromeLength\
    \ = 1\n        }\n    }\n    for character in string {\n        if character ==\
    \ longestPalindromePrefix[longestPalindromeLength] {\n            longestPalindromeLength++\n\
    \        } else {\n            longestPalindromeSuffix += character\n        }\n\
    \    }\n    return longestPalindromePrefix + longestPalindromeSuffix + longestPalindrome[longestPalindromeLength..<longestPalindrome.characters.count]",
  "    var result = \"\"\n    var longestPalindrome = \"\"\n    for char in string\
    \ {\n        if char == char.lowercased() {\n            result += char\n    \
    \    } else {\n            result += char.lowercased()\n        }\n    }\n   \
    \ for char in string {\n        if char == char.lowercased() {\n            longestPalindrome\
    \ += char\n        } else {\n            longestPalindrome += char.lowercased()\n\
    \        }\n    }\n    if longestPalindrome == \"\" {\n        return result\n\
    \    }\n    if longestPalindrome == result {\n        return result\n    }\n \
    \   if longestPalindrome == result.reverse() {\n        return result\n    }\n\
    \    if longestPalindrome == result.reverse().lowercased() {\n        return result\n\
    \    }\n    if longestPalindrome == result.reverse().lowercased().reverse() {\n\
    \        return result\n    }\n    if longestPalindrome == result.reverse().lowercased().reverse().lowercased()\
    \ {\n        return result\n    }\n    if longestPalindrome == result.reverse().lowercased().reverse().lowercased().reverse()\
    \ {\n        return result\n    }\n    if longestPalindrome == result.reverse().lowercased().reverse().lowercased().reverse().lowercased()\
    \ {\n        return result\n    }\n    if longestPalindrome == result.reverse().lowercased().reverse().lowercased().reverse().lowercased().reverse()\
    \ {\n        return result\n    }\n    if longestPalindrome == result.reverse().lowercased().reverse().lowercased().reverse().lowercased().reverse().lowercased()\
    \ {\n        return result\n    }\n    if longestPalindrome == result.reverse().lowercased().reverse().lowercased().reverse().lowercased().reverse().lowercased().reverse()\
    \ {\n        return result\n    }\n    if longestPalindrome == result.reverse().lowercased().reverse().lowercased().reverse().lowercased().reverse().lowercased().reverse().lowercased()\
    \ {\n        return result\n    }\n    if longestPalindrome == result.reverse().lowercased().reverse().lowercased().reverse().lowercased().reverse().lowercased().reverse().lowercased().reverse()\
    \ {\n        return result\n    }\n    if longestPalindrome == result.reverse().lowercased().reverse().lowercased().reverse().lowercased().reverse().lowercased().reverse().lowercased().reverse().lowercased()\
    \ {\n        return result\n    }\n    if longestPalindrome == result.reverse().lowercased().reverse().lowercased().reverse().lowercased().reverse().lowercased().reverse().lowercased().reverse().lowercased()\
    \ {\n        return result\n    }\n    if longestPalindrome == result.reverse",
  "\tlet maxPalindrome = longestPalindrome(string: string)\n\tlet reversedString =\
    \ reverseString(string: string)\n\tlet prefixString = reversedString.prefix(string:\
    \ maxPalindrome)\n\treturn reversedString.append(prefixString)", "    if string\
    \ == \"\" {\n        return \"\"\n    }\n    var longestPalindrome = string\n\
    \    var longestPalindromeLength = 0\n    var longestPalindromePrefix = \"\"\n\
    \    var longestPalindromeSuffix = \"\"\n    var longestPalindromeReverse = \"\
    \"\n    for character in string {\n        if character == character {\n     \
    \       longestPalindromeLength += 1\n        } else {\n            if longestPalindromeLength\
    \ > longestPalindromeLength {\n                longestPalindrome = longestPalindromePrefix\n\
    \                longestPalindromeLength = longestPalindromeLength\n         \
    \       longestPalindromePrefix = \"\"\n                longestPalindromeSuffix\
    \ = \"\"\n                longestPalindromeReverse = \"\"\n            }\n   \
    \         longestPalindromeLength = 1\n            longestPalindromePrefix = character\n\
    \        }\n    }\n    if longestPalindromeLength > longestPalindromeLength {\n\
    \        longestPalindrome = longestPalindromePrefix\n        longestPalindromeLength\
    \ = longestPalindromeLength\n        longestPalindromePrefix = \"\"\n        longestPalindromeSuffix\
    \ = \"\"\n        longestPalindromeReverse = \"\"\n    }\n    for character in\
    \ string {\n        if character == character {\n            longestPalindromeLength\
    \ += 1\n        } else {\n            if longestPalindromeLength > longestPalindromeLength\
    \ {\n                longestPalindrome = longestPalindromeSuffix\n           \
    \     longestPalindromeLength = longestPalindromeLength\n                longestPalindromePrefix\
    \ = \"\"\n                longestPalindromeSuffix = \"\"\n                longestPalindromeReverse\
    \ = \"\"\n            }\n            longestPalindromeLength = 1\n           \
    \ longestPalindromeSuffix = character\n        }\n    }\n    if longestPalindromeLength\
    \ > longestPalindromeLength {\n        longestPalindrome = longestPalindromeSuffix\n\
    \        longestPalindromeLength = longestPalindromeLength\n        longestPalindromePrefix\
    \ = \"\"\n        longestPalindromeSuffix = \"\"\n        longestPalindromeReverse\
    \ = \"\"\n    }\n    for character in string {\n        if character == character\
    \ {\n            longestPalindromeLength += 1\n        } else {\n            if\
    \ longestPalindromeLength > longestPalindromeLength {\n                longestPalindrome\
    \ = longestPalindromeReverse\n                longestPalindromeLength = longestP",
  "    var reverse = \"\"\n    var longest = \"\"\n    for c in string {\n       \
    \ if c != string[string.index(string.startIndex, offsetBy: -1)] {\n          \
    \  longest = longest.prefix(longest.count).append(c)\n        } else {\n     \
    \       longest = longest.prefix(longest.count).append(c)\n        }\n    }\n\
    \    for c in string {\n        if c != string[string.index(string.startIndex,\
    \ offsetBy: -1)] {\n            reverse = reverse.prefix(reverse.count).append(c)\n\
    \        } else {\n            reverse = reverse.prefix(reverse.count).append(c)\n\
    \        }\n    }\n    return longest.prefix(longest.count).append(reverse)",
  "    var result = \"\"\n    var longestPalindrome = \"\"\n    for char in string\
    \ {\n        if char == char.lowercased() {\n            longestPalindrome +=\
    \ char\n        }\n    }\n    for char in longestPalindrome {\n        if char\
    \ == char.lowercased() {\n            result += char\n        }\n    }\n    for\
    \ char in string {\n        if char == char.lowercased() {\n            result\
    \ += char\n        }\n    }\n    return result", "    let maxLength: Int = string.count\n\
    \    let maxLengthOfLongestPalindrome = maxLength\n    let maxLengthOfLongestPalindromeSuffix\
    \ = maxLength\n    let maxLengthOfLongestPalindromePrefix = 0\n    let maxLengthOfLongestPalindromeSuffixSuffix\
    \ = 0\n    let maxLengthOfLongestPalindromeSuffixSuffixSuffix = 0\n    let maxLengthOfLongestPalindromeSuffixSuffixSuffixSuffix\
    \ = 0\n    let maxLengthOfLongestPalindromeSuffixSuffixSuffixSuffixSuffix = 0\n\
    \    let maxLengthOfLongestPalindromeSuffixSuffixSuffixSuffixSuffixSuffix = 0\n\
    \    let maxLengthOfLongestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffix\
    \ = 0\n    let maxLengthOfLongestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\
    \ = 0\n    let maxLengthOfLongestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\
    \ = 0\n    let maxLengthOfLongestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\
    \ = 0\n    let maxLengthOfLongestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\
    \ = 0\n    let maxLengthOfLongestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\
    \ = 0\n    let maxLengthOfLongestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\
    \ = 0\n    let maxLengthOfLongestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\
    \ = 0\n    let maxLengthOfLongestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\
    \ = 0\n    let maxLengthOfLongestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\
    \ = 0\n    let maxLengthOfLongestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\
    \ = 0\n    let maxLengthOfLongestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\
    \ = 0\n    let maxLengthOfLongestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\
    \ = 0\n    let maxLengthOfLongestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\
    \ = 0\n    let maxLengthOfLongestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\
    \ = 0\n    let maxLengthOfLongestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\
    \ = 0\n    let maxLengthOfLongestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffix",
  "    var result = \"\"\n    var start = 0\n    var end = string.characters.count\n\
    \    var longest = 0\n    var longestStart = 0\n    var longestEnd = 0\n    var\
    \ longestString = \"\"\n    var longestStringStart = 0\n    var longestStringEnd\
    \ = 0\n\n    while start < end {\n        var currentChar = string.characters[start]\n\
    \        var nextChar = string.characters[start+1]\n\n        if currentChar ==\
    \ nextChar {\n            start += 1\n            continue\n        }\n\n    \
    \    if currentChar == \" \" {\n            start += 1\n            continue\n\
    \        }\n\n        if currentChar == \"-\" {\n            start += 1\n    \
    \        continue\n        }\n\n        if currentChar == \"-\" {\n          \
    \  start += 1\n            continue\n        }\n\n        if currentChar == \"\
    \ \" {\n            start += 1\n            continue\n        }\n\n        if\
    \ currentChar == \"-\" {\n            start += 1\n            continue\n     \
    \   }\n\n        if currentChar == \" \" {\n            start += 1\n         \
    \   continue\n        }\n\n        if currentChar == \" \" {\n            start\
    \ += 1\n            continue\n        }\n\n        if currentChar == \" \" {\n\
    \            start += 1\n            continue\n        }\n\n        if currentChar\
    \ == \" \" {\n            start += 1\n            continue\n        }\n\n    \
    \    if currentChar == \" \" {\n            start += 1\n            continue\n\
    \        }\n\n        if currentChar == \" \" {\n            start += 1\n    \
    \        continue\n        }\n\n        if currentChar == \" \" {\n          \
    \  start += 1\n            continue\n        }\n\n        if currentChar == \"\
    \ \" {\n            start += 1\n            continue\n        }\n\n        if\
    \ currentChar == \" \" {\n            start += 1\n            continue\n     \
    \   }\n\n        if currentChar == \" \" {\n            start += 1\n         \
    \   continue\n        }\n\n        if currentChar == \" \" {\n            start\
    \ += 1\n            continue\n        }\n\n        if currentChar == \" \" {\n\
    \            start += 1\n            continue\n        }\n\n        if currentChar\
    \ == \" \" {\n            start += 1\n            continue\n        }\n\n    \
    \    if currentChar == \" \" {\n            start += 1\n            continue\n\
    \        }\n\n        if currentChar == \" \" {\n            start += 1\n    \
    \        continue\n        }\n\n        if currentChar == \" \" {\n          \
    \  start += 1\n            continue\n        }\n\n        if currentChar == \"\
    \ \" {\n            start += 1\n            continue\n        }\n\n        if\
    \ currentChar == \" \" {\n            start += 1\n            continue\n     \
    \   }\n\n        if currentChar == \" \" {\n            start += 1\n         \
    \   continue\n        }\n\n        if currentChar == \" \" {\n            start\
    \ += 1\n            continue\n        }\n\n        if currentChar == \" \" {\n\
    \            start += 1\n            continue\n        }\n\n        if currentChar\
    \ == \" \" {\n", "    var result = \"\"\n    var longest = 0\n    for c in string\
    \ {\n        if c != string[longest] {\n            longest = longest\n      \
    \  } else {\n            longest = longest + 1\n        }\n    }\n    for i :=\
    \ longest - 1; i >= 0; i-- {\n        result = result + string[i]\n    }\n   \
    \ return result", "    if string == \"\" {\n        return \"\"\n    }\n    var\
    \ reverse = \"\"\n    var longestPalindrome = \"\"\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] != string[len(string)-i-1] {\n            if longest\
    \ := len(longestPalindrome); longest > 0 {\n                reverse = reverse[longestPalindrome:longestPalindrome+longest]\n\
    \            }\n            longestPalindrome = i\n        }\n    }\n    reverse\
    \ = reverse[longestPalindrome:longestPalindrome+longest]\n    return reverse",
  "    var reverse = \"\"\n    var longest = \"\"\n    for char in string {\n    \
    \    reverse = char + reverse\n        if longest == \"\" || reverse == reverse\
    \ {\n            longest = char\n        }\n    }\n    return longest + reverse",
  "    var result = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefixLength = 0\n    for prefixLength in 0..<string.count\
    \ {\n        let prefix = String(string.prefix(upTo: prefixLength))\n        let\
    \ suffix = String(string.suffix(from: prefixLength))\n        let reversedSuffix\
    \ = String(suffix.reversed())\n        if prefix != suffix {\n            if longestPalindromeLength\
    \ < prefixLength {\n                longestPalindrome = prefix\n             \
    \   longestPalindromeLength = prefixLength\n                longestPalindromePrefixLength\
    \ = prefixLength\n            }\n            if longestPalindromeLength < suffixLength\
    \ {\n                longestPalindrome = suffix\n                longestPalindromeLength\
    \ = suffixLength\n                longestPalindromePrefixLength = prefixLength\n\
    \            }\n            if longestPalindromeLength == prefixLength && longestPalindromePrefixLength\
    \ == suffixLength {\n                if prefix != reversedSuffix {\n         \
    \           result = prefix + reversedSuffix\n                    break\n    \
    \            }\n            }\n        }\n    }\n    return result", "    var\
    \ result = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeStart = 0\n    for start in 0..<string.count {\n\
    \        var currentPalindrome = \"\"\n        var currentPalindromeLength = 0\n\
    \        var currentPalindromeStart = 0\n        for end in 0..<string.count {\n\
    \            if end < start {\n                continue\n            }\n     \
    \       var currentChar = string[end]\n            var currentCharLength = string[end].count\n\
    \            var currentCharStart = string[start]\n            var currentCharStartLength\
    \ = string[start].count\n            if currentCharLength > currentPalindromeLength\
    \ {\n                currentPalindrome = string[start:end]\n                currentPalindromeLength\
    \ = currentCharLength\n                currentPalindromeStart = currentCharStart\n\
    \                currentPalindromeStartLength = currentCharStartLength\n     \
    \       }\n        }\n        if currentPalindromeLength > longestPalindromeLength\
    \ {\n            longestPalindrome = currentPalindrome\n            longestPalindromeLength\
    \ = currentPalindromeLength\n            longestPalindromeStart = currentPalindromeStart\n\
    \            longestPalindromeStartLength = currentPalindromeStartLength\n   \
    \     }\n    }\n    if longestPalindromeLength > 0 {\n        result = string[longestPalindromeStart..<longestPalindromeStart+longestPalindromeLength]\n\
    \    }\n    return result", "    if string == \"\" {\n        return \"\"\n  \
    \  }\n\n    // Find longest postfix that is a palindrome\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = longestPalindrome.characters.count\n\
    \    for index in 0..<longestPalindromeLength {\n        if longestPalindrome[index]\
    \ != longestPalindrome[longestPalindromeLength - 1 - index] {\n            longestPalindromeLength\
    \ = longestPalindromeLength - 1\n        } else {\n            break\n       \
    \ }\n    }\n\n    // Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix\n    var reversedString = \"\"\n  \
    \  for index in 0..<longestPalindromeLength {\n        reversedString = reversedString\
    \ + longestPalindrome[longestPalindromeLength - 1 - index]\n    }\n\n    // Append\
    \ the palindrome to the end of the string\n    return string + reversedString",
  "    var result = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for letter in string {\n        if letter == letter {\n           \
    \ result += letter\n        }\n        if letter == string[string.index(letter,\
    \ offsetBy: 1)] {\n            longestPalindrome = letter\n            longestPalindromeLength\
    \ += 1\n        }\n    }\n    if longestPalindromeLength > 1 {\n        let reversedString\
    \ = string.reversed()\n        let prefixString = reversedString.prefix(longestPalindromeLength)\n\
    \        let suffixString = reversedString.suffix(longestPalindromeLength)\n \
    \       result = prefixString + longestPalindrome + suffixString\n    }\n    return\
    \ result", "    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefix: String = \"\"\n    for char in string\
    \ {\n        if char == char.lowercased() {\n            longestPalindromeLength\
    \ += 1\n            if longestPalindromeLength > longestPalindromePrefix.count\
    \ {\n                longestPalindromePrefix = String(char.lowercased())\n   \
    \             longestPalindromeLength = longestPalindromePrefix.count\n      \
    \      }\n        } else {\n            longestPalindromeLength = 0\n        \
    \    longestPalindromePrefix = \"\"\n        }\n    }\n    if longestPalindromeLength\
    \ > longestPalindrome.count {\n        longestPalindrome = String(char.lowercased())\n\
    \    }\n    return longestPalindromePrefix + String(reverse(string: longestPalindrome))",
  "    var longestPalindrome = string\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromePrefix = \"\"\n    for char in string {\n        if char ==\
    \ char.lowercased() {\n            longestPalindromeLength += 1\n            if\
    \ longestPalindromeLength > longestPalindromeLength {\n                longestPalindrome\
    \ = longestPalindromePrefix\n                longestPalindromeLength = longestPalindromeLength\n\
    \            }\n        } else {\n            longestPalindromeLength = 0\n  \
    \          longestPalindromePrefix = char\n        }\n    }\n    return longestPalindrome",
  "\tlet reversed = string.reversed()\n\tlet prefix = reversed.prefix(string: string)\n\
    \tlet suffix = reversed.suffix(string: string)\n\treturn prefix + suffix", " \
    \   var result = string\n    var longestPalindrome = string\n    for _ in 0..<string.count\
    \ {\n        let longestPalindromeIndex = longestPalindrome.index(longestPalindrome.startIndex,\
    \ offsetBy: longestPalindrome.count - 1)\n        let longestPalindromeSuffix\
    \ = longestPalindrome[longestPalindromeIndex..<longestPalindrome.count]\n    \
    \    let longestPalindromePrefix = longestPalindrome[..longestPalindromeIndex]\n\
    \        let longestPalindromeReversedSuffix = longestPalindromeSuffix.reversed()\n\
    \        let longestPalindromeReversedPrefix = longestPalindromePrefix.reversed()\n\
    \        if longestPalindromeSuffix == longestPalindromeReversedSuffix {\n   \
    \         result = result.replacingOccurrences(of: longestPalindromePrefix, with:\
    \ longestPalindromeReversedPrefix)\n        }\n    }\n    return result", "  \
    \  var reversed = string\n    var longestPalindrome = string\n    for _ in 0..<string.count\
    \ {\n        let reversedSubstring = reversed\n        let longestPalindromeSubstring\
    \ = longestPalindrome\n        let reversedSubstringReversed = reversedSubstring.reversed()\n\
    \        if longestPalindromeSubstring == reversedSubstringReversed {\n      \
    \      longestPalindrome = longestPalindromeSubstring + reversedSubstring\n  \
    \      } else {\n            longestPalindrome = longestPalindromeSubstring\n\
    \        }\n    }\n    return longestPalindrome", "\tlet reversedString = string.reversed()\n\
    \tlet prefixString = reversedString.prefix(string: string)\n\treturn prefixString\
    \ + reversedString", "    var result = \"\"\n    var longestPalindrome = string\n\
    \    var longestPalindromeLength = 0\n    var longestPalindromeIndex = 0\n   \
    \ for index in 0..<string.count {\n        let currentChar = string[index]\n \
    \       let currentCharLength = currentChar.count\n        if currentCharLength\
    \ > longestPalindromeLength {\n            longestPalindrome = string\n      \
    \      longestPalindromeLength = currentCharLength\n            longestPalindromeIndex\
    \ = index\n        }\n    }\n    if longestPalindromeLength == 0 {\n        return\
    \ string\n    }\n    let reversedString = string.reversed()\n    let reversedStringLength\
    \ = reversedString.count\n    if reversedStringLength > longestPalindromeLength\
    \ {\n        return string\n    }\n    if longestPalindromeLength == 0 {\n   \
    \     return string\n    }\n    if longestPalindromeLength == 1 {\n        return\
    \ string\n    }\n    if longestPalindromeLength == 2 {\n        return string\
    \ + reversedString\n    }\n    if longestPalindromeLength == 3 {\n        return\
    \ string + reversedString + reversedString\n    }\n    if longestPalindromeLength\
    \ == 4 {\n        return string + reversedString + reversedString + reversedString\n\
    \    }\n    if longestPalindromeLength == 5 {\n        return string + reversedString\
    \ + reversedString + reversedString + reversedString\n    }\n    if longestPalindromeLength\
    \ == 6 {\n        return string + reversedString + reversedString + reversedString\
    \ + reversedString + reversedString\n    }\n    if longestPalindromeLength ==\
    \ 7 {\n        return string + reversedString + reversedString + reversedString\
    \ + reversedString + reversedString + reversedString\n    }\n    if longestPalindromeLength\
    \ == 8 {\n        return string + reversedString + reversedString + reversedString\
    \ + reversedString + reversedString + reversedString + reversedString\n    }\n\
    \    if longestPalindromeLength == 9 {\n        return string + reversedString\
    \ + reversedString + reversedString + reversedString + reversedString + reversedString\
    \ + reversedString + reversedString\n    }\n    if longestPalindromeLength ==\
    \ 10 {\n        return string + reversedString + reversedString + reversedString\
    \ + reversedString + reversedString + reversedString + reversedString + reversedString\
    \ + reversedString\n    }\n    if longestPalindromeLength == 11 {\n        return\
    \ string + ", "    let longestPalindrome = longestPalindrome(string: string)\n\
    \    let longestPalindromeSuffix = longestPalindromeSuffix(longestPalindrome:\
    \ string)\n    let longestPalindromeSuffix = longestPalindromeSuffix.reversed()\n\
    \    let longestPalindromeSuffix = longestPalindromeSuffix.appending(longestPalindromeSuffix)\n\
    \    return longestPalindrome", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    for character in string {\n        if character == character {\n\
    \            result += character\n            continue\n        }\n        if\
    \ character == longestPalindrome[longestPalindrome.count-1] {\n            result\
    \ += character\n            continue\n        }\n        if longestPalindrome.count\
    \ > 0 {\n            result += longestPalindrome\n        }\n        longestPalindrome\
    \ = character\n    }\n    if longestPalindrome.count > 0 {\n        result +=\
    \ longestPalindrome\n    }\n    return result", "    var result = \"\"\n    var\
    \ longestPalindrome = \"\"\n    for letter in string {\n        if letter == letter\
    \ {\n            result += letter\n        }\n        if letter != letter {\n\
    \            longestPalindrome += letter\n        }\n    }\n    for letter in\
    \ string {\n        if letter != letter {\n            result += letter\n    \
    \    }\n        if letter == letter {\n            result += longestPalindrome\n\
    \        }\n    }\n    return result", "    var palindrome = \"\"\n    var longestPalindrome\
    \ = \"\"\n    for character in string {\n        if character == character {\n\
    \            palindrome += character\n        }\n    }\n    for character in string\
    \ {\n        if character == character {\n            palindrome += character\n\
    \        }\n        if character == palindrome[longestPalindrome.characters.count-1]\
    \ {\n            longestPalindrome += character\n        }\n    }\n    return\
    \ longestPalindrome + palindrome", "\tlet length = string.characters.count\n\t\
    let reverse = string.characters.reverse()\n\tlet prefix = reverse.prefix(length)\n\
    \tlet suffix = reverse.suffix(length)\n\treturn prefix + suffix", "\tlet reversed\
    \ = string.reversed()\n\tlet prefix = string.prefix(string.reversed())\n\treturn\
    \ prefix + reversed", "    if string == \"\" {\n        return \"\"\n    }\n \
    \   \n    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n\
    \    var longestPalindromePrefix = \"\"\n    \n    for char in string {\n    \
    \    if char == char.lowercased() {\n            longestPalindromeLength += 1\n\
    \            longestPalindromePrefix = char\n        }\n    }\n    \n    if longestPalindromeLength\
    \ > longestPalindromePrefix.count {\n        longestPalindrome = longestPalindromePrefix\
    \ + String(reversedString: longestPalindromePrefix.prefix(upTo: longestPalindromeLength))\n\
    \    } else {\n        longestPalindrome = string\n    }\n    \n    return longestPalindrome",
  "    var result = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeStart = 0\n    for start in 0..<string.count {\n\
    \        var current = string[start]\n        var nextPalindrome = \"\"\n    \
    \    var nextPalindromeLength = 0\n        var nextPalindromeStart = 0\n     \
    \   for end in start..<string.count {\n            if string[end] != current {\n\
    \                nextPalindrome = string[end..<end].reversed()\n             \
    \   nextPalindromeLength = end - start\n                nextPalindromeStart =\
    \ end\n            }\n            current = string[end]\n        }\n        if\
    \ nextPalindromeLength > longestPalindromeLength {\n            longestPalindrome\
    \ = nextPalindrome\n            longestPalindromeLength = nextPalindromeLength\n\
    \            longestPalindromeStart = nextPalindromeStart\n        }\n    }\n\
    \    if longestPalindromeLength == 0 {\n        return result\n    }\n    result\
    \ += string[longestPalindromeStart..<longestPalindromeStart+longestPalindromeLength]\n\
    \    return result", "\tlet maxLen = string.count\n\tlet maxIndex = string.startIndex\n\
    \tlet maxPalindrome = string\n\n\tlet minIndex = maxIndex\n\tlet minPalindrome\
    \ = string\n\n\twhile minIndex < maxIndex {\n\t\tlet minIndex = maxIndex\n\t\t\
    let minPalindrome = string\n\n\t\tlet minIndex = maxIndex\n\t\tlet minPalindrome\
    \ = string\n\n\t\tlet minIndex = maxIndex\n\t\tlet minPalindrome = string\n\n\t\
    \tlet minIndex = maxIndex\n\t\tlet minPalindrome = string\n\n\t\tlet minIndex\
    \ = maxIndex\n\t\tlet minPalindrome = string\n\n\t\tlet minIndex = maxIndex\n\t\
    \tlet minPalindrome = string\n\n\t\tlet minIndex = maxIndex\n\t\tlet minPalindrome\
    \ = string\n\n\t\tlet minIndex = maxIndex\n\t\tlet minPalindrome = string\n\n\t\
    \tlet minIndex = maxIndex\n\t\tlet minPalindrome = string\n\n\t\tlet minIndex\
    \ = maxIndex\n\t\tlet minPalindrome = string\n\n\t\tlet minIndex = maxIndex\n\t\
    \tlet minPalindrome = string\n\n\t\tlet minIndex = maxIndex\n\t\tlet minPalindrome\
    \ = string\n\n\t\tlet minIndex = maxIndex\n\t\tlet minPalindrome = string\n\n\t\
    \tlet minIndex = maxIndex\n\t\tlet minPalindrome = string\n\n\t\tlet minIndex\
    \ = maxIndex\n\t\tlet minPalindrome = string\n\n\t\tlet minIndex = maxIndex\n\t\
    \tlet minPalindrome = string\n\n\t\tlet minIndex = maxIndex\n\t\tlet minPalindrome\
    \ = string\n\n\t\tlet minIndex = maxIndex\n\t\tlet minPalindrome = string\n\n\t\
    \tlet minIndex = maxIndex\n\t\tlet minPalindrome = string\n\n\t\tlet minIndex\
    \ = maxIndex\n\t\tlet minPalindrome = string\n\n\t\tlet minIndex = maxIndex\n\t\
    \tlet minPalindrome = string\n\n\t\tlet minIndex = maxIndex\n\t\tlet minPalindrome\
    \ = string\n\n\t\tlet minIndex = maxIndex\n\t\tlet minPalindrome = string\n\n\t\
    \tlet minIndex = maxIndex\n\t\tlet minPalindrome = string\n\n\t\tlet minIndex\
    \ = maxIndex\n\t\tlet minPalindrome = string\n\n\t\tlet minIndex = maxIndex\n\t\
    \tlet minPalindrome = string\n\n\t\tlet minIndex = maxIndex\n\t\tlet minPalindrome\
    \ = string\n\n\t\t", "    var result = \"\"\n    var longestPalindrome = \"\"\n\
    \    for char in string {\n        if char == char.lowercased() {\n          \
    \  result += char\n        }\n    }\n    for char in string {\n        if char\
    \ == char.lowercased() {\n            result += char\n        }\n    }\n    for\
    \ char in string {\n        if char == char.lowercased() {\n            result\
    \ += char\n        }\n    }\n    for char in string {\n        if char == char.lowercased()\
    \ {\n            result += char\n        }\n    }\n    for char in string {\n\
    \        if char == char.lowercased() {\n            result += char\n        }\n\
    \    }\n    for char in string {\n        if char == char.lowercased() {\n   \
    \         result += char\n        }\n    }\n    for char in string {\n       \
    \ if char == char.lowercased() {\n            result += char\n        }\n    }\n\
    \    for char in string {\n        if char == char.lowercased() {\n          \
    \  result += char\n        }\n    }\n    for char in string {\n        if char\
    \ == char.lowercased() {\n            result += char\n        }\n    }\n    for\
    \ char in string {\n        if char == char.lowercased() {\n            result\
    \ += char\n        }\n    }\n    for char in string {\n        if char == char.lowercased()\
    \ {\n            result += char\n        }\n    }\n    for char in string {\n\
    \        if char == char.lowercased() {\n            result += char\n        }\n\
    \    }\n    for char in string {\n        if char == char.lowercased() {\n   \
    \         result += char\n        }\n    }\n    for char in string {\n       \
    \ if char == char.lowercased() {\n            result += char\n        }\n    }\n\
    \    for char in string {\n        if char == char.lowercased() {\n          \
    \  result += char\n        }\n    }\n    for char in string {\n        if char\
    \ == char.lowercased() {\n            result += char\n        }\n    }\n    for\
    \ char in string {\n        if char == char.lowercased() {\n            result\
    \ += char\n        }\n    }\n    for char in string {\n        if char == char.lowercased()\
    \ {\n            result += char\n        }\n    }\n    for char in string {\n\
    \        if char == char.lowercased() {\n            result += char\n        }\n\
    \    }\n    for char in string {\n        if char == char.lowercased() {\n   \
    \         result += char\n        }\n    }\n    for char in string {\n       \
    \ if char == char.lowercased() {\n            result += char\n        }\n    }\n\
    \    for char in string {\n        if char == char.lowercased() {\n          \
    \  result += char\n        }\n    }\n    for char in string {\n        if char\
    \ == char.lowercased() {\n            result += ", "    var result = \"\"\n  \
    \  var longest = 0\n    for c in string {\n        if c != string[longest] {\n\
    \            longest = longest\n        } else {\n            longest = longest\
    \ + 1\n        }\n    }\n    for i := longest - 1; i >= 0; i-- {\n        result\
    \ = result + string[i]\n    }\n    return result", "\tlet length = string.characters.count\n\
    \tlet reverse = string.reverse()\n\tlet prefix = reverse.substringToIndex(advance(string.startIndex,\
    \ length))\n\tlet suffix = reverse.substringFromIndex(advance(string.startIndex,\
    \ length))\n\treturn prefix + suffix", "    var reverse = \"\"\n    var longest\
    \ = \"\"\n    for c in string {\n        reverse = reverse.stringByAppendingString(String(c.reversed()))\n\
    \        longest = longest.stringByAppendingString(String(c.reversed()))\n   \
    \ }\n    return longest.stringByAppendingString(reverse)", "    var result = \"\
    \"\n    var longestPalindrome = \"\"\n    for character in string {\n        if\
    \ character == character {\n            longestPalindrome += character\n     \
    \   }\n    }\n    for character in string {\n        if character == character\
    \ {\n            result += longestPalindrome\n            longestPalindrome =\
    \ \"\"\n        }\n    }\n    result += longestPalindrome\n    return result",
  "    var result = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix\
    \ = \"\"\n    for i := 0; i < len(string); i++ {\n        if string[i] == string[len(string)-1-i]\
    \ {\n            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindromeLength {\n                longestPalindrome = string\n  \
    \              longestPalindromeLength = longestPalindromeLength\n           \
    \     longestPalindromePrefix = string[0:i]\n                longestPalindromeSuffix\
    \ = string[i:]\n            }\n        }\n    }\n    if longestPalindromeLength\
    \ == 0 {\n        return \"\"\n    }\n    if longestPalindromeLength > 1 {\n \
    \       result = longestPalindromePrefix + string[0:longestPalindromeLength-1]\
    \ + longestPalindromeSuffix\n    }\n    return result", "    if string == \"\"\
    \ {\n        return \"\"\n    }\n    var reversed = \"\"\n    var longest = 0\n\
    \    for i := 0; i < len(string); i++ {\n        if string[i] != string[longest]\
    \ {\n            longest = i\n        }\n    }\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] != string[longest] {\n            reversed = reversed\
    \ + string[i]\n        }\n    }\n    return reversed + string[longest]", "   \
    \ if string == \"\" {\n        return \"\"\n    }\n    var longestPalindrome =\
    \ string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix:\
    \ String = string\n    var longestPalindromeSuffix: String = string\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    for index in 0..<string.count\
    \ {\n        let currentChar = string[index]\n        if currentChar == string[index]\
    \ {\n            continue\n        }\n        let currentCharLength = currentChar.count\n\
    \        if currentCharLength > longestPalindromeLength {\n            longestPalindrome\
    \ = string\n            longestPalindromeLength = currentCharLength\n        \
    \    longestPalindromePrefix = string\n            longestPalindromePrefixLength\
    \ = currentCharLength\n            longestPalindromeSuffix = string\n        \
    \    longestPalindromeSuffixLength = currentCharLength\n        }\n        if\
    \ currentCharLength == longestPalindromeLength {\n            if currentChar ==\
    \ string[index] {\n                continue\n            }\n            if currentCharLength\
    \ > longestPalindromePrefixLength {\n                longestPalindromePrefix =\
    \ string\n                longestPalindromePrefixLength = currentCharLength\n\
    \            }\n            if currentCharLength > longestPalindromeSuffixLength\
    \ {\n                longestPalindromeSuffix = string\n                longestPalindromeSuffixLength\
    \ = currentCharLength\n            }\n        }\n    }\n    if longestPalindromeLength\
    \ == 0 {\n        return \"\"\n    }\n    if longestPalindromePrefixLength ==\
    \ 0 {\n        return longestPalindrome\n    }\n    if longestPalindromeSuffixLength\
    \ == 0 {\n        return longestPalindromePrefix + longestPalindrome\n    }\n\
    \    if longestPalindromePrefixLength > longestPalindromeSuffixLength {\n    \
    \    return longestPalindromePrefix + make_palindrome(string: longestPalindromeSuffix)\n\
    \    }\n    return longestPalindromePrefix + longestPalindrome", "    var result\
    \ = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    for length in string.characters.reverse() {\n        if length == 0\
    \ {\n            continue\n        }\n        var palindrome = string\n      \
    \  for _ in 0..<length {\n            palindrome += string[longestPalindromeLength]\n\
    \        }\n        if palindrome == longestPalindrome {\n            longestPalindromeLength\
    \ += 1\n        } else {\n            longestPalindrome = palindrome\n       \
    \     longestPalindromeLength = length\n        }\n    }\n    if longestPalindromeLength\
    \ > 0 {\n        result += string[longestPalindromeLength..<string.characters.count]\n\
    \    }\n    return result", "\tlet reverse = string.reversed()\n\tlet prefix =\
    \ string.prefix(string.reversed())\n\treturn prefix + reverse", "    var result\
    \ = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength =\
    \ 0\n    for character in string {\n        if character == character {\n    \
    \        result += character\n            continue\n        }\n        if longestPalindromeLength\
    \ < character.count {\n            longestPalindrome = character\n           \
    \ longestPalindromeLength = character.count\n        }\n    }\n    for character\
    \ in string {\n        if character == character {\n            result += character\n\
    \            continue\n        }\n        if longestPalindromeLength < character.count\
    \ {\n            longestPalindrome = character\n            longestPalindromeLength\
    \ = character.count\n        }\n    }\n    for character in string {\n       \
    \ if character == character {\n            result += character\n            continue\n\
    \        }\n        if longestPalindromeLength < character.count {\n         \
    \   longestPalindrome = character\n            longestPalindromeLength = character.count\n\
    \        }\n    }\n    for character in string {\n        if character == character\
    \ {\n            result += character\n            continue\n        }\n      \
    \  if longestPalindromeLength < character.count {\n            longestPalindrome\
    \ = character\n            longestPalindromeLength = character.count\n       \
    \ }\n    }\n    for character in string {\n        if character == character {\n\
    \            result += character\n            continue\n        }\n        if\
    \ longestPalindromeLength < character.count {\n            longestPalindrome =\
    \ character\n            longestPalindromeLength = character.count\n        }\n\
    \    }\n    for character in string {\n        if character == character {\n \
    \           result += character\n            continue\n        }\n        if longestPalindromeLength\
    \ < character.count {\n            longestPalindrome = character\n           \
    \ longestPalindromeLength = character.count\n        }\n    }\n    for character\
    \ in string {\n        if character == character {\n            result += character\n\
    \            continue\n        }\n        if longestPalindromeLength < character.count\
    \ {\n            longestPalindrome = character\n            longestPalindromeLength\
    \ = character.count\n        }\n    }\n    for character in string {\n       \
    \ if character == character {\n            result += character\n            continue\n\
    \        }\n        if longestPalindromeLength < character.count {\n         \
    \   longestPalindrome = character\n            longestPalindromeLength = character.count\n\
    \        }\n    }\n    for character in string {\n        if character == character\
    \ {\n            result += character\n            continue\n        }\n      \
    \  if longestPalindromeLength < character.count {\n            longestPalindrome\
    \ = character\n            longestPalindromeLength = character.count\n", "   \
    \ var result = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeStart = 0\n    for c in string {\n        if isPalindrome(c)\
    \ {\n            if longestPalindromeLength < len(c) - 1 {\n                longestPalindromeLength\
    \ = len(c) - 1\n                longestPalindromeStart = longestPalindromeLength\n\
    \            }\n        }\n    }\n    if longestPalindromeLength == 0 {\n    \
    \    return result\n    }\n    for c in string {\n        if isPalindrome(c) {\n\
    \            if longestPalindromeLength < len(c) - 1 {\n                longestPalindromeLength\
    \ = len(c) - 1\n                longestPalindromeStart = longestPalindromeLength\n\
    \            }\n        }\n    }\n    if longestPalindromeLength == 0 {\n    \
    \    return result\n    }\n    for c in string {\n        if isPalindrome(c) {\n\
    \            if longestPalindromeLength < len(c) - 1 {\n                longestPalindromeLength\
    \ = len(c) - 1\n                longestPalindromeStart = longestPalindromeLength\n\
    \            }\n        }\n    }\n    if longestPalindromeLength == 0 {\n    \
    \    return result\n    }\n    for c in string {\n        if isPalindrome(c) {\n\
    \            if longestPalindromeLength < len(c) - 1 {\n                longestPalindromeLength\
    \ = len(c) - 1\n                longestPalindromeStart = longestPalindromeLength\n\
    \            }\n        }\n    }\n    if longestPalindromeLength == 0 {\n    \
    \    return result\n    }\n    for c in string {\n        if isPalindrome(c) {\n\
    \            if longestPalindromeLength < len(c) - 1 {\n                longestPalindromeLength\
    \ = len(c) - 1\n                longestPalindromeStart = longestPalindromeLength\n\
    \            }\n        }\n    }\n    if longestPalindromeLength == 0 {\n    \
    \    return result\n    }\n    for c in string {\n        if isPalindrome(c) {\n\
    \            if longestPalindromeLength < len(c) - 1 {\n                longestPalindromeLength\
    \ = len(c) - 1\n                longestPalindromeStart = longestPalindromeLength\n\
    \            }\n        }\n    }\n    if longestPalindromeLength == 0 {\n    \
    \    return result\n    }\n    for c in string {\n        if isPalindrome(c) {\n\
    \            if longestPalindromeLength < len(c) - 1 {\n                longestPalindromeLength\
    \ = len(c) - 1\n                longestPalindromeStart = longestPalindrome", " \
    \   var result = \"\"\n    var longest = 0\n    for i := 0; i < len(string); i++\
    \ {\n        if string[i] != string[longest] {\n            longest = i\n    \
    \    }\n    }\n    for i := 0; i < len(string); i++ {\n        if i == longest\
    \ {\n            result += string[i]\n        } else {\n            result +=\
    \ string[i] + string[longest]\n        }\n    }\n    return result", "    var\
    \ result = \"\"\n    var longestPalindrome = \"\"\n    for letter in string {\n\
    \        if letter == letter {\n            result += letter\n        } else {\n\
    \            if longestPalindrome == \"\" {\n                longestPalindrome\
    \ = letter\n            } else {\n                result += longestPalindrome\
    \ + letter\n            }\n        }\n    }\n    if longestPalindrome == \"\"\
    \ {\n        return result\n    }\n    result += longestPalindrome\n    return\
    \ result", "\tlet reverse = string.reversed()\n\tlet longestPalindrome = longestPalindromeFrom(string:\
    \ reverse)\n\treturn string + longestPalindrome", "    if string == \"\" {\n \
    \       return \"\"\n    }\n\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeIndex = 0\n    var longestPalindromePrefix = \"\
    \"\n\n    for index in 0..<string.count {\n        let currentChar = string[index]\n\
    \        let currentCharLength = currentChar.count\n\n        if currentCharLength\
    \ > longestPalindromeLength {\n            longestPalindromeLength = currentCharLength\n\
    \            longestPalindromeIndex = index\n            longestPalindromePrefix\
    \ = string[index..<longestPalindromeIndex]\n        }\n\n        if currentCharLength\
    \ == longestPalindromeLength {\n            if currentChar == longestPalindromePrefix[longestPalindromeIndex]\
    \ {\n                longestPalindrome = string[index..<longestPalindromeIndex]\
    \ + string[longestPalindromeIndex..<string.count]\n            }\n        }\n\
    \    }\n\n    return longestPalindrome", "    var reversed = \"\"\n    var longest\
    \ = \"\"\n    for letter in string {\n        if letter == letter.reversed() {\n\
    \            longest = letter\n        } else {\n            reversed = reversed\
    \ + letter\n        }\n    }\n    return reversed + longest", "\tlet reversedString\
    \ = reverseString(string)\n\tlet prefixString = reversedString.prefix(string:\
    \ string)\n\tlet suffixString = reversedString.suffix(string: string)\n\treturn\
    \ prefixString + suffixString", "    let reversedString = reverseString(string)\n\
    \    let prefixString = string.prefix(string: reversedString)\n    let suffixString\
    \ = string.suffix(string: reversedString)\n    return prefixString + suffixString",
  "    if string == \"\" {\n        return \"\"\n    }\n    var reversedString = string\n\
    \    var longestPalindrome = string\n    for index in 0..<string.count {\n   \
    \     let reversedIndex = reversedString.index(of: string[index])\n        reversedString\
    \ = reversedString.substring(to: reversedIndex!)\n        if longestPalindrome.count\
    \ < reversedString.count {\n            longestPalindrome = reversedString\n \
    \       }\n    }\n    return longestPalindrome", "    let longestPalindrome =\
    \ longestPalindrome(string: string)\n    let reversedString = reverseString(string:\
    \ string)\n    return longestPalindrome + reversedString", "    if string == \"\
    \" {\n        return \"\"\n    }\n\n    var longestPalindrome = string\n    var\
    \ longestPalindromeLength = 0\n\n    for i := 0; i < len(string); i++ {\n    \
    \    var currentPalindrome = string\n        var currentPalindromeLength = 0\n\
    \n        for j := 0; j < len(string); j++ {\n            if string[j] != string[i]\
    \ {\n                break\n            }\n            currentPalindromeLength\
    \ += 1\n            currentPalindrome += string[j].unicodeScalars\n        }\n\
    \n        if currentPalindromeLength > longestPalindromeLength {\n           \
    \ longestPalindrome = currentPalindrome\n            longestPalindromeLength =\
    \ currentPalindromeLength\n        }\n    }\n\n    return longestPalindrome +\
    \ string[longestPalindromeLength...reverse(longestPalindrome).startIndex]", " \
    \   var reverse = \"\"\n    var longest = \"\"\n    for c in string {\n      \
    \  reverse = c + reverse\n        if longest.characters.count < reverse.characters.count\
    \ {\n            longest = reverse\n        }\n    }\n    return string + longest",
  "    if string == \"\" {\n        return \"\"\n    }\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength\
    \ = 0\n    for index in 0..<string.characters.count {\n        let char = string.characters[index]\n\
    \        if char == char.lowercased().first {\n            longestPalindromeLength\
    \ += 1\n            if longestPalindromeLength > longestPalindromePrefixLength\
    \ {\n                longestPalindromePrefixLength = longestPalindromeLength\n\
    \            }\n        }\n    }\n    if longestPalindromeLength > longestPalindromePrefixLength\
    \ {\n        longestPalindrome = string.reversed()\n    }\n    return longestPalindrome",
  "    if string == \"\" {\n        return \"\"\n    }\n    var reversed = \"\"\n\
    \    var longestPalindrome = \"\"\n    for character in string {\n        reversed\
    \ = reversed! + String(character)\n        if longestPalindrome == \"\" {\n  \
    \          longestPalindrome = reversed\n        }\n        if longestPalindrome\
    \ == reversed {\n            longestPalindrome = longestPalindrome + String(character)\n\
    \        }\n    }\n    return longestPalindrome", "    var longestPalindrome =\
    \ string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromePrefixIndex = 0\n    var longestPalindromeSuffixChar\
    \ = string[longestPalindromeSuffixIndex]\n    var longestPalindromePrefixChar\
    \ = string[longestPalindromePrefixIndex]\n    var longestPalindromeLength = 0\n\
    \    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromeSuffixIndex = 0\n    var longestPalindromePrefixIndex\
    \ = 0\n    var longestPalindromeSuffixChar = string[longestPalindromeSuffixIndex]\n\
    \    var longestPalindromePrefixChar = string[longestPalindromePrefixIndex]\n\
    \    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength =\
    \ 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromePrefixIndex = 0\n    var longestPalindromeSuffixChar\
    \ = string[longestPalindromeSuffixIndex]\n    var longestPalindromePrefixChar\
    \ = string[longestPalindromePrefixIndex]\n    var longestPalindromeLength = 0\n\
    \    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromeSuffixIndex = 0\n    var longestPalindromePrefixIndex\
    \ = 0\n    var longestPalindromeSuffixChar = string[longestPalindromeSuffixIndex]\n\
    \    var longestPalindromePrefixChar = string[longestPalindromePrefixIndex]\n\
    \    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength =\
    \ 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromePrefixIndex = 0\n    var longestPalindromeSuffixChar\
    \ = string[longestPalindromeSuffixIndex]\n    var longestPalindromePrefixChar\
    \ = string[longestPalindromePrefixIndex]\n    var longestPalindromeLength = 0\n\
    \    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromeSuffixIndex = 0\n    var longestPalindromePrefixIndex\
    \ = 0\n    var longestPalindromeSuffixChar = string[longestPalindromeSuffixIndex]\n",
  "    var result = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeIndex = 0\n    var longestPalindromeIndexStart\
    \ = 0\n    var longestPalindromeIndexEnd = 0\n    var longestPalindromeIndexStartReverse\
    \ = 0\n    var longestPalindromeIndexEndReverse = 0\n    var longestPalindromeIndexStartReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n   \
    \ var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n   \
    \ var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n   \
    \ var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n   \
    \ var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n   \
    \ var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse",
  "    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength = 0\n\
    \    var longestPalindromeSuffixIndex = 0\n    var longestPalindromePrefixIndex\
    \ = 0\n    var longestPalindromePrefixString = \"\"\n    var longestPalindromeSuffixString\
    \ = \"\"\n    var longestPalindromeString = \"\"\n    var longestPalindromeStringLength\
    \ = 0\n    var longestPalindromeStringPrefixLength = 0\n    var longestPalindromeStringSuffixLength\
    \ = 0\n    var longestPalindromeStringSuffixIndex = 0\n    var longestPalindromeStringPrefixIndex\
    \ = 0\n    var longestPalindromeStringPrefixString = \"\"\n    var longestPalindromeStringSuffixString\
    \ = \"\"\n    var longestPalindromeStringString = \"\"\n    var longestPalindromeStringStringLength\
    \ = 0\n    var longestPalindromeStringStringPrefixLength = 0\n    var longestPalindromeStringStringSuffixLength\
    \ = 0\n    var longestPalindromeStringStringSuffixIndex = 0\n    var longestPalindromeStringStringPrefixIndex\
    \ = 0\n    var longestPalindromeStringStringPrefixString = \"\"\n    var longestPalindromeStringStringSuffixString\
    \ = \"\"\n    var longestPalindromeStringStringString = \"\"\n    var longestPalindromeStringStringStringLength\
    \ = 0\n    var longestPalindromeStringStringStringPrefixLength = 0\n    var longestPalindromeStringStringStringSuffixLength\
    \ = 0\n    var longestPalindromeStringStringStringSuffixIndex = 0\n    var longestPalindromeStringStringStringPrefixIndex\
    \ = 0\n    var longestPalindromeStringStringStringPrefixString = \"\"\n    var\
    \ longestPalindromeStringStringStringSuffixString = \"\"\n    var longestPalindromeStringStringStringString\
    \ = \"\"\n    var longestPalindromeStringStringStringStringLength = 0\n    var\
    \ longestPalindromeStringStringStringStringPrefixLength = 0\n    var longestPalindromeStringStringStringStringSuffixLength\
    \ = 0\n    var longestPalindromeStringStringStringStringSuffixIndex = 0\n    var\
    \ longestPalindromeStringStringStringStringPrefixIndex = 0\n    var longestPalindromeStringStringStringStringPrefixString\
    \ = \"\"\n    var longestPalindromeStringStringStringSuffixString = \"\"\n   \
    \ var longestPalindromeStringStringStringString = \"\"\n    var longestPalindromeStringStringStringStringLength\
    \ = 0\n    var longestPalindromeStringStringStringStringPrefixLength = 0\n   \
    \ var longestPalindromeStringStringString", "    var result = string\n    var\
    \ longestPalindrome = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromePrefixIndex = 0\n    var longestPalindromeSuffixChar\
    \ = string[0]\n    var longestPalindromePrefixChar = string[0]\n    var longestPalindromePrefixCharIndex\
    \ = longestPalindromePrefixLength\n    var longestPalindromeSuffixCharIndex =\
    \ longestPalindromeSuffixLength\n    var longestPalindromeSuffixChar = string[0]\n\
    \    var longestPalindromeSuffixCharIndex = longestPalindromeSuffixLength\n  \
    \  var longestPalindromePrefixCharIndex = longestPalindromePrefixLength\n    var\
    \ longestPalindromeSuffixCharIndex = longestPalindromeSuffixLength\n    var longestPalindromePrefixChar\
    \ = string[0]\n    var longestPalindromePrefixCharIndex = longestPalindromePrefixLength\n\
    \    var longestPalindromeSuffixCharIndex = longestPalindromeSuffixLength\n  \
    \  var longestPalindromePrefixCharIndex = longestPalindromePrefixLength\n    var\
    \ longestPalindromeSuffixChar = string[0]\n    var longestPalindromeSuffixCharIndex\
    \ = longestPalindromeSuffixLength\n    var longestPalindromePrefixCharIndex =\
    \ longestPalindromePrefixLength\n    var longestPalindromeSuffixCharIndex = longestPalindromeSuffixLength\n\
    \    var longestPalindromePrefixChar = string[0]\n    var longestPalindromePrefixCharIndex\
    \ = longestPalindromePrefixLength\n    var longestPalindromeSuffixCharIndex =\
    \ longestPalindromeSuffixLength\n    var longestPalindromePrefixChar = string[0]\n\
    \    var longestPalindromePrefixCharIndex = longestPalindromePrefixLength\n  \
    \  var longestPalindromeSuffixCharIndex = longestPalindromeSuffixLength\n    var\
    \ longestPalindromePrefixChar = string[0]\n    var longestPalindromePrefixCharIndex\
    \ = longestPalindromePrefixLength\n    var longestPalindromeSuffixCharIndex =\
    \ longestPalindromeSuffixLength\n    var longestPalindromePrefixChar = string[0]\n\
    \    var longestPalindromePrefixCharIndex = longestPalindromePrefixLength\n  \
    \  var longestPalindromeSuffixCharIndex = longestPalindromeSuffixLength\n    var\
    \ longestPalindromePrefixChar = string[0]\n    var longestPalindromePrefix", " \
    \   if string == \"\" {\n        return \"\"\n    }\n\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeStartIndex\
    \ = 0\n    var longestPalindromeEndIndex = 0\n\n    for i := 0; i < len(string);\
    \ i++ {\n        longestPalindromeLength = 0\n        longestPalindromeStartIndex\
    \ = 0\n        longestPalindromeEndIndex = 0\n\n        for j := 0; j < len(string);\
    \ j++ {\n            if string[i] == string[j] {\n                longestPalindromeLength\
    \ += 1\n                if longestPalindromeLength > longestPalindromeEndIndex\
    \ {\n                    longestPalindromeEndIndex = j\n                }\n  \
    \              if longestPalindromeLength > longestPalindromeStartIndex {\n  \
    \                  longestPalindromeStartIndex = j\n                }\n      \
    \      }\n        }\n\n        if longestPalindromeLength > longestPalindromeEndIndex\
    \ {\n            longestPalindrome = string[:longestPalindromeStartIndex] + string[longestPalindromeEndIndex:longestPalindromeStartIndex]\
    \ + string[longestPalindromeStartIndex:longestPalindromeEndIndex]\n        }\n\
    \    }\n\n    return longestPalindrome", "\tlet reversedString = reverse(string:\
    \ string)\n\tlet prefixLength = string.count - reversedString.count\n\tlet postfix\
    \ = string[prefixLength..<string.count]\n\treturn string + reversedString + postfix",
  "    let reverse = string.reversed()\n    let prefix = string.prefix(string.reversed())\n\
    \    return prefix + reverse", "    var result = \"\"\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = longestPalindrome.characters.count\n\
    \    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\
    \n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    for character in string {\n        if character == longestPalindrome[longestPalindromeLength]\
    \ {\n            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindromePrefixLength {\n                longestPalindromePrefixLength\
    \ = longestPalindromeLength\n                longestPalindromePrefix = String(character)\n\
    \            }\n        } else {\n            longestPalindromeLength = 0\n  \
    \          longestPalindromePrefix = \"\"\n            longestPalindromeSuffix\
    \ = \"\"\n            longestPalindromePrefixLength = 0\n            longestPalindromeSuffixLength\
    \ = 0\n        }\n    }\n    for character in string {\n        if character ==\
    \ longestPalindrome[longestPalindromeLength] {\n            longestPalindromeLength\
    \ += 1\n            if longestPalindromeLength > longestPalindromeSuffixLength\
    \ {\n                longestPalindromeSuffixLength = longestPalindromeLength\n\
    \                longestPalindromeSuffix = String(character)\n            }\n\
    \        } else {\n            longestPalindromeLength = 0\n            longestPalindromePrefix\
    \ = \"\"\n            longestPalindromeSuffix = \"\"\n            longestPalindromePrefixLength\
    \ = 0\n            longestPalindromeSuffixLength = 0\n        }\n    }\n    if\
    \ longestPalindromeLength > 0 {\n        result = longestPalindromePrefix + String(reverseString(longestPalindromeSuffix))\n\
    \    }\n    return result", "    if string == \"\" {\n        return \"\"\n  \
    \  }\n    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n\
    \    var longestPalindromeStart = 0\n    for start in 0..<string.count {\n   \
    \     var currentPalindrome = \"\"\n        var currentPalindromeLength = 0\n\
    \        var currentPalindromeStart = 0\n        for end in 0..<string.count {\n\
    \            if end >= start {\n                currentPalindrome = string[start:end]\n\
    \                currentPalindromeLength = end - start\n                currentPalindromeStart\
    \ = start\n            }\n            if currentPalindromeLength > longestPalindromeLength\
    \ {\n                longestPalindrome = currentPalindrome\n                longestPalindromeLength\
    \ = currentPalindromeLength\n                longestPalindromeStart = currentPalindromeStart\n\
    \            }\n        }\n    }\n    return string[longestPalindromeStart..<longestPalindromeStart\
    \ + longestPalindromeLength]", "    if string == \"\" {\n        return \"\"\n\
    \    }\n    var longestPalindrome = string\n    var longestPalindromeLength =\
    \ 0\n    var longestPalindromePrefix: String = string\n    var longestPalindromeSuffix:\
    \ String = string\n    var longestPalindromePostfix: String = string\n    var\
    \ longestPalindromePostfixLength = 0\n    var longestPalindromePostfixPrefix:\
    \ String = string\n    var longestPalindromePostfixSuffix: String = string\n \
    \   var longestPalindromePostfixPostfix: String = string\n    var longestPalindromePostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPrefix: String = string\n    var\
    \ longestPalindromePostfixPostfixSuffix: String = string\n    var longestPalindromePostfixPostfixPostfix:\
    \ String = string\n    var longestPalindromePostfixPostfixPostfixLength = 0\n\
    \    var longestPalindromePostfixPostfixPostfixPrefix: String = string\n    var\
    \ longestPalindromePostfixPostfixPostfixSuffix: String = string\n    var longestPalindromePostfixPostfixPostfixPostfix:\
    \ String = string\n    var longestPalindromePostfixPostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPrefix: String = string\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixSuffix: String = string\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfix: String = string\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixLength = 0\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix: String = string\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix: String =\
    \ string\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix:\
    \ String = string\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPrefix:\
    \ String = string\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixSuffix:\
    \ String = string\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfix:\
    \ String = string\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n", "    var reverse = \"\"\n    var longest = \"\"\n    for c in string\
    \ {\n        if c != string[string.index(string.startIndex, offsetBy: -1)] {\n\
    \            longest = longest.prefix(longest.count - longest.distance(from: longest.startIndex,\
    \ to: longest.index(longest.startIndex, offsetBy: -1)))\n            reverse =\
    \ reverse + string[string.index(string.startIndex, offsetBy: -1)]\n        } else\
    \ {\n            longest = longest.prefix(longest.count - longest.distance(from:\
    \ longest.startIndex, to: longest.index(longest.startIndex, offsetBy: -1)))\n\
    \        }\n    }\n    return reverse + longest", "    if string == \"\" {\n \
    \       return \"\"\n    }\n    var palindrome = string\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLen = 0\n    var longestPalindromeStartIndex\
    \ = 0\n    for index in 0..<string.count {\n        let currentChar = string[index]\n\
    \        let currentCharIsPalindrome = currentChar == string.reversed()[index]\n\
    \        if currentCharIsPalindrome {\n            if longestPalindromeLen < index\
    \ {\n                longestPalindromeLen = index\n                longestPalindromeStartIndex\
    \ = index\n            }\n        } else {\n            if longestPalindromeLen\
    \ > index {\n                longestPalindromeLen = index\n                longestPalindromeStartIndex\
    \ = index\n            }\n        }\n    }\n    if longestPalindromeLen > longestPalindromeStartIndex\
    \ {\n        palindrome = string[longestPalindromeStartIndex..<longestPalindromeLen]\n\
    \    }\n    return palindrome", "    if string == \"\" {\n        return \"\"\n\
    \    }\n\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix\
    \ = \"\"\n\n    for character in string {\n        if character == character {\n\
    \            longestPalindromeLength += 1\n        } else {\n            if longestPalindromeLength\
    \ > longestPalindromeLength {\n                longestPalindrome = longestPalindromePrefix\n\
    \                longestPalindromeLength = longestPalindromeLength\n         \
    \       longestPalindromePrefix = \"\"\n                longestPalindromeSuffix\
    \ = \"\"\n            }\n\n            longestPalindromeLength = 1\n         \
    \   longestPalindromePrefix = character\n        }\n    }\n\n    if longestPalindromeLength\
    \ > longestPalindromeLength {\n        longestPalindrome = longestPalindromePrefix\n\
    \        longestPalindromeLength = longestPalindromeLength\n        longestPalindromePrefix\
    \ = \"\"\n        longestPalindromeSuffix = \"\"\n    }\n\n    if longestPalindromeLength\
    \ < 2 {\n        return string\n    }\n\n    var longestPalindromeReverse = \"\
    \"\n    for character in string {\n        longestPalindromeReverse = longestPalindromeReverse\
    \ + character\n    }\n\n    longestPalindrome = longestPalindromePrefix + longestPalindromeReverse\
    \ + longestPalindromeSuffix\n\n    return longestPalindrome", "\tlet reverse =\
    \ string.reversed()\n\tlet prefix = string.prefix(string.reversed())\n\treturn\
    \ prefix + reverse", "    if string == \"\" {\n        return \"\"\n    }\n  \
    \  var reversed = \"\"\n    var longest = 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] != string[longest] {\n            longest = i\n\
    \        }\n    }\n    for i := 0; i < len(string); i++ {\n        if string[i]\
    \ != string[longest] {\n            reversed = reversed + string[i]\n        }\
    \ else {\n            reversed = reversed + string[longest]\n            longest\
    \ = longest - 1\n        }\n    }\n    return reversed", "    let reversed = string.reversed()\n\
    \    let prefix = reversed.prefix(string: string)\n    let suffix = reversed.suffix(string:\
    \ string)\n    return prefix + suffix", "    var reversed = \"\"\n    var longest\
    \ = 0\n    for c in string {\n        if longest < len(string) - 1 {\n       \
    \     longest = len(string) - 1\n        }\n        if c == string[longest] {\n\
    \            longest--\n        } else {\n            reversed = reversed + string[longest]\n\
    \        }\n    }\n    return reversed + string[longest]", "    if string == \"\
    \" {\n        return \"\"\n    }\n    var reversedString = string\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength\
    \ = 0\n    for index in 0..<string.count {\n        let currentChar = string[index]\n\
    \        let currentCharIsPalindrome = currentChar == string.reversed()[index]\n\
    \        if currentCharIsPalindrome {\n            if longestPalindromeLength\
    \ < index {\n                longestPalindrome = string\n                longestPalindromeLength\
    \ = index\n                longestPalindromePrefixLength = index\n           \
    \ }\n        } else {\n            if longestPalindromePrefixLength < index {\n\
    \                longestPalindrome = string\n                longestPalindromeLength\
    \ = index\n                longestPalindromePrefixLength = index\n           \
    \ }\n        }\n    }\n    return longestPalindrome", "    var result = \"\"\n\
    \    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    for\
    \ character in string {\n        if character == character {\n            longestPalindromeLength\
    \ += 1\n            if longestPalindromeLength > longestPalindrome.length {\n\
    \                longestPalindrome = character\n            }\n        } else\
    \ {\n            if longestPalindromeLength > longestPalindromeLength {\n    \
    \            longestPalindromeLength = 0\n                longestPalindrome =\
    \ character\n            }\n        }\n    }\n    for character in string {\n\
    \        if character == character {\n            longestPalindromeLength += 1\n\
    \            if longestPalindromeLength > longestPalindrome.length {\n       \
    \         longestPalindrome = character\n            }\n        } else {\n   \
    \         if longestPalindromeLength > longestPalindromeLength {\n           \
    \     longestPalindromeLength = 0\n                longestPalindrome = character\n\
    \            }\n        }\n    }\n    for character in string {\n        if character\
    \ == character {\n            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome.length {\n                longestPalindrome = character\n\
    \            }\n        } else {\n            if longestPalindromeLength > longestPalindromeLength\
    \ {\n                longestPalindromeLength = 0\n                longestPalindrome\
    \ = character\n            }\n        }\n    }\n    for character in string {\n\
    \        if character == character {\n            longestPalindromeLength += 1\n\
    \            if longestPalindromeLength > longestPalindrome.length {\n       \
    \         longestPalindrome = character\n            }\n        } else {\n   \
    \         if longestPalindromeLength > longestPalindromeLength {\n           \
    \     longestPalindromeLength = 0\n                longestPalindrome = character\n\
    \            }\n        }\n    }\n    for character in string {\n        if character\
    \ == character {\n            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome.length {\n                longestPalindrome = character\n\
    \            }\n        } else {\n            if longestPalindromeLength > longestPalindromeLength\
    \ {\n                longestPalindromeLength = 0\n                longestPalindrome\
    \ = character\n            }\n        }\n    }\n    for character in string {\n\
    \        if character == character {\n            longestPalindromeLength += 1\n\
    \            if longestPalindromeLength > longestPalindrome.length {\n       \
    \         longestPalin", "    var result = \"\"\n    var longest = 0\n    for\
    \ c in string {\n        if c != string[longest] {\n            longest = longest\n\
    \        } else {\n            longest = longest + 1\n        }\n    }\n    for\
    \ i := longest - 1; i >= 0; i-- {\n        result = result + string[i]\n    }\n\
    \    return result", "    let reverse = string.reversed()\n    let prefix = string.prefix(string.reversed())\n\
    \    return prefix + reverse", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    for character in string {\n\
    \        if character == character {\n            longestPalindromeLength += 1\n\
    \            if longestPalindromeLength > longestPalindrome.length {\n       \
    \         longestPalindrome = string\n            }\n        } else {\n      \
    \      longestPalindromeLength = 0\n        }\n    }\n    if longestPalindromeLength\
    \ > longestPalindrome.length {\n        longestPalindrome = string\n    }\n  \
    \  for character in string {\n        if character == character {\n          \
    \  result += character\n        } else {\n            result += character + longestPalindrome[longestPalindrome.length\
    \ - longestPalindromeLength]\n        }\n    }\n    return result", "    var result\
    \ = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromeSuffixIndex = 0\n    var longestPalindromePrefixIndex\
    \ = 0\n    var longestPalindromeSuffixChar = string[longestPalindromeSuffixIndex]\n\
    \    var longestPalindromePrefixChar = string[longestPalindromePrefixIndex]\n\
    \    var longestPalindromePrefixCharIsUpper = false\n    var longestPalindromeSuffixCharIsUpper\
    \ = false\n    var longestPalindromePrefixCharIsUpper = false\n    var longestPalindromeSuffixCharIsUpper\
    \ = false\n    var longestPalindromePrefixCharIsUpper = false\n    var longestPalindromeSuffixCharIsUpper\
    \ = false\n    var longestPalindromePrefixCharIsUpper = false\n    var longestPalindromeSuffixCharIsUpper\
    \ = false\n    var longestPalindromePrefixCharIsUpper = false\n    var longestPalindromeSuffixCharIsUpper\
    \ = false\n    var longestPalindromePrefixCharIsUpper = false\n    var longestPalindromeSuffixCharIsUpper\
    \ = false\n    var longestPalindromePrefixCharIsUpper = false\n    var longestPalindromeSuffixCharIsUpper\
    \ = false\n    var longestPalindromePrefixCharIsUpper = false\n    var longestPalindromeSuffixCharIsUpper\
    \ = false\n    var longestPalindromePrefixCharIsUpper = false\n    var longestPalindromeSuffixCharIsUpper\
    \ = false\n    var longestPalindromePrefixCharIsUpper = false\n    var longestPalindromeSuffixCharIsUpper\
    \ = false\n    var longestPalindromePrefixCharIsUpper = false\n    var longestPalindromeSuffixCharIsUpper\
    \ = false\n    var longestPalindromePrefixCharIsUpper = false\n    var longestPalindromeSuffixCharIsUpper\
    \ = false\n    var longestPalindromePrefixCharIsUpper = false\n    var longestPalindromeSuffixCharIsUpper\
    \ = false\n    var longestPalindromePrefixCharIsUpper = false\n    var longestPalindromeSuffixCharIsUpper\
    \ = false\n    var longestPalindromePrefixCharIsUpper = false\n    var longestPalindromeSuffixCharIsUpper\
    \ = false\n    var longestPalindromePrefixCharIsUpper = false\n    var longestPalindromeSuffixCharIsUpper\
    \ = false\n    var longestPalindromePrefixCharIsUpper = false\n    var longestPalindromeSuffixCharIsUpper\
    \ = false\n    var longestPalin", "    var reverse = \"\"\n    var longest = \"\
    \"\n    for c in string {\n        reverse = c + reverse\n        if longest.characters.count\
    \ < reverse.characters.count {\n            longest = reverse\n        }\n   \
    \ }\n    return string + longest", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    for character in string {\n\
    \        if character == character {\n            longestPalindromeLength += 1\n\
    \            if longestPalindromeLength > longestPalindrome.length {\n       \
    \         longestPalindrome = character\n            }\n        } else {\n   \
    \         if longestPalindromeLength > longestPalindrome.length {\n          \
    \      longestPalindrome = character\n            }\n        }\n    }\n    for\
    \ character in string {\n        if character == character {\n            longestPalindromeLength\
    \ += 1\n            if longestPalindromeLength > longestPalindrome.length {\n\
    \                longestPalindrome = character\n            }\n        } else\
    \ {\n            if longestPalindromeLength > longestPalindrome.length {\n   \
    \             longestPalindrome = character\n            }\n        }\n    }\n\
    \    for character in string {\n        if character == character {\n        \
    \    longestPalindromeLength += 1\n            if longestPalindromeLength > longestPalindrome.length\
    \ {\n                longestPalindrome = character\n            }\n        } else\
    \ {\n            if longestPalindromeLength > longestPalindrome.length {\n   \
    \             longestPalindrome = character\n            }\n        }\n    }\n\
    \    for character in string {\n        if character == character {\n        \
    \    longestPalindromeLength += 1\n            if longestPalindromeLength > longestPalindrome.length\
    \ {\n                longestPalindrome = character\n            }\n        } else\
    \ {\n            if longestPalindromeLength > longestPalindrome.length {\n   \
    \             longestPalindrome = character\n            }\n        }\n    }\n\
    \    for character in string {\n        if character == character {\n        \
    \    longestPalindromeLength += 1\n            if longestPalindromeLength > longestPalindrome.length\
    \ {\n                longestPalindrome = character\n            }\n        } else\
    \ {\n            if longestPalindromeLength > longestPalindrome.length {\n   \
    \             longestPalindrome = character\n            }\n        }\n    }\n\
    \    for character in string {\n        if character == character {\n        \
    \    longestPalindromeLength += 1\n            if longestPalindromeLength > longestPalindrome.length\
    \ {\n                longestPalindrome = character\n            }\n        } else\
    \ {\n            if longestPalindromeLength > longestPalindrome.length {\n   \
    \             longestPalindrome = character\n            }\n        }\n    }\n\
    \    for character in string {", "    var reversed = \"\"\n    var longest = 0\n\
    \    for char in string.characters {\n        if char == char.lowercased().first\
    \ {\n            longest = longest.successor()\n        }\n        reversed.append(char)\n\
    \    }\n    if longest == 0 {\n        return string\n    }\n    reversed.append(string[longest.successor()...])\n\
    \    return reversed", "    var result = \"\"\n    var longest = 0\n    for c\
    \ in string {\n        if isPalindrome(string(string: c, longest: longest)) {\n\
    \            longest = longest + 1\n            result = result + string(string:\
    \ c, longest: longest)\n        }\n    }\n    return result", "    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    for index in 0..<string.characters.count\
    \ {\n        let currentChar = string.characters[index]\n        let reversedChar\
    \ = reverseString(currentChar)\n        if currentChar == reversedChar {\n   \
    \         longestPalindromeLength += 1\n        } else {\n            if longestPalindromeLength\
    \ > longestPalindrome.characters.count {\n                longestPalindrome =\
    \ string\n                longestPalindromeLength = longestPalindrome.characters.count\n\
    \            }\n            longestPalindrome.append(reversedChar)\n        }\n\
    \    }\n    return longestPalindrome", "    var reversed = \"\"\n    var longest\
    \ = \"\"\n    for character in string {\n        reversed = reversed.appending(character)\n\
    \        if character == reversed.first {\n            longest = longest.appending(character)\n\
    \        }\n    }\n    return longest.appending(reversed)", "    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix\
    \ = \"\"\n    var longestPalindromeSuffix = \"\"\n    for _ in 0..<string.characters.count\
    \ {\n        let currentChar = string[string.startIndex]\n        let currentCharLength\
    \ = string.characters.count\n        if currentCharLength > longestPalindromeLength\
    \ {\n            longestPalindromeLength = currentCharLength\n            longestPalindromePrefix\
    \ = string[string.startIndex..<string.startIndex.advancedBy(currentCharLength\
    \ - 1)]\n            longestPalindromeSuffix = string[string.startIndex.advancedBy(currentCharLength\
    \ - 1)..<string.endIndex]\n        }\n        if currentChar == longestPalindrome[longestPalindrome.startIndex]\
    \ {\n            longestPalindrome = longestPalindrome[longestPalindrome.startIndex..<longestPalindrome.endIndex]\n\
    \            longestPalindromeLength += 1\n        }\n    }\n    return longestPalindromePrefix\
    \ + longestPalindrome[longestPalindrome.startIndex..<longestPalindrome.endIndex]\
    \ + longestPalindromeSuffix", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    for character in string {\n\
    \        if character == character {\n            longestPalindromeLength += 1\n\
    \            if longestPalindromeLength > longestPalindrome.length {\n       \
    \         longestPalindrome = string\n            }\n        } else {\n      \
    \      if longestPalindromeLength > 0 {\n                result += longestPalindrome\n\
    \                longestPalindrome = \"\"\n                longestPalindromeLength\
    \ = 0\n            }\n            result += character\n        }\n    }\n    if\
    \ longestPalindromeLength > 0 {\n        result += longestPalindrome\n    }\n\
    \    return result", "\tlet reverse = string.reversed()\n\tlet prefix = string.prefix(string.reversed())\n\
    \treturn prefix + reverse", "    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    for length in string.characters.reverse() {\n        if longestPalindromeLength\
    \ < length {\n            longestPalindromeLength = length\n            longestPalindrome\
    \ = string\n        }\n    }\n    var reversedString = longestPalindrome\n   \
    \ for length in string.characters.reverse() {\n        reversedString = reversedString[..<length]\
    \ + reversedString[length..<length.reversed()]\n    }\n    return longestPalindrome\
    \ + reversedString", "\tlet reversed = string.reversed()\n\tlet prefixLength =\
    \ string.characters.count - reversed.characters.count\n\treturn string.characters.prefix(prefixLength).append(reversed).reverse()",
  "\tlet reversedString = string.reversed()\n\tlet longestPalindrome = longestPalindromeFrom(string:\
    \ reversedString)\n\treturn reversedString.append(longestPalindrome)", "    var\
    \ longestPalindrome = string\n    var longestPalindromeLength = 0\n    for char\
    \ in string {\n        if char == char.lowercased() {\n            longestPalindromeLength\
    \ += 1\n            if longestPalindromeLength > longestPalindrome.count {\n \
    \               longestPalindrome = string\n                longestPalindromeLength\
    \ = longestPalindrome.count\n            }\n        }\n    }\n    var reversedString\
    \ = string\n    for char in reversedString {\n        if char == char.lowercased()\
    \ {\n            reversedString = reversedString.dropLast()\n        }\n    }\n\
    \    return longestPalindrome + reversedString", "    var result = string\n  \
    \  var longestPalindrome = string\n    var longestPalindromeLength = 0\n    for\
    \ length in string.characters.reverse() {\n        if length > longestPalindromeLength\
    \ {\n            longestPalindromeLength = length\n            longestPalindrome\
    \ = string[string.startIndex.advancedBy(longestPalindromeLength)]\n        }\n\
    \    }\n    for length in string.characters.reverse() {\n        if length > longestPalindromeLength\
    \ {\n            longestPalindromeLength = length\n            longestPalindrome\
    \ = string[string.startIndex.advancedBy(longestPalindromeLength)]\n        }\n\
    \    }\n    if longestPalindromeLength == 0 {\n        return \"\"\n    }\n  \
    \  if longestPalindromeLength == 1 {\n        return string\n    }\n    if longestPalindromeLength\
    \ == 2 {\n        return string + string[string.startIndex.advancedBy(1)]\n  \
    \  }\n    if longestPalindromeLength == 3 {\n        return string + string[string.startIndex.advancedBy(2)]\n\
    \    }\n    if longestPalindromeLength == 4 {\n        return string + string[string.startIndex.advancedBy(3)]\n\
    \    }\n    if longestPalindromeLength == 5 {\n        return string + string[string.startIndex.advancedBy(4)]\n\
    \    }\n    if longestPalindromeLength == 6 {\n        return string + string[string.startIndex.advancedBy(5)]\n\
    \    }\n    if longestPalindromeLength == 7 {\n        return string + string[string.startIndex.advancedBy(6)]\n\
    \    }\n    if longestPalindromeLength == 8 {\n        return string + string[string.startIndex.advancedBy(7)]\n\
    \    }\n    if longestPalindromeLength == 9 {\n        return string + string[string.startIndex.advancedBy(8)]\n\
    \    }\n    if longestPalindromeLength == 10 {\n        return string + string[string.startIndex.advancedBy(9)]\n\
    \    }\n    if longestPalindromeLength == 11 {\n        return string + string[string.startIndex.advancedBy(10)]\n\
    \    }\n    if longestPalindromeLength == 12 {\n        return string + string[string.startIndex.advancedBy(11)]\n\
    \    }\n    if longestPalindromeLength == 13 {\n        return string + string[string.startIndex.advancedBy(12)]\n\
    \    }\n    if longestPalindromeLength == 14 {\n        return string + string[string.startIndex.advancedBy(13)]\n\
    \    }\n", "\tlet maxPalindromeLength = string.characters.reversed().prefix(string.characters.count\
    \ - 1).count\n\tlet reversedString = string.characters.reversed()\n\tlet palindrome\
    \ = reversedString.prefix(maxPalindromeLength).append(reversedString.suffix(maxPalindromeLength))\n\
    \treturn palindrome", "    var result = \"\"\n    var longestPalindrome = \"\"\
    \n    var longestPalindromeLength = 0\n    var longestPalindromePrefix = \"\"\n\
    \    var longestPalindromeSuffix = \"\"\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromePrefixReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverse = \"\"\n    var longestPalindromePrefixReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseLength = 0\n    var longestPalindromePrefixReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverse = \"\"\n    var longestPalindromePrefixReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseReverse = \"\"\n    var\
    \ longestPalindromePrefixReverseReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverseReverse = \"\"\n  \
    \  var longestPalindromeSuffixReverseReverseReverseReverse = \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n\
    \    var longestPalindromePrefixReverseReverseReverseReverseReverse = \"\"\n \
    \   var longestPalindromeSuffixReverseReverseReverseReverseReverse = \"\"\n  \
    \  var longestPalindromePrefixReverseReverseReverseReverseLength = 0\n    var\
    \ longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseReverseReverseReverse =\
    \ \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseReverseReverseReverse =\
    \ \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n\
    \    var longestPalindromePrefixReverseReverseReverseReverseReverse = \"\"\n \
    \   var longestPalindromeSuffixReverseReverseReverseReverseReverse = \"\"\n  \
    \  var longestPalindromePrefixReverseReverseReverseReverseReverseLength = 0\n\
    \    var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n    var\
    \ longestPalindromePrefixReverseReverseReverseReverseReverseReverse = \"\"\n \
    \   var longestPalindromeSuffixReverseReverseReverseReverseReverse = \"\"\n  \
    \  var ", "    var result = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeIndex = 0\n    var longestPalindromeIndexStart\
    \ = 0\n    var longestPalindromeIndexEnd = 0\n    var longestPalindromeIndexEndStart\
    \ = 0\n    var longestPalindromeIndexEndEnd = 0\n    var longestPalindromeIndexStartStart\
    \ = 0\n    var longestPalindromeIndexStartEnd = 0\n    var longestPalindromeIndexEndStart\
    \ = 0\n    var longestPalindromeIndexEndEnd = 0\n    var longestPalindromeIndexStartStart\
    \ = 0\n    var longestPalindromeIndexStartEnd = 0\n    var longestPalindromeIndexEndStart\
    \ = 0\n    var longestPalindromeIndexEndEnd = 0\n    var longestPalindromeIndexStartStart\
    \ = 0\n    var longestPalindromeIndexStartEnd = 0\n    var longestPalindromeIndexEndStart\
    \ = 0\n    var longestPalindromeIndexEndEnd = 0\n    var longestPalindromeIndexStartStart\
    \ = 0\n    var longestPalindromeIndexStartEnd = 0\n    var longestPalindromeIndexEndStart\
    \ = 0\n    var longestPalindromeIndexEndEnd = 0\n    var longestPalindromeIndexStartStart\
    \ = 0\n    var longestPalindromeIndexStartEnd = 0\n    var longestPalindromeIndexEndStart\
    \ = 0\n    var longestPalindromeIndexEndEnd = 0\n    var longestPalindromeIndexStartStart\
    \ = 0\n    var longestPalindromeIndexStartEnd = 0\n    var longestPalindromeIndexEndStart\
    \ = 0\n    var longestPalindromeIndexEndEnd = 0\n    var longestPalindromeIndexStartStart\
    \ = 0\n    var longestPalindromeIndexStartEnd = 0\n    var longestPalindromeIndexEndStart\
    \ = 0\n    var longestPalindromeIndexEndEnd = 0\n    var longestPalindromeIndexStartStart\
    \ = 0\n    var longestPalindromeIndexStartEnd = 0\n    var longestPalindromeIndexEndStart\
    \ = 0\n    var longestPalindromeIndexEndEnd = 0\n    var longestPalindromeIndexStartStart\
    \ = 0\n    var longestPalindromeIndexStartEnd = 0\n    var longestPalindromeIndexEndStart\
    \ = 0\n    var longestPalindromeIndexEndEnd = 0\n    var longestPalindromeIndexStartStart\
    \ = 0\n    var longestPalindromeIndexStartEnd = 0\n    var longestPalindromeIndexEndStart\
    \ = 0\n    var longestPalindromeIndexEndEnd = 0\n", "    var result = string\n\
    \    var longestPalindrome = string\n    var longestPalindromeLength = 0\n   \
    \ var longestPalindromeIndex = 0\n    for index in 0..<string.count {\n      \
    \  let char = string[index]\n        if char == char.reversed() {\n          \
    \  longestPalindromeLength += 1\n            if longestPalindromeLength > longestPalindromeIndex\
    \ {\n                longestPalindrome = string\n                longestPalindromeIndex\
    \ = index\n            }\n        } else {\n            longestPalindromeLength\
    \ = 0\n        }\n    }\n    if longestPalindromeLength > longestPalindromeIndex\
    \ {\n        result = string\n    }\n    return result", "\tlet reverse = string.reversed()\n\
    \tlet prefix = reverse.prefix(string: string)\n\tlet suffix = reverse.suffix(string:\
    \ string)\n\treturn prefix + suffix", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeStartIndex\
    \ = 0\n    var longestPalindromeEndIndex = 0\n    var longestPalindromeStartIndexInReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverse = 0\n    var longestPalindromeStartIndexInReverseReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverse = 0\n    var longestPalindromeStartIndexInReverseReverseReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseReverse = 0\n    var longestPalindromeStartIndexInReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeStartIndexInReverseReverseReverseReverse = 0\n    var\
    \ longestPalindromeEndIndexInReverseReverseReverseReverse = 0\n    var longestPalindromeStartIndexInReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeStartIndexInReverseReverseReverseReverse = 0\n    var\
    \ longestPalindromeEndIndexInReverseReverseReverseReverse = 0\n    var longestPalindromeStartIndexInReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeStartIndexInReverseReverseReverseReverse = 0\n    var\
    \ longestPalindromeEndIndexInReverseReverseReverseReverse = 0\n    var longestPalindromeStartIndexInReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeStartIndexInReverseReverseReverseReverse = 0\n    var\
    \ longestPalindromeEndIndexInReverseReverseReverseReverse = 0\n    var longestPalindromeStartIndexInReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeStartIndexInReverseReverseReverseReverse = 0\n    var\
    \ longestPalindromeEndIndexInReverseReverseReverseReverse = 0\n    var longestPalindromeStartIndexInReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeStartIndexInReverseReverseReverseReverse = 0\n    var\
    \ longestPalindromeEndIndexInReverseReverseReverseReverse = 0\n    var longestPalindromeStartIndexInReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseReverseReverse = 0\n \
    \   var longestP", "    let maxPalindrome = longestPalindrome(string: string)\n\
    \    let reversedString = reverseString(string: string)\n    return maxPalindrome\
    \ + reversedString", "    if string == \"\" {\n        return \"\"\n    }\n\n\
    \    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\n\n \
    \   for letter in string {\n        if longestPalindromeLength == 0 {\n      \
    \      longestPalindromePrefix = letter\n            longestPalindromeLength =\
    \ 1\n        } else {\n            if letter == longestPalindromePrefix[longestPalindromeLength]\
    \ {\n                longestPalindromeLength += 1\n            } else {\n    \
    \            longestPalindromeLength = 1\n                longestPalindromePrefix\
    \ = letter\n            }\n        }\n    }\n\n    for letter in string {\n  \
    \      if longestPalindromeLength == 0 {\n            longestPalindromeSuffix\
    \ = letter\n            longestPalindromeLength = 1\n        } else {\n      \
    \      if letter == longestPalindromeSuffix[longestPalindromeLength] {\n     \
    \           longestPalindromeLength += 1\n            } else {\n             \
    \   longestPalindromeLength = 1\n                longestPalindromeSuffix = letter\n\
    \            }\n        }\n    }\n\n    return longestPalindromePrefix + longestPalindromeSuffix\
    \ + longestPalindromePrefix.reverse() + longestPalindromeSuffix.reverse()", " \
    \   let longestPalindrome = longestPalindrome(string: string)\n    let reversedLongestPalindrome\
    \ = reverseString(string: longestPalindrome)\n    return reversedLongestPalindrome\
    \ + longestPalindrome", "    var result = \"\"\n    var longestPalindrome = \"\
    \"\n    for char in string {\n        if char == char.lowercased().unicodeScalars.first\
    \ {\n            longestPalindrome += char\n        }\n    }\n    for char in\
    \ string {\n        if char == char.lowercased().unicodeScalars.last {\n     \
    \       longestPalindrome += char\n        }\n    }\n    for char in string {\n\
    \        if char == char.lowercased().unicodeScalars.first {\n            result\
    \ += char\n        }\n        if char == char.lowercased().unicodeScalars.last\
    \ {\n            result += char\n        }\n    }\n    for char in string {\n\
    \        if char == char.lowercased().unicodeScalars.first {\n            result\
    \ += char\n        }\n        if char == char.lowercased().unicodeScalars.last\
    \ {\n            result += char\n        }\n        if char == char.lowercased().unicodeScalars.first\
    \ {\n            result += char\n        }\n        if char == char.lowercased().unicodeScalars.last\
    \ {\n            result += char\n        }\n    }\n    for char in string {\n\
    \        if char == char.lowercased().unicodeScalars.first {\n            result\
    \ += char\n        }\n        if char == char.lowercased().unicodeScalars.last\
    \ {\n            result += char\n        }\n        if char == char.lowercased().unicodeScalars.first\
    \ {\n            result += char\n        }\n        if char == char.lowercased().unicodeScalars.last\
    \ {\n            result += char\n        }\n        if char == char.lowercased().unicodeScalars.first\
    \ {\n            result += char\n        }\n        if char == char.lowercased().unicodeScalars.last\
    \ {\n            result += char\n        }\n    }\n    for char in string {\n\
    \        if char == char.lowercased().unicodeScalars.first {\n            result\
    \ += char\n        }\n        if char == char.lowercased().unicodeScalars.last\
    \ {\n            result += char\n        }\n        if char == char.lowercased().unicodeScalars.first\
    \ {\n            result += char\n        }\n        if char == char.lowercased().unicodeScalars.last\
    \ {\n            result += char\n        }\n        if char == char.lowercased().unicodeScalars.first\
    \ {\n            result += char\n        }\n        if char == char.lowercased().unicodeScalars.last\
    \ {\n            result += char\n        }\n        if char == char.lowercased().unicodeScalars.first\
    \ {\n            result += char\n        }\n        if char == char.lowercased().unicodeScalars.last\
    \ {\n            result += char\n        }\n    }\n    for char in string {\n\
    \        if char == ", "    var reverse = \"\"\n    var longest = \"\"\n    for\
    \ char in string.characters {\n        if char == char.lowercased() {\n      \
    \      reverse = reverse.lowercased()\n            longest = char.lowercased()\n\
    \        } else {\n            reverse = reverse + char\n        }\n    }\n  \
    \  for char in reverse.characters {\n        if char == char.lowercased() {\n\
    \            longest = char.lowercased()\n        } else {\n            longest\
    \ = longest + char\n        }\n    }\n    return string + longest", "\tlet reversed\
    \ = string.reversed()\n\tlet prefixLength = string.characters.count - reversed.characters.count\n\
    \treturn string + reversed", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeStart\
    \ = 0\n    var longestPalindromeEnd = 0\n    var longestPalindromeStartIndex =\
    \ 0\n    var longestPalindromeEndIndex = 0\n    var longestPalindromeStartIndexInReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverse = 0\n    var longestPalindromeStartIndexInReverseReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverse = 0\n    var longestPalindromeStartIndexInReverseReverseIndex\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseIndex = 0\n    var longestPalindromeStartIndexInReverseReverseIndexInReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseIndexInReverse = 0\n \
    \   var longestPalindromeStartIndexInReverseReverseIndexInReverseReverse = 0\n\
    \    var longestPalindromeEndIndexInReverseReverseIndexInReverseReverse = 0\n\
    \    var longestPalindromeStartIndexInReverseReverseIndexInReverseReverseIndex\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseIndexInReverseReverseIndex\
    \ = 0\n    var longestPalindromeStartIndexInReverseReverseIndexInReverseReverseIndexInReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseIndexInReverseReverseIndexInReverseReverse\
    \ = 0\n    var longestPalindromeStartIndexInReverseReverseIndexInReverseReverseIndexInReverseReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseIndexInReverseReverseIndexInReverseReverse\
    \ = 0\n    var longestPalindromeStartIndexInReverseReverseIndexInReverseReverseIndexInReverseReverseIndex\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseIndexInReverseReverseIndexInReverseReverseIndex\
    \ = 0\n    var longestPalindromeStartIndexInReverseReverseIndexInReverseReverseIndexInReverseReverseIndex\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseIndexInReverseReverseIndexInReverseReverseIndex\
    \ = 0\n    var longestPalindromeStartIndexInReverseReverseIndexInReverseReverseIndexInReverseReverseIndex\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseIndexInReverseReverseIndexInReverseReverseIndex\
    \ = 0\n    var longestPalindromeStartIndexInReverseReverseIndexInReverseReverseIndexInReverseReverseIndex\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseIndexInReverseReverseIndexInReverseReverseIndex\
    \ = 0\n    var longestPalindromeStartIndexInReverseReverseIndexInReverse", " \
    \   if string == \"\" {\n        return \"\"\n    }\n\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength\
    \ = 0\n\n    for i := 0; i < len(string); i++ {\n        if string[i] == string[len(string)-i-1]\
    \ {\n            longestPalindromeLength++\n            if longestPalindromeLength\
    \ > longestPalindromePrefixLength {\n                longestPalindromePrefixLength\
    \ = longestPalindromeLength\n                longestPalindrome = string[longestPalindromePrefixLength\
    \ ..< longestPalindromeLength]\n            }\n        } else {\n            longestPalindromeLength\
    \ = 0\n        }\n    }\n\n    return longestPalindrome", "\tlet maxLen = string.characters.count\n\
    \tlet maxIndex = string.characters.reversed().index(string.characters.startIndex,\
    \ offsetBy: maxLen)\n\tlet prefix = string.substring(to: maxIndex)\n\tlet suffix\
    \ = string.substring(from: maxIndex)\n\treturn prefix + suffix", "    var result\
    \ = \"\"\n    var longest = 0\n    for i := 0; i < len(string); i++ {\n      \
    \  if string[i] != string[longest] {\n            longest = i\n        }\n   \
    \ }\n    for i := 0; i < len(string); i++ {\n        if i == longest {\n     \
    \       result += string[i]\n        } else {\n            result += string[i]\
    \ + string[longest]\n        }\n    }\n    return result", "    var result = \"\
    \"\n    var longest = 0\n    for c in string {\n        if c == string[longest]\
    \ {\n            longest++\n        } else {\n            longest = 0\n      \
    \  }\n        if longest > 0 {\n            result += string[longest-1]\n    \
    \    }\n        result += string[longest]\n    }\n    return result", "    var\
    \ longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromePostfixLength\
    \ = 0\n    var longestPalindromePostfixReverse = \"\"\n    var longestPalindromePostfixReverseLength\
    \ = 0\n    var longestPalindromePostfixReverseReverse = \"\"\n    var longestPalindromePostfixReverseReverseLength\
    \ = 0\n    var longestPalindromePostfixReverseReverseReverse = \"\"\n    var longestPalindromePostfixReverseReverseReverseLength\
    \ = 0\n    var longestPalindromePostfixReverseReverseReverseReverse = \"\"\n \
    \   var longestPalindromePostfixReverseReverseReverseReverseLength = 0\n    var\
    \ longestPalindromePostfixReverseReverseReverseReverse = \"\"\n    var longestPalindromePostfixReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromePostfixReverseReverseReverseReverse = \"\"\n \
    \   var longestPalindromePostfixReverseReverseReverseReverseLength = 0\n    var\
    \ longestPalindromePostfixReverseReverseReverseReverseReverse = \"\"\n    var\
    \ longestPalindromePostfixReverseReverseReverseReverseReverseLength = 0\n    var\
    \ longestPalindromePostfixReverseReverseReverseReverseReverseReverse = \"\"\n\
    \    var longestPalindromePostfixReverseReverseReverseReverseReverseLength = 0\n\
    \    var longestPalindromePostfixReverseReverseReverseReverseReverseReverse =\
    \ \"\"\n    var longestPalindromePostfixReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromePostfixReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePostfixReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromePostfixReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePostfixReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromePostfixReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePostfixReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromePostfixReverseReverseReverseReverseReverse = \"\
    \"\n    var longestPalindromePostfixReverseReverseReverseReverseLength = 0\n \
    \   var longestPalindromePostfixReverseReverseReverseReverseReverse = \"\"\n \
    \   var longestPalindromePostfixReverseReverseReverseReverseLength = 0\n    var\
    \ longestPalindromePostfixReverseReverseReverseReverseReverse = \"\"\n    var\
    \ longestPalindromePostfixReverseReverseReverseReverseLength = 0\n    var longestPalindromePostfixReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindrome", "    var result = string\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    for index in 0..<string.count\
    \ {\n        let char = string[index]\n        let reversedChar = String(char.reversed())\n\
    \        if reversedChar == char {\n            longestPalindrome = string\n \
    \           longestPalindromeLength = index\n            break\n        }\n  \
    \  }\n    if longestPalindromeLength == 0 {\n        return string\n    }\n  \
    \  if longestPalindromeLength > 0 {\n        let prefixString = string[longestPalindromeLength..<string.count]\n\
    \        let reversedPrefixString = String(prefixString.reversed())\n        result\
    \ = prefixString + reversedPrefixString\n    }\n    return result", "\tlet reversed\
    \ = string.reversed()\n\tlet prefixLength = string.characters.count - reversed.characters.count\n\
    \tlet postfix = string.characters.suffix(from: prefixLength)\n\treturn string\
    \ + reversed + postfix", "    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeStart = 0\n    var longestPalindromeEnd = 0\n\
    \    var longestPalindromePalindrome = \"\"\n    var longestPalindromePalindromeLength\
    \ = 0\n    var longestPalindromePalindromeStart = 0\n    var longestPalindromePalindromeEnd\
    \ = 0\n    var longestPalindromePalindromePalindrome = \"\"\n    var longestPalindromePalindromePalindromeLength\
    \ = 0\n    var longestPalindromePalindromePalindromeStart = 0\n    var longestPalindromePalindromePalindromeEnd\
    \ = 0\n    for start in 0..<string.count {\n        var end = start\n        var\
    \ palindrome = string[start]\n        var palindromeLength = 1\n        var palindromeStart\
    \ = start\n        var palindromeEnd = start\n        var palindromePalindrome\
    \ = \"\"\n        var palindromePalindromeLength = 1\n        var palindromePalindromeStart\
    \ = start\n        var palindromePalindromeEnd = start\n        var palindromePalindromePalindrome\
    \ = \"\"\n        var palindromePalindromePalindromeLength = 1\n        var palindromePalindromePalindromeStart\
    \ = start\n        var palindromePalindromePalindromeEnd = start\n        while\
    \ end < string.count {\n            var char = string[end]\n            if char\
    \ == palindrome {\n                palindromeLength += 1\n                end\
    \ += 1\n                continue\n            }\n            if palindromeLength\
    \ > longestPalindromeLength {\n                longestPalindromeLength = palindromeLength\n\
    \                longestPalindromeStart = palindromeStart\n                longestPalindromeEnd\
    \ = palindromeEnd\n                longestPalindromePalindrome = palindromePalindrome\n\
    \                longestPalindromePalindromeLength = palindromePalindromeLength\n\
    \                longestPalindromePalindromeStart = palindromePalindromeStart\n\
    \                longestPalindromePalindromeEnd = palindromePalindromeEnd\n  \
    \              longestPalindromePalindromePalindrome = palindromePalindromePalindrome\n",
  "    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    for\
    \ character in string {\n        if character == character {\n            longestPalindromeLength\
    \ += 1\n        } else {\n            if longestPalindromeLength > 0 {\n     \
    \           longestPalindromeLength = 0\n                longestPalindrome +=\
    \ String(character)\n            }\n        }\n    }\n    if longestPalindromeLength\
    \ > 0 {\n        longestPalindrome += String(character)\n    }\n    return longestPalindrome",
  "    if string == \"\" {\n        return \"\"\n    }\n    var reversed = string\n\
    \    var longestPalindrome = string\n    var longestPalindromeLength = string.length\n\
    \    for i := 0; i < longestPalindromeLength; i++ {\n        var reversedChar\
    \ = reversed[i]\n        var prefixChar = string[longestPalindromeLength - i -\
    \ 1]\n        if reversedChar != prefixChar {\n            longestPalindrome =\
    \ longestPalindrome[longestPalindromeLength - i - 1] + reversedChar\n        \
    \    longestPalindromeLength = longestPalindrome.length\n        }\n    }\n  \
    \  return longestPalindrome", "    var reversed = \"\"\n    var longest = \"\"\
    \n    for char in string {\n        if char == char.lowercased() {\n         \
    \   reversed = reversed.lowercased() + char\n            longest = char\n    \
    \    } else {\n            reversed = reversed.uppercased() + char\n         \
    \   longest = char\n        }\n    }\n    if longest.lowercased() == reversed.lowercased()\
    \ {\n        return longest\n    }\n    return longest.lowercased() + reversed",
  "    if string == \"\" {\n        return \"\"\n    }\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    for char in string {\n \
    \       if char == char.lowercased() {\n            longestPalindromeLength +=\
    \ 1\n            if longestPalindromeLength > longestPalindromePrefixLength {\n\
    \                longestPalindromePrefixLength = longestPalindromeLength\n   \
    \         }\n        } else {\n            longestPalindromeSuffixLength += 1\n\
    \            if longestPalindromeSuffixLength > longestPalindromePrefixLength\
    \ {\n                longestPalindromePrefixLength = longestPalindromeSuffixLength\n\
    \            }\n        }\n    }\n    var longestPalindromePrefix = string\n \
    \   for index in 0..<longestPalindromePrefixLength {\n        longestPalindromePrefix\
    \ = longestPalindromePrefix.prefix(longestPalindromePrefixLength - index)\n  \
    \  }\n    var longestPalindromeSuffix = string\n    for index in 0..<longestPalindromeSuffixLength\
    \ {\n        longestPalindromeSuffix = longestPalindromeSuffix.suffix(longestPalindromeSuffixLength\
    \ - index)\n    }\n    var longestPalindrome = longestPalindromePrefix + longestPalindromeSuffix.reversed()\n\
    \    return longestPalindrome", "    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = longestPalindrome.characters.count\n    var longestPalindromePrefix = \"\"\
    \n    var longestPalindromeSuffix = \"\"\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromePrefixReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverse = \"\"\n    var longestPalindromePrefixReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseLength = 0\n    var longestPalindromePrefixReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverse = \"\"\n    var longestPalindromePrefixReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseReverse = \"\"\n    var\
    \ longestPalindromePrefixReverseReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverseReverse = \"\"\n  \
    \  var longestPalindromeSuffixReverseReverseReverseReverse = \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n\
    \    var longestPalindromePrefixReverseReverseReverseReverseReverse = \"\"\n \
    \   var longestPalindromeSuffixReverseReverseReverseReverseReverse = \"\"\n  \
    \  var longestPalindromePrefixReverseReverseReverseReverseLength = 0\n    var\
    \ longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseReverseReverseReverse =\
    \ \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n\
    \    var longestPalindromePrefixReverseReverseReverseReverseReverseReverse = \"\
    \"\n    var longestPalindromeSuffixReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffix", "    if string == \"\" {\n       \
    \ return \"\"\n    }\n\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix\
    \ = \"\"\n\n    for character in string {\n        if character == character {\n\
    \            continue\n        }\n\n        var palindrome = string\n        var\
    \ palindromeLength = 0\n        var palindromePrefix = \"\"\n        var palindromeSuffix\
    \ = \"\"\n\n        for index in 0..<string.count {\n            if character\
    \ == string[index] {\n                palindromeLength += 1\n                palindromePrefix\
    \ = string[index..<index]\n                palindromeSuffix = string[index..<index+palindromeLength]\n\
    \            } else {\n                break\n            }\n        }\n\n   \
    \     if palindromeLength > longestPalindromeLength {\n            longestPalindrome\
    \ = palindrome\n            longestPalindromeLength = palindromeLength\n     \
    \       longestPalindromePrefix = palindromePrefix\n            longestPalindromeSuffix\
    \ = palindromeSuffix\n        }\n    }\n\n    return longestPalindromePrefix +\
    \ longestPalindromeSuffix + longestPalindrome", "\tlet longestPalindrome = longestPalindrome(string:\
    \ string)\n\tlet reversedString = reverseString(string: string)\n\treturn reversedString\
    \ + longestPalindrome", "    var result = string\n    var longestPalindrome =\
    \ string\n    var longestPalindromeLength = string.length\n    var longestPalindromeIndex\
    \ = string.length\n    var longestPalindromeIndexReverse = string.length\n   \
    \ var longestPalindromeIndexReverseReverse = string.length\n    var longestPalindromeIndexReverseReverseReverse\
    \ = string.length\n    var longestPalindromeIndexReverseReverseReverseReverse\
    \ = string.length\n    var longestPalindromeIndexReverseReverseReverseReverseReverse\
    \ = string.length\n    var longestPalindromeIndexReverseReverseReverseReverseReverseReverse\
    \ = string.length\n    var longestPalindromeIndexReverseReverseReverseReverseReverseReverseReverse\
    \ = string.length\n    var longestPalindromeIndexReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = string.length\n    var longestPalindromeIndexReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = string.length\n    var longestPalindromeIndexReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = string.length\n    var longestPalindromeIndexReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = string.length\n    var longestPalindromeIndexReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = string.length\n    var longestPalindromeIndexReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = string.length\n    var longestPalindromeIndexReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = string.length\n    var longestPalindromeIndexReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = string.length\n    var longestPalindromeIndexReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = string.length\n    var longestPalindromeIndexReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = string.length\n    var longestPalindromeIndexReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = string.length\n    var longestPalindromeIndexReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = string.length\n    var longestPalindromeIndexReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = string.length\n    var longestPalindromeIndexReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = string.length\n    var longestPalindromeIndexReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = string.length\n    var longestPalindromeIndexReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = string.length\n    var longestPalindromeIndexReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse",
  "    var result = \"\"\n    var longestPalindrome = \"\"\n    for letter in string\
    \ {\n        if letter == letter {\n            result += letter\n           \
    \ continue\n        }\n        if longestPalindrome == \"\" {\n            longestPalindrome\
    \ = letter\n            continue\n        }\n        if longestPalindrome == letter\
    \ {\n            result += longestPalindrome\n            longestPalindrome =\
    \ \"\"\n            continue\n        }\n        if longestPalindrome == letter\
    \ + String(letter) {\n            result += longestPalindrome\n            longestPalindrome\
    \ = \"\"\n            continue\n        }\n        if longestPalindrome == letter\
    \ + String(letter) + String(letter) {\n            result += longestPalindrome\n\
    \            longestPalindrome = \"\"\n            continue\n        }\n     \
    \   if longestPalindrome == letter + String(letter) + String(letter) + String(letter)\
    \ {\n            result += longestPalindrome\n            longestPalindrome =\
    \ \"\"\n            continue\n        }\n        if longestPalindrome == letter\
    \ + String(letter) + String(letter) + String(letter) + String(letter) {\n    \
    \        result += longestPalindrome\n            longestPalindrome = \"\"\n \
    \           continue\n        }\n        if longestPalindrome == letter + String(letter)\
    \ + String(letter) + String(letter) + String(letter) + String(letter) {\n    \
    \        result += longestPalindrome\n            longestPalindrome = \"\"\n \
    \           continue\n        }\n        if longestPalindrome == letter + String(letter)\
    \ + String(letter) + String(letter) + String(letter) + String(letter) + String(letter)\
    \ {\n            result += longestPalindrome\n            longestPalindrome =\
    \ \"\"\n            continue\n        }\n        if longestPalindrome == letter\
    \ + String(letter) + String(letter) + String(letter) + String(letter) + String(letter)\
    \ + String(letter) + String(letter) {\n            result += longestPalindrome\n\
    \            longestPalindrome = \"\"\n            continue\n        }\n     \
    \   if longestPalindrome == letter + String(letter) + String(letter) + String(letter)\
    \ + String(letter) + String(letter) + String(letter) + String(letter) + String(letter)\
    \ {\n            result += longestPalindrome\n            longestPalindrome =\
    \ \"\"\n            continue\n        }\n        if longestPalindrome == letter\
    \ + String(letter) + String(letter) + String(letter) + String(letter) + String(letter)\
    \ + String(letter) + String(letter) + String(letter) + String(letter) {\n    \
    \        result += longestPalindrome\n            longestPalindrome = \"\"\n \
    \           continue\n        }\n        if longestPalindrome == letter + String(letter)\
    \ + String(letter) + String(letter) + String(letter) + String("]
stop_tokens:
- "\n}"
