name: HumanEval_128_prod_signs
language: swift
prompt: "\n/// You are given an array arr of integers and you need to return\n///\
  \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
  \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
  \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
  \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
  \ [Int]) -> Int? {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\n\
  assert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1,\
  \ 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\nassert(prod_signs(arr:\
  \ [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\n\
  assert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1,\
  \ 0]) == 0)"
completions: ["    var result = 0\n    for x in arr {\n        switch x {\n      \
    \  case 1:\n            result += 1\n        case -1:\n            result -= 1\n\
    \        default:\n            result *= -1\n        }\n    }\n    return result\
    \ != 0", "    guard arr.count > 0 else { return nil }\n    var sign = 1\n    var\
    \ product = 1\n    for x in arr {\n        sign *= x\n        product *= sign\n\
    \    }\n    return product", "    if arr.isEmpty {\n        return nil\n    }\n\
    \    var sum = 0\n    var product = 1\n    for x in arr {\n        sum += x *\
    \ product\n        product *= sign(x)\n    }\n    return sum", "    var product\
    \ = 1\n    for x in arr {\n        product *= sign(x)\n    }\n    return product",
  "    guard arr.count > 0 else {\n        return nil\n    }\n\n    var product =\
    \ 1\n    var sign = 1\n\n    for x in arr {\n        product *= sign\n       \
    \ sign *= x\n    }\n\n    return product", "    var sum = 0\n    var sign = 1\n\
    \    for x in arr {\n        sum += sign * x\n        sign *= -1\n    }\n    return\
    \ sum", "    guard arr.count > 0 else { return nil }\n    var sum = 0\n    for\
    \ x in arr {\n        sum += x * sign(x)\n    }\n    return sum", "    if arr.isEmpty\
    \ {\n        return nil\n    }\n    var sum = 0\n    var sign = 1\n    for x in\
    \ arr {\n        sum += sign * x\n        sign *= -1\n    }\n    return sum",
  "    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n    }\n    return\
    \ sum", "    if arr.isEmpty {\n        return nil\n    }\n    var sign = 1\n \
    \   var product = 1\n    for x in arr {\n        product *= sign\n        sign\
    \ *= x\n    }\n    return product", "    guard !arr.isEmpty else { return nil\
    \ }\n    var sign = 1\n    var product = 1\n    for x in arr {\n        sign *=\
    \ x\n        product *= sign\n    }\n    return product", "    guard !arr.isEmpty\
    \ else { return nil }\n    var sign = 1\n    var product = 1\n    for x in arr\
    \ {\n        product *= sign\n        sign *= x\n    }\n    return product", " \
    \   if arr.isEmpty {\n        return nil\n    }\n    var sum = 0\n    var sign\
    \ = 1\n    for x in arr {\n        sum += sign * x\n        sign *= -1\n    }\n\
    \    return sum", "    if arr.isEmpty {\n        return nil\n    }\n    var sum\
    \ = 0\n    var sign = 1\n    for x in arr {\n        sum += sign * x\n       \
    \ sign *= -1\n    }\n    return sum", "    var result = 0\n    for x in arr {\n\
    \        switch x {\n        case 1:\n            result += 1\n        case -1:\n\
    \            result -= 1\n        default:\n            result *= -1\n       \
    \ }\n    }\n    return result", "    var sum = 0\n    var sign = 1\n    for x\
    \ in arr {\n        sum += sign * x\n        sign *= -1\n    }\n    return sum",
  "    guard arr.count > 0 else {\n        return nil\n    }\n    var product = 1\n\
    \    var sign = 1\n    for i in arr {\n        product *= sign\n        sign *=\
    \ -1\n    }\n    return product", "    var product = 1\n    for x in arr {\n \
    \       product *= sign(x)\n    }\n    return product", "    var result = 0\n\
    \    for x in arr {\n        switch x {\n        case 1:\n            result +=\
    \ 1\n        case -1:\n            result -= 1\n        default:\n           \
    \ result *= -1\n        }\n    }\n    return result != 0", "    if arr.isEmpty\
    \ {\n        return nil\n    }\n    var sum = 0\n    var product = 1\n    for\
    \ x in arr {\n        sum += abs(x)\n        product *= sign(x)\n    }\n    return\
    \ sum * product"]
stop_tokens:
- "\n}"
