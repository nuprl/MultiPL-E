{
  "language": "ts",
  "name": "HumanEval_161_solve",
  "results": [
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    if (s.length === 0) {\n        return s;\n    }\n    let lower = true;\n    let upper = false;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            upper = true;\n        }\n        if (s[i].toLowerCase() === s[i]) {\n            lower = true;\n        }\n        if (s[i].toUpperCase() !== s[i]) {\n            upper = false;\n        }\n        if (s[i].toLowerCase() !== s[i]) {\n            lower = false;\n        }\n    }\n    if (lower && upper) {\n        return s.toLowerCase();\n    }\n    if (lower) {\n        return s.toUpperCase();\n    }\n    return s;\n}\nconsole.log(solve('hello'));\nconsole.log(solve('HELLO'));\nconsole.log(solve('HellO'));\nconsole.log(solve('hello'));\nconsole.log(solve(''));\nconsole.log(solve('  '));\nconsole.log(solve('   '));\nconsole.log(solve('    '));\nconsole.log(solve('     '));\nconsole.log(solve('      '));\nconsole.log(solve('       '));\nconsole.log(solve('        '));\nconsole.log(solve('         '));\nconsole.log(solve('          '));\nconsole.log(solve('           '));\nconsole.log(solve('            '));\nconsole.log(solve('             '));\nconsole.log(solve('              '));\nconsole.log(solve('               '));\nconsole.log(solve('                '));\nconsole.log(solve('                 '));\nconsole.log(solve('                  '));\nconsole.log(solve('                   '));\nconsole.log(solve('                    '));\nconsole.log(solve('                     '));\nconsole.log(solve('                      '));\nconsole.log(solve('                       '));\nconsole.log(solve('                        '));\nconsole.log(solve('                         '));\nconsole.log(solve('                          '));\nconsole.log(solve('                           '));\nconsole.log(solve('                            '));\nconsole.log(solve('                             '));\nconsole.log(solve('                              '));\nconsole.log(solve('                               '));\nconsole.log(solve('                                '));\nconsole.log(solve('                                 '));\nconsole.log(solve('                                  '));\nconsole.log(solve('                                   '));\nconsole.log(solve('                                    '));\nconsole.log(solve('                                     '));\nconsole.log(solve('                                      '));\nconsole.log(solve('                                       '));\nconsole.log(solve('                                        '));\nconsole.log(solve('                                         '));\nconsole.log(solve('                                          '));\nconsole.log(solve('                                           '));\nconsole.log(solve('                                            '));\nconsole.log(solve('                                             '));\nconsole.log(solve('                                              '));\nconsole.log(solve('                                               '));\nconsole.log(solve('                                                '));\nconsole.log(solve('                                                 '));\nconsole.log(solve('                                                  '));\nconsole.log(solve('                                                   '));\nconsole.log(solve('                                                    '));\nconsole.log(solve('                                                     '));\nconsole.log(solve('                                                      '));\nconsole.log(solve('                                                       '));\nconsole.log(solve('                                                        '));\nconsole.log(solve('                                                         '));\nconsole.log(solve('                                                        '));\nconsole.log(solve('                                                        '));\nconsole.log(solve('                                                        '));\nconsole.log(solve('                                                        '));\nconsole.log(solve('                                                        '));\nconsole.log(solve('                                                        \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpodq87pvo.ts(101,76): error TS1002: Unterminated string literal.\n../../../../tmp/tmpodq87pvo.ts(102,1): error TS1005: ',' expected.\n../../../../tmp/tmpodq87pvo.ts(102,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334817
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            result += s[i].toLowerCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpvngc8zg7.js:22:12)\n    at Object.<anonymous> (/tmp/tmpvngc8zg7.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334817
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            result += s[i].toLowerCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmp2oy28b12.js:22:12)\n    at Object.<anonymous> (/tmp/tmp2oy28b12.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            result += s[i].toLowerCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpsm1iejfv.js:22:12)\n    at Object.<anonymous> (/tmp/tmpsm1iejfv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            result += s.charAt(i).toUpperCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\n*/\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp364ehqax.ts(20,1): error TS1109: Expression expected.\n../../../../tmp/tmp364ehqax.ts(20,3): error TS1161: Unterminated regular expression literal.\n",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    return s.split('').map(c => c.toLowerCase() === c ? c.toUpperCase() : c.toLowerCase()).join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpcofwsens.js:14:12)\n    at Object.<anonymous> (/tmp/tmpcofwsens.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            result += s.charAt(i).toUpperCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpsaw3m6jf.js:25:12)\n    at Object.<anonymous> (/tmp/tmpsaw3m6jf.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    return s.split('').map(c => c.toLowerCase() === c ? c.toUpperCase() : c.toLowerCase()).join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpcofwsens.js:14:12)\n    at Object.<anonymous> (/tmp/tmpcofwsens.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpwdo8pw3s.js:22:12)\n    at Object.<anonymous> (/tmp/tmpwdo8pw3s.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334817
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,javascript,arrays |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxnih_nf0.ts(18,2): error TS1110: Type expected.\n../../../../tmp/tmpxnih_nf0.ts(18,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpxnih_nf0.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmpxnih_nf0.ts(19,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpxnih_nf0.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmpxnih_nf0.ts(20,6): error TS1005: ';' expected.\n../../../../tmp/tmpxnih_nf0.ts(20,37): error TS1109: Expression expected.\n../../../../tmp/tmpxnih_nf0.ts(22,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334817
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            newString += s.charAt(i).toUpperCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\n</code>\n<|/ a tags=javascript,string,arrays |>\n<| c |>\nThis doesn't work if the string contains numbers. Try it with `\"123\"`.\n<|/ c |>\n<| c |>\nIt does work, try it with `\"123\"`\n<|/ c |>\n<| c |>\nIt doesn't work if you try it with `\"123\"`.\n<|/ c |>\n<| c |>\nIt does work, try it with `\"123\"`\n<|/ c |>\n<| c |>\nIt does work, try it with `\"123\"`\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps7bwycux.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmps7bwycux.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmps7bwycux.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmps7bwycux.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmps7bwycux.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmps7bwycux.ts(22,7): error TS1109: Expression expected.\n../../../../tmp/tmps7bwycux.ts(23,6): error TS1005: ';' expected.\n../../../../tmp/tmps7bwycux.ts(23,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmps7bwycux.ts(23,71): error TS1002: Unterminated string literal.\n../../../../tmp/tmps7bwycux.ts(24,2): error TS1109: Expression expected.\n../../../../tmp/tmps7bwycux.ts(24,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmps7bwycux.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmps7bwycux.ts(25,7): error TS1109: Expression expected.\n../../",
      "timestamp": 1660334818
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            newString += s.charAt(i).toUpperCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\nconsole.log(solve(\"AbC\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfogn9q8m.ts(68,20): error TS1002: Unterminated string literal.\n../../../../tmp/tmpfogn9q8m.ts(69,1): error TS1005: ',' expected.\n../../../../tmp/tmpfogn9q8m.ts(69,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334817
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            newString += s[i].toLowerCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmprga69z05.js:22:12)\n    at Object.<anonymous> (/tmp/tmprga69z05.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpspd8q8s9.js:22:12)\n    at Object.<anonymous> (/tmp/tmpspd8q8s9.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            result += s.charAt(i).toUpperCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\n*/\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgdxblt8q.ts(20,1): error TS1109: Expression expected.\n../../../../tmp/tmpgdxblt8q.ts(20,3): error TS1161: Unterminated regular expression literal.\n",
      "timestamp": 1660334817
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/[a-z]/)) {\n            newString += s[i].toUpperCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ASDF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpxzy5cb4r.js:22:12)\n    at Object.<anonymous> (/tmp/tmpxzy5cb4r.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ASDF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            newString += s[i].toUpperCase();\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            newString += s[i].toLowerCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\n</code>\n<|/ a tags=javascript,string,algorithm |>\n<| c |>\nThis doesn't work if the string contains multiple letters.\n<|/ c |>\n<| c |>\nThis doesn't work if the string contains multiple letters.\n<|/ c |>\n<| c |>\nThis doesn't work if the string contains multiple letters.\n<|/ c |>\n<| c |>\nThis doesn't work if the string contains multiple letters.\n<|/ c |>\n<| c |>\nThis doesn't work if the string contains multiple letters.\n<|/ c |>\n<| a dscore=5 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8ke3yn4w.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmp8ke3yn4w.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp8ke3yn4w.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmp8ke3yn4w.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp8ke3yn4w.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmp8ke3yn4w.ts(22,7): error TS1109: Expression expected.\n../../../../tmp/tmp8ke3yn4w.ts(23,6): error TS1005: ';' expected.\n../../../../tmp/tmp8ke3yn4w.ts(23,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp8ke3yn4w.ts(23,59): error TS1002: Unterminated string literal.\n../../../../tmp/tmp8ke3yn4w.ts(24,2): error TS1109: Expression expected.\n../../../../tmp/tmp8ke3yn4w.ts(24,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp8ke3yn4w.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmp8ke3yn4w.ts(25,7): error TS1109: Expression expected.\n../../",
      "timestamp": 1660334818
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz90p77sv.ts(18,2): error TS1110: Type expected.\n../../../../tmp/tmpz90p77sv.ts(18,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpz90p77sv.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmpz90p77sv.ts(19,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpz90p77sv.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmpz90p77sv.ts(20,6): error TS1005: ';' expected.\n../../../../tmp/tmpz90p77sv.ts(20,16): error TS1109: Expression expected.\n../../../../tmp/tmpz90p77sv.ts(22,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334817
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    return s.split('').map(c => c.toLowerCase() === c ? c.toUpperCase() : c.toLowerCase()).join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp2_jv2p_g.js:14:12)\n    at Object.<anonymous> (/tmp/tmp2_jv2p_g.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmp_zkxfcib.js:22:12)\n    at Object.<anonymous> (/tmp/tmp_zkxfcib.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            newString += s[i].toLowerCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmprga69z05.js:22:12)\n    at Object.<anonymous> (/tmp/tmprga69z05.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    if (s.length === 0) {\n        return '';\n    }\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            result += s[i].toUpperCase();\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += s[i].toLowerCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpc766ait3.js:29:12)\n    at Object.<anonymous> (/tmp/tmpc766ait3.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            result += s.charAt(i).toUpperCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpsaw3m6jf.js:25:12)\n    at Object.<anonymous> (/tmp/tmpsaw3m6jf.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let reversedString = s.split(\"\").reverse().join(\"\");\n    let lowerCaseLetters = reversedString.match(/[a-z]/gi);\n    let upperCaseLetters = reversedString.match(/[A-Z]/gi);\n    if (lowerCaseLetters && upperCaseLetters) {\n        return reversedString.replace(/[a-z]/gi, function (s) {\n            return s.toUpperCase();\n        }).replace(/[A-Z]/gi, function (s) {\n            return s.toLowerCase();\n        });\n    }\n    return reversedString;\n}\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdakk7ddy.ts(73,1): error TS1005: ',' expected.\n../../../../tmp/tmpdakk7ddy.ts(73,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/[a-z]/)) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ASDF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmplry2bfzs.js:22:12)\n    at Object.<anonymous> (/tmp/tmplry2bfzs.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ASDF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpa4mn2qms.js:22:12)\n    at Object.<anonymous> (/tmp/tmpa4mn2qms.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/[a-z]/)) {\n            newString += s[i].toUpperCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"hELLO wORLD\"));\nconsole.log(solve(\"hELLO wORLD \"));\nconsole.log(solve(\"hELLO wORLD A\"));\nconsole.log(solve(\"hELLO wORLD a\"));\nconsole.log(solve(\"hELLO wORLD A\"));\nconsole.log(solve(\"hELLO wORLD a\"));\nconsole.log(solve(\"hELLO wORLD A\"));\nconsole.log(solve(\"hELLO wORLD a\"));\nconsole.log(solve(\"hELLO wORLD A\"));\nconsole.log(solve(\"hELLO wORLD a\"));\nconsole.log(solve(\"hELLO wORLD A\"));\nconsole.log(solve(\"hELLO wORLD a\"));\nconsole.log(solve(\"hELLO wORLD A\"));\nconsole.log(solve(\"hELLO wORLD a\"));\nconsole.log(solve(\"hELLO wORLD A\"));\nconsole.log(solve(\"hELLO wORLD a\"));\nconsole.log(solve(\"hELLO wORLD A\"));\nconsole.log(solve(\"hELLO wORLD a\"));\nconsole.log(solve(\"hELLO wORLD A\"));\nconsole.log(solve(\"hELLO wORLD a\"));\nconsole.log(solve(\"hELLO wORLD A\"));\nconsole.log(solve(\"hELLO wORLD a\"));\nconsole.log(solve(\"hELLO wORLD A\"));\nconsole.log(solve(\"hELLO wORLD a\"));\nconsole.log(solve(\"hELLO wORLD A\"));\nconsole.log(solve(\"hELLO wORLD a\"));\nconsole.log(solve(\"hELLO wORLD A\"));\nconsole.log(solve(\"hELLO wORLD a\"));\nconsole.log(solve(\"hELLO wORLD A\"));\nconsole.log(solve(\"hELLO wORLD a\"));\nconsole.log(solve(\"hELLO wORLD A\"));\nconsole.log(solve(\"hELLO wORLD a\"));\nconsole.log(solve(\"hELLO wORLD A\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmph9w62s1y.ts(52,33): error TS1002: Unterminated string literal.\n../../../../tmp/tmph9w62s1y.ts(53,1): error TS1005: ',' expected.\n../../../../tmp/tmph9w62s1y.ts(53,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334821
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            newString += s.charAt(i).toUpperCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpj8x_j015.ts(77,26): error TS1002: Unterminated string literal.\n../../../../tmp/tmpj8x_j015.ts(78,1): error TS1005: ',' expected.\n../../../../tmp/tmpj8x_j015.ts(78,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334821
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            result += s[i].toLowerCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8o2px6vs.ts(97,8): error TS1002: Unterminated string literal.\n../../../../tmp/tmp8o2px6vs.ts(98,1): error TS1005: ',' expected.\n../../../../tmp/tmp8o2px6vs.ts(98,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334821
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/[a-z]/)) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript,string |>\n<| c |>\nThis doesn't work if the string contains no letters.\n<|/ c |>\n<| c |>\nIt does, it just doesn't do what the OP wants. He wants to reverse the case of the letters regardless of whether they were in the original string or not.\n<|/ c |>\n<| c |>\nIt doesn't work if you input \"abc\". It returns \"cba\"\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. The OP said \"If the string contains no letters, reverse the string\"\n<|/ c |>\n<| c |>\nI see what you mean. My mistake.\n<|/ c |>\n<| a tags=javascript,string |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp143fxxnr.ts(18,2): error TS1110: Type expected.\n../../../../tmp/tmp143fxxnr.ts(18,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp143fxxnr.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmp143fxxnr.ts(19,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp143fxxnr.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmp143fxxnr.ts(20,7): error TS1109: Expression expected.\n../../../../tmp/tmp143fxxnr.ts(21,6): error TS1005: ';' expected.\n../../../../tmp/tmp143fxxnr.ts(21,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp143fxxnr.ts(21,53): error TS1002: Unterminated string literal.\n../../../../tmp/tmp143fxxnr.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmp143fxxnr.ts(22,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp143fxxnr.ts(23,2): error TS1109: Expression expected.\n../../../../tmp/tmp143fxxnr.ts(23,7): error TS1109: Expression expected.\n../../../../tmp/tmp143fxxnr.ts(24,4): error TS1005: ';' expected.\n../../../../tmp/tmp143fxxnr.ts(24,13): error TS1005: ';' expected.\n../../../../tmp/tmp143fxxnr.ts(24,18): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp143fxxnr.ts(24,154): error TS1002: Unterminated string literal.\n../../../../tmp/tmp143fxxnr.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmp143fxxnr.ts(25,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp143fxxnr.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmp143fxxnr.ts(26,7): error TS1109: Expression expected.\n../../../../tmp/tmp143fxxnr.ts(27,4): error TS1005: ';' expected.\n../../../../tmp/tmp143fxxnr.ts(27,4): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp143fxxnr.ts(27,53): error TS1002: Unterminated string literal.\n../../../../tmp/tmp143fxxnr.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmp143fxxnr.ts(28,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp",
      "timestamp": 1660334821
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i += 1) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpfeq9458h.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfeq9458h.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334821
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            newString += s[i].toUpperCase();\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            newString += s[i].toLowerCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpc4dg3nc5.js:26:12)\n    at Object.<anonymous> (/tmp/tmpc4dg3nc5.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334821
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let reversedString = s.split(\"\").reverse().join(\"\");\n    let result = reversedString.split(\"\").reverse().join(\"\");\n    return result;\n}\nsolve(\"abc\");\nsolve(\"aBc\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\");\nsolve(\"aBcD\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4_876gkb.ts(72,12): error TS1002: Unterminated string literal.\n../../../../tmp/tmp4_876gkb.ts(73,1): error TS1005: ',' expected.\n../../../../tmp/tmp4_876gkb.ts(73,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334821
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/[a-z]/)) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n*/\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzowb1sqt.ts(18,1): error TS1109: Expression expected.\n../../../../tmp/tmpzowb1sqt.ts(18,3): error TS1161: Unterminated regular expression literal.\n",
      "timestamp": 1660334821
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpa4mn2qms.js:22:12)\n    at Object.<anonymous> (/tmp/tmpa4mn2qms.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            newString += s.charAt(i).toUpperCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd91fj68u.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmpd91fj68u.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpd91fj68u.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpd91fj68u.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpd91fj68u.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpd91fj68u.ts(22,6): error TS1005: ';' expected.\n../../../../tmp/tmpd91fj68u.ts(22,16): error TS1109: Expression expected.\n../../../../tmp/tmpd91fj68u.ts(24,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334821
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i].toLowerCase();\n        }\n    }\n    return result;\n}\nsolve('abc');\nsolve('Abc');\nsolve('abcde');\nsolve('abCdE');\nsolve('');\nsolve(' ');\nsolve('ab');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('abA');\nsolve('\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv20h6uu2.ts(97,8): error TS1002: Unterminated string literal.\n../../../../tmp/tmpv20h6uu2.ts(98,1): error TS1005: ',' expected.\n../../../../tmp/tmpv20h6uu2.ts(98,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334821
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            newString += s[i].toUpperCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpxf25uyc9.js:22:12)\n    at Object.<anonymous> (/tmp/tmpxf25uyc9.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334821
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpc29owmkw.ts(76,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334821
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            newString += s.charAt(i).toUpperCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\n</code>\n<|/ a tags=string,javascript |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0xc3g3rs.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmp0xc3g3rs.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0xc3g3rs.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmp0xc3g3rs.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0xc3g3rs.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmp0xc3g3rs.ts(22,6): error TS1005: ';' expected.\n../../../../tmp/tmp0xc3g3rs.ts(22,16): error TS1109: Expression expected.\n../../../../tmp/tmp0xc3g3rs.ts(24,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334821
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            newString += s.charAt(i).toUpperCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpvmw6u83z.js:25:12)\n    at Object.<anonymous> (/tmp/tmpvmw6u83z.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334821
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpspd8q8s9.js:22:12)\n    at Object.<anonymous> (/tmp/tmpspd8q8s9.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let reversedString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            reversedString += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            reversedString += s.charAt(i).toUpperCase();\n        } else {\n            reversedString += s.charAt(i);\n        }\n    }\n    return reversedString;\n}\n</code>\n<|/ a tags=string,javascript,arrays |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8_a48qla.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmp8_a48qla.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp8_a48qla.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmp8_a48qla.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp8_a48qla.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmp8_a48qla.ts(22,6): error TS1005: ';' expected.\n../../../../tmp/tmp8_a48qla.ts(22,16): error TS1109: Expression expected.\n../../../../tmp/tmp8_a48qla.ts(24,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334821
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    return s.split('').map(c => c.toLowerCase() === c ? c.toUpperCase() : c.toLowerCase()).join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpcofwsens.js:14:12)\n    at Object.<anonymous> (/tmp/tmpcofwsens.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n\tlet result = '';\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n\t\t\tresult += s.charAt(i).toLowerCase();\n\t\t} else {\n\t\t\tresult += s.charAt(i);\n\t\t}\n\t}\n\treturn result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmp5z113ywp.js:22:12)\n    at Object.<anonymous> (/tmp/tmp5z113ywp.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334821
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpwdo8pw3s.js:22:12)\n    at Object.<anonymous> (/tmp/tmpwdo8pw3s.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334817
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/[a-z]/)) {\n            newString += s[i].toUpperCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ASDF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpxzy5cb4r.js:22:12)\n    at Object.<anonymous> (/tmp/tmpxzy5cb4r.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ASDF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\n*/\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpb7pw_i36.ts(18,1): error TS1109: Expression expected.\n../../../../tmp/tmpb7pw_i36.ts(18,3): error TS1161: Unterminated regular expression literal.\n",
      "timestamp": 1660334821
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpwdo8pw3s.js:22:12)\n    at Object.<anonymous> (/tmp/tmpwdo8pw3s.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334817
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            result += s[i].toLowerCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpvngc8zg7.js:22:12)\n    at Object.<anonymous> (/tmp/tmpvngc8zg7.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334817
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpwdo8pw3s.js:22:12)\n    at Object.<anonymous> (/tmp/tmpwdo8pw3s.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334817
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            newString += s[i].toLowerCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmp6hjat3h8.js:22:12)\n    at Object.<anonymous> (/tmp/tmp6hjat3h8.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334822
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            result += s.charAt(i).toUpperCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpuq8vu9qz.js:25:12)\n    at Object.<anonymous> (/tmp/tmpuq8vu9qz.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334821
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmp_zkxfcib.js:22:12)\n    at Object.<anonymous> (/tmp/tmp_zkxfcib.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            result += s[i].toLowerCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpvngc8zg7.js:22:12)\n    at Object.<anonymous> (/tmp/tmpvngc8zg7.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334817
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            newString += s[i].toUpperCase();\n        } else {\n            newString += s[i].toLowerCase();\n        }\n    }\n    return newString;\n}\nsolve(\"Hello World\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpowik_bj2.js:89:12)\n    at Object.<anonymous> (/tmp/tmpowik_bj2.js:98:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334822
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpwdo8pw3s.js:22:12)\n    at Object.<anonymous> (/tmp/tmpwdo8pw3s.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334817
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n\tlet result = '';\n\tfor (let i = 0; i < s.length; i++){\n\t\tif (s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n\t\t\tresult += s.charAt(i).toLowerCase();\n\t\t} else {\n\t\t\tresult += s.charAt(i);\n\t\t}\n\t}\n\treturn result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmp5_7o9hu8.js:22:12)\n    at Object.<anonymous> (/tmp/tmp5_7o9hu8.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334822
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n\tlet result = '';\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n\t\t\tresult += s.charAt(i).toLowerCase();\n\t\t} else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n\t\t\tresult += s.charAt(i).toUpperCase();\n\t\t} else {\n\t\t\tresult += s.charAt(i);\n\t\t}\n\t}\n\treturn result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmp6v46rb48.js:25:12)\n    at Object.<anonymous> (/tmp/tmp6v46rb48.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334822
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpa4mn2qms.js:22:12)\n    at Object.<anonymous> (/tmp/tmpa4mn2qms.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    return s.split('').map(c => c.toLowerCase() === c ? c.toUpperCase() : c.toLowerCase()).join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp2_jv2p_g.js:14:12)\n    at Object.<anonymous> (/tmp/tmp2_jv2p_g.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    if (s.length === 0) {\n        return s;\n    }\n    let lower = true;\n    let upper = true;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            if (lower) {\n                s[i] = s[i].toUpperCase();\n                lower = false;\n            } else {\n                s[i] = s[i].toLowerCase();\n                upper = false;\n            }\n        } else {\n            if (upper) {\n                s[i] = s[i].toLowerCase();\n                upper = false;\n            } else {\n                s[i] = s[i].toUpperCase();\n                lower = false;\n            }\n        }\n    }\n    return s;\n}\nconsole.log(solve(\"AbC\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"abc\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFgHi\"));\nconsole.log(solve(\"aBcDeFgHiJ\"));\nconsole.log(solve(\"aBcDeFgHiJk\"));\nconsole.log(solve(\"aBcDeFgHiJkl\"));\nconsole.log(solve(\"aBcDeFgHiJklM\"));\nconsole.log(solve(\"aBcDeFgHiJklMno\"));\nconsole.log(solve(\"aBcDeFgHiJklMnoP\"));\nconsole.log(solve(\"aBcDeFgHiJklMnoPq\"));\nconsole.log(solve(\"aBcDeFgHiJklMnoPqr\"));\nconsole.log(solve(\"aBcDeFgHiJklMnoPqrst\"));\nconsole.log(solve(\"aBcDeFgHiJklMnoPqrstu\"));\nconsole.log(solve(\"aBcDeFgHiJklMnoPqrstuv\"));\nconsole.log(solve(\"aBcDeFgHiJklMnoPqrstuvw\"));\nconsole.log(solve(\"aBcDeFgHiJklMnoPqrstuvwx\"));\nconsole.log(solve(\"aBcDeFgHiJklMnoPqrstuvwxy\"));\nconsole.log(solve(\"aBcDeFgHiJklMnoPqrstuvwxyz\"));\nconsole.log(solve(\"aBcDeFgHiJklMnoPqrstuvwxyza\"));\nconsole.log(solve(\"aBcDeFgHiJklMnoPqrstuvwxyzab\"));\nconsole.log(solve(\"aBcDeFgHiJklMnoPqrstuvwxyzabc\"));\nconsole.log(solve(\"aBcDeFgHiJklMnoP\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcrk3drbq.ts(58,36): error TS1002: Unterminated string literal.\n../../../../tmp/tmpcrk3drbq.ts(59,1): error TS1005: ',' expected.\n../../../../tmp/tmpcrk3drbq.ts(59,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334821
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpa4mn2qms.js:22:12)\n    at Object.<anonymous> (/tmp/tmpa4mn2qms.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            newString += s[i].toUpperCase();\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            newString += s[i].toLowerCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpc4dg3nc5.js:26:12)\n    at Object.<anonymous> (/tmp/tmpc4dg3nc5.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334821
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            newString += s.charAt(i).toUpperCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,javascript |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0x0vl5lq.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmp0x0vl5lq.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0x0vl5lq.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmp0x0vl5lq.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0x0vl5lq.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmp0x0vl5lq.ts(22,6): error TS1005: ';' expected.\n../../../../tmp/tmp0x0vl5lq.ts(22,30): error TS1109: Expression expected.\n../../../../tmp/tmp0x0vl5lq.ts(24,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334824
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let reversedString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            reversedString += s[i].toUpperCase();\n        } else {\n            reversedString += s[i];\n        }\n    }\n    return reversedString;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ASDF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmps6ssir19.js:22:12)\n    at Object.<anonymous> (/tmp/tmps6ssir19.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ASDF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334824
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            newString += s.charAt(i).toUpperCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\n*/\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpulbikdv9.ts(20,1): error TS1109: Expression expected.\n../../../../tmp/tmpulbikdv9.ts(20,3): error TS1161: Unterminated regular expression literal.\n",
      "timestamp": 1660334824
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            result += s[i].toLowerCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpsm1iejfv.js:22:12)\n    at Object.<anonymous> (/tmp/tmpsm1iejfv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\nsolve(\" Hello World\");\nsolve(\"Hello World\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphxro03a1.ts(83,19): error TS1002: Unterminated string literal.\n../../../../tmp/tmphxro03a1.ts(84,1): error TS1005: ',' expected.\n../../../../tmp/tmphxro03a1.ts(84,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334824
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpwdo8pw3s.js:22:12)\n    at Object.<anonymous> (/tmp/tmpwdo8pw3s.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334817
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i].toLowerCase();\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmphu55glfe.js:22:12)\n    at Object.<anonymous> (/tmp/tmphu55glfe.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334825
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let reversedString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            reversedString += s.charAt(i).toLowerCase();\n        } else {\n            reversedString += s.charAt(i);\n        }\n    }\n    return reversedString;\n}\n</code>\n<|/ a tags=javascript,string,arrays |>\n<| c |>\nThanks for your answer! I appreciate it!\n<|/ c |>\n<| a tags=javascript,string,arrays |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu8kun6zc.ts(18,2): error TS1110: Type expected.\n../../../../tmp/tmpu8kun6zc.ts(18,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpu8kun6zc.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmpu8kun6zc.ts(19,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpu8kun6zc.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmpu8kun6zc.ts(20,7): error TS1109: Expression expected.\n../../../../tmp/tmpu8kun6zc.ts(21,8): error TS1005: ';' expected.\n../../../../tmp/tmpu8kun6zc.ts(21,12): error TS1005: '(' expected.\n../../../../tmp/tmpu8kun6zc.ts(21,17): error TS1005: ';' expected.\n../../../../tmp/tmpu8kun6zc.ts(21,25): error TS1005: ';' expected.\n../../../../tmp/tmpu8kun6zc.ts(21,27): error TS1005: ')' expected.\n../../../../tmp/tmpu8kun6zc.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpu8kun6zc.ts(22,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpu8kun6zc.ts(23,2): error TS1109: Expression expected.\n../../../../tmp/tmpu8kun6zc.ts(23,6): error TS1005: ';' expected.\n../../../../tmp/tmpu8kun6zc.ts(23,37): error TS1109: Expression expected.\n../../../../tmp/tmpu8kun6zc.ts(25,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334824
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpa4mn2qms.js:22:12)\n    at Object.<anonymous> (/tmp/tmpa4mn2qms.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            newString += s[i].toUpperCase();\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            newString += s[i].toLowerCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,javascript,algorithm |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyv99v0cc.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmpyv99v0cc.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpyv99v0cc.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpyv99v0cc.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpyv99v0cc.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpyv99v0cc.ts(22,6): error TS1005: ';' expected.\n../../../../tmp/tmpyv99v0cc.ts(22,40): error TS1109: Expression expected.\n../../../../tmp/tmpyv99v0cc.ts(24,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334824
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpwdo8pw3s.js:22:12)\n    at Object.<anonymous> (/tmp/tmpwdo8pw3s.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334817
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            newString += s.charAt(i).toUpperCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\nconsole.log(solve(\"AaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"aAaBbCc\"));\nconsole.log(solve(\"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmxgzweh8.ts(56,20): error TS1002: Unterminated string literal.\n../../../../tmp/tmpmxgzweh8.ts(57,1): error TS1005: ',' expected.\n../../../../tmp/tmpmxgzweh8.ts(57,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334824
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            newString += s[i].toLowerCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmprga69z05.js:22:12)\n    at Object.<anonymous> (/tmp/tmprga69z05.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            result += s[i].toLowerCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nconsole.log(solve('abc'));\nconsole.log(solve('abB'));\nconsole.log(solve('abBA'));\nconsole.log(solve('abbA'));\nconsole.log(solve('abbAB'));\nconsole.log(solve('abbABc'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(solve('abbABcD'));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplv4ouqo1.ts(68,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334824
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpwdo8pw3s.js:22:12)\n    at Object.<anonymous> (/tmp/tmpwdo8pw3s.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334817
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            newString += s[i].toLowerCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmp6hjat3h8.js:22:12)\n    at Object.<anonymous> (/tmp/tmp6hjat3h8.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334822
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            result += s.charAt(i).toUpperCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpsaw3m6jf.js:25:12)\n    at Object.<anonymous> (/tmp/tmpsaw3m6jf.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    if (s.length === 0) {\n        return \"\";\n    }\n    let lower = true;\n    let upper = true;\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            upper = false;\n        }\n        if (s[i].toLowerCase() === s[i]) {\n            lower = false;\n        }\n        if (upper && lower) {\n            result += s[i].toUpperCase();\n        } else if (upper) {\n            result += s[i].toLowerCase();\n        } else if (lower) {\n            result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if the string contains multiple letters.\n<|/ c |>\n<| c |>\nIt doesn't work because you didn't test the case of the letters. You only tested the case of the entire string. Try it with `\"ABC\"`.\n<|/ c |>\n<| c |>\nI tested it and it works. I even tested it with multiple letters and it worked. Can you please elaborate on what is not working?\n<|/ c |>\n<| c |>\nIt doesn't work because you didn't test the case of the letters. You only tested the case of the entire string. Try it with `\"ABC\"`.\n<|/ c |>\n<| c |>\nI tested it and it works. I even tested it with multiple letters and it worked. Can you please elaborate on what is not working?\n<|/ c |>\n<| a |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjo_ro9se.ts(31,2): error TS1110: Type expected.\n../../../../tmp/tmpjo_ro9se.ts(31,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpjo_ro9se.ts(32,2): error TS1109: Expression expected.\n../../../../tmp/tmpjo_ro9se.ts(32,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpjo_ro9se.ts(33,2): error TS1109: Expression expected.\n../../../../tmp/tmpjo_ro9se.ts(33,7): error TS1109: Expression expected.\n../../../../tmp/tmpjo_ro9se.ts(34,6): error TS1005: ';' expected.\n../../../../tmp/tmpjo_ro9se.ts(34,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpjo_ro9se.ts(34,59): error TS1002: Unterminated string literal.\n../../../../tmp/tmpjo_ro9se.ts(35,2): error TS1109: Expression expected.\n../../../../tmp/tmpjo_ro9se.ts(35,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpjo_ro9se.ts(36,2): error TS1109: Expression expected.\n../../../../tmp/tmpjo_ro9se.ts(36,7): error TS1109: Expression expected.\n../../",
      "timestamp": 1660334825
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char >= 'a' && char <= 'z') {\n            result += char.toUpperCase();\n        } else if (char >= 'A' && char <= 'Z') {\n            result += char.toLowerCase();\n        } else {\n            result += char;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript,string |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd2q49b5p.ts(21,2): error TS1110: Type expected.\n../../../../tmp/tmpd2q49b5p.ts(21,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpd2q49b5p.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpd2q49b5p.ts(22,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpd2q49b5p.ts(23,2): error TS1109: Expression expected.\n../../../../tmp/tmpd2q49b5p.ts(23,6): error TS1005: ';' expected.\n../../../../tmp/tmpd2q49b5p.ts(23,16): error TS1109: Expression expected.\n../../../../tmp/tmpd2q49b5p.ts(25,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334825
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpwdo8pw3s.js:22:12)\n    at Object.<anonymous> (/tmp/tmpwdo8pw3s.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334817
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            result += s.charAt(i).toUpperCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpsaw3m6jf.js:25:12)\n    at Object.<anonymous> (/tmp/tmpsaw3m6jf.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            newString += s.charAt(i).toUpperCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\n*/\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpulbikdv9.ts(20,1): error TS1109: Expression expected.\n../../../../tmp/tmpulbikdv9.ts(20,3): error TS1161: Unterminated regular expression literal.\n",
      "timestamp": 1660334824
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpjjzsxwcr.js:22:12)\n    at Object.<anonymous> (/tmp/tmpjjzsxwcr.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334825
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            newString += s[i].toLowerCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,string |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpflw_i2ed.ts(18,2): error TS1110: Type expected.\n../../../../tmp/tmpflw_i2ed.ts(18,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpflw_i2ed.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmpflw_i2ed.ts(19,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpflw_i2ed.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmpflw_i2ed.ts(20,6): error TS1005: ';' expected.\n../../../../tmp/tmpflw_i2ed.ts(20,30): error TS1109: Expression expected.\n../../../../tmp/tmpflw_i2ed.ts(22,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334825
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,javascript,arrays |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcm26pott.ts(18,2): error TS1110: Type expected.\n../../../../tmp/tmpcm26pott.ts(18,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpcm26pott.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmpcm26pott.ts(19,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpcm26pott.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmpcm26pott.ts(20,6): error TS1005: ';' expected.\n../../../../tmp/tmpcm26pott.ts(20,16): error TS1109: Expression expected.\n../../../../tmp/tmpcm26pott.ts(22,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334825
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,string,algorithm |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1xyi081c.ts(18,2): error TS1110: Type expected.\n../../../../tmp/tmp1xyi081c.ts(18,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp1xyi081c.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmp1xyi081c.ts(19,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp1xyi081c.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmp1xyi081c.ts(20,6): error TS1005: ';' expected.\n../../../../tmp/tmp1xyi081c.ts(20,40): error TS1109: Expression expected.\n../../../../tmp/tmp1xyi081c.ts(22,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334825
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/[a-z]/)) {\n            newString += s[i].toUpperCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HELLO\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"aB\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBcde\"));\nconsole.log(solve(\"aBcDe\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\"));\nconsole.log(solve(\"aBcDeF\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp90p24u1u.ts(66,26): error TS1002: Unterminated string literal.\n../../../../tmp/tmp90p24u1u.ts(67,1): error TS1005: ',' expected.\n../../../../tmp/tmp90p24u1u.ts(67,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334825
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char >= 'a' && char <= 'z') {\n            result += char.toUpperCase();\n        } else if (char >= 'A' && char <= 'Z') {\n            result += char.toLowerCase();\n        } else {\n            result += char;\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmprt5evrxj.js:27:12)\n    at Object.<anonymous> (/tmp/tmprt5evrxj.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334825
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char >= 'a' && char <= 'z') {\n            result += char.charCodeAt(0) - 96;\n        } else if (char >= 'A' && char <= 'Z') {\n            result += char.charCodeAt(0) - 65;\n        } else {\n            result += char;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if the string contains only letters. For example, \"a\" returns \"a\".\n<|/ c |>\n<| c |>\nYes, I forgot about that. Thanks for pointing it out. I've updated my answer.\n<|/ c |>\n<| a tags=javascript,string,algorithm |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpamdr5ctf.ts(21,2): error TS1110: Type expected.\n../../../../tmp/tmpamdr5ctf.ts(21,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpamdr5ctf.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpamdr5ctf.ts(22,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpamdr5ctf.ts(23,2): error TS1109: Expression expected.\n../../../../tmp/tmpamdr5ctf.ts(23,7): error TS1109: Expression expected.\n../../../../tmp/tmpamdr5ctf.ts(24,6): error TS1005: ';' expected.\n../../../../tmp/tmpamdr5ctf.ts(24,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpamdr5ctf.ts(24,85): error TS1002: Unterminated string literal.\n../../../../tmp/tmpamdr5ctf.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmpamdr5ctf.ts(25,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpamdr5ctf.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmpamdr5ctf.ts(26,7): error TS1109: Expression expected.\n../../../../tmp/tmpamdr5ctf.ts(27,8): error TS1005: ';' expected.\n../../../../tmp/tmpamdr5ctf.ts(27,15): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpamdr5ctf.ts(27,34): error TS1005: ';' expected.\n../../../../tmp/tmpamdr5ctf.ts(27,38): error TS1005: '(' expected.\n../../../../tmp/tmpamdr5ctf.ts(27,47): error TS1005: ';' expected.\n../../../../tmp/tmpamdr5ctf.ts(27,50): error TS1005: ';' expected.\n../../../../tmp/tmpamdr5ctf.ts(27,56): error TS1005: ')' expected.\n../../../../tmp/tmpamdr5ctf.ts(27,78): error TS1002: Unterminated string literal.\n../../../../tmp/tmpamdr5ctf.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmpamdr5ctf.ts(28,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpamdr5ctf.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmpamdr5ctf.ts(29,6): error TS1005: ';' expected.\n../../../../tmp/tmpamdr5ctf.ts(29,40): error TS1109: Expression expected.\n../../../../tmp/tmpamdr5ctf.ts(31,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334825
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    if (s.length === 0) {\n        return s;\n    }\n    let lower = true;\n    let upper = false;\n    for (let i = 0; i < s.length; i += 1) {\n        const c = s[i];\n        if (c.toLowerCase() === c) {\n            lower = false;\n            upper = true;\n        } else if (c.toUpperCase() === c) {\n            upper = false;\n            lower = true;\n        } else {\n            lower = false;\n            upper = false;\n        }\n    }\n    if (lower) {\n        return s.toLowerCase();\n    }\n    return s.toUpperCase();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ASDF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmp8ztwpme0.js:36:12)\n    at Object.<anonymous> (/tmp/tmp8ztwpme0.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ASDF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334825
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    return s.split('').map(c => c.toUpperCase() === c ? c.toLowerCase() : c.toUpperCase()).join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp_e2bw79p.js:14:12)\n    at Object.<anonymous> (/tmp/tmp_e2bw79p.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334825
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let reversedString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            reversedString += s.charAt(i).toLowerCase();\n        } else {\n            reversedString += s.charAt(i);\n        }\n    }\n    return reversedString;\n}\n</code>\n<|/ a tags=javascript,string,arrays |>\n<| a |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpx2sikhfj.ts(18,2): error TS1110: Type expected.\n../../../../tmp/tmpx2sikhfj.ts(18,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpx2sikhfj.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmpx2sikhfj.ts(19,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpx2sikhfj.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmpx2sikhfj.ts(20,7): error TS1109: Expression expected.\n../../../../tmp/tmpx2sikhfj.ts(22,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334825
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            result += s.charAt(i).toUpperCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpsaw3m6jf.js:25:12)\n    at Object.<anonymous> (/tmp/tmpsaw3m6jf.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            result += s[i].toLowerCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpsm1iejfv.js:22:12)\n    at Object.<anonymous> (/tmp/tmpsm1iejfv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let reversedString = s.split('').reverse().join('');\n    return reversedString.split('').map(c => c.toUpperCase()).join('');\n}\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('Hello World');\nsolve('\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpikjj4bbu.ts(91,8): error TS1002: Unterminated string literal.\n../../../../tmp/tmpikjj4bbu.ts(92,1): error TS1005: ',' expected.\n../../../../tmp/tmpikjj4bbu.ts(92,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334825
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            result += s.charAt(i).toUpperCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpsaw3m6jf.js:25:12)\n    at Object.<anonymous> (/tmp/tmpsaw3m6jf.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            newString += s[i].toLowerCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmprga69z05.js:22:12)\n    at Object.<anonymous> (/tmp/tmprga69z05.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() === s[i].toUpperCase()) {\n            newString += s[i].toUpperCase();\n        } else {\n            newString += s[i].toLowerCase();\n        }\n    }\n    return newString;\n}\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"abc\"));\nconsole.log(solve(\"AaBc\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpiqmhohcl.ts(70,20): error TS1002: Unterminated string literal.\n../../../../tmp/tmpiqmhohcl.ts(71,1): error TS1005: ',' expected.\n../../../../tmp/tmpiqmhohcl.ts(71,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334825
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmp_zkxfcib.js:22:12)\n    at Object.<anonymous> (/tmp/tmp_zkxfcib.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char >= 'a' && char <= 'z') {\n            result += char.toUpperCase();\n        } else if (char >= 'A' && char <= 'Z') {\n            result += char.toLowerCase();\n        } else {\n            result += char;\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmprt5evrxj.js:27:12)\n    at Object.<anonymous> (/tmp/tmprt5evrxj.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334825
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    return s.split('').map(c => c.toLowerCase() === c ? c.toUpperCase() : c.toLowerCase()).join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpcofwsens.js:14:12)\n    at Object.<anonymous> (/tmp/tmpcofwsens.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            newString += s.charAt(i).toUpperCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmppicu8mrx.js:25:12)\n    at Object.<anonymous> (/tmp/tmppicu8mrx.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334827
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpa4mn2qms.js:22:12)\n    at Object.<anonymous> (/tmp/tmpa4mn2qms.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    return s.split('').map(c => c.toLowerCase() === c ? c.toUpperCase() : c.toLowerCase()).join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpcofwsens.js:14:12)\n    at Object.<anonymous> (/tmp/tmpcofwsens.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char >= 'a' && char <= 'z') {\n            result += char.toUpperCase();\n        } else if (char >= 'A' && char <= 'Z') {\n            result += char.toLowerCase();\n        } else {\n            result += char;\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp7pryyo1m.js:27:12)\n    at Object.<anonymous> (/tmp/tmp7pryyo1m.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334828
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            newString += s.charAt(i).toUpperCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpj8x_j015.ts(77,26): error TS1002: Unterminated string literal.\n../../../../tmp/tmpj8x_j015.ts(78,1): error TS1005: ',' expected.\n../../../../tmp/tmpj8x_j015.ts(78,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334821
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    return s.split('').map(c => c.toUpperCase() === c ? c.toLowerCase() : c.toUpperCase()).join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp_e2bw79p.js:14:12)\n    at Object.<anonymous> (/tmp/tmp_e2bw79p.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334825
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            newString += s.charAt(i).toUpperCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\n</code>\n<|/ a tags=string,javascript,arrays |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7k849lrr.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmp7k849lrr.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp7k849lrr.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmp7k849lrr.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp7k849lrr.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmp7k849lrr.ts(22,6): error TS1005: ';' expected.\n../../../../tmp/tmp7k849lrr.ts(22,16): error TS1109: Expression expected.\n../../../../tmp/tmp7k849lrr.ts(24,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334828
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n\tlet result = '';\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n\t\t\tresult += s.charAt(i).toLowerCase();\n\t\t} else {\n\t\t\tresult += s.charAt(i);\n\t\t}\n\t}\n\treturn result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmp5z113ywp.js:22:12)\n    at Object.<anonymous> (/tmp/tmp5z113ywp.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334821
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            newString += s.charAt(i).toUpperCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\nconsole.log(solve(\"AbC\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfogn9q8m.ts(68,20): error TS1002: Unterminated string literal.\n../../../../tmp/tmpfogn9q8m.ts(69,1): error TS1005: ',' expected.\n../../../../tmp/tmpfogn9q8m.ts(69,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334817
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    if (s.length === 0) {\n        return '';\n    }\n    let lower = true;\n    let upper = true;\n    let i = 0;\n    while (i < s.length) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            if (lower) {\n                s[i] = s[i].toUpperCase();\n                lower = false;\n            } else {\n                s[i] = s[i].toLowerCase();\n                upper = false;\n            }\n        } else {\n            if (upper) {\n                s[i] = s[i].toLowerCase();\n                upper = false;\n            } else {\n                s[i] = s[i].toUpperCase();\n                lower = true;\n            }\n        }\n        i++;\n    }\n    return s;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpohfdvms5.ts(17,17): error TS2542: Index signature in type 'String' only permits reading.\n../../../../tmp/tmpohfdvms5.ts(20,17): error TS2542: Index signature in type 'String' only permits reading.\n../../../../tmp/tmpohfdvms5.ts(25,17): error TS2542: Index signature in type 'String' only permits reading.\n../../../../tmp/tmpohfdvms5.ts(28,17): error TS2542: Index signature in type 'String' only permits reading.\n",
      "timestamp": 1660334828
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    if (s.length === 0) {\n        return \"\";\n    }\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            newString += s[i].toUpperCase();\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            newString += s[i].toLowerCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpuybn7iu1.js:29:12)\n    at Object.<anonymous> (/tmp/tmpuybn7iu1.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334828
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n\tlet result = '';\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet char = s[i];\n\t\tif (char >= 'a' && char <= 'z') {\n\t\t\tresult += char.toUpperCase();\n\t\t} else if (char >= 'A' && char <= 'Z') {\n\t\t\tresult += char.toLowerCase();\n\t\t} else {\n\t\t\tresult += char;\n\t\t}\n\t}\n\treturn result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpr23tq_tc.js:27:12)\n    at Object.<anonymous> (/tmp/tmpr23tq_tc.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334828
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            newString += s[i].toLowerCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmprga69z05.js:22:12)\n    at Object.<anonymous> (/tmp/tmprga69z05.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i].toLowerCase();\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmphu55glfe.js:22:12)\n    at Object.<anonymous> (/tmp/tmphu55glfe.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334825
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\n*/\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps50ljzb3.ts(18,1): error TS1109: Expression expected.\n../../../../tmp/tmps50ljzb3.ts(18,3): error TS1161: Unterminated regular expression literal.\n",
      "timestamp": 1660334828
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            newString += s.charAt(i).toUpperCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HELLO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"heLLO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\"));\nconsole.log(solve(\"hEllO\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8l0hnt9l.ts(68,25): error TS1002: Unterminated string literal.\n../../../../tmp/tmp8l0hnt9l.ts(69,1): error TS1005: ',' expected.\n../../../../tmp/tmp8l0hnt9l.ts(69,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334828
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    return s.split('').map(c => c.toLowerCase() === 'a' ? 'A' : c.toUpperCase()).join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ASDF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpixy49vxy.js:13:12)\n    at Object.<anonymous> (/tmp/tmpixy49vxy.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ASDF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334828
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i].toLowerCase();\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if the string contains only lowercase letters.\n<|/ c |>\n<| c |>\nYes, you are right. I didn't notice that case. Thank you for pointing it out.\n<|/ c |>\n<| a |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwf1zgsb1.ts(18,2): error TS1110: Type expected.\n../../../../tmp/tmpwf1zgsb1.ts(18,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpwf1zgsb1.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmpwf1zgsb1.ts(19,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpwf1zgsb1.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmpwf1zgsb1.ts(20,7): error TS1109: Expression expected.\n../../../../tmp/tmpwf1zgsb1.ts(21,6): error TS1005: ';' expected.\n../../../../tmp/tmpwf1zgsb1.ts(21,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpwf1zgsb1.ts(21,65): error TS1002: Unterminated string literal.\n../../../../tmp/tmpwf1zgsb1.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpwf1zgsb1.ts(22,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpwf1zgsb1.ts(23,2): error TS1109: Expression expected.\n../../../../tmp/tmpwf1zgsb1.ts(23,7): error TS1109: Expression expected.\n../../",
      "timestamp": 1660334828
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,javascript,reverse |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp37vxz33z.ts(18,2): error TS1110: Type expected.\n../../../../tmp/tmp37vxz33z.ts(18,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp37vxz33z.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmp37vxz33z.ts(19,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp37vxz33z.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmp37vxz33z.ts(20,6): error TS1005: ';' expected.\n../../../../tmp/tmp37vxz33z.ts(20,38): error TS1109: Expression expected.\n../../../../tmp/tmp37vxz33z.ts(22,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334828
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            result += s.charAt(i).toUpperCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question. To critique or request clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/27859068)\n<|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to reverse the case of a string. He also provided an example input and output. He also provided a description of the algorithm he was trying to implement.\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique or request clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/27859068)\n<|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to reverse the case of a string. He also provided an example input and output. He also provided a description of the algorithm he was trying to implement.\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique or request clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/27859068)\n<|/ c |>\n<| a tags=javascript,algorithm |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqb91sttf.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmpqb91sttf.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpqb91sttf.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpqb91sttf.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpqb91sttf.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpqb91sttf.ts(22,7): error TS1109: Expression expected.\n../../../../tmp/tmpqb91sttf.ts(23,6): error TS1005: ';' expected.\n../../../../tmp/tmpqb91sttf.ts(23,11): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqb91sttf.ts(23,15): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqb91sttf.ts(23,23): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqb91sttf.ts(23,26): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqb91sttf.ts(23,33): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqb91sttf.ts(23,36): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqb91sttf.ts(23,53): error TS1005: ';' expected.\n../../../../tmp/tmpqb91sttf.ts(23,62): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqb91sttf.ts(23,65): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqb91sttf.ts(23,73): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqb91sttf.ts(23,87): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqb91sttf.ts(23,92): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqb91sttf.ts(23,109): error TS1005: ';' expected.\n../../../../tmp/tmpqb91sttf.ts(23,111): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqb91sttf.ts(23,119): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqb91sttf.ts(23,125): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqb91sttf.ts(23,137): error TS1003: Identifier expected.\n../../../../tmp/tmpqb91sttf.ts(23,145): error TS1005: ',' expected.\n../../../..",
      "timestamp": 1660334828
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let reversedString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            reversedString += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            reversedString += s.charAt(i).toUpperCase();\n        } else {\n            reversedString += s.charAt(i);\n        }\n    }\n    return reversedString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpc7ezflz7.js:25:12)\n    at Object.<anonymous> (/tmp/tmpc7ezflz7.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334828
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            newString += s.charAt(i).toUpperCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmppicu8mrx.js:25:12)\n    at Object.<anonymous> (/tmp/tmppicu8mrx.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334827
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            result += s[i].toLowerCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpsm1iejfv.js:22:12)\n    at Object.<anonymous> (/tmp/tmpsm1iejfv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            newString += s[i].toLowerCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\n</code>\n<|/ a tags=string,javascript |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpl2xn5nbv.ts(18,2): error TS1110: Type expected.\n../../../../tmp/tmpl2xn5nbv.ts(18,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpl2xn5nbv.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmpl2xn5nbv.ts(19,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpl2xn5nbv.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmpl2xn5nbv.ts(20,6): error TS1005: ';' expected.\n../../../../tmp/tmpl2xn5nbv.ts(20,16): error TS1109: Expression expected.\n../../../../tmp/tmpl2xn5nbv.ts(22,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334828
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++){\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n            result += s.charAt(i).toLowerCase();\n        }\n        else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n            result += s.charAt(i).toUpperCase();\n        }\n        else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript,string,arrays |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2xvo00co.ts(22,2): error TS1110: Type expected.\n../../../../tmp/tmp2xvo00co.ts(22,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp2xvo00co.ts(23,2): error TS1109: Expression expected.\n../../../../tmp/tmp2xvo00co.ts(23,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp2xvo00co.ts(24,2): error TS1109: Expression expected.\n../../../../tmp/tmp2xvo00co.ts(24,6): error TS1005: ';' expected.\n../../../../tmp/tmp2xvo00co.ts(24,16): error TS1109: Expression expected.\n../../../../tmp/tmp2xvo00co.ts(26,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334828
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            result += s.charAt(i).toUpperCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmf1k6b55.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmpmf1k6b55.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpmf1k6b55.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpmf1k6b55.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpmf1k6b55.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpmf1k6b55.ts(22,6): error TS1005: ';' expected.\n../../../../tmp/tmpmf1k6b55.ts(22,16): error TS1109: Expression expected.\n../../../../tmp/tmpmf1k6b55.ts(24,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334828
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n\tlet result = '';\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (isLetter(s[i])) {\n\t\t\tresult += s[i].toUpperCase();\n\t\t} else {\n\t\t\tresult += s[i];\n\t\t}\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwcvlq0mc.ts(10,7): error TS2304: Cannot find name 'isLetter'.\n",
      "timestamp": 1660334829
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            newString += s.charAt(i).toUpperCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd91fj68u.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmpd91fj68u.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpd91fj68u.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpd91fj68u.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpd91fj68u.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpd91fj68u.ts(22,6): error TS1005: ';' expected.\n../../../../tmp/tmpd91fj68u.ts(22,16): error TS1109: Expression expected.\n../../../../tmp/tmpd91fj68u.ts(24,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334821
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpwdo8pw3s.js:22:12)\n    at Object.<anonymous> (/tmp/tmpwdo8pw3s.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334817
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            newString += s[i].toLowerCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmprga69z05.js:22:12)\n    at Object.<anonymous> (/tmp/tmprga69z05.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/[a-z]/)) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ASDF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpy0ify6ja.js:22:12)\n    at Object.<anonymous> (/tmp/tmpy0ify6ja.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ASDF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334829
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            result += s.charAt(i).toUpperCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpoe250agc.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmpoe250agc.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpoe250agc.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpoe250agc.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpoe250agc.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpoe250agc.ts(22,6): error TS1005: ';' expected.\n../../../../tmp/tmpoe250agc.ts(22,16): error TS1109: Expression expected.\n../../../../tmp/tmpoe250agc.ts(24,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334828
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            newString += s[i].toUpperCase();\n        } else {\n            newString += s[i].toLowerCase();\n        }\n    }\n    return newString;\n}\nsolve(\"hello\");\nsolve(\"Hello\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hello\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"HellO\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpngxme41e.ts(85,13): error TS1002: Unterminated string literal.\n../../../../tmp/tmpngxme41e.ts(86,1): error TS1005: ',' expected.\n../../../../tmp/tmpngxme41e.ts(86,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334829
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n\tlet result = '';\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n\t\t\tresult += s.charAt(i).toLowerCase();\n\t\t} else {\n\t\t\tresult += s.charAt(i);\n\t\t}\n\t}\n\treturn result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmp5z113ywp.js:22:12)\n    at Object.<anonymous> (/tmp/tmp5z113ywp.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334821
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            newString += s[i].toLowerCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\")\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmph1a5lmjg.ts(81,1): error TS1005: ',' expected.\n../../../../tmp/tmph1a5lmjg.ts(81,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334829
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,javascript,arrays |>\n<| a tags=string,javascript,arrays |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpueaug83c.ts(18,2): error TS1110: Type expected.\n../../../../tmp/tmpueaug83c.ts(18,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpueaug83c.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmpueaug83c.ts(19,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpueaug83c.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmpueaug83c.ts(20,6): error TS1005: ';' expected.\n../../../../tmp/tmpueaug83c.ts(20,37): error TS1109: Expression expected.\n../../../../tmp/tmpueaug83c.ts(22,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334829
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n\tlet result = \"\";\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet char = s[i];\n\t\tif (char >= 'a' && char <= 'z') {\n\t\t\tchar = char - 'a' + 'A';\n\t\t} else if (char >= 'A' && char <= 'Z') {\n\t\t\tchar = char - 'A' + 'a';\n\t\t}\n\t\tresult += char;\n\t}\n\treturn result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpi3d0y9e0.ts(12,11): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpi3d0y9e0.ts(12,18): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpi3d0y9e0.ts(14,11): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpi3d0y9e0.ts(14,18): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660334829
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            newString += s[i].toUpperCase();\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            newString += s[i].toLowerCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpc4dg3nc5.js:26:12)\n    at Object.<anonymous> (/tmp/tmpc4dg3nc5.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334821
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            newString += s[i].toLowerCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmprga69z05.js:22:12)\n    at Object.<anonymous> (/tmp/tmprga69z05.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            newString += s.charAt(i).toUpperCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\n</code>\n<|/ a tags=string,javascript,arrays |>\n<| a tags=string,javascript,arrays |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1v8ut7cd.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmp1v8ut7cd.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp1v8ut7cd.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmp1v8ut7cd.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp1v8ut7cd.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmp1v8ut7cd.ts(22,6): error TS1005: ';' expected.\n../../../../tmp/tmp1v8ut7cd.ts(22,37): error TS1109: Expression expected.\n../../../../tmp/tmp1v8ut7cd.ts(24,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334831
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            newString += s[i].toLowerCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmprga69z05.js:22:12)\n    at Object.<anonymous> (/tmp/tmprga69z05.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    return s.split('').map(c => c.toLowerCase() === c ? c.toUpperCase() : c.toLowerCase()).join('');\n}\nvar result = solve('hello');\nconsole.log(result);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpqodq8qu5.js:16:12)\n    at Object.<anonymous> (/tmp/tmpqodq8qu5.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "HELLO\n",
      "timestamp": 1660334832
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            result += s.charAt(i).toUpperCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript,string |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkflux0b4.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmpkflux0b4.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpkflux0b4.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpkflux0b4.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpkflux0b4.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpkflux0b4.ts(22,6): error TS1005: ';' expected.\n../../../../tmp/tmpkflux0b4.ts(22,16): error TS1109: Expression expected.\n../../../../tmp/tmpkflux0b4.ts(24,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334831
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            result += s.charAt(i).toUpperCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpsaw3m6jf.js:25:12)\n    at Object.<anonymous> (/tmp/tmpsaw3m6jf.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            newString += s[i].toUpperCase();\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            newString += s[i].toLowerCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpc4dg3nc5.js:26:12)\n    at Object.<anonymous> (/tmp/tmpc4dg3nc5.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334821
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            result += s[i].toLowerCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpvngc8zg7.js:22:12)\n    at Object.<anonymous> (/tmp/tmpvngc8zg7.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334817
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpwdo8pw3s.js:22:12)\n    at Object.<anonymous> (/tmp/tmpwdo8pw3s.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334817
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n\tlet result = '';\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet char = s[i];\n\t\tif (char >= 'a' && char <= 'z') {\n\t\t\tresult += char.toUpperCase();\n\t\t} else if (char >= 'A' && char <= 'Z') {\n\t\t\tresult += char.toLowerCase();\n\t\t} else {\n\t\t\tresult += char;\n\t\t}\n\t}\n\treturn result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpr23tq_tc.js:27:12)\n    at Object.<anonymous> (/tmp/tmpr23tq_tc.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334828
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let reversedString = s.split(\"\").reverse().join(\"\");\n    let result = reversedString.split(\"\").map(c => c.toLowerCase() === c ? c.toUpperCase() : c.toLowerCase()).join(\"\");\n    return result;\n}\nsolve(\"Hello World\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve(\"Hello World!\");\nsolve\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'FdSa'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmp7o_vwvhq.js:83:12)\n    at Object.<anonymous> (/tmp/tmp7o_vwvhq.js:92:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'FdSa',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334832
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            newString += s[i].toLowerCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmprga69z05.js:22:12)\n    at Object.<anonymous> (/tmp/tmprga69z05.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    return s.split('').map(c => c.toLowerCase() === 'a' ? 'A' : c.toUpperCase()).join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ASDF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpixy49vxy.js:13:12)\n    at Object.<anonymous> (/tmp/tmpixy49vxy.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ASDF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334828
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\n*/\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps50ljzb3.ts(18,1): error TS1109: Expression expected.\n../../../../tmp/tmps50ljzb3.ts(18,3): error TS1161: Unterminated regular expression literal.\n",
      "timestamp": 1660334828
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n\tlet result = '';\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (isLetter(s[i])) {\n\t\t\tresult += s[i].toUpperCase();\n\t\t} else {\n\t\t\tresult += s[i];\n\t\t}\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwcvlq0mc.ts(10,7): error TS2304: Cannot find name 'isLetter'.\n",
      "timestamp": 1660334829
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n\tlet newString = \"\";\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (isLetter(s[i])) {\n\t\t\tnewString += s[i].toUpperCase();\n\t\t} else {\n\t\t\tnewString += s[i];\n\t\t}\n\t}\n\treturn newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyf81mxc0.ts(10,7): error TS2304: Cannot find name 'isLetter'.\n",
      "timestamp": 1660334831
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let reversedString = s.split('').reverse().join('');\n    let result = reversedString.split('').map(letter => letter.toUpperCase()).join('');\n    return result;\n}\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World!'));\nconsole.log(solve('Hello World!!'));\nconsole.log(solve('Hello World!!!'));\nconsole.log(solve('Hello World!!!!'));\nconsole.log(solve('Hello World!!!!!'));\nconsole.log(solve('Hello World!!!!!!'));\nconsole.log(solve('Hello World!!!!!!!'));\nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello World!!!!!!!')); \nconsole.log(solve('Hello \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpq6zj0ae2.ts(61,26): error TS1002: Unterminated string literal.\n../../../../tmp/tmpq6zj0ae2.ts(62,1): error TS1005: ',' expected.\n../../../../tmp/tmpq6zj0ae2.ts(62,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334832
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            newString += s[i].toLowerCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\n*/\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_58aq3iy.ts(18,1): error TS1109: Expression expected.\n../../../../tmp/tmp_58aq3iy.ts(18,3): error TS1161: Unterminated regular expression literal.\n",
      "timestamp": 1660334831
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n\tlet newString = \"\";\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (isLetter(s[i])) {\n\t\t\tnewString += s[i].toUpperCase();\n\t\t} else {\n\t\t\tnewString += s[i];\n\t\t}\n\t}\n\treturn newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyf81mxc0.ts(10,7): error TS2304: Cannot find name 'isLetter'.\n",
      "timestamp": 1660334831
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    return s.split('').map(c => c.toLowerCase() === c ? c.toUpperCase() : c.toLowerCase()).join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp2_jv2p_g.js:14:12)\n    at Object.<anonymous> (/tmp/tmp2_jv2p_g.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            result += s.charAt(i).toUpperCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript,string |>\n<| c |>\nThis doesn't work for all cases, for example \"aBcD\" -> \"ABCD\" instead of \"abcd\"\n<|/ c |>\n<| c |>\nYes, you are right. Thank you for pointing out. I've updated the answer.\n<|/ c |>\n<| a tags=javascript,string |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpec3c3bew.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmpec3c3bew.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpec3c3bew.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpec3c3bew.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpec3c3bew.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpec3c3bew.ts(22,7): error TS1109: Expression expected.\n../../../../tmp/tmpec3c3bew.ts(23,6): error TS1005: ';' expected.\n../../../../tmp/tmpec3c3bew.ts(23,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpec3c3bew.ts(23,80): error TS1002: Unterminated string literal.\n../../../../tmp/tmpec3c3bew.ts(24,2): error TS1109: Expression expected.\n../../../../tmp/tmpec3c3bew.ts(24,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpec3c3bew.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmpec3c3bew.ts(25,7): error TS1109: Expression expected.\n../../",
      "timestamp": 1660334832
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            result += s.charAt(i).toUpperCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpsaw3m6jf.js:25:12)\n    at Object.<anonymous> (/tmp/tmpsaw3m6jf.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/[a-z]/)) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ASDF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmplry2bfzs.js:22:12)\n    at Object.<anonymous> (/tmp/tmplry2bfzs.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ASDF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            newString += s.charAt(i).toUpperCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\n</code>\n<|/ a tags=javascript,string |>\n<| c |>\nThis doesn't work if the string contains multiple letters.\n<|/ c |>\n<| c |>\nYes, it does. Try it out and see for yourself.\n<|/ c |>\n<| c |>\nYes, it does. Try it out and see for yourself.\n<|/ c |>\n<| c |>\nYes, it does. Try it out and see for yourself.\n<|/ c |>\n<| c |>\nYes, it does. Try it out and see for yourself.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfa5b_t4k.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmpfa5b_t4k.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpfa5b_t4k.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpfa5b_t4k.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpfa5b_t4k.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpfa5b_t4k.ts(22,7): error TS1109: Expression expected.\n../../../../tmp/tmpfa5b_t4k.ts(23,6): error TS1005: ';' expected.\n../../../../tmp/tmpfa5b_t4k.ts(23,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpfa5b_t4k.ts(23,59): error TS1002: Unterminated string literal.\n../../../../tmp/tmpfa5b_t4k.ts(24,2): error TS1109: Expression expected.\n../../../../tmp/tmpfa5b_t4k.ts(24,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpfa5b_t4k.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmpfa5b_t4k.ts(25,7): error TS1109: Expression expected.\n../../",
      "timestamp": 1660334832
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpwdo8pw3s.js:22:12)\n    at Object.<anonymous> (/tmp/tmpwdo8pw3s.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334817
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            result += s.charAt(i).toUpperCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpp4luwvwg.js:25:12)\n    at Object.<anonymous> (/tmp/tmpp4luwvwg.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334832
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n\tlet result = \"\";\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet c = s[i];\n\t\tif (c.match(/[a-z]/)) {\n\t\t\tc = c.toUpperCase();\n\t\t} else {\n\t\t\tc = c.toLowerCase();\n\t\t}\n\t\tresult += c;\n\t}\n\treturn result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp_z8tyab0.js:25:12)\n    at Object.<anonymous> (/tmp/tmp_z8tyab0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334832
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            result += s[i].toLowerCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpvngc8zg7.js:22:12)\n    at Object.<anonymous> (/tmp/tmpvngc8zg7.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334817
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            newString += s[i].toLowerCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\nsolve(`abc`);\nsolve(`abcde`);\nsolve(`abcdef`);\nsolve(`abcdefg`);\nsolve(`abcdefgh`);\nsolve(`abcdefghi`);\nsolve(`abcdefghij`);\nsolve(`abcdefghijk`);\nsolve(`abcdefghijkl`);\nsolve(`abcdefghijklm`);\nsolve(`abcdefghijklmn`);\nsolve(`abcdefghijklmno`);\nsolve(`abcdefghijklmnop`);\nsolve(`abcdefghijklmnopq`);\nsolve(`abcdefghijklmnopqr`);\nsolve(`abcdefghijklmnopqrs`);\nsolve(`abcdefghijklmnopqrsj`);\nsolve(`abcdefghijklmnopqrsjk`);\nsolve(`abcdefghijklmnopqrsjkl`);\nsolve(`abcdefghijklmnopqrsjklm`);\nsolve(`abcdefghijklmnopqrsjklmn`);\nsolve(`abcdefghijklmnopqrsjklmnj`);\nsolve(`abcdefghijklmnopqrsjklmnjk`);\nsolve(`abcdefghijklmnopqrsjklmnjkl`);\nsolve(`abcdefghijklmnopqrsjklmnjklm`);\nsolve(`abcdefghijklmnopqrsjklmnjklmn`);\nsolve(`abcdefghijklmnopqrsjklmnjklmnj`);\nsolve(`abcdefghijklmnopqrsjklmnjklmnjk`);\nsolve(`abcdefghijklmnopqrsjklmnjklmnjkl`);\nsolve(`abcdefghijklmnopqrsjklmnjklmnjklm`);\nsolve(`abcdefghijklmnopqrsjklmnjklmnjklmn`);\nsolve(`abcdefghijklmnopqrsjklmnjklmnjklmnj`);\nsolve(`abcdefghijklmnopqrsjklmnjklmnjklmnjk`);\nsolve(`abcdefghijklmnopqrsjklmnjklmnjklmnjkl`);\nsolve(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmnxi8chx.ts(53,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334832
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpwdo8pw3s.js:22:12)\n    at Object.<anonymous> (/tmp/tmpwdo8pw3s.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334817
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            result += s.charAt(i).toUpperCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpsaw3m6jf.js:25:12)\n    at Object.<anonymous> (/tmp/tmpsaw3m6jf.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            result += s.charAt(i).toUpperCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpsaw3m6jf.js:25:12)\n    at Object.<anonymous> (/tmp/tmpsaw3m6jf.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let reversedString = s.split('').reverse().join('');\n    return reversedString.split('').map(letter => letter.toUpperCase()).join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'FDSA'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmp626iu1si.js:14:12)\n    at Object.<anonymous> (/tmp/tmp626iu1si.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'FDSA',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334832
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n\tlet result = '';\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (isLetter(s[i])) {\n\t\t\tresult += s[i].toUpperCase();\n\t\t} else {\n\t\t\tresult += s[i];\n\t\t}\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwcvlq0mc.ts(10,7): error TS2304: Cannot find name 'isLetter'.\n",
      "timestamp": 1660334829
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let letter = s[i];\n        if (letter >= 'a' && letter <= 'z') {\n            result += letter.toUpperCase();\n        } else {\n            result += letter.toLowerCase();\n        }\n    }\n    return result;\n}\nsolve(\"hello\");\nsolve(\"HellO\");\nsolve(\"HellO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\");\nsolve(\"hELLO\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpktxvt3b5.ts(85,13): error TS1002: Unterminated string literal.\n../../../../tmp/tmpktxvt3b5.ts(86,1): error TS1005: ',' expected.\n../../../../tmp/tmpktxvt3b5.ts(86,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334832
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let reversedString = s.split(\"\").reverse().join(\"\");\n    let reversedString2 = s.split(\"\").reverse().join(\"\");\n    let reversedString3 = s.split(\"\").reverse().join(\"\");\n    let reversedString4 = s.split(\"\").reverse().join(\"\");\n    let reversedString5 = s.split(\"\").reverse().join(\"\");\n    let reversedString6 = s.split(\"\").reverse().join(\"\");\n    let reversedString7 = s.split(\"\").reverse().join(\"\");\n    let reversedString8 = s.split(\"\").reverse().join(\"\");\n    let reversedString9 = s.split(\"\").reverse().join(\"\");\n    let reversedString10 = s.split(\"\").reverse().join(\"\");\n    let reversedString11 = s.split(\"\").reverse().join(\"\");\n    let reversedString12 = s.split(\"\").reverse().join(\"\");\n    let reversedString13 = s.split(\"\").reverse().join(\"\");\n    let reversedString14 = s.split(\"\").reverse().join(\"\");\n    let reversedString15 = s.split(\"\").reverse().join(\"\");\n    let reversedString16 = s.split(\"\").reverse().join(\"\");\n    let reversedString17 = s.split(\"\").reverse().join(\"\");\n    let reversedString18 = s.split(\"\").reverse().join(\"\");\n    let reversedString19 = s.split(\"\").reverse().join(\"\");\n    let reversedString20 = s.split(\"\").reverse().join(\"\");\n    let reversedString21 = s.split(\"\").reverse().join(\"\");\n    let reversedString22 = s.split(\"\").reverse().join(\"\");\n    let reversedString23 = s.split(\"\").reverse().join(\"\");\n    let reversedString24 = s.split(\"\").reverse().join(\"\");\n    let reversedString25 = s.split(\"\").reverse().join(\"\");\n    let reversedString26 = s.split(\"\").reverse().join(\"\");\n    let reversedString27 = s.split(\"\").reverse().join(\"\");\n    let reversedString28 = s.split(\"\").reverse().join(\"\");\n    let reversedString29 = s.split(\"\").reverse().join(\"\");\n    let reversedString30 = s.split(\"\").reverse().join(\"\");\n    let reversedString31 = s.split(\"\").reverse().join(\"\");\n    let reversedString32 = s.split(\"\").reverse().join(\"\");\n    let reversedString33 = s.split(\"\").reverse().join(\"\");\n    let reversedString34 = s.split(\"\").reverse().join(\"\");\n    let reversedString35 = s.split(\"\").reverse().join(\"\");\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp96i8n0ue.ts(60,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334832
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n\tlet newString = \"\";\n\tfor(let i = 0; i < s.length; i++) {\n\t\tif(s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n\t\t\tnewString += s.charAt(i).toLowerCase();\n\t\t} else {\n\t\t\tnewString += s.charAt(i);\n\t\t}\n\t}\n\treturn newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmp_27z8z4d.js:22:12)\n    at Object.<anonymous> (/tmp/tmp_27z8z4d.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334832
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpwdo8pw3s.js:22:12)\n    at Object.<anonymous> (/tmp/tmpwdo8pw3s.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334817
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char >= 'a' && char <= 'z') {\n            result += char.toLowerCase()\n        } else if (char >= 'A' && char <= 'Z') {\n            result += char.toUpperCase()\n        } else {\n            result += char\n        }\n    }\n    return result\n}\nconsole.log(solve('abc'))\nconsole.log(solve('Abc'))\nconsole.log(solve(''))\nconsole.log(solve('abcde'))\nconsole.log(solve('abCdE'))\nconsole.log(solve('abCdEf'))\nconsole.log(solve('abCdEfG'))\nconsole.log(solve('abCdEfGh'))\nconsole.log(solve('abCdEfGhI'))\nconsole.log(solve('abCdEfGhIj'))\nconsole.log(solve('abCdEfGhIjK'))\nconsole.log(solve('abCdEfGhIjKl'))\nconsole.log(solve('abCdEfGhIjKlM'))\nconsole.log(solve('abCdEfGhIjKlMno'))\nconsole.log(solve('abCdEfGhIjKlMnoP'))\nconsole.log(solve('abCdEfGhIjKlMnoPq'))\nconsole.log(solve('abCdEfGhIjKlMnoPqR'))\nconsole.log(solve('abCdEfGhIjKlMnoPqRs'))\nconsole.log(solve('abCdEfGhIjKlMnoPqRsT'))\nconsole.log(solve('abCdEfGhIjKlMnoPqRsTv'))\nconsole.log(solve('abCdEfGhIjKlMnoPqRsTvY'))\nconsole.log(solve('abCdEfGhIjKlMnoPqRsTvYz'))\nconsole.log(solve('abCdEfGhIjKlMnoPqRsTvYz0'))\nconsole.log(solve('abCdEfGhIjKlMnoPqRsTvYz0w'))\nconsole.log(solve('abCdEfGhIjKlMnoPqRsTvYz0wv'))\nconsole.log(solve('abCdEfGhIjKlMnoPqRsTvYz0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpun4_u5hp.ts(46,44): error TS1002: Unterminated string literal.\n../../../../tmp/tmpun4_u5hp.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpun4_u5hp.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334832
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() === s[i].toUpperCase()) {\n            newString += s[i].toUpperCase();\n        } else {\n            newString += s[i].toLowerCase();\n        }\n    }\n    return newString;\n}\nconsole.log(solve(\"Hello World\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!!!\"));\nconsole.log(solve(\"Hello World!!!!\"));\nconsole.log(solve(\"Hello World!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\"));\nconsole.log(solve(\"Hello World!!!!!!!\")\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcpxm5v_h.ts(66,1): error TS1005: ',' expected.\n../../../../tmp/tmpcpxm5v_h.ts(66,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334832
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpwdo8pw3s.js:22:12)\n    at Object.<anonymous> (/tmp/tmpwdo8pw3s.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334817
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() === s[i].toUpperCase()) {\n            newString += s[i].toUpperCase();\n        } else {\n            newString += s[i].toLowerCase();\n        }\n    }\n    return newString;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmp2hzt_pl3.js:22:12)\n    at Object.<anonymous> (/tmp/tmp2hzt_pl3.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334832
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            newString += s[i].toUpperCase();\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            newString += s[i].toLowerCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"abcdefg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\nconsole.log(solve(\"aBcDeFg\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp3g0fih15.js:67:12)\n    at Object.<anonymous> (/tmp/tmp3g0fih15.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "AbCdEfG\nABCDEFG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\nAbCdEfG\n",
      "timestamp": 1660334832
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            newString += s.charAt(i).toUpperCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\nconsole.log(solve(\"Hello World!\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmprr45vj_t.js:79:12)\n    at Object.<anonymous> (/tmp/tmprr45vj_t.js:88:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "Hello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\n",
      "timestamp": 1660334832
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            newString += s[i].toLowerCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmp6hjat3h8.js:22:12)\n    at Object.<anonymous> (/tmp/tmp6hjat3h8.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334822
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            newString += s[i].toUpperCase();\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            newString += s[i].toLowerCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\n</code>\n<|/ a tags=javascript,string |>\n<| c |>\nThis doesn't work if the string contains no letters.\n<|/ c |>\n<| c |>\nYes, I missed that case. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgqw9xmu0.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmpgqw9xmu0.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpgqw9xmu0.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpgqw9xmu0.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpgqw9xmu0.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpgqw9xmu0.ts(22,7): error TS1109: Expression expected.\n../../../../tmp/tmpgqw9xmu0.ts(23,6): error TS1005: ';' expected.\n../../../../tmp/tmpgqw9xmu0.ts(23,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpgqw9xmu0.ts(23,53): error TS1002: Unterminated string literal.\n../../../../tmp/tmpgqw9xmu0.ts(24,2): error TS1109: Expression expected.\n../../../../tmp/tmpgqw9xmu0.ts(24,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpgqw9xmu0.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmpgqw9xmu0.ts(25,7): error TS1109: Expression expected.\n../../",
      "timestamp": 1660334832
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    return s.split('').map(c => c.toLowerCase() === c ? c.toUpperCase() : c.toLowerCase()).join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpcofwsens.js:14:12)\n    at Object.<anonymous> (/tmp/tmpcofwsens.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\n</code>\n<|/ a tags=string,javascript,arrays |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpscj2r4a7.ts(18,2): error TS1110: Type expected.\n../../../../tmp/tmpscj2r4a7.ts(18,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpscj2r4a7.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmpscj2r4a7.ts(19,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpscj2r4a7.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmpscj2r4a7.ts(20,6): error TS1005: ';' expected.\n../../../../tmp/tmpscj2r4a7.ts(20,16): error TS1109: Expression expected.\n../../../../tmp/tmpscj2r4a7.ts(22,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334832
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            newString += s.charAt(i).toLowerCase();\n        } else {\n            newString += s.charAt(i);\n        }\n    }\n    return newString;\n}\nconsole.log(solve(\"Abc\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(solve(\"aBcD\"));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpws779_7o.ts(70,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334833
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let reversedString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            reversedString += s[i].toUpperCase();\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            reversedString += s[i].toLowerCase();\n        } else {\n            reversedString += s[i];\n        }\n    }\n    return reversedString;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,string,algorithm |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpj9uf_bfa.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmpj9uf_bfa.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpj9uf_bfa.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpj9uf_bfa.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpj9uf_bfa.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpj9uf_bfa.ts(22,6): error TS1005: ';' expected.\n../../../../tmp/tmpj9uf_bfa.ts(22,40): error TS1109: Expression expected.\n../../../../tmp/tmpj9uf_bfa.ts(24,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334833
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let lower = c.toLowerCase();\n            let upper = c.toUpperCase();\n            result = result + upper + lower;\n        } else {\n            result = result + c;\n        }\n    }\n    return result;\n}\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HELLO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hello\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AaSsDdFf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpxqzefid8.js:86:12)\n    at Object.<anonymous> (/tmp/tmpxqzefid8.js:95:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AaSsDdFf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "HhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\nHhEeLlLlOo\n",
      "timestamp": 1660334834
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    if (s.length === 0) {\n        return \"\";\n    }\n    let lower = true;\n    let upper = true;\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            upper = false;\n        }\n        if (s[i].toLowerCase() === s[i]) {\n            lower = false;\n        }\n        if (upper && lower) {\n            result += s[i].toUpperCase();\n        } else if (upper) {\n            result += s[i].toLowerCase();\n        } else if (lower) {\n            result += s[i];\n        }\n    }\n    return result;\n}\nconsole.log(solve(\"A\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"ABC\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(solve(\"abA\"));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqiwmjj85.ts(92,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334834
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            newString += s[i].toUpperCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\n</code>\n<|/ a tags=javascript,string |>\n<| c |>\nThis doesn't work if the string starts with a letter\n<|/ c |>\n<| c |>\nIt works, because `toUpperCase()` will convert the first letter to upper case. `toLowerCase()` will convert the first letter to lower case.\n<|/ c |>\n<| c |>\nThis doesn't work if the string starts with a letter\n<|/ c |>\n<| c |>\nIt works, because `toUpperCase()` will convert the first letter to upper case. `toLowerCase()` will convert the first letter to lower case.\n<|/ c |>\n<| c |>\nThis doesn't work if the string starts with a letter\n<|/ c |>\n<| a dscore=5 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphwqwzp8u.ts(18,2): error TS1110: Type expected.\n../../../../tmp/tmphwqwzp8u.ts(18,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmphwqwzp8u.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmphwqwzp8u.ts(19,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmphwqwzp8u.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmphwqwzp8u.ts(20,7): error TS1109: Expression expected.\n../../../../tmp/tmphwqwzp8u.ts(21,6): error TS1005: ';' expected.\n../../../../tmp/tmphwqwzp8u.ts(21,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmphwqwzp8u.ts(21,53): error TS1002: Unterminated string literal.\n../../../../tmp/tmphwqwzp8u.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmphwqwzp8u.ts(22,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmphwqwzp8u.ts(23,2): error TS1109: Expression expected.\n../../../../tmp/tmphwqwzp8u.ts(23,7): error TS1109: Expression expected.\n../../",
      "timestamp": 1660334834
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            newString += s[i].toLowerCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\nconsole.log(solve(\"Hello\"));\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"hElLo\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"hElLo\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"hElLo\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"hElLo\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"hElLo\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"hElLo\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"hElLo\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"hElLo\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"hElLo\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"hElLo\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"hElLo\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hELLO\"));\nconsole.log(solve(\"hElLo\"));\nconsole.log(solve(\"HellO\"));\nconsole.log(solve(\"hello\"));\nconsole.log(solve(\"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu5jqep_7.ts(80,20): error TS1002: Unterminated string literal.\n../../../../tmp/tmpu5jqep_7.ts(81,1): error TS1005: ',' expected.\n../../../../tmp/tmpu5jqep_7.ts(81,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334834
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n\tlet newString = \"\";\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (isLetter(s[i])) {\n\t\t\tnewString += s[i].toUpperCase();\n\t\t} else {\n\t\t\tnewString += s[i];\n\t\t}\n\t}\n\treturn newString;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp07rinnwg.ts(10,7): error TS2304: Cannot find name 'isLetter'.\n",
      "timestamp": 1660334834
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            result += s[i].toLowerCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpsm1iejfv.js:22:12)\n    at Object.<anonymous> (/tmp/tmpsm1iejfv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += s.charAt(i).toLowerCase();\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            result += s.charAt(i).toUpperCase();\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpsaw3m6jf.js:25:12)\n    at Object.<anonymous> (/tmp/tmpsaw3m6jf.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334818
    }
  ]
}