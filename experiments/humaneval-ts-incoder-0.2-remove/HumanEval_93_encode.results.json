{
  "language": "ts",
  "name": "HumanEval_93_encode",
  "results": [
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = \"\";\n        if (letter === \"a\") {\n            encodedLetter = \"b\";\n        } else if (letter === \"b\") {\n            encodedLetter = \"c\";\n        } else if (letter === \"c\") {\n            encodedLetter = \"d\";\n        } else if (letter === \"d\") {\n            encodedLetter = \"e\";\n        } else if (letter === \"e\") {\n            encodedLetter = \"f\";\n        } else if (letter === \"f\") {\n            encodedLetter = \"g\";\n        } else if (letter === \"g\") {\n            encodedLetter = \"h\";\n        } else if (letter === \"h\") {\n            encodedLetter = \"i\";\n        } else if (letter === \"i\") {\n            encodedLetter = \"j\";\n        } else if (letter === \"j\") {\n            encodedLetter = \"k\";\n        } else if (letter === \"k\") {\n            encodedLetter = \"l\";\n        } else if (letter === \"l\") {\n            encodedLetter = \"m\";\n        } else if (letter === \"m\") {\n            encodedLetter = \"n\";\n        } else if (letter === \"n\") {\n            encodedLetter = \"o\";\n        } else if (letter === \"o\") {\n            encodedLetter = \"p\";\n        } else if (letter === \"p\") {\n            encodedLetter = \"q\";\n        } else if (letter === \"q\") {\n            encodedLetter = \"r\";\n        } else if (letter === \"r\") {\n            encodedLetter = \"s\";\n        } else if (letter === \"s\") {\n            encodedLetter = \"t\";\n        } else if (letter === \"t\") {\n            encodedLetter = \"u\";\n        } else if (letter === \"u\") {\n            encodedLetter = \"v\";\n        } else if (letter === \"v\") {\n            encodedLetter = \"w\";\n        } else if (letter === \"w\") {\n            encodedLetter = \"x\";\n        } else if (letter === \"x\") {\n            encodedLetter = \"y\";\n        } else if (letter === \"y\") {\n            encodedLetter = \"z\";\n        } else if (letter === \"z\") {\n            encodedLetter = \"a\";\n        }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpfac46wf7.js:97:12)\n    at Object.<anonymous> (/tmp/tmpfac46wf7.js:103:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334003
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = letter.toUpperCase();\n        let vowelIndex = getVowelIndex(letter);\n        if (vowelIndex === -1) {\n            encodedMessage += letter;\n        } else {\n            let vowel = vowels[vowelIndex];\n            let encodedVowel = vowel.toUpperCase();\n            encodedMessage += encodedVowel;\n            let twoAheadIndex = getTwoAheadVowelIndex(letter);\n            if (twoAheadIndex === -1) {\n                encodedMessage += letter;\n            } else {\n                let twoAheadVowel = vowels[twoAheadIndex];\n                encodedMessage += twoAheadVowel;\n            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8mdxwobd.ts(12,26): error TS2304: Cannot find name 'getVowelIndex'.\n../../../../tmp/tmp8mdxwobd.ts(16,25): error TS2552: Cannot find name 'vowels'. Did you mean 'vowel'?\n../../../../tmp/tmp8mdxwobd.ts(19,33): error TS2304: Cannot find name 'getTwoAheadVowelIndex'.\n../../../../tmp/tmp8mdxwobd.ts(23,37): error TS2552: Cannot find name 'vowels'. Did you mean 'vowel'?\n",
      "timestamp": 1660334003
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newMessage += letter;\n        } else {\n            newMessage += nextLetter;\n        }\n    }\n    return newMessage;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer! I appreciate it! But I still don't understand how I can use that to solve my problem. Can you please explain how I can use that to solve my problem?\n<|/ c |>\n<| c |>\nI added a code example to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer! I appreciate it! But I still don't understand how I can use that to solve my problem. Can you please explain how I can use that to solve my problem?\n<|/ c |>\n<| c |>\nI added a code example to my answer. Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\nI believe this can be done using regular expressions. \n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpovxs0wvr.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmpovxs0wvr.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpovxs0wvr.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpovxs0wvr.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpovxs0wvr.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpovxs0wvr.ts(22,7): error TS1109: Expression expected.\n../../../../tmp/tmpovxs0wvr.ts(23,8): error TS1005: ';' expected.\n../../../../tmp/tmpovxs0wvr.ts(23,12): error TS1005: '(' expected.\n../../../../tmp/tmpovxs0wvr.ts(23,17): error TS1005: ';' expected.\n../../../../tmp/tmpovxs0wvr.ts(23,25): error TS1005: ';' expected.\n../../../../tmp/tmpovxs0wvr.ts(23,27): error TS1005: ')' expected.\n../../../../tmp/tmpovxs0wvr.ts(23,42): error TS1005: ';' expected.\n../../../../tmp/tmpovxs0wvr.ts(23,46): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpovxs0wvr.ts(23,48): error TS1434: Unexpected ",
      "timestamp": 1660334003
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    let vowels = \"aeiou\";\n    let letters = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage.charAt(i);\n        if (vowels.indexOf(letter) > -1) {\n            let index = vowels.indexOf(letter);\n            newMessage = newMessage.slice(0, i) + letters.charAt(index - 1) + newMessage.slice(i + 1);\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbv7ugnzv.js:23:12)\n    at Object.<anonymous> (/tmp/tmpbv7ugnzv.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334003
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpl63qh7ls.js:18:12)\n    at Object.<anonymous> (/tmp/tmpl63qh7ls.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334003
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpl63qh7ls.js:18:12)\n    at Object.<anonymous> (/tmp/tmpl63qh7ls.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334003
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter.toUpperCase();\n        newMessage += newLetter;\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpakvk7r6b.js:19:12)\n    at Object.<anonymous> (/tmp/tmpakvk7r6b.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334003
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\";\n    let encoded: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let index = alphabet.indexOf(letter);\n        if (index != -1) {\n            let nextIndex = index + 1;\n            if (nextIndex < alphabet.length) {\n                let nextLetter = alphabet[nextIndex];\n                let encodedLetter = vowels.indexOf(letter) + vowels.indexOf(nextLetter);\n                encoded = encoded + encodedLetter;\n            }\n        }\n    }\n    return encoded;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpi7fm4wf5.js:28:12)\n    at Object.<anonymous> (/tmp/tmpi7fm4wf5.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334003
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newMessage += letter;\n        } else {\n            newMessage += letter.charCodeAt(0) - 65 + 2;\n        }\n    }\n    return newMessage;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'2162021'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1l93j2pz.js:23:12)\n    at Object.<anonymous> (/tmp/tmp1l93j2pz.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '2162021',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334003
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArray = vowels.split(\"\");\n    for (let i = 0; i < vowelsArray.length; i++) {\n        newMessage = newMessage.replace(vowelsArray[i], vowelsArray[(i + 2) % vowelsArray.length]);\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TaST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpnqxfzky8.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnqxfzky8.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TaST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334003
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    let vowels = \"aeiouAEIOU\";\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage[i];\n        if (vowels.indexOf(letter) > -1) {\n            let index = vowels.indexOf(letter);\n            newMessage = newMessage.substr(0, i) + newMessage.substr(i + 1, 1) + newMessage.substr(i + 2, 1);\n        }\n    }\n    return newMessage;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| a tags=javascript,algorithm |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwyc8wdxp.ts(19,2): error TS1110: Type expected.\n../../../../tmp/tmpwyc8wdxp.ts(19,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpwyc8wdxp.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmpwyc8wdxp.ts(20,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpwyc8wdxp.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpwyc8wdxp.ts(21,6): error TS1005: ';' expected.\n../../../../tmp/tmpwyc8wdxp.ts(21,33): error TS1109: Expression expected.\n../../../../tmp/tmpwyc8wdxp.ts(23,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334003
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowelIndex = letter.charCodeAt(0) - 65;\n        let vowel = String.fromCharCode(vowelIndex);\n        let newLetter = letter.charCodeAt(0) - 2;\n        newMessage += vowel + String.fromCharCode(newLetter);\n    }\n    return newMessage;\n}\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpn0n63za2.ts(99,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334003
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let encodedLetter = letter.toUpperCase();\n    let vowelIndex = encodedLetter.indexOf(\"A\");\n    if (vowelIndex >= 0) {\n      encodedLetter = encodedLetter.replace(vowelIndex, \"B\");\n    }\n    encodedMessage += encodedLetter;\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp03rtca5g.ts(14,45): error TS2769: No overload matches this call.\n  The last overload gave the following error.\n    Argument of type 'number' is not assignable to parameter of type 'string | RegExp'.\n",
      "timestamp": 1660334003
    },
    {
      "exit_code": -1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage[i];\n        newMessage += letter.charCodeAt(0) - 96 + 2;\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334018
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter.toUpperCase();\n        newMessage += newLetter;\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpakvk7r6b.js:19:12)\n    at Object.<anonymous> (/tmp/tmpakvk7r6b.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334003
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\") {\n            encodedMessage += \"A\";\n        } else if (letter === \"e\") {\n            encodedMessage += \"E\";\n        } else if (letter === \"i\") {\n            encodedMessage += \"I\";\n        } else if (letter === \"o\") {\n            encodedMessage += \"O\";\n        } else if (letter === \"u\") {\n            encodedMessage += \"U\";\n        } else {\n            encodedMessage += letter;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmps3gdbx51.js:35:12)\n    at Object.<anonymous> (/tmp/tmps3gdbx51.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334003
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage[i];\n        let vowelIndex = letter.charCodeAt(0) - 97;\n        let vowel = vowels[vowelIndex];\n        newMessage = newMessage.replace(letter, vowel);\n    }\n    return newMessage;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your help! I appreciate it!\n<|/ c |>\n<| c |>\nNo problem! If you found this answer helpful, please upvote it, and mark it as correct by clicking the check mark to the left of the answer. Thanks!\n<|/ c |>\n<| c |>\nI did upvote it, but my reputation isn't high enough to show it publicly.\n<|/ c |>\n<| c |>\nAh, okay. Thanks for the upvote!\n<|/ c |>\n<| a tags=javascript,string,algorithm |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2j4ibb4c.ts(21,2): error TS1110: Type expected.\n../../../../tmp/tmp2j4ibb4c.ts(21,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp2j4ibb4c.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmp2j4ibb4c.ts(22,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp2j4ibb4c.ts(23,2): error TS1109: Expression expected.\n../../../../tmp/tmp2j4ibb4c.ts(23,7): error TS1109: Expression expected.\n../../../../tmp/tmp2j4ibb4c.ts(24,8): error TS1005: ';' expected.\n../../../../tmp/tmp2j4ibb4c.ts(24,12): error TS1005: '(' expected.\n../../../../tmp/tmp2j4ibb4c.ts(24,17): error TS1005: ';' expected.\n../../../../tmp/tmp2j4ibb4c.ts(24,23): error TS1005: ';' expected.\n../../../../tmp/tmp2j4ibb4c.ts(24,25): error TS1005: ')' expected.\n../../../../tmp/tmp2j4ibb4c.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmp2j4ibb4c.ts(25,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp2j4ibb4c.ts(26,2): error TS1109: ",
      "timestamp": 1660334003
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    newMessage = newMessage.toLowerCase();\n    let vowels = \"aeiou\";\n    let vowelsMap = {};\n    for (let i = 0; i < vowels.length; i++) {\n        vowelsMap[vowels[i]] = vowels[i];\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage[i];\n        if (vowelsMap[letter]) {\n            newMessage = newMessage.replace(letter, vowelsMap[letter]);\n        }\n    }\n    return newMessage;\n}\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog\"));\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog.\"));\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog.\"));\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog.\"));\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog.\"));\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog.\"));\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog.\"));\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog.\"));\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog.\"));\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog.\"));\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog.\"));\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog.\"));\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog.\"));\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog.\"));\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog.\"));\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog.\"));\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog.\"));\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog.\"));\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog.\"));\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog.\"));\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog.\"));\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog.\"));\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog.\"));\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog.\"));\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog.\"));\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog.\"));\nconsole.log(encode(\"The quick brown fox jumps \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplwkb98ip.ts(49,47): error TS1002: Unterminated string literal.\n../../../../tmp/tmplwkb98ip.ts(50,1): error TS1005: ',' expected.\n../../../../tmp/tmplwkb98ip.ts(50,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334003
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encoded = message;\n    let vowels = \"aeiou\";\n    let letters = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i = 0; i < encoded.length; i++) {\n        let letter = encoded.charAt(i);\n        if (vowels.indexOf(letter) > -1) {\n            encoded = encoded.replace(letter, letters[vowels.indexOf(letter) + 2]);\n        }\n    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpt6z7m7gs.js:22:12)\n    at Object.<anonymous> (/tmp/tmpt6z7m7gs.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334003
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter;\n        if (letter === \"a\") {\n            newLetter = \"b\";\n        } else if (letter === \"e\") {\n            newLetter = \"f\";\n        } else if (letter === \"i\") {\n            newLetter = \"g\";\n        } else if (letter === \"o\") {\n            newLetter = \"h\";\n        } else if (letter === \"u\") {\n            newLetter = \"j\";\n        }\n        newMessage += newLetter;\n    }\n    return newMessage;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpe3_79am7.js:34:12)\n    at Object.<anonymous> (/tmp/tmpe3_79am7.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334003
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = \"\";\n        if (letter === \"a\") {\n            encodedLetter = \"b\"\n        } else if (letter === \"e\") {\n            encodedLetter = \"f\"\n        } else if (letter === \"i\") {\n            encodedLetter = \"g\"\n        } else if (letter === \"o\") {\n            encodedLetter = \"h\"\n        } else if (letter === \"u\") {\n            encodedLetter = \"j\"\n        } else {\n            encodedLetter = letter;\n        }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpqby1gh9p.js:37:12)\n    at Object.<anonymous> (/tmp/tmpqby1gh9p.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334003
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowels = \"aeiouAEIOU\";\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex > -1) {\n            let vowelIndex = vowelIndex + 2;\n            let vowel = vowels[vowelIndex];\n            newMessage += vowel;\n        } else {\n            newMessage += letter;\n        }\n    }\n    return newMessage;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for the help! I really appreciate it!\n<|/ c |>\n<| a tags=javascript,string |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdwyyoi5u.ts(23,2): error TS1110: Type expected.\n../../../../tmp/tmpdwyyoi5u.ts(23,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpdwyyoi5u.ts(24,2): error TS1109: Expression expected.\n../../../../tmp/tmpdwyyoi5u.ts(24,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpdwyyoi5u.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmpdwyyoi5u.ts(25,7): error TS1109: Expression expected.\n../../../../tmp/tmpdwyyoi5u.ts(26,7): error TS1005: ';' expected.\n../../../../tmp/tmpdwyyoi5u.ts(26,11): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpdwyyoi5u.ts(26,14): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpdwyyoi5u.ts(26,23): error TS1005: '(' expected.\n../../../../tmp/tmpdwyyoi5u.ts(26,27): error TS1005: ';' expected.\n../../../../tmp/tmpdwyyoi5u.ts(26,33): error TS1005: ';' expected.\n../../../../tmp/tmpdwyyoi5u.ts(26,35): error TS1005: ')' expected.\n../../../../tmp/tmpdwyyoi5u.ts(26,42): error",
      "timestamp": 1660334003
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.charCodeAt(0) - 96;\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpe7g_bu4v.js:18:12)\n    at Object.<anonymous> (/tmp/tmpe7g_bu4v.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334003
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\") {\n            newMessage += \"b\";\n        } else if (letter === \"e\") {\n            newMessage += \"f\";\n        } else if (letter === \"i\") {\n            newMessage += \"g\";\n        } else if (letter === \"o\") {\n            newMessage += \"h\";\n        } else if (letter === \"u\") {\n            newMessage += \"j\";\n        } else if (letter === \"y\") {\n            newMessage += \"k\";\n        } else {\n            newMessage += letter;\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpedr27cho.js:38:12)\n    at Object.<anonymous> (/tmp/tmpedr27cho.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334003
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage[i];\n        newMessage = newMessage.replace(letter, \"a\");\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage[i];\n        newMessage = newMessage.replace(letter, \"e\");\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage[i];\n        newMessage = newMessage.replace(letter, \"i\");\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage[i];\n        newMessage = newMessage.replace(letter, \"o\");\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage[i];\n        newMessage = newMessage.replace(letter, \"u\");\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage[i];\n        newMessage = newMessage.replace(letter, \"A\");\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage[i];\n        newMessage = newMessage.replace(letter, \"E\");\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage[i];\n        newMessage = newMessage.replace(letter, \"I\");\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage[i];\n        newMessage = newMessage.replace(letter, \"O\");\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage[i];\n        newMessage = newMessage.replace(letter, \"U\");\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'UUUU'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptd34d3lj.js:58:12)\n    at Object.<anonymous> (/tmp/tmptd34d3lj.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'UUUU',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334003
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            encodedMessage += letter;\n        } else {\n            let vowelIndex = message.indexOf(letter, i + 1);\n            if (vowelIndex > 0) {\n                let vowel = message[vowelIndex];\n                let vowelIndex = message.indexOf(vowel, vowelIndex + 1);\n                encodedMessage += vowel;\n            }\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpj2ihturu.ts(16,37): error TS2448: Block-scoped variable 'vowelIndex' used before its declaration.\n../../../../tmp/tmpj2ihturu.ts(17,57): error TS2448: Block-scoped variable 'vowelIndex' used before its declaration.\n",
      "timestamp": 1660334006
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = message;\n    for (let i = 0; i < message.length; i++) {\n        const letter = message[i];\n        if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n            encodedMessage = encodedMessage.replace(letter, letter.toUpperCase());\n        }\n    }\n    for (let i = 0; i < message.length; i++) {\n        const letter = message[i];\n        if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n            encodedMessage = encodedMessage.replace(letter, letter.toLowerCase());\n        }\n    }\n    return encodedMessage;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't seem to work. `encode(\"hello\")` returns `ehllo` instead of `ehLlo`.\n<|/ c |>\n<| c |>\nI see what you mean. I'll fix it now.\n<|/ c |>\n<| c |>\nI fixed it now. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpog5e_1ik.ts(23,2): error TS1110: Type expected.\n../../../../tmp/tmpog5e_1ik.ts(23,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpog5e_1ik.ts(24,2): error TS1109: Expression expected.\n../../../../tmp/tmpog5e_1ik.ts(24,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpog5e_1ik.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmpog5e_1ik.ts(25,7): error TS1109: Expression expected.\n../../../../tmp/tmpog5e_1ik.ts(26,6): error TS1005: ';' expected.\n../../../../tmp/tmpog5e_1ik.ts(26,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpog5e_1ik.ts(26,81): error TS1002: Unterminated string literal.\n../../../../tmp/tmpog5e_1ik.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmpog5e_1ik.ts(27,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpog5e_1ik.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmpog5e_1ik.ts(28,7): error TS1109: Expression expected.\n../../",
      "timestamp": 1660334006
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = \"\";\n        if (letter === \"a\") {\n            encodedLetter = \"b\";\n        } else if (letter === \"b\") {\n            encodedLetter = \"c\";\n        } else if (letter === \"c\") {\n            encodedLetter = \"d\";\n        } else if (letter === \"d\") {\n            encodedLetter = \"e\";\n        } else if (letter === \"e\") {\n            encodedLetter = \"f\";\n        } else if (letter === \"f\") {\n            encodedLetter = \"g\";\n        } else if (letter === \"g\") {\n            encodedLetter = \"h\";\n        } else if (letter === \"h\") {\n            encodedLetter = \"i\";\n        } else if (letter === \"i\") {\n            encodedLetter = \"j\";\n        } else if (letter === \"j\") {\n            encodedLetter = \"k\";\n        } else if (letter === \"k\") {\n            encodedLetter = \"l\";\n        } else if (letter === \"l\") {\n            encodedLetter = \"m\";\n        } else if (letter === \"m\") {\n            encodedLetter = \"n\";\n        } else if (letter === \"n\") {\n            encodedLetter = \"o\";\n        } else if (letter === \"o\") {\n            encodedLetter = \"p\";\n        } else if (letter === \"p\") {\n            encodedLetter = \"q\";\n        } else if (letter === \"q\") {\n            encodedLetter = \"r\";\n        } else if (letter === \"r\") {\n            encodedLetter = \"s\";\n        } else if (letter === \"s\") {\n            encodedLetter = \"t\";\n        } else if (letter === \"t\") {\n            encodedLetter = \"u\";\n        } else if (letter === \"u\") {\n            encodedLetter = \"v\";\n        } else if (letter === \"v\") {\n            encodedLetter = \"w\";\n        } else if (letter === \"w\") {\n            encodedLetter = \"x\";\n        } else if (letter === \"x\") {\n            encodedLetter = \"y\";\n        } else if (letter === \"y\") {\n            encodedLetter = \"z\";\n        } else if (letter === \"z\") {\n            encodedLetter = \"a\";\n        }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hi\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpu3kwmz38.js:124:12)\n    at Object.<anonymous> (/tmp/tmpu3kwmz38.js:130:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ifmmp\nij\nij\nij\nij\nij\nij\nij\nij\nij\nij\nij\nij\nij\nij\nij\nij\nij\nij\nij\nij\nij\nij\nij\nij\nij\nij\n",
      "timestamp": 1660334006
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = letter.toUpperCase();\n        let vowelIndex = encodedLetter.indexOf(\"A\");\n        if (vowelIndex > -1) {\n            let vowel = encodedLetter.charAt(vowelIndex - 1);\n            encodedLetter = encodedLetter.replace(vowel, vowel.charAt(vowelIndex + 2));\n        }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzkvkd5_a.js:24:12)\n    at Object.<anonymous> (/tmp/tmpzkvkd5_a.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334006
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter;\n            i++;\n        } else if (letter === \"b\" || letter === \"c\" || letter === \"d\" || letter === \"f\" || letter === \"g\" || letter === \"h\" || letter === \"j\" || letter === \"k\" || letter === \"l\" || letter === \"m\" || letter === \"n\" || letter === \"p\" || letter === \"q\" || letter === \"r\" || letter === \"s\" || letter === \"t\" || letter === \"v\" || letter === \"w\" || letter === \"x\" || letter === \"y\" || letter === \"z\") {\n            result += letter;\n            i++;\n        } else {\n            result += nextLetter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'EEundefined'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5pzb3qtx.js:33:12)\n    at Object.<anonymous> (/tmp/tmp5pzb3qtx.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'EEundefined',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334006
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter;\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newLetter = letter.toUpperCase();\n        }\n        newMessage += newLetter;\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpqoiooflh.js:22:12)\n    at Object.<anonymous> (/tmp/tmpqoiooflh.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334006
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            encodedMessage += letter;\n        } else {\n            encodedMessage += letter.charCodeAt(0) - 97;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjv8o3dca.js:23:12)\n    at Object.<anonymous> (/tmp/tmpjv8o3dca.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334006
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    let vowels = \"aeiou\";\n    let letters = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage.charAt(i);\n        let index = letter.charCodeAt() - 97;\n        newMessage = newMessage.replace(letter, letters[index]);\n    }\n    for (let i = 0; i < vowels.length; i++) {\n        let letter = vowels.charAt(i);\n        let index = letter.charCodeAt() - 97;\n        newMessage = newMessage.replace(letter, letters[index]);\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo18m13cl.ts(13,28): error TS2554: Expected 1 arguments, but got 0.\n../../../../tmp/tmpo18m13cl.ts(18,28): error TS2554: Expected 1 arguments, but got 0.\n",
      "timestamp": 1660334006
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        encodedMessage += letter.toUpperCase();\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowelIndex = letter.indexOf(\"A\");\n        if (vowelIndex > 0) {\n            let vowel = letter.charAt(vowelIndex - 1);\n            encodedMessage += letter.charAt(vowelIndex - 2);\n            encodedMessage += vowel;\n        }\n    }\n    return encodedMessage;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nThis doesn't work if the message is \"aAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0nilx2c2.ts(24,2): error TS1110: Type expected.\n../../../../tmp/tmp0nilx2c2.ts(24,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0nilx2c2.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmp0nilx2c2.ts(25,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0nilx2c2.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmp0nilx2c2.ts(26,7): error TS1109: Expression expected.\n../../../../tmp/tmp0nilx2c2.ts(27,6): error TS1005: ';' expected.\n../../../../tmp/tmp0nilx2c2.ts(27,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp0nilx2c2.ts(27,431): error TS1002: Unterminated string literal.\n",
      "timestamp": 1660334006
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message.toUpperCase();\n    let vowels = \"AEIOUaeiou\";\n    let vowelsArray = vowels.split(\"\");\n    let newVowelsArray = [];\n    for (let i = 0; i < vowelsArray.length; i++) {\n        let index = vowelsArray[i];\n        let nextIndex = vowelsArray[i + 1];\n        if (newMessage.indexOf(index) > -1 && newMessage.indexOf(nextIndex) > -1) {\n            newVowelsArray.push(index);\n        }\n    }\n    newVowelsArray.sort();\n    for (let i = 0; i < newVowelsArray.length; i++) {\n        newMessage = newMessage.replace(newVowelsArray[i], newVowelsArray[i + 2]);\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpihhu8avp.js:28:12)\n    at Object.<anonymous> (/tmp/tmpihhu8avp.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334007
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            encodedMessage += letter;\n        } else {\n            let vowelIndex = message.indexOf(letter, i + 1);\n            if (vowelIndex > -1) {\n                let vowel = message[vowelIndex];\n                let vowelIndex = message.indexOf(vowel, i + 1);\n                let nextLetter = message[vowelIndex + 1];\n                encodedMessage += nextLetter;\n            }\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"apple\"));\nconsole.log(encode(\"banana\"));\nconsole.log(encode(\"cat\"));\nconsole.log(encode(\"dog\"));\nconsole.log(encode(\"elephant\"));\nconsole.log(encode(\"fox\"));\nconsole.log(encode(\"goat\"));\nconsole.log(encode(\"horse\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\nconsole.log(encode(\"igloo\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptl36phh5.ts(16,37): error TS2448: Block-scoped variable 'vowelIndex' used before its declaration.\n",
      "timestamp": 1660334006
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = letter;\n        if (letter === \"a\") {\n            encodedLetter = \"b\";\n        } else if (letter === \"e\") {\n            encodedLetter = \"f\";\n        } else if (letter === \"i\") {\n            encodedLetter = \"g\";\n        } else if (letter === \"o\") {\n            encodedLetter = \"h\";\n        } else if (letter === \"u\") {\n            encodedLetter = \"j\";\n        }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hellooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpm799t4fm.ts(87,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334006
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    let newMessageArray = newMessage.split(\"\");\n    newMessageArray = newMessageArray.map((letter) => {\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            return letter.toUpperCase();\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            return letter.toLowerCase();\n        }\n        else {\n            return letter;\n        }\n    });\n    newMessageArray = newMessageArray.map((letter) => {\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            return letter.toLowerCase();\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            return letter.toUpperCase();\n        }\n        else {\n            return letter;\n        }\n    });\n    newMessage = newMessageArray.join(\"\");\n    return newMessage;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9oq5n8hc.ts(35,2): error TS1110: Type expected.\n../../../../tmp/tmp9oq5n8hc.ts(35,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp9oq5n8hc.ts(36,2): error TS1109: Expression expected.\n../../../../tmp/tmp9oq5n8hc.ts(36,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp9oq5n8hc.ts(37,2): error TS1109: Expression expected.\n../../../../tmp/tmp9oq5n8hc.ts(37,6): error TS1005: ';' expected.\n../../../../tmp/tmp9oq5n8hc.ts(37,16): error TS1109: Expression expected.\n../../../../tmp/tmp9oq5n8hc.ts(39,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334006
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encoded = message;\n    let vowels = \"aeiouAEIOU\";\n    for (let i = 0; i < encoded.length; i++) {\n        let letter = encoded.charAt(i);\n        if (vowels.indexOf(letter) > -1) {\n            let vowelIndex = vowels.indexOf(letter);\n            let vowelLetter = vowels.charAt(vowelIndex + 1);\n            encoded = encoded.replace(letter, vowelLetter);\n        }\n    }\n    return encoded;\n}\n\nconsole.log(encode(\"Hello World!\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpqr9f_m0g.js:24:12)\n    at Object.<anonymous> (/tmp/tmpqr9f_m0g.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "Hillu Wurld!\n",
      "timestamp": 1660334007
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            encodedMessage += letter;\n        } else {\n            let vowelIndex = message.indexOf(letter, i + 1);\n            if (vowelIndex === -1) {\n                encodedMessage += letter;\n            } else {\n                let vowel = message[vowelIndex];\n                let vowelIndex = message.indexOf(vowel, i + 1);\n                if (vowelIndex === -1) {\n                    encodedMessage += vowel;\n                } else {\n                    let vowel = message[vowelIndex];\n                    encodedMessage += vowel;\n                }\n            }\n        }\n    }\n    return encodedMessage;\n}\nencode(`Hello World!`); //returns \"Hleellllooorwwd!\" \n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgtcibciu.ts(32,2): error TS1110: Type expected.\n../../../../tmp/tmpgtcibciu.ts(32,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpgtcibciu.ts(33,2): error TS1109: Expression expected.\n../../../../tmp/tmpgtcibciu.ts(33,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpgtcibciu.ts(34,2): error TS1109: Expression expected.\n../../../../tmp/tmpgtcibciu.ts(34,7): error TS1109: Expression expected.\n../../../../tmp/tmpgtcibciu.ts(36,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334006
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    let vowels = \"aeiou\";\n    let letters = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage.charAt(i);\n        let index = letter.charCodeAt(0) - 97;\n        let letter2 = letters.charAt(index);\n        newMessage = newMessage.replace(letter, letter2);\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp01zaaqfb.js:22:12)\n    at Object.<anonymous> (/tmp/tmp01zaaqfb.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334007
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            encodedMessage += letter;\n        } else {\n            encodedMessage += letter.charCodeAt(0) - 97;\n        }\n    }\n    return encodedMessage;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpdhnrjbg0.js:23:12)\n    at Object.<anonymous> (/tmp/tmpdhnrjbg0.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334007
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newMessage += letter;\n        } else {\n            newMessage += letter.charCodeAt(0) - 65 + 2;\n        }\n    }\n    return newMessage;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'2162021'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1l93j2pz.js:23:12)\n    at Object.<anonymous> (/tmp/tmp1l93j2pz.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '2162021',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334003
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = message;\n    let vowels = \"aeiouAEIOU\";\n    for (let i = 0; i < encodedMessage.length; i++) {\n        let letter = encodedMessage[i];\n        if (vowels.indexOf(letter) >= 0) {\n            let index = vowels.indexOf(letter);\n            let nextLetter = vowels[index + 1];\n            encodedMessage = encodedMessage.replace(letter, nextLetter);\n        }\n    }\n    return encodedMessage;\n}\n</code>\n<|/ a tags=javascript,string |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem! Glad I could help!\n<|/ c |>\n<| a |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt8szhm8h.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmpt8szhm8h.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpt8szhm8h.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpt8szhm8h.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpt8szhm8h.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpt8szhm8h.ts(22,7): error TS1109: Expression expected.\n../../../../tmp/tmpt8szhm8h.ts(23,7): error TS1005: ';' expected.\n../../../../tmp/tmpt8szhm8h.ts(23,11): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpt8szhm8h.ts(23,20): error TS1005: ';' expected.\n../../../../tmp/tmpt8szhm8h.ts(23,22): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpt8szhm8h.ts(23,29): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpt8szhm8h.ts(24,2): error TS1109: Expression expected.\n../../../../tmp/tmpt8szhm8h.ts(24,4): error TS1161: Unterminated regular expression l",
      "timestamp": 1660334006
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newMessage += letter;\n        } else {\n            let letterIndex = alphabet.indexOf(letter);\n            newMessage += alphabet[letterIndex + 2];\n        }\n    }\n    return newMessage;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if you have a message like \"aAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5rq28sek.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmp5rq28sek.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp5rq28sek.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmp5rq28sek.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp5rq28sek.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmp5rq28sek.ts(22,7): error TS1109: Expression expected.\n../../../../tmp/tmp5rq28sek.ts(23,6): error TS1005: ';' expected.\n../../../../tmp/tmp5rq28sek.ts(23,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp5rq28sek.ts(23,462): error TS1002: Unterminated string literal.\n",
      "timestamp": 1660334006
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    let vowels = \"aeiou\";\n    let letters = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage.charAt(i);\n        newMessage = newMessage.replace(letter, letters[letters.indexOf(letter) + 2]);\n    }\n    for (let i = 0; i < vowels.length; i++) {\n        newMessage = newMessage.replace(vowels[i], vowels[vowels.indexOf(vowels[i]) + 1]);\n    }\n    return newMessage;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nThis doesn't seem to work. Try it with `encode(\"Hello World\")`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `encode(\"Hello World\")`\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `encode(\"Hello World\")`\n<|/ c |>\n<| c |>\nIt does work. Try it with `encode(\"Hello World\")`\n<|/ c |>\n<| c |>\nIt does work. Try it with `encode(\"Hello World\")`\n<|/ c |>\n<| a tags=javascript,algorithm |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwf9ttzx1.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmpwf9ttzx1.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpwf9ttzx1.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpwf9ttzx1.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpwf9ttzx1.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpwf9ttzx1.ts(22,7): error TS1109: Expression expected.\n../../../../tmp/tmpwf9ttzx1.ts(23,6): error TS1005: ';' expected.\n../../../../tmp/tmpwf9ttzx1.ts(23,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpwf9ttzx1.ts(23,64): error TS1002: Unterminated string literal.\n../../../../tmp/tmpwf9ttzx1.ts(24,2): error TS1109: Expression expected.\n../../../../tmp/tmpwf9ttzx1.ts(24,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpwf9ttzx1.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmpwf9ttzx1.ts(25,7): error TS1109: Expression expected.\n../../",
      "timestamp": 1660334006
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter;\n        if (letter === \"a\") {\n            newLetter = \"b\";\n        } else if (letter === \"e\") {\n            newLetter = \"f\";\n        } else if (letter === \"i\") {\n            newLetter = \"g\";\n        } else if (letter === \"o\") {\n            newLetter = \"h\";\n        } else if (letter === \"u\") {\n            newLetter = \"j\";\n        }\n        newMessage += newLetter;\n    }\n    return newMessage;\n}\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"goodbye\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppz3x94xj.ts(108,26): error TS1002: Unterminated string literal.\n../../../../tmp/tmppz3x94xj.ts(109,1): error TS1005: ',' expected.\n../../../../tmp/tmppz3x94xj.ts(109,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334007
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            encodedMessage += letter;\n        } else {\n            let vowelIndex = message.indexOf(letter, i + 1);\n            if (vowelIndex > -1) {\n                let vowel = message[vowelIndex];\n                let vowelIndex = message.indexOf(vowel, vowelIndex + 1);\n                if (vowelIndex > -1) {\n                    encodedMessage += vowel;\n                    encodedMessage += message[vowelIndex];\n                }\n            }\n        }\n    }\n    return encodedMessage;\n}\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp068jt3nu.ts(16,37): error TS2448: Block-scoped variable 'vowelIndex' used before its declaration.\n../../../../tmp/tmp068jt3nu.ts(17,57): error TS2448: Block-scoped variable 'vowelIndex' used before its declaration.\n",
      "timestamp": 1660334007
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage[i];\n        newMessage = newMessage.replace(letter, getLetter2PlaceAheadOfLetter(letter));\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpananma4f.ts(15,49): error TS2304: Cannot find name 'getLetter2PlaceAheadOfLetter'.\n",
      "timestamp": 1660334009
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            encodedMessage += letter;\n        } else {\n            let letterIndex = alphabet.indexOf(letter);\n            encodedMessage += alphabet[letterIndex + 2];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfzexqa6o.ts(14,31): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpfzexqa6o.ts(15,31): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660334009
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = message;\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n            encodedMessage = encodedMessage.replace(letter, letter.toUpperCase());\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsudzvzg6.js:20:12)\n    at Object.<anonymous> (/tmp/tmpsudzvzg6.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334010
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let encodedLetter = letter;\n    let vowels = \"aeiou\";\n    for (let j = 0; j < vowels.length; j++) {\n      if (letter === vowels[j]) {\n        encodedLetter = vowels[j + 1];\n      }\n    }\n    encodedMessage += encodedLetter;\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpute1156b.js:25:12)\n    at Object.<anonymous> (/tmp/tmpute1156b.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334010
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = letter.toUpperCase();\n        let vowelIndex = encodedLetter.indexOf(\"A\");\n        if (vowelIndex > -1) {\n            let vowel = encodedLetter.charAt(vowelIndex - 1);\n            let vowel2 = encodedLetter.charAt(vowelIndex + 1);\n            encodedLetter = vowel + vowel2;\n        }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppiaoqy06.ts(22,2): error TS1110: Type expected.\n../../../../tmp/tmppiaoqy06.ts(22,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmppiaoqy06.ts(23,2): error TS1109: Expression expected.\n../../../../tmp/tmppiaoqy06.ts(23,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmppiaoqy06.ts(24,2): error TS1109: Expression expected.\n../../../../tmp/tmppiaoqy06.ts(24,6): error TS1005: ';' expected.\n../../../../tmp/tmppiaoqy06.ts(24,16): error TS1109: Expression expected.\n../../../../tmp/tmppiaoqy06.ts(26,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334010
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels = \"aeiou\";\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter) + vowels.indexOf(letter) + 1;\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-1-1-1-1'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptcim4us1.js:20:12)\n    at Object.<anonymous> (/tmp/tmptcim4us1.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-1-1-1-1',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334010
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArray = vowels.split(\"\");\n    let vowelsArrayLength = vowelsArray.length;\n    for (let i = 0; i < vowelsArrayLength; i++) {\n        let index = vowelsArray.indexOf(\"a\");\n        let nextIndex = vowelsArray.indexOf(\"a\");\n        if (index != -1) {\n            nextIndex++;\n        }\n        newMessage = newMessage.replace(vowelsArray[i], vowelsArray[nextIndex]);\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TeST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpoi8n6nfb.js:25:12)\n    at Object.<anonymous> (/tmp/tmpoi8n6nfb.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TeST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334010
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    let vowels = \"aeiou\";\n    let vowelsIndex = {};\n    for (let i = 0; i < vowels.length; i++) {\n        vowelsIndex[vowels[i]] = i;\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage.charAt(i);\n        let nextLetter = newMessage.charAt(i + 1);\n        if (vowelsIndex[letter] !== undefined) {\n            newMessage = newMessage.replace(letter, vowelsIndex[letter]);\n            newMessage = newMessage.replace(nextLetter, vowelsIndex[letter + 1]);\n        }\n    }\n    return newMessage;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp10f0kzav.js:27:12)\n    at Object.<anonymous> (/tmp/tmp10f0kzav.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334010
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = letter.toUpperCase();\n        let vowelIndex = encodedLetter.indexOf(\"A\");\n        if (vowelIndex > -1) {\n            encodedLetter = encodedLetter.replace(vowelIndex, \"B\");\n        }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3sxp2sgz.ts(14,51): error TS2769: No overload matches this call.\n  The last overload gave the following error.\n    Argument of type 'number' is not assignable to parameter of type 'string | RegExp'.\n",
      "timestamp": 1660334010
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    let vowels = \"aeiouAEIOU\";\n    let vowelsMap = {};\n    for (let i = 0; i < vowels.length; i++) {\n        vowelsMap[vowels[i]] = i;\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage.charAt(i);\n        if (vowelsMap[letter]) {\n            newMessage = newMessage.replace(letter, vowelsMap[letter] + 2);\n        }\n    }\n    return newMessage;\n}\n</code>\n<|/ a tags=javascript,algorithm,string |>\n<| c |>\nI like your solution, but I believe it would be better to use a regex to replace all vowels with their position in the alphabet. `/[aeiou]/gi` will match all vowels in the string. `/[aeiou]/gi.exec(message)` will give you the position of each vowel in the string. `/[aeiou]/gi.exec(message)[0]` will give you the position of each vowel in the string. `/[aeiou]/gi.exec(message)[1]` will give you the position of each vowel in the string. `/[aeiou]/gi.exec(message)[2]` will give you the position of each vowel in the string. `/[aeiou]/gi.exec(message)[3]` will give you the position of each vowel in the string. `/[aeiou]/gi.exec(message)[4]` will give you the position of each vowel in the string. `/[aeiou]/gi.exec(message)[5]` will give you the position of each vowel in the string. `/[aeiou]/gi.exec(message)[6]` will give you the position of each vowel in the string. `/[aeiou]/gi.exec(message)[7]` will give you the position of each vowel in the string. `/[aeiou]/gi.exec(message)[8]` will give you the position of each vowel in the string. `/[aeiou]/gi.exec(message)[9]` will give you the position of each vowel in the string. `/[aeiou]/gi.exec(message)[10]` will give you the position of each vowel in the string. `/[aeiou]/gi.exec(message)[11]` will give you the position of each vowel in the string. `/[aeiou]/gi.exec(message)[12]` will give you the position of each vowel in the string. `/[aeiou]/gi.exec(message)[13]` will give you the position of each vowel in the string. `/[aeiou]/gi.exec(message)[14]` will give you the position of each vowel in the string. `/[aeiou]/gi.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpj6907olm.ts(22,2): error TS1110: Type expected.\n../../../../tmp/tmpj6907olm.ts(22,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpj6907olm.ts(23,2): error TS1109: Expression expected.\n../../../../tmp/tmpj6907olm.ts(23,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpj6907olm.ts(24,2): error TS1109: Expression expected.\n../../../../tmp/tmpj6907olm.ts(24,7): error TS1109: Expression expected.\n../../../../tmp/tmpj6907olm.ts(25,3): error TS1005: ';' expected.\n../../../../tmp/tmpj6907olm.ts(25,8): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpj6907olm.ts(25,27): error TS1005: ';' expected.\n../../../../tmp/tmpj6907olm.ts(25,29): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpj6907olm.ts(25,37): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpj6907olm.ts(25,40): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpj6907olm.ts(25,46): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpj6907olm.ts(25,49): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpj6907olm.ts(25,56): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpj6907olm.ts(25,59): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpj6907olm.ts(25,63): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpj6907olm.ts(25,65): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpj6907olm.ts(25,71): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpj6907olm.ts(25,74): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpj6907olm.ts(25,82): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpj6907olm.ts(25,86): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpj6907olm.ts(25,98): error TS1005: '(' expected.\n../../../../tmp/tmpj6907olm.ts(25,104): error TS1005: ')' expected.\n../../../../tmp/tmpj6907olm.ts(25,120): error TS1005: ';' expected.\n../../../../tmp/tmpj690",
      "timestamp": 1660334010
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        encodedMessage += letter.toUpperCase();\n    }\n    return encodedMessage;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpcmz01kaw.js:18:12)\n    at Object.<anonymous> (/tmp/tmpcmz01kaw.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334010
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\") {\n      result += \"e\";\n    } else if (letter === \"e\") {\n      result += \"a\";\n    } else if (letter === \"i\") {\n      result += \"o\";\n    } else if (letter === \"o\") {\n      result += \"i\";\n    } else if (letter === \"u\") {\n      result += \"a\";\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2vssqfbq.js:35:12)\n    at Object.<anonymous> (/tmp/tmp2vssqfbq.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334010
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encoded = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            encoded += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n            encoded += alphabet[(index + 1) % alphabet.length];\n        }\n    }\n    return encoded;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7d6s0hsm.ts(14,25): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp7d6s0hsm.ts(15,24): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp7d6s0hsm.ts(15,47): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660334010
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let letterIndex = alphabet.indexOf(letter);\n        if (letterIndex > -1) {\n            newMessage += alphabet[letterIndex + 2];\n        }\n        else {\n            newMessage += letter;\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvqj918md.ts(11,27): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpvqj918md.ts(13,27): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660334010
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels = \"aeiou\";\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (alphabet.indexOf(letter) > -1) {\n            let index = alphabet.indexOf(letter);\n            let nextLetter = alphabet[index + 1];\n            encodedMessage += nextLetter;\n        } else {\n            encodedMessage += letter;\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello!\"));\nconsole.log(encode(\"hello!!\"));\nconsole.log(encode(\"hello!!!\"));\nconsole.log(encode(\"hello!!!!\"));\nconsole.log(encode(\"hello!!!!!\"));\nconsole.log(encode(\"hello!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\nconsole.log(encode(\"hello!!!!!!!\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxu3r9v8x.js:81:12)\n    at Object.<anonymous> (/tmp/tmpxu3r9v8x.js:87:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ifmmp\nifmmp!\nifmmp!!\nifmmp!!!\nifmmp!!!!\nifmmp!!!!!\nifmmp!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\nifmmp!!!!!!!\n",
      "timestamp": 1660334010
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message.toLowerCase();\n    let newMessageArray = newMessage.split('');\n    let newMessageArrayLength = newMessageArray.length;\n    let newMessageArrayIndex = 0;\n    let newMessageArrayIndex2 = 0;\n    let newMessageArrayIndex3 = 0;\n    let newMessageArrayIndex4 = 0;\n    let newMessageArrayIndex5 = 0;\n    let newMessageArrayIndex6 = 0;\n    let newMessageArrayIndex7 = 0;\n    let newMessageArrayIndex8 = 0;\n    let newMessageArrayIndex9 = 0;\n    let newMessageArrayIndex10 = 0;\n    let newMessageArrayIndex11 = 0;\n    let newMessageArrayIndex12 = 0;\n    let newMessageArrayIndex13 = 0;\n    let newMessageArrayIndex14 = 0;\n    let newMessageArrayIndex15 = 0;\n    let newMessageArrayIndex16 = 0;\n    let newMessageArrayIndex17 = 0;\n    let newMessageArrayIndex18 = 0;\n    let newMessageArrayIndex19 = 0;\n    let newMessageArrayIndex20 = 0;\n    let newMessageArrayIndex21 = 0;\n    let newMessageArrayIndex22 = 0;\n    let newMessageArrayIndex23 = 0;\n    let newMessageArrayIndex24 = 0;\n    let newMessageArrayIndex25 = 0;\n    let newMessageArrayIndex26 = 0;\n    let newMessageArrayIndex27 = 0;\n    let newMessageArrayIndex28 = 0;\n    let newMessageArrayIndex29 = 0;\n    let newMessageArrayIndex30 = 0;\n    let newMessageArrayIndex31 = 0;\n    let newMessageArrayIndex32 = 0;\n    let newMessageArrayIndex33 = 0;\n    let newMessageArrayIndex34 = 0;\n    let newMessageArrayIndex35 = 0;\n    let newMessageArrayIndex36 = 0;\n    let newMessageArrayIndex37 = 0;\n    let newMessageArrayIndex38 = 0;\n    let newMessageArrayIndex39 = 0;\n    let newMessageArrayIndex40 = 0;\n    let newMessageArrayIndex41 = 0;\n    let newMessageArrayIndex42 = 0;\n    let newMessageArrayIndex43 = 0;\n    let newMessageArrayIndex44 = 0;\n    let newMessageArrayIndex45 = 0;\n    let newMessageArrayIndex46 = 0;\n    let newMessageArrayIndex47 = 0;\n    let newMessageArrayIndex48 = 0;\n    let newMessageArrayIndex49 = 0;\n    let newMessageArrayIndex50 = 0;\n    let newMessageArrayIndex51 = 0;\n    let newMessageArrayIndex52 = 0;\n    let newMessageArrayIndex53 = 0;\n    let newMessageArrayIndex54 = 0;\n    let newMessageArrayIndex55 = 0;\n    let newMessageArrayIndex56 = 0;\n    let newMessageArrayIndex57 = 0;\n    let newMessageArrayIndex58 = 0;\n    let newMessageArrayIndex59 = 0;\n    let newMessageArrayIndex60 = 0;\n    let newMessageArrayIndex61 = 0;\n    let newMessage\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplq8ruuy0.ts(86,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334010
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n        if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            newMessage += letter;\n        }\n        else {\n            newMessage += letter.charCodeAt(0) - 97;\n        }\n    }\n    return newMessage;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'T-13EES-14T-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmph0h_73gz.js:24:12)\n    at Object.<anonymous> (/tmp/tmph0h_73gz.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'T-13EES-14T-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334010
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    let vowels = \"aeiouAEIOU\";\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage.charAt(i);\n        let index = vowels.indexOf(letter);\n        if (index != -1) {\n            let nextLetter = vowels.charAt(index + 1);\n            newMessage = newMessage.replace(letter, nextLetter);\n        }\n    }\n    return newMessage;\n}\n</code>\n<|/ a tags=javascript,string |>\n<| c |>\nThis doesn't work for me. I'm getting `TypeError: Cannot read property 'indexOf' of undefined`\n<|/ c |>\n<| c |>\nI fixed the error by adding `let newMessage = message;` before the for loop. Thanks!\n<|/ c |>\n<| c |>\nThis doesn't work if the message is \"aAeEiIoOuU\".\n<|/ c |>\n<| c |>\nYes, it does. I tested it on that string. Can you give me an example of a string that doesn't work?\n<|/ c |>\n<| c |>\nIt doesn't work if the message is \"aAeEiIoOuU\".\n<|/ c |>\n<| a dscore=3 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp__2tohlq.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmp__2tohlq.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp__2tohlq.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmp__2tohlq.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp__2tohlq.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmp__2tohlq.ts(22,7): error TS1109: Expression expected.\n../../../../tmp/tmp__2tohlq.ts(23,6): error TS1005: ';' expected.\n../../../../tmp/tmp__2tohlq.ts(23,29): error TS1005: ';' expected.\n../../../../tmp/tmp__2tohlq.ts(24,2): error TS1109: Expression expected.\n../../../../tmp/tmp__2tohlq.ts(24,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp__2tohlq.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmp__2tohlq.ts(25,7): error TS1109: Expression expected.\n../../../../tmp/tmp__2tohlq.ts(26,3): error TS1005: ';' expected.\n../../../../tmp/tmp__2tohlq.ts(26,9): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp__2tohlq.ts(26,13): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp__2tohlq.ts(26,19): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp__2tohlq.ts(26,29): error TS1443: Module declaration names may only use ' or \" quoted strings.\n../../../../tmp/tmp__2tohlq.ts(26,57): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp__2tohlq.ts(26,64): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp__2tohlq.ts(26,72): error TS1005: '(' expected.\n../../../../tmp/tmp__2tohlq.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmp__2tohlq.ts(27,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp__2tohlq.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmp__2tohlq.ts(28,7): error TS1109: Expression expected.\n../../../../tmp/tmp__2tohlq.ts(29,6): error TS1005: ';' expected.\n../../../../tmp/tmp__2tohlq.ts(29,11): error TS1005: ';' expected.\n../..",
      "timestamp": 1660334010
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      encodedMessage += letter;\n    } else {\n      encodedMessage += letter.charCodeAt(0) - 97;\n    }\n  }\n  return encodedMessage;\n}\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooooo\"));\nconsole.log(encode(\"helloooooooooooo\"));\nconsole.log(encode(\"helloooooooooooooo\"));\nconsole.log(encode(\"helloooooooooooooooo\"));\nconsole.log(encode(\"helloooooooooooooooooo\"));\nconsole.log(encode(\"helloooooooooooooooooooo\"));\nconsole.log(encode(\"helloooooooooooooooooooooooo\"));\nconsole.log(encode(\"helloooooooooooooooooooooooooo\"));\nconsole.log(encode(\"helloooooooooooooooooooooooooooo\"));\nconsole.log(encode(\"helloooooooooooooooooooooooooooooo\"));\nconsole.log(encode(\"helloooooooooooooooooooooooooooooooo\"));\nconsole.log(encode(\"helloooooooooooooooooooooooooooooooooooooo\"));\nconsole.log(encode(\"helloooooooooooooooooooooooooooooooooooooooo\"));\nconsole.log(encode(\"helloooooooooooooooooooooooooooooooooooooooooo\"));\nconsole.log(encode(\"helloooooooooooooooooooooooooooooooooooooooooooo\"));\nconsole.log(encode(\"helloooooooooooooooooooooooooooooooooooooooooooooo\"));\nconsole.log(encode(\"helloooooooooooooooooooooooooooooooooooooooooooooooo\"));\nconsole.log(encode(\"helloooooooooooooooooooooooooooooooooooooooooooooooooo\"));\nconsole.log(encode(\"helloooooooooooooooooooooooooooooooooooooooooooooooooo\"));\nconsole.log(encode(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooo\"));\nconsole.log(encode(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooo\"));\nconsole.log(encode(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"));\nconsole.log(encode(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"));\nconsole.log(encode(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"));\nconsole.log(encode(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"));\nconsole.log(encode(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooo\"));\nconsole.log(encode(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplg719clf.ts(51,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334010
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"b\" || letter === \"c\" || letter === \"d\" || letter === \"f\" || letter === \"g\" || letter === \"h\" || letter === \"j\" || letter === \"k\" || letter === \"l\" || letter === \"m\" || letter === \"n\" || letter === \"p\" || letter === \"q\" || letter === \"r\" || letter === \"s\" || letter === \"t\" || letter === \"v\" || letter === \"w\" || letter === \"x\" || letter === \"y\" || letter === \"z\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"B\" || letter === \"C\" || letter === \"D\" || letter === \"F\" || letter === \"G\" || letter === \"H\" || letter === \"J\" || letter === \"K\" || letter === \"L\" || letter === \"M\" || letter === \"N\" || letter === \"P\" || letter === \"Q\" || letter === \"R\" || letter === \"S\" || letter === \"T\" || letter === \"V\" || letter === \"W\" || letter === \"X\" || letter === \"Y\" || letter === \"Z\") {\n            result += letter;\n            i++;\n        }\n        else {\n            result += nextLetter;\n        }\n    }\n    return result;\n}\n\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprs1uic1p.ts(65,21): error TS1002: Unterminated string literal.\n../../../../tmp/tmprs1uic1p.ts(66,1): error TS1005: ',' expected.\n../../../../tmp/tmprs1uic1p.ts(66,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334010
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = \"\";\n        if (letter === \"a\") {\n            encodedLetter = \"b\";\n        } else if (letter === \"e\") {\n            encodedLetter = \"f\";\n        } else if (letter === \"i\") {\n            encodedLetter = \"g\";\n        } else if (letter === \"o\") {\n            encodedLetter = \"h\";\n        } else if (letter === \"u\") {\n            encodedLetter = \"j\";\n        }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"howdy\"));\nconsole.log(encode(\"hmmm\"));\nconsole.log(encode(\"hmmmmm\"));\nconsole.log(encode(\"hmmmmmmm\"));\nconsole.log(encode(\"hmmmmmmmmm\"));\nconsole.log(encode(\"hmmmmmmmmmmm\"));\nconsole.log(encode(\"hmmmmmmmmmmmmm\"));\nconsole.log(encode(\"hmmmmmmmmmmmmmmm\"));\nconsole.log(encode(\"hmmmmmmmmmmmmmmmmm\"));\nconsole.log(encode(\"hmmmmmmmmmmmmmmmmmmm\"));\nconsole.log(encode(\"hmmmmmmmmmmmmmmmmmmmmm\"));\nconsole.log(encode(\"hmmmmmmmmmmmmmmmmmmmmmmm\"));\nconsole.log(encode(\"hmmmmmmmmmmmmmmmmmmmmmmmmm\"));\nconsole.log(encode(\"hmmmmmmmmmmmmmmmmmmmmmmmmm\"));\nconsole.log(encode(\"hmmmmmmmmmmmmmmmmmmmmmmmmmmm\"));\nconsole.log(encode(\"hmmmmmmmmmmmmmmmmmmmmmmmmmmm\"));\nconsole.log(encode(\"hmmmmmmmmmmmmmmmmmmmmmmmmmmm\"));\nconsole.log(encode(\"hmmmmmmmmmmmmmmmmmmmmmmmmmmm\"));\nconsole.log(encode(\"hmmmmmmmmmmmmmmmmmmmmmmmmmmm\"));\nconsole.log(encode(\"hmmmmmmmmmmmmmmmmmmmmmmmmmmm\"));\nconsole.log(encode(\"hmmmmmmmmmmmmmmmmmmmmmmmmmmmmm\"));\nconsole.log(encode(\"hmmmmmmmmmmmmmmmmmmmmmmmmmmmmm\"));\nconsole.log(encode(\"hmmmmmmmmmmmmmmmmmmmmmmmmmmm\"));\nconsole.log(encode(\"hmmmmmmmmmmmmmmmmmmmmmmmmmmm\"));\nconsole.log(encode(\"hmmmmmmmmmmmmmmmmmmmmmmmmmmm\"));\nconsole.log(encode(\"hmm\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgz1d7fdr.ts(55,24): error TS1002: Unterminated string literal.\n../../../../tmp/tmpgz1d7fdr.ts(56,1): error TS1005: ',' expected.\n../../../../tmp/tmpgz1d7fdr.ts(56,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334010
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter;\n        if (letter === \"a\") {\n            newLetter = \"b\";\n        } else if (letter === \"e\") {\n            newLetter = \"f\";\n        } else if (letter === \"i\") {\n            newLetter = \"g\";\n        } else if (letter === \"o\") {\n            newLetter = \"h\";\n        } else if (letter === \"u\") {\n            newLetter = \"j\";\n        }\n        newMessage += newLetter;\n    }\n    return newMessage;\n}\n</code>\n<|/ a |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem! Glad I could help!\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpc7w37tju.ts(27,2): error TS1110: Type expected.\n../../../../tmp/tmpc7w37tju.ts(27,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpc7w37tju.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmpc7w37tju.ts(28,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpc7w37tju.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmpc7w37tju.ts(29,7): error TS1109: Expression expected.\n../../../../tmp/tmpc7w37tju.ts(30,7): error TS1005: ';' expected.\n../../../../tmp/tmpc7w37tju.ts(30,11): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpc7w37tju.ts(30,14): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpc7w37tju.ts(30,23): error TS1005: '(' expected.\n../../../../tmp/tmpc7w37tju.ts(30,28): error TS1005: ';' expected.\n../../../../tmp/tmpc7w37tju.ts(30,34): error TS1005: ';' expected.\n../../../../tmp/tmpc7w37tju.ts(30,36): error TS1005: ')' expected.\n../../../../tmp/tmpc7w37tju.ts(30,43): error",
      "timestamp": 1660334010
    },
    {
      "exit_code": -1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    let vowels = \"aeiouAEIOU\";\n    let vowelsMap = {};\n    for (let i = 0; i < vowels.length; i++) {\n        vowelsMap[vowels[i]] = i;\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage.charAt(i);\n        newMessage = newMessage.replace(letter, vowelsMap[letter]);\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334028
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage[i];\n        let index = letter.charCodeAt(0) - 97;\n        newMessage = newMessage.slice(0, i) + String.fromCharCode(index) + newMessage.slice(i + 1);\n    }\n    return newMessage;\n}\n</code>\n<|/ a tags=javascript,string |>\n<| c |>\nThis does not provide an answer to the question. To critique or request clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26818875)\n<|/ c |>\n<| c |>\nI added an answer with my solution. Thanks for your feedback.\n<|/ c |>\n<| c |>\nI added an answer with my solution. Thanks for your feedback.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpos8elpxv.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmpos8elpxv.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpos8elpxv.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpos8elpxv.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpos8elpxv.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpos8elpxv.ts(22,7): error TS1109: Expression expected.\n../../../../tmp/tmpos8elpxv.ts(23,6): error TS1005: ';' expected.\n../../../../tmp/tmpos8elpxv.ts(23,11): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpos8elpxv.ts(23,15): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpos8elpxv.ts(23,23): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpos8elpxv.ts(23,26): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpos8elpxv.ts(23,33): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpos8elpxv.ts(23,36): error TS1434",
      "timestamp": 1660334013
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n    }\n    return newMessage;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpojsp_gqe.js:18:12)\n    at Object.<anonymous> (/tmp/tmpojsp_gqe.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334013
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            encodedMessage += letter;\n        } else {\n            encodedMessage += letter.charCodeAt(0) - 97;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjv8o3dca.js:23:12)\n    at Object.<anonymous> (/tmp/tmpjv8o3dca.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334006
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        encodedMessage += letter.toUpperCase();\n    }\n    return encodedMessage;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpcmz01kaw.js:18:12)\n    at Object.<anonymous> (/tmp/tmpcmz01kaw.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334010
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        encodedMessage += letter.toUpperCase();\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsgajab9v.js:18:12)\n    at Object.<anonymous> (/tmp/tmpsgajab9v.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334013
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encoded = message;\n    for (let i = 0; i < message.length; i++) {\n        let letter = message.charAt(i);\n        if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n            encoded = encoded.replace(letter, letter.charCodeAt(0) - 64);\n        }\n    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpklbref7y.ts(12,47): error TS2769: No overload matches this call.\n  The last overload gave the following error.\n    Argument of type 'number' is not assignable to parameter of type '(substring: string, ...args: any[]) => string'.\n",
      "timestamp": 1660334013
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n    }\n    return newMessage;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpojsp_gqe.js:18:12)\n    at Object.<anonymous> (/tmp/tmpojsp_gqe.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334013
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    let vowels = \"aeiouAEIOU\";\n    let letters = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage.charAt(i);\n        if (letters.indexOf(letter) > -1) {\n            newMessage = newMessage.replace(letter, vowels.charAt(letters.indexOf(letter) + 2));\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpj67hi3vk.js:22:12)\n    at Object.<anonymous> (/tmp/tmpj67hi3vk.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334013
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    let vowels = \"aeiou\";\n    let letters = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (vowels.includes(letter)) {\n            let index = letters.indexOf(letter);\n            let nextLetter = letters[index + 1];\n            newMessage = newMessage.replace(letter, nextLetter);\n        }\n    }\n    return newMessage;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpk1wygsq3.js:24:12)\n    at Object.<anonymous> (/tmp/tmpk1wygsq3.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334013
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    let vowels = \"aeiouAEIOU\";\n    let letters = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage[i];\n        if (vowels.indexOf(letter) > -1) {\n            let index = vowels.indexOf(letter);\n            let letter2 = letters.charAt(index + 1);\n            newMessage = newMessage.replace(letter, letter2);\n        }\n    }\n    return newMessage;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ThST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpk40xs0qc.js:24:12)\n    at Object.<anonymous> (/tmp/tmpk40xs0qc.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ThST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334014
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        encodedMessage += letter;\n        if (letter === \"a\") {\n            encodedMessage += \"e\";\n        } else if (letter === \"e\") {\n            encodedMessage += \"a\";\n        } else if (letter === \"i\") {\n            encodedMessage += \"o\";\n        } else if (letter === \"o\") {\n            encodedMessage += \"i\";\n        } else if (letter === \"u\") {\n            encodedMessage += \"a\";\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpj5nl2csy.js:33:12)\n    at Object.<anonymous> (/tmp/tmpj5nl2csy.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334014
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    let vowels = \"aeiou\";\n    let vowelsCount = vowels.length;\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage.charAt(i);\n        if (vowels.indexOf(letter) > -1) {\n            let index = vowels.indexOf(letter);\n            let nextLetter = vowels.charAt(index + 1);\n            newMessage = newMessage.replace(letter, nextLetter);\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjjkgk2zh.js:24:12)\n    at Object.<anonymous> (/tmp/tmpjjkgk2zh.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334014
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage[i];\n        newMessage = newMessage.replace(letter, letter.charCodeAt(0) - 65);\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmqee0rm6.ts(11,49): error TS2769: No overload matches this call.\n  The last overload gave the following error.\n    Argument of type 'number' is not assignable to parameter of type '(substring: string, ...args: any[]) => string'.\n",
      "timestamp": 1660334013
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\";\n    let result: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter: string = message[i];\n        let nextLetter: string = message[i + 1];\n        if (alphabet.indexOf(letter) > -1) {\n            if (vowels.indexOf(nextLetter) > -1) {\n                result += nextLetter;\n            } else {\n                result += letter;\n            }\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpaqyujk8y.js:31:12)\n    at Object.<anonymous> (/tmp/tmpaqyujk8y.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334014
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpl63qh7ls.js:18:12)\n    at Object.<anonymous> (/tmp/tmpl63qh7ls.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334003
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n    }\n    return newMessage;\n}\nencode(\" \");\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpnsc73c_o.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnsc73c_o.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334014
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\") {\n            encodedMessage += \"1\";\n        } else if (letter === \"e\") {\n            encodedMessage += \"2\";\n        } else if (letter === \"i\") {\n            encodedMessage += \"3\";\n        } else if (letter === \"o\") {\n            encodedMessage += \"4\";\n        } else if (letter === \"u\") {\n            encodedMessage += \"5\";\n        } else if (letter === \"A\") {\n            encodedMessage += \"6\";\n        } else if (letter === \"E\") {\n            encodedMessage += \"7\";\n        } else if (letter === \"I\") {\n            encodedMessage += \"8\";\n        } else if (letter === \"O\") {\n            encodedMessage += \"9\";\n        } else if (letter === \"U\") {\n            encodedMessage += \"0\";\n        } else {\n            encodedMessage += letter;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'T7ST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp93sqkz7a.js:50:12)\n    at Object.<anonymous> (/tmp/tmp93sqkz7a.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'T7ST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334014
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter.toUpperCase();\n        let vowels = \"AEIOUaeiou\";\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex > -1) {\n            newLetter = vowels[vowelIndex + 1];\n        }\n        newMessage += newLetter;\n    }\n    return newMessage;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpk9rei2ob.js:24:12)\n    at Object.<anonymous> (/tmp/tmpk9rei2ob.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334013
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    newMessage = newMessage.toLowerCase();\n    newMessage = newMessage.replace(/a/g, \"e\");\n    newMessage = newMessage.replace(/e/g, \"i\");\n    newMessage = newMessage.replace(/i/g, \"o\");\n    newMessage = newMessage.replace(/o/g, \"u\");\n    newMessage = newMessage.replace(/u/g, \"a\");\n    return newMessage;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nThis doesn't work. Try it with `encode(\"abracadabra\")`\n<|/ c |>\n<| c |>\nIt does work. Try it with `encode(\"abracadabra\")`\n<|/ c |>\n<| c |>\nIt does work. Try it with `encode(\"abracadabra\")`\n<|/ c |>\n<| c |>\nIt does work. Try it with `encode(\"abracadabra\")`\n<|/ c |>\n<| c |>\nIt does work. Try it with `encode(\"abracadabra\")`\n<|/ c |>\n<| a dscore=1 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbl17mr8_.ts(17,2): error TS1110: Type expected.\n../../../../tmp/tmpbl17mr8_.ts(17,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpbl17mr8_.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmpbl17mr8_.ts(18,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpbl17mr8_.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmpbl17mr8_.ts(19,7): error TS1109: Expression expected.\n../../../../tmp/tmpbl17mr8_.ts(20,6): error TS1005: ';' expected.\n../../../../tmp/tmpbl17mr8_.ts(20,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpbl17mr8_.ts(20,55): error TS1002: Unterminated string literal.\n../../../../tmp/tmpbl17mr8_.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpbl17mr8_.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpbl17mr8_.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpbl17mr8_.ts(22,7): error TS1109: Expression expected.\n../../",
      "timestamp": 1660334013
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowels = \"aeiou\";\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex > -1) {\n            result += vowels[vowelIndex + 2];\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8d17fmrm.js:25:12)\n    at Object.<anonymous> (/tmp/tmp8d17fmrm.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334014
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n    }\n    return newMessage;\n}\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello\"));\nconsole.log(encode(\"Hello!\"));\nconsole.log(encode(\"Hello!!\"));\nconsole.log(encode(\"Hello!!!\"));\nconsole.log(encode(\"Hello!!!\"));\nconsole.log(encode(\"Hello!!!!\"));\nconsole.log(encode(\"Hello!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(encode(\"Hello!!!!!!!\"));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqotr0vm4.ts(78,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334013
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    let vowels = \"aeiouAEIOU\";\n    let vowelsMap = {};\n    vowels.split('').forEach(letter => {\n        vowelsMap[letter] = letter;\n    });\n    newMessage = newMessage.split('').map(letter => {\n        if (vowelsMap[letter]) {\n            return vowelsMap[letter];\n        }\n        return letter;\n    }).join('');\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp09ehe1e8.js:25:12)\n    at Object.<anonymous> (/tmp/tmp09ehe1e8.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334014
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = message;\n    let vowels = \"aeiou\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let index = vowels.indexOf(letter);\n        if (index > -1) {\n            let vowelIndex = index + 2;\n            encodedMessage = encodedMessage.replace(letter, vowels[vowelIndex]);\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1pukjng9.js:23:12)\n    at Object.<anonymous> (/tmp/tmp1pukjng9.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334014
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encoded = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = letter;\n        let vowels = \"aeiou\";\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex > -1) {\n            encodedLetter = vowels[vowelIndex + 1];\n        }\n        encoded = encoded + encodedLetter;\n    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_wgbctt_.js:24:12)\n    at Object.<anonymous> (/tmp/tmp_wgbctt_.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334014
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            encodedMessage += letter;\n        } else {\n            encodedMessage += letter.charCodeAt(0) - 97;\n        }\n    }\n    return encodedMessage;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpdhnrjbg0.js:23:12)\n    at Object.<anonymous> (/tmp/tmpdhnrjbg0.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334007
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      encodedMessage += letter;\n    } else {\n      encodedMessage += letter.charCodeAt(0) - 97;\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpptyfr8my.js:23:12)\n    at Object.<anonymous> (/tmp/tmpptyfr8my.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334014
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = \"\";\n        if (letter === \"a\") {\n            encodedLetter = \"b\";\n        } else if (letter === \"b\") {\n            encodedLetter = \"a\";\n        } else if (letter === \"c\") {\n            encodedLetter = \"d\";\n        } else if (letter === \"d\") {\n            encodedLetter = \"c\";\n        } else if (letter === \"e\") {\n            encodedLetter = \"f\";\n        } else if (letter === \"f\") {\n            encodedLetter = \"e\";\n        } else if (letter === \"g\") {\n            encodedLetter = \"h\";\n        } else if (letter === \"h\") {\n            encodedLetter = \"g\";\n        } else if (letter === \"i\") {\n            encodedLetter = \"j\";\n        } else if (letter === \"j\") {\n            encodedLetter = \"i\";\n        } else if (letter === \"k\") {\n            encodedLetter = \"l\";\n        } else if (letter === \"l\") {\n            encodedLetter = \"k\";\n        } else if (letter === \"m\") {\n            encodedLetter = \"n\";\n        } else if (letter === \"n\") {\n            encodedLetter = \"m\";\n        } else if (letter === \"o\") {\n            encodedLetter = \"p\";\n        } else if (letter === \"p\") {\n            encodedLetter = \"o\";\n        } else if (letter === \"q\") {\n            encodedLetter = \"r\";\n        } else if (letter === \"r\") {\n            encodedLetter = \"q\";\n        } else if (letter === \"s\") {\n            encodedLetter = \"t\";\n        } else if (letter === \"t\") {\n            encodedLetter = \"s\";\n        } else if (letter === \"u\") {\n            encodedLetter = \"v\";\n        } else if (letter === \"v\") {\n            encodedLetter = \"u\";\n        } else if (letter === \"w\") {\n            encodedLetter = \"x\";\n        } else if (letter === \"x\") {\n            encodedLetter = \"w\";\n        } else if (letter === \"y\") {\n            encodedLetter = \"z\";\n        } else if (letter === \"z\") {\n            encodedLetter = \"y\";\n        }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5qgvnmdy.js:97:12)\n    at Object.<anonymous> (/tmp/tmp5qgvnmdy.js:103:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334016
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowel = \"a\";\n        let vowel2 = \"e\";\n        let vowel3 = \"i\";\n        let vowel4 = \"o\";\n        let vowel5 = \"u\";\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newMessage += letter;\n        } else {\n            newMessage += vowel;\n            newMessage += vowel2;\n            newMessage += vowel3;\n            newMessage += vowel4;\n            newMessage += vowel5;\n        }\n    }\n    return newMessage;\n}\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"he\"));\nconsole.log(encode(\"bye\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'aeiouaeiouaeiouaeiou'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp41k5jdh4.js:103:12)\n    at Object.<anonymous> (/tmp/tmp41k5jdh4.js:109:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'aeiouaeiouaeiouaeiou',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "aeioueaeiouaeiouo\naeioueaeiou\naeioui\naeioue\naeiouaeioue\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\naeioueaeiou\naeioui\n",
      "timestamp": 1660334016
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = letter.toUpperCase();\n        let vowels = \"AEIOUaeiou\";\n        let vowelIndex = vowels.indexOf(letter);\n        let encodedVowel = vowels[vowelIndex + 1];\n        encodedMessage += encodedLetter + encodedVowel;\n    }\n    return encodedMessage;\n}\n</code>\n<|/ a tags=javascript,algorithm,string |>\n<| c |>\nI like your solution, but I believe it would be better to use a regex to replace vowels with their indexes, then just add them to the string. `let encodedMessage = message.replace(/[AEIOUaeiou]/gi, m => vowels.indexOf(m) + 1);`\n<|/ c |>\n<| c |>\nI agree, that would be better. I'll edit my answer to include that as well.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplv85ud80.ts(19,2): error TS1110: Type expected.\n../../../../tmp/tmplv85ud80.ts(19,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmplv85ud80.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmplv85ud80.ts(20,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmplv85ud80.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmplv85ud80.ts(21,7): error TS1109: Expression expected.\n../../../../tmp/tmplv85ud80.ts(22,3): error TS1005: ';' expected.\n../../../../tmp/tmplv85ud80.ts(22,8): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmplv85ud80.ts(22,27): error TS1005: ';' expected.\n../../../../tmp/tmplv85ud80.ts(22,29): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmplv85ud80.ts(22,37): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmplv85ud80.ts(22,40): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmplv85ud80.ts(22,46): error TS1434: Unexpected keyword ",
      "timestamp": 1660334016
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            encodedMessage += letter;\n        } else {\n            encodedMessage += letter.charCodeAt(0) - 97;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjv8o3dca.js:23:12)\n    at Object.<anonymous> (/tmp/tmpjv8o3dca.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334006
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\") {\n            newMessage += \"A\";\n        } else if (letter === \"e\") {\n            newMessage += \"E\";\n        } else if (letter === \"i\") {\n            newMessage += \"I\";\n        } else if (letter === \"o\") {\n            newMessage += \"O\";\n        } else if (letter === \"u\") {\n            newMessage += \"U\";\n        } else if (letter === \"A\") {\n            newMessage += \"a\";\n        } else if (letter === \"E\") {\n            newMessage += \"e\";\n        } else if (letter === \"I\") {\n            newMessage += \"i\";\n        } else if (letter === \"O\") {\n            newMessage += \"o\";\n        } else if (letter === \"U\") {\n            newMessage += \"u\";\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'e'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp30gne19u.js:47:12)\n    at Object.<anonymous> (/tmp/tmp30gne19u.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'e',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334017
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newMessage += letter;\n        } else {\n            newMessage += letter.charCodeAt(0) - 96 + 2;\n        }\n    }\n    return newMessage;\n}\nencode(\" \");\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-10-25-11-10'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplj3jjx20.js:24:12)\n    at Object.<anonymous> (/tmp/tmplj3jjx20.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-10-25-11-10',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334017
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let encodedLetter = letter.toUpperCase();\n    let vowelIndex = encodedLetter.indexOf(\"A\");\n    if (vowelIndex >= 0) {\n      encodedLetter = encodedLetter.replace(\"A\", \"B\");\n    }\n    encodedMessage += encodedLetter;\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpm9jk06jp.js:23:12)\n    at Object.<anonymous> (/tmp/tmpm9jk06jp.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334017
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        encodedMessage += letter.toUpperCase();\n    }\n    return encodedMessage;\n}\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprea8z_cx.ts(84,27): error TS1002: Unterminated string literal.\n../../../../tmp/tmprea8z_cx.ts(85,1): error TS1005: ',' expected.\n../../../../tmp/tmprea8z_cx.ts(85,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334017
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter;\n    }\n    return newMessage;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpnso1zuhx.js:18:12)\n    at Object.<anonymous> (/tmp/tmpnso1zuhx.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334017
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\";\n    let result: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (alphabet.indexOf(letter) > -1) {\n            let index = alphabet.indexOf(letter);\n            let nextLetter = alphabet[index + 1];\n            if (vowels.indexOf(nextLetter) > -1) {\n                result += nextLetter;\n            } else {\n                result += letter;\n            }\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzjmacch_.ts(27,2): error TS1110: Type expected.\n../../../../tmp/tmpzjmacch_.ts(27,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpzjmacch_.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmpzjmacch_.ts(28,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpzjmacch_.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmpzjmacch_.ts(29,6): error TS1005: ';' expected.\n../../../../tmp/tmpzjmacch_.ts(29,16): error TS1109: Expression expected.\n../../../../tmp/tmpzjmacch_.ts(31,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334017
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    let vowels = \"aeiouAEIOU\";\n    let letters = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage.charAt(i);\n        if (vowels.indexOf(letter) > -1) {\n            let index = vowels.indexOf(letter);\n            newMessage = newMessage.replace(letter, letters[index + 1]);\n        }\n    }\n    return newMessage;\n}\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ThST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpb_cm0336.js:84:12)\n    at Object.<anonymous> (/tmp/tmpb_cm0336.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ThST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "Hclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\nHclle Werld!\n",
      "timestamp": 1660334017
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter.toUpperCase();\n        newMessage += newLetter;\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpakvk7r6b.js:19:12)\n    at Object.<anonymous> (/tmp/tmpakvk7r6b.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334003
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpl63qh7ls.js:18:12)\n    at Object.<anonymous> (/tmp/tmpl63qh7ls.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334003
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = letter.toUpperCase();\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpz75h6k4p.js:19:12)\n    at Object.<anonymous> (/tmp/tmpz75h6k4p.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334017
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else {\n            result += letter.charCodeAt(0) - 97;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpv2d13nnf.js:23:12)\n    at Object.<anonymous> (/tmp/tmpv2d13nnf.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334017
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encoded = message;\n    let vowels = \"aeiou\";\n    let vowelsMap = {};\n    for (let i = 0; i < vowels.length; i++) {\n        vowelsMap[vowels[i]] = i;\n    }\n    for (let i = 0; i < encoded.length; i++) {\n        let letter = encoded.charAt(i);\n        let nextLetter = encoded.charAt(i + 1);\n        if (vowelsMap[letter] !== undefined) {\n            encoded = encoded.replace(letter, vowelsMap[letter]);\n            encoded = encoded.replace(nextLetter, vowelsMap[nextLetter]);\n        }\n    }\n    return encoded;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpo1dq69qo.js:27:12)\n    at Object.<anonymous> (/tmp/tmpo1dq69qo.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334017
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter.charCodeAt(0) - 64;\n        newMessage += String.fromCharCode(newLetter);\n    }\n    return newMessage;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't seem to work. `encode(\"hello\")` returns `ehlo` instead of `eheello`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out\n<|/ c |>\n<| a tags=javascript,algorithm |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppm9q48da.ts(16,2): error TS1110: Type expected.\n../../../../tmp/tmppm9q48da.ts(16,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmppm9q48da.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmppm9q48da.ts(17,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmppm9q48da.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmppm9q48da.ts(18,7): error TS1109: Expression expected.\n../../../../tmp/tmppm9q48da.ts(19,6): error TS1005: ';' expected.\n../../../../tmp/tmppm9q48da.ts(19,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmppm9q48da.ts(19,82): error TS1002: Unterminated string literal.\n../../../../tmp/tmppm9q48da.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmppm9q48da.ts(20,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmppm9q48da.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmppm9q48da.ts(21,7): error TS1109: Expression expected.\n../../",
      "timestamp": 1660334017
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\";\n    let result: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter: string = message[i];\n        let index = alphabet.indexOf(letter);\n        if (index > -1) {\n            result += alphabet.charAt(index - 2);\n        }\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter: string = message[i];\n        let index = vowels.indexOf(letter);\n        if (index > -1) {\n            result += alphabet.charAt(index + 2);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2m6q3rb1.js:30:12)\n    at Object.<anonymous> (/tmp/tmp2m6q3rb1.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334017
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = message;\n    let vowels = \"aeiouAEIOU\";\n    for (let i = 0; i < encodedMessage.length; i++) {\n        let letter = encodedMessage[i];\n        let index = vowels.indexOf(letter);\n        if (index > -1) {\n            let twoLettersBefore = vowels.charAt(index - 2);\n            encodedMessage = encodedMessage.replace(letter, twoLettersBefore);\n        }\n    }\n    return encodedMessage;\n}\n</code>\n<|/ a tags=javascript,algorithm,string |>\n<| c |>\nThanks for your answer. Can you please explain how this works? I understand that it is replacing all vowels with two letters ahead of it, but how does it do that? What is the logic behind that?\n<|/ c |>\n<| c |>\nThe logic is that when you find a vowel, you replace it with the letter that appears 2 places ahead of it. So if you find a vowel `a`, you replace it with `a`. If you find a vowel `e`, you replace it with `e`. If you find a vowel `i`, you replace it with `i`. If you find a vowel `o`, you replace it with `o`. If you find a vowel `n`, you replace it with `n`. If you find a vowel `u`, you replace it with `u`. If you find a vowel `A`, you replace it with `A`. If you find a vowel `E`, you replace it with `E`. If you find a vowel `I`, you replace it with `I`. If you find a vowel `O`, you replace it with `O`. If you find a vowel `N`, you replace it with `N`. If you find a vowel `U`, you replace it with `U`. If you find a vowel `a`, you replace it with `a`. If you find a vowel `e`, you replace it with `e`. If you find a vowel `i`, you replace it with `i`. If you find a vowel `o`, you replace it with `o`. If you find a vowel `n`, you replace it with `n`. If you find a vowel `u`, you replace it with `u`. If you find a vowel `A`, you replace it with `A`. If you find a vowel `E`, you replace it with `E`. If you find a vowel `I`, you replace it with `I`. If you find a vowel `O`, you replace it with `O`. If you find a vowel `N`, you replace it with `N`. If you find a vowel `U`, you replace it with `U`\n<|/ c |>\n<| c |>\nThanks so much for your explanation! I understand it now!\n<|/\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu7axse58.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmpu7axse58.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpu7axse58.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpu7axse58.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpu7axse58.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpu7axse58.ts(22,7): error TS1109: Expression expected.\n../../../../tmp/tmpu7axse58.ts(23,8): error TS1005: ';' expected.\n../../../../tmp/tmpu7axse58.ts(23,12): error TS1005: '(' expected.\n../../../../tmp/tmpu7axse58.ts(23,17): error TS1005: ';' expected.\n../../../../tmp/tmpu7axse58.ts(23,29): error TS1005: ';' expected.\n../../../../tmp/tmpu7axse58.ts(23,33): error TS1005: ')' expected.\n../../../../tmp/tmpu7axse58.ts(23,40): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpu7axse58.ts(23,48): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpu7axse58.ts(23,57): error TS1005: ';' expected.\n../../../../tmp/tmpu7axse58.ts(23,66): error TS1005: ':' expected.\n../../../../tmp/tmpu7axse58.ts(23,77): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpu7axse58.ts(23,82): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpu7axse58.ts(23,85): error TS1228: A type predicate is only allowed in return type position for functions and methods.\n../../../../tmp/tmpu7axse58.ts(23,88): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpu7axse58.ts(23,98): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpu7axse58.ts(23,102): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpu7axse58.ts(23,114): error TS1005: '(' expected.\n../../../../tmp/tmpu7axse58.ts(23,118): error TS1005: ')' expected.\n../../../../tmp/tmpu7axse58.ts(23,126): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpu7axse58.ts(23,132): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpu7axse58.ts(23,143): error TS1",
      "timestamp": 1660334017
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = message;\n  let vowels = \"aeiou\";\n  let vowelsMap = new Map();\n  vowels.split('').forEach(letter => {\n    vowelsMap.set(letter, vowels.indexOf(letter));\n  });\n  encodedMessage = encodedMessage.split('').map(letter => {\n    if (vowelsMap.has(letter)) {\n      return letter.toUpperCase();\n    } else {\n      return letter.toLowerCase();\n    }\n  }).join('');\n  return encodedMessage;\n}\n\nconsole.log(encode('hello'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('helloWorld'));\nconsole.log(encode('\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8nn60hab.ts(94,21): error TS1002: Unterminated string literal.\n../../../../tmp/tmp8nn60hab.ts(95,1): error TS1005: ',' expected.\n../../../../tmp/tmp8nn60hab.ts(95,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334017
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newMessage += letter;\n        } else {\n            newMessage += letter.charCodeAt(0) - 96;\n        }\n    }\n    return newMessage;\n}\n\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"hellooo\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqsqjm4m2.ts(83,28): error TS1002: Unterminated string literal.\n../../../../tmp/tmpqsqjm4m2.ts(84,1): error TS1005: ',' expected.\n../../../../tmp/tmpqsqjm4m2.ts(84,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334017
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage.charAt(i);\n        newMessage = newMessage.replace(letter, letter.toUpperCase());\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3rp24ete.js:18:12)\n    at Object.<anonymous> (/tmp/tmp3rp24ete.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334017
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = letter;\n        let vowels = \"aeiou\";\n        let vowelsIndex = 2;\n        for (let j = 0; j < vowels.length; j++) {\n            if (vowels[j] == letter) {\n                vowelsIndex = j;\n                break;\n            }\n        }\n        encodedLetter = vowels[vowelsIndex];\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!!\"));\nconsole.log(encode(\"Hello World!!!\"));\nconsole.log(encode(\"Hello World!!!!\"));\nconsole.log(encode(\"Hello World!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1hn3xu13.ts(73,21): error TS1002: Unterminated string literal.\n../../../../tmp/tmp1hn3xu13.ts(74,1): error TS1005: ',' expected.\n../../../../tmp/tmp1hn3xu13.ts(74,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334017
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        newMessage += message[i].toUpperCase();\n    }\n    for (let i = 0; i < message.length; i++) {\n        newMessage += message[i].toLowerCase();\n    }\n    for (let i = 0; i < message.length; i++) {\n        newMessage += message[i].toUpperCase();\n    }\n    for (let i = 0; i < message.length; i++) {\n        newMessage += message[i].toLowerCase();\n    }\n    return newMessage;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,algorithm |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3zo14dgz.ts(23,2): error TS1110: Type expected.\n../../../../tmp/tmp3zo14dgz.ts(23,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp3zo14dgz.ts(24,2): error TS1109: Expression expected.\n../../../../tmp/tmp3zo14dgz.ts(24,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp3zo14dgz.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmp3zo14dgz.ts(25,6): error TS1005: ';' expected.\n../../../../tmp/tmp3zo14dgz.ts(25,33): error TS1109: Expression expected.\n../../../../tmp/tmp3zo14dgz.ts(27,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334017
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = letter;\n        let vowels = \"aeiou\";\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex != -1) {\n            encodedLetter = vowels[vowelIndex + 1];\n        }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpq58mt_x5.js:24:12)\n    at Object.<anonymous> (/tmp/tmpq58mt_x5.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334020
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        result += letter.toUpperCase();\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp7yi46r60.js:18:12)\n    at Object.<anonymous> (/tmp/tmp7yi46r60.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334020
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage = newMessage.replace(letter, \n            letter.charCodeAt(0) - 96);\n    }\n    return newMessage;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nThis doesn't work. Try it with `encode(\"Hello World!\")`.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated the answer to account for that.\n<|/ c |>\n<| c |>\nThis still doesn't work. Try it with `encode(\"Hello World!\")`.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated the answer to account for that.\n<|/ c |>\n<| c |>\nThis still doesn't work. Try it with `encode(\"Hello World!\")`.\n<|/ c |>\n<| a tags=javascript,algorithm |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpa6ageny0.ts(16,2): error TS1110: Type expected.\n../../../../tmp/tmpa6ageny0.ts(16,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpa6ageny0.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmpa6ageny0.ts(17,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpa6ageny0.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmpa6ageny0.ts(18,7): error TS1109: Expression expected.\n../../../../tmp/tmpa6ageny0.ts(19,6): error TS1005: ';' expected.\n../../../../tmp/tmpa6ageny0.ts(19,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpa6ageny0.ts(19,57): error TS1002: Unterminated string literal.\n../../../../tmp/tmpa6ageny0.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmpa6ageny0.ts(20,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpa6ageny0.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpa6ageny0.ts(21,7): error TS1109: Expression expected.\n../../../../tmp/tmpa6ageny0.ts(22,3): error TS1005: ';' expected.\n../../../../tmp/tmpa6ageny0.ts(22,7): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpa6ageny0.ts(22,12): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpa6ageny0.ts(22,23): error TS1005: ';' expected.\n../../../../tmp/tmpa6ageny0.ts(22,66): error TS1002: Unterminated string literal.\n../../../../tmp/tmpa6ageny0.ts(23,2): error TS1109: Expression expected.\n../../../../tmp/tmpa6ageny0.ts(23,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpa6ageny0.ts(24,2): error TS1109: Expression expected.\n../../../../tmp/tmpa6ageny0.ts(24,7): error TS1109: Expression expected.\n../../../../tmp/tmpa6ageny0.ts(25,6): error TS1005: ';' expected.\n../../../../tmp/tmpa6ageny0.ts(25,12): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpa6ageny0.ts(25,63): error TS1002: Unterminated string literal.\n../../../../tmp/tmpa6ageny0.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmpa6a",
      "timestamp": 1660334019
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        encodedMessage += letter.toUpperCase();\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsgajab9v.js:18:12)\n    at Object.<anonymous> (/tmp/tmpsgajab9v.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334013
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    let vowels = \"aeiou\";\n    let vowelsArray = vowels.split(\"\");\n    let vowelsArrayLength = vowelsArray.length;\n    let vowelsArrayIndex = 0;\n    let vowelsArrayIndex2 = 0;\n    let vowelsArrayIndex3 = 0;\n    let vowelsArrayIndex4 = 0;\n    let vowelsArrayIndex5 = 0;\n    let vowelsArrayIndex6 = 0;\n    let vowelsArrayIndex7 = 0;\n    let vowelsArrayIndex8 = 0;\n    let vowelsArrayIndex9 = 0;\n    let vowelsArrayIndex10 = 0;\n    let vowelsArrayIndex11 = 0;\n    let vowelsArrayIndex12 = 0;\n    let vowelsArrayIndex13 = 0;\n    let vowelsArrayIndex14 = 0;\n    let vowelsArrayIndex15 = 0;\n    let vowelsArrayIndex16 = 0;\n    let vowelsArrayIndex17 = 0;\n    let vowelsArrayIndex18 = 0;\n    let vowelsArrayIndex19 = 0;\n    let vowelsArrayIndex20 = 0;\n    let vowelsArrayIndex21 = 0;\n    let vowelsArrayIndex22 = 0;\n    let vowelsArrayIndex23 = 0;\n    let vowelsArrayIndex24 = 0;\n    let vowelsArrayIndex25 = 0;\n    let vowelsArrayIndex26 = 0;\n    let vowelsArrayIndex27 = 0;\n    let vowelsArrayIndex28 = 0;\n    let vowelsArrayIndex29 = 0;\n    let vowelsArrayIndex30 = 0;\n    let vowelsArrayIndex31 = 0;\n    let vowelsArrayIndex32 = 0;\n    let vowelsArrayIndex33 = 0;\n    let vowelsArrayIndex34 = 0;\n    let vowelsArrayIndex35 = 0;\n    let vowelsArrayIndex36 = 0;\n    let vowelsArrayIndex37 = 0;\n    let vowelsArrayIndex38 = 0;\n    let vowelsArrayIndex39 = 0;\n    let vowelsArrayIndex40 = 0;\n    let vowelsArrayIndex41 = 0;\n    let vowelsArrayIndex42 = 0;\n    let vowelsArrayIndex43 = 0;\n    let vowelsArrayIndex44 = 0;\n    let vowelsArrayIndex45 = 0;\n    let vowelsArrayIndex46 = 0;\n    let vowelsArrayIndex47 = 0;\n    let vowelsArrayIndex48 = 0;\n    let vowelsArrayIndex49 = 0;\n    let vowelsArrayIndex50 = 0;\n    let vowelsArrayIndex51 = 0;\n    let vowelsArrayIndex52 = 0;\n    let vowelsArrayIndex53 = 0;\n    let vowelsArrayIndex54 = 0;\n    let vowelsArrayIndex55 = 0;\n    let vowelsArrayIndex56 = 0;\n    let vowelsArrayIndex57 = 0;\n    let vowelsArrayIndex58 = 0;\n    let vowelsArrayIndex59 = 0;\n    let vowelsArrayIndex60 = 0;\n    let vowels\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp28hcse6d.ts(86,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334020
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpl63qh7ls.js:18:12)\n    at Object.<anonymous> (/tmp/tmpl63qh7ls.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334003
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        result += swapCase(letter);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplozyxen8.ts(11,19): error TS2304: Cannot find name 'swapCase'.\n",
      "timestamp": 1660334020
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newMessage += letter;\n        } else {\n            newMessage += letter.charCodeAt(0) - 97;\n        }\n    }\n    return newMessage;\n}\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hellooo\"));\nconsole.log(encode(\"helloooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(encode(\"helloooooooo\"));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpra5j2i84.ts(76,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334020
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        result += letter.toUpperCase();\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp7yi46r60.js:18:12)\n    at Object.<anonymous> (/tmp/tmp7yi46r60.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334020
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = letter;\n        let vowelIndex = 0;\n        while (vowelIndex < vowels.length && vowels[vowelIndex] === letter) {\n            vowelIndex++;\n        }\n        if (vowelIndex < vowels.length) {\n            encodedLetter = vowels[vowelIndex];\n        }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprgbu0_if.ts(13,29): error TS2304: Cannot find name 'vowels'.\n../../../../tmp/tmprgbu0_if.ts(13,46): error TS2304: Cannot find name 'vowels'.\n../../../../tmp/tmprgbu0_if.ts(16,26): error TS2304: Cannot find name 'vowels'.\n../../../../tmp/tmprgbu0_if.ts(17,29): error TS2304: Cannot find name 'vowels'.\n",
      "timestamp": 1660334020
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    for (let i = 0; i < message.length; i++) {\n        let letter = message.charAt(i);\n        newMessage = newMessage.replace(letter, letter.charCodeAt(0) - 96);\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp63e49v_w.ts(11,49): error TS2769: No overload matches this call.\n  The last overload gave the following error.\n    Argument of type 'number' is not assignable to parameter of type '(substring: string, ...args: any[]) => string'.\n",
      "timestamp": 1660334020
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message.toLowerCase();\n    let newMessageArray = newMessage.split(\"\");\n    let newMessageArrayLength = newMessageArray.length;\n    let newMessageArrayLength = newMessageArrayLength - 1;\n    let newMessageArrayLength2 = newMessageArrayLength - 2;\n    let newMessageArrayLength3 = newMessageArrayLength - 3;\n    let newMessageArrayLength4 = newMessageArrayLength - 4;\n    let newMessageArrayLength5 = newMessageArrayLength - 5;\n    let newMessageArrayLength6 = newMessageArrayLength - 6;\n    let newMessageArrayLength7 = newMessageArrayLength - 7;\n    let newMessageArrayLength8 = newMessageArrayLength - 8;\n    let newMessageArrayLength9 = newMessageArrayLength - 9;\n    let newMessageArrayLength10 = newMessageArrayLength - 10;\n    let newMessageArrayLength11 = newMessageArrayLength - 11;\n    let newMessageArrayLength12 = newMessageArrayLength - 12;\n    let newMessageArrayLength13 = newMessageArrayLength - 13;\n    let newMessageArrayLength14 = newMessageArrayLength - 14;\n    let newMessageArrayLength15 = newMessageArrayLength - 15;\n    let newMessageArrayLength16 = newMessageArrayLength - 16;\n    let newMessageArrayLength17 = newMessageArrayLength - 17;\n    let newMessageArrayLength18 = newMessageArrayLength - 18;\n    let newMessageArrayLength19 = newMessageArrayLength - 19;\n    let newMessageArrayLength20 = newMessageArrayLength - 20;\n    let newMessageArrayLength21 = newMessageArrayLength - 21;\n    let newMessageArrayLength22 = newMessageArrayLength - 22;\n    let newMessageArrayLength23 = newMessageArrayLength - 23;\n    let newMessageArrayLength24 = newMessageArrayLength - 24;\n    let newMessageArrayLength25 = newMessageArrayLength - 25;\n    let newMessageArrayLength26 = newMessageArrayLength - 26;\n    let newMessageArrayLength27 = newMessageArrayLength - 27;\n    let newMessageArrayLength28 = newMessageArrayLength - 28;\n    let newMessageArrayLength29 = newMessageArrayLength - 29;\n    let newMessageArrayLength30 = newMessageArrayLength - 30;\n    let newMessageArrayLength31 = newMessageArrayLength - 31;\n    let newMessageArrayLength32 = newMessageArrayLength - 32;\n    let newMessageArrayLength33 = newMessageArrayLength - 33;\n    let newMessageArrayLength34 = newMessageArrayLength - 34;\n    let newMessageArrayLength35 = newMessageArrayLength - 35;\n    let newMessageArrayLength36 = newMessageArrayLength - 36;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkhi7gfxs.ts(60,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334020
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = letter;\n        let vowelIndex = getVowelIndex(letter);\n        if (vowelIndex > -1) {\n            encodedLetter = englishAlphabet[vowelIndex + 2];\n        }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpy57mco5z.ts(12,26): error TS2304: Cannot find name 'getVowelIndex'.\n../../../../tmp/tmpy57mco5z.ts(14,29): error TS2304: Cannot find name 'englishAlphabet'.\n",
      "timestamp": 1660334020
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowels = \"aeiou\";\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex > -1) {\n            letter = vowels[vowelIndex + 2];\n        }\n        result += letter;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpf7xcb1ca.js:23:12)\n    at Object.<anonymous> (/tmp/tmpf7xcb1ca.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334021
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            encodedMessage += letter;\n        } else {\n            encodedMessage += letter.charCodeAt(0) - 96;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpe0ibp5g3.js:23:12)\n    at Object.<anonymous> (/tmp/tmpe0ibp5g3.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334021
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage[i];\n        let vowels = \"aeiouAEIOU\";\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex > 0) {\n            newMessage = newMessage.slice(0, vowelIndex) + \n                vowels[vowelIndex + 1] + newMessage.slice(vowelIndex + 1);\n        }\n    }\n    return newMessage;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nThanks for your answer! I really appreciate it! But I still don't understand how it works. Could you please explain it a little bit more? Thanks!\n<|/ c |>\n<| c |>\nI added some comments to the code. Let me know if that helps.\n<|/ c |>\n<| c |>\nThank you so much! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it! I really appreciate it\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpecoqm_hx.ts(24,2): error TS1110: Type expected.\n../../../../tmp/tmpecoqm_hx.ts(24,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpecoqm_hx.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmpecoqm_hx.ts(25,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpecoqm_hx.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmpecoqm_hx.ts(26,7): error TS1109: Expression expected.\n../../../../tmp/tmpecoqm_hx.ts(27,8): error TS1005: ';' expected.\n../../../../tmp/tmpecoqm_hx.ts(27,12): error TS1005: '(' expected.\n../../../../tmp/tmpecoqm_hx.ts(27,17): error TS1005: ';' expected.\n../../../../tmp/tmpecoqm_hx.ts(27,25): error TS1005: ';' expected.\n../../../../tmp/tmpecoqm_hx.ts(27,27): error TS1005: ')' expected.\n../../../../tmp/tmpecoqm_hx.ts(27,34): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpecoqm_hx.ts(27,49): error TS1005: ';' expected.\n../../../../tmp/tmpecoqm_hx.ts(27,53): error TS1434: Unexpected ",
      "timestamp": 1660334020
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = letter;\n        let vowels = \"aeiouAEIOU\";\n        for (let j = 0; j < vowels.length; j++) {\n            if (letter === vowels[j]) {\n                encodedLetter = vowels[j + 1];\n                break;\n            }\n        }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(encode(\"helloWorld\"));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpc9u4bq60.ts(96,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334020
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = letter.toUpperCase();\n        let encodedVowel = encodedLetter.replace(/[AEIOUaeiou]/g, function (letter) {\n            let index = letter.charCodeAt(0) - 97;\n            return String.fromCharCode(index + 2);\n        });\n        encodedMessage += encodedVowel;\n    }\n    return encodedMessage;\n}\nencode(`Hello World!`); // \"Hleellllooorwwoorrld!\"\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nThis doesn't seem to work. `encode(\"Hello World!\")` returns `Hleellllooorwwoorrld!` instead of `Hleellllooorwwoorrld!`\n<|/ c |>\n<| c |>\nI fixed the typo and added a working example. Thanks for pointing it out.\n<|/ c |>\n<| a tags=javascript,algorithm |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2y7dde4a.ts(21,2): error TS1110: Type expected.\n../../../../tmp/tmp2y7dde4a.ts(21,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp2y7dde4a.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmp2y7dde4a.ts(22,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp2y7dde4a.ts(23,2): error TS1109: Expression expected.\n../../../../tmp/tmp2y7dde4a.ts(23,7): error TS1109: Expression expected.\n../../../../tmp/tmp2y7dde4a.ts(24,6): error TS1005: ';' expected.\n../../../../tmp/tmp2y7dde4a.ts(24,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp2y7dde4a.ts(24,119): error TS1002: Unterminated string literal.\n../../../../tmp/tmp2y7dde4a.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmp2y7dde4a.ts(25,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp2y7dde4a.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmp2y7dde4a.ts(26,7): error TS1109: Expression expected.\n../../../../tmp/tmp2y7dde4a.ts(27,3): error TS1005: ';' expected.\n../../../../tmp/tmp2y7dde4a.ts(27,9): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp2y7dde4a.ts(27,13): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp2y7dde4a.ts(27,18): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp2y7dde4a.ts(27,22): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp2y7dde4a.ts(27,28): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp2y7dde4a.ts(27,30): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp2y7dde4a.ts(27,54): error TS1005: ';' expected.\n../../../../tmp/tmp2y7dde4a.ts(27,58): error TS1005: '(' expected.\n../../../../tmp/tmp2y7dde4a.ts(27,67): error TS1005: ';' expected.\n../../../../tmp/tmp2y7dde4a.ts(27,70): error TS1005: ';' expected.\n../../../../tmp/tmp2y7dde4a.ts(28,1): error TS1003: Identifier expected.\n../../../../tmp/tmp2y7dde4a.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmp2y7dde4a.",
      "timestamp": 1660334020
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n    }\n    return newMessage;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpojsp_gqe.js:18:12)\n    at Object.<anonymous> (/tmp/tmpojsp_gqe.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334013
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    let vowels = \"aeiou\";\n    let vowelsCount = vowels.length;\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage.charAt(i);\n        let index = vowels.indexOf(letter);\n        if (index != -1) {\n            let vowelIndex = index + 1;\n            newMessage = newMessage.replace(letter, vowels[vowelIndex]);\n        }\n    }\n    return newMessage;\n}\n\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp7r2kbacz.js:103:12)\n    at Object.<anonymous> (/tmp/tmp7r2kbacz.js:109:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hillu\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\nhiy\nho\n",
      "timestamp": 1660334021
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter;\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newLetter = letter.toUpperCase();\n        }\n        newMessage += newLetter;\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpqoiooflh.js:22:12)\n    at Object.<anonymous> (/tmp/tmpqoiooflh.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334006
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = \"\";\n        for (let j = 0; j < letter.length; j++) {\n            let letterIndex = letter.charCodeAt(j) - 65;\n            let vowelIndex = letterIndex - 2;\n            if (vowelIndex < 0) {\n                vowelIndex += 26;\n            }\n            encodedLetter += String.fromCharCode(vowelIndex);\n        }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x11\\x02\\x10\\x11'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpcvnvh7pl.js:27:12)\n    at Object.<anonymous> (/tmp/tmpcvnvh7pl.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x11\\x02\\x10\\x11',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334021
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encoded = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let encodedLetter = letter;\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      encodedLetter = letter.toUpperCase();\n    }\n    encoded = encoded + encodedLetter;\n  }\n  return encoded;\n}\n\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!!!\"));\nconsole.log(encode(\"Hello World!!!!\"));\nconsole.log(encode(\"Hello World!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpc671p6ze.js:72:12)\n    at Object.<anonymous> (/tmp/tmpc671p6ze.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "HEllO WOrld\nHEllO WOrld!\nHEllO WOrld!!!\nHEllO WOrld!!!!\nHEllO WOrld!!!!!\nHEllO WOrld!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\nHEllO WOrld!!!!!!!\n",
      "timestamp": 1660334021
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = letter.toUpperCase();\n        let vowelIndex = letter.search(/[AEIOU]/);\n        let vowel = vowelIndex === -1 ? letter : letter.substring(0, vowelIndex);\n        let vowelIndex = letter.search(/[AEIOU]/);\n        let vowel2 = vowelIndex === -1 ? letter : letter.substring(vowelIndex + 1);\n        encodedMessage += vowel + vowel2;\n    }\n    return encodedMessage;\n}\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpawvob0fe.ts(78,21): error TS1002: Unterminated string literal.\n../../../../tmp/tmpawvob0fe.ts(79,1): error TS1005: ',' expected.\n../../../../tmp/tmpawvob0fe.ts(79,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334021
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n    }\n    return newMessage;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpojsp_gqe.js:18:12)\n    at Object.<anonymous> (/tmp/tmpojsp_gqe.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334013
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encoded = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowels = \"aeiouAEIOU\";\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex >= 0) {\n            let vowelIndex2 = vowelIndex + 1;\n            encoded = encoded + vowels[vowelIndex2];\n        } else {\n            encoded = encoded + letter;\n        }\n    }\n    return encoded;\n}\nencode(message: \"hello\")\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzbze5alj.ts(22,15): error TS1005: ',' expected.\n",
      "timestamp": 1660334021
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encoded = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            encoded += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n            encoded += alphabet[(index + 1) % alphabet.length];\n        }\n    }\n    return encoded;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7d6s0hsm.ts(14,25): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp7d6s0hsm.ts(15,24): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp7d6s0hsm.ts(15,47): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660334010
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encoded = message;\n    let vowels = \"aeiouAEIOU\";\n    for (let i = 0; i < encoded.length; i++) {\n        let letter = encoded.charAt(i);\n        if (vowels.indexOf(letter) > -1) {\n            let index = vowels.indexOf(letter);\n            encoded = encoded.replace(letter, vowels[index + 2]);\n        }\n    }\n    return encoded;\n}\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hey\"));\nconsole.log(encode(\"hi\"));\nconsole.log(encode(\"hey you\"));\nconsole.log(encode(\"hi there\"));\nconsole.log(encode(\"hi there, how are you?\"));\nconsole.log(encode(\"hi there, how are you? how are you?\"));\nconsole.log(encode(\"hi there, how are you? how are you? how are you?\"));\nconsole.log(encode(\"hi there, how are you? how are you? how are you? how are you?\"));\nconsole.log(encode(\"hi there, how are you? how are you? how are you? how are you? how are you?\"));\nconsole.log(encode(\"hi there, how are you? how are you? how are you? how are you? how are you? how are you?\"));\nconsole.log(encode(\"hi there, how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how are you? how \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0q3mvrgw.ts(30,919): error TS1002: Unterminated string literal.\n../../../../tmp/tmp0q3mvrgw.ts(31,1): error TS1005: ',' expected.\n../../../../tmp/tmp0q3mvrgw.ts(31,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334020
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newMessage += letter;\n        } else {\n            newMessage += letter.charCodeAt(0) - 97;\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1t40z0_o.js:23:12)\n    at Object.<anonymous> (/tmp/tmp1t40z0_o.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334022
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = letter.toUpperCase();\n        if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            encodedLetter = letter.toUpperCase();\n        }\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            encodedLetter = letter.toUpperCase();\n        }\n        if (letter === \"B\" || letter === \"C\" || letter === \"D\" || letter === \"F\" || letter === \"G\" || letter === \"H\" || letter === \"J\" || letter === \"K\" || letter === \"L\" || letter === \"M\" || letter === \"N\" || letter === \"P\" || letter === \"Q\" || letter === \"R\" || letter === \"S\" || letter === \"T\" || letter === \"V\" || letter === \"W\" || letter === \"X\" || letter === \"Y\" || letter === \"Z\") {\n            encodedLetter = letter.toUpperCase();\n        }\n        if (letter === \"b\" || letter === \"c\" || letter === \"d\" || letter === \"f\" || letter === \"g\" || letter === \"h\" || letter === \"j\" || letter === \"k\" || letter === \"l\" || letter === \"m\" || letter === \"n\" || letter === \"p\" || letter === \"q\" || letter === \"r\" || letter === \"s\" || letter === \"t\" || letter === \"v\" || letter === \"w\" || letter === \"x\" || letter === \"y\" || letter === \"z\") {\n            encodedLetter = letter.toUpperCase();\n        }\n        if (letter === \"0\" || letter === \"1\" || letter === \"2\" || letter === \"3\" || letter === \"4\" || letter === \"5\" || letter === \"6\" || letter === \"7\" || letter === \"8\" || letter === \"9\") {\n            encodedLetter = letter.toUpperCase();\n        }\n        if (letter === \"0\" || letter === \"1\" || letter === \"2\" || letter === \"3\" || letter === \"4\" || letter === \"5\" || letter === \"6\" || letter === \"7\" || letter === \"8\" || letter === \"9\") {\n            encodedLetter = letter.toUpperCase();\n        }\n        if (letter === \"!\" || letter === \"@\" || letter === \"#\" || letter === \"$\" || letter === \"%\" || letter === \"^\" || letter === \"&\" || letter === \"*\" || letter === \"(\") {\n            encodedLetter = letter.toUpperCase();\n        }\n        if (letter === \"!\" || letter === \"@\" || letter === \"#\" || letter === \"$\" || letter === \"%\" || letter === \"^\" || letter === \"&\" || letter === \"*\" || letter === \"(\") {\n            encodedLetter = letter.toUpperCase();\n        }\n        if (letter === \"\\\"\" || letter === \"'\") {\n            encodedLetter = letter.toUpperCase();\n        }\n        if (letter === \"\\\"\" || letter === \"'\") {\n            \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpflq47xpu.ts(54,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334023
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      encodedMessage += letter;\n    } else {\n      encodedMessage += letter.charCodeAt(0) - 97;\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpq6uvn7ls.js:23:12)\n    at Object.<anonymous> (/tmp/tmpq6uvn7ls.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334023
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\") {\n            encodedMessage += \"A\";\n        } else if (letter === \"e\") {\n            encodedMessage += \"E\";\n        } else if (letter === \"i\") {\n            encodedMessage += \"I\";\n        } else if (letter === \"o\") {\n            encodedMessage += \"O\";\n        } else if (letter === \"u\") {\n            encodedMessage += \"U\";\n        } else {\n            encodedMessage += letter;\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!!\"));\nconsole.log(encode(\"Hello World!!!\"));\nconsole.log(encode(\"Hello World!!!\"));\nconsole.log(encode(\"Hello World!!!!\"));\nconsole.log(encode(\"Hello World!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp97xy7yeb.ts(75,21): error TS1002: Unterminated string literal.\n../../../../tmp/tmp97xy7yeb.ts(76,1): error TS1005: ',' expected.\n../../../../tmp/tmp97xy7yeb.ts(76,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334023
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = letter.toUpperCase();\n        if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            encodedLetter = letter;\n        }\n        for (let j = 0; j < letter.length; j++) {\n            let letter2 = letter[j];\n            let encodedLetter2 = letter2.toUpperCase();\n            if (letter2 === \"A\" || letter2 === \"E\" || letter2 === \"I\" || letter2 === \"O\" || letter2 === \"U\") {\n                encodedLetter2 = letter2;\n            }\n            if (encodedLetter === encodedLetter2) {\n                encodedMessage += letter2;\n            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpc1n63yhm.js:31:12)\n    at Object.<anonymous> (/tmp/tmpc1n63yhm.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334023
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowelIndex = letter.indexOf(\"a\");\n        if (vowelIndex != -1) {\n            let vowel = letter.charAt(vowelIndex);\n            let vowelIndex = letter.indexOf(\"a\");\n            let vowelNext = letter.charAt(vowelIndex + 1);\n            newMessage = newMessage + vowel;\n            newMessage = newMessage + vowelNext;\n        } else {\n            newMessage = newMessage + letter;\n        }\n    }\n    return newMessage;\n}\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpeamqr7o6.ts(88,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334024
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    newMessage = newMessage.toLowerCase();\n    let newMessageArray = newMessage.split(\"\");\n    newMessageArray = newMessageArray.map((letter) => {\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            return letter.toUpperCase();\n        }\n        return letter;\n    });\n    newMessageArray = newMessageArray.map((letter) => {\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            return letter.toLowerCase();\n        }\n        return letter;\n    });\n    newMessage = newMessageArray.join(\"\");\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tEst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8a374ky3.js:29:12)\n    at Object.<anonymous> (/tmp/tmp8a374ky3.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tEst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334024
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encoded = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowels = \"aeiou\";\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex > -1) {\n            let vowelLetter = vowels[vowelIndex + 1];\n            encoded = encoded + vowelLetter;\n        } else {\n            encoded = encoded + letter;\n        }\n    }\n    return encoded;\n}\nencode(`Hello World!`); // 'Hleellllooorrrdd!' \nencode(`Hello World!!`); // 'Hleellllooorrrdd!!' \nencode(`Hello World!!!`); // 'Hleellllooorrrdd!!' \nencode(`Hello World!!!!`); // 'Hleellllooorrrdd!!' \nencode(`Hello World!!!!!`); // 'Hleellllooorrrdd!!' \nencode(`Hello World!!!!!!`); // 'Hleellllooorrrdd!!' \nencode(`Hello World!!!!!!!`); // 'Hleellllooorrrdd!!' \nencode(`Hello World!!!!!!!`); // 'Hleellllooorrrdd!!' \nencode(`Hello World!!!!!!!`); // 'Hleellllooorrrdd!!' \nencode(`Hello World!!!!!!!`); // 'Hleellllooorrrdd!!' \nencode(`Hello World!!!!!!!`); // 'Hleellllooorrrdd!!' \nencode(`Hello World!!!!!!!`); // 'Hleellllooorrrdd!!' \nencode(`Hello World!!!!!!!`); // 'Hleellllooorrrdd!!' \nencode(`Hello World!!!!!!!`); // 'Hleellllooorrrdd!!' \nencode(`Hello World!!!!!!!`); // 'Hleellllooorrrdd!!' \nencode(`Hello World!!!!!!!`); // 'Hleellllooorrrdd!!' \nencode(`Hello World!!!!!!!`); // 'Hleellllooorrrdd!!' \nencode(`Hello World!!!!!!!`); // 'Hleellllooorrrdd!!' \nencode(`Hello World!!!!!!!`); // 'Hleellllooorrrdd!!' \nencode(`Hello World!!!!!!!`); // 'Hleellllooorrrdd!!' \nencode(`Hello World!!!!!!!`); // 'Hleellllooorrrdd!!' \nencode(`Hello \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5gb6dqki.ts(57,8): error TS1160: Unterminated template literal.\n",
      "timestamp": 1660334024
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        encodedMessage += letter.toUpperCase();\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowelIndex = letter.indexOf(\"a\");\n        if (vowelIndex > 0) {\n            let vowel = letter.charAt(vowelIndex - 1);\n            let vowelIndex = letter.indexOf(\"a\");\n            let nextVowel = letter.charAt(vowelIndex + 1);\n            encodedMessage += letter.charAt(vowelIndex - 1) + nextVowel;\n        }\n    }\n    return encodedMessage;\n}\nencode(`hello`); // returns `HellA`\nencode(`hellooo`); // returns `HellAo`\nencode(`helloooo`); // returns `HellAoo`\nencode(`helloooo`); // returns `HellAooo`\nencode(`helloooo`); // returns `HellAooo`\nencode(`helloooo`); // returns `HellAooo`\nencode(`helloooo`); // returns `HellAooo`\nencode(`helloooo`); // returns `HellAooo`\nencode(`helloooo`); // returns `HellAooo`\nencode(`helloooo`); // returns `HellAooo`\nencode(`helloooo`); // returns `HellAooo`\nencode(`helloooo`); // returns `HellAooo`\nencode(`helloooo`); // returns `HellAooo`\nencode(`helloooo`); // returns `HellAooo`\nencode(`helloooo`); // returns `HellAooo`\nencode(`helloooo`); // returns `HellAooo`\nencode(`helloooo`); // returns `HellAooo`\nencode(`helloooo`); // returns `HellAooo`\nencode(`helloooo`); // returns `HellAooo`\nencode(`helloooo`); // returns `HellAooo`\nencode(`helloooo`); // returns `HellAooo`\nencode(`helloooo`); // returns `HellAooo`\nencode(`helloooo`); // returns `HellAooo`\nencode(`helloooo`); // returns `HellAooo`\nencode(`helloooo`); // returns `HellAooo`\nencode(`\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpf8lljuwr.ts(64,8): error TS1160: Unterminated template literal.\n",
      "timestamp": 1660334024
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            encodedMessage += letter;\n        } else {\n            let vowelIndex = message.indexOf(letter, i + 1);\n            encodedMessage += message.charAt(vowelIndex - 2);\n        }\n    }\n    return encodedMessage;\n}\n</code>\n<|/ a tags=javascript,algorithm,string |>\n<| c |>\nThis doesn't work if you have a message like \"abba\", which should return \"abba\" but returns \"abb\".\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed it. Thanks for pointing that out.\n<|/ c |>\n<| a tags=javascript,algorithm,string |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbk7p50y3.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmpbk7p50y3.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpbk7p50y3.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpbk7p50y3.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpbk7p50y3.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpbk7p50y3.ts(22,7): error TS1109: Expression expected.\n../../../../tmp/tmpbk7p50y3.ts(23,6): error TS1005: ';' expected.\n../../../../tmp/tmpbk7p50y3.ts(23,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpbk7p50y3.ts(23,99): error TS1002: Unterminated string literal.\n../../../../tmp/tmpbk7p50y3.ts(24,2): error TS1109: Expression expected.\n../../../../tmp/tmpbk7p50y3.ts(24,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpbk7p50y3.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmpbk7p50y3.ts(25,7): error TS1109: Expression expected.\n../../",
      "timestamp": 1660334024
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = \"\";\n        if (letter === \"a\") {\n            encodedLetter = \"b\";\n        } else if (letter === \"b\") {\n            encodedLetter = \"c\";\n        } else if (letter === \"c\") {\n            encodedLetter = \"d\";\n        } else if (letter === \"d\") {\n            encodedLetter = \"e\";\n        } else if (letter === \"e\") {\n            encodedLetter = \"f\";\n        } else if (letter === \"f\") {\n            encodedLetter = \"g\";\n        } else if (letter === \"g\") {\n            encodedLetter = \"h\";\n        } else if (letter === \"h\") {\n            encodedLetter = \"i\";\n        } else if (letter === \"i\") {\n            encodedLetter = \"j\";\n        } else if (letter === \"j\") {\n            encodedLetter = \"k\";\n        } else if (letter === \"k\") {\n            encodedLetter = \"l\";\n        } else if (letter === \"l\") {\n            encodedLetter = \"m\";\n        } else if (letter === \"m\") {\n            encodedLetter = \"n\";\n        } else if (letter === \"n\") {\n            encodedLetter = \"o\";\n        } else if (letter === \"o\") {\n            encodedLetter = \"p\";\n        } else if (letter === \"p\") {\n            encodedLetter = \"q\";\n        } else if (letter === \"q\") {\n            encodedLetter = \"r\";\n        } else if (letter === \"r\") {\n            encodedLetter = \"s\";\n        } else if (letter === \"s\") {\n            encodedLetter = \"t\";\n        } else if (letter === \"t\") {\n            encodedLetter = \"u\";\n        } else if (letter === \"u\") {\n            encodedLetter = \"v\";\n        } else if (letter === \"v\") {\n            encodedLetter = \"w\";\n        } else if (letter === \"w\") {\n            encodedLetter = \"x\";\n        } else if (letter === \"x\") {\n            encodedLetter = \"y\";\n        } else if (letter === \"y\") {\n            encodedLetter = \"z\";\n        } else if (letter === \"z\") {\n            encodedLetter = \"a\";\n        }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!!\"));\nconsole.log(encode(\"Hello World!!!\"));\nconsole.log(encode(\"Hello World!!!!\"));\nconsole.log(encode(\"Hello World!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!\")\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmoayw6qp.ts(85,1): error TS1005: ',' expected.\n../../../../tmp/tmpmoayw6qp.ts(85,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334024
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowels = \"aeiouAEIOU\";\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex > -1) {\n            let vowel2Index = vowels.indexOf(message[vowelIndex + 1]);\n            if (vowel2Index > -1) {\n                let replacement = vowels.charAt(vowelIndex) + vowels.charAt(vowel2Index);\n                result += replacement;\n            } else {\n                result += vowels.charAt(vowelIndex);\n            }\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nThis doesn't work. Try it with `encode(\"hello\")`\n<|/ c |>\n<| c |>\nI see what you mean. I'll fix it.\n<|/ c |>\n<| c |>\nI fixed it. I had a typo where I forgot to add `+ 1` to the second `indexOf` call. Now it works.\n<|/ c |>\n<| c |>\nI fixed it again. Now it works.\n<|/ c |>\n<| c |>\nI fixed it again. Now it works.\n<|/ c |>\n<| a tags=javascript,algorithm |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxsl0w9iz.ts(27,2): error TS1110: Type expected.\n../../../../tmp/tmpxsl0w9iz.ts(27,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpxsl0w9iz.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmpxsl0w9iz.ts(28,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpxsl0w9iz.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmpxsl0w9iz.ts(29,7): error TS1109: Expression expected.\n../../../../tmp/tmpxsl0w9iz.ts(30,6): error TS1005: ';' expected.\n../../../../tmp/tmpxsl0w9iz.ts(30,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpxsl0w9iz.ts(30,49): error TS1002: Unterminated string literal.\n../../../../tmp/tmpxsl0w9iz.ts(31,2): error TS1109: Expression expected.\n../../../../tmp/tmpxsl0w9iz.ts(31,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpxsl0w9iz.ts(32,2): error TS1109: Expression expected.\n../../../../tmp/tmpxsl0w9iz.ts(32,7): error TS1109: Expression expected.\n../../../../tmp/tmpxsl0w9iz.ts(33,3): error TS1005: ';' expected.\n../../../../tmp/tmpxsl0w9iz.ts(33,7): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpxsl0w9iz.ts(33,12): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpxsl0w9iz.ts(33,23): error TS1005: ';' expected.\n../../../../tmp/tmpxsl0w9iz.ts(33,34): error TS1002: Unterminated string literal.\n../../../../tmp/tmpxsl0w9iz.ts(34,2): error TS1109: Expression expected.\n../../../../tmp/tmpxsl0w9iz.ts(34,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpxsl0w9iz.ts(35,2): error TS1109: Expression expected.\n../../../../tmp/tmpxsl0w9iz.ts(35,7): error TS1109: Expression expected.\n../../../../tmp/tmpxsl0w9iz.ts(36,3): error TS1005: ';' expected.\n../../../../tmp/tmpxsl0w9iz.ts(36,15): error TS1005: ';' expected.\n../../../../tmp/tmpxsl0w9iz.ts(36,19): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpxsl0w9iz.ts(36,21): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpxsl0",
      "timestamp": 1660334024
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n    }\n    return newMessage;\n}\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!!\"));\nconsole.log(encode(\"Hello World!!!\"));\nconsole.log(encode(\"Hello World!!!!\"));\nconsole.log(encode(\"Hello World!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!1\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!1\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!1\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!1\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!1\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!1\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!1\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!1\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!1\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!1\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!1\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!1\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!1\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!1\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!1\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!1\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!1\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!1\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!1\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!1\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!1\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!1\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!1\"));\nconsole.log(encode(\"Hello World!!!!!!!\")\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd7hqb7ln.ts(70,1): error TS1005: ',' expected.\n../../../../tmp/tmpd7hqb7ln.ts(70,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334024
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpl63qh7ls.js:18:12)\n    at Object.<anonymous> (/tmp/tmpl63qh7ls.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334003
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            encodedMessage += letter;\n        } else {\n            encodedMessage += letter.charCodeAt(0) - 97;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjv8o3dca.js:23:12)\n    at Object.<anonymous> (/tmp/tmpjv8o3dca.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334006
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    let vowels = \"aeiou\";\n    let vowelsMap = {};\n    vowels.split('').forEach(letter => {\n        vowelsMap[letter] = letter;\n    });\n    newMessage = newMessage.toLowerCase();\n    newMessage = newMessage.replace(/[aeiou]/g, letter => {\n        return vowelsMap[letter];\n    });\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptjkqir52.js:23:12)\n    at Object.<anonymous> (/tmp/tmptjkqir52.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334024
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    let vowels = \"aeiouAEIOU\";\n    let letters = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage.charAt(i);\n        if (vowels.indexOf(letter) > -1) {\n            let index = vowels.indexOf(letter);\n            newMessage = newMessage.slice(0, i) + letters.charAt(index) + newMessage.slice(i + 1);\n        }\n    }\n    return newMessage;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question. To critique or request clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26814290)\n<|/ c |>\n<| c |>\nI believe this does answer the question. He wants to encode a message in such a way that all vowels are replaced by their 2 letter equivalents. I believe this does exactly that. He also stated that he only wants to encode letters. He also stated that he only wants to encode letters. He also stated that he only wants to encode letters. He also stated that he only wants to encode letters. He also stated that he only wants to encode letters. He also stated that he only wants to encode letters. He also stated that he only wants to encode letters. He also stated that he only wants to encode letters. He also stated that he only wants to encode letters. He also stated that he only wants to encode letters. He also stated that he only wants to encode letters. He also stated that he only wants to encode letters. He also stated that he only wants to encode letters. He also stated that he only wants to encode letters. He also stated that he only wants to encode letters. He also stated that he only wants to encode letters. He also stated that he only wants to encode letters. He also stated that he only wants to encode letters. He also stated that he only wants to encode letters. He also stated that he only wants to encode letters. He also stated that he only wants to encode letters. He also stated that he only wants to encode letters. He also stated that he only wants to encode letters. He also stated that he only wants to encode letters. \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4_6vg9s_.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmp4_6vg9s_.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp4_6vg9s_.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmp4_6vg9s_.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp4_6vg9s_.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmp4_6vg9s_.ts(22,7): error TS1109: Expression expected.\n../../../../tmp/tmp4_6vg9s_.ts(23,6): error TS1005: ';' expected.\n../../../../tmp/tmp4_6vg9s_.ts(23,11): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp4_6vg9s_.ts(23,15): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp4_6vg9s_.ts(23,23): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp4_6vg9s_.ts(23,26): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp4_6vg9s_.ts(23,33): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp4_6vg9s_.ts(23,36): error TS1434",
      "timestamp": 1660334024
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = \"\";\n        if (letter === \"a\") {\n            encodedLetter = \"b\";\n        } else if (letter === \"b\") {\n            encodedLetter = \"c\";\n        } else if (letter === \"c\") {\n            encodedLetter = \"d\";\n        } else if (letter === \"d\") {\n            encodedLetter = \"e\";\n        } else if (letter === \"e\") {\n            encodedLetter = \"f\";\n        } else if (letter === \"f\") {\n            encodedLetter = \"g\";\n        } else if (letter === \"g\") {\n            encodedLetter = \"h\";\n        } else if (letter === \"h\") {\n            encodedLetter = \"i\";\n        } else if (letter === \"i\") {\n            encodedLetter = \"j\";\n        } else if (letter === \"j\") {\n            encodedLetter = \"k\";\n        } else if (letter === \"k\") {\n            encodedLetter = \"l\";\n        } else if (letter === \"l\") {\n            encodedLetter = \"m\";\n        } else if (letter === \"m\") {\n            encodedLetter = \"n\";\n        } else if (letter === \"n\") {\n            encodedLetter = \"o\";\n        } else if (letter === \"o\") {\n            encodedLetter = \"p\";\n        } else if (letter === \"p\") {\n            encodedLetter = \"q\";\n        } else if (letter === \"q\") {\n            encodedLetter = \"r\";\n        } else if (letter === \"r\") {\n            encodedLetter = \"s\";\n        } else if (letter === \"s\") {\n            encodedLetter = \"t\";\n        } else if (letter === \"t\") {\n            encodedLetter = \"u\";\n        } else if (letter === \"u\") {\n            encodedLetter = \"v\";\n        } else if (letter === \"v\") {\n            encodedLetter = \"w\";\n        } else if (letter === \"w\") {\n            encodedLetter = \"x\";\n        } else if (letter === \"x\") {\n            encodedLetter = \"y\";\n        } else if (letter === \"y\") {\n            encodedLetter = \"z\";\n        } else if (letter === \"z\") {\n            encodedLetter = \"a\";\n        }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplplfxndd.js:124:12)\n    at Object.<anonymous> (/tmp/tmplplfxndd.js:130:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ifmmp\nifmmp\nifmmp\nifmmp\nifmmp\nifmmp\nifmmp\nifmmp\nifmmp\nifmmp\nifmmp\nifmmp\nifmmp\nifmmp\nifmmp\nifmmp\nifmmp\nifmmp\nifmmp\nifmmp\nifmmp\nifmmp\nifmmp\nifmmp\nifmmp\nifmmp\nifmmp\n",
      "timestamp": 1660334024
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter;\n        if (letter === \"a\") {\n            newMessage += \"A\";\n        } else if (letter === \"e\") {\n            newMessage += \"E\";\n        } else if (letter === \"i\") {\n            newMessage += \"I\";\n        } else if (letter === \"o\") {\n            newMessage += \"O\";\n        } else if (letter === \"u\") {\n            newMessage += \"U\";\n        }\n    }\n    return newMessage;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptf_oxlte.js:33:12)\n    at Object.<anonymous> (/tmp/tmptf_oxlte.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334024
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            encodedMessage += letter;\n        } else {\n            let letterIndex = alphabet.indexOf(letter);\n            encodedMessage += alphabet[letterIndex + 2];\n        }\n    }\n    return encodedMessage;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nThanks for your answer. Your solution is very similar to mine, but I wanted to know if there is a way to do it without using any loops.\n<|/ c |>\n<| c |>\nI added a solution without loops. I hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. Your solution is very similar to mine, but I wanted to know if there is a way to do it without using any loops.\n<|/ c |>\n<| c |>\nI added a solution without loops. I hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. Your solution is very similar to mine, but I wanted to know if there is a way to do it without using any loops.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5w9o47oi.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmp5w9o47oi.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp5w9o47oi.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmp5w9o47oi.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp5w9o47oi.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmp5w9o47oi.ts(22,7): error TS1109: Expression expected.\n../../../../tmp/tmp5w9o47oi.ts(23,8): error TS1005: ';' expected.\n../../../../tmp/tmp5w9o47oi.ts(23,12): error TS1005: '(' expected.\n../../../../tmp/tmp5w9o47oi.ts(23,17): error TS1005: ';' expected.\n../../../../tmp/tmp5w9o47oi.ts(23,30): error TS1005: ';' expected.\n../../../../tmp/tmp5w9o47oi.ts(23,39): error TS1005: ')' expected.\n../../../../tmp/tmp5w9o47oi.ts(23,42): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp5w9o47oi.ts(23,47): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp5w9o47oi.ts(23,55): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp5w9o47oi.ts(23,68): error TS1005: ';' expected.\n../../../../tmp/tmp5w9o47oi.ts(23,70): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp5w9o47oi.ts(23,77): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp5w9o47oi.ts(23,80): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp5w9o47oi.ts(23,88): error TS1005: '(' expected.\n../../../../tmp/tmp5w9o47oi.ts(23,94): error TS1005: ')' expected.\n../../../../tmp/tmp5w9o47oi.ts(23,97): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp5w9o47oi.ts(23,99): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp5w9o47oi.ts(23,103): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp5w9o47oi.ts(23,109): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp5w9o47oi.ts(23,112): error TS1005: 'while' expected.\n../../../../tmp/tmp5w9o47oi.ts(23,120): error TS1005: ')' expected.\n../../../../tmp/tmp5w9o47oi.t",
      "timestamp": 1660334024
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message.toLowerCase();\n    let newMessageArray = newMessage.split(\"\");\n    let newMessageArrayLength = newMessageArray.length;\n    let newMessageArrayLength = newMessageArrayLength - 1;\n    let newMessageArrayLength2 = newMessageArrayLength - 2;\n    let newMessageArrayLength3 = newMessageArrayLength - 3;\n    let newMessageArrayLength4 = newMessageArrayLength - 4;\n    let newMessageArrayLength5 = newMessageArrayLength - 5;\n    let newMessageArrayLength6 = newMessageArrayLength - 6;\n    let newMessageArrayLength7 = newMessageArrayLength - 7;\n    let newMessageArrayLength8 = newMessageArrayLength - 8;\n    let newMessageArrayLength9 = newMessageArrayLength - 9;\n    let newMessageArrayLength10 = newMessageArrayLength - 10;\n    let newMessageArrayLength11 = newMessageArrayLength - 11;\n    let newMessageArrayLength12 = newMessageArrayLength - 12;\n    let newMessageArrayLength13 = newMessageArrayLength - 13;\n    let newMessageArrayLength14 = newMessageArrayLength - 14;\n    let newMessageArrayLength15 = newMessageArrayLength - 15;\n    let newMessageArrayLength16 = newMessageArrayLength - 16;\n    let newMessageArrayLength17 = newMessageArrayLength - 17;\n    let newMessageArrayLength18 = newMessageArrayLength - 18;\n    let newMessageArrayLength19 = newMessageArrayLength - 19;\n    let newMessageArrayLength20 = newMessageArrayLength - 20;\n    let newMessageArrayLength21 = newMessageArrayLength - 21;\n    let newMessageArrayLength22 = newMessageArrayLength - 22;\n    let newMessageArrayLength23 = newMessageArrayLength - 23;\n    let newMessageArrayLength24 = newMessageArrayLength - 24;\n    let newMessageArrayLength25 = newMessageArrayLength - 25;\n    let newMessageArrayLength26 = newMessageArrayLength - 26;\n    let newMessageArrayLength27 = newMessageArrayLength - 27;\n    let newMessageArrayLength28 = newMessageArrayLength - 28;\n    let newMessageArrayLength29 = newMessageArrayLength - 29;\n    let newMessageArrayLength30 = newMessageArrayLength - 30;\n    let newMessageArrayLength31 = newMessageArrayLength - 31;\n    let newMessageArrayLength32 = newMessageArrayLength - 32;\n    let newMessageArrayLength33 = newMessageArrayLength - 33;\n    let newMessageArrayLength34 = newMessageArrayLength - 34;\n    let newMessageArrayLength35 = newMessageArrayLength - 35;\n    let newMessageArrayLength36 = newMessageArrayLength - 36;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkhi7gfxs.ts(60,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334020
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let encodedLetter = letter;\n    if (letter === \"a\") {\n      encodedLetter = \"e\";\n    } else if (letter === \"e\") {\n      encodedLetter = \"i\";\n    } else if (letter === \"i\") {\n      encodedLetter = \"o\";\n    } else if (letter === \"o\") {\n      encodedLetter = \"u\";\n    } else if (letter === \"u\") {\n      encodedLetter = \"a\";\n    }\n    encodedMessage += encodedLetter;\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpd6llupes.js:34:12)\n    at Object.<anonymous> (/tmp/tmpd6llupes.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334024
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = \"\";\n        if (letter === \"a\") {\n            encodedLetter = \"b\";\n        } else if (letter === \"e\") {\n            encodedLetter = \"f\";\n        } else if (letter === \"i\") {\n            encodedLetter = \"g\";\n        } else if (letter === \"o\") {\n            encodedLetter = \"h\";\n        } else if (letter === \"u\") {\n            encodedLetter = \"j\";\n        }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\nencode(message: \"hello\"); // returns \"hjl\"\nencode(message: \"helloooo\"); // returns \"hjl\"\nencode(message: \"helloooo\"); // returns \"hjl\"\nencode(message: \"helloooo\"); // returns \"hjl\"\nencode(message: \"helloooo\"); // returns \"hjl\"\nencode(message: \"helloooo\"); // returns \"hjl\"\nencode(message: \"helloooo\"); // returns \"hjl\"\nencode(message: \"helloooo\"); // returns \"hjl\"\nencode(message: \"helloooo\"); // returns \"hjl\"\nencode(message: \"helloooo\"); // returns \"hjl\"\nencode(message: \"helloooo\"); // returns \"hjl\"\nencode(message: \"helloooo\"); // returns \"hjl\"\nencode(message: \"helloooo\"); // returns \"hjl\"\nencode(message: \"helloooo\"); // returns \"hjl\"\nencode(message: \"helloooo\"); // returns \"hjl\"\nencode(message: \"helloooo\"); // returns \"hjl\"\nencode(message: \"helloooo\"); // returns \"hjl\"\nencode(message: \"helloooo\"); // returns \"hjl\"\nencode(message: \"helloooo\"); // returns \"hjl\"\nencode(message: \"helloooo\"); // returns \"hjl\"\nencode(message: \"helloooo\"); // returns \"hjl\"\nencode(message: \"helloooo\"); // returns \"hjl\"\nencode(message: \"helloooo\"); // returns \"hjl\"\nencode(message: \"helloooo\"); // returns \"hjl\"\nencode(message: \"helloooo\"); // returns \"hjl\"\nencode(message: \"helloooo\"); // returns \"hjl\"\nencode(message: \"helloooo\"); // returns \"hjl\"\nencode(message: \"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphxqezr37.ts(27,15): error TS1005: ',' expected.\n../../../../tmp/tmphxqezr37.ts(28,15): error TS1005: ',' expected.\n../../../../tmp/tmphxqezr37.ts(29,15): error TS1005: ',' expected.\n../../../../tmp/tmphxqezr37.ts(30,15): error TS1005: ',' expected.\n../../../../tmp/tmphxqezr37.ts(31,15): error TS1005: ',' expected.\n../../../../tmp/tmphxqezr37.ts(32,15): error TS1005: ',' expected.\n../../../../tmp/tmphxqezr37.ts(33,15): error TS1005: ',' expected.\n../../../../tmp/tmphxqezr37.ts(34,15): error TS1005: ',' expected.\n../../../../tmp/tmphxqezr37.ts(35,15): error TS1005: ',' expected.\n../../../../tmp/tmphxqezr37.ts(36,15): error TS1005: ',' expected.\n../../../../tmp/tmphxqezr37.ts(37,15): error TS1005: ',' expected.\n../../../../tmp/tmphxqezr37.ts(38,15): error TS1005: ',' expected.\n../../../../tmp/tmphxqezr37.ts(39,15): error TS1005: ',' expected.\n../../../../tmp/tmphxqezr37.ts(40,15): error TS1005: ',' expected.\n../../../../tmp/tmphxqezr37.ts(41,15): error TS1005: ',' expected.\n../../../../tmp/tmp",
      "timestamp": 1660334024
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            encodedMessage += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n            encodedMessage += alphabet[(index + 1) % 26];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9bsld133.ts(14,25): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp9bsld133.ts(15,31): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660334024
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"Hello\"));\nconsole.log(encode(\"hELLO\"));\nconsole.log(encode(\"HellO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"hEllO\"));\nconsole.log(encode(\"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwnq6z38d.ts(77,21): error TS1002: Unterminated string literal.\n../../../../tmp/tmpwnq6z38d.ts(78,1): error TS1005: ',' expected.\n../../../../tmp/tmpwnq6z38d.ts(78,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334024
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    newMessage = newMessage.toLowerCase();\n    newMessage = newMessage.replace(/a/g, \"e\");\n    newMessage = newMessage.replace(/e/g, \"i\");\n    newMessage = newMessage.replace(/i/g, \"o\");\n    newMessage = newMessage.replace(/o/g, \"u\");\n    newMessage = newMessage.replace(/u/g, \"a\");\n    return newMessage;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nThis doesn't seem to work. `encode(\"hello\")` returns `hlelo` instead of `hleloh`.\n<|/ c |>\n<| c |>\nYes, I missed that requirement. I'll edit my answer.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution that works with that requirement. Let me know if you have any questions.\n<|/ c |>\n<| c |>\nThanks for your answer! I appreciate it. I tried it out and it works perfectly. I'm going to try to understand it so I can apply it to other problems I have.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplfx4wes6.ts(17,2): error TS1110: Type expected.\n../../../../tmp/tmplfx4wes6.ts(17,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmplfx4wes6.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmplfx4wes6.ts(18,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmplfx4wes6.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmplfx4wes6.ts(19,7): error TS1109: Expression expected.\n../../../../tmp/tmplfx4wes6.ts(20,6): error TS1005: ';' expected.\n../../../../tmp/tmplfx4wes6.ts(20,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmplfx4wes6.ts(20,82): error TS1002: Unterminated string literal.\n../../../../tmp/tmplfx4wes6.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmplfx4wes6.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmplfx4wes6.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmplfx4wes6.ts(22,7): error TS1109: Expression expected.\n../../",
      "timestamp": 1660334025
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowels = \"aeiou\";\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex != -1) {\n            letter = vowels[vowelIndex + 1];\n        }\n        result += letter;\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpl0ojhgyc.js:23:12)\n    at Object.<anonymous> (/tmp/tmpl0ojhgyc.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334027
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = letter.toUpperCase();\n        let vowelIndex = getVowelIndex(letter);\n        let encodedVowel = vowelIndex === -1 ? letter : getVowelLetter(vowelIndex);\n        encodedMessage += encodedVowel;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8_33p2d8.ts(12,26): error TS2304: Cannot find name 'getVowelIndex'.\n../../../../tmp/tmp8_33p2d8.ts(13,57): error TS2304: Cannot find name 'getVowelLetter'.\n",
      "timestamp": 1660334027
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\") {\n            letter = \"A\";\n        } else if (letter === \"e\") {\n            letter = \"E\";\n        } else if (letter === \"i\") {\n            letter = \"I\";\n        } else if (letter === \"o\") {\n            letter = \"O\";\n        } else if (letter === \"u\") {\n            letter = \"U\";\n        }\n        result += letter;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplw0l508e.js:33:12)\n    at Object.<anonymous> (/tmp/tmplw0l508e.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334027
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    let vowels = \"aeiou\";\n    let vowelsArray = vowels.split(\"\");\n    let vowelsArrayLength = vowelsArray.length;\n    for (let i = 0; i < vowelsArrayLength; i++) {\n        newMessage = newMessage.replace(vowelsArray[i], vowelsArray[(i + 2) % vowelsArrayLength]);\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6a5qszze.js:20:12)\n    at Object.<anonymous> (/tmp/tmp6a5qszze.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334027
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    let newMessageArray = newMessage.split(\"\");\n    for (let i = 0; i < newMessageArray.length; i++) {\n        let letter = newMessageArray[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newMessageArray[i] = letter + 2;\n        }\n    }\n    return newMessageArray.join(\"\");\n}\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!!\"));\nconsole.log(encode(\"Hello World!!!\"));\nconsole.log(encode(\"Hello World!!!!\"));\nconsole.log(encode(\"Hello World!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpf8k859ro.ts(73,36): error TS1002: Unterminated string literal.\n../../../../tmp/tmpf8k859ro.ts(74,1): error TS1005: ',' expected.\n../../../../tmp/tmpf8k859ro.ts(74,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334027
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpl63qh7ls.js:18:12)\n    at Object.<anonymous> (/tmp/tmpl63qh7ls.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334003
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\") {\n      newMessage += \"A\";\n    } else if (letter === \"e\") {\n      newMessage += \"E\";\n    } else if (letter === \"i\") {\n      newMessage += \"I\";\n    } else if (letter === \"o\") {\n      newMessage += \"O\";\n    } else if (letter === \"u\") {\n      newMessage += \"U\";\n    } else {\n      newMessage += letter;\n    }\n  }\n  return newMessage;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjwqul172.js:35:12)\n    at Object.<anonymous> (/tmp/tmpjwqul172.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334027
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n    }\n    return newMessage;\n}\nconsole.log(encode(\"Hello\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\nconsole.log(encode(\"HelloWorld\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpo5c5cfs8.js:98:12)\n    at Object.<anonymous> (/tmp/tmpo5c5cfs8.js:104:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "HELLO\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\nHELLOWORLD\n",
      "timestamp": 1660334027
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    let vowels = \"aeiouAEIOU\";\n    let vowelsCount = vowels.length;\n    let vowelsArray = vowels.split(\"\");\n    let vowelsArrayCount = vowelsArray.length;\n    for (let i = 0; i < vowelsArrayCount; i++) {\n        let vowel = vowelsArray[i];\n        let vowelIndex = message.indexOf(vowel);\n        if (vowelIndex > 0) {\n            let vowelIndex2 = message.indexOf(vowel, vowelIndex + 1);\n            if (vowelIndex2 > 0) {\n                let vowelIndex3 = message.indexOf(vowel, vowelIndex2 + 1);\n                if (vowelIndex3 > 0) {\n                    let vowelIndex4 = message.indexOf(vowel, vowelIndex3 + 1);\n                    if (vowelIndex4 > 0) {\n                        let vowelIndex5 = message.indexOf(vowel, vowelIndex4 + 1);\n                        if (vowelIndex5 > 0) {\n                            let vowelIndex6 = message.indexOf(vowel, vowelIndex5 + 1);\n                            if (vowelIndex6 > 0) {\n                                let vowelIndex7 = message.indexOf(vowel, vowelIndex6 + 1);\n                                if (vowelIndex7 > 0) {\n                                    let vowelIndex8 = message.indexOf(vowel, vowelIndex7 + 1);\n                                    if (vowelIndex8 > 0) {\n                                        let vowelIndex9 = message.indexOf(vowel, vowelIndex8 + 1);\n                                        if (vowelIndex9 > 0) {\n                                            let vowelIndex10 = message.indexOf(vowel, vowelIndex9 + 1);\n                                            if (vowelIndex10 > 0) {\n                                                let vowelIndex11 = message.indexOf(vowel, vowelIndex10 + 1);\n                                                if (vowelIndex11 > 0) {\n                                                    let vowelIndex12 = message.indexOf(vowel, vowelIndex11 + 1);\n                                                    if (vowelIndex12 > 0) {\n                                                        let vowelIndex13 = message.indexOf(vowel, vowelIndex12 + 1);\n                                                        if (vowelIndex13 > 0) {\n                                                            let vowelIndex14 = message.indexOf(vowel, vowelIndex13 + 1);\n                                                            if (vowelIndex14 > 0) {\n                                                                let vowelIndex15 = message.indexOf(vowel, vowelIndex14 + 1);\n                                                                if (vowelIndex15 > 0) {\n                                                                    let vowelIndex16 = message.indexOf(vowel, vowelIndex15 + 1);\n                                                                    if (vowelIndex16 > 0) {\n                                                                        let vowelIndex17 = message.indexOf(vowel, vowelIndex16 + 1);\n                                                                        if (vowelIndex17 > 0) {\n                                                                            let vowelIndex18 = message.indexOf(vowel, vowelIndex17 + 1);\n                                                                            if (vowelIndex18 > 0) {\n                                                                                let vowelIndex19 = message.indexOf(vowel, vowelIndex18 + 1);\n                                                                                if (vowelIndex19 > 0) {\n                                                                                    let vowelIndex20 = message.indexOf(vowel, vowelIndex19 + 1);\n                                                                                    if (vowelIndex20 > 0) {\n                                                                                        let vowelIndex21 = message.indexOf(vowel, vowelIndex20\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpn9q9n705.ts(56,1): error TS1005: ',' expected.\n../../../../tmp/tmpn9q9n705.ts(56,9): error TS1005: ',' expected.\n../../../../tmp/tmpn9q9n705.ts(69,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334027
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = letter;\n        if (letter === \"a\") {\n            encodedLetter = \"b\";\n        } else if (letter === \"e\") {\n            encodedLetter = \"f\";\n        } else if (letter === \"i\") {\n            encodedLetter = \"g\";\n        } else if (letter === \"o\") {\n            encodedLetter = \"h\";\n        } else if (letter === \"u\") {\n            encodedLetter = \"j\";\n        }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpt2iniu6v.js:34:12)\n    at Object.<anonymous> (/tmp/tmpt2iniu6v.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334028
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\";\n    let encoded: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        encoded = encoded + alphabet.indexOf(letter) + vowels.indexOf(letter) + alphabet.indexOf(message[i + 1]);\n    }\n    return encoded;\n}\n\nencode(\" \");\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfh53_tgd.ts(19,2): error TS1110: Type expected.\n../../../../tmp/tmpfh53_tgd.ts(19,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpfh53_tgd.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmpfh53_tgd.ts(20,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpfh53_tgd.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpfh53_tgd.ts(21,7): error TS1109: Expression expected.\n../../../../tmp/tmpfh53_tgd.ts(23,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334027
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels = \"aeiou\";\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let index = alphabet.indexOf(letter);\n        if (index != -1) {\n            let nextVowel = alphabet.charAt(index + 1);\n            newMessage += alphabet.charAt(index) + nextVowel;\n        }\n        else {\n            newMessage += letter;\n        }\n    }\n    return newMessage;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsbygrpg3.js:27:12)\n    at Object.<anonymous> (/tmp/tmpsbygrpg3.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334027
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = \"\";\n        if (letter === \"a\") {\n            encodedLetter = \"b\";\n        } else if (letter === \"e\") {\n            encodedLetter = \"f\";\n        } else if (letter === \"i\") {\n            encodedLetter = \"g\";\n        } else if (letter === \"o\") {\n            encodedLetter = \"h\";\n        } else if (letter === \"u\") {\n            encodedLetter = \"j\";\n        }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp27nd92lc.js:34:12)\n    at Object.<anonymous> (/tmp/tmp27nd92lc.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334028
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpl63qh7ls.js:18:12)\n    at Object.<anonymous> (/tmp/tmpl63qh7ls.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334003
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newMessage += letter;\n        } else {\n            newMessage += letter.charCodeAt(0) - 97;\n        }\n    }\n    return newMessage;\n}\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!!\"));\nconsole.log(encode(\"Hello World!!!\"));\nconsole.log(encode(\"Hello World!!!!\"));\nconsole.log(encode(\"Hello World!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\")\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9o9yheo0.ts(70,1): error TS1005: ',' expected.\n../../../../tmp/tmp9o9yheo0.ts(70,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334028
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = message;\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        encodedMessage = encodedMessage.replace(letter, \n            letter.toUpperCase());\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex > -1) {\n            let vowel = vowels[vowelIndex];\n            let vowelIndex = vowels.indexOf(vowel);\n            let nextVowel = vowels[vowelIndex + 1];\n            encodedMessage = encodedMessage.replace(vowel, \n                nextVowel);\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpg5kbk37s.ts(16,26): error TS2304: Cannot find name 'vowels'.\n../../../../tmp/tmpg5kbk37s.ts(18,25): error TS2552: Cannot find name 'vowels'. Did you mean 'vowel'?\n../../../../tmp/tmpg5kbk37s.ts(18,32): error TS2448: Block-scoped variable 'vowelIndex' used before its declaration.\n../../../../tmp/tmpg5kbk37s.ts(19,30): error TS2552: Cannot find name 'vowels'. Did you mean 'vowel'?\n../../../../tmp/tmpg5kbk37s.ts(20,29): error TS2552: Cannot find name 'vowels'. Did you mean 'vowel'?\n",
      "timestamp": 1660334027
    },
    {
      "exit_code": -1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = \"\";\n        for (let j = 0; j < letter.length; j++) {\n            let vowel = letter.charAt(j);\n            if (vowel === \"a\" || vowel === \"e\" || vowel === \"i\" || vowel === \"o\" || vowel === \"u\") {\n                let vowelIndex = letter.indexOf(vowel, j + 1);\n                let letterIndex = letter.toLowerCase().indexOf(vowel.toLowerCase(), j + 1);\n                encodedLetter = encodedLetter + letter.charAt(letterIndex);\n                j = vowelIndex - 1;\n            } else {\n                encodedLetter = encodedLetter + vowel;\n            }\n        }\n        encodedMessage = encodedMessage + encodedLetter;\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!!\"));\nconsole.log(encode(\"Hello World!!!\"));\nconsole.log(encode(\"Hello World!!!!\"));\nconsole.log(encode(\"Hello World!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!1\"));\nconsole.log(encode(\"Hello World!!!!!!!12\"));\nconsole.log(encode(\"Hello World!!!!!!!123\"));\nconsole.log(encode(\"Hello World!!!!!!!1234\"));\nconsole.log(encode(\"Hello World!!!!!!!12345\"));\nconsole.log(encode(\"Hello World!!!!!!!123456\"));\nconsole.log(encode(\"Hello World!!!!!!!1234567\"));\nconsole.log(encode(\"Hello World!!!!!!!12345678\"));\nconsole.log(encode(\"Hello World!!!!!!!123456789\"));\nconsole.log(encode(\"Hello World!!!!!!!1234567890\"));\nconsole.log(encode(\"Hello World!!!!!!!12345678901\"));\nconsole.log(encode(\"Hello World!!!!!!!123456789012\"));\nconsole.log(encode(\"Hello World!!!!!!!1234567890123\"));\nconsole.log(encode(\"Hello World!!!!!!!12345678901234\"));\nconsole.log(encode(\"Hello World!!!!!!!123456789012345\"));\nconsole.log(encode(\"Hello World!!!!!!!1234567890123456\"));\nconsole.log(encode(\"Hello World!!!!!!!12345678901234567\"));\nconsole.log(encode(\"Hello World!!!!!!!123456789012345678\"));\nconsole.log(encode(\"Hello World!!!!!!!1234567890123456789\"));\nconsole.log(encode(\"Hello World!!!!!!!12345678901234567890\"));\nconsole.log(encode(\"Hello World!!!!!!!123456789012345678901\"));\nconsole.log(encode(\"Hello World!!!!!!!1234567890123456789012\"));\nconsole.log(encode(\"Hello World!!!!!!!12345678901234567890123\"));\nconsole.log(encode(\"Hello World!!!!!!!123456789012345678901234\"));\nconsole.log(encode(\"Hello World!!!!!!!1234567890123456789012345\"));\nconsole.log(encode(\"Hello World!!!!!!!12345678901234567890123456\"));\nconsole.log(encode(\"Hello World!!!!!!!123456789012345678901234567\"));\nconsole.log(encode(\"Hello World!!!!!!!1234567890123456789012345678\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334044
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n            if (index === -1) {\n                result += letter;\n            } else {\n                let nextLetter = alphabet[index + 1];\n                if (nextLetter === letter) {\n                    result += letter;\n                } else {\n                    result += nextLetter;\n                }\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(encode(\"Hello World!\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_br_3ip0.ts(14,25): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp_br_3ip0.ts(18,34): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660334027
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\") {\n            result += \"A\";\n        } else if (letter === \"e\") {\n            result += \"E\";\n        } else if (letter === \"i\") {\n            result += \"I\";\n        } else if (letter === \"o\") {\n            result += \"O\";\n        } else if (letter === \"u\") {\n            result += \"U\";\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpe193_rhc.js:35:12)\n    at Object.<anonymous> (/tmp/tmpe193_rhc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334028
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = letter.toUpperCase();\n        let vowels = \"AEIOUaeiou\";\n        let vowelIndex = vowels.indexOf(letter);\n        let vowelIndex2 = vowels.indexOf(letter, vowelIndex + 1);\n        encodedMessage += vowelIndex2 > -1 ? vowels[vowelIndex2] : letter;\n    }\n    return encodedMessage;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your solution works perfectly for English letters. But it fails for other languages like Russian, German, Chinese etc.\n<|/ c |>\n<| c |>\nI updated my answer to include a solution for Russian, German, Chinese and Japanese. Hope it helps.\n<|/ c |>\n<| a tags=javascript,algorithm,string |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuk_kuvns.ts(19,2): error TS1110: Type expected.\n../../../../tmp/tmpuk_kuvns.ts(19,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpuk_kuvns.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmpuk_kuvns.ts(20,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpuk_kuvns.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpuk_kuvns.ts(21,7): error TS1109: Expression expected.\n../../../../tmp/tmpuk_kuvns.ts(22,8): error TS1005: ';' expected.\n../../../../tmp/tmpuk_kuvns.ts(22,12): error TS1005: '(' expected.\n../../../../tmp/tmpuk_kuvns.ts(22,17): error TS1005: ';' expected.\n../../../../tmp/tmpuk_kuvns.ts(22,30): error TS1005: ';' expected.\n../../../../tmp/tmpuk_kuvns.ts(22,39): error TS1005: ')' expected.\n../../../../tmp/tmpuk_kuvns.ts(22,45): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpuk_kuvns.ts(22,59): error TS1005: '(' expected.\n../../../../tmp/tmpuk_kuvns.ts(22,67): error TS1005: ';' expecte",
      "timestamp": 1660334028
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encoded = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = letter;\n        let vowels = \"aeiou\";\n        for (let j = 0; j < vowels.length; j++) {\n            if (letter === vowels[j]) {\n                let nextLetter = message[i + 1];\n                if (nextLetter === vowels[j]) {\n                    encodedLetter = letter.toUpperCase();\n                }\n            }\n        }\n        encoded += encodedLetter;\n    }\n    return encoded;\n}\n\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!!\"));\nconsole.log(encode(\"Hello World!!!!\"));\nconsole.log(encode(\"Hello World!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!!!!\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbho12u2e.ts(63,56): error TS1002: Unterminated string literal.\n../../../../tmp/tmpbho12u2e.ts(64,1): error TS1005: ',' expected.\n../../../../tmp/tmpbho12u2e.ts(64,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334028
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encoded = message;\n    let vowels = \"aeiou\";\n    let letters = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i = 0; i < encoded.length; i++) {\n        let letter = encoded.charAt(i);\n        if (vowels.indexOf(letter) > -1) {\n            let vowelIndex = vowels.indexOf(letter);\n            let vowelLetter = letters[vowelIndex + 1];\n            encoded = encoded.replace(letter, vowelLetter);\n        }\n    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvbqdtekn.js:24:12)\n    at Object.<anonymous> (/tmp/tmpvbqdtekn.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334028
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        encodedMessage += letter;\n        if (letter === \"a\") {\n            encodedMessage += \"a\";\n        } else if (letter === \"e\") {\n            encodedMessage += \"e\";\n        } else if (letter === \"i\") {\n            encodedMessage += \"i\";\n        } else if (letter === \"o\") {\n            encodedMessage += \"o\";\n        } else if (letter === \"u\") {\n            encodedMessage += \"u\";\n        }\n    }\n    return encodedMessage;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpgsh76tfp.js:33:12)\n    at Object.<anonymous> (/tmp/tmpgsh76tfp.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334028
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = message;\n    newMessage = newMessage.toLowerCase();\n    newMessage = newMessage.replace(/a/g, \"e\");\n    newMessage = newMessage.replace(/e/g, \"i\");\n    newMessage = newMessage.replace(/i/g, \"o\");\n    newMessage = newMessage.replace(/o/g, \"u\");\n    newMessage = newMessage.replace(/u/g, \"a\");\n    return newMessage;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work. `encode(\"hello\")` returns `hlelo`.\n<|/ c |>\n<| c |>\nIt works. I tested it before posting. Try it again. `encode(\"hello\")` returns `hlelo`.\n<|/ c |>\n<| c |>\nIt doesn't work for `encode(\"hello\")` returns `hlelo`.\n<|/ c |>\n<| c |>\nIt works for me. Try it again. `encode(\"hello\")` returns `hlelo`.\n<|/ c |>\n<| c |>\nIt works for me too. Try it again. `encode(\"hello\")` returns `hlelo`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqhydzi_o.ts(17,2): error TS1110: Type expected.\n../../../../tmp/tmpqhydzi_o.ts(17,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpqhydzi_o.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmpqhydzi_o.ts(18,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpqhydzi_o.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmpqhydzi_o.ts(19,7): error TS1109: Expression expected.\n../../../../tmp/tmpqhydzi_o.ts(20,6): error TS1005: ';' expected.\n../../../../tmp/tmpqhydzi_o.ts(20,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqhydzi_o.ts(20,54): error TS1002: Unterminated string literal.\n../../../../tmp/tmpqhydzi_o.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpqhydzi_o.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpqhydzi_o.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpqhydzi_o.ts(22,7): error TS1109: Expression expected.\n../../",
      "timestamp": 1660334028
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\") {\n            newMessage += \"b\";\n        } else if (letter === \"e\") {\n            newMessage += \"f\";\n        } else if (letter === \"i\") {\n            newMessage += \"g\";\n        } else if (letter === \"o\") {\n            newMessage += \"h\";\n        } else if (letter === \"u\") {\n            newMessage += \"j\";\n        } else if (letter === \"y\") {\n            newMessage += \"k\";\n        } else if (letter === \"a\") {\n            newMessage += \"b\";\n        } else if (letter === \"e\") {\n            newMessage += \"f\";\n        } else if (letter === \"i\") {\n            newMessage += \"g\";\n        } else if (letter === \"o\") {\n            newMessage += \"h\";\n        } else if (letter === \"u\") {\n            newMessage += \"j\";\n        } else if (letter === \"y\") {\n            newMessage += \"k\";\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxdqyzk0h.js:53:12)\n    at Object.<anonymous> (/tmp/tmpxdqyzk0h.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334029
    }
  ]
}