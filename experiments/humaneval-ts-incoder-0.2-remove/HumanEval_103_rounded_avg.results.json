{
  "language": "ts",
  "name": "HumanEval_103_rounded_avg",
  "results": [
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  return `${avg}`.padStart(m, '0');\n}\n\nconsole.log(rounded_avg(7, 10));\nconsole.log(rounded_avg(7, 9));\nconsole.log(rounded_avg(7, 8));\nconsole.log(rounded_avg(7, 7));\nconsole.log(rounded_avg(7, 6));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(7, 4));\nconsole.log(rounded_avg(7, 3));\nconsole.log(rounded_avg(7, 2));\nconsole.log(rounded_avg(7, 1));\nconsole.log(rounded_avg(7, 0));\nconsole.log(rounded_avg(7, -1));\nconsole.log(rounded_avg(7, -2));\nconsole.log(rounded_avg(7, -3));\nconsole.log(rounded_avg(7, -4));\nconsole.log(rounded_avg(7, -5));\nconsole.log(rounded_avg(7, -6));\nconsole.log(rounded_avg(7, -7));\nconsole.log(rounded_avg(7, -8));\nconsole.log(rounded_avg(7, -9));\nconsole.log(rounded_avg(7, -10));\nconsole.log(rounded_avg(7, -11));\nconsole.log(rounded_avg(7, -12));\nconsole.log(rounded_avg(7, -13));\nconsole.log(rounded_avg(7, -14));\nconsole.log(rounded_avg(7, -15));\nconsole.log(rounded_avg(7, -16));\nconsole.log(rounded_avg(7, -17));\nconsole.log(rounded_avg(7, -18));\nconsole.log(rounded_avg(7, -19));\nconsole.log(rounded_avg(7, -20));\nconsole.log(rounded_avg(7, -21));\nconsole.log(rounded_avg(7, -22));\nconsole.log(rounded_avg(7, -23));\nconsole.log(rounded_avg(7, -24));\nconsole.log(rounded_avg(7, -25));\nconsole.log(rounded_avg(7, -26));\nconsole.log(rounded_avg(7, -27));\nconsole.log(rounded_avg(7, -28));\nconsole.log(rounded_avg(7, -29));\nconsole.log(rounded_avg(7, -30));\nconsole.log(rounded_avg(7, -32));\nconsole.log(rounded_avg(7, -33));\nconsole.log(rounded_avg(7, -34));\nconsole.log(rounded_avg(7, -35));\nconsole.log(rounded_avg(7, -36));\nconsole.log(rounded_avg(7, -37));\nconsole.log(rounded_avg(7, -38));\nconsole.log(rounded_avg(7, -39));\nconsole.log(rounded_avg(7, -40));\nconsole.log(rounded_avg(7, -41));\nconsole.log(rounded_avg(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplqhkgm2t.ts(66,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpgco5fcgy.js:18:12)\n    at Object.<anonymous> (/tmp/tmpgco5fcgy.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) return -1\n  const avg = n + (m - 1) / 2\n  return Math.round(avg * 2) / 2 | 0\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmphlf4ffrn.js:15:12)\n    at Object.<anonymous> (/tmp/tmphlf4ffrn.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp9h19datb.js:19:12)\n    at Object.<anonymous> (/tmp/tmp9h19datb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let avg = (n + m) / 2;\n    let str = avg.toString(2);\n    let res = parseInt(str, 2);\n    return res;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpopz6k0y9.ts(15,2): error TS1110: Type expected.\n../../../../tmp/tmpopz6k0y9.ts(15,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpopz6k0y9.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmpopz6k0y9.ts(16,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpopz6k0y9.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmpopz6k0y9.ts(17,7): error TS1109: Expression expected.\n../../../../tmp/tmpopz6k0y9.ts(19,9): error TS1005: ';' expected.\n",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpnj8710rq.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnj8710rq.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n >= m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  return avg.toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpdxq8f7dc.js:15:12)\n    at Object.<anonymous> (/tmp/tmpdxq8f7dc.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / n;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpdbzlw8gn.js:19:12)\n    at Object.<anonymous> (/tmp/tmpdbzlw8gn.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / n;\n}\n\nconsole.log(rounded_avg(7, 8));\nconsole.log(rounded_avg(7, 9));\nconsole.log(rounded_avg(7, 10));\nconsole.log(rounded_avg(7, 11));\nconsole.log(rounded_avg(7, 12));\nconsole.log(rounded_avg(7, 13));\nconsole.log(rounded_avg(7, 14));\nconsole.log(rounded_avg(7, 15));\nconsole.log(rounded_avg(7, 16));\nconsole.log(rounded_avg(7, 17));\nconsole.log(rounded_avg(7, 18));\nconsole.log(rounded_avg(7, 19));\nconsole.log(rounded_avg(7, 20));\nconsole.log(rounded_avg(7, 21));\nconsole.log(rounded_avg(7, 22));\nconsole.log(rounded_avg(7, 23));\nconsole.log(rounded_avg(7, 24));\nconsole.log(rounded_avg(7, 25));\nconsole.log(rounded_avg(7, 26));\nconsole.log(rounded_avg(7, 27));\nconsole.log(rounded_avg(7, 28));\nconsole.log(rounded_avg(7, 29));\nconsole.log(rounded_avg(7, 30));\nconsole.log(rounded_avg(7, 31));\nconsole.log(rounded_avg(7, 32));\nconsole.log(rounded_avg(7, 33));\nconsole.log(rounded_avg(7, 34));\nconsole.log(rounded_avg(7, 35));\nconsole.log(rounded_avg(7, 36));\nconsole.log(rounded_avg(7, 37));\nconsole.log(rounded_avg(7, 38));\nconsole.log(rounded_avg(7, 39));\nconsole.log(rounded_avg(7, 40));\nconsole.log(rounded_avg(7, 41));\nconsole.log(rounded_avg(7, 42));\nconsole.log(rounded_avg(7, 43));\nconsole.log(rounded_avg(7, 44));\nconsole.log(rounded_avg(7, 45));\nconsole.log(rounded_avg(7, 46));\nconsole.log(rounded_avg(7, 47));\nconsole.log(rounded_avg(7, 48));\nconsole.log(rounded_avg(7, 49));\nconsole.log(rounded_avg(7, 50));\nconsole.log(rounded_avg(7, 51));\nconsole.log(rounded_avg(7, 52));\nconsole.log(rounded_avg(7, 53));\nconsole.log(rounded_avg(7, 54));\nconsole.log(rounded_avg(7, 55));\nconsole.log(rounded_avg(7, 56));\nconsole.log(rounded_avg(7, 57));\nconsole.log(rounded_avg(7, 58));\nconsole.log(rounded_avg(7, 59));\nconsole.log(rounded_avg(7, 60));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpvemdf6_k.js:72:12)\n    at Object.<anonymous> (/tmp/tmpvemdf6_k.js:85:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp9h19datb.js:19:12)\n    at Object.<anonymous> (/tmp/tmp9h19datb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return Math.round(result / m) * m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpte5kxa8m.js:19:12)\n    at Object.<anonymous> (/tmp/tmpte5kxa8m.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpulsli_ql.js:19:12)\n    at Object.<anonymous> (/tmp/tmpulsli_ql.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  const bin = binary(avg);\n  return bin;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpekdbcepk.ts(11,15): error TS2304: Cannot find name 'binary'.\n",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = n / m;\n  return Math.round(avg * Math.pow(10, Math.ceil(Math.log10(avg)))) / Math.pow(10, Math.ceil(Math.log10(avg)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpy_fth9h9.js:16:12)\n    at Object.<anonymous> (/tmp/tmpy_fth9h9.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n >= m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1000'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpeigf7lz6.js:19:12)\n    at Object.<anonymous> (/tmp/tmpeigf7lz6.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1000',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n >= m) {\n    return -1;\n  }\n  let avg = Math.floor((n + m) / 2);\n  let binary = \"\";\n  while (avg !== 0) {\n    binary = String(avg % 2) + binary;\n    avg = Math.floor(avg / 2);\n  }\n  return binary;\n}\n\nconsole.log(rounded_avg(7, 8));\nconsole.log(rounded_avg(8, 7));\nconsole.log(rounded_avg(8, 8));\nconsole.log(rounded_avg(8, 9));\nconsole.log(rounded_avg(9, 8));\nconsole.log(rounded_avg(9, 9));\nconsole.log(rounded_avg(9, 10));\nconsole.log(rounded_avg(10, 9));\nconsole.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(10, 11));\nconsole.log(rounded_avg(11, 10));\nconsole.log(rounded_avg(11, 11));\nconsole.log(rounded_avg(11, 12));\nconsole.log(rounded_avg(12, 11));\nconsole.log(rounded_avg(12, 12));\nconsole.log(rounded_avg(12, 13));\nconsole.log(rounded_avg(13, 12));\nconsole.log(rounded_avg(13, 13));\nconsole.log(rounded_avg(13, 14));\nconsole.log(rounded_avg(14, 13));\nconsole.log(rounded_avg(14, 14));\nconsole.log(rounded_avg(14, 15));\nconsole.log(rounded_avg(15, 14));\nconsole.log(rounded_avg(15, 15));\nconsole.log(rounded_avg(15, 16));\nconsole.log(rounded_avg(16, 15));\nconsole.log(rounded_avg(16, 16));\nconsole.log(rounded_avg(16, 17));\nconsole.log(rounded_avg(17, 16));\nconsole.log(rounded_avg(17, 17));\nconsole.log(rounded_avg(17, 18));\nconsole.log(rounded_avg(18, 17));\nconsole.log(rounded_avg(18, 18));\nconsole.log(rounded_avg(18, 19));\nconsole.log(rounded_avg(19, 18));\nconsole.log(rounded_avg(19, 19));\nconsole.log(rounded_avg(19, 20));\nconsole.log(rounded_avg(20, 19));\nconsole.log(rounded_avg(20, 20));\nconsole.log(rounded_avg(20, 21));\nconsole.log(rounded_avg(21, 20));\nconsole.log(rounded_avg(21, 21));\nconsole.log(rounded_avg(21, 22));\nconsole.log(rounded_avg(22, 21));\nconsole.log(rounded_avg(22, 22));\nconsole.log(rounded_avg(22, 23));\nconsole.log(rounded_avg(23, 22));\nconsole.log(rounded_avg(23, 23));\nconsole.log(rounded_avg(23, 24));\nconsole.log(rounded_avg(24, 23));\nconsole.log(rounded_avg(24, 24));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpjga7r3m7.js:72:12)\n    at Object.<anonymous> (/tmp/tmpjga7r3m7.js:85:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "111\n-1\n-1\n1000\n-1\n-1\n1001\n-1\n-1\n1010\n-1\n-1\n1011\n-1\n-1\n1100\n-1\n-1\n1101\n-1\n-1\n1110\n-1\n-1\n1111\n-1\n-1\n10000\n-1\n-1\n10001\n-1\n-1\n10010\n-1\n-1\n10011\n-1\n-1\n10100\n-1\n-1\n10101\n-1\n-1\n10110\n-1\n-1\n10111\n-1\n-1\n",
      "timestamp": 1660333025
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n <= m) {\n        return -1\n    }\n    let avg = n / m\n    let rounded = Math.round(avg)\n    let binary = bin(rounded)\n    return binary\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpazi5yt22.ts(12,18): error TS2304: Cannot find name 'bin'.\n",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpnj8710rq.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnj8710rq.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / m;\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(2, 1));\nconsole.log(rounded_avg(3, 3));\nconsole.log(rounded_avg(4, 4));\nconsole.log(rounded_avg(6, 5));\nconsole.log(rounded_avg(7, 6));\nconsole.log(rounded_avg(8, 7));\nconsole.log(rounded_avg(9, 8));\nconsole.log(rounded_avg(10, 9));\nconsole.log(rounded_avg(11, 10));\nconsole.log(rounded_avg(12, 11));\nconsole.log(rounded_avg(13, 12));\nconsole.log(rounded_avg(14, 13));\nconsole.log(rounded_avg(15, 14));\nconsole.log(rounded_avg(16, 15));\nconsole.log(rounded_avg(17, 16));\nconsole.log(rounded_avg(18, 17));\nconsole.log(rounded_avg(19, 18));\nconsole.log(rounded_avg(20, 19));\nconsole.log(rounded_avg(21, 20));\nconsole.log(rounded_avg(22, 21));\nconsole.log(rounded_avg(23, 22));\nconsole.log(rounded_avg(24, 23));\nconsole.log(rounded_avg(25, 24));\nconsole.log(rounded_avg(26, 25));\nconsole.log(rounded_avg(27, 26));\nconsole.log(rounded_avg(28, 27));\nconsole.log(rounded_avg(29, 28));\nconsole.log(rounded_avg(30, 29));\nconsole.log(rounded_avg(31, 30));\nconsole.log(rounded_avg(32, 31));\nconsole.log(rounded_avg(33, 32));\nconsole.log(rounded_avg(34, 33));\nconsole.log(rounded_avg(35, 34));\nconsole.log(rounded_avg(36, 35));\nconsole.log(rounded_avg(37, 36));\nconsole.log(rounded_avg(38, 37));\nconsole.log(rounded_avg(39, 38));\nconsole.log(rounded_avg(40, 39));\nconsole.log(rounded_avg(41, 40));\nconsole.log(rounded_avg(42, 41));\nconsole.log(rounded_avg(43, 42));\nconsole.log(rounded_avg(44, 43));\nconsole.log(rounded_avg(45, 44));\nconsole.log(rounded_avg(46, 45));\nconsole.log(rounded_avg(47, 46));\nconsole.log(rounded_avg(48, 47));\nconsole.log(rounded_avg(49, 48));\nconsole.log(rounded_avg(50, 49));\nconsole.log(rounded_avg(51, 50));\nconsole.log(rounded_avg(52, 51));\nconsole.log(rounded_avg(53, 52));\nconsole.log(rounded_avg(54, 53));\nconsole.log(rounded_avg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpisvjw52c.ts(71,1): error TS1005: ',' expected.\n../../../../tmp/tmpisvjw52c.ts(71,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333025
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n <= m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / n;\n}\n\nconsole.log(rounded_avg(7, 9));\nconsole.log(rounded_avg(7, 8));\nconsole.log(rounded_avg(7, 7));\nconsole.log(rounded_avg(7, 6));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(7, 4));\nconsole.log(rounded_avg(7, 3));\nconsole.log(rounded_avg(7, 2));\nconsole.log(rounded_avg(7, 1));\nconsole.log(rounded_avg(7, 0));\nconsole.log(rounded_avg(7, -1));\nconsole.log(rounded_avg(7, -2));\nconsole.log(rounded_avg(7, -3));\nconsole.log(rounded_avg(7, -4));\nconsole.log(rounded_avg(7, -5));\nconsole.log(rounded_avg(7, -6));\nconsole.log(rounded_avg(7, -7));\nconsole.log(rounded_avg(7, -8));\nconsole.log(rounded_avg(7, -9));\nconsole.log(rounded_avg(7, -10));\nconsole.log(rounded_avg(7, -11));\nconsole.log(rounded_avg(7, -12));\nconsole.log(rounded_avg(7, -13));\nconsole.log(rounded_avg(7, -14));\nconsole.log(rounded_avg(7, -15));\nconsole.log(rounded_avg(7, -16));\nconsole.log(rounded_avg(7, -17));\nconsole.log(rounded_avg(7, -18));\nconsole.log(rounded_avg(7, -19));\nconsole.log(rounded_avg(7, -20));\nconsole.log(rounded_avg(7, -21));\nconsole.log(rounded_avg(7, -22));\nconsole.log(rounded_avg(7, -23));\nconsole.log(rounded_avg(7, -24));\nconsole.log(rounded_avg(7, -25));\nconsole.log(rounded_avg(7, -26));\nconsole.log(rounded_avg(7, -27));\nconsole.log(rounded_avg(7, -28));\nconsole.log(rounded_avg(7, -29));\nconsole.log(rounded_avg(7, -30));\nconsole.log(rounded_avg(7, -32));\nconsole.log(rounded_avg(7, -33));\nconsole.log(rounded_avg(7, -34));\nconsole.log(rounded_avg(7, -35));\nconsole.log(rounded_avg(7, -36));\nconsole.log(rounded_avg(7, -37));\nconsole.log(rounded_avg(7, -38));\nconsole.log(rounded_avg(7, -39));\nconsole.log(rounded_avg(7, -40));\nconsole.log(rounded_avg(7, -41));\nconsole.log(rounded_avg(7, -42));\nconsole.log(rounded_avg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9ufyj6nz.ts(69,1): error TS1005: ',' expected.\n../../../../tmp/tmp9ufyj6nz.ts(69,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpb_en8icj.js:19:12)\n    at Object.<anonymous> (/tmp/tmpb_en8icj.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = n / m;\n  const rounded_avg = Math.round(avg);\n  return rounded_avg;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpnl8a_dyr.js:17:12)\n    at Object.<anonymous> (/tmp/tmpnl8a_dyr.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = n / m;\n  const rounded = Math.round(avg * Math.pow(10, Math.ceil(Math.log10(avg))));\n  return rounded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpmr3d0r8c.js:17:12)\n    at Object.<anonymous> (/tmp/tmpmr3d0r8c.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n >= m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return Math.round(sum / m) * m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmps1pgvqcg.js:19:12)\n    at Object.<anonymous> (/tmp/tmps1pgvqcg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n <= m) {\n        return -1\n    }\n    let sum = 0\n    for (let i = n; i <= m; i++) {\n        sum += i\n    }\n    return Math.round(sum / 2)\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp0kc169b_.js:19:12)\n    at Object.<anonymous> (/tmp/tmp0kc169b_.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp4xpz0056.js:18:12)\n    at Object.<anonymous> (/tmp/tmp4xpz0056.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333028
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) return -1;\n  let avg = (n + m) / 2;\n  let bin = avg.toString(2);\n  while (bin.length < m) bin = \"0\" + bin;\n  return bin;\n}\n\nconsole.log(rounded_avg(7, 3));\nconsole.log(rounded_avg(7, 4));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(7, 6));\nconsole.log(rounded_avg(7, 7));\nconsole.log(rounded_avg(7, 8));\nconsole.log(rounded_avg(7, 9));\nconsole.log(rounded_avg(7, 10));\nconsole.log(rounded_avg(7, 11));\nconsole.log(rounded_avg(7, 12));\nconsole.log(rounded_avg(7, 13));\nconsole.log(rounded_avg(7, 14));\nconsole.log(rounded_avg(7, 15));\nconsole.log(rounded_avg(7, 16));\nconsole.log(rounded_avg(7, 17));\nconsole.log(rounded_avg(7, 18));\nconsole.log(rounded_avg(7, 19));\nconsole.log(rounded_avg(7, 20));\nconsole.log(rounded_avg(7, 21));\nconsole.log(rounded_avg(7, 22));\nconsole.log(rounded_avg(7, 23));\nconsole.log(rounded_avg(7, 24));\nconsole.log(rounded_avg(7, 25));\nconsole.log(rounded_avg(7, 26));\nconsole.log(rounded_avg(7, 27));\nconsole.log(rounded_avg(7, 28));\nconsole.log(rounded_avg(7, 29));\nconsole.log(rounded_avg(7, 30));\nconsole.log(rounded_avg(7, 31));\nconsole.log(rounded_avg(7, 32));\nconsole.log(rounded_avg(7, 33));\nconsole.log(rounded_avg(7, 34));\nconsole.log(rounded_avg(7, 35));\nconsole.log(rounded_avg(7, 36));\nconsole.log(rounded_avg(7, 37));\nconsole.log(rounded_avg(7, 38));\nconsole.log(rounded_avg(7, 39));\nconsole.log(rounded_avg(7, 40));\nconsole.log(rounded_avg(7, 41));\nconsole.log(rounded_avg(7, 42));\nconsole.log(rounded_avg(7, 43));\nconsole.log(rounded_avg(7, 44));\nconsole.log(rounded_avg(7, 45));\nconsole.log(rounded_avg(7, 46));\nconsole.log(rounded_avg(7, 47));\nconsole.log(rounded_avg(7, 48));\nconsole.log(rounded_avg(7, 49));\nconsole.log(rounded_avg(7, 50));\nconsole.log(rounded_avg(7, 51));\nconsole.log(rounded_avg(7, 52));\nconsole.log(rounded_avg(7, 53));\nconsole.log(rounded_avg(7, 54));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpddgyy8ee.js:70:12)\n    at Object.<anonymous> (/tmp/tmpddgyy8ee.js:83:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "101\n101.1\n00110\n0110.1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n",
      "timestamp": 1660333028
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = n / m;\n  return Math.round(avg * Math.pow(10, 2)) / Math.pow(10, 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpjtqo92q8.js:16:12)\n    at Object.<anonymous> (/tmp/tmpjtqo92q8.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333028
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = n / m;\n  const rounded_avg = Math.round(avg);\n  return bin(rounded_avg);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmph1rqyg8j.ts(12,10): error TS2304: Cannot find name 'bin'.\n",
      "timestamp": 1660333028
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n >= m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return Math.round(sum / 2).toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1000'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpu6_qljhw.js:19:12)\n    at Object.<anonymous> (/tmp/tmpu6_qljhw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1000',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333028
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / n;\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(6, 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(8, 5));\nconsole.log(rounded_avg(9, 5));\nconsole.log(rounded_avg(10, 5));\nconsole.log(rounded_avg(11, 5));\nconsole.log(rounded_avg(12, 5));\nconsole.log(rounded_avg(13, 5));\nconsole.log(rounded_avg(14, 5));\nconsole.log(rounded_avg(15, 5));\nconsole.log(rounded_avg(16, 5));\nconsole.log(rounded_avg(17, 5));\nconsole.log(rounded_avg(18, 5));\nconsole.log(rounded_avg(19, 5));\nconsole.log(rounded_avg(20, 5));\nconsole.log(rounded_avg(21, 5));\nconsole.log(rounded_avg(22, 5));\nconsole.log(rounded_avg(23, 5));\nconsole.log(rounded_avg(24, 5));\nconsole.log(rounded_avg(25, 5));\nconsole.log(rounded_avg(26, 5));\nconsole.log(rounded_avg(27, 5));\nconsole.log(rounded_avg(28, 5));\nconsole.log(rounded_avg(29, 5));\nconsole.log(rounded_avg(30, 5));\nconsole.log(rounded_avg(31, 5));\nconsole.log(rounded_avg(32, 5));\nconsole.log(rounded_avg(33, 5));\nconsole.log(rounded_avg(34, 5));\nconsole.log(rounded_avg(35, 5));\nconsole.log(rounded_avg(36, 5));\nconsole.log(rounded_avg(37, 5));\nconsole.log(rounded_avg(38, 5));\nconsole.log(rounded_avg(39, 5));\nconsole.log(rounded_avg(40, 5));\nconsole.log(rounded_avg(41, 5));\nconsole.log(rounded_avg(42, 5));\nconsole.log(rounded_avg(43, 5));\nconsole.log(rounded_avg(44, 5));\nconsole.log(rounded_avg(45, 5));\nconsole.log(rounded_avg(46, 5));\nconsole.log(rounded_avg(47, 5));\nconsole.log(rounded_avg(48, 5));\nconsole.log(rounded_avg(49, 5));\nconsole.log(rounded_avg(50, 5));\nconsole.log(rounded_avg(51, 5));\nconsole.log(rounded_avg(52, 5));\nconsole.log(rounded_avg(53, 5));\nconsole.log(rounded_avg(54, 5));\nconsole.log(rounded_avg(55, 5));\nconsole.log(rounded_avg(56, 5));\nconsole.log(roun\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8ta3qpvc.ts(71,1): error TS1005: ',' expected.\n../../../../tmp/tmp8ta3qpvc.ts(71,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333028
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return Math.round(sum / 2).toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp8wpcmozw.js:19:12)\n    at Object.<anonymous> (/tmp/tmp8wpcmozw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333028
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpulsli_ql.js:19:12)\n    at Object.<anonymous> (/tmp/tmpulsli_ql.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpms1sfdfs.js:19:12)\n    at Object.<anonymous> (/tmp/tmpms1sfdfs.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333028
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  return toBinary(avg);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp20tp91r2.ts(11,10): error TS2304: Cannot find name 'toBinary'.\n",
      "timestamp": 1660333028
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = n / m;\n  return Math.round(avg * Math.pow(10, 2)) / Math.pow(10, 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpjtqo92q8.js:16:12)\n    at Object.<anonymous> (/tmp/tmpjtqo92q8.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333028
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  return `${avg}`.padStart(m, '0');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp63u6y1hz.js:15:12)\n    at Object.<anonymous> (/tmp/tmp63u6y1hz.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333029
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpgco5fcgy.js:18:12)\n    at Object.<anonymous> (/tmp/tmpgco5fcgy.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpms1sfdfs.js:19:12)\n    at Object.<anonymous> (/tmp/tmpms1sfdfs.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333028
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / m;\n}\n</code>\n<|/ a tags=typescript,javascript |>\n<| a tags=typescript,javascript |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplqxp1y7c.ts(16,2): error TS1110: Type expected.\n../../../../tmp/tmplqxp1y7c.ts(16,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmplqxp1y7c.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmplqxp1y7c.ts(17,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmplqxp1y7c.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmplqxp1y7c.ts(18,6): error TS1005: ';' expected.\n../../../../tmp/tmplqxp1y7c.ts(18,34): error TS1109: Expression expected.\n../../../../tmp/tmplqxp1y7c.ts(20,9): error TS1005: ';' expected.\n",
      "timestamp": 1660333028
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp5oqmwzp_.js:19:12)\n    at Object.<anonymous> (/tmp/tmp5oqmwzp_.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333029
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpulsli_ql.js:19:12)\n    at Object.<anonymous> (/tmp/tmpulsli_ql.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpms1sfdfs.js:19:12)\n    at Object.<anonymous> (/tmp/tmpms1sfdfs.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333028
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpnj8710rq.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnj8710rq.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = n / m;\n  return Math.round(avg * Math.pow(10, Math.floor(Math.log(avg) / Math.LN10))) / Math.pow(10, Math.floor(Math.log(avg) / Math.LN10));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp0jlis36l.js:16:12)\n    at Object.<anonymous> (/tmp/tmp0jlis36l.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333029
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  return bin(avg);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgmnwllym.ts(11,10): error TS2304: Cannot find name 'bin'.\n",
      "timestamp": 1660333028
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp5oqmwzp_.js:19:12)\n    at Object.<anonymous> (/tmp/tmp5oqmwzp_.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333029
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n >= m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp0vbxw_29.js:19:12)\n    at Object.<anonymous> (/tmp/tmp0vbxw_29.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333029
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / n;\n}\n\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(2, 3));\nconsole.log(rounded_avg(3, 3));\nconsole.log(rounded_avg(4, 3));\nconsole.log(rounded_avg(5, 3));\nconsole.log(rounded_avg(6, 3));\nconsole.log(rounded_avg(7, 3));\nconsole.log(rounded_avg(8, 3));\nconsole.log(rounded_avg(9, 3));\nconsole.log(rounded_avg(10, 3));\nconsole.log(rounded_avg(11, 3));\nconsole.log(rounded_avg(12, 3));\nconsole.log(rounded_avg(13, 3));\nconsole.log(rounded_avg(14, 3));\nconsole.log(rounded_avg(15, 3));\nconsole.log(rounded_avg(16, 3));\nconsole.log(rounded_avg(17, 3));\nconsole.log(rounded_avg(18, 3));\nconsole.log(rounded_avg(19, 3));\nconsole.log(rounded_avg(20, 3));\nconsole.log(rounded_avg(21, 3));\nconsole.log(rounded_avg(22, 3));\nconsole.log(rounded_avg(23, 3));\nconsole.log(rounded_avg(24, 3));\nconsole.log(rounded_avg(25, 3));\nconsole.log(rounded_avg(26, 3));\nconsole.log(rounded_avg(27, 3));\nconsole.log(rounded_avg(28, 3));\nconsole.log(rounded_avg(29, 3));\nconsole.log(rounded_avg(30, 3));\nconsole.log(rounded_avg(31, 3));\nconsole.log(rounded_avg(32, 3));\nconsole.log(rounded_avg(33, 3));\nconsole.log(rounded_avg(34, 3));\nconsole.log(rounded_avg(35, 3));\nconsole.log(rounded_avg(36, 3));\nconsole.log(rounded_avg(37, 3));\nconsole.log(rounded_avg(38, 3));\nconsole.log(rounded_avg(39, 3));\nconsole.log(rounded_avg(40, 3));\nconsole.log(rounded_avg(41, 3));\nconsole.log(rounded_avg(42, 3));\nconsole.log(rounded_avg(43, 3));\nconsole.log(rounded_avg(44, 3));\nconsole.log(rounded_avg(45, 3));\nconsole.log(rounded_avg(46, 3));\nconsole.log(rounded_avg(47, 3));\nconsole.log(rounded_avg(48, 3));\nconsole.log(rounded_avg(49, 3));\nconsole.log(rounded_avg(50, 3));\nconsole.log(rounded_avg(51, 3));\nconsole.log(rounded_avg(52, 3));\nconsole.log(rounded_avg(53, 3));\nconsole.log(rounded_avg(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0t_89qfr.ts(71,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333028
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n <= m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp9m_jbnu7.js:19:12)\n    at Object.<anonymous> (/tmp/tmp9m_jbnu7.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333029
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  return avg;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmprwsjlway.js:16:12)\n    at Object.<anonymous> (/tmp/tmprwsjlway.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333029
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n <= m) return -1;\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmps4b9pc5u.js:18:12)\n    at Object.<anonymous> (/tmp/tmps4b9pc5u.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333028
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp5oqmwzp_.js:19:12)\n    at Object.<anonymous> (/tmp/tmp5oqmwzp_.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333029
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return Math.round(sum / 2).toString(2);\n}\n</code>\n<|/ a tags=javascript,typescript |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp59mt82ab.ts(16,2): error TS1110: Type expected.\n../../../../tmp/tmp59mt82ab.ts(16,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp59mt82ab.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmp59mt82ab.ts(17,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp59mt82ab.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmp59mt82ab.ts(18,6): error TS1005: ';' expected.\n../../../../tmp/tmp59mt82ab.ts(18,16): error TS1109: Expression expected.\n../../../../tmp/tmp59mt82ab.ts(20,9): error TS1005: ';' expected.\n",
      "timestamp": 1660333028
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) return -1\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  return Math.round(sum / 2).toString(2)\n}\n\nrounded_avg(7, 10) // \"11\"\nrounded_avg(7, 9) // \"-1\"\nrounded_avg(7, 8) // \"-1\"\nrounded_avg(7, 7) // \"-1\"\nrounded_avg(7, 6) // \"-1\"\nrounded_avg(7, 5) // \"-1\"\nrounded_avg(7, 4) // \"-1\"\nrounded_avg(7, 3) // \"-1\"\nrounded_avg(7, 2) // \"-1\"\nrounded_avg(7, 1) // \"-1\"\nrounded_avg(7, 0) // \"-1\"\nrounded_avg(7, -1) // \"-1\"\nrounded_avg(7, -2) // \"-1\"\nrounded_avg(7, -3) // \"-1\"\nrounded_avg(7, -4) // \"-1\"\nrounded_avg(7, -5) // \"-1\"\nrounded_avg(7, -6) // \"-1\"\nrounded_avg(7, -7) // \"-1\"\nrounded_avg(7, -8) // \"-1\"\nrounded_avg(7, -9) // \"-1\"\nrounded_avg(7, -10) // \"-1\"\nrounded_avg(7, -11) // \"-1\"\nrounded_avg(7, -12) // \"-1\"\nrounded_avg(7, -13) // \"-1\"\nrounded_avg(7, -14) // \"-1\"\nrounded_avg(7, -15) // \"-1\"\nrounded_avg(7, -16) // \"-1\"\nrounded_avg(7, -17) // \"-1\"\nrounded_avg(7, -18) // \"-1\"\nrounded_avg(7, -19) // \"-1\"\nrounded_avg(7, -20) // \"-1\"\nrounded_avg(7, -21) // \"-1\"\nrounded_avg(7, -22) // \"-1\"\nrounded_avg(7, -23) // \"-1\"\nrounded_avg(7, -24) // \"-1\"\nrounded_avg(7, -25) // \"-1\"\nrounded_avg(7, -26) // \"-1\"\nrounded_avg(7, -27) // \"-1\"\nrounded_avg(7, -28) // \"-1\"\nrounded_avg(7, -29) // \"-1\"\nrounded_avg(7, -30) // \"-1\"\nrounded_avg(7, -31) // \"-1\"\nrounded_avg(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp220_bnw0.ts(58,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333028
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpmx3t_9zr.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmx3t_9zr.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333029
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  return `${avg}`.padStart(m, '0');\n}\n\nconsole.log(rounded_avg(6, 8));\nconsole.log(rounded_avg(6, 9));\nconsole.log(rounded_avg(6, 10));\nconsole.log(rounded_avg(6, 11));\nconsole.log(rounded_avg(6, 12));\nconsole.log(rounded_avg(6, 13));\nconsole.log(rounded_avg(6, 14));\nconsole.log(rounded_avg(6, 15));\nconsole.log(rounded_avg(6, 16));\nconsole.log(rounded_avg(6, 17));\nconsole.log(rounded_avg(6, 18));\nconsole.log(rounded_avg(6, 19));\nconsole.log(rounded_avg(6, 20));\nconsole.log(rounded_avg(6, 21));\nconsole.log(rounded_avg(6, 22));\nconsole.log(rounded_avg(6, 23));\nconsole.log(rounded_avg(6, 24));\nconsole.log(rounded_avg(6, 25));\nconsole.log(rounded_avg(6, 26));\nconsole.log(rounded_avg(6, 27));\nconsole.log(rounded_avg(6, 28));\nconsole.log(rounded_avg(6, 29));\nconsole.log(rounded_avg(6, 30));\nconsole.log(rounded_avg(6, 31));\nconsole.log(rounded_avg(6, 32));\nconsole.log(rounded_avg(6, 33));\nconsole.log(rounded_avg(6, 34));\nconsole.log(rounded_avg(6, 35));\nconsole.log(rounded_avg(6, 36));\nconsole.log(rounded_avg(6, 37));\nconsole.log(rounded_avg(6, 38));\nconsole.log(rounded_avg(6, 39));\nconsole.log(rounded_avg(6, 40));\nconsole.log(rounded_avg(6, 41));\nconsole.log(rounded_avg(6, 42));\nconsole.log(rounded_avg(6, 43));\nconsole.log(rounded_avg(6, 44));\nconsole.log(rounded_avg(6, 45));\nconsole.log(rounded_avg(6, 46));\nconsole.log(rounded_avg(6, 47));\nconsole.log(rounded_avg(6, 48));\nconsole.log(rounded_avg(6, 49));\nconsole.log(rounded_avg(6, 50));\nconsole.log(rounded_avg(6, 51));\nconsole.log(rounded_avg(6, 52));\nconsole.log(rounded_avg(6, 53));\nconsole.log(rounded_avg(6, 54));\nconsole.log(rounded_avg(6, 55));\nconsole.log(rounded_avg(6, 56));\nconsole.log(rounded_avg(6, 57));\nconsole.log(rounded_avg(6, 58));\nconsole.log(rounded_avg(6, 59));\nconsole.log(rounded_avg(6, 60));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcv__93ox.ts(66,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333028
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let avg = (n + m) / 2;\n    let binary = \"\";\n    while (avg > 0) {\n        binary = String(avg % 2) + binary;\n        avg = Math.floor(avg / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp7_zbnvn2.js:21:12)\n    at Object.<anonymous> (/tmp/tmp7_zbnvn2.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333032
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) {\n    return -1;\n  }\n  const avg = n + (m / 2);\n  const bin = avg + '';\n  const binary = bin.slice(0, bin.length - 1);\n  return parseInt(binary, 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpc3_d3n16.js:18:12)\n    at Object.<anonymous> (/tmp/tmpc3_d3n16.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333032
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  return avg.toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp2e8cbr4d.js:16:12)\n    at Object.<anonymous> (/tmp/tmp2e8cbr4d.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333032
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = n + (m - n) / 2;\n  return Math.round(avg * 100) / 100;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp0fea8xn3.js:16:12)\n    at Object.<anonymous> (/tmp/tmp0fea8xn3.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333032
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpbqwicyw1.js:19:12)\n    at Object.<anonymous> (/tmp/tmpbqwicyw1.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333032
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / m;\n}\n\nconsole.log(rounded_avg(6, 10));\nconsole.log(rounded_avg(6, 9));\nconsole.log(rounded_avg(6, 8));\nconsole.log(rounded_avg(6, 7));\nconsole.log(rounded_avg(6, 6));\nconsole.log(rounded_avg(6, 5));\nconsole.log(rounded_avg(6, 4));\nconsole.log(rounded_avg(6, 3));\nconsole.log(rounded_avg(6, 2));\nconsole.log(rounded_avg(6, 1));\nconsole.log(rounded_avg(6, 0));\nconsole.log(rounded_avg(7, 0));\nconsole.log(rounded_avg(7, 1));\nconsole.log(rounded_avg(7, 2));\nconsole.log(rounded_avg(7, 3));\nconsole.log(rounded_avg(7, 4));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(7, 6));\nconsole.log(rounded_avg(7, 7));\nconsole.log(rounded_avg(7, 8));\nconsole.log(rounded_avg(7, 9));\nconsole.log(rounded_avg(7, 10));\nconsole.log(rounded_avg(8, 0));\nconsole.log(rounded_avg(8, 1));\nconsole.log(rounded_avg(8, 2));\nconsole.log(rounded_avg(8, 3));\nconsole.log(rounded_avg(8, 4));\nconsole.log(rounded_avg(8, 5));\nconsole.log(rounded_avg(8, 6));\nconsole.log(rounded_avg(8, 7));\nconsole.log(rounded_avg(8, 8));\nconsole.log(rounded_avg(8, 9));\nconsole.log(rounded_avg(8, 10));\nconsole.log(rounded_avg(9, 0));\nconsole.log(rounded_avg(9, 1));\nconsole.log(rounded_avg(9, 2));\nconsole.log(rounded_avg(9, 3));\nconsole.log(rounded_avg(9, 4));\nconsole.log(rounded_avg(9, 5));\nconsole.log(rounded_avg(9, 6));\nconsole.log(rounded_avg(9, 7));\nconsole.log(rounded_avg(9, 8));\nconsole.log(rounded_avg(9, 9));\nconsole.log(rounded_avg(9, 10));\nconsole.log(rounded_avg(10, 0));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(10, 2));\nconsole.log(rounded_avg(10, 3));\nconsole.log(rounded_avg(10, 4));\nconsole.log(rounded_avg(10, 5));\nconsole.log(rounded_avg(10, 6));\nconsole.log(rounded_avg(10, 7));\nconsole.log(rounded_avg(10, 8));\nconsole.log(rounded_avg(10, 9));\nconsole.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(11, 0));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpimbyqoms.ts(74,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333032
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = n / m;\n  return Math.round(avg * Math.pow(10, 2)) / Math.pow(10, 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpjtqo92q8.js:16:12)\n    at Object.<anonymous> (/tmp/tmpjtqo92q8.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333028
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = n + (m - n) / 2;\n  return Math.round(avg * Math.pow(10, 2)) / Math.pow(10, 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp9neoip3k.js:16:12)\n    at Object.<anonymous> (/tmp/tmp9neoip3k.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333032
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n <= m) {\n        return -1\n    }\n    let sum = 0\n    for (let i = n; i <= m; i++) {\n        sum += i\n    }\n    return Math.round(sum / 2)\n}\nconsole.log(rounded_avg(7, 9))\nconsole.log(rounded_avg(7, 10))\nconsole.log(rounded_avg(7, 11))\nconsole.log(rounded_avg(7, 12))\nconsole.log(rounded_avg(7, 13))\nconsole.log(rounded_avg(7, 14))\nconsole.log(rounded_avg(7, 15))\nconsole.log(rounded_avg(7, 16))\nconsole.log(rounded_avg(7, 17))\nconsole.log(rounded_avg(7, 18))\nconsole.log(rounded_avg(7, 19))\nconsole.log(rounded_avg(7, 20))\nconsole.log(rounded_avg(7, 21))\nconsole.log(rounded_avg(7, 22))\nconsole.log(rounded_avg(7, 23))\nconsole.log(rounded_avg(7, 24))\nconsole.log(rounded_avg(7, 25))\nconsole.log(rounded_avg(7, 26))\nconsole.log(rounded_avg(7, 27))\nconsole.log(rounded_avg(7, 28))\nconsole.log(rounded_avg(7, 29))\nconsole.log(rounded_avg(7, 30))\nconsole.log(rounded_avg(7, 31))\nconsole.log(rounded_avg(7, 32))\nconsole.log(rounded_avg(7, 33))\nconsole.log(rounded_avg(7, 34))\nconsole.log(rounded_avg(7, 35))\nconsole.log(rounded_avg(7, 36))\nconsole.log(rounded_avg(7, 37))\nconsole.log(rounded_avg(7, 38))\nconsole.log(rounded_avg(7, 39))\nconsole.log(rounded_avg(7, 40))\nconsole.log(rounded_avg(7, 41))\nconsole.log(rounded_avg(7, 42))\nconsole.log(rounded_avg(7, 43))\nconsole.log(rounded_avg(7, 44))\nconsole.log(rounded_avg(7, 45))\nconsole.log(rounded_avg(7, 46))\nconsole.log(rounded_avg(7, 47))\nconsole.log(rounded_avg(7, 48))\nconsole.log(rounded_avg(7, 49))\nconsole.log(rounded_avg(7, 50))\nconsole.log(rounded_avg(7, 51))\nconsole.log(rounded_avg(7, 52))\nconsole.log(rounded_avg(7, 53))\nconsole.log(rounded_avg(7, 54))\nconsole.log(rounded_avg(7, 55))\nconsole.log(rounded_avg(7, 56))\nconsole.log(rounded_avg(7, 57))\nconsole.log(rounded_avg(7, 58))\nconsole.log(rounded_avg(7, 59))\nconsole.log(rounded_avg(7, 60))\nconsole.log(rounded_avg(7, 61))\nconsole.log(roun\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp10rioq7k.ts(70,1): error TS1005: ',' expected.\n../../../../tmp/tmp10rioq7k.ts(70,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333032
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpnj8710rq.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnj8710rq.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpnj8710rq.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnj8710rq.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpb_en8icj.js:19:12)\n    at Object.<anonymous> (/tmp/tmpb_en8icj.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return Math.round(sum / 2).toString(2);\n}\n</code>\n<|/ a |>\n<| c |>\nI like this solution, but I believe it can be simplified a bit. `sum` can be initialized to `m` instead of `0`, then `sum += i` can be replaced with `sum += i-m`.\n<|/ c |>\n<| c |>\nYes, you are right. Thanks for pointing that out. I've updated the answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptfth79v2.ts(16,2): error TS1110: Type expected.\n../../../../tmp/tmptfth79v2.ts(16,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmptfth79v2.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmptfth79v2.ts(17,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmptfth79v2.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmptfth79v2.ts(18,7): error TS1109: Expression expected.\n../../../../tmp/tmptfth79v2.ts(19,3): error TS1005: ';' expected.\n../../../../tmp/tmptfth79v2.ts(19,13): error TS1005: ';' expected.\n../../../../tmp/tmptfth79v2.ts(19,27): error TS1005: ';' expected.\n../../../../tmp/tmptfth79v2.ts(19,29): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmptfth79v2.ts(19,37): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmptfth79v2.ts(19,40): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmptfth79v2.ts(19,44): error TS1434: Unexpected keyword or identifier.\n../.",
      "timestamp": 1660333032
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) return -1\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  return Math.round(sum / 2)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpgga_lpob.js:18:12)\n    at Object.<anonymous> (/tmp/tmpgga_lpob.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333032
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / m;\n}\n</code>\n<|/ a tags=javascript,typescript |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmaf_5_nh.ts(16,2): error TS1110: Type expected.\n../../../../tmp/tmpmaf_5_nh.ts(16,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpmaf_5_nh.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmpmaf_5_nh.ts(17,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpmaf_5_nh.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmpmaf_5_nh.ts(18,6): error TS1005: ';' expected.\n../../../../tmp/tmpmaf_5_nh.ts(18,16): error TS1109: Expression expected.\n../../../../tmp/tmpmaf_5_nh.ts(20,9): error TS1005: ';' expected.\n",
      "timestamp": 1660333032
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) return -1\n  const avg = n / m\n  return Math.round(avg * Math.pow(10, 2)) / Math.pow(10, 2)\n}\n\nconsole.log(rounded_avg(7, 5))\nconsole.log(rounded_avg(7, 6))\nconsole.log(rounded_avg(7, 7))\nconsole.log(rounded_avg(7, 8))\nconsole.log(rounded_avg(7, 9))\nconsole.log(rounded_avg(7, 10))\nconsole.log(rounded_avg(7, 11))\nconsole.log(rounded_avg(7, 12))\nconsole.log(rounded_avg(7, 13))\nconsole.log(rounded_avg(7, 14))\nconsole.log(rounded_avg(7, 15))\nconsole.log(rounded_avg(7, 16))\nconsole.log(rounded_avg(7, 17))\nconsole.log(rounded_avg(7, 18))\nconsole.log(rounded_avg(7, 19))\nconsole.log(rounded_avg(7, 20))\nconsole.log(rounded_avg(7, 21))\nconsole.log(rounded_avg(7, 22))\nconsole.log(rounded_avg(7, 23))\nconsole.log(rounded_avg(7, 24))\nconsole.log(rounded_avg(7, 25))\nconsole.log(rounded_avg(7, 26))\nconsole.log(rounded_avg(7, 27))\nconsole.log(rounded_avg(7, 28))\nconsole.log(rounded_avg(7, 29))\nconsole.log(rounded_avg(7, 30))\nconsole.log(rounded_avg(7, 31))\nconsole.log(rounded_avg(7, 32))\nconsole.log(rounded_avg(7, 33))\nconsole.log(rounded_avg(7, 34))\nconsole.log(rounded_avg(7, 35))\nconsole.log(rounded_avg(7, 36))\nconsole.log(rounded_avg(7, 37))\nconsole.log(rounded_avg(7, 38))\nconsole.log(rounded_avg(7, 39))\nconsole.log(rounded_avg(7, 40))\nconsole.log(rounded_avg(7, 41))\nconsole.log(rounded_avg(7, 42))\nconsole.log(rounded_avg(7, 43))\nconsole.log(rounded_avg(7, 44))\nconsole.log(rounded_avg(7, 45))\nconsole.log(rounded_avg(7, 46))\nconsole.log(rounded_avg(7, 47))\nconsole.log(rounded_avg(7, 48))\nconsole.log(rounded_avg(7, 49))\nconsole.log(rounded_avg(7, 50))\nconsole.log(rounded_avg(7, 51))\nconsole.log(rounded_avg(7, 52))\nconsole.log(rounded_avg(7, 53))\nconsole.log(rounded_avg(7, 54))\nconsole.log(rounded_avg(7, 55))\nconsole.log(rounded_avg(7, 56))\nconsole.log(rounded_avg(7, 57))\nconsole.log(rounded_avg(7, 58))\nconsole.log(rounded_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplk71beft.ts(67,1): error TS1005: ',' expected.\n../../../../tmp/tmplk71beft.ts(67,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333032
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpc6bv4pc8.js:19:12)\n    at Object.<anonymous> (/tmp/tmpc6bv4pc8.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333032
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let result = 0;\n    for (let i = n; i <= m; i++) {\n        result += i;\n    }\n    return result / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpma1tb4dm.js:19:12)\n    at Object.<anonymous> (/tmp/tmpma1tb4dm.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333032
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpulsli_ql.js:19:12)\n    at Object.<anonymous> (/tmp/tmpulsli_ql.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) return -1\n  let avg = (n + m) / 2\n  let bin = avg.toString(2)\n  while (bin.length < m) bin = \"0\" + bin\n  return bin\n}\n\nconsole.log(rounded_avg(7, 9))\nconsole.log(rounded_avg(7, 10))\nconsole.log(rounded_avg(7, 11))\nconsole.log(rounded_avg(7, 12))\nconsole.log(rounded_avg(7, 13))\nconsole.log(rounded_avg(7, 14))\nconsole.log(rounded_avg(7, 15))\nconsole.log(rounded_avg(7, 16))\nconsole.log(rounded_avg(7, 17))\nconsole.log(rounded_avg(7, 18))\nconsole.log(rounded_avg(7, 19))\nconsole.log(rounded_avg(7, 20))\nconsole.log(rounded_avg(7, 21))\nconsole.log(rounded_avg(7, 22))\nconsole.log(rounded_avg(7, 23))\nconsole.log(rounded_avg(7, 24))\nconsole.log(rounded_avg(7, 25))\nconsole.log(rounded_avg(7, 26))\nconsole.log(rounded_avg(7, 27))\nconsole.log(rounded_avg(7, 28))\nconsole.log(rounded_avg(7, 29))\nconsole.log(rounded_avg(7, 30))\nconsole.log(rounded_avg(7, 31))\nconsole.log(rounded_avg(7, 32))\nconsole.log(rounded_avg(7, 33))\nconsole.log(rounded_avg(7, 34))\nconsole.log(rounded_avg(7, 35))\nconsole.log(rounded_avg(7, 36))\nconsole.log(rounded_avg(7, 37))\nconsole.log(rounded_avg(7, 38))\nconsole.log(rounded_avg(7, 39))\nconsole.log(rounded_avg(7, 40))\nconsole.log(rounded_avg(7, 41))\nconsole.log(rounded_avg(7, 42))\nconsole.log(rounded_avg(7, 43))\nconsole.log(rounded_avg(7, 44))\nconsole.log(rounded_avg(7, 45))\nconsole.log(rounded_avg(7, 46))\nconsole.log(rounded_avg(7, 47))\nconsole.log(rounded_avg(7, 48))\nconsole.log(rounded_avg(7, 49))\nconsole.log(rounded_avg(7, 50))\nconsole.log(rounded_avg(7, 51))\nconsole.log(rounded_avg(7, 52))\nconsole.log(rounded_avg(7, 53))\nconsole.log(rounded_avg(7, 54))\nconsole.log(rounded_avg(7, 55))\nconsole.log(rounded_avg(7, 56))\nconsole.log(rounded_avg(7, 57))\nconsole.log(rounded_avg(7, 58))\nconsole.log(rounded_avg(7, 59))\nconsole.log(rounded_avg(7, 60))\nconsole.log(rounded_avg(7, 61))\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpoqad3gz2.js:71:12)\n    at Object.<anonymous> (/tmp/tmpoqad3gz2.js:84:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n",
      "timestamp": 1660333032
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n <= m) {\n        return -1\n    }\n    let sum = 0\n    for (let i = n; i <= m; i++) {\n        sum += i\n    }\n    return Math.round(sum / 2)\n}\n\nconsole.log(rounded_avg(8, 9))\nconsole.log(rounded_avg(8, 10))\nconsole.log(rounded_avg(8, 11))\nconsole.log(rounded_avg(8, 12))\nconsole.log(rounded_avg(8, 13))\nconsole.log(rounded_avg(8, 14))\nconsole.log(rounded_avg(8, 15))\nconsole.log(rounded_avg(8, 16))\nconsole.log(rounded_avg(8, 17))\nconsole.log(rounded_avg(8, 18))\nconsole.log(rounded_avg(8, 19))\nconsole.log(rounded_avg(8, 20))\nconsole.log(rounded_avg(8, 21))\nconsole.log(rounded_avg(8, 22))\nconsole.log(rounded_avg(8, 23))\nconsole.log(rounded_avg(8, 24))\nconsole.log(rounded_avg(8, 25))\nconsole.log(rounded_avg(8, 26))\nconsole.log(rounded_avg(8, 27))\nconsole.log(rounded_avg(8, 28))\nconsole.log(rounded_avg(8, 29))\nconsole.log(rounded_avg(8, 30))\nconsole.log(rounded_avg(8, 31))\nconsole.log(rounded_avg(8, 32))\nconsole.log(rounded_avg(8, 33))\nconsole.log(rounded_avg(8, 34))\nconsole.log(rounded_avg(8, 35))\nconsole.log(rounded_avg(8, 36))\nconsole.log(rounded_avg(8, 37))\nconsole.log(rounded_avg(8, 38))\nconsole.log(rounded_avg(8, 39))\nconsole.log(rounded_avg(8, 40))\nconsole.log(rounded_avg(8, 41))\nconsole.log(rounded_avg(8, 42))\nconsole.log(rounded_avg(8, 43))\nconsole.log(rounded_avg(8, 44))\nconsole.log(rounded_avg(8, 45))\nconsole.log(rounded_avg(8, 46))\nconsole.log(rounded_avg(8, 47))\nconsole.log(rounded_avg(8, 48))\nconsole.log(rounded_avg(8, 49))\nconsole.log(rounded_avg(8, 50))\nconsole.log(rounded_avg(8, 51))\nconsole.log(rounded_avg(8, 52))\nconsole.log(rounded_avg(8, 53))\nconsole.log(rounded_avg(8, 54))\nconsole.log(rounded_avg(8, 55))\nconsole.log(rounded_avg(8, 56))\nconsole.log(rounded_avg(8, 57))\nconsole.log(rounded_avg(8, 58))\nconsole.log(rounded_avg(8, 59))\nconsole.log(rounded_avg(8, 60))\nconsole.log(rounded_avg(8, 61))\nconsole.log(roun\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpexz4ud2q.ts(71,1): error TS1005: ',' expected.\n../../../../tmp/tmpexz4ud2q.ts(71,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333032
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = n / m;\n  const rounded = Math.round(avg * Math.pow(10, Math.ceil(Math.log10(avg))));\n  return rounded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpmr3d0r8c.js:17:12)\n    at Object.<anonymous> (/tmp/tmpmr3d0r8c.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = n / m;\n  return Math.round(avg * Math.pow(10, Math.ceil(Math.log10(avg)))) / Math.pow(10, Math.ceil(Math.log10(avg)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpy_fth9h9.js:16:12)\n    at Object.<anonymous> (/tmp/tmpy_fth9h9.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpmx3t_9zr.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmx3t_9zr.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333029
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) return -1;\n  const avg = n / m;\n  return Math.round(avg * Math.pow(10, Math.ceil(Math.log(avg) / Math.LN10))) / Math.pow(10, Math.ceil(Math.log(avg) / Math.LN10));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpay_przn_.js:15:12)\n    at Object.<anonymous> (/tmp/tmpay_przn_.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333032
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpms1sfdfs.js:19:12)\n    at Object.<anonymous> (/tmp/tmpms1sfdfs.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333028
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n <= m) return -1\n    let sum = 0\n    for (let i = n; i <= m; i++) {\n        sum += i\n    }\n    return sum / m\n}\nrounded_avg(7, 10)\nrounded_avg(7, 9)\nrounded_avg(7, 8)\nrounded_avg(7, 7)\nrounded_avg(7, 6)\nrounded_avg(7, 5)\nrounded_avg(7, 4)\nrounded_avg(7, 3)\nrounded_avg(7, 2)\nrounded_avg(7, 1)\nrounded_avg(7, 0)\nrounded_avg(6, 10)\nrounded_avg(6, 9)\nrounded_avg(6, 8)\nrounded_avg(6, 7)\nrounded_avg(6, 6)\nrounded_avg(6, 5)\nrounded_avg(6, 4)\nrounded_avg(6, 3)\nrounded_avg(6, 2)\nrounded_avg(6, 1)\nrounded_avg(6, 0)\nrounded_avg(5, 10)\nrounded_avg(5, 9)\nrounded_avg(5, 8)\nrounded_avg(5, 7)\nrounded_avg(5, 6)\nrounded_avg(5, 5)\nrounded_avg(5, 4)\nrounded_avg(5, 3)\nrounded_avg(5, 2)\nrounded_avg(5, 1)\nrounded_avg(5, 0)\nrounded_avg(4, 10)\nrounded_avg(4, 9)\nrounded_avg(4, 8)\nrounded_avg(4, 7)\nrounded_avg(4, 6)\nrounded_avg(4, 5)\nrounded_avg(4, 4)\nrounded_avg(4, 3)\nrounded_avg(4, 2)\nrounded_avg(4, 1)\nrounded_avg(4, 0)\nrounded_avg(3, 10)\nrounded_avg(3, 9)\nrounded_avg(3, 8)\nrounded_avg(3, 7)\nrounded_avg(3, 6)\nrounded_avg(3, 5)\nrounded_avg(3, 4)\nrounded_avg(3, 3)\nrounded_avg(3, 2)\nrounded_avg(3, 1)\nrounded_avg(3, 0)\nrounded_avg(2, 10)\nrounded_avg(2, 9)\nrounded_avg(2, 8)\nrounded_avg(2, 7)\nrounded_avg(2, 6)\nrounded_avg(2, 5)\nrounded_avg(2, 4)\nrounded_avg(2, 3)\nrounded_avg(2, 2)\nrounded_avg(2, 1)\nrounded_avg(2, 0)\nrounded_avg(1, 10)\nrounded_avg(1, 9)\nrounded_avg(1, 8)\nrounded_avg(1, 7)\nrounded_avg(1, 6)\nrounded_avg(1, 5)\nrounded_avg(1, 4)\nrounded_avg(1, 3)\nrounded_avg(1, 2)\nrounded_avg(1, 1)\nrounded_avg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp9l22ghz6.js:95:12)\n    at Object.<anonymous> (/tmp/tmp9l22ghz6.js:108:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333032
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  return `${avg}`.padStart(8, '0');\n}\n\nconsole.log(rounded_avg(7, 3)); // 7\nconsole.log(rounded_avg(7, 4)); // -1\nconsole.log(rounded_avg(7, 5)); // -1\nconsole.log(rounded_avg(7, 6)); // -1\nconsole.log(rounded_avg(7, 7)); // -1\nconsole.log(rounded_avg(7, 8)); // -1\nconsole.log(rounded_avg(7, 9)); // -1\nconsole.log(rounded_avg(7, 10)); // -1\nconsole.log(rounded_avg(7, 11)); // -1\nconsole.log(rounded_avg(7, 12)); // -1\nconsole.log(rounded_avg(7, 13)); // -1\nconsole.log(rounded_avg(7, 14)); // -1\nconsole.log(rounded_avg(7, 15)); // -1\nconsole.log(rounded_avg(7, 16)); // -1\nconsole.log(rounded_avg(7, 17)); // -1\nconsole.log(rounded_avg(7, 18)); // -1\nconsole.log(rounded_avg(7, 19)); // -1\nconsole.log(rounded_avg(7, 20)); // -1\nconsole.log(rounded_avg(7, 21)); // -1\nconsole.log(rounded_avg(7, 22)); // -1\nconsole.log(rounded_avg(7, 23)); // -1\nconsole.log(rounded_avg(7, 24)); // -1\nconsole.log(rounded_avg(7, 25)); // -1\nconsole.log(rounded_avg(7, 26)); // -1\nconsole.log(rounded_avg(7, 27)); // -1\nconsole.log(rounded_avg(7, 28)); // -1\nconsole.log(rounded_avg(7, 29)); // -1\nconsole.log(rounded_avg(7, 30)); // -1\nconsole.log(rounded_avg(7, 31)); // -1\nconsole.log(rounded_avg(7, 32)); // -1\nconsole.log(rounded_avg(7, 33)); // -1\nconsole.log(rounded_avg(7, 34)); // -1\nconsole.log(rounded_avg(7, 35)); // -1\nconsole.log(rounded_avg(7, 36)); // -1\nconsole.log(rounded_avg(7, 37)); // -1\nconsole.log(rounded_avg(7, 38)); // -1\nconsole.log(rounded_avg(7, 39)); // -1\nconsole.log(rounded_avg(7, 40)); // -1\nconsole.log(rounded_avg(7, 41)); // -1\nconsole.log(rounded_avg(7, 42)); // -1\nconsole.log(rounded_avg(7, 43)); // -1\nconsole.log(rounded_avg(7, 44)); // -1\nconsole.log(rounded_avg(7, 45)); // -1\nconsole.log(rounded_avg(7, 46)); // -1\nconsole.log(rounded_avg(7, 47)); // -1\nconsole.log(rounded_avg(7, 48)\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpj0qgzi7u.ts(60,1): error TS1005: ',' expected.\n../../../../tmp/tmpj0qgzi7u.ts(60,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333032
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpms1sfdfs.js:19:12)\n    at Object.<anonymous> (/tmp/tmpms1sfdfs.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333028
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / n;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdv3bkr3e.ts(16,2): error TS1110: Type expected.\n../../../../tmp/tmpdv3bkr3e.ts(16,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpdv3bkr3e.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmpdv3bkr3e.ts(17,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpdv3bkr3e.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmpdv3bkr3e.ts(18,7): error TS1109: Expression expected.\n../../../../tmp/tmpdv3bkr3e.ts(20,9): error TS1005: ';' expected.\n",
      "timestamp": 1660333032
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpnj8710rq.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnj8710rq.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return Math.round(sum / 2).toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp8wpcmozw.js:19:12)\n    at Object.<anonymous> (/tmp/tmp8wpcmozw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333028
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpnj8710rq.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnj8710rq.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / n;\n}\n\nconsole.log(rounded_avg(7, 8));\nconsole.log(rounded_avg(7, 9));\nconsole.log(rounded_avg(7, 10));\nconsole.log(rounded_avg(7, 11));\nconsole.log(rounded_avg(7, 12));\nconsole.log(rounded_avg(7, 13));\nconsole.log(rounded_avg(7, 14));\nconsole.log(rounded_avg(7, 15));\nconsole.log(rounded_avg(7, 16));\nconsole.log(rounded_avg(7, 17));\nconsole.log(rounded_avg(7, 18));\nconsole.log(rounded_avg(7, 19));\nconsole.log(rounded_avg(7, 20));\nconsole.log(rounded_avg(7, 21));\nconsole.log(rounded_avg(7, 22));\nconsole.log(rounded_avg(7, 23));\nconsole.log(rounded_avg(7, 24));\nconsole.log(rounded_avg(7, 25));\nconsole.log(rounded_avg(7, 26));\nconsole.log(rounded_avg(7, 27));\nconsole.log(rounded_avg(7, 28));\nconsole.log(rounded_avg(7, 29));\nconsole.log(rounded_avg(7, 30));\nconsole.log(rounded_avg(7, 31));\nconsole.log(rounded_avg(7, 32));\nconsole.log(rounded_avg(7, 33));\nconsole.log(rounded_avg(7, 34));\nconsole.log(rounded_avg(7, 35));\nconsole.log(rounded_avg(7, 36));\nconsole.log(rounded_avg(7, 37));\nconsole.log(rounded_avg(7, 38));\nconsole.log(rounded_avg(7, 39));\nconsole.log(rounded_avg(7, 40));\nconsole.log(rounded_avg(7, 41));\nconsole.log(rounded_avg(7, 42));\nconsole.log(rounded_avg(7, 43));\nconsole.log(rounded_avg(7, 44));\nconsole.log(rounded_avg(7, 45));\nconsole.log(rounded_avg(7, 46));\nconsole.log(rounded_avg(7, 47));\nconsole.log(rounded_avg(7, 48));\nconsole.log(rounded_avg(7, 49));\nconsole.log(rounded_avg(7, 50));\nconsole.log(rounded_avg(7, 51));\nconsole.log(rounded_avg(7, 52));\nconsole.log(rounded_avg(7, 53));\nconsole.log(rounded_avg(7, 54));\nconsole.log(rounded_avg(7, 55));\nconsole.log(rounded_avg(7, 56));\nconsole.log(rounded_avg(7, 57));\nconsole.log(rounded_avg(7, 58));\nconsole.log(rounded_avg(7, 59));\nconsole.log(rounded_avg(7, 60));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp_o4jejav.js:72:12)\n    at Object.<anonymous> (/tmp/tmp_o4jejav.js:85:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n",
      "timestamp": 1660333032
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  return avg.toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmplpcpic2p.js:16:12)\n    at Object.<anonymous> (/tmp/tmplpcpic2p.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333032
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let result = 0;\n    for (let i = n; i <= m; i++) {\n        result += i;\n    }\n    return Math.round(result / m) * m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp4ws3zb2d.js:19:12)\n    at Object.<anonymous> (/tmp/tmp4ws3zb2d.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333032
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpulsli_ql.js:19:12)\n    at Object.<anonymous> (/tmp/tmpulsli_ql.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / m;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpzqk0qgtr.js:19:12)\n    at Object.<anonymous> (/tmp/tmpzqk0qgtr.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333035
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n <= m) return -1;\n    let avg = (n + m) / 2;\n    let bin = avg.toString(2);\n    let result = parseInt(bin, 2);\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,typescript |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0t5wmiwl.ts(13,2): error TS1110: Type expected.\n../../../../tmp/tmp0t5wmiwl.ts(13,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0t5wmiwl.ts(14,2): error TS1109: Expression expected.\n../../../../tmp/tmp0t5wmiwl.ts(14,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0t5wmiwl.ts(15,2): error TS1109: Expression expected.\n../../../../tmp/tmp0t5wmiwl.ts(15,6): error TS1005: ';' expected.\n../../../../tmp/tmp0t5wmiwl.ts(15,34): error TS1109: Expression expected.\n../../../../tmp/tmp0t5wmiwl.ts(17,9): error TS1005: ';' expected.\n",
      "timestamp": 1660333035
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n >= m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / m;\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(7, 7));\nconsole.log(rounded_avg(7, 8));\nconsole.log(rounded_avg(7, 9));\nconsole.log(rounded_avg(7, 10));\nconsole.log(rounded_avg(7, 11));\nconsole.log(rounded_avg(7, 12));\nconsole.log(rounded_avg(7, 13));\nconsole.log(rounded_avg(7, 14));\nconsole.log(rounded_avg(7, 15));\nconsole.log(rounded_avg(7, 16));\nconsole.log(rounded_avg(7, 17));\nconsole.log(rounded_avg(7, 18));\nconsole.log(rounded_avg(7, 19));\nconsole.log(rounded_avg(7, 20));\nconsole.log(rounded_avg(7, 21));\nconsole.log(rounded_avg(7, 22));\nconsole.log(rounded_avg(7, 23));\nconsole.log(rounded_avg(7, 24));\nconsole.log(rounded_avg(7, 25));\nconsole.log(rounded_avg(7, 26));\nconsole.log(rounded_avg(7, 27));\nconsole.log(rounded_avg(7, 28));\nconsole.log(rounded_avg(7, 29));\nconsole.log(rounded_avg(7, 30));\nconsole.log(rounded_avg(7, 31));\nconsole.log(rounded_avg(7, 32));\nconsole.log(rounded_avg(7, 33));\nconsole.log(rounded_avg(7, 34));\nconsole.log(rounded_avg(7, 35));\nconsole.log(rounded_avg(7, 36));\nconsole.log(rounded_avg(7, 37));\nconsole.log(rounded_avg(7, 38));\nconsole.log(rounded_avg(7, 39));\nconsole.log(rounded_avg(7, 40));\nconsole.log(rounded_avg(7, 41));\nconsole.log(rounded_avg(7, 42));\nconsole.log(rounded_avg(7, 43));\nconsole.log(rounded_avg(7, 44));\nconsole.log(rounded_avg(7, 45));\nconsole.log(rounded_avg(7, 46));\nconsole.log(rounded_avg(7, 47));\nconsole.log(rounded_avg(7, 48));\nconsole.log(rounded_avg(7, 49));\nconsole.log(rounded_avg(7, 50));\nconsole.log(rounded_avg(7, 51));\nconsole.log(rounded_avg(7, 52));\nconsole.log(rounded_avg(7, 53));\nconsole.log(rounded_avg(7, 54));\nconsole.log(rounded_avg(7, 55));\nconsole.log(rounded_avg(7, 56));\nconsole.log(rounded_avg(7, 57));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5.384615384615385\n\nshould loosely deep-equal\n\n'0b1010'\n    at test (/tmp/tmpfet7j0dj.js:73:12)\n    at Object.<anonymous> (/tmp/tmpfet7j0dj.js:85:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5.384615384615385,\n  expected: '0b1010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "3\n-1\n-1\n1.875\n2.6666666666666665\n3.4\n4.090909090909091\n4.75\n5.384615384615385\n6\n6.6\n7.1875\n7.764705882352941\n8.333333333333334\n8.894736842105264\n9.45\n10\n10.545454545454545\n11.08695652173913\n11.625\n12.16\n12.692307692307692\n13.222222222222221\n13.75\n14.275862068965518\n14.8\n15.32258064516129\n15.84375\n16.363636363636363\n16.88235294117647\n17.4\n17.916666666666668\n18.43243243243243\n18.94736842105263\n19.46153846153846\n19.975\n20.48780487804878\n21\n21.511627906976745\n22.022727272727273\n22.533333333333335\n23.043478260869566\n23.5531914893617\n24.0625\n24.571428571428573\n25.08\n25.58823529411765\n26.096153846153847\n26.60377358490566\n27.11111111111111\n27.618181818181817\n28.125\n28.63157894736842\n",
      "timestamp": 1660333035
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpqx4iz6ic.js:19:12)\n    at Object.<anonymous> (/tmp/tmpqx4iz6ic.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333035
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = n + (m - n) / 2;\n  return Math.round(avg * Math.pow(10, 2)) / Math.pow(10, 2);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmppgiy139d.js:16:12)\n    at Object.<anonymous> (/tmp/tmppgiy139d.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333035
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp_eu7b48o.js:19:12)\n    at Object.<anonymous> (/tmp/tmp_eu7b48o.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333036
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  const binary = avg.toString(2);\n  return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpao46_3s9.js:17:12)\n    at Object.<anonymous> (/tmp/tmpao46_3s9.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333036
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = n / m;\n  const rounded_avg = Math.round(avg);\n  const binary_avg = binary_to_decimal(rounded_avg);\n  return binary_avg;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprl8dbtag.ts(12,22): error TS2304: Cannot find name 'binary_to_decimal'.\n",
      "timestamp": 1660333035
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  return `${avg}`.padStart(2, '0');\n}\n\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(7, 6));\nconsole.log(rounded_avg(7, 7));\nconsole.log(rounded_avg(7, 8));\nconsole.log(rounded_avg(7, 9));\nconsole.log(rounded_avg(7, 10));\nconsole.log(rounded_avg(7, 11));\nconsole.log(rounded_avg(7, 12));\nconsole.log(rounded_avg(7, 13));\nconsole.log(rounded_avg(7, 14));\nconsole.log(rounded_avg(7, 15));\nconsole.log(rounded_avg(7, 16));\nconsole.log(rounded_avg(7, 17));\nconsole.log(rounded_avg(7, 18));\nconsole.log(rounded_avg(7, 19));\nconsole.log(rounded_avg(7, 20));\nconsole.log(rounded_avg(7, 21));\nconsole.log(rounded_avg(7, 22));\nconsole.log(rounded_avg(7, 23));\nconsole.log(rounded_avg(7, 24));\nconsole.log(rounded_avg(7, 25));\nconsole.log(rounded_avg(7, 26));\nconsole.log(rounded_avg(7, 27));\nconsole.log(rounded_avg(7, 28));\nconsole.log(rounded_avg(7, 29));\nconsole.log(rounded_avg(7, 30));\nconsole.log(rounded_avg(7, 31));\nconsole.log(rounded_avg(7, 32));\nconsole.log(rounded_avg(7, 33));\nconsole.log(rounded_avg(7, 34));\nconsole.log(rounded_avg(7, 35));\nconsole.log(rounded_avg(7, 36));\nconsole.log(rounded_avg(7, 37));\nconsole.log(rounded_avg(7, 38));\nconsole.log(rounded_avg(7, 39));\nconsole.log(rounded_avg(7, 40));\nconsole.log(rounded_avg(7, 41));\nconsole.log(rounded_avg(7, 42));\nconsole.log(rounded_avg(7, 43));\nconsole.log(rounded_avg(7, 44));\nconsole.log(rounded_avg(7, 45));\nconsole.log(rounded_avg(7, 46));\nconsole.log(rounded_avg(7, 47));\nconsole.log(rounded_avg(7, 48));\nconsole.log(rounded_avg(7, 49));\nconsole.log(rounded_avg(7, 50));\nconsole.log(rounded_avg(7, 51));\nconsole.log(rounded_avg(7, 52));\nconsole.log(rounded_avg(7, 53));\nconsole.log(rounded_avg(7, 54));\nconsole.log(rounded_avg(7, 55));\nconsole.log(rounded_avg(7, 56));\nconsole.log(rounded_avg(7, 57));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp51gpbfpk.js:69:12)\n    at Object.<anonymous> (/tmp/tmp51gpbfpk.js:82:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "06\n06\n07\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n",
      "timestamp": 1660333036
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpulsli_ql.js:19:12)\n    at Object.<anonymous> (/tmp/tmpulsli_ql.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp2e2mdlsb.js:18:12)\n    at Object.<anonymous> (/tmp/tmp2e2mdlsb.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333036
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpulsli_ql.js:19:12)\n    at Object.<anonymous> (/tmp/tmpulsli_ql.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpv2hxkiz_.js:19:12)\n    at Object.<anonymous> (/tmp/tmpv2hxkiz_.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333036
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp9h19datb.js:19:12)\n    at Object.<anonymous> (/tmp/tmp9h19datb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = n / m;\n  return Math.round(avg * Math.pow(10, Math.ceil(Math.log10(avg)))) / Math.pow(10, Math.ceil(Math.log10(avg)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpy_fth9h9.js:16:12)\n    at Object.<anonymous> (/tmp/tmpy_fth9h9.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpgco5fcgy.js:18:12)\n    at Object.<anonymous> (/tmp/tmpgco5fcgy.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp9h19datb.js:19:12)\n    at Object.<anonymous> (/tmp/tmp9h19datb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return Math.round(sum / m) * Math.pow(2, 32);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpd1mn4yme.js:19:12)\n    at Object.<anonymous> (/tmp/tmpd1mn4yme.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333036
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return Math.round(sum / 2).toString(2);\n}\n\nconsole.log(rounded_avg(7, 8));\nconsole.log(rounded_avg(8, 7));\nconsole.log(rounded_avg(7, 8));\nconsole.log(rounded_avg(8, 8));\nconsole.log(rounded_avg(9, 9));\nconsole.log(rounded_avg(9, 10));\nconsole.log(rounded_avg(9, 11));\nconsole.log(rounded_avg(9, 12));\nconsole.log(rounded_avg(9, 13));\nconsole.log(rounded_avg(9, 14));\nconsole.log(rounded_avg(9, 15));\nconsole.log(rounded_avg(9, 16));\nconsole.log(rounded_avg(9, 17));\nconsole.log(rounded_avg(9, 18));\nconsole.log(rounded_avg(9, 19));\nconsole.log(rounded_avg(9, 20));\nconsole.log(rounded_avg(9, 21));\nconsole.log(rounded_avg(9, 22));\nconsole.log(rounded_avg(9, 23));\nconsole.log(rounded_avg(9, 24));\nconsole.log(rounded_avg(9, 25));\nconsole.log(rounded_avg(9, 26));\nconsole.log(rounded_avg(9, 27));\nconsole.log(rounded_avg(9, 28));\nconsole.log(rounded_avg(9, 29));\nconsole.log(rounded_avg(9, 30));\nconsole.log(rounded_avg(9, 31));\nconsole.log(rounded_avg(9, 32));\nconsole.log(rounded_avg(9, 33));\nconsole.log(rounded_avg(9, 34));\nconsole.log(rounded_avg(9, 35));\nconsole.log(rounded_avg(9, 36));\nconsole.log(rounded_avg(9, 37));\nconsole.log(rounded_avg(9, 38));\nconsole.log(rounded_avg(9, 39));\nconsole.log(rounded_avg(9, 40));\nconsole.log(rounded_avg(9, 41));\nconsole.log(rounded_avg(9, 42));\nconsole.log(rounded_avg(9, 43));\nconsole.log(rounded_avg(9, 44));\nconsole.log(rounded_avg(9, 45));\nconsole.log(rounded_avg(9, 46));\nconsole.log(rounded_avg(9, 47));\nconsole.log(rounded_avg(9, 48));\nconsole.log(rounded_avg(9, 49));\nconsole.log(rounded_avg(9, 50));\nconsole.log(rounded_avg(9, 51));\nconsole.log(rounded_avg(9, 52));\nconsole.log(rounded_avg(9, 53));\nconsole.log(rounded_avg(9, 54));\nconsole.log(rounded_avg(9, 55));\nconsole.log(rounded_avg(9, 56));\nconsole.log(rounded_avg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplo8u5vzi.ts(70,1): error TS1005: ',' expected.\n../../../../tmp/tmplo8u5vzi.ts(70,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333036
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpulsli_ql.js:19:12)\n    at Object.<anonymous> (/tmp/tmpulsli_ql.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n >= m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp1ocl00a5.js:18:12)\n    at Object.<anonymous> (/tmp/tmp1ocl00a5.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333036
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = n / m;\n  return Math.round(avg * Math.pow(10, 2)) / Math.pow(10, 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpjtqo92q8.js:16:12)\n    at Object.<anonymous> (/tmp/tmpjtqo92q8.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333028
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpb_en8icj.js:19:12)\n    at Object.<anonymous> (/tmp/tmpb_en8icj.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpnj8710rq.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnj8710rq.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpgco5fcgy.js:18:12)\n    at Object.<anonymous> (/tmp/tmpgco5fcgy.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return Math.round(sum / 2);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpg71f65do.js:19:12)\n    at Object.<anonymous> (/tmp/tmpg71f65do.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333036
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n}\n\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(7, 6));\nconsole.log(rounded_avg(7, 7));\nconsole.log(rounded_avg(7, 8));\nconsole.log(rounded_avg(7, 9));\nconsole.log(rounded_avg(7, 10));\nconsole.log(rounded_avg(7, 11));\nconsole.log(rounded_avg(7, 12));\nconsole.log(rounded_avg(7, 13));\nconsole.log(rounded_avg(7, 14));\nconsole.log(rounded_avg(7, 15));\nconsole.log(rounded_avg(7, 16));\nconsole.log(rounded_avg(7, 17));\nconsole.log(rounded_avg(7, 18));\nconsole.log(rounded_avg(7, 19));\nconsole.log(rounded_avg(7, 20));\nconsole.log(rounded_avg(7, 21));\nconsole.log(rounded_avg(7, 22));\nconsole.log(rounded_avg(7, 23));\nconsole.log(rounded_avg(7, 24));\nconsole.log(rounded_avg(7, 25));\nconsole.log(rounded_avg(7, 26));\nconsole.log(rounded_avg(7, 27));\nconsole.log(rounded_avg(7, 28));\nconsole.log(rounded_avg(7, 29));\nconsole.log(rounded_avg(7, 30));\nconsole.log(rounded_avg(7, 31));\nconsole.log(rounded_avg(7, 32));\nconsole.log(rounded_avg(7, 33));\nconsole.log(rounded_avg(7, 34));\nconsole.log(rounded_avg(7, 35));\nconsole.log(rounded_avg(7, 36));\nconsole.log(rounded_avg(7, 37));\nconsole.log(rounded_avg(7, 38));\nconsole.log(rounded_avg(7, 39));\nconsole.log(rounded_avg(7, 40));\nconsole.log(rounded_avg(7, 41));\nconsole.log(rounded_avg(7, 42));\nconsole.log(rounded_avg(7, 43));\nconsole.log(rounded_avg(7, 44));\nconsole.log(rounded_avg(7, 45));\nconsole.log(rounded_avg(7, 46));\nconsole.log(rounded_avg(7, 47));\nconsole.log(rounded_avg(7, 48));\nconsole.log(rounded_avg(7, 49));\nconsole.log(rounded_avg(7, 50));\nconsole.log(rounded_avg(7, 51));\nconsole.log(rounded_avg(7, 52));\nconsole.log(rounded_avg(7, 53));\nconsole.log(rounded_avg(7, 54));\nconsole.log(rounded_avg(7, 55));\nconsole.log(rounded_avg(7, 56));\nconsole.log(rounded_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpa_2auvil.ts(70,1): error TS1005: ',' expected.\n../../../../tmp/tmpa_2auvil.ts(70,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333036
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n <= m) return -1;\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / n;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,algorithm |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplmy48tdr.ts(14,2): error TS1110: Type expected.\n../../../../tmp/tmplmy48tdr.ts(14,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmplmy48tdr.ts(15,2): error TS1109: Expression expected.\n../../../../tmp/tmplmy48tdr.ts(15,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmplmy48tdr.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmplmy48tdr.ts(16,6): error TS1005: ';' expected.\n../../../../tmp/tmplmy48tdr.ts(16,33): error TS1109: Expression expected.\n../../../../tmp/tmplmy48tdr.ts(18,9): error TS1005: ';' expected.\n",
      "timestamp": 1660333036
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp_eu7b48o.js:19:12)\n    at Object.<anonymous> (/tmp/tmp_eu7b48o.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333036
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = n / m;\n  return Math.round(avg * Math.pow(10, Math.ceil(Math.log10(avg)))) / Math.pow(10, Math.ceil(Math.log10(avg)));\n}\n\nconsole.log(rounded_avg(7, 8));\nconsole.log(rounded_avg(7, 9));\nconsole.log(rounded_avg(7, 10));\nconsole.log(rounded_avg(7, 11));\nconsole.log(rounded_avg(7, 12));\nconsole.log(rounded_avg(7, 13));\nconsole.log(rounded_avg(7, 14));\nconsole.log(rounded_avg(7, 15));\nconsole.log(rounded_avg(7, 16));\nconsole.log(rounded_avg(7, 17));\nconsole.log(rounded_avg(7, 18));\nconsole.log(rounded_avg(7, 19));\nconsole.log(rounded_avg(7, 20));\nconsole.log(rounded_avg(7, 21));\nconsole.log(rounded_avg(7, 22));\nconsole.log(rounded_avg(7, 23));\nconsole.log(rounded_avg(7, 24));\nconsole.log(rounded_avg(7, 25));\nconsole.log(rounded_avg(7, 26));\nconsole.log(rounded_avg(7, 27));\nconsole.log(rounded_avg(7, 28));\nconsole.log(rounded_avg(7, 29));\nconsole.log(rounded_avg(7, 30));\nconsole.log(rounded_avg(7, 31));\nconsole.log(rounded_avg(7, 32));\nconsole.log(rounded_avg(7, 33));\nconsole.log(rounded_avg(7, 34));\nconsole.log(rounded_avg(7, 35));\nconsole.log(rounded_avg(7, 36));\nconsole.log(rounded_avg(7, 37));\nconsole.log(rounded_avg(7, 38));\nconsole.log(rounded_avg(7, 39));\nconsole.log(rounded_avg(7, 40));\nconsole.log(rounded_avg(7, 41));\nconsole.log(rounded_avg(7, 42));\nconsole.log(rounded_avg(7, 43));\nconsole.log(rounded_avg(7, 44));\nconsole.log(rounded_avg(7, 45));\nconsole.log(rounded_avg(7, 46));\nconsole.log(rounded_avg(7, 47));\nconsole.log(rounded_avg(7, 48));\nconsole.log(rounded_avg(7, 49));\nconsole.log(rounded_avg(7, 50));\nconsole.log(rounded_avg(7, 51));\nconsole.log(rounded_avg(7, 52));\nconsole.log(rounded_avg(7, 53));\nconsole.log(rounded_avg(7, 54));\nconsole.log(rounded_avg(7, 55));\nconsole.log(rounded_avg(7, 56));\nconsole.log(rounded_avg(7, 57));\nconsole.log(rounded_avg(7, 58));\nconsole.log(rounded_avg(7, 59\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpftqs3njo.ts(66,1): error TS1005: ',' expected.\n../../../../tmp/tmpftqs3njo.ts(66,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333036
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) return -1\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  return Math.round(sum / 2).toString(2)\n}\nrounded_avg(7, 8) // \"11\"\nrounded_avg(7, 9) // -1\nrounded_avg(7, 10) // -1\nrounded_avg(7, 11) // -1\nrounded_avg(7, 12) // -1\nrounded_avg(7, 13) // -1\nrounded_avg(7, 14) // -1\nrounded_avg(7, 15) // -1\nrounded_avg(7, 16) // -1\nrounded_avg(7, 17) // -1\nrounded_avg(7, 18) // -1\nrounded_avg(7, 19) // -1\nrounded_avg(7, 20) // -1\nrounded_avg(7, 21) // -1\nrounded_avg(7, 22) // -1\nrounded_avg(7, 23) // -1\nrounded_avg(7, 24) // -1\nrounded_avg(7, 25) // -1\nrounded_avg(7, 26) // -1\nrounded_avg(7, 27) // -1\nrounded_avg(7, 28) // -1\nrounded_avg(7, 29) // -1\nrounded_avg(7, 30) // -1\nrounded_avg(7, 31) // -1\nrounded_avg(7, 32) // -1\nrounded_avg(7, 33) // -1\nrounded_avg(7, 34) // -1\nrounded_avg(7, 35) // -1\nrounded_avg(7, 36) // -1\nrounded_avg(7, 37) // -1\nrounded_avg(7, 38) // -1\nrounded_avg(7, 39) // -1\nrounded_avg(7, 40) // -1\nrounded_avg(7, 41) // -1\nrounded_avg(7, 42) // -1\nrounded_avg(7, 43) // -1\nrounded_avg(7, 44) // -1\nrounded_avg(7, 45) // -1\nrounded_avg(7, 46) // -1\nrounded_avg(7, 47) // -1\nrounded_avg(7, 48) // -1\nrounded_avg(7, 49) // -1\nrounded_avg(7, 50) // -1\nrounded_avg(7, 51) // -1\nrounded_avg(7, 52) // -1\nrounded_avg(7, 53) // -1\nrounded_avg(7, 54) // -1\nrounded_avg(7, 55) // -1\nrounded_avg(7, 56) // -1\nrounded_avg(7, 57) // -1\nrounded_avg(7, 58) // -1\nrounded_avg(7, 59) // -1\nrounded_avg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpx3efq48d.js:71:12)\n    at Object.<anonymous> (/tmp/tmpx3efq48d.js:84:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333036
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n <= m) {\n        return -1;\n    }\n    let avg = (n + m) / 2;\n    return Math.round(avg * Math.pow(10, 2)) / Math.pow(10, 2);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpmfk_qz8i.js:16:12)\n    at Object.<anonymous> (/tmp/tmpmfk_qz8i.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333036
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) return -1\n  let avg = (n + m) / 2\n  return Math.round(avg * 2) / 2 \n}\nrounded_avg(7, 5)\nrounded_avg(7, 10)\nrounded_avg(7, 15)\nrounded_avg(7, 20)\nrounded_avg(7, 25)\nrounded_avg(7, 30)\nrounded_avg(7, 35)\nrounded_avg(7, 40)\nrounded_avg(7, 45)\nrounded_avg(7, 50)\nrounded_avg(7, 55)\nrounded_avg(7, 60)\nrounded_avg(7, 65)\nrounded_avg(7, 70)\nrounded_avg(7, 75)\nrounded_avg(7, 80)\nrounded_avg(7, 85)\nrounded_avg(7, 90)\nrounded_avg(7, 95)\nrounded_avg(7, 100)\nrounded_avg(7, 105)\nrounded_avg(7, 110)\nrounded_avg(7, 115)\nrounded_avg(7, 120)\nrounded_avg(7, 125)\nrounded_avg(7, 130)\nrounded_avg(7, 135)\nrounded_avg(7, 140)\nrounded_avg(7, 145)\nrounded_avg(7, 150)\nrounded_avg(7, 155)\nrounded_avg(7, 160)\nrounded_avg(7, 165)\nrounded_avg(7, 170)\nrounded_avg(7, 175)\nrounded_avg(7, 180)\nrounded_avg(7, 185)\nrounded_avg(7, 190)\nrounded_avg(7, 195)\nrounded_avg(7, 200)\nrounded_avg(7, 205)\nrounded_avg(7, 210)\nrounded_avg(7, 215)\nrounded_avg(7, 220)\nrounded_avg(7, 225)\nrounded_avg(7, 230)\nrounded_avg(7, 235)\nrounded_avg(7, 240)\nrounded_avg(7, 245)\nrounded_avg(7, 250)\nrounded_avg(7, 255)\nrounded_avg(7, 260)\nrounded_avg(7, 265)\nrounded_avg(7, 270)\nrounded_avg(7, 275)\nrounded_avg(7, 280)\nrounded_avg(7, 285)\nrounded_avg(7, 290)\nrounded_avg(7, 295)\nrounded_avg(7, 300)\nrounded_avg(7, 305)\nrounded_avg(7, 310)\nrounded_avg(7, 315)\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpsvyxos4h.js:78:12)\n    at Object.<anonymous> (/tmp/tmpsvyxos4h.js:91:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333036
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) return -1;\n  let avg = Math.floor((n + m) / 2);\n  return avg.toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpq2sy50d_.js:15:12)\n    at Object.<anonymous> (/tmp/tmpq2sy50d_.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333036
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp5oqmwzp_.js:19:12)\n    at Object.<anonymous> (/tmp/tmp5oqmwzp_.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333029
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n >= m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp1ocl00a5.js:18:12)\n    at Object.<anonymous> (/tmp/tmp1ocl00a5.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333036
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpnj8710rq.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnj8710rq.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) {\n    return -1;\n  }\n  const avg = n + (m - n) / 2;\n  return Math.round(avg * Math.pow(10, 2)) / Math.pow(10, 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp4013vzy6.js:16:12)\n    at Object.<anonymous> (/tmp/tmp4013vzy6.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333036
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpms1sfdfs.js:19:12)\n    at Object.<anonymous> (/tmp/tmpms1sfdfs.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333028
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / n;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpvnuhy_b2.js:19:12)\n    at Object.<anonymous> (/tmp/tmpvnuhy_b2.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333038
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpmx3t_9zr.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmx3t_9zr.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333029
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2) / 2;\n}\nrounded_avg(7, 5); // 3\nrounded_avg(7, 6); // -1\nrounded_avg(7, 7); // -1\nrounded_avg(7, 8); // -1\nrounded_avg(7, 9); // -1\nrounded_avg(7, 10); // -1\nrounded_avg(7, 11); // -1\nrounded_avg(7, 12); // -1\nrounded_avg(7, 13); // -1\nrounded_avg(7, 14); // -1\nrounded_avg(7, 15); // -1\nrounded_avg(7, 16); // -1\nrounded_avg(7, 17); // -1\nrounded_avg(7, 18); // -1\nrounded_avg(7, 19); // -1\nrounded_avg(7, 20); // -1\nrounded_avg(7, 21); // -1\nrounded_avg(7, 22); // -1\nrounded_avg(7, 23); // -1\nrounded_avg(7, 24); // -1\nrounded_avg(7, 25); // -1\nrounded_avg(7, 26); // -1\nrounded_avg(7, 27); // -1\nrounded_avg(7, 28); // -1\nrounded_avg(7, 29); // -1\nrounded_avg(7, 30); // -1\nrounded_avg(7, 31); // -1\nrounded_avg(7, 32); // -1\nrounded_avg(7, 33); // -1\nrounded_avg(7, 34); // -1\nrounded_avg(7, 35); // -1\nrounded_avg(7, 36); // -1\nrounded_avg(7, 37); // -1\nrounded_avg(7, 38); // -1\nrounded_avg(7, 39); // -1\nrounded_avg(7, 40); // -1\nrounded_avg(7, 41); // -1\nrounded_avg(7, 42); // -1\nrounded_avg(7, 43); // -1\nrounded_avg(7, 44); // -1\nrounded_avg(7, 45); // -1\nrounded_avg(7, 46); // -1\nrounded_avg(7, 47); // -1\nrounded_avg(7, 48); // -1\nrounded_avg(7, 49); // -1\nrounded_avg(7, 50); // -1\nrounded_avg(7, 51); // -1\nrounded_avg(7, 52); // -1\nrounded_avg(7, 53); // -1\nrounded_avg(7, 54); // -1\nrounded_avg(7, 55); // -1\nrounded_avg(7, 56); // -1\nrounded_avg(7, 57\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwim3lxyr.ts(69,1): error TS1005: ',' expected.\n../../../../tmp/tmpwim3lxyr.ts(69,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333039
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpulsli_ql.js:19:12)\n    at Object.<anonymous> (/tmp/tmpulsli_ql.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return Math.round(sum / 2).toString(2);\n}\n</code>\n<|/ a tags=javascript,typescript |>\n<| a tags=javascript,typescript |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkjijo8vo.ts(16,2): error TS1110: Type expected.\n../../../../tmp/tmpkjijo8vo.ts(16,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpkjijo8vo.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmpkjijo8vo.ts(17,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpkjijo8vo.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmpkjijo8vo.ts(18,6): error TS1005: ';' expected.\n../../../../tmp/tmpkjijo8vo.ts(18,34): error TS1109: Expression expected.\n../../../../tmp/tmpkjijo8vo.ts(20,9): error TS1005: ';' expected.\n",
      "timestamp": 1660333038
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpms1sfdfs.js:19:12)\n    at Object.<anonymous> (/tmp/tmpms1sfdfs.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333028
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpnj8710rq.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnj8710rq.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let avg = (n + m) / 2;\n    let bin = avg.toString(2);\n    let res = parseInt(bin, 2);\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmprcrle06o.js:18:12)\n    at Object.<anonymous> (/tmp/tmprcrle06o.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333039
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  return toBinary(avg);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp20tp91r2.ts(11,10): error TS2304: Cannot find name 'toBinary'.\n",
      "timestamp": 1660333028
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return Math.round(sum / 2).toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp8wpcmozw.js:19:12)\n    at Object.<anonymous> (/tmp/tmp8wpcmozw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333028
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpnj8710rq.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnj8710rq.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n >= m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / m;\n}\n\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(7, 6));\nconsole.log(rounded_avg(7, 7));\nconsole.log(rounded_avg(7, 8));\nconsole.log(rounded_avg(7, 9));\nconsole.log(rounded_avg(7, 10));\nconsole.log(rounded_avg(7, 11));\nconsole.log(rounded_avg(7, 12));\nconsole.log(rounded_avg(7, 13));\nconsole.log(rounded_avg(7, 14));\nconsole.log(rounded_avg(7, 15));\nconsole.log(rounded_avg(7, 16));\nconsole.log(rounded_avg(7, 17));\nconsole.log(rounded_avg(7, 18));\nconsole.log(rounded_avg(7, 19));\nconsole.log(rounded_avg(7, 20));\nconsole.log(rounded_avg(7, 21));\nconsole.log(rounded_avg(7, 22));\nconsole.log(rounded_avg(7, 23));\nconsole.log(rounded_avg(7, 24));\nconsole.log(rounded_avg(7, 25));\nconsole.log(rounded_avg(7, 26));\nconsole.log(rounded_avg(7, 27));\nconsole.log(rounded_avg(7, 28));\nconsole.log(rounded_avg(7, 29));\nconsole.log(rounded_avg(7, 30));\nconsole.log(rounded_avg(7, 31));\nconsole.log(rounded_avg(7, 32));\nconsole.log(rounded_avg(7, 33));\nconsole.log(rounded_avg(7, 34));\nconsole.log(rounded_avg(7, 35));\nconsole.log(rounded_avg(7, 36));\nconsole.log(rounded_avg(7, 37));\nconsole.log(rounded_avg(7, 38));\nconsole.log(rounded_avg(7, 39));\nconsole.log(rounded_avg(7, 40));\nconsole.log(rounded_avg(7, 41));\nconsole.log(rounded_avg(7, 42));\nconsole.log(rounded_avg(7, 43));\nconsole.log(rounded_avg(7, 44));\nconsole.log(rounded_avg(7, 45));\nconsole.log(rounded_avg(7, 46));\nconsole.log(rounded_avg(7, 47));\nconsole.log(rounded_avg(7, 48));\nconsole.log(rounded_avg(7, 49));\nconsole.log(rounded_avg(7, 50));\nconsole.log(rounded_avg(7, 51));\nconsole.log(rounded_avg(7, 52));\nconsole.log(rounded_avg(7, 53));\nconsole.log(rounded_avg(7, 54));\nconsole.log(rounded_avg(7, 55));\nconsole.log(rounded_avg(7, 56));\nconsole.log(rounded_avg(7, 57\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpe9kkzqju.ts(70,1): error TS1005: ',' expected.\n../../../../tmp/tmpe9kkzqju.ts(70,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333039
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  return toBinary(avg);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp20tp91r2.ts(11,10): error TS2304: Cannot find name 'toBinary'.\n",
      "timestamp": 1660333028
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = n / m;\n  const rounded = Math.round(avg);\n  return rounded * Math.pow(2, 32) + '';\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp2qjwk4zk.js:17:12)\n    at Object.<anonymous> (/tmp/tmp2qjwk4zk.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333039
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  return bin(avg);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgmnwllym.ts(11,10): error TS2304: Cannot find name 'bin'.\n",
      "timestamp": 1660333028
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp2e2mdlsb.js:18:12)\n    at Object.<anonymous> (/tmp/tmp2e2mdlsb.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333036
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpms1sfdfs.js:19:12)\n    at Object.<anonymous> (/tmp/tmpms1sfdfs.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333028
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n >= m) {\n        return -1;\n    }\n    let result = 0;\n    for (let i = n; i <= m; i++) {\n        result += i;\n    }\n    return Math.round(result / m) * m;\n}\n\nconsole.log(rounded_avg(8, 10));\nconsole.log(rounded_avg(8, 9));\nconsole.log(rounded_avg(8, 8));\nconsole.log(rounded_avg(8, 7));\nconsole.log(rounded_avg(8, 6));\nconsole.log(rounded_avg(8, 5));\nconsole.log(rounded_avg(8, 4));\nconsole.log(rounded_avg(8, 3));\nconsole.log(rounded_avg(8, 2));\nconsole.log(rounded_avg(8, 1));\nconsole.log(rounded_avg(8, 0));\nconsole.log(rounded_avg(9, 0));\nconsole.log(rounded_avg(9, 1));\nconsole.log(rounded_avg(9, 2));\nconsole.log(rounded_avg(9, 3));\nconsole.log(rounded_avg(9, 4));\nconsole.log(rounded_avg(9, 5));\nconsole.log(rounded_avg(9, 6));\nconsole.log(rounded_avg(9, 7));\nconsole.log(rounded_avg(9, 8));\nconsole.log(rounded_avg(9, 9));\nconsole.log(rounded_avg(9, 10));\nconsole.log(rounded_avg(9, 11));\nconsole.log(rounded_avg(9, 12));\nconsole.log(rounded_avg(9, 13));\nconsole.log(rounded_avg(9, 14));\nconsole.log(rounded_avg(9, 15));\nconsole.log(rounded_avg(9, 16));\nconsole.log(rounded_avg(9, 17));\nconsole.log(rounded_avg(9, 18));\nconsole.log(rounded_avg(9, 19));\nconsole.log(rounded_avg(9, 20));\nconsole.log(rounded_avg(9, 21));\nconsole.log(rounded_avg(9, 22));\nconsole.log(rounded_avg(9, 23));\nconsole.log(rounded_avg(9, 24));\nconsole.log(rounded_avg(9, 25));\nconsole.log(rounded_avg(9, 26));\nconsole.log(rounded_avg(9, 27));\nconsole.log(rounded_avg(9, 28));\nconsole.log(rounded_avg(9, 29));\nconsole.log(rounded_avg(9, 30));\nconsole.log(rounded_avg(9, 31));\nconsole.log(rounded_avg(9, 32));\nconsole.log(rounded_avg(9, 33));\nconsole.log(rounded_avg(9, 34));\nconsole.log(rounded_avg(9, 35));\nconsole.log(rounded_avg(9, 36));\nconsole.log(rounded_avg(9, 37));\nconsole.log(rounded_avg(9, 38));\nconsole.log(rounded_avg(9, 39));\nconsole.log(rounded_avg(9, 40));\nconsole.log(rounded_avg(9, 41));\nconsole.log(rounded_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpay_no5st.ts(71,1): error TS1005: ',' expected.\n../../../../tmp/tmpay_no5st.ts(71,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333039
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp9h19datb.js:19:12)\n    at Object.<anonymous> (/tmp/tmp9h19datb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n}\n\nconsole.log(rounded_avg(7, 8));\nconsole.log(rounded_avg(7, 9));\nconsole.log(rounded_avg(7, 10));\nconsole.log(rounded_avg(7, 11));\nconsole.log(rounded_avg(7, 12));\nconsole.log(rounded_avg(7, 13));\nconsole.log(rounded_avg(7, 14));\nconsole.log(rounded_avg(7, 15));\nconsole.log(rounded_avg(7, 16));\nconsole.log(rounded_avg(7, 17));\nconsole.log(rounded_avg(7, 18));\nconsole.log(rounded_avg(7, 19));\nconsole.log(rounded_avg(7, 20));\nconsole.log(rounded_avg(7, 21));\nconsole.log(rounded_avg(7, 22));\nconsole.log(rounded_avg(7, 23));\nconsole.log(rounded_avg(7, 24));\nconsole.log(rounded_avg(7, 25));\nconsole.log(rounded_avg(7, 26));\nconsole.log(rounded_avg(7, 27));\nconsole.log(rounded_avg(7, 28));\nconsole.log(rounded_avg(7, 29));\nconsole.log(rounded_avg(7, 30));\nconsole.log(rounded_avg(7, 31));\nconsole.log(rounded_avg(7, 32));\nconsole.log(rounded_avg(7, 33));\nconsole.log(rounded_avg(7, 34));\nconsole.log(rounded_avg(7, 35));\nconsole.log(rounded_avg(7, 36));\nconsole.log(rounded_avg(7, 37));\nconsole.log(rounded_avg(7, 38));\nconsole.log(rounded_avg(7, 39));\nconsole.log(rounded_avg(7, 40));\nconsole.log(rounded_avg(7, 41));\nconsole.log(rounded_avg(7, 42));\nconsole.log(rounded_avg(7, 43));\nconsole.log(rounded_avg(7, 44));\nconsole.log(rounded_avg(7, 45));\nconsole.log(rounded_avg(7, 46));\nconsole.log(rounded_avg(7, 47));\nconsole.log(rounded_avg(7, 48));\nconsole.log(rounded_avg(7, 49));\nconsole.log(rounded_avg(7, 50));\nconsole.log(rounded_avg(7, 51));\nconsole.log(rounded_avg(7, 52));\nconsole.log(rounded_avg(7, 53));\nconsole.log(rounded_avg(7, 54));\nconsole.log(rounded_avg(7, 55));\nconsole.log(rounded_avg(7, 56));\nconsole.log(rounded_avg(7, 57));\nconsole.log(rounded_avg(7, 58));\nconsole.log(rounded_avg(7, 59));\nconsole.log(rounded_avg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpn85ie7ll.ts(70,1): error TS1005: ',' expected.\n../../../../tmp/tmpn85ie7ll.ts(70,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333039
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp9h19datb.js:19:12)\n    at Object.<anonymous> (/tmp/tmp9h19datb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpc6bv4pc8.js:19:12)\n    at Object.<anonymous> (/tmp/tmpc6bv4pc8.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333032
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  return toBinary(avg);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqduemldb.ts(11,10): error TS2304: Cannot find name 'toBinary'.\n",
      "timestamp": 1660333039
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpb_en8icj.js:19:12)\n    at Object.<anonymous> (/tmp/tmpb_en8icj.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) {\n    return -1\n  }\n  let avg = (n + m) / 2\n  let rounded = Math.round(avg)\n  let binary = bin(rounded)\n  return binary\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpw3fyva3b.ts(12,16): error TS2304: Cannot find name 'bin'.\n",
      "timestamp": 1660333039
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpulsli_ql.js:19:12)\n    at Object.<anonymous> (/tmp/tmpulsli_ql.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = n / (m + 1);\n  return Math.round(avg * Math.pow(10, 2)) / Math.pow(10, 2);\n}\n\nconsole.log(rounded_avg(7, 3)); // 4\nconsole.log(rounded_avg(7, 4)); // -1\nconsole.log(rounded_avg(7, 5)); // -1\nconsole.log(rounded_avg(7, 6)); // -1\nconsole.log(rounded_avg(7, 7)); // -1\nconsole.log(rounded_avg(7, 8)); // -1\nconsole.log(rounded_avg(7, 9)); // -1\nconsole.log(rounded_avg(7, 10)); // -1\nconsole.log(rounded_avg(7, 11)); // -1\nconsole.log(rounded_avg(7, 12)); // -1\nconsole.log(rounded_avg(7, 13)); // -1\nconsole.log(rounded_avg(7, 14)); // -1\nconsole.log(rounded_avg(7, 15)); // -1\nconsole.log(rounded_avg(7, 16)); // -1\nconsole.log(rounded_avg(7, 17)); // -1\nconsole.log(rounded_avg(7, 18)); // -1\nconsole.log(rounded_avg(7, 19)); // -1\nconsole.log(rounded_avg(7, 20)); // -1\nconsole.log(rounded_avg(7, 21)); // -1\nconsole.log(rounded_avg(7, 22)); // -1\nconsole.log(rounded_avg(7, 23)); // -1\nconsole.log(rounded_avg(7, 24)); // -1\nconsole.log(rounded_avg(7, 25)); // -1\nconsole.log(rounded_avg(7, 26)); // -1\nconsole.log(rounded_avg(7, 27)); // -1\nconsole.log(rounded_avg(7, 28)); // -1\nconsole.log(rounded_avg(7, 29)); // -1\nconsole.log(rounded_avg(7, 30)); // -1\nconsole.log(rounded_avg(7, 31)); // -1\nconsole.log(rounded_avg(7, 32)); // -1\nconsole.log(rounded_avg(7, 33)); // -1\nconsole.log(rounded_avg(7, 34)); // -1\nconsole.log(rounded_avg(7, 35)); // -1\nconsole.log(rounded_avg(7, 36)); // -1\nconsole.log(rounded_avg(7, 37)); // -1\nconsole.log(rounded_avg(7, 38)); // -1\nconsole.log(rounded_avg(7, 39)); // -1\nconsole.log(rounded_avg(7, 40)); // -1\nconsole.log(rounded_avg(7, 41)); // -1\nconsole.log(rounded_avg(7, 42)); // -1\nconsole.log(rounded_avg(7, 43)); // -1\nconsole.log(rounded_avg(7, 44)); // -1\nconsole.log(rounded_avg(7, 45)); // -1\nconsole.log(rounded_avg(7, 46)); // -1\nconsole.log(rounded_avg(7, 47)); // -1\nconsole.log(rounded_avg(7, 48)); // \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp5d8yumqa.js:62:12)\n    at Object.<anonymous> (/tmp/tmp5d8yumqa.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "1.75\n1.4\n1.17\n1\n0.88\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n",
      "timestamp": 1660333039
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) return -1;\n  return Math.round((n + m) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmptwevz0_m.js:14:12)\n    at Object.<anonymous> (/tmp/tmptwevz0_m.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333039
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpms1sfdfs.js:19:12)\n    at Object.<anonymous> (/tmp/tmpms1sfdfs.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333028
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return Math.round(sum / 2).toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp8wpcmozw.js:19:12)\n    at Object.<anonymous> (/tmp/tmp8wpcmozw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333028
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp5oqmwzp_.js:19:12)\n    at Object.<anonymous> (/tmp/tmp5oqmwzp_.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333029
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return Math.round(sum / 2).toString(2);\n}\n</code>\n<|/ a tags=javascript,typescript |>\n<| a tags=javascript,typescript |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkjijo8vo.ts(16,2): error TS1110: Type expected.\n../../../../tmp/tmpkjijo8vo.ts(16,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpkjijo8vo.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmpkjijo8vo.ts(17,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpkjijo8vo.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmpkjijo8vo.ts(18,6): error TS1005: ';' expected.\n../../../../tmp/tmpkjijo8vo.ts(18,34): error TS1109: Expression expected.\n../../../../tmp/tmpkjijo8vo.ts(20,9): error TS1005: ';' expected.\n",
      "timestamp": 1660333038
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return Math.round(sum / 2).toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp8wpcmozw.js:19:12)\n    at Object.<anonymous> (/tmp/tmp8wpcmozw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333028
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpnj8710rq.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnj8710rq.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpmx3t_9zr.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmx3t_9zr.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333029
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp5oqmwzp_.js:19:12)\n    at Object.<anonymous> (/tmp/tmp5oqmwzp_.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333029
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp5oqmwzp_.js:19:12)\n    at Object.<anonymous> (/tmp/tmp5oqmwzp_.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333029
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpulsli_ql.js:19:12)\n    at Object.<anonymous> (/tmp/tmpulsli_ql.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  return toBinary(avg);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp20tp91r2.ts(11,10): error TS2304: Cannot find name 'toBinary'.\n",
      "timestamp": 1660333028
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n >= m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  return `${avg}`.padStart(m, '0');\n}\n\nconsole.log(rounded_avg(7, 6));\nconsole.log(rounded_avg(7, 7));\nconsole.log(rounded_avg(7, 8));\nconsole.log(rounded_avg(7, 9));\nconsole.log(rounded_avg(7, 10));\nconsole.log(rounded_avg(7, 11));\nconsole.log(rounded_avg(7, 12));\nconsole.log(rounded_avg(7, 13));\nconsole.log(rounded_avg(7, 14));\nconsole.log(rounded_avg(7, 15));\nconsole.log(rounded_avg(7, 16));\nconsole.log(rounded_avg(7, 17));\nconsole.log(rounded_avg(7, 18));\nconsole.log(rounded_avg(7, 19));\nconsole.log(rounded_avg(7, 20));\nconsole.log(rounded_avg(7, 21));\nconsole.log(rounded_avg(7, 22));\nconsole.log(rounded_avg(7, 23));\nconsole.log(rounded_avg(7, 24));\nconsole.log(rounded_avg(7, 25));\nconsole.log(rounded_avg(7, 26));\nconsole.log(rounded_avg(7, 27));\nconsole.log(rounded_avg(7, 28));\nconsole.log(rounded_avg(7, 29));\nconsole.log(rounded_avg(7, 30));\nconsole.log(rounded_avg(7, 31));\nconsole.log(rounded_avg(7, 32));\nconsole.log(rounded_avg(7, 33));\nconsole.log(rounded_avg(7, 34));\nconsole.log(rounded_avg(7, 35));\nconsole.log(rounded_avg(7, 36));\nconsole.log(rounded_avg(7, 37));\nconsole.log(rounded_avg(7, 38));\nconsole.log(rounded_avg(7, 39));\nconsole.log(rounded_avg(7, 40));\nconsole.log(rounded_avg(7, 41));\nconsole.log(rounded_avg(7, 42));\nconsole.log(rounded_avg(7, 43));\nconsole.log(rounded_avg(7, 44));\nconsole.log(rounded_avg(7, 45));\nconsole.log(rounded_avg(7, 46));\nconsole.log(rounded_avg(7, 47));\nconsole.log(rounded_avg(7, 48));\nconsole.log(rounded_avg(7, 49));\nconsole.log(rounded_avg(7, 50));\nconsole.log(rounded_avg(7, 51));\nconsole.log(rounded_avg(7, 52));\nconsole.log(rounded_avg(7, 53));\nconsole.log(rounded_avg(7, 54));\nconsole.log(rounded_avg(7, 55));\nconsole.log(rounded_avg(7, 56));\nconsole.log(rounded_avg(7, 57));\nconsole.log(rounded_avg(7, 58\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbnm01oc7.ts(67,1): error TS1005: ',' expected.\n../../../../tmp/tmpbnm01oc7.ts(67,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333039
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n >= m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpc36rskb3.js:19:12)\n    at Object.<anonymous> (/tmp/tmpc36rskb3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333039
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp_eu7b48o.js:19:12)\n    at Object.<anonymous> (/tmp/tmp_eu7b48o.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333036
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp9h19datb.js:19:12)\n    at Object.<anonymous> (/tmp/tmp9h19datb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  const binary = avg.toString(2);\n  return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpao46_3s9.js:17:12)\n    at Object.<anonymous> (/tmp/tmpao46_3s9.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333036
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n <= m) {\n        return -1\n    }\n    let sum = 0\n    for (let i = n; i <= m; i++) {\n        sum += i\n    }\n    return Math.round(sum / 2).toString(2)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpwea6fpp9.js:19:12)\n    at Object.<anonymous> (/tmp/tmpwea6fpp9.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333039
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = n + (m - n) / 2;\n  return Math.round(avg * Math.pow(10, 2)) / Math.pow(10, 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp9neoip3k.js:16:12)\n    at Object.<anonymous> (/tmp/tmp9neoip3k.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333032
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  return avg === n ? avg : rounded_avg(avg, m);\n}\n\nconsole.log(rounded_avg(7, 8));\nconsole.log(rounded_avg(7, 9));\nconsole.log(rounded_avg(7, 10));\nconsole.log(rounded_avg(7, 11));\nconsole.log(rounded_avg(7, 12));\nconsole.log(rounded_avg(7, 13));\nconsole.log(rounded_avg(7, 14));\nconsole.log(rounded_avg(7, 15));\nconsole.log(rounded_avg(7, 16));\nconsole.log(rounded_avg(7, 17));\nconsole.log(rounded_avg(7, 18));\nconsole.log(rounded_avg(7, 19));\nconsole.log(rounded_avg(7, 20));\nconsole.log(rounded_avg(7, 21));\nconsole.log(rounded_avg(7, 22));\nconsole.log(rounded_avg(7, 23));\nconsole.log(rounded_avg(7, 24));\nconsole.log(rounded_avg(7, 25));\nconsole.log(rounded_avg(7, 26));\nconsole.log(rounded_avg(7, 27));\nconsole.log(rounded_avg(7, 28));\nconsole.log(rounded_avg(7, 29));\nconsole.log(rounded_avg(7, 30));\nconsole.log(rounded_avg(7, 31));\nconsole.log(rounded_avg(7, 32));\nconsole.log(rounded_avg(7, 33));\nconsole.log(rounded_avg(7, 34));\nconsole.log(rounded_avg(7, 35));\nconsole.log(rounded_avg(7, 36));\nconsole.log(rounded_avg(7, 37));\nconsole.log(rounded_avg(7, 38));\nconsole.log(rounded_avg(7, 39));\nconsole.log(rounded_avg(7, 40));\nconsole.log(rounded_avg(7, 41));\nconsole.log(rounded_avg(7, 42));\nconsole.log(rounded_avg(7, 43));\nconsole.log(rounded_avg(7, 44));\nconsole.log(rounded_avg(7, 45));\nconsole.log(rounded_avg(7, 46));\nconsole.log(rounded_avg(7, 47));\nconsole.log(rounded_avg(7, 48));\nconsole.log(rounded_avg(7, 49));\nconsole.log(rounded_avg(7, 50));\nconsole.log(rounded_avg(7, 51));\nconsole.log(rounded_avg(7, 52));\nconsole.log(rounded_avg(7, 53));\nconsole.log(rounded_avg(7, 54));\nconsole.log(rounded_avg(7, 55));\nconsole.log(rounded_avg(7, 56));\nconsole.log(rounded_avg(7, 57));\nconsole.log(rounded_avg(7, 58));\nconsole.log(rounded_avg(7, 59));\nconsole.log(rounded_avg(7, 60));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpqhdb7wac.js:68:12)\n    at Object.<anonymous> (/tmp/tmpqhdb7wac.js:81:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n",
      "timestamp": 1660333039
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpnj8710rq.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnj8710rq.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpulsli_ql.js:19:12)\n    at Object.<anonymous> (/tmp/tmpulsli_ql.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpnj8710rq.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnj8710rq.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let avg = (n + m) / 2;\n    let result = Math.round(avg * Math.pow(10, Math.ceil(Math.log10(avg))));\n    let binary = result.toString(2);\n    let decimal = binary.length - 1;\n    let decimalString = binary.substring(decimal);\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimalString.length;\n    let decimalStringLength = decimal\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpk_5feb0m.ts(92,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333039
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpc6bv4pc8.js:19:12)\n    at Object.<anonymous> (/tmp/tmpc6bv4pc8.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333032
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return Math.round(sum / 2).toString(2);\n}\n\nconsole.log(rounded_avg(6, 10));\nconsole.log(rounded_avg(7, 10));\nconsole.log(rounded_avg(8, 10));\nconsole.log(rounded_avg(9, 10));\nconsole.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(11, 10));\nconsole.log(rounded_avg(12, 10));\nconsole.log(rounded_avg(13, 10));\nconsole.log(rounded_avg(14, 10));\nconsole.log(rounded_avg(15, 10));\nconsole.log(rounded_avg(16, 10));\nconsole.log(rounded_avg(17, 10));\nconsole.log(rounded_avg(18, 10));\nconsole.log(rounded_avg(19, 10));\nconsole.log(rounded_avg(20, 10));\nconsole.log(rounded_avg(21, 10));\nconsole.log(rounded_avg(22, 10));\nconsole.log(rounded_avg(23, 10));\nconsole.log(rounded_avg(24, 10));\nconsole.log(rounded_avg(25, 10));\nconsole.log(rounded_avg(26, 10));\nconsole.log(rounded_avg(27, 10));\nconsole.log(rounded_avg(28, 10));\nconsole.log(rounded_avg(29, 10));\nconsole.log(rounded_avg(30, 10));\nconsole.log(rounded_avg(31, 10));\nconsole.log(rounded_avg(32, 10));\nconsole.log(rounded_avg(33, 10));\nconsole.log(rounded_avg(34, 10));\nconsole.log(rounded_avg(35, 10));\nconsole.log(rounded_avg(36, 10));\nconsole.log(rounded_avg(37, 10));\nconsole.log(rounded_avg(38, 10));\nconsole.log(rounded_avg(39, 10));\nconsole.log(rounded_avg(40, 10));\nconsole.log(rounded_avg(41, 10));\nconsole.log(rounded_avg(42, 10));\nconsole.log(rounded_avg(43, 10));\nconsole.log(rounded_avg(44, 10));\nconsole.log(rounded_avg(45, 10));\nconsole.log(rounded_avg(46, 10));\nconsole.log(rounded_avg(47, 10));\nconsole.log(rounded_avg(48, 10));\nconsole.log(rounded_avg(49, 10));\nconsole.log(rounded_avg(50, 10));\nconsole.log(rounded_avg(51, 10));\nconsole.log(rounded_avg(52, 10));\nconsole.log(rounded_avg(53, 10));\nconsole.log(rounded_avg(54, 10));\nconsole.log(rounded_avg(55, 10));\nconsole.log(rounded_avg(56, 10));\nconsole.log(rounded_avg(57, 10));\nconsole.log(rounded_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxxhdmhhq.ts(70,1): error TS1005: ',' expected.\n../../../../tmp/tmpxxhdmhhq.ts(70,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333039
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpulsli_ql.js:19:12)\n    at Object.<anonymous> (/tmp/tmpulsli_ql.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  return avg.toString(2);\n}\n\nconsole.log(rounded_avg(7, 8));\nconsole.log(rounded_avg(8, 7));\nconsole.log(rounded_avg(7, 9));\nconsole.log(rounded_avg(8, 9));\nconsole.log(rounded_avg(9, 8));\nconsole.log(rounded_avg(9, 9));\nconsole.log(rounded_avg(9, 10));\nconsole.log(rounded_avg(9, 11));\nconsole.log(rounded_avg(9, 12));\nconsole.log(rounded_avg(9, 13));\nconsole.log(rounded_avg(9, 14));\nconsole.log(rounded_avg(9, 15));\nconsole.log(rounded_avg(9, 16));\nconsole.log(rounded_avg(9, 17));\nconsole.log(rounded_avg(9, 18));\nconsole.log(rounded_avg(9, 19));\nconsole.log(rounded_avg(9, 20));\nconsole.log(rounded_avg(9, 21));\nconsole.log(rounded_avg(9, 22));\nconsole.log(rounded_avg(9, 23));\nconsole.log(rounded_avg(9, 24));\nconsole.log(rounded_avg(9, 25));\nconsole.log(rounded_avg(9, 26));\nconsole.log(rounded_avg(9, 27));\nconsole.log(rounded_avg(9, 28));\nconsole.log(rounded_avg(9, 29));\nconsole.log(rounded_avg(9, 30));\nconsole.log(rounded_avg(9, 31));\nconsole.log(rounded_avg(9, 32));\nconsole.log(rounded_avg(9, 33));\nconsole.log(rounded_avg(9, 34));\nconsole.log(rounded_avg(9, 35));\nconsole.log(rounded_avg(9, 36));\nconsole.log(rounded_avg(9, 37));\nconsole.log(rounded_avg(9, 38));\nconsole.log(rounded_avg(9, 39));\nconsole.log(rounded_avg(9, 40));\nconsole.log(rounded_avg(9, 41));\nconsole.log(rounded_avg(9, 42));\nconsole.log(rounded_avg(9, 43));\nconsole.log(rounded_avg(9, 44));\nconsole.log(rounded_avg(9, 45));\nconsole.log(rounded_avg(9, 46));\nconsole.log(rounded_avg(9, 47));\nconsole.log(rounded_avg(9, 48));\nconsole.log(rounded_avg(9, 49));\nconsole.log(rounded_avg(9, 50));\nconsole.log(rounded_avg(9, 51));\nconsole.log(rounded_avg(9, 52));\nconsole.log(rounded_avg(9, 53));\nconsole.log(rounded_avg(9, 54));\nconsole.log(rounded_avg(9, 55));\nconsole.log(rounded_avg(9, 56));\nconsole.log(rounded_avg(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplgsnm1nw.ts(68,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333039
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpnj8710rq.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnj8710rq.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return Math.round(sum / m) * m;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,typescript |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3zlj5t5s.ts(16,2): error TS1110: Type expected.\n../../../../tmp/tmp3zlj5t5s.ts(16,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp3zlj5t5s.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmp3zlj5t5s.ts(17,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp3zlj5t5s.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmp3zlj5t5s.ts(18,6): error TS1005: ';' expected.\n../../../../tmp/tmp3zlj5t5s.ts(18,34): error TS1109: Expression expected.\n../../../../tmp/tmp3zlj5t5s.ts(20,9): error TS1005: ';' expected.\n",
      "timestamp": 1660333039
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpgco5fcgy.js:18:12)\n    at Object.<anonymous> (/tmp/tmpgco5fcgy.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) {\n    return -1\n  }\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  return Math.round(sum / 2)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpsu9kscus.js:19:12)\n    at Object.<anonymous> (/tmp/tmpsu9kscus.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333040
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n >= m) {\n    return -1;\n  }\n  const avg = n + (m - n) / 2;\n  return Math.round(avg * Math.pow(10, 2)) / Math.pow(10, 2);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n970.5\n\nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpd6moj00n.js:18:12)\n    at Object.<anonymous> (/tmp/tmpd6moj00n.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 970.5,\n  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333040
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = n / m;\n  return Math.round(avg * Math.pow(10, Math.floor(Math.log(avg) / Math.LN10))) / Math.pow(10, Math.floor(Math.log(avg) / Math.LN10));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp0jlis36l.js:16:12)\n    at Object.<anonymous> (/tmp/tmp0jlis36l.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333029
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = n + (m / 2);\n  return Math.trunc(avg * 2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpv7dzumtp.js:16:12)\n    at Object.<anonymous> (/tmp/tmpv7dzumtp.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333040
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n < m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  return avg.toString(2);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpq1l6a1dy.js:16:12)\n    at Object.<anonymous> (/tmp/tmpq1l6a1dy.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333041
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / m;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpzqk0qgtr.js:19:12)\n    at Object.<anonymous> (/tmp/tmpzqk0qgtr.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333035
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n <= m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  return toBinary(avg);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqduemldb.ts(11,10): error TS2304: Cannot find name 'toBinary'.\n",
      "timestamp": 1660333039
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpnj8710rq.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnj8710rq.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333025
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n <= m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / 2;\n}\n</code>\n<|/ a tags=javascript,typescript |>\n<| c |>\nThis doesn't round the average.\n<|/ c |>\n<| c |>\nThe question asks for the average of the integers from n through m, not n and m. Your code doesn't do that.\n<|/ c |>\n<| c |>\nThe question asks for the average of the integers from n through m, not n and m. Your code doesn't do that.\n<|/ c |>\n<| c |>\nI didn't see that requirement, thanks for pointing it out. I edited my answer to include a solution that rounds the average.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpp_s63g_k.ts(16,2): error TS1110: Type expected.\n../../../../tmp/tmpp_s63g_k.ts(16,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpp_s63g_k.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmpp_s63g_k.ts(17,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpp_s63g_k.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmpp_s63g_k.ts(18,7): error TS1109: Expression expected.\n../../../../tmp/tmpp_s63g_k.ts(19,6): error TS1005: ';' expected.\n../../../../tmp/tmpp_s63g_k.ts(19,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpp_s63g_k.ts(19,32): error TS1002: Unterminated string literal.\n../../../../tmp/tmpp_s63g_k.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmpp_s63g_k.ts(20,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpp_s63g_k.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpp_s63g_k.ts(21,7): error TS1109: Expression expected.\n../../",
      "timestamp": 1660333041
    }
  ]
}