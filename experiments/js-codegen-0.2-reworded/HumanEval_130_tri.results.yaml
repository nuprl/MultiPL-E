language: js
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var result = [];\n    if(n ===\
    \ 0){\n        return result;\n    }\n    if(n === 1){\n        result.push(1);\n\
    \        return result;\n    }\n    result.push(1);\n    result.push(1);\n   \
    \ result.push(1);\n    result.push(1);\n    result.push(1);\n    result.push(1);\n\
    \    result.push(1);\n    result.push(1);\n    result.push(1);\n    result.push(1);\n\
    \    result.push(1);\n    result.push(1);\n    result.push(1);\n    result.push(1);\n\
    \    result.push(1);\n    result.push(1);\n    result.push(1);\n    result.push(1);\n\
    \    result.push(1);\n    result.push(1);\n    result.push(1);\n    result.push(1);\n\
    \    result.push(1);\n    result.push(1);\n    result.push(1);\n    result.push(1);\n\
    \    result.push(1);\n    result.push(1);\n    result.push(1);\n    result.push(1);\n\
    \    result.push(1);\n    result.push(1);\n    result.push(1);\n    result.push(1);\n\
    \    result.push(1);\n    result.push(1);\n    result.push(1);\n    result.push(1);\n\
    \    result.push(1);\n    result.push(1);\n    result.push(1);\n    result.push(1);\n\
    \    result.push(1);\n    result.push(1);\n    result.push(1);\n    result.push(1);\n\
    \    result.push(1);\n    result.push(1);\n    result.push(1);\n    result.push(1);\n\
    \    result.push(1);\n    result.push(1);\n    result.push(1);\n    result.push(1);\n\
    \    result.push(1);\n    result.push(1);\n    result.push(1);\n    result.push(1);\n\
    \    result\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxe1_vccx.js:102\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var result = [];\n    if(n ===\
    \ 0){\n        return result;\n    }\n    if(n === 1){\n        result.push(1);\n\
    \        return result;\n    }\n    if(n === 2){\n        result.push(1);\n  \
    \      result.push(2);\n        return result;\n    }\n    result.push(1);\n \
    \   if(n % 2 === 0){\n        result.push(1 + n / 2);\n        result.push(1 +\
    \ n / 2);\n        result.push(1 + n / 2);\n    }else{\n        result.push(1\
    \ + n / 2);\n        result.push(1 + n / 2);\n        result.push(1 + n / 2);\n\
    \        result.push(1 + n / 2);\n        result.push(1 + n / 2);\n    }\n   \
    \ return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2.5,\n\
    \  2.5,\n  2.5,\n  2.5,\n  2.5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n\
    \  2,\n  8\n]\n    at test (/tmp/tmp0um_x50j.js:51:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0um_x50j.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2.5,\
    \ 2.5, 2.5, 2.5, 2.5 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var result = [];\n    if(n ===\
    \ 0){\n        return result;\n    }\n    if(n === 1){\n        result.push(1);\n\
    \        return result;\n    }\n    if(n % 2 === 0){\n        result.push(1);\n\
    \        result.push(n / 2);\n        result.push(tri(n - 2));\n        return\
    \ result;\n    }\n    result.push(1);\n    result.push(n / 2);\n    result.push(tri(n\
    \ - 1));\n    result.push(tri(n - 2));\n    result.push(tri(n + 1));\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1.5,\n\
    \  [\n    1,\n    1,\n    []\n  ],\n  [\n    1\n  ],\n  [\n    1,\n    2,\n  \
    \  [\n      1,\n      1,\n      []\n    ]\n  ]\n]\n\nshould loosely deep-equal\n\
    \n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpf1kcl7z2.js:45:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpf1kcl7z2.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1.5,\
    \ [ 1, 1, [] ], [ 1 ], [ 1, 2, [ 1, 1, [] ] ] ],\n  expected: [ 1, 3, 2, 8 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var result = [];\n    if(n ===\
    \ 0){\n        return result;\n    }\n    result.push(1);\n    if(n === 1){\n\
    \        return result;\n    }\n    result.push(3);\n    if(n === 2){\n      \
    \  return result;\n    }\n    result.push(2);\n    if(n === 3){\n        return\
    \ result;\n    }\n    result.push(8);\n    for(var i = 4; i <= n; i++){\n    \
    \    result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmpca27oqtp.js:46:10)\n    at Object.<anonymous> (/tmp/tmpca27oqtp.js:58:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 2\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var result = [];\n    if(n ===\
    \ 0){\n        return result;\n    }\n    result.push(1);\n    if(n === 1){\n\
    \        return result;\n    }\n    if(n % 2 === 0){\n        result.push(2);\n\
    \        result.push(3);\n        result.push(1);\n        result.push(8);\n \
    \       return result;\n    }\n    result.push(3);\n    result.push(1);\n    result.push(2);\n\
    \    result.push(8);\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  1,\n  2,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n\
    ]\n    at test (/tmp/tmpr38w8ju9.js:45:10)\n    at Object.<anonymous> (/tmp/tmpr38w8ju9.js:57:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 1,\
    \ 2, 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var result = [];\n  if(n === 0){\n\
    \    return result;\n  }\n  if(n === 1){\n    result.push(1);\n    return result;\n\
    \  }\n  result.push(1);\n  result.push(3);\n  if(n % 2 === 0){\n    result.push(2);\n\
    \    result.push(8);\n    for(var i = 3; i < n; i += 2){\n      result.push(result[i\
    \ - 2] + result[i - 1] + result[i]);\n    }\n  }else{\n    result.push(3);\n \
    \   result.push(2);\n    result.push(8);\n    for(var i = 3; i < n; i += 2){\n\
    \      result.push(result[i - 2] + result[i - 1] + result[i]);\n    }\n  }\n \
    \ return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  3,\n  2,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n\
    ]\n    at test (/tmp/tmpvprcr9a7.js:50:10)\n    at Object.<anonymous> (/tmp/tmpvprcr9a7.js:62:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 3,\
    \ 2, 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var result = [];\n    result.push(1);\n\
    \    if(n === 0) return result;\n    if(n === 1) return result;\n    if(n % 2\
    \ === 0) return result.concat(tri(n/2));\n    result.push(tri(n-1).concat(tri(n-2)).concat(tri(n+1)));\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  [\n\
    \    1,\n    1,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\
    \n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp_xemq4nu.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_xemq4nu.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, [ 1,\
    \ 1, 1, 1, 1, 1 ] ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var result = [];\n  if(n === 0){\n\
    \    return result;\n  }\n  if(n === 1){\n    result.push(1);\n    return result;\n\
    \  }\n  result.push(1);\n  result.push(3);\n  if(n % 2 === 0){\n    result.push(2);\n\
    \    result.push(8);\n    result.push(1);\n    result.push(3);\n    result.push(2);\n\
    \    result.push(8);\n    result.push(1);\n    result.push(3);\n    result.push(2);\n\
    \    result.push(8);\n    result.push(1);\n    result.push(3);\n    result.push(2);\n\
    \    result.push(8);\n    result.push(1);\n    result.push(3);\n    result.push(2);\n\
    \    result.push(8);\n    result.push(1);\n    result.push(3);\n    result.push(2);\n\
    \    result.push(8);\n    result.push(1);\n    result.push(3);\n    result.push(2);\n\
    \    result.push(8);\n    result.push(1);\n    result.push(3);\n    result.push(2);\n\
    \    result.push(8);\n    result.push(1);\n    result.push(3);\n    result.push(2);\n\
    \    result.push(8);\n    result.push(1);\n    result.push(3);\n    result.push(2);\n\
    \    result.push(8);\n    result.push(1);\n    result.push(3);\n    result.push(2);\n\
    \    result.push(8);\n    result.push(1);\n    result.push(3);\n    result.push(2);\n\
    \    result.push(8);\n    result.push(1);\n    result.push(3);\n    result.push(2);\n\
    \    result.push(8);\n    result.push(1);\n    result.push(3);\n    result.push(2);\n\
    \    result.push(8);\n    result.push(1);\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpn870p136.js:102\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var result = [];\n    if(n ===\
    \ 0){\n        return result;\n    }\n    if(n === 1){\n        result.push(1);\n\
    \        return result;\n    }\n    if(n % 2 === 0){\n        result.push(1);\n\
    \        result.push(n / 2);\n        result.push(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n        return result;\n    }\n    result.push(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1));\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmptqn_6bdx.js:29\n        result.push(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n                               ^\n\nRangeError: Maximum call stack size\
    \ exceeded\n    at Array.join (<anonymous>)\n    at Array.toString (<anonymous>)\n\
    \    at tri (/tmp/tmptqn_6bdx.js:29:32)\n    at tri (/tmp/tmptqn_6bdx.js:32:17)\n\
    \    at tri (/tmp/tmptqn_6bdx.js:29:47)\n    at tri (/tmp/tmptqn_6bdx.js:32:17)\n\
    \    at tri (/tmp/tmptqn_6bdx.js:29:47)\n    at tri (/tmp/tmptqn_6bdx.js:32:17)\n\
    \    at tri (/tmp/tmptqn_6bdx.js:29:47)\n    at tri (/tmp/tmptqn_6bdx.js:32:17)\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var result = [];\n    if(n ===\
    \ 0){\n        return result;\n    }\n    if(n === 1){\n        result.push(1);\n\
    \        return result;\n    }\n    if(n % 2 === 0){\n        result.push(1);\n\
    \        result.push(n / 2);\n        result.push(tri(n - 2));\n        return\
    \ result;\n    }\n    result.push(1);\n    result.push(n / 2);\n    result.push(tri(n\
    \ - 1));\n    result.push(tri(n - 2));\n    result.push(tri(n + 1));\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1.5,\n\
    \  [\n    1,\n    1,\n    []\n  ],\n  [\n    1\n  ],\n  [\n    1,\n    2,\n  \
    \  [\n      1,\n      1,\n      []\n    ]\n  ]\n]\n\nshould loosely deep-equal\n\
    \n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpf1kcl7z2.js:45:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpf1kcl7z2.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1.5,\
    \ [ 1, 1, [] ], [ 1 ], [ 1, 2, [ 1, 1, [] ] ] ],\n  expected: [ 1, 3, 2, 8 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var result = [];\n    if(n ===\
    \ 0){\n        return result;\n    }\n    result.push(1);\n    if(n === 1){\n\
    \        return result;\n    }\n    if(n % 2 === 0){\n        result.push(1 +\
    \ n / 2);\n        result.push(1 + n / 2);\n        result.push(1 + n / 2);\n\
    \        return result;\n    }\n    result.push(1 + n / 2);\n    result.push(1\
    \ + n / 2);\n    result.push(1 + n / 2);\n    result.push(1 + n / 2);\n    result.push(1\
    \ + n / 2);\n    result.push(1 + n / 2);\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n \
    \ assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2.5,\n\
    \  2.5,\n  2.5,\n  2.5,\n  2.5,\n  2.5\n]\n\nshould loosely deep-equal\n\n[\n\
    \  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp7fots7zg.js:46:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7fots7zg.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n      1,\
    \ 2.5, 2.5,\n    2.5, 2.5, 2.5,\n    2.5\n  ],\n  expected: [ 1, 3, 2, 8 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var result = [];\n    if(n ===\
    \ 0){\n        return result;\n    }\n    if(n === 1){\n        result.push(1);\n\
    \        return result;\n    }\n    if(n % 2 === 0){\n        result.push(1);\n\
    \        result.push(n / 2);\n        result.push(tri(n - 2) + tri(n - 1) + tri(n\
    \ + 1));\n        return result;\n    }\n    result.push(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1));\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpurv3mf5u.js:29\n        result.push(tri(n - 2) + tri(n - 1) + tri(n\
    \ + 1));\n                               ^\n\nRangeError: Maximum call stack size\
    \ exceeded\n    at Array.join (<anonymous>)\n    at Array.toString (<anonymous>)\n\
    \    at tri (/tmp/tmpurv3mf5u.js:29:32)\n    at tri (/tmp/tmpurv3mf5u.js:32:17)\n\
    \    at tri (/tmp/tmpurv3mf5u.js:29:47)\n    at tri (/tmp/tmpurv3mf5u.js:32:17)\n\
    \    at tri (/tmp/tmpurv3mf5u.js:29:47)\n    at tri (/tmp/tmpurv3mf5u.js:32:17)\n\
    \    at tri (/tmp/tmpurv3mf5u.js:29:47)\n    at tri (/tmp/tmpurv3mf5u.js:32:17)\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var result = [];\n    if(n ===\
    \ 0){\n        return result;\n    }\n    if(n === 1){\n        result.push(1);\n\
    \        return result;\n    }\n    if(n === 2){\n        result.push(1);\n  \
    \      result.push(2);\n        return result;\n    }\n    if(n % 2 === 0){\n\
    \        result.push(1);\n        result.push(2);\n        result.push(3);\n \
    \       result.push(1 + (n / 2));\n        return result;\n    }\n    result.push(1);\n\
    \    result.push(2);\n    result.push(3);\n    result.push(1 + (n / 2));\n   \
    \ result.push(1 + (n / 2) + (n / 2));\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  2.5,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n\
    ]\n    at test (/tmp/tmpp5nlt66j.js:51:10)\n    at Object.<anonymous> (/tmp/tmpp5nlt66j.js:63:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 2.5, 4 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var result = [];\n    if(n ===\
    \ 0){\n        return result;\n    }\n    if(n === 1){\n        result.push(1);\n\
    \        return result;\n    }\n    if(n % 2 === 0){\n        result.push(1 +\
    \ n / 2);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n\
    \        result.push(1);\n        result.push(1);\n        result.push(1);\n \
    \       result.push(1);\n        result.push(1);\n        result.push(1);\n  \
    \      result.push(1);\n        result.push(1);\n        result.push(1);\n   \
    \     result.push(1);\n        result.push(1);\n        result.push(1);\n    \
    \    result.push(1);\n        result.push(1);\n        result.push(1);\n     \
    \   result.push(1);\n        result.push(1);\n        result.push(1);\n      \
    \  result.push(1);\n        result.push(1);\n        result.push(1);\n       \
    \ result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n\
    \        result.push(1);\n        result.push(1);\n        result.push(1);\n \
    \       result.push(1);\n        result.push(1);\n        result.push(1);\n  \
    \      result.push(1);\n        result.push(1);\n        result.push(1);\n   \
    \     result.push(1);\n        result.push(1);\n        result.push(1);\n    \
    \    result.push(1);\n        result.push(1);\n        result.push(1);\n     \
    \   result.push(1);\n        result.push(1);\n        result.push(1);\n      \
    \  result.push(1);\n        result.push(1);\n        result.push(1);\n       \
    \ result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n\
    \        result.push(1);\n        result.push(1);\n        result.push\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpa4y7hgak.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var result = [];\n    if(n ===\
    \ 0){\n        return result;\n    }\n    if(n === 1){\n        result.push(1);\n\
    \        return result;\n    }\n    if(n % 2 === 0){\n        result.push(1);\n\
    \        result.push(n / 2);\n        result.push(tri(n - 2));\n        return\
    \ result;\n    }\n    result.push(tri(n - 1));\n    result.push(1);\n    result.push(tri(n\
    \ - 2));\n    result.push(tri(n + 1));\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n \
    \ assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n\
    \    1,\n    []\n  ],\n  1,\n  [\n    1\n  ],\n  [\n    1,\n    2,\n    [\n  \
    \    1,\n      1,\n      []\n    ]\n  ]\n]\n\nshould loosely deep-equal\n\n[\n\
    \  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpm8tvlmou.js:44:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpm8tvlmou.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 1,\
    \ [] ], 1, [ 1 ], [ 1, 2, [ 1, 1, [] ] ] ],\n  expected: [ 1, 3, 2, 8 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var result = [];\n  if(n === 0){\n\
    \    result.push(0);\n    return result;\n  }\n  if(n === 1){\n    result.push(1);\n\
    \    result.push(3);\n    result.push(2);\n    result.push(8);\n    return result;\n\
    \  }\n  result.push(1);\n  result.push(3);\n  result.push(2);\n  result.push(8);\n\
    \  result.push(1 + n / 2);\n  if(n % 2 === 0){\n    result.push(1 + result[n -\
    \ 2] + result[n - 1]);\n  }else{\n    result.push(result[n - 2] + result[n - 1]\
    \ + result[n]);\n  }\n  return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  2,\n  8,\n  2.5,\n  13\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n \
    \ 2,\n  8\n]\n    at test (/tmp/tmphguszrsy.js:47:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphguszrsy.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 2,\
    \ 8, 2.5, 13 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var result = [];\n    if(n ===\
    \ 0){\n        return result;\n    }\n    if(n === 1){\n        result.push(1);\n\
    \        return result;\n    }\n    if(n % 2 === 0){\n        result.push(1 +\
    \ n / 2);\n        result.push(1);\n        result.push(1 + n / 2);\n        return\
    \ result;\n    }\n    result.push(1);\n    result.push(1 + n / 2);\n    result.push(1\
    \ + n / 2);\n    result.push(1 + n / 2);\n    result.push(1 + n / 2);\n    result.push(1\
    \ + n / 2);\n    result.push(1 + n / 2);\n    result.push(1 + n / 2);\n    result.push(1\
    \ + n / 2);\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2.5,\n\
    \  2.5,\n  2.5,\n  2.5,\n  2.5,\n  2.5,\n  2.5,\n  2.5\n]\n\nshould loosely deep-equal\n\
    \n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpkj3oxpej.js:49:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpkj3oxpej.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n      1,\
    \ 2.5, 2.5, 2.5,\n    2.5, 2.5, 2.5, 2.5,\n    2.5\n  ],\n  expected: [ 1, 3,\
    \ 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var result = [];\n    if(n ===\
    \ 0){\n        result.push(0);\n        return result;\n    }\n    if(n === 1){\n\
    \        result.push(1);\n        result.push(3);\n        result.push(2);\n \
    \       result.push(8);\n        return result;\n    }\n    result.push(1);\n\
    \    result.push(3);\n    result.push(2);\n    result.push(8);\n    if(n % 2 ===\
    \ 0){\n        result.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    }else{\n\
    \        result.push(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1));\n   \
    \ }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz96zn2ue.js:35\n        result.push(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n                               ^\n\nRangeError: Maximum call stack size\
    \ exceeded\n    at Array.join (<anonymous>)\n    at Array.toString (<anonymous>)\n\
    \    at tri (/tmp/tmpz96zn2ue.js:35:32)\n    at tri (/tmp/tmpz96zn2ue.js:37:21)\n\
    \    at tri (/tmp/tmpz96zn2ue.js:35:47)\n    at tri (/tmp/tmpz96zn2ue.js:37:21)\n\
    \    at tri (/tmp/tmpz96zn2ue.js:35:47)\n    at tri (/tmp/tmpz96zn2ue.js:37:21)\n\
    \    at tri (/tmp/tmpz96zn2ue.js:35:47)\n    at tri (/tmp/tmpz96zn2ue.js:37:21)\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    if(n === 0){\n        return\
    \ [0];\n    }\n    if(n === 1){\n        return [1];\n    }\n    if(n === 2){\n\
    \        return [1, 3];\n    }\n    if(n === 3){\n        return [1, 3, 2, 8];\n\
    \    }\n    var result = [1, 1];\n    for(var i = 2; i < n; i++){\n        result.push(1\
    \ + (i / 2));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  2,\n  2.5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8,\n  3\n\
    ]\n    at test (/tmp/tmpel9o_1yh.js:43:10)\n    at Object.<anonymous> (/tmp/tmpel9o_1yh.js:54:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 2,\
    \ 2.5 ],\n  expected: [ 1, 3, 2, 8, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var result = [];\n    if(n ===\
    \ 0){\n        return result;\n    }\n    if(n === 1){\n        result.push(1);\n\
    \        return result;\n    }\n    if(n % 2 === 0){\n        result.push(1 +\
    \ n / 2);\n        result.push(1);\n        result.push(1 + n / 2);\n        return\
    \ result;\n    }\n    result.push(1 + n / 2);\n    result.push(1);\n    result.push(1\
    \ + n / 2);\n    result.push(1 + n / 2);\n    result.push(1 + n / 2);\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2.5,\n  1,\n\
    \  2.5,\n  2.5,\n  2.5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n\
    \  8\n]\n    at test (/tmp/tmp3uan08p9.js:45:10)\n    at Object.<anonymous> (/tmp/tmp3uan08p9.js:57:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2.5, 1,\
    \ 2.5, 2.5, 2.5 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
