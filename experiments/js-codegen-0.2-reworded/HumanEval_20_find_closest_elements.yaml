name: HumanEval_20_find_closest_elements
language: js
prompt: "//From a supplied array of numbers (of length at least two) select and return\
  \ two that are the closest to each\n// other and return them in order (smaller number,\
  \ larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
  // (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n//\
  \ (2.0, 2.0)\nfunction find_closest_elements(numbers){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
  \ 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0,\
  \ 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n\
  \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1,\
  \ 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();"
completions: ["  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index =\
    \ 0;\n  var min_value = 0;\n  var max_value = 0;\n  for (var i = 0; i < numbers.length;\
    \ i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n\
    \      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i]\
    \ - numbers[1]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index\
    \ = i;\n    }\n  }\n  for (var i = 0; i < numbers.length; i++){\n    var diff\
    \ = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff\
    \ = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n\
    \    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n   \
    \ }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n", "    var min_diff\
    \ = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value\
    \ = 0;\n    var max_value = 0;\n    var min_diff_value = 0;\n    var max_diff_value\
    \ = 0;\n    var min_diff_index = 0;\n    var max_diff_index = 0;\n    for(var\
    \ i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n\
    \        if(diff < min_diff){\n            min_diff = diff;\n            min_index\
    \ = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i]\
    \ - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n\
    \            min_index = i;\n            min_value = numbers[i];\n        }\n\
    \        diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n        if(diff\
    \ < min_diff){\n            min_diff = diff;\n            min_index = i;\n   \
    \         min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i]\
    \ - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n\
    \            min_index = i;\n            min_value = numbers[i];\n        }\n\
    \        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n\
    \            min_diff = diff;\n            min_index = i;\n            min_value\
    \ = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[numbers.length\
    \ - 1]);\n        if(diff < min_diff){\n            min_diff = diff;\n       \
    \     min_index = i;\n            min_value = numbers[i];\n        }\n       \
    \ diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n  \
    \          min_diff = diff;\n            min_index = i;\n            min_value\
    \ = numbers[i", "  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index\
    \ = 0;\n  var min_val = 0;\n  var max_val = 0;\n\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    var diff = Math.abs(numbers[i] - numbers[min_index]);\n    if(diff\
    \ < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff\
    \ = Math.abs(numbers[i] - numbers[max_index]);\n    if(diff < min_diff){\n   \
    \   min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  min_val = numbers[min_index];\n\
    \  max_val = numbers[max_index];\n\n  return [min_val, max_val];\n}\n", "  var\
    \ min_diff = numbers[0] - numbers[1];\n  var min_index = 0;\n  var max_index =\
    \ 1;\n  var max_diff = min_diff;\n  for(var i = 0; i < numbers.length - 1; i++){\n\
    \    var diff = numbers[i] - numbers[i+1];\n    if(diff < min_diff){\n      min_diff\
    \ = diff;\n      min_index = i;\n    }\n    if(diff > max_diff){\n      max_diff\
    \ = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n\
    }\n", "    var min_diff = numbers[0] - numbers[1];\n    var min_diff_index = 0;\n\
    \    var max_diff = numbers[0] - numbers[1];\n    var max_diff_index = 0;\n  \
    \  for(var i = 0; i < numbers.length; i++){\n        var diff = numbers[i] - numbers[1];\n\
    \        if(diff < min_diff){\n            min_diff = diff;\n            min_diff_index\
    \ = i;\n        }\n        if(diff > max_diff){\n            max_diff = diff;\n\
    \            max_diff_index = i;\n        }\n    }\n    return [numbers[min_diff_index],\
    \ numbers[max_diff_index]];\n}\n", "    var min_diff = Infinity;\n    var min_index\
    \ = 0;\n    var max_index = 0;\n    for (var i = 0; i < numbers.length; i++) {\n\
    \        var diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff)\
    \ {\n            min_diff = diff;\n            min_index = i;\n        }\n   \
    \     diff = Math.abs(numbers[i] - numbers[1]);\n        if (diff < min_diff)\
    \ {\n            min_diff = diff;\n            max_index = i;\n        }\n   \
    \ }\n    return [numbers[min_index], numbers[max_index]];\n}\n", "  var closest\
    \ = numbers[0];\n  var closest_index = 0;\n  var closest_diff = Math.abs(closest\
    \ - numbers[1]);\n  for (var i = 1; i < numbers.length; i++){\n    var diff =\
    \ Math.abs(numbers[i] - numbers[1]);\n    if (diff < closest_diff){\n      closest\
    \ = numbers[i];\n      closest_index = i;\n      closest_diff = diff;\n    }\n\
    \  }\n  return [closest, numbers[closest_index]];\n}\n", "    var min_diff = Infinity;\n\
    \    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var\
    \ max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff\
    \ = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n       \
    \     min_diff = diff;\n            min_index = i;\n        }\n        diff =\
    \ Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n         \
    \   min_diff = diff;\n            min_index = i;\n        }\n    }\n    min_value\
    \ = numbers[min_index];\n    max_value = numbers[min_index];\n    for(var i =\
    \ 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n\
    \        if(diff < min_diff){\n            min_diff = diff;\n            min_index\
    \ = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n       \
    \ if(diff < min_diff){\n            min_diff = diff;\n            min_index =\
    \ i;\n        }\n    }\n    return [min_value, max_value];\n}\n", "    var min_diff\
    \ = Infinity;\n    var min_num = 0;\n    var max_num = 0;\n    var min_diff_num\
    \ = 0;\n    var max_diff_num = 0;\n    for (var i = 0; i < numbers.length; i++){\n\
    \        var diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff){\n\
    \            min_diff = diff;\n            min_num = numbers[i];\n        }\n\
    \        if (diff > max_diff){\n            max_diff = diff;\n            max_num\
    \ = numbers[i];\n        }\n    }\n    for (var i = 0; i < numbers.length; i++){\n\
    \        var diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff == min_diff){\n\
    \            min_diff_num = numbers[i];\n        }\n        if (diff == max_diff){\n\
    \            max_diff_num = numbers[i];\n        }\n    }\n    return [min_num,\
    \ max_num, min_diff_num, max_diff_num];\n}\n<|endoftext|><|javascript|>var gulp\
    \ = require('gulp');\nvar browserify = require('browserify');\nvar source = require('vinyl-source-stream');\n\
    var buffer = require('vinyl-buffer');\nvar uglify = require('gulp-uglify');\n\
    var sourcemaps = require('gulp-sourcemaps');\nvar gutil = require('gulp-util');\n\
    var watchify = require('watchify');\nvar babelify = require('babelify');\nvar\
    \ reactify = require('reactify');\nvar browserSync = require('browser-sync');\n\
    var gulpif = require('gulp-if');\nvar sourcemaps = require('gulp-sourcemaps');\n\
    var autoprefixer = require('gulp-autoprefixer');\nvar concat = require('gulp-concat');\n\
    var imagemin = require('gulp-imagemin');\nvar imageminJpegtran = require('imagemin-jpegtran');\n\
    var imageminPngquant = require('imagemin-pngquant');\nvar imageminGifsicle", " \
    \   var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n\
    \    var min_val = 0;\n    var max_val = 0;\n    for (var i = 0; i < numbers.length;\
    \ i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff\
    \ < min_diff){\n            min_diff = diff;\n            min_index = i;\n   \
    \         min_val = numbers[i];\n        }\n        diff = Math.abs(numbers[i]\
    \ - numbers[numbers.length - 1]);\n        if (diff < min_diff){\n           \
    \ min_diff = diff;\n            min_index = i;\n            min_val = numbers[i];\n\
    \        }\n    }\n    for (var i = 0; i < numbers.length; i++){\n        var\
    \ diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff){\n \
    \           min_diff = diff;\n            max_index = i;\n            max_val\
    \ = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[numbers.length\
    \ - 1]);\n        if (diff < min_diff){\n            min_diff = diff;\n      \
    \      max_index = i;\n            max_val = numbers[i];\n        }\n    }\n \
    \   return [min_val, max_val];\n}\n", "    var min_diff = Infinity;\n    var min_index\
    \ = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n\
    \    var min_diff_value = 0;\n    var max_diff_value = 0;\n    var min_diff_index\
    \ = 0;\n    var max_diff_index = 0;\n    for(var i = 0; i < numbers.length; i++){\n\
    \        if(numbers[i] < numbers[min_index]){\n            min_value = numbers[i];\n\
    \            min_index = i;\n        }\n        if(numbers[i] > numbers[max_index]){\n\
    \            max_value = numbers[i];\n            max_index = i;\n        }\n\
    \        if(Math.abs(numbers[i] - numbers[min_index]) < min_diff){\n         \
    \   min_diff = Math.abs(numbers[i] - numbers[min_index]);\n            min_diff_value\
    \ = numbers[i];\n            min_diff_index = i;\n        }\n        if(Math.abs(numbers[i]\
    \ - numbers[max_index]) < min_diff){\n            min_diff = Math.abs(numbers[i]\
    \ - numbers[max_index]);\n            min_diff_value = numbers[i];\n         \
    \   min_diff_index = i;\n        }\n        if(Math.abs(numbers[i] - numbers[min_index])\
    \ < Math.abs(numbers[i] - numbers[max_index])){\n            min_diff = Math.abs(numbers[i]\
    \ - numbers[min_index]);\n            min_diff_value = numbers[i];\n         \
    \   min_diff_index = i;\n        }\n        if(Math.abs(numbers[i] - numbers[max_index])\
    \ < Math.abs(numbers[i] - numbers[min_index])){\n            min_diff = Math.abs(numbers[i]\
    \ - numbers[max_index]);\n            min_diff_value = numbers[i];\n         \
    \   min_diff_index = i;\n        }\n    }\n    return [min_diff_value, max", " \
    \ var min_diff = Infinity;\n  var min_index = 0;\n  var min_value = 0;\n  var\
    \ max_index = 0;\n  var max_value = 0;\n  var diff = 0;\n  var i = 0;\n  for(i\
    \ = 0; i < numbers.length; i++){\n    diff = Math.abs(numbers[i] - numbers[0]);\n\
    \    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    \
    \  min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n\
    \    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    \
    \  min_value = numbers[i];\n    }\n  }\n  diff = Math.abs(numbers[0] - numbers[1]);\n\
    \  if(diff < min_diff){\n    min_diff = diff;\n    min_index = 1;\n    min_value\
    \ = numbers[1];\n  }\n  return [min_value, numbers[min_index]];\n}\n", "  var\
    \ min_diff = Infinity;\n  var min_num = 0;\n  var max_num = 0;\n  var min_diff_num\
    \ = 0;\n  var max_diff_num = 0;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n\
    \      min_diff = diff;\n      min_num = numbers[i];\n    }\n    if(diff > max_diff){\n\
    \      max_diff = diff;\n      max_num = numbers[i];\n    }\n  }\n  for(var i\
    \ = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n\
    \    if(diff == min_diff){\n      min_diff_num = numbers[i];\n    }\n    if(diff\
    \ == max_diff){\n      max_diff_num = numbers[i];\n    }\n  }\n  return [min_num,\
    \ max_num, min_diff_num, max_diff_num];\n}\n<|endoftext|><|javascript|>import\
    \ {\n  GraphQLObjectType,\n  GraphQLString,\n  GraphQLNonNull,\n  GraphQLInt,\n\
    \  GraphQLID,\n  GraphQLBoolean,\n  GraphQLList,\n  GraphQLField\n} from 'graphql';\n\
    \nimport {\n  GraphQLDate,\n  GraphQLDateTime,\n  GraphQLTime,\n  GraphQLDateTime\n\
    } from 'graphql-iso-date';\n\nimport {\n  GraphQLObject,\n  GraphQLInputObjectType,\n\
    \  GraphQLInputObjectField\n} from 'graphql-anywhere';\n\nimport {\n  GraphQLInputObject,\n\
    \  GraphQLInputObjectField\n} from 'graphql-anywhere';\n\nimport {\n  GraphQLInputObjectType,\n\
    \  GraphQLInputObjectField\n} from 'graphql-anywhere';\n\nimport {\n  GraphQLInputObjectType,\n\
    \  GraphQLInputObjectField\n} from 'graphql-anywhere';\n\nimport {\n  GraphQLInputObjectType,\n\
    \  GraphQLInputObject", "    var closest_pair = [];\n    var closest_pair_distance\
    \ = Infinity;\n    var i, j;\n    for(i = 0; i < numbers.length - 1; i++){\n \
    \       for(j = i + 1; j < numbers.length; j++){\n            var distance = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if(distance < closest_pair_distance){\n        \
    \        closest_pair_distance = distance;\n                closest_pair = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n",
  "    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n\
    \    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff\
    \ < min_diff){\n            min_diff = diff;\n            min_index = i;\n   \
    \     }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff <\
    \ min_diff){\n            min_diff = diff;\n            min_index = i;\n     \
    \   }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff =\
    \ Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n         \
    \   min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i]\
    \ - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n\
    \            min_index = i;\n        }\n    }\n    return [numbers[min_index],\
    \ numbers[max_index]];\n}\n", "  var min_diff = Infinity;\n  var min_index = 0;\n\
    \  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  var min_diff_value\
    \ = 0;\n  var max_diff_value = 0;\n  var min_diff_index = 0;\n  var max_diff_index\
    \ = 0;\n  var diff_value = 0;\n  var diff_index = 0;\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    diff_value = Math.abs(numbers[i] - numbers[0]);\n    diff_index =\
    \ 0;\n    for(var j = 1; j < numbers.length; j++){\n      diff_value = Math.abs(numbers[i]\
    \ - numbers[j]);\n      if(diff_value < min_diff){\n        min_diff = diff_value;\n\
    \        min_index = diff_index;\n        min_value = numbers[i];\n      }\n \
    \     if(diff_value > max_diff){\n        max_diff = diff_value;\n        max_index\
    \ = diff_index;\n        max_value = numbers[i];\n      }\n      diff_index++;\n\
    \    }\n  }\n  return [min_value, max_value];\n}\n", "  var min_diff = Infinity;\n\
    \  var min_num = 0;\n  var max_num = 0;\n  var min_diff_num = 0;\n  var max_diff_num\
    \ = 0;\n  var i = 0;\n  var j = 0;\n  for(i = 0; i < numbers.length; i++){\n \
    \   for(j = 0; j < numbers.length; j++){\n      if(i != j){\n        var diff\
    \ = Math.abs(numbers[i] - numbers[j]);\n        if(diff < min_diff){\n       \
    \   min_diff = diff;\n          min_num = numbers[i];\n          max_num = numbers[j];\n\
    \        }\n        var diff_num = Math.abs(numbers[i] - numbers[j]);\n      \
    \  if(diff_num < min_diff_num){\n          min_diff_num = diff_num;\n        \
    \  min_num = numbers[i];\n          max_num = numbers[j];\n        }\n      }\n\
    \    }\n  }\n  return [min_num, max_num];\n}\n", "  var min_diff = Infinity;\n\
    \  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value\
    \ = 0;\n  var min_diff_value = 0;\n  var max_diff_value = 0;\n  for (var i = 0;\
    \ i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n\
    \    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n   \
    \ }\n    if (diff > max_diff){\n      max_diff = diff;\n      max_index = i;\n\
    \    }\n  }\n  min_value = numbers[min_index];\n  max_value = numbers[max_index];\n\
    \  min_diff_value = Math.abs(min_value - numbers[0]);\n  max_diff_value = Math.abs(max_value\
    \ - numbers[0]);\n  return [min_value, max_value];\n}\n<|endoftext|><|javascript|>import\
    \ React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles\
    \ } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\n\
    import Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\
    import FormControl from '@material-ui/core/FormControl';\nimport FormLabel from\
    \ '@material-ui/core/FormLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\
    import FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup\
    \ from '@material-ui/core/FormGroup';\nimport FormControlStatic from '@material-ui/core/FormControlStatic';\n\
    import FormControls from '@material-ui/core/FormControls';\nimport FormControlsProps\
    \ from '@material-ui/core/FormControlsProps';\nimport FormControlsContext from\
    \ '@material-ui/core/FormControlsContext';\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\
    import FormHelperText", "    var min_diff = Infinity;\n    var min_num = 0;\n\
    \    var max_num = 0;\n    var min_diff_num = 0;\n    var max_diff_num = 0;\n\
    \    for (var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i]\
    \ - numbers[0]);\n        if (diff < min_diff){\n            min_diff = diff;\n\
    \            min_num = numbers[i];\n        }\n        diff = Math.abs(numbers[i]\
    \ - numbers[1]);\n        if (diff < min_diff){\n            min_diff = diff;\n\
    \            min_num = numbers[i];\n        }\n        diff = Math.abs(numbers[i]\
    \ - numbers[2]);\n        if (diff < min_diff){\n            min_diff = diff;\n\
    \            min_num = numbers[i];\n        }\n        diff = Math.abs(numbers[i]\
    \ - numbers[3]);\n        if (diff < min_diff){\n            min_diff = diff;\n\
    \            min_num = numbers[i];\n        }\n        diff = Math.abs(numbers[i]\
    \ - numbers[4]);\n        if (diff < min_diff){\n            min_diff = diff;\n\
    \            min_num = numbers[i];\n        }\n        diff = Math.abs(numbers[i]\
    \ - numbers[5]);\n        if (diff < min_diff){\n            min_diff = diff;\n\
    \            min_num = numbers[i];\n        }\n        diff = Math.abs(numbers[i]\
    \ - numbers[6]);\n        if (diff < min_diff){\n            min_diff = diff;\n\
    \            min_num = numbers[i];\n        }\n        diff = Math.abs(numbers[i]\
    \ - numbers[7]);\n        if (diff < min_diff){\n            min_diff = diff;\n\
    \            min_num = numbers[i];\n        }\n        diff = Math.abs(numbers[i]\
    \ - numbers[8]);\n        if (diff < min_diff){\n            min_diff = diff;\n\
    \            min_num = numbers[i];\n        }\n        diff =", "    var min_diff\
    \ = Number.MAX_VALUE;\n    var min_index = 0;\n    var max_index = 0;\n    for(var\
    \ i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n\
    \        if(diff < min_diff){\n            min_diff = diff;\n            min_index\
    \ = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n     \
    \   var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff\
    \ && i != min_index){\n            min_diff = diff;\n            min_index = i;\n\
    \        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff\
    \ = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff && i != min_index\
    \ && i != max_index){\n            min_diff = diff;\n            min_index = i;\n\
    \        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
