language: js
name: HumanEval_46_fib4
results:
- exit_code: 0
  program: "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) ->\
    \ 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0){\n        return\
    \ 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n  \
    \      return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    return\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib4;\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),28);\n  assert.deepEqual(candidate(10),104);\n\
    \  assert.deepEqual(candidate(12),386);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371521
- exit_code: 0
  program: "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) ->\
    \ 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n==0) return 0;\n    if(n==1)\
    \ return 0;\n    if(n==2) return 2;\n    if(n==3) return 0;\n    return fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib4;\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),28);\n\
    \  assert.deepEqual(candidate(10),104);\n  assert.deepEqual(candidate(12),386);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371522
- exit_code: 0
  program: "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) ->\
    \ 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n === 0){\n    return 0;\n\
    \  }\n  if(n === 1){\n    return 0;\n  }\n  if(n === 2){\n    return 2;\n  }\n\
    \  if(n === 3){\n    return 0;\n  }\n  return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib4;\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),28);\n\
    \  assert.deepEqual(candidate(10),104);\n  assert.deepEqual(candidate(12),386);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371521
- exit_code: 0
  program: "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) ->\
    \ 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n === 0){\n    return 0;\n\
    \  }\n  if(n === 1){\n    return 0;\n  }\n  if(n === 2){\n    return 2;\n  }\n\
    \  if(n === 3){\n    return 0;\n  }\n  return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib4;\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),28);\n\
    \  assert.deepEqual(candidate(10),104);\n  assert.deepEqual(candidate(12),386);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371521
- exit_code: 0
  program: "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) ->\
    \ 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0){\n        return\
    \ 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n  \
    \      return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    return\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib4;\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),28);\n  assert.deepEqual(candidate(10),104);\n\
    \  assert.deepEqual(candidate(12),386);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371521
- exit_code: 0
  program: "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) ->\
    \ 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0){\n        return\
    \ 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n  \
    \      return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    return\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib4;\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),28);\n  assert.deepEqual(candidate(10),104);\n\
    \  assert.deepEqual(candidate(12),386);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371521
- exit_code: 0
  program: "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) ->\
    \ 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n == 0){\n        return\
    \ 0;\n    }\n    if(n == 1){\n        return 0;\n    }\n    if(n == 2){\n    \
    \    return 2;\n    }\n    if(n == 3){\n        return 0;\n    }\n    return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib4;\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),28);\n  assert.deepEqual(candidate(10),104);\n\
    \  assert.deepEqual(candidate(12),386);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371522
- exit_code: 0
  program: "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) ->\
    \ 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0){\n        return\
    \ 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n  \
    \      return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    return\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib4;\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),28);\n  assert.deepEqual(candidate(10),104);\n\
    \  assert.deepEqual(candidate(12),386);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371521
- exit_code: 0
  program: "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) ->\
    \ 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n==0) return 0;\n    if(n==1)\
    \ return 0;\n    if(n==2) return 2;\n    if(n==3) return 0;\n    return fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib4;\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),28);\n\
    \  assert.deepEqual(candidate(10),104);\n  assert.deepEqual(candidate(12),386);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371522
- exit_code: 0
  program: "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) ->\
    \ 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0) return 0;\n  \
    \  if(n === 1) return 0;\n    if(n === 2) return 2;\n    if(n === 3) return 0;\n\
    \    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib4;\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),28);\n \
    \ assert.deepEqual(candidate(10),104);\n  assert.deepEqual(candidate(12),386);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371522
- exit_code: 0
  program: "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) ->\
    \ 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0){\n        return\
    \ 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n  \
    \      return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    return\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib4;\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),28);\n  assert.deepEqual(candidate(10),104);\n\
    \  assert.deepEqual(candidate(12),386);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371521
- exit_code: 1
  program: "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) ->\
    \ 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0 || n === 1){\n\
    \        return 0;\n    }\n    else if(n === 2){\n        return 2;\n    }\n \
    \   else{\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n   \
    \ }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = fib4;\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),28);\n\
    \  assert.deepEqual(candidate(10),104);\n  assert.deepEqual(candidate(12),386);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmparb1izvf.js:15\n    if(n === 0 || n === 1){\n    ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at fib4 (/tmp/tmparb1izvf.js:15:5)\n \
    \   at fib4 (/tmp/tmparb1izvf.js:22:16)\n    at fib4 (/tmp/tmparb1izvf.js:22:16)\n\
    \    at fib4 (/tmp/tmparb1izvf.js:22:16)\n    at fib4 (/tmp/tmparb1izvf.js:22:16)\n\
    \    at fib4 (/tmp/tmparb1izvf.js:22:16)\n    at fib4 (/tmp/tmparb1izvf.js:22:16)\n\
    \    at fib4 (/tmp/tmparb1izvf.js:22:16)\n    at fib4 (/tmp/tmparb1izvf.js:22:16)\n\
    \    at fib4 (/tmp/tmparb1izvf.js:22:16)\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371522
- exit_code: 1
  program: "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) ->\
    \ 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n < 4){\n    return n;\n\
    \  }\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib4;\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),28);\n \
    \ assert.deepEqual(candidate(10),104);\n  assert.deepEqual(candidate(12),386);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n12\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp7hi71asf.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7hi71asf.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 12,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371522
- exit_code: 0
  program: "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) ->\
    \ 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n == 0){\n        return\
    \ 0;\n    }\n    if(n == 1){\n        return 0;\n    }\n    if(n == 2){\n    \
    \    return 2;\n    }\n    if(n == 3){\n        return 0;\n    }\n    return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib4;\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),28);\n  assert.deepEqual(candidate(10),104);\n\
    \  assert.deepEqual(candidate(12),386);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371522
- exit_code: 0
  program: "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) ->\
    \ 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0){\n        return\
    \ 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n  \
    \      return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    return\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib4;\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),28);\n  assert.deepEqual(candidate(10),104);\n\
    \  assert.deepEqual(candidate(12),386);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371521
- exit_code: 0
  program: "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) ->\
    \ 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0){\n        return\
    \ 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n  \
    \      return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    return\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib4;\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),28);\n  assert.deepEqual(candidate(10),104);\n\
    \  assert.deepEqual(candidate(12),386);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371521
- exit_code: 0
  program: "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) ->\
    \ 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0){\n        return\
    \ 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n  \
    \      return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    return\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib4;\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),28);\n  assert.deepEqual(candidate(10),104);\n\
    \  assert.deepEqual(candidate(12),386);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371521
- exit_code: 0
  program: "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) ->\
    \ 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0){\n        return\
    \ 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n  \
    \      return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    return\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib4;\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),28);\n  assert.deepEqual(candidate(10),104);\n\
    \  assert.deepEqual(candidate(12),386);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371521
- exit_code: 1
  program: "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) ->\
    \ 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n === 0){\n    return 0;\n\
    \  }\n  if(n === 1){\n    return 0;\n  }\n  if(n === 2){\n    return 2;\n  }\n\
    \  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = fib4;\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),28);\n  assert.deepEqual(candidate(10),104);\n\
    \  assert.deepEqual(candidate(12),386);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzpce1tr8.js:15\n  if(n === 0){\n  ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at fib4 (/tmp/tmpzpce1tr8.js:15:3)\n    at fib4 (/tmp/tmpzpce1tr8.js:24:10)\n\
    \    at fib4 (/tmp/tmpzpce1tr8.js:24:10)\n    at fib4 (/tmp/tmpzpce1tr8.js:24:10)\n\
    \    at fib4 (/tmp/tmpzpce1tr8.js:24:10)\n    at fib4 (/tmp/tmpzpce1tr8.js:24:10)\n\
    \    at fib4 (/tmp/tmpzpce1tr8.js:24:10)\n    at fib4 (/tmp/tmpzpce1tr8.js:24:10)\n\
    \    at fib4 (/tmp/tmpzpce1tr8.js:24:10)\n    at fib4 (/tmp/tmpzpce1tr8.js:24:10)\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371522
- exit_code: 1
  program: "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) ->\
    \ 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n === 0){\n    return 0;\n\
    \  }\n  if(n === 1){\n    return 0;\n  }\n  if(n === 2){\n    return 2;\n  }\n\
    \  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = fib4;\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),28);\n  assert.deepEqual(candidate(10),104);\n\
    \  assert.deepEqual(candidate(12),386);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzpce1tr8.js:15\n  if(n === 0){\n  ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at fib4 (/tmp/tmpzpce1tr8.js:15:3)\n    at fib4 (/tmp/tmpzpce1tr8.js:24:10)\n\
    \    at fib4 (/tmp/tmpzpce1tr8.js:24:10)\n    at fib4 (/tmp/tmpzpce1tr8.js:24:10)\n\
    \    at fib4 (/tmp/tmpzpce1tr8.js:24:10)\n    at fib4 (/tmp/tmpzpce1tr8.js:24:10)\n\
    \    at fib4 (/tmp/tmpzpce1tr8.js:24:10)\n    at fib4 (/tmp/tmpzpce1tr8.js:24:10)\n\
    \    at fib4 (/tmp/tmpzpce1tr8.js:24:10)\n    at fib4 (/tmp/tmpzpce1tr8.js:24:10)\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371522
