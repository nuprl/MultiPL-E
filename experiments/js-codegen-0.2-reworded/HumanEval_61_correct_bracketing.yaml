name: HumanEval_61_correct_bracketing
language: js
prompt: "//brackets is a string of \"(\" and \")\".\n// return true if every opening\
  \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
  )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
  (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
  (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
  ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
  ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
  (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
  )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
  ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n\
  }\n\ntest();"
completions: ["  var opening_brackets = 0;\n  var closing_brackets = 0;\n  for (var\
    \ i = 0; i < brackets.length; i++){\n    if (brackets[i] == \"(\"){\n      opening_brackets++;\n\
    \    }\n    if (brackets[i] == \")\"){\n      closing_brackets++;\n    }\n  }\n\
    \  if (opening_brackets == closing_brackets){\n    return true;\n  }\n  else{\n\
    \    return false;\n  }\n}\n", "    var opening_brackets = 0;\n    var closing_brackets\
    \ = 0;\n    var opening_bracket = brackets.indexOf(\"(\");\n    var closing_bracket\
    \ = brackets.indexOf(\")\");\n    while(opening_bracket != -1){\n        opening_brackets++;\n\
    \        opening_bracket = brackets.indexOf(\"(\", opening_bracket + 1);\n   \
    \ }\n    while(closing_bracket != -1){\n        closing_brackets++;\n        closing_bracket\
    \ = brackets.indexOf(\")\", closing_bracket + 1);\n    }\n    if(opening_brackets\
    \ == closing_brackets){\n        return true;\n    }\n    else{\n        return\
    \ false;\n    }\n}\n", "    var opening_brackets = brackets.match(/\\(/g);\n \
    \   var closing_brackets = brackets.match(/\\)/g);\n    var opening_bracket_count\
    \ = opening_brackets.length;\n    var closing_bracket_count = closing_brackets.length;\n\
    \    if(opening_bracket_count != closing_bracket_count){\n        return false;\n\
    \    }\n    for(var i = 0; i < opening_bracket_count; i++){\n        if(opening_brackets[i]\
    \ != closing_brackets[i]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "    var opening_brackets = brackets.split(\"(\");\n    var closing_brackets\
    \ = brackets.split(\")\");\n    var count = 0;\n    for(var i = 0; i < opening_brackets.length;\
    \ i++){\n        if(opening_brackets[i] != closing_brackets[count]){\n       \
    \     return false;\n        }\n        count++;\n    }\n    return true;\n}\n",
  "    var opening_bracket = brackets.indexOf('(');\n    var closing_bracket = brackets.indexOf(')');\n\
    \    if(opening_bracket == -1 || closing_bracket == -1) return false;\n    if(opening_bracket\
    \ > closing_bracket) return false;\n    if(opening_bracket == 0 && closing_bracket\
    \ == brackets.length - 1) return true;\n    return correct_bracketing(brackets.substr(opening_bracket\
    \ + 1, closing_bracket - opening_bracket - 1));\n}\n", "  var opening_brackets\
    \ = brackets.match(/\\(([^)]*)\\)/g);\n  var closing_brackets = brackets.match(/\\\
    ([^)]*\\)/g);\n  if(opening_brackets && opening_brackets.length == closing_brackets.length){\n\
    \    return true;\n  }\n  return false;\n}\n", "    var opening_brackets = 0;\n\
    \    var closing_brackets = 0;\n    for(var i = 0; i < brackets.length; i++){\n\
    \        if(brackets[i] == \"(\"){\n            opening_brackets++;\n        }\n\
    \        else if(brackets[i] == \")\"){\n            closing_brackets++;\n   \
    \     }\n    }\n    return opening_brackets == closing_brackets;\n}\n", "    var\
    \ opening_brackets = 0;\n    var closing_brackets = 0;\n    for(var i = 0; i <\
    \ brackets.length; i++){\n        if(brackets[i] == \"(\"){\n            opening_brackets++;\n\
    \        }\n        else if(brackets[i] == \")\"){\n            closing_brackets++;\n\
    \        }\n    }\n    return opening_brackets == closing_brackets;\n}\n", " \
    \ var opening_brackets = 0;\n  var closing_brackets = 0;\n  for (var i = 0; i\
    \ < brackets.length; i++){\n    if (brackets[i] === '('){\n      opening_brackets++;\n\
    \    }\n    else if (brackets[i] === ')'){\n      closing_brackets++;\n    }\n\
    \  }\n  return opening_brackets === closing_brackets;\n}\n", "  var opening_brackets\
    \ = 0;\n  var closing_brackets = 0;\n  for (var i = 0; i < brackets.length; i++){\n\
    \    if (brackets[i] == '('){\n      opening_brackets++;\n    }\n    if (brackets[i]\
    \ == ')'){\n      closing_brackets++;\n    }\n  }\n  return opening_brackets ==\
    \ closing_brackets;\n}\n", "    var opening_brackets = 0;\n    var closing_brackets\
    \ = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i]\
    \ == \"(\"){\n            opening_brackets++;\n        }\n        else if (brackets[i]\
    \ == \")\"){\n            closing_brackets++;\n        }\n    }\n    return opening_brackets\
    \ == closing_brackets;\n}\n", "    var opening_brackets = brackets.split(\"(\"\
    );\n    var closing_brackets = brackets.split(\")\");\n    var count = 0;\n  \
    \  for(var i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i].length\
    \ > 0){\n            count++;\n        }\n    }\n    for(var i = 0; i < closing_brackets.length;\
    \ i++){\n        if(closing_brackets[i].length > 0){\n            count--;\n \
    \       }\n    }\n    return count == 0;\n}\n", "    var opening_brackets = 0;\n\
    \    var closing_brackets = 0;\n    for(var i = 0; i < brackets.length; i++){\n\
    \        if(brackets[i] == '('){\n            opening_brackets++;\n        }\n\
    \        if(brackets[i] == ')'){\n            closing_brackets++;\n        }\n\
    \    }\n    if(opening_brackets == closing_brackets){\n        return true;\n\
    \    }\n    else{\n        return false;\n    }\n}\n", "  var opening_brackets\
    \ = 0;\n  var closing_brackets = 0;\n  for(var i = 0; i < brackets.length; i++){\n\
    \    if(brackets[i] == '('){\n      opening_brackets++;\n    }\n    else if(brackets[i]\
    \ == ')'){\n      closing_brackets++;\n    }\n  }\n  return opening_brackets ==\
    \ closing_brackets;\n}\n", "  var opening_brackets = 0;\n  var closing_brackets\
    \ = 0;\n  for (var i = 0; i < brackets.length; i++){\n    if (brackets[i] == '('){\n\
    \      opening_brackets++;\n    }\n    else if (brackets[i] == ')'){\n      closing_brackets++;\n\
    \    }\n  }\n  return opening_brackets == closing_brackets;\n}\n", "    var opening_brackets\
    \ = 0;\n    var closing_brackets = 0;\n    for(var i = 0; i < brackets.length;\
    \ i++){\n        if(brackets[i] == '('){\n            opening_brackets++;\n  \
    \      }\n        else if(brackets[i] == ')'){\n            closing_brackets++;\n\
    \        }\n    }\n    return opening_brackets == closing_brackets;\n}\n", " \
    \   var opening_brackets = 0;\n    var closing_brackets = 0;\n    for (var i =\
    \ 0; i < brackets.length; i++){\n        if (brackets[i] == \"(\"){\n        \
    \    opening_brackets++;\n        }\n        else if (brackets[i] == \")\"){\n\
    \            closing_brackets++;\n        }\n    }\n    return opening_brackets\
    \ == closing_brackets;\n}\n", "  var opening_bracket_count = 0;\n  var closing_bracket_count\
    \ = 0;\n  for(var i = 0; i < brackets.length; i++){\n    if(brackets[i] == '('){\n\
    \      opening_bracket_count++;\n    }\n    else if(brackets[i] == ')'){\n   \
    \   closing_bracket_count++;\n    }\n  }\n  return opening_bracket_count == closing_bracket_count;\n\
    }\n", "    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var count = 0;\n    for(var i = 0; i < opening_brackets.length;\
    \ i++){\n        if(closing_brackets[count] == undefined){\n            return\
    \ false;\n        }\n        count++;\n    }\n    return true;\n}\n", "  var opening_brackets\
    \ = brackets.match(/\\(/g);\n  var closing_brackets = brackets.match(/\\)/g);\n\
    \  var opening_bracket_count = opening_brackets.length;\n  var closing_bracket_count\
    \ = closing_brackets.length;\n  var is_balanced = opening_bracket_count == closing_bracket_count;\n\
    \  return is_balanced;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
