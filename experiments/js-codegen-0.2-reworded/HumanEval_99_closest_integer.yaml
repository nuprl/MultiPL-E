name: HumanEval_99_closest_integer
language: js
prompt: "//Create a function that takes a value (string) representing a number\n//\
  \ and returns the closest integer to it. If the number is equidistant\n// from two\
  \ integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\"\
  )\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from\
  \ zero means that if the given number is equidistant\n// from two integers, the\
  \ one you should return is the one that is the\n// farthest from zero. For example\
  \ closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\")\
  \ should return -15.\nfunction closest_integer(value){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
  14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
  15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
completions: ["    var number = parseInt(value);\n    if(isNaN(number)){\n       \
    \ return 0;\n    }\n    if(number === 0){\n        return 0;\n    }\n    if(number\
    \ > 0){\n        return Math.ceil(number);\n    }\n    return Math.floor(number);\n\
    }\n", "  var number = parseFloat(value);\n  var sign = (number > 0) - (number\
    \ < 0);\n  number = Math.abs(number);\n  var result = Math.round(number);\n  return\
    \ sign * result;\n}\n", "  var num = parseFloat(value);\n  var num_int = Math.round(num);\n\
    \  if(num_int == num){\n    return num_int;\n  }\n  else{\n    return num_int\
    \ + (num - num_int) * 0.5;\n  }\n}\n", "    var num = parseInt(value);\n    if(isNaN(num)){\n\
    \        return value;\n    }\n    var diff = Math.abs(num);\n    var diffs =\
    \ [];\n    for(var i = 1; i <= diff; i++){\n        diffs.push(diff - i);\n  \
    \      diffs.push(diff + i);\n    }\n    var diffs_sorted = diffs.sort(function(a,\
    \ b){\n        return a - b;\n    });\n    var closest = diffs_sorted[0];\n  \
    \  if(diffs_sorted[1] === closest){\n        return diffs_sorted[1];\n    }\n\
    \    return num - closest;\n}\n", "  var number = parseFloat(value);\n  var int\
    \ = Math.round(number);\n  if (number === int) {\n    if (Math.abs(number) ===\
    \ Math.abs(int)) {\n      return int;\n    } else {\n      return number > 0 ?\
    \ Math.ceil(number) : Math.floor(number);\n    }\n  } else {\n    return int;\n\
    \  }\n}\n", "  var num = parseFloat(value);\n  var int = Math.round(num);\n  if(num\
    \ - int == 0){\n    return int;\n  }\n  else if(num - int > 0){\n    return int\
    \ + 1;\n  }\n  else{\n    return int - 1;\n  }\n}\n", "    var num = parseInt(value);\n\
    \    if(isNaN(num)){\n        return value;\n    }\n    if(num === 0){\n     \
    \   return 0;\n    }\n    var diff = Math.abs(num);\n    var diffs = [];\n   \
    \ for(var i = 1; i <= diff; i++){\n        diffs.push(i);\n    }\n    var diffs_sorted\
    \ = diffs.sort(function(a, b){\n        return a - b;\n    });\n    var diffs_sorted_index\
    \ = diffs_sorted.indexOf(diff);\n    if(diffs_sorted_index === diffs.length -\
    \ 1){\n        return diffs[diffs.length - 1];\n    }\n    return diffs[diffs_sorted_index\
    \ + 1];\n}\n<|endoftext|><|javascript|>'use strict';\n\nvar _ = require('lodash');\n\
    var fs = require('fs');\nvar path = require('path');\nvar util = require('util');\n\
    \nvar config = require('../config');\nvar logger = require('../logger');\nvar\
    \ utils = require('../utils');\n\nvar configFile = path.join(config.root, 'config.json');\n\
    \nvar defaultConfig = {\n  logLevel: 'info',\n  logFormat: '%d:%m',\n  logFile:\
    \ '',\n  logToConsole: true,\n  logToFile: true,\n  logToStdout: true,\n  logToSyslog:\
    \ false,\n  logToRollingFile: false,\n  logToRollingFileMaxSize: 0,\n  logToRollingFileMaxAge:\
    \ 0,\n  logToRollingFileMaxBackup: 0,\n  logToRollingFileAppend: false,\n  logToRollingFileMaxAgeInDays:\
    \ 0,\n  logToRollingFileMaxBackupInDays: 0,\n  logToRollingFileMaxBackupAge: 0,\n\
    \  logToRollingFileMaxBackupAgeInDays: 0,\n  logToRollingFileMaxBackupAgeInHours:\
    \ 0,\n  logToRollingFileMaxBackupAgeInMinutes: 0,\n  ", "    var num = parseInt(value);\n\
    \    if(isNaN(num)){\n        return value;\n    }\n    if(num === 0){\n     \
    \   return 0;\n    }\n    if(num > 0){\n        return Math.ceil(num);\n    }\n\
    \    return Math.floor(num);\n}\n", "    var num = parseInt(value);\n    if(isNaN(num)){\n\
    \        return value;\n    }\n    var diff = Math.abs(num - value);\n    var\
    \ closest = num;\n    if(diff < 1){\n        return num;\n    }\n    else if(diff\
    \ > 2){\n        return closest;\n    }\n    else{\n        if(num > 0){\n   \
    \         closest = num - 1;\n        }\n        else{\n            closest =\
    \ num + 1;\n        }\n    }\n    return closest;\n}\n", "  var number = parseFloat(value);\n\
    \  var int_number = Math.round(number);\n  if (number === int_number) {\n    return\
    \ int_number;\n  }\n  else {\n    return Math.abs(int_number - number) > Math.abs(int_number\
    \ + number) ? int_number - 1 : int_number + 1;\n  }\n}\n", "  var num = parseFloat(value);\n\
    \  var num_int = Math.round(num);\n  if(num_int == num){\n    return num_int;\n\
    \  }\n  else{\n    return num_int + (num - num_int) * 0.5;\n  }\n}\n", "  var\
    \ number = parseFloat(value);\n  var result = Math.round(number);\n  if(number\
    \ === result){\n    if(number > 0){\n      result = result + 1;\n    } else {\n\
    \      result = result - 1;\n    }\n  }\n  return result;\n}\n", "  var number\
    \ = parseInt(value);\n  var sign = value[0] === \"-\"? -1 : 1;\n  var difference\
    \ = Math.abs(number) - Math.abs(Math.round(number));\n  if(difference === 0){\n\
    \    return Math.round(number);\n  }\n  else if(difference > 0){\n    return Math.round(number)\
    \ + sign;\n  }\n  else{\n    return Math.round(number) - sign;\n  }\n}\n", " \
    \ var num = parseFloat(value);\n  var num_int = Math.round(num);\n  if(num_int\
    \ === num){\n    if(num > 0){\n      return Math.ceil(num);\n    } else {\n  \
    \    return Math.floor(num);\n    }\n  } else {\n    return num_int;\n  }\n}\n",
  "    var number = parseFloat(value);\n    var int_number = Math.round(number);\n\
    \    if(number === int_number){\n        if(number > 0){\n            return Math.ceil(number);\n\
    \        }\n        else{\n            return Math.floor(number);\n        }\n\
    \    }\n    else{\n        return int_number;\n    }\n}\n", "  var number = parseInt(value);\n\
    \  var number_string = value + \"\";\n  var number_length = number_string.length;\n\
    \  var number_index = number_length - 1;\n  var number_index_string = number_string.substr(number_index,\
    \ 1);\n  var number_index_int = parseInt(number_index_string);\n  var number_index_int_string\
    \ = number_index_int + \"\";\n  var number_index_int_length = number_index_int_string.length;\n\
    \  var number_index_int_index = number_index_int_length - 1;\n  var number_index_int_index_string\
    \ = number_index_int_string.substr(number_index_int_index, 1);\n  var number_index_int_index_int\
    \ = parseInt(number_index_int_index_string);\n  var number_index_int_index_int_string\
    \ = number_index_int_index_int + \"\";\n  var number_index_int_index_int_length\
    \ = number_index_int_index_int_string.length;\n  var number_index_int_index_int_index\
    \ = number_index_int_index_int_length - 1;\n  var number_index_int_index_int_index_string\
    \ = number_index_int_index_int_index_int + \"\";\n  var number_index_int_index_int_index_int\
    \ = parseInt(number_index_int_index_int_index_int_string);\n  var number_index_int_index_int_index_int_string\
    \ = number_index_int_index_int_index_int_int + \"\";\n  var number_index_int_index_int_index_int_length\
    \ = number_index_int_index_int_index_int_string.length;\n  var number_index_int_index_int_index_int_index\
    \ = number_index_int_index_int_index_int_index_int_length - 1;\n  var number_index_int_index_int_index_int_index_string\
    \ = number_index_int_index_int_index_int_index", "  var num = parseFloat(value);\n\
    \  var num_int = Math.round(num);\n  if(num_int === num){\n    return num_int;\n\
    \  }\n  else{\n    return num_int + (num - num_int) * 0.5;\n  }\n}\n", "    var\
    \ int_value = parseInt(value);\n    if(isNaN(int_value)){\n        return value;\n\
    \    }\n    var diff = Math.abs(int_value) - Math.abs(Math.round(int_value));\n\
    \    if(diff < 0.5){\n        return Math.round(int_value);\n    }\n    else{\n\
    \        return Math.round(int_value) + 1;\n    }\n}\n<|endoftext|><|javascript|>import\
    \ React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport {\
    \ action } from '@storybook/addon-actions';\nimport { withKnobs, number, text\
    \ } from '@storybook/addon-knobs';\nimport { withInfo } from '@storybook/addon-info';\n\
    \nimport { Button } from '../../../components/button';\nimport { ButtonGroup }\
    \ from '../../../components/buttonGroup';\nimport { ButtonToolbar } from '../../../components/buttonToolbar';\n\
    import { ButtonToolbarGroup } from '../../../components/buttonToolbarGroup';\n\
    import { ButtonToolbarGroupButton } from '../../../components/buttonToolbarGroupButton';\n\
    import { ButtonToolbarGroupButtonGroup } from '../../../components/buttonToolbarGroupButtonGroup';\n\
    import { ButtonToolbarGroupButtonGroupButton } from '../../../components/buttonToolbarGroupButtonGroupButton';\n\
    import { ButtonToolbarGroupButtonGroupButtonGroup } from '../../../components/buttonToolbarGroupButtonGroupButtonGroup';\n\
    import { ButtonToolbarGroupButtonGroupButtonGroupButton } from '../../../components/buttonToolbarGroupButtonGroupButtonGroupButton';\n\
    import { ButtonToolbarGroupButtonGroupButtonGroupButtonGroup } from '../../../components/buttonToolbarGroupButtonGroupButtonGroupButtonGroup';\n\
    import { ButtonToolbarGroupButtonGroupButtonGroupButtonGroupButton } from '../../../components/buttonToolbarGroupButtonGroupButtonGroupButtonGroupButton';\n\
    import { ButtonToolbarGroupButtonGroupButtonGroupButtonGroupButtonGroup } from\
    \ '../../../components/buttonToolbarGroupButtonGroupButtonGroupButtonGroupButtonGroup';\n\
    import { ButtonToolbarGroupButtonGroupButtonGroupButtonGroupButton", "  var number\
    \ = parseFloat(value);\n  var int = Math.round(number);\n  if(number === int){\n\
    \    if(number > 0){\n      return int + 1;\n    }\n    else{\n      return int\
    \ - 1;\n    }\n  }\n  else{\n    return int;\n  }\n}\n<|endoftext|><|javascript|>import\
    \ React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect }\
    \ from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { withRouter\
    \ } from 'react-router-dom';\nimport { FormattedMessage } from 'react-intl';\n\
    import { get } from 'lodash';\nimport {\n  Form,\n  FormGroup,\n  FormControl,\n\
    \  ControlLabel,\n  HelpBlock,\n  Col,\n  Button,\n  ButtonGroup,\n  ButtonToolbar,\n\
    \  Panel,\n  PanelGroup,\n  PanelBody,\n  PanelHeader,\n  PanelTitle,\n  PanelContainer,\n\
    } from 'react-bootstrap';\nimport {\n  FormControlStatic,\n  FormControlStaticInput,\n\
    \  FormControlStaticSelect,\n  FormControlStaticSelectInput,\n} from 'react-bootstrap/lib/FormControls';\n\
    import {\n  FormControlInput,\n  FormControlSelect,\n  FormControlSelectInput,\n\
    } from 'react-bootstrap/lib/FormControls';\nimport {\n  FormControlStaticSelectInput,\n\
    \  FormControlStaticSelect,\n} from 'react-bootstrap/lib/FormControls';\nimport\
    \ {\n  FormControlStaticSelect,\n  FormControlStaticSelectInput,\n} from 'react-bootstrap/lib/FormControls';\n\
    import {\n  FormControlStaticSelectInput,\n  FormControlStaticSelect,\n} from\
    \ 'react-bootstrap/lib/FormControls';\nimport {\n  FormControlStaticSelectInput,\n\
    \  FormControlStaticSelect,\n} from 'react-bootstrap/lib/FormControls';\nimport\
    \ {\n  FormControlStaticSelectInput,\n  FormControlStaticSelect,\n} from 'react-bootstrap/lib/FormControls';\n\
    import {\n  FormControlStaticSelectInput,\n  Form", "    var num = parseFloat(value);\n\
    \    var int = Math.round(num);\n    if(num === int){\n        if(Math.abs(num)\
    \ - Math.abs(int) === 0){\n            int = int + 1;\n        }\n    }\n    return\
    \ int;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
