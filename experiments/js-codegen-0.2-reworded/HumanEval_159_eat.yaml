name: HumanEval_159_eat
language: js
prompt: "//You're a hungry rabbit, and you already have eaten a certain number of\
  \ carrots,\n// but now you need to eat more carrots to complete the day's meals.\n\
  // you should return an array of [ total number of eaten carrots after your meals,\n\
  // the number of carrots left after your meals ]\n// if there are not enough remaining\
  \ carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n\
  // >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1,\
  \ 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number\
  \ : integer\n// the number of carrots that you have eaten.\n// @need : integer\n\
  // the number of carrots that you need to eat.\n// @remaining : integer\n// the\
  \ number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number\
  \ <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\n\
  function eat(number, need, remaining){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = eat;\n  assert.deepEqual(candidate(5, 6, 10),[11, 4]);\n  assert.deepEqual(candidate(4,\
  \ 8, 9),[12, 1]);\n  assert.deepEqual(candidate(1, 10, 10),[11, 0]);\n  assert.deepEqual(candidate(2,\
  \ 11, 5),[7, 0]);\n  assert.deepEqual(candidate(4, 5, 7),[9, 2]);\n  assert.deepEqual(candidate(4,\
  \ 5, 1),[5, 0]);\n}\n\ntest();"
completions: ["    var result = [];\n    if(remaining < need){\n        result[0]\
    \ = number + need - remaining;\n        result[1] = 0;\n    }else{\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\n", "    var result = [];\n    var eaten = 0;\n    var left = 0;\n    if(need\
    \ > remaining){\n        left = need - remaining;\n        eaten = remaining;\n\
    \    }else{\n        eaten = need;\n    }\n    result.push(eaten);\n    result.push(left);\n\
    \    return result;\n}\n", "    var result = [];\n    if(remaining < need){\n\
    \        result[0] = remaining;\n        result[1] = 0;\n    }else{\n        result[0]\
    \ = need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\n", "    var result = [];\n    var eaten = number;\n    var left = remaining\
    \ - number;\n    if(need > left){\n        eaten = left;\n        left = 0;\n\
    \    }\n    result.push(eaten);\n    result.push(left);\n    return result;\n\
    }\n", "    var result = [];\n    if(remaining < need){\n        result[0] = remaining;\n\
    \        result[1] = 0;\n    }else{\n        result[0] = number + need;\n    \
    \    result[1] = remaining - need;\n    }\n    return result;\n}\n", "    var\
    \ result = [];\n    if(remaining >= need){\n        result[0] = number + need;\n\
    \        result[1] = remaining - need;\n    }else{\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    return result;\n}\n", "   \
    \ var eaten = 0;\n    var left = 0;\n    if(number >= need){\n        eaten =\
    \ number - need;\n        left = remaining - eaten;\n    }else{\n        eaten\
    \ = number;\n        left = need - eaten;\n    }\n    return [eaten, left];\n\
    }\n", "    let result = [];\n    let eaten = 0;\n    let left = 0;\n    if(need\
    \ > remaining){\n        eaten = remaining;\n        left = 0;\n    }else{\n \
    \       eaten = need;\n        left = remaining - need;\n    }\n    result.push(eaten);\n\
    \    result.push(left);\n    return result;\n}\n", "    var result = [];\n   \
    \ if(remaining < need){\n        result.push(remaining);\n        result.push(0);\n\
    \    }else{\n        result.push(need);\n        result.push(remaining - need);\n\
    \    }\n    return result;\n}\n", "    if(remaining < need){\n        return [number\
    \ + need, 0];\n    }\n    else{\n        return [number + need, remaining - need];\n\
    \    }\n}\n", "    let result = [];\n    if (number >= need) {\n        result.push(number\
    \ - need);\n        result.push(remaining);\n    } else {\n        result.push(number);\n\
    \        result.push(remaining - number);\n    }\n    return result;\n}\n", " \
    \   if(number >= need){\n        return [number, remaining];\n    }\n    if(remaining\
    \ < need){\n        return [number, 0];\n    }\n    return [number + need, remaining\
    \ - need];\n}\n", "    if(remaining < need){\n        return [number + need, 0];\n\
    \    }\n    return [number + need, remaining - need];\n}\n", "    var result =\
    \ [];\n    if(remaining < need){\n        result[0] = remaining;\n        result[1]\
    \ = 0;\n    }else{\n        result[0] = need;\n        result[1] = remaining -\
    \ need;\n    }\n    return result;\n}\n", "  if(remaining < need){\n    return\
    \ [number + need, 0];\n  }\n  return [number + need, remaining - need];\n}\n",
  "    var result = [];\n    if(remaining < need){\n        result[0] = remaining;\n\
    \        result[1] = 0;\n    }else{\n        result[0] = need;\n        result[1]\
    \ = remaining - need;\n    }\n    return result;\n}\n", "    var result = [];\n\
    \    if(remaining < need){\n        result[0] = remaining;\n        result[1]\
    \ = 0;\n    }else{\n        result[0] = need;\n        result[1] = remaining -\
    \ need;\n    }\n    return result;\n}\n", "    var result = [];\n    if(remaining\
    \ < need){\n        result[0] = remaining;\n        result[1] = 0;\n    }else{\n\
    \        result[0] = need;\n        result[1] = remaining - need;\n    }\n   \
    \ return result;\n}\n", "    if(remaining < need){\n        return [number + need,\
    \ 0];\n    }\n    return [number + need, remaining - need];\n}\n", "    let result\
    \ = [];\n    let eaten = 0;\n    let left = 0;\n    if(need > remaining){\n  \
    \      left = need - remaining;\n        eaten = remaining;\n    }else{\n    \
    \    left = need;\n        eaten = need;\n    }\n    result.push(eaten);\n   \
    \ result.push(left);\n    return result;\n}\n", "    var eaten = 0;\n    var left\
    \ = 0;\n    if(remaining >= need){\n        eaten = need;\n        left = remaining\
    \ - need;\n    }else{\n        eaten = remaining;\n        left = 0;\n    }\n\
    \    return [eaten, left];\n}\n", "    var result = [];\n    var eaten = 0;\n\
    \    var left = 0;\n    if(remaining >= need){\n        result.push(need);\n \
    \       result.push(remaining - need);\n        return result;\n    }\n    while(remaining\
    \ > 0){\n        if(remaining >= need){\n            result.push(need);\n    \
    \        result.push(remaining - need);\n            return result;\n        }\n\
    \        if(remaining < need){\n            result.push(remaining);\n        \
    \    result.push(need - remaining);\n            return result;\n        }\n \
    \       if(remaining == need){\n            result.push(need);\n            result.push(0);\n\
    \            return result;\n        }\n        if(remaining > need){\n      \
    \      result.push(need);\n            result.push(remaining - need);\n      \
    \      return result;\n        }\n    }\n    return result;\n}\n", "    if(remaining\
    \ < need){\n        return [number + need, 0];\n    }\n    else{\n        return\
    \ [number + need, remaining - need];\n    }\n}\n", "    var result = [];\n   \
    \ if(remaining < need){\n        result.push(remaining);\n        result.push(0);\n\
    \    }else{\n        result.push(need);\n        result.push(remaining - need);\n\
    \    }\n    return result;\n}\n", "  if(remaining < need){\n    return [number\
    \ + need, 0];\n  }\n  return [number + need, remaining - need];\n}\n", "  if(remaining\
    \ < need){\n    return [number + need, 0];\n  }\n  return [number + need, remaining\
    \ - need];\n}\n", "    let eaten = number;\n    let left = remaining - number;\n\
    \    if(left < need){\n        eaten = left;\n        left = 0;\n    }\n    return\
    \ [eaten, left];\n}\n", "    var result = [];\n    var eaten = 0;\n    var left\
    \ = 0;\n    if(need > remaining){\n        eaten = remaining;\n        left =\
    \ 0;\n    }else{\n        eaten = need;\n        left = remaining - need;\n  \
    \  }\n    result.push(eaten);\n    result.push(left);\n    return result;\n}\n",
  "    var result = [];\n    if(remaining < need){\n        result[0] = number + remaining;\n\
    \        result[1] = 0;\n    }else{\n        result[0] = number + need;\n    \
    \    result[1] = remaining - need;\n    }\n    return result;\n}\n", "    let\
    \ eaten = number;\n    let left = need - eaten;\n    let result = [];\n    if\
    \ (left > remaining) {\n        result.push(left);\n        result.push(0);\n\
    \    } else {\n        result.push(left);\n        result.push(remaining - left);\n\
    \    }\n    return result;\n}\n", "    var result = [];\n    var eaten = 0;\n\
    \    var left = 0;\n    if(remaining >= need){\n        result.push(need);\n \
    \       result.push(remaining - need);\n        return result;\n    }\n    while(remaining\
    \ > 0){\n        if(remaining >= need){\n            result.push(need);\n    \
    \        result.push(remaining - need);\n            return result;\n        }\n\
    \        if(remaining < need){\n            result.push(remaining);\n        \
    \    result.push(need - remaining);\n            return result;\n        }\n \
    \       if(remaining == need){\n            result.push(need);\n            result.push(remaining\
    \ - need);\n            return result;\n        }\n        if(remaining > need){\n\
    \            result.push(need);\n            result.push(remaining - need);\n\
    \            return result;\n        }\n        if(remaining < need){\n      \
    \      result.push(need);\n            result.push(remaining - need);\n      \
    \      return result;\n        }\n    }\n    return result;\n}\n", "    var result\
    \ = [];\n    if(remaining < need){\n        result.push(remaining);\n        result.push(0);\n\
    \    }else{\n        result.push(need);\n        result.push(remaining - need);\n\
    \    }\n    return result;\n}\n", "    if(remaining < need){\n        return [number\
    \ + need, 0];\n    }\n    else{\n        return [number + need, remaining - need];\n\
    \    }\n}\n", "  var eaten = number;\n  var left = need - eaten;\n  if (left <\
    \ 0) {\n    left = 0;\n  }\n  return [left, remaining - left];\n}\n", "  var result\
    \ = [];\n  if(remaining >= need){\n    result.push(number + need);\n    result.push(remaining\
    \ - need);\n  }else{\n    result.push(number + remaining);\n    result.push(0);\n\
    \  }\n  return result;\n}\n", "  var eaten = number;\n  var left = need - eaten;\n\
    \  var result = [];\n  if(left < remaining){\n    result.push(left);\n    result.push(remaining\
    \ - left);\n  }else{\n    result.push(left);\n    result.push(0);\n  }\n  return\
    \ result;\n}\n", "    let result = [];\n    let eaten = 0;\n    let left = 0;\n\
    \    if(need > remaining){\n        eaten = remaining;\n        left = 0;\n  \
    \  }else{\n        eaten = need;\n        left = remaining - need;\n    }\n  \
    \  result.push(eaten);\n    result.push(left);\n    return result;\n}\n", "  \
    \  var result = [];\n    if(remaining >= need){\n        result[0] = number +\
    \ need;\n        result[1] = remaining - need;\n    }else{\n        result[0]\
    \ = number + remaining;\n        result[1] = 0;\n    }\n    return result;\n}\n",
  "    let result = [];\n    let eaten = 0;\n    let left = 0;\n    if(need > remaining){\n\
    \        eaten = remaining;\n        left = 0;\n    }else{\n        eaten = need;\n\
    \        left = remaining - need;\n    }\n    result.push(eaten);\n    result.push(left);\n\
    \    return result;\n}\n", "    var result = [];\n    if(remaining < need){\n\
    \        result[0] = remaining;\n        result[1] = 0;\n    }else{\n        result[0]\
    \ = need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\n", "    if(remaining < need){\n        return [number + need, 0];\n    }\n\
    \    return [number + need, remaining - need];\n}\n", "    let result = [];\n\
    \    let eaten = number;\n    let left = remaining - number;\n    if (need > left)\
    \ {\n        result.push(left);\n        result.push(0);\n    } else {\n     \
    \   result.push(need);\n        result.push(left - need);\n    }\n    return result;\n\
    }\n", "    if(remaining < need){\n        return [number + need, 0];\n    }\n\
    \    else{\n        return [number + need, remaining - need];\n    }\n}\n", " \
    \   var result = [];\n    if(remaining < need){\n        result[0] = number +\
    \ need - remaining;\n        result[1] = 0;\n    }else{\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\n", "  let eaten = number;\n  let left = need - eaten;\n  let result = [];\n\
    \  if(left > 0){\n    if(left < remaining){\n      result.push(left);\n      result.push(remaining\
    \ - left);\n    }else{\n      result.push(left);\n      result.push(remaining);\n\
    \    }\n  }else{\n    result.push(0);\n    result.push(remaining);\n  }\n  return\
    \ result;\n}\n", "    var eaten = 0;\n    var left = 0;\n    if(number >= need){\n\
    \        eaten = need;\n        left = 0;\n    }else{\n        eaten = number;\n\
    \        left = need - number;\n    }\n    if(left > remaining){\n        eaten\
    \ = eaten + remaining;\n        left = 0;\n    }\n    return [eaten, left];\n\
    }\n", "    if(remaining < need){\n        return [number + need, 0];\n    }\n\
    \    else{\n        return [number + need, remaining - need];\n    }\n}\n", " \
    \   var result = [];\n    if(number >= need){\n        result.push(number - need);\n\
    \        result.push(remaining - need);\n    }else{\n        result.push(number);\n\
    \        result.push(remaining);\n    }\n    return result;\n}\n", "  if (remaining\
    \ < need) {\n    return [number + need, 0];\n  } else {\n    return [number +\
    \ need, remaining - need];\n  }\n}\n", "    var eaten = 0;\n    var left = 0;\n\
    \    if(number >= need){\n        eaten = number - need;\n        left = need;\n\
    \    }\n    else{\n        eaten = number;\n        left = need - number;\n  \
    \  }\n    return [eaten, left];\n}\n", "    let result = [];\n    if(remaining\
    \ < need){\n        result.push(remaining);\n        result.push(0);\n    }else{\n\
    \        result.push(need);\n        result.push(remaining - need);\n    }\n \
    \   return result;\n}\n", "    if(remaining < need){\n        return [number +\
    \ need, 0];\n    }\n    else{\n        return [number + need, remaining - need];\n\
    \    }\n}\n", "  var eaten = number;\n  var left = need - eaten;\n  var result\
    \ = [];\n  if(left > 0){\n    result[0] = eaten + left;\n    result[1] = left;\n\
    \  }else{\n    result[0] = eaten;\n    result[1] = 0;\n  }\n  return result;\n\
    }\n", "  var result = [];\n  if(remaining < need){\n    result.push(remaining);\n\
    \    result.push(0);\n  }else{\n    result.push(need);\n    result.push(remaining\
    \ - need);\n  }\n  return result;\n}\n", "    var result = [];\n    if(remaining\
    \ < need){\n        result.push(remaining);\n        result.push(0);\n    }else{\n\
    \        result.push(need);\n        result.push(remaining - need);\n    }\n \
    \   return result;\n}\n", "    var eaten = number;\n    var left = need - eaten;\n\
    \    var result = [];\n    if(left < 0){\n        result.push(left);\n       \
    \ result.push(0);\n    }else if(left > 0){\n        result.push(left);\n     \
    \   result.push(remaining - left);\n    }else{\n        result.push(0);\n    \
    \    result.push(0);\n    }\n    return result;\n}\n", "  let result = [];\n \
    \ let eaten = number;\n  let left = remaining;\n  while(eaten < need){\n    if(left\
    \ > 0){\n      result.push(eaten);\n      left--;\n      eaten++;\n    }else{\n\
    \      result.push(eaten);\n      result.push(left);\n      return result;\n \
    \   }\n  }\n  result.push(eaten);\n  result.push(left);\n  return result;\n}\n",
  "    var result = [];\n    if(remaining < need){\n        result[0] = remaining;\n\
    \        result[1] = 0;\n    }else{\n        result[0] = need;\n        result[1]\
    \ = remaining - need;\n    }\n    return result;\n}\n", "    var result = [];\n\
    \    if(remaining < need){\n        result.push(remaining);\n        result.push(0);\n\
    \    }else{\n        result.push(need);\n        result.push(remaining - need);\n\
    \    }\n    return result;\n}\n", "    let result = [];\n    let eaten = 0;\n\
    \    let left = 0;\n    if(number >= need){\n        result.push(number - need);\n\
    \        result.push(remaining);\n    }else{\n        if(remaining >= need){\n\
    \            result.push(need);\n            result.push(remaining - need);\n\
    \        }else{\n            result.push(need);\n            result.push(remaining);\n\
    \        }\n    }\n    return result;\n}\n", "    if(number >= need){\n      \
    \  return [number + need, remaining - need];\n    }\n    if(remaining < need){\n\
    \        return [number, 0];\n    }\n    return [number, remaining];\n}\n", " \
    \ if(remaining < need){\n    return [number + need, 0];\n  }\n  return [number\
    \ + need, remaining - need];\n}\n", "    var result = [];\n    if(remaining <\
    \ need){\n        result[0] = remaining;\n        result[1] = 0;\n    }else{\n\
    \        result[0] = need;\n        result[1] = remaining - need;\n    }\n   \
    \ return result;\n}\n", "    let result = [];\n    let eaten = number;\n    let\
    \ left = need - eaten;\n    let left_remaining = remaining - left;\n    if(left_remaining\
    \ < 0){\n        left = need;\n        left_remaining = 0;\n    }\n    result.push(eaten);\n\
    \    result.push(left);\n    return result;\n}\n", "    var result = [];\n   \
    \ if(remaining < need){\n        result[0] = remaining;\n        result[1] = 0;\n\
    \    }else{\n        result[0] = need;\n        result[1] = remaining - need;\n\
    \    }\n    return result;\n}\n", "    var result = [];\n    if(remaining < need){\n\
    \        result.push(remaining);\n        result.push(0);\n    }else{\n      \
    \  result.push(need);\n        result.push(remaining - need);\n    }\n    return\
    \ result;\n}\n", "    var result = [0, 0];\n    if(remaining < need){\n      \
    \  result[0] = remaining;\n        result[1] = 0;\n    }else{\n        result[0]\
    \ = need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\n", "    var result = [];\n    if(need <= remaining){\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }else{\n        result[0]\
    \ = number + remaining;\n        result[1] = 0;\n    }\n    return result;\n}\n",
  "    var result = [];\n    if(remaining < need){\n        result.push(remaining);\n\
    \        result.push(0);\n        return result;\n    }\n    result.push(number\
    \ + need);\n    result.push(remaining - need);\n    return result;\n}\n", "  \
    \  let result = [];\n    let eaten = number;\n    let left = need - eaten;\n \
    \   if(left > remaining){\n        result.push(left);\n        result.push(0);\n\
    \    }else{\n        result.push(left);\n        result.push(remaining - left);\n\
    \    }\n    return result;\n}\n", "  if(number < need){\n    return [number, remaining];\n\
    \  }\n  else if(number > need){\n    return [number - need, remaining - need];\n\
    \  }\n  else{\n    return [number, 0];\n  }\n}\n", "    var result = [];\n   \
    \ if(remaining < need){\n        result[0] = remaining;\n        result[1] = 0;\n\
    \    }else{\n        result[0] = need;\n        result[1] = remaining - need;\n\
    \    }\n    return result;\n}\n", "    if(remaining < need){\n        return [number\
    \ + need, 0];\n    }\n    else{\n        return [number + need, remaining - need];\n\
    \    }\n}\n", "    let eaten = 0;\n    let eatenNeed = 0;\n    let left = 0;\n\
    \    if(number < need){\n        eaten = number;\n        eatenNeed = need - number;\n\
    \        left = remaining - eatenNeed;\n    }else{\n        eaten = number - need;\n\
    \        left = remaining - eaten;\n    }\n    return [eaten, left];\n}\n", " \
    \   var result = [];\n    if(remaining < need){\n        result[0] = remaining;\n\
    \        result[1] = 0;\n    }else{\n        result[0] = need;\n        result[1]\
    \ = remaining - need;\n    }\n    return result;\n}\n", "  var eaten = number;\n\
    \  var left = need - eaten;\n  var result = [];\n  if(left < 0){\n    result.push(left);\n\
    \    result.push(remaining);\n  }else{\n    result.push(eaten);\n    result.push(left);\n\
    \  }\n  return result;\n}\n", "    var result = [];\n    if(remaining < need){\n\
    \        result[0] = number + need - remaining;\n        result[1] = 0;\n    }else{\n\
    \        result[0] = number + need;\n        result[1] = remaining - need;\n \
    \   }\n    return result;\n}\n", "    var result = [];\n    if(remaining < need){\n\
    \        result.push(remaining);\n        result.push(0);\n    }else{\n      \
    \  result.push(need);\n        result.push(remaining - need);\n    }\n    return\
    \ result;\n}\n", "    let result = [];\n    let eaten = number;\n    let left\
    \ = need;\n    let remaining_left = remaining;\n    while(left > 0){\n       \
    \ if(left > eaten){\n            left -= eaten;\n            result.push(eaten);\n\
    \            eaten = 0;\n        }else{\n            eaten -= left;\n        \
    \    result.push(left);\n            left = 0;\n        }\n    }\n    result.push(eaten);\n\
    \    result.push(left);\n    return result;\n}\n", "    var result = [];\n   \
    \ if(remaining < need){\n        result[0] = number + remaining;\n        result[1]\
    \ = 0;\n    }else{\n        result[0] = number + need;\n        result[1] = remaining\
    \ - need;\n    }\n    return result;\n}\n", "    let eaten = number;\n    let\
    \ left = need - eaten;\n    if(left > remaining){\n        eaten += remaining;\n\
    \        left = 0;\n    }\n    return [eaten, left];\n}\n", "    var result =\
    \ [];\n    if(need > remaining){\n        result.push(number + remaining);\n \
    \       result.push(0);\n    }else{\n        result.push(number + need);\n   \
    \     result.push(remaining - need);\n    }\n    return result;\n}\n", "    let\
    \ eaten = number;\n    let left = remaining - number;\n    if(need > left){\n\
    \        eaten = left;\n        left = 0;\n    }\n    return [eaten, left];\n\
    }\n", "    var result = [];\n    if(remaining < need){\n        result[0] = remaining;\n\
    \        result[1] = 0;\n    }else{\n        result[0] = need;\n        result[1]\
    \ = remaining - need;\n    }\n    return result;\n}\n", "    var result = [];\n\
    \    if(remaining < need){\n        result[0] = remaining;\n        result[1]\
    \ = 0;\n    }else{\n        result[0] = number + need;\n        result[1] = remaining\
    \ - need;\n    }\n    return result;\n}\n", "    var result = [];\n    if(remaining\
    \ < need){\n        result.push(remaining);\n        result.push(0);\n       \
    \ return result;\n    }\n    result.push(number + need);\n    result.push(remaining\
    \ - need);\n    return result;\n}\n", "    var result = [];\n    if(remaining\
    \ < need){\n        result[0] = remaining;\n        result[1] = 0;\n    }else{\n\
    \        result[0] = number + need;\n        result[1] = remaining - need;\n \
    \   }\n    return result;\n}\n", "    var result = [];\n    if(remaining < need){\n\
    \        result[0] = remaining;\n        result[1] = 0;\n    }else{\n        result[0]\
    \ = need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\n", "    var result = [];\n    var eaten = 0;\n    var left = 0;\n    if(need\
    \ > remaining){\n        result.push(need);\n        result.push(0);\n       \
    \ return result;\n    }\n    while(need > 0){\n        if(need > remaining){\n\
    \            eaten = remaining;\n            left = 0;\n        }else{\n     \
    \       eaten = need;\n            left = need - eaten;\n        }\n        result.push(eaten);\n\
    \        result.push(left);\n        need -= eaten;\n        remaining -= eaten;\n\
    \    }\n    return result;\n}\n", "    if(number >= need){\n        return [number\
    \ - need, remaining];\n    }\n    else if(number > 0){\n        return [number,\
    \ remaining - number];\n    }\n    else{\n        return [0, remaining];\n   \
    \ }\n}\n", "    let eaten = number;\n    let left = remaining - number;\n    if(need\
    \ > left){\n        eaten = left;\n        left = 0;\n    }\n    return [eaten,\
    \ left];\n}\n", "    var result = [];\n    if(remaining < need){\n        result.push(remaining);\n\
    \        result.push(0);\n    }else{\n        result.push(need);\n        result.push(remaining\
    \ - need);\n    }\n    return result;\n}\n", "    var result = [];\n    if(remaining\
    \ < need){\n        result.push(remaining);\n        result.push(0);\n    }else{\n\
    \        result.push(need);\n        result.push(remaining - need);\n    }\n \
    \   return result;\n}\n", "    var result = [];\n    if(number >= need){\n   \
    \     result.push(number - need);\n        result.push(remaining - need);\n  \
    \  }else{\n        result.push(number);\n        result.push(remaining);\n   \
    \ }\n    return result;\n}\n", "    var result = [];\n    if(remaining < need){\n\
    \        result.push(remaining);\n        result.push(0);\n    }else{\n      \
    \  result.push(need);\n        result.push(remaining - need);\n    }\n    return\
    \ result;\n}\n", "    var result = [];\n    if(remaining >= need){\n        result.push(number\
    \ + need);\n        result.push(remaining - need);\n    }else{\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    return result;\n}\n", " \
    \ if (number >= need) {\n    return [number + need, remaining - need];\n  } else\
    \ if (number + need > remaining) {\n    return [number + need, 0];\n  } else {\n\
    \    return [number + need, remaining - number];\n  }\n}\n", "    var eaten =\
    \ number;\n    var left = remaining - number;\n    if(need > left){\n        eaten\
    \ = left;\n        left = 0;\n    }\n    return [eaten, left];\n}\n", "    var\
    \ result = [];\n    if(remaining < need){\n        result[0] = remaining;\n  \
    \      result[1] = 0;\n    }else{\n        result[0] = need;\n        result[1]\
    \ = remaining - need;\n    }\n    return result;\n}\n", "    let result = [];\n\
    \    let eaten = 0;\n    let left = 0;\n    if(need > remaining){\n        eaten\
    \ = remaining;\n        left = 0;\n    }else{\n        eaten = need;\n       \
    \ left = remaining - need;\n    }\n    result.push(eaten);\n    result.push(left);\n\
    \    return result;\n}\n", "    var result = [number, remaining];\n    if(remaining\
    \ < need){\n        result[1] = 0;\n    }else{\n        result[1] = need - remaining;\n\
    \    }\n    return result;\n}\n", "  var result = [];\n  if(remaining < need){\n\
    \    result.push(remaining);\n    result.push(0);\n  }else{\n    result.push(need);\n\
    \    result.push(remaining - need);\n  }\n  return result;\n}\n", "    var result\
    \ = [];\n    if(remaining < need){\n        result.push(remaining);\n        result.push(0);\n\
    \    }else{\n        result.push(need);\n        result.push(remaining - need);\n\
    \    }\n    return result;\n}\n", "    var result = [];\n    if(remaining < need){\n\
    \        result.push(remaining);\n        result.push(0);\n    }else{\n      \
    \  result.push(need);\n        result.push(remaining - need);\n    }\n    return\
    \ result;\n}\n", "    let eaten = number;\n    let left = remaining - number;\n\
    \    let eaten_need = 0;\n    if(left < need){\n        eaten_need = left;\n \
    \       left = 0;\n    }else{\n        eaten_need = need;\n    }\n    return [eaten\
    \ + eaten_need, left];\n}\n", "    if(remaining < need){\n        return [number\
    \ + need, 0];\n    }\n    else{\n        return [number + need, remaining - need];\n\
    \    }\n}\n", "    let eaten = number;\n    let eatenNeed = need;\n    let remainingNeed\
    \ = remaining;\n    if(remainingNeed > 0){\n        if(remainingNeed < eatenNeed){\n\
    \            eaten = remainingNeed;\n            eatenNeed = remainingNeed;\n\
    \            remainingNeed = 0;\n        }\n        else{\n            remainingNeed\
    \ = remainingNeed - eatenNeed;\n        }\n    }\n    return [eaten, remainingNeed];\n\
    }\n", "  var result = [];\n  if(remaining < need){\n    result[0] = remaining;\n\
    \    result[1] = 0;\n  }else{\n    result[0] = need;\n    result[1] = remaining\
    \ - need;\n  }\n  return result;\n}\n", "    let eaten = 0;\n    let eatenNeed\
    \ = 0;\n    let left = 0;\n    if(remaining < need){\n        eaten = remaining;\n\
    \        left = 0;\n    }\n    else{\n        eaten = need;\n        left = remaining\
    \ - need;\n    }\n    return [eaten + eatenNeed, left];\n}\n", "    if(number\
    \ < need){\n        return [number, remaining];\n    }\n    if(number >= need){\n\
    \        return [number - need, 0];\n    }\n    if(number < need && remaining\
    \ < need){\n        return [number, remaining];\n    }\n    if(number < need &&\
    \ remaining >= need){\n        return [number, remaining - need];\n    }\n   \
    \ if(number >= need && remaining < need){\n        return [number - need, remaining];\n\
    \    }\n    if(number >= need && remaining >= need){\n        return [number -\
    \ need, remaining - need];\n    }\n}\n", "    if(remaining < need){\n        return\
    \ [number + need, 0];\n    }\n    else{\n        return [number + need, remaining\
    \ - need];\n    }\n}\n", "    if(remaining < need){\n        return [number +\
    \ need, 0];\n    }\n    else{\n        return [number + need, remaining - need];\n\
    \    }\n}\n", "    var result = [];\n    if(remaining < need){\n        result.push(remaining);\n\
    \        result.push(0);\n    }else{\n        result.push(need);\n        result.push(remaining\
    \ - need);\n    }\n    return result;\n}\n", "    var result = [];\n    if(remaining\
    \ < need){\n        result[0] = remaining;\n        result[1] = 0;\n    }else{\n\
    \        result[0] = need;\n        result[1] = remaining - need;\n    }\n   \
    \ return result;\n}\n", "  var result = [];\n  if(remaining < need){\n    result.push(remaining);\n\
    \    result.push(0);\n  }else{\n    result.push(need);\n    result.push(remaining\
    \ - need);\n  }\n  return result;\n}\n", "    var result = [];\n    if(remaining\
    \ < need){\n        result[0] = remaining;\n        result[1] = 0;\n    }else{\n\
    \        result[0] = need;\n        result[1] = remaining - need;\n    }\n   \
    \ return result;\n}\n", "    var result = [];\n    if(remaining < need){\n   \
    \     result[0] = remaining;\n        result[1] = 0;\n    }else{\n        result[0]\
    \ = need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\n", "    var result = [];\n    if(remaining < need){\n        result.push(remaining);\n\
    \        result.push(0);\n    }else{\n        result.push(need);\n        result.push(remaining\
    \ - need);\n    }\n    return result;\n}\n", "    var eaten = 0;\n    var left\
    \ = 0;\n    if(remaining >= need){\n        eaten = need;\n        left = remaining\
    \ - need;\n    }else{\n        eaten = remaining;\n        left = 0;\n    }\n\
    \    return [eaten, left];\n}\n", "    var eaten = 0,\n        left = 0,\n   \
    \     i = 0;\n    if(number < need){\n        eaten = number;\n        left =\
    \ need - number;\n    }else{\n        eaten = need;\n        left = 0;\n    }\n\
    \    for(i = 0; i < eaten; i++){\n        remaining -= 1;\n    }\n    for(i =\
    \ 0; i < left; i++){\n        remaining -= 1;\n    }\n    return [eaten, remaining];\n\
    }\n", "  if(remaining < need){\n    return [number + need, 0];\n  }\n  else{\n\
    \    return [number + need, remaining - need];\n  }\n}\n", "    var eaten = number;\n\
    \    var left = need - eaten;\n    var result = [];\n    if(left < 0){\n     \
    \   result.push(left);\n        result.push(0);\n    }else if(left > 0){\n   \
    \     result.push(left);\n        result.push(remaining - left);\n    }else{\n\
    \        result.push(0);\n        result.push(0);\n    }\n    return result;\n\
    }\n", "    var result = [];\n    if(remaining < need){\n        result[0] = remaining;\n\
    \        result[1] = 0;\n    }else{\n        result[0] = need;\n        result[1]\
    \ = remaining - need;\n    }\n    return result;\n}\n", "    var result = [];\n\
    \    var eaten = 0;\n    var left = 0;\n    if(remaining < need){\n        left\
    \ = remaining;\n    }else{\n        left = need;\n    }\n    result.push(eaten);\n\
    \    result.push(left);\n    return result;\n}\n", "    var result = [];\n   \
    \ if(remaining < need){\n        result.push(remaining);\n        result.push(0);\n\
    \    }else{\n        result.push(need);\n        result.push(remaining - need);\n\
    \    }\n    return result;\n}\n", "    let result = [];\n    let eaten = 0;\n\
    \    let left = 0;\n    if(number < need){\n        result.push(number);\n   \
    \     result.push(need - number);\n        return result;\n    }\n    while(remaining\
    \ > 0){\n        if(remaining >= need){\n            left = need;\n          \
    \  need = 0;\n        }else{\n            left = remaining;\n            need\
    \ -= remaining;\n        }\n        eaten += left;\n        remaining -= left;\n\
    \    }\n    result.push(eaten);\n    result.push(remaining);\n    return result;\n\
    }\n", "    var result = [];\n    if(remaining < need){\n        result[0] = remaining;\n\
    \        result[1] = 0;\n    }else{\n        result[0] = need;\n        result[1]\
    \ = remaining - need;\n    }\n    return result;\n}\n", "    var result = [];\n\
    \    if(remaining < need){\n        result[0] = number + remaining;\n        result[1]\
    \ = 0;\n    }else{\n        result[0] = number + need;\n        result[1] = remaining\
    \ - need;\n    }\n    return result;\n}\n", "    var result = [];\n    if(remaining\
    \ < need){\n        result[0] = number + need - remaining;\n        result[1]\
    \ = 0;\n    }else{\n        result[0] = number + need;\n        result[1] = remaining\
    \ - need;\n    }\n    return result;\n}\n", "    var result = [];\n    if(need\
    \ > remaining){\n        result.push(need - remaining);\n        result.push(0);\n\
    \    }else{\n        result.push(need);\n        result.push(remaining - need);\n\
    \    }\n    return result;\n}\n", "    var result = [];\n    if(remaining < need){\n\
    \        result[0] = remaining;\n        result[1] = 0;\n    }else{\n        result[0]\
    \ = need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\n", "    let result = [];\n    let eaten = 0;\n    let left = 0;\n    if(need\
    \ > remaining){\n        eaten = remaining;\n        left = 0;\n    }else{\n \
    \       eaten = need;\n        left = remaining - need;\n    }\n    result.push(eaten);\n\
    \    result.push(left);\n    return result;\n}\n", "    let result = [];\n   \
    \ let eaten = 0;\n    let left = 0;\n    if(need > remaining){\n        result.push(need);\n\
    \        result.push(0);\n        return result;\n    }\n    if(need <= remaining){\n\
    \        result.push(need);\n        result.push(remaining - need);\n        return\
    \ result;\n    }\n    if(need > remaining){\n        result.push(need);\n    \
    \    result.push(0);\n        return result;\n    }\n}\n", "    let result = [];\n\
    \    if(remaining < need){\n        result.push(remaining);\n        result.push(0);\n\
    \    }else{\n        result.push(need);\n        result.push(remaining - need);\n\
    \    }\n    return result;\n}\n", "    var result = [];\n    if(remaining < need){\n\
    \        result[0] = remaining;\n        result[1] = 0;\n    }else{\n        result[0]\
    \ = need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\n", "    let eaten = number;\n    let left = remaining - number;\n    if(need\
    \ > left){\n        eaten = left;\n        left = 0;\n    }\n    return [eaten,\
    \ left];\n}\n", "    let result = [];\n    let eaten = 0;\n    let left = 0;\n\
    \    if(number >= need){\n        result.push(number - need);\n        result.push(remaining\
    \ - need);\n        return result;\n    }\n    if(number < need){\n        result.push(number);\n\
    \        result.push(need - number);\n        return result;\n    }\n    if(number\
    \ === need){\n        result.push(number);\n        result.push(remaining - need);\n\
    \        return result;\n    }\n    if(number > need){\n        left = number\
    \ - need;\n        result.push(need);\n        result.push(left);\n        return\
    \ result;\n    }\n}\n", "    var result = [];\n    if(remaining < need){\n   \
    \     result[0] = remaining;\n        result[1] = 0;\n    }else{\n        result[0]\
    \ = need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\n", "    let result = [];\n    let eaten = 0;\n    let left = 0;\n    if(number\
    \ >= need){\n        result.push(number - need);\n        result.push(remaining\
    \ - need);\n        return result;\n    }\n    if(number > 0){\n        eaten\
    \ = number;\n        left = need - eaten;\n        result.push(eaten);\n     \
    \   result.push(left);\n        return result;\n    }\n    if(need > 0){\n   \
    \     eaten = need;\n        left = need - eaten;\n        result.push(eaten);\n\
    \        result.push(left);\n        return result;\n    }\n    result.push(eaten);\n\
    \    result.push(left);\n    return result;\n}\n", "    if(remaining < need){\n\
    \        return [number + need, 0];\n    }\n    else{\n        return [number\
    \ + need, remaining - need];\n    }\n}\n", "  var result = [];\n  if(remaining\
    \ < need){\n    result.push(remaining);\n    result.push(0);\n  }else{\n    result.push(need);\n\
    \    result.push(remaining - need);\n  }\n  return result;\n}\n", "    let eaten\
    \ = number;\n    let left = remaining - number;\n    if(need > left){\n      \
    \  eaten = left;\n        left = 0;\n    }\n    return [eaten, left];\n}\n", " \
    \   let eaten = number;\n    let left = remaining - number;\n    if(need > left){\n\
    \        eaten = left;\n        left = 0;\n    }\n    return [eaten, left];\n\
    }\n", "    var result = [];\n    if(remaining < need){\n        result[0] = number\
    \ + need - remaining;\n        result[1] = 0;\n    }else{\n        result[0] =\
    \ number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\n", "    var result = [];\n    var eaten = 0;\n    var left = 0;\n    if(remaining\
    \ < need){\n        eaten = remaining;\n        left = 0;\n    }else{\n      \
    \  eaten = need;\n        left = remaining - need;\n    }\n    result.push(eaten);\n\
    \    result.push(left);\n    return result;\n}\n", "  if(number >= need){\n  \
    \  return [number - need, remaining];\n  }\n  else if(number < need && number\
    \ < remaining){\n    return [number, remaining - number];\n  }\n  else if(number\
    \ < need && number >= remaining){\n    return [number, 0];\n  }\n  else if(number\
    \ >= need && number < remaining){\n    return [need, remaining - number];\n  }\n\
    \  else if(number >= need && number >= remaining){\n    return [need, 0];\n  }\n\
    }\n", "    var result = [];\n    if(remaining < need){\n        result[0] = remaining;\n\
    \        result[1] = 0;\n    }else{\n        result[0] = need;\n        result[1]\
    \ = remaining - need;\n    }\n    return result;\n}\n", "    var result = [];\n\
    \    if(remaining < need){\n        result[0] = remaining;\n        result[1]\
    \ = 0;\n    }else{\n        result[0] = need;\n        result[1] = remaining -\
    \ need;\n    }\n    return result;\n}\n", "    var result = [];\n    if(number\
    \ >= need){\n        result[0] = number - need;\n        result[1] = remaining\
    \ - need;\n    }else{\n        result[0] = number;\n        result[1] = remaining;\n\
    \    }\n    return result;\n}\n", "    var result = [];\n    if(remaining < need){\n\
    \        result.push(remaining);\n        result.push(0);\n    }else{\n      \
    \  result.push(need);\n        result.push(remaining - need);\n    }\n    return\
    \ result;\n}\n", "    let result = [];\n    let eaten = 0;\n    let left = 0;\n\
    \    if(number >= need){\n        result.push(number - need);\n        result.push(remaining\
    \ - need);\n        return result;\n    }\n    if(number < need){\n        result.push(number);\n\
    \        result.push(need - number);\n        return result;\n    }\n    if(number\
    \ === need){\n        result.push(number);\n        result.push(remaining - need);\n\
    \        return result;\n    }\n    if(number > need){\n        left = number\
    \ - need;\n        result.push(number);\n        result.push(need);\n        return\
    \ result;\n    }\n    if(number === 0){\n        result.push(number);\n      \
    \  result.push(remaining);\n        return result;\n    }\n    if(number < 0){\n\
    \        result.push(number);\n        result.push(need);\n        return result;\n\
    \    }\n}\n", "    let eaten = number;\n    let left = remaining - number;\n \
    \   if (need > left) {\n        eaten = left;\n        left = 0;\n    }\n    return\
    \ [eaten, left];\n}\n", "    if(remaining < need){\n        return [number + need,\
    \ 0];\n    }\n    else{\n        return [number + need, remaining - need];\n \
    \   }\n}\n", "    if(remaining < need){\n        return [number + need, 0];\n\
    \    }\n    return [number + need, remaining - need];\n}\n", "    let result =\
    \ [];\n    let eaten = 0;\n    let left = 0;\n    if(need > remaining){\n    \
    \    eaten = remaining;\n        left = 0;\n    }else{\n        eaten = need;\n\
    \        left = remaining - need;\n    }\n    result.push(eaten);\n    result.push(left);\n\
    \    return result;\n}\n", "    let eaten = number,\n        left = need - number;\n\
    \    if(left < 0){\n        left = 0;\n        eaten = need;\n    }\n    return\
    \ [eaten, left];\n}\n", "    var eaten = 0;\n    var left = 0;\n    if(remaining\
    \ >= need){\n        eaten = need;\n        left = remaining - need;\n    }else{\n\
    \        eaten = remaining;\n        left = 0;\n    }\n    return [eaten, left];\n\
    }\n", "    var result = [];\n    if(remaining >= need){\n        result.push(number\
    \ + need);\n        result.push(remaining - need);\n    }else{\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    return result;\n}\n", " \
    \ let eaten = number;\n  let left = remaining - number;\n  if(need > left){\n\
    \    eaten = left;\n    left = 0;\n  }\n  return [eaten, left];\n}\n", "    if(remaining\
    \ < need){\n        return [number + need, 0];\n    }\n    else if(remaining ==\
    \ need){\n        return [number + need, remaining];\n    }\n    else{\n     \
    \   return [number + need, remaining - need];\n    }\n}\n", "    let eaten = number;\n\
    \    let left = remaining - number;\n    let eaten_need = 0;\n    if(left < need){\n\
    \        eaten_need = left;\n        left = 0;\n    }else{\n        eaten_need\
    \ = need;\n    }\n    return [eaten + eaten_need, left];\n}\n", "  var eaten =\
    \ number;\n  var left = remaining - number;\n  if(left < need){\n    eaten = left;\n\
    \  }\n  return [eaten, left];\n}\n", "  if(remaining < need){\n    return [number\
    \ + need, 0];\n  }\n  else{\n    return [number + need, remaining - need];\n \
    \ }\n}\n", "    var result = [];\n    if(remaining < need){\n        result[0]\
    \ = remaining;\n        result[1] = 0;\n    }else{\n        result[0] = need;\n\
    \        result[1] = remaining - need;\n    }\n    return result;\n}\n", "   \
    \ let eaten = number;\n    let left = remaining - number;\n    if(need > left){\n\
    \        eaten = left;\n        left = 0;\n    }\n    return [eaten, left];\n\
    }\n", "    var result = [0, 0];\n    if(remaining < need){\n        result[0]\
    \ = remaining;\n        result[1] = 0;\n    }else{\n        result[0] = need;\n\
    \        result[1] = remaining - need;\n    }\n    return result;\n}\n", "  var\
    \ result = [];\n  if(number >= need){\n    result.push(number - need);\n    result.push(remaining\
    \ - need);\n  }else{\n    result.push(number);\n    result.push(remaining);\n\
    \  }\n  return result;\n}\n", "  var result = [];\n  if(remaining < need){\n \
    \   result[0] = remaining;\n    result[1] = 0;\n  }else{\n    result[0] = need;\n\
    \    result[1] = remaining - need;\n  }\n  return result;\n}\n", "    var result\
    \ = [];\n    if(remaining < need){\n        result[0] = remaining;\n        result[1]\
    \ = 0;\n    }else{\n        result[0] = number + need;\n        result[1] = remaining\
    \ - need;\n    }\n    return result;\n}\n", "    var result = [];\n    if(remaining\
    \ < need){\n        result.push(remaining);\n        result.push(0);\n       \
    \ return result;\n    }\n    result.push(number + need);\n    result.push(remaining\
    \ - need);\n    return result;\n}\n", "    let eaten = number;\n    let left =\
    \ need - eaten;\n    let result = [];\n    if(left > 0){\n        if(left < remaining){\n\
    \            result.push(left);\n            result.push(remaining - left);\n\
    \        }else{\n            result.push(left);\n            result.push(0);\n\
    \        }\n    }else{\n        result.push(0);\n        result.push(remaining);\n\
    \    }\n    return result;\n}\n", "    let eaten = number;\n    let left = remaining\
    \ - number;\n    if(need > left){\n        eaten = left;\n        left = 0;\n\
    \    }\n    return [eaten, left];\n}\n", "    var result = [];\n    var eaten\
    \ = 0;\n    var left = 0;\n    if(need > remaining){\n        eaten = remaining;\n\
    \        left = 0;\n    }else{\n        eaten = need;\n        left = remaining\
    \ - need;\n    }\n    result.push(eaten);\n    result.push(left);\n    return\
    \ result;\n}\n", "  var result = [];\n  if(remaining < need){\n    result[0] =\
    \ remaining;\n    result[1] = 0;\n  }else{\n    result[0] = need;\n    result[1]\
    \ = remaining - need;\n  }\n  return result;\n}\n", "    var result = [];\n  \
    \  if(remaining < need){\n        result[0] = remaining;\n        result[1] =\
    \ 0;\n    }else{\n        result[0] = need;\n        result[1] = remaining - need;\n\
    \    }\n    return result;\n}\n", "    if(remaining < need){\n        return [number\
    \ + need, 0];\n    }\n    return [number + need, remaining - need];\n}\n", " \
    \   let result = [];\n    let eaten = 0;\n    let left = 0;\n    if(need > remaining){\n\
    \        eaten = remaining;\n        left = 0;\n    }else{\n        eaten = need;\n\
    \        left = remaining - need;\n    }\n    result.push(eaten);\n    result.push(left);\n\
    \    return result;\n}\n", "    var result = [];\n    if(remaining < need){\n\
    \        result.push(remaining);\n        result.push(0);\n    }else{\n      \
    \  result.push(need);\n        result.push(remaining - need);\n    }\n    return\
    \ result;\n}\n", "    let eaten = number;\n    let left = need - eaten;\n    let\
    \ eaten_left = 0;\n    if(left > 0){\n        if(left < remaining){\n        \
    \    eaten_left = left;\n            left = 0;\n        }else{\n            eaten_left\
    \ = remaining;\n            left = left - remaining;\n        }\n    }\n    return\
    \ [eaten + eaten_left, left];\n}\n", "  if (number >= need) {\n    return [number\
    \ + need, remaining - need];\n  } else {\n    return [number, remaining];\n  }\n\
    }\n", "    var result = [];\n    if(remaining < need){\n        result.push(remaining);\n\
    \        result.push(0);\n    }else{\n        result.push(need);\n        result.push(remaining\
    \ - need);\n    }\n    return result;\n}\n", "    if (number >= need) {\n    \
    \    return [number + need, remaining - need];\n    } else if (number + need >\
    \ remaining) {\n        return [number + need, 0];\n    } else {\n        return\
    \ [number + need, remaining - number];\n    }\n}\n", "    var result = [];\n \
    \   var eaten = 0;\n    var left = 0;\n    if(need > remaining){\n        eaten\
    \ = remaining;\n        left = 0;\n    }else{\n        eaten = need;\n       \
    \ left = remaining - need;\n    }\n    result.push(eaten);\n    result.push(left);\n\
    \    return result;\n}\n", "    var result = [];\n    if(remaining < need){\n\
    \        result[0] = number + need - remaining;\n        result[1] = 0;\n    }else{\n\
    \        result[0] = number + need;\n        result[1] = remaining - need;\n \
    \   }\n    return result;\n}\n", "  var result = [];\n  if(remaining < need){\n\
    \    result.push(remaining);\n    result.push(0);\n  }else{\n    result.push(need);\n\
    \    result.push(remaining - need);\n  }\n  return result;\n}\n", "    var result\
    \ = [];\n    if(remaining < need){\n        result[0] = remaining;\n        result[1]\
    \ = 0;\n    }else{\n        result[0] = need;\n        result[1] = remaining -\
    \ need;\n    }\n    return result;\n}\n", "    let eaten = number;\n    let left\
    \ = need - eaten;\n    let result = [];\n    if(left < remaining){\n        result.push(left);\n\
    \        result.push(remaining - left);\n    }else{\n        result.push(left);\n\
    \        result.push(0);\n    }\n    return result;\n}\n", "    var result = [];\n\
    \    if(remaining < need){\n        result[0] = remaining;\n        result[1]\
    \ = 0;\n    }else{\n        result[0] = need;\n        result[1] = remaining -\
    \ need;\n    }\n    return result;\n}\n", "    let [total, left] = [0, remaining];\n\
    \    if(need <= left){\n        total += need;\n        left -= need;\n    }else{\n\
    \        total += left;\n    }\n    return [total, left];\n}\n", "    var result\
    \ = [];\n    if(remaining >= need){\n        result[0] = number + need;\n    \
    \    result[1] = remaining - need;\n    }else{\n        result[0] = number + remaining;\n\
    \        result[1] = 0;\n    }\n    return result;\n}\n", "    let eaten = number;\n\
    \    let left = remaining - number;\n    if(need > left){\n        eaten = left;\n\
    \        left = 0;\n    }\n    return [eaten, left];\n}\n", "    var result =\
    \ [];\n    if(remaining < need){\n        result[0] = number + need - remaining;\n\
    \        result[1] = 0;\n    }else{\n        result[0] = number + need;\n    \
    \    result[1] = remaining - need;\n    }\n    return result;\n}\n", "    var\
    \ eaten = 0;\n    var eatenNeed = 0;\n    var remainingNeed = need - eaten;\n\
    \    if(remainingNeed > remaining){\n        remainingNeed = remaining;\n    }\n\
    \    if(remainingNeed > 0){\n        eatenNeed = Math.floor(remainingNeed / 2);\n\
    \        eaten = number + eatenNeed;\n    }\n    return [eaten, remainingNeed];\n\
    }\n", "    var result = [];\n    if(remaining < need){\n        result[0] = remaining;\n\
    \        result[1] = 0;\n    }else{\n        result[0] = need;\n        result[1]\
    \ = remaining - need;\n    }\n    return result;\n}\n", "  var result = [];\n\
    \  if (remaining < need) {\n    result.push(remaining);\n    result.push(0);\n\
    \  } else {\n    result.push(need);\n    result.push(remaining - need);\n  }\n\
    \  return result;\n}\n", "    var result = [];\n    if(remaining >= need){\n \
    \       result.push(number + need);\n        result.push(remaining - need);\n\
    \    }else{\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    return result;\n}\n", "  var result = [];\n  if(number >= need){\n\
    \    result.push(number - need);\n    result.push(remaining - need);\n  }else{\n\
    \    result.push(number);\n    result.push(remaining);\n  }\n  return result;\n\
    }\n", "    var result = [];\n    if(number >= need){\n        result[0] = number\
    \ - need;\n        result[1] = remaining - number;\n    }else{\n        result[0]\
    \ = 0;\n        result[1] = remaining;\n    }\n    return result;\n}\n", "   \
    \ var result = [];\n    if(remaining < need){\n        result[0] = remaining;\n\
    \        result[1] = 0;\n    }else{\n        result[0] = need;\n        result[1]\
    \ = remaining - need;\n    }\n    return result;\n}\n", "    var result = [];\n\
    \    if(number >= need){\n        result.push(number - need);\n        result.push(remaining\
    \ - need);\n    }else{\n        result.push(number);\n        result.push(remaining);\n\
    \    }\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
