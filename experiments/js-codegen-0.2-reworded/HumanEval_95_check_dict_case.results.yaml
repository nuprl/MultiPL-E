language: js
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\"\
    :\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nfunction check_dict_case(dict){\n\
    \    if(dict.constructor === Object){\n        for(var key in dict){\n       \
    \     if(typeof dict[key] !== \"string\"){\n                return false;\n  \
    \          }\n        }\n        return true;\n    }\n    return false;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplmjrir3r.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmplmjrir3r.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371552
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\"\
    :\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nfunction check_dict_case(dict){\n\
    \  if(dict === undefined || dict === null) return false;\n  for(var key in dict){\n\
    \    if(typeof(dict[key]) !== \"string\") return false;\n    if(key.toUpperCase()\
    \ !== key) return false;\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpsz6aw9tv.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpsz6aw9tv.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371552
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\"\
    :\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nfunction check_dict_case(dict){\n\
    \    if(dict === undefined || dict === null) return false;\n    for(var key in\
    \ dict){\n        if(typeof dict[key] !== \"string\") return false;\n        if(key.toUpperCase()\
    \ !== key) return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6v9wc_wl.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp6v9wc_wl.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371552
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\"\
    :\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nfunction check_dict_case(dict){\n\
    \    if(dict == {}) return false;\n    for(var key in dict){\n        if(typeof(dict[key])\
    \ != \"string\") return false;\n        if(key.toUpperCase() != key) return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8un4udy2.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp8un4udy2.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371552
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\"\
    :\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nfunction check_dict_case(dict){\n\
    \  if(dict === undefined || dict === null) return false;\n  for(var key in dict){\n\
    \    if(typeof dict[key] !== \"string\") return false;\n    if(key.toLowerCase()\
    \ !== key) return false;\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpc_xl1ugy.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpc_xl1ugy.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371552
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\"\
    :\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nfunction check_dict_case(dict){\n\
    \  if(dict == {}){\n    return false;\n  }\n  for(var key in dict){\n    if(typeof(dict[key])\
    \ != \"string\"){\n      return false;\n    }\n    if(key.toUpperCase() != key){\n\
    \      return false;\n    }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmporkynk3g.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmporkynk3g.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371552
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\"\
    :\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nfunction check_dict_case(dict){\n\
    \    if(dict.length == 0) return false;\n    for(var key in dict){\n        if(typeof(dict[key])\
    \ != \"string\") return false;\n        if(key.toUpperCase() != key) return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_bg82_kp.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_bg82_kp.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371552
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\"\
    :\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nfunction check_dict_case(dict){\n\
    \    if(dict === undefined || dict === null){\n        return false;\n    }\n\
    \    for(var key in dict){\n        if(typeof dict[key] !== \"string\"){\n   \
    \         return false;\n        }\n        if(key.toUpperCase() !== key){\n \
    \           return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpox4r6avf.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpox4r6avf.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371552
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\"\
    :\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nfunction check_dict_case(dict){\n\
    \    if(dict === undefined || dict === null){\n        return false;\n    }\n\
    \    for(var key in dict){\n        if(typeof(dict[key]) !== \"string\"){\n  \
    \          return false;\n        }\n        if(key.toLowerCase() !== key){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpcntsu9sg.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpcntsu9sg.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371552
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\"\
    :\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nfunction check_dict_case(dict){\n\
    \    var keys = Object.keys(dict);\n    for (var i = 0; i < keys.length; i++)\
    \ {\n        if (typeof(dict[keys[i]]) !== 'string') {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqzcwa6st.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpqzcwa6st.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371552
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\"\
    :\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nfunction check_dict_case(dict){\n\
    \    for(var key in dict){\n        if(typeof(dict[key]) !== \"string\"){\n  \
    \          return false;\n        }\n        if(dict[key].toLowerCase() !== dict[key].toUpperCase()){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpn0uoy0fw.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpn0uoy0fw.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371552
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\"\
    :\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nfunction check_dict_case(dict){\n\
    \    if(!dict){\n        return false;\n    }\n    for(var key in dict){\n   \
    \     if(typeof dict[key] !== \"string\"){\n            return false;\n      \
    \  }\n        if(key.toUpperCase() !== key){\n            return false;\n    \
    \    }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0k3hwcn2.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0k3hwcn2.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371552
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\"\
    :\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nfunction check_dict_case(dict){\n\
    \  if(!dict){\n    return false;\n  }\n  for(var key in dict){\n    if(typeof\
    \ dict[key] !== \"string\"){\n      return false;\n    }\n    if(key.toUpperCase()\
    \ !== key){\n      return false;\n    }\n  }\n  return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpr2e9cygs.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpr2e9cygs.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371552
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\"\
    :\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nfunction check_dict_case(dict){\n\
    \    var keys = Object.keys(dict);\n    for (var i = 0; i < keys.length; i++){\n\
    \        if (typeof(dict[keys[i]]) !== \"string\"){\n            return false;\n\
    \        }\n        if (dict[keys[i]] !== dict[keys[i].toUpperCase()]){\n    \
    \        return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxhss7y93.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxhss7y93.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371552
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\"\
    :\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nfunction check_dict_case(dict){\n\
    \    if(!dict){\n        return false;\n    }\n    for(var key in dict){\n   \
    \     if(typeof dict[key] !== \"string\"){\n            return false;\n      \
    \  }\n        if(key.toLowerCase() !== key){\n            return false;\n    \
    \    }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpv8qrzaug.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpv8qrzaug.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371552
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\"\
    :\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nfunction check_dict_case(dict){\n\
    \    if(dict == {})\n        return false;\n    for(var key in dict){\n      \
    \  if(typeof(dict[key]) != \"string\")\n            return false;\n        if(key.toUpperCase()\
    \ != key)\n            return false;\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpcwrlao5q.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpcwrlao5q.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371552
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\"\
    :\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nfunction check_dict_case(dict){\n\
    \    if(dict == {}) return false;\n    for(var key in dict){\n        if(typeof(dict[key])\
    \ != \"string\") return false;\n        if(key.toUpperCase() != key) return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8un4udy2.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp8un4udy2.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371552
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\"\
    :\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nfunction check_dict_case(dict){\n\
    \  if(dict === null || dict === undefined) return false;\n  for(var key in dict){\n\
    \    if(typeof(dict[key]) !== \"string\") return false;\n    if(key.toUpperCase()\
    \ !== key) return false;\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2ft9jpms.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp2ft9jpms.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371552
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\"\
    :\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nfunction check_dict_case(dict){\n\
    \    var keys = Object.keys(dict);\n    for(var i=0; i<keys.length; i++){\n  \
    \      if(typeof(keys[i]) !== \"string\"){\n            return false;\n      \
    \  }\n        if(keys[i].toLowerCase() !== keys[i].toUpperCase()){\n         \
    \   return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpabjsodm8.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpabjsodm8.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371552
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\"\
    :\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nfunction check_dict_case(dict){\n\
    \    if(dict === undefined || dict === null) return false;\n    for(var key in\
    \ dict){\n        if(typeof dict[key] !== \"string\") return false;\n        if(key.toUpperCase()\
    \ !== key) return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6v9wc_wl.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp6v9wc_wl.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371552
