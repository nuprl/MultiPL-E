language: js
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1 , 55]) \n// ['One']\nfunction by_length(arr){\n    if(arr.length\
    \ === 0){\n        return [];\n    }\n    var result = [];\n    for(var i = 0;\
    \ i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n           \
    \ result.push(arr[i]);\n        }\n    }\n    result.sort(function(a, b){\n  \
    \      return b - a;\n    });\n    for(var i = 0; i < result.length; i++){\n \
    \       result[i] = result[i] + \"\";\n        result[i] = result[i].substr(0,\
    \ 1);\n        result[i] = result[i].toUpperCase();\n        result[i] = result[i]\
    \ + result[i];\n        result[i] = result[i].substr(0, 1);\n        result[i]\
    \ = result[i].toUpperCase();\n        result[i] = result[i] + result[i];\n   \
    \     result[i] = result[i].substr(0, 1);\n        result[i] = result[i].toUpperCase();\n\
    \        result[i] = result[i] + result[i];\n        result[i] = result[i].substr(0,\
    \ 1);\n        result[i] = result[i].toUpperCase();\n        result[i] = result[i]\
    \ + result[i];\n        result[i] = result[i].substr(0, 1);\n        result[i]\
    \ = result[i].toUpperCase();\n        result[i] = result[i] + result[i];\n   \
    \     result[i] = result[i].substr(0, 1);\n        result[i] = result[i].toUpperCase();\n\
    \        result[i] = result[i] + result[i];\n        result[i] = result[i].substr(0,\
    \ 1);\n        result[i] = result[i].toUpperCase();\n        result[i] = result[i]\
    \ + result[i];\n        result[i] = result[i].substr(0, 1);\n        result[i]\
    \ = result[i].toUpperCase();\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpkdxtok30.js:63\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341946
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1 , 55]) \n// ['One']\nfunction by_length(arr){\n  if(arr.length\
    \ === 0){\n    return [];\n  }\n  var sorted = arr.sort(function(a, b){\n    return\
    \ a - b;\n  });\n  var result = [];\n  for(var i = 0; i < sorted.length; i++){\n\
    \    if(sorted[i] >= 1 && sorted[i] <= 9){\n      result.push(one_to_nine[sorted[i]]);\n\
    \    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmps78zbiwl.js:23\n      result.push(one_to_nine[sorted[i]]);\n  \
    \                ^\n\nReferenceError: one_to_nine is not defined\n    at by_length\
    \ (/tmp/tmps78zbiwl.js:23:19)\n    at test (/tmp/tmps78zbiwl.js:34:20)\n    at\
    \ Object.<anonymous> (/tmp/tmps78zbiwl.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341946
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1 , 55]) \n// ['One']\nfunction by_length(arr){\n    var\
    \ arr_len = arr.length;\n    if(arr_len === 0){\n        return [];\n    }\n \
    \   var arr_len_1 = arr_len - 1;\n    var arr_len_2 = arr_len - 2;\n    var arr_len_3\
    \ = arr_len - 3;\n    var arr_len_4 = arr_len - 4;\n    var arr_len_5 = arr_len\
    \ - 5;\n    var arr_len_6 = arr_len - 6;\n    var arr_len_7 = arr_len - 7;\n \
    \   var arr_len_8 = arr_len - 8;\n    var arr_len_9 = arr_len - 9;\n    var arr_len_10\
    \ = arr_len - 10;\n    var arr_len_11 = arr_len - 11;\n    var arr_len_12 = arr_len\
    \ - 12;\n    var arr_len_13 = arr_len - 13;\n    var arr_len_14 = arr_len - 14;\n\
    \    var arr_len_15 = arr_len - 15;\n    var arr_len_16 = arr_len - 16;\n    var\
    \ arr_len_17 = arr_len - 17;\n    var arr_len_18 = arr_len - 18;\n    var arr_len_19\
    \ = arr_len - 19;\n    var arr_len_20 = arr_len - 20;\n    var arr_len_21 = arr_len\
    \ - 21;\n    var arr_len_22 = arr_len - 22;\n    var arr_len_23 = arr_len - 23;\n\
    \    var arr_len_24 = arr_len - 24;\n    var arr_len_25 = arr_len - 25;\n    var\
    \ arr_len_26 = arr_len - 26;\n    var arr_len_27 = arr_len - 27;\n    var arr_len_28\
    \ = arr_len - 28;\n    var arr_len_29 = arr_len - 29;\n    var arr_len_30 = arr_len\
    \ - 30;\n    var arr_len_31 = arr_len - 31;\n    var arr_len_32 = arr_len - 32;\n\
    \    var arr_\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp4mvz3c_n.js:63\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341946
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1 , 55]) \n// ['One']\nfunction by_length(arr){\n  arr =\
    \ arr.filter(function(x){return x>=1 && x<=9});\n  arr.sort(function(a,b){return\
    \ b-a});\n  arr = arr.map(function(x){return x.toString()});\n  arr = arr.map(function(x){return\
    \ x.toLowerCase()});\n  arr = arr.map(function(x){return x.substring(0,1)});\n\
    \  arr = arr.map(function(x){return x.substring(1)});\n  return arr;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  '',\n\
    \  '',\n  '',\n  '',\n  '',\n  '',\n  ''\n]\n\nshould loosely deep-equal\n\n[\n\
    \  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n\
    \  'One'\n]\n    at test (/tmp/tmp3fv3r9kx.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3fv3r9kx.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '',\
    \ '', '', '',\n    '', '', '', ''\n  ],\n  expected: [\n    'Eight', 'Five',\n\
    \    'Four',  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341946
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1 , 55]) \n// ['One']\nfunction by_length(arr){\n  arr =\
    \ arr.sort(function(a, b){\n    return a - b;\n  });\n  arr = arr.map(function(num){\n\
    \    if(num < 10 && num > 0){\n      return \"One\";\n    }\n    if(num < 20 &&\
    \ num > 10){\n      return \"Two\";\n    }\n    if(num < 30 && num > 20){\n  \
    \    return \"Three\";\n    }\n    if(num < 40 && num > 30){\n      return \"\
    Four\";\n    }\n    if(num < 50 && num > 40){\n      return \"Five\";\n    }\n\
    \    if(num < 60 && num > 50){\n      return \"Six\";\n    }\n    if(num < 70\
    \ && num > 60){\n      return \"Seven\";\n    }\n    if(num < 80 && num > 70){\n\
    \      return \"Eight\";\n    }\n    if(num < 90 && num > 80){\n      return \"\
    Nine\";\n    }\n  });\n  return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'One',\n  'One',\n  'One',\n  'One',\n  'One',\n  'One',\n  'One'\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n\
    \  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpe9mv2aiw.js:54:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpe9mv2aiw.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \ 'One',\n    'One', 'One',\n    'One', 'One',\n    'One', 'One'\n  ],\n  expected:\
    \ [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',\
    \   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341946
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1 , 55]) \n// ['One']\nfunction by_length(arr){\n  var sorted\
    \ = arr.sort(function(a, b){\n    return a - b;\n  });\n  var result = [];\n \
    \ for(var i = 0; i < sorted.length; i++){\n    if(sorted[i] >= 1 && sorted[i]\
    \ <= 9){\n      result.push(String.fromCharCode(sorted[i] + 48));\n    }\n  }\n\
    \  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1',\n  '1',\n\
    \  '2',\n  '2',\n  '3',\n  '4',\n  '5',\n  '8'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n\
    \  'One'\n]\n    at test (/tmp/tmpkh8vfdhn.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpkh8vfdhn.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '1',\
    \ '1', '2',\n    '2', '3', '4',\n    '5', '8'\n  ],\n  expected: [\n    'Eight',\
    \ 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341946
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1 , 55]) \n// ['One']\nfunction by_length(arr){\n  arr =\
    \ arr.filter(function(x){return x>=1 && x<=9})\n  arr = arr.sort(function(a,b){return\
    \ b-a})\n  arr = arr.map(function(x){return x.toString()})\n  arr = arr.map(function(x){return\
    \ x.charAt(0)})\n  return arr\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '8',\n  '5',\n\
    \  '4',\n  '3',\n  '2',\n  '2',\n  '1',\n  '1'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n\
    \  'One'\n]\n    at test (/tmp/tmpfeanggtr.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfeanggtr.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '8',\
    \ '5', '4',\n    '3', '2', '2',\n    '1', '1'\n  ],\n  expected: [\n    'Eight',\
    \ 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341946
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1 , 55]) \n// ['One']\nfunction by_length(arr){\n  if(arr.length\
    \ === 0) return [];\n  var arr_len = arr.length;\n  var arr_len_1 = arr_len -\
    \ 1;\n  var arr_len_2 = arr_len - 2;\n  var arr_len_3 = arr_len - 3;\n  var arr_len_4\
    \ = arr_len - 4;\n  var arr_len_5 = arr_len - 5;\n  var arr_len_6 = arr_len -\
    \ 6;\n  var arr_len_7 = arr_len - 7;\n  var arr_len_8 = arr_len - 8;\n  var arr_len_9\
    \ = arr_len - 9;\n  var arr_len_10 = arr_len - 10;\n  var arr_len_11 = arr_len\
    \ - 11;\n  var arr_len_12 = arr_len - 12;\n  var arr_len_13 = arr_len - 13;\n\
    \  var arr_len_14 = arr_len - 14;\n  var arr_len_15 = arr_len - 15;\n  var arr_len_16\
    \ = arr_len - 16;\n  var arr_len_17 = arr_len - 17;\n  var arr_len_18 = arr_len\
    \ - 18;\n  var arr_len_19 = arr_len - 19;\n  var arr_len_20 = arr_len - 20;\n\
    \  var arr_len_21 = arr_len - 21;\n  var arr_len_22 = arr_len - 22;\n  var arr_len_23\
    \ = arr_len - 23;\n  var arr_len_24 = arr_len - 24;\n  var arr_len_25 = arr_len\
    \ - 25;\n  var arr_len_26 = arr_len - 26;\n  var arr_len_27 = arr_len - 27;\n\
    \  var arr_len_28 = arr_len - 28;\n  var arr_len_29 = arr_len - 29;\n  var arr_len_30\
    \ = arr_len - 30;\n  var arr_len_31 = arr_len - 31;\n  var arr_len_32 = arr_len\
    \ - 32;\n  var arr_len_33 = arr\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmptqykvecj.js:61\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341946
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1 , 55]) \n// ['One']\nfunction by_length(arr){\n  arr =\
    \ arr.filter(function(x){return x>=1 && x<=9});\n  arr.sort(function(a,b){return\
    \ b-a});\n  arr = arr.map(function(x){return x%10==1? \"One\":x%10==2? \"Two\"\
    :x%10==3? \"Three\":x%10==4? \"Four\":x%10==5? \"Five\":x%10==6? \"Six\":x%10==7?\
    \ \"Seven\":x%10==8? \"Eight\":x%10==9? \"Nine\":x});\n  return arr;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662341946
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1 , 55]) \n// ['One']\nfunction by_length(arr){\n  if(arr.length\
    \ === 0){\n    return [];\n  }\n  var sorted = arr.sort(function(a,b){\n    return\
    \ a-b;\n  });\n  var result = [];\n  for(var i = 0; i < sorted.length; i++){\n\
    \    if(sorted[i] >= 1 && sorted[i] <= 9){\n      result.push(one_to_nine(sorted[i]));\n\
    \    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpyebsh4m2.js:23\n      result.push(one_to_nine(sorted[i]));\n  \
    \           ^\n\nReferenceError: one_to_nine is not defined\n    at by_length\
    \ (/tmp/tmpyebsh4m2.js:23:14)\n    at test (/tmp/tmpyebsh4m2.js:34:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpyebsh4m2.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341946
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1 , 55]) \n// ['One']\nfunction by_length(arr){\n  if(arr.length\
    \ === 0) return [];\n  var arr_len = arr.length;\n  var arr_len_1 = arr_len -\
    \ 1;\n  var arr_len_2 = arr_len - 2;\n  var arr_len_3 = arr_len - 3;\n  var arr_len_4\
    \ = arr_len - 4;\n  var arr_len_5 = arr_len - 5;\n  var arr_len_6 = arr_len -\
    \ 6;\n  var arr_len_7 = arr_len - 7;\n  var arr_len_8 = arr_len - 8;\n  var arr_len_9\
    \ = arr_len - 9;\n  var arr_len_10 = arr_len - 10;\n  var arr_len_11 = arr_len\
    \ - 11;\n  var arr_len_12 = arr_len - 12;\n  var arr_len_13 = arr_len - 13;\n\
    \  var arr_len_14 = arr_len - 14;\n  var arr_len_15 = arr_len - 15;\n  var arr_len_16\
    \ = arr_len - 16;\n  var arr_len_17 = arr_len - 17;\n  var arr_len_18 = arr_len\
    \ - 18;\n  var arr_len_19 = arr_len - 19;\n  var arr_len_20 = arr_len - 20;\n\
    \  var arr_len_21 = arr_len - 21;\n  var arr_len_22 = arr_len - 22;\n  var arr_len_23\
    \ = arr_len - 23;\n  var arr_len_24 = arr_len - 24;\n  var arr_len_25 = arr_len\
    \ - 25;\n  var arr_len_26 = arr_len - 26;\n  var arr_len_27 = arr_len - 27;\n\
    \  var arr_len_28 = arr_len - 28;\n  var arr_len_29 = arr_len - 29;\n  var arr_len_30\
    \ = arr_len - 30;\n  var arr_len_31 = arr_len - 31;\n  var arr_len_32 = arr_len\
    \ - 32;\n  var arr_len_33 = arr\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmptqykvecj.js:61\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341946
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1 , 55]) \n// ['One']\nfunction by_length(arr){\n  arr =\
    \ arr.sort(function(a, b){\n    return a - b;\n  });\n  var result = [];\n  for(var\
    \ i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]\
    \ + \" \" + arr[i]);\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1 1',\n\
    \  '1 1',\n  '2 2',\n  '2 2',\n  '3 3',\n  '4 4',\n  '5 5',\n  '8 8'\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n\
    \  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp8m04keyt.js:31:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp8m04keyt.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '1\
    \ 1', '1 1',\n    '2 2', '2 2',\n    '3 3', '4 4',\n    '5 5', '8 8'\n  ],\n \
    \ expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341946
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1 , 55]) \n// ['One']\nfunction by_length(arr){\n    if(arr.length\
    \ === 0){\n        return [];\n    }\n    var arr_len = arr.length;\n    var arr_len_1\
    \ = arr_len - 1;\n    var arr_len_2 = arr_len - 2;\n    var arr_len_3 = arr_len\
    \ - 3;\n    var arr_len_4 = arr_len - 4;\n    var arr_len_5 = arr_len - 5;\n \
    \   var arr_len_6 = arr_len - 6;\n    var arr_len_7 = arr_len - 7;\n    var arr_len_8\
    \ = arr_len - 8;\n    var arr_len_9 = arr_len - 9;\n    var arr_len_10 = arr_len\
    \ - 10;\n    var arr_len_11 = arr_len - 11;\n    var arr_len_12 = arr_len - 12;\n\
    \    var arr_len_13 = arr_len - 13;\n    var arr_len_14 = arr_len - 14;\n    var\
    \ arr_len_15 = arr_len - 15;\n    var arr_len_16 = arr_len - 16;\n    var arr_len_17\
    \ = arr_len - 17;\n    var arr_len_18 = arr_len - 18;\n    var arr_len_19 = arr_len\
    \ - 19;\n    var arr_len_20 = arr_len - 20;\n    var arr_len_21 = arr_len - 21;\n\
    \    var arr_len_22 = arr_len - 22;\n    var arr_len_23 = arr_len - 23;\n    var\
    \ arr_len_24 = arr_len - 24;\n    var arr_len_25 = arr_len - 25;\n    var arr_len_26\
    \ = arr_len - 26;\n    var arr_len_27 = arr_len - 27;\n    var arr_len_28 = arr_len\
    \ - 28;\n    var arr_len_29 = arr_len - 29;\n    var arr_len_30 = arr_len - 30;\n\
    \    var arr_len_31 = arr_len - 31;\n    var arr_len_32 = arr_len - 32;\n    var\
    \ arr_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6kdhwl38.js:63\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341947
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1 , 55]) \n// ['One']\nfunction by_length(arr){\n    arr\
    \ = arr.sort(function(a, b){\n        return a - b;\n    });\n    var result =\
    \ [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i]\
    \ <= 9){\n            result.push(arr[i] + \" \" + arr[i]);\n        }\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1 1',\n\
    \  '1 1',\n  '2 2',\n  '2 2',\n  '3 3',\n  '4 4',\n  '5 5',\n  '8 8'\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n\
    \  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpe7jg372i.js:31:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpe7jg372i.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '1\
    \ 1', '1 1',\n    '2 2', '2 2',\n    '3 3', '4 4',\n    '5 5', '8 8'\n  ],\n \
    \ expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341947
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1 , 55]) \n// ['One']\nfunction by_length(arr){\n  arr =\
    \ arr.filter(function(n){return n>=1 && n<=9});\n  arr.sort(function(a,b){return\
    \ b-a});\n  arr = arr.map(function(n){return n%10+' '+n+' '+n+' '+n+' '+n+' '+n+'\
    \ '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+'\
    \ '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+'\
    \ '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+'\
    \ '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+'\
    \ '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+'\
    \ '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+'\
    \ '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+'\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpe30rtq72.js:16\n  arr = arr.map(function(n){return n%10+' '+n+'\
    \ '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+'\
    \ '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+'\
    \ '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+'\
    \ '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+'\
    \ '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+'\
    \ '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+'\
    \ '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+' '+n+'\n  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                    ^\n\nSyntaxError: Invalid\
    \ or unexpected token\n    at Object.compileFunction (node:vm:360:18)\n    at\
    \ wrapSafe (node:internal/modules/cjs/loader:1048:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341947
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1 , 55]) \n// ['One']\nfunction by_length(arr){\n    var\
    \ arr_len = arr.length;\n    if(arr_len === 0){\n        return [];\n    }\n \
    \   var arr_len_1 = arr_len - 1;\n    var arr_len_2 = arr_len - 2;\n    var arr_len_3\
    \ = arr_len - 3;\n    var arr_len_4 = arr_len - 4;\n    var arr_len_5 = arr_len\
    \ - 5;\n    var arr_len_6 = arr_len - 6;\n    var arr_len_7 = arr_len - 7;\n \
    \   var arr_len_8 = arr_len - 8;\n    var arr_len_9 = arr_len - 9;\n    var arr_len_10\
    \ = arr_len - 10;\n    var arr_len_11 = arr_len - 11;\n    var arr_len_12 = arr_len\
    \ - 12;\n    var arr_len_13 = arr_len - 13;\n    var arr_len_14 = arr_len - 14;\n\
    \    var arr_len_15 = arr_len - 15;\n    var arr_len_16 = arr_len - 16;\n    var\
    \ arr_len_17 = arr_len - 17;\n    var arr_len_18 = arr_len - 18;\n    var arr_len_19\
    \ = arr_len - 19;\n    var arr_len_20 = arr_len - 20;\n    var arr_len_21 = arr_len\
    \ - 21;\n    var arr_len_22 = arr_len - 22;\n    var arr_len_23 = arr_len - 23;\n\
    \    var arr_len_24 = arr_len - 24;\n    var arr_len_25 = arr_len - 25;\n    var\
    \ arr_len_26 = arr_len - 26;\n    var arr_len_27 = arr_len - 27;\n    var arr_len_28\
    \ = arr_len - 28;\n    var arr_len_29 = arr_len - 29;\n    var arr_len_30 = arr_len\
    \ - 30;\n    var arr_len_31 = arr_len - 31;\n    var arr_len_32 = arr_len - 32;\n\
    \    var arr_\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp4mvz3c_n.js:63\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341946
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1 , 55]) \n// ['One']\nfunction by_length(arr){\n    var\
    \ arr_len = arr.length;\n    if(arr_len === 0){\n        return [];\n    }\n \
    \   var arr_len_1 = arr_len - 1;\n    var arr_len_2 = arr_len - 2;\n    var arr_len_3\
    \ = arr_len - 3;\n    var arr_len_4 = arr_len - 4;\n    var arr_len_5 = arr_len\
    \ - 5;\n    var arr_len_6 = arr_len - 6;\n    var arr_len_7 = arr_len - 7;\n \
    \   var arr_len_8 = arr_len - 8;\n    var arr_len_9 = arr_len - 9;\n    var arr_len_10\
    \ = arr_len - 10;\n    var arr_len_11 = arr_len - 11;\n    var arr_len_12 = arr_len\
    \ - 12;\n    var arr_len_13 = arr_len - 13;\n    var arr_len_14 = arr_len - 14;\n\
    \    var arr_len_15 = arr_len - 15;\n    var arr_len_16 = arr_len - 16;\n    var\
    \ arr_len_17 = arr_len - 17;\n    var arr_len_18 = arr_len - 18;\n    var arr_len_19\
    \ = arr_len - 19;\n    var arr_len_20 = arr_len - 20;\n    var arr_len_21 = arr_len\
    \ - 21;\n    var arr_len_22 = arr_len - 22;\n    var arr_len_23 = arr_len - 23;\n\
    \    var arr_len_24 = arr_len - 24;\n    var arr_len_25 = arr_len - 25;\n    var\
    \ arr_len_26 = arr_len - 26;\n    var arr_len_27 = arr_len - 27;\n    var arr_len_28\
    \ = arr_len - 28;\n    var arr_len_29 = arr_len - 29;\n    var arr_len_30 = arr_len\
    \ - 30;\n    var arr_len_31 = arr_len - 31;\n    var arr_len_32 = arr_len - 32;\n\
    \    var arr_\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp4mvz3c_n.js:63\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341946
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1 , 55]) \n// ['One']\nfunction by_length(arr){\n  arr =\
    \ arr.filter(function(x){return x>=1 && x<=9})\n  arr.sort(function(a,b){return\
    \ b-a})\n  arr = arr.map(function(x){return x.toString()})\n  arr = arr.map(function(x){return\
    \ x.charAt(0)})\n  arr = arr.map(function(x){return x.toUpperCase()})\n  return\
    \ arr\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"\
    One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"\
    One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"\
    ]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '8',\n  '5',\n\
    \  '4',\n  '3',\n  '2',\n  '2',\n  '1',\n  '1'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n\
    \  'One'\n]\n    at test (/tmp/tmpkeizqqtu.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpkeizqqtu.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '8',\
    \ '5', '4',\n    '3', '2', '2',\n    '1', '1'\n  ],\n  expected: [\n    'Eight',\
    \ 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341947
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1 , 55]) \n// ['One']\nfunction by_length(arr){\n  arr =\
    \ arr.filter(function(x){return x>=1 && x<=9});\n  arr.sort(function(a,b){return\
    \ b-a});\n  arr = arr.map(function(x){return x>=1 && x<=9 ? \"One\" : \"\";});\n\
    \  return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'One',\n  'One',\n  'One',\n  'One',\n  'One',\n  'One',\n  'One'\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n\
    \  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpppq5ssbw.js:25:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpppq5ssbw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \ 'One',\n    'One', 'One',\n    'One', 'One',\n    'One', 'One'\n  ],\n  expected:\
    \ [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',\
    \   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341947
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1 , 55]) \n// ['One']\nfunction by_length(arr){\n    if(arr.length\
    \ === 0) return [];\n    var sorted = arr.sort(function(a, b){\n        return\
    \ a - b;\n    });\n    var result = [];\n    for(var i = 0; i < sorted.length;\
    \ i++){\n        if(sorted[i] >= 1 && sorted[i] <= 9){\n            result.push(one_to_nine(sorted[i]));\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp88prewwt.js:21\n            result.push(one_to_nine(sorted[i]));\n\
    \                   ^\n\nReferenceError: one_to_nine is not defined\n    at by_length\
    \ (/tmp/tmp88prewwt.js:21:20)\n    at test (/tmp/tmp88prewwt.js:32:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp88prewwt.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341947
