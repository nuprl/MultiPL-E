name: HumanEval_123_get_odd_collatz
language: js
prompt: "//Given a positive integer n, return a sorted array that has the odd numbers\
  \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
  \ that concerns a sequence defined\n// as follows: start with any positive integer\
  \ n. Then each term is obtained from the \n// previous term as follows: if the previous\
  \ term is even, the next term is one half of \n// the previous term. If the previous\
  \ term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture\
  \ is that no matter what value of n, the sequence will always reach 1.\n// Note:\
  \ \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n\
  // For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for\
  \ 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\
  \ \n// [1, 5]\nfunction get_odd_collatz(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = get_odd_collatz;\n  assert.deepEqual(candidate(14),[1, 5, 7, 11, 13, 17]);\n\
  \  assert.deepEqual(candidate(5),[1, 5]);\n  assert.deepEqual(candidate(12),[1,\
  \ 3, 5]);\n  assert.deepEqual(candidate(1),[1]);\n}\n\ntest();"
completions: ["    var arr = [];\n    while(n > 1){\n        if(n % 2 == 0){\n   \
    \         n = n / 2;\n        }else{\n            n = n * 3 + 1;\n        }\n\
    \        arr.push(n);\n    }\n    arr.sort(function(a, b){\n        return a -\
    \ b;\n    });\n    return arr;\n}", "    var collatz = [];\n    while(n > 1){\n\
    \        if(n % 2 === 0){\n            n = n / 2;\n        }else{\n          \
    \  n = 3 * n + 1;\n        }\n        collatz.push(n);\n    }\n    return collatz.sort(function(a,\
    \ b){\n        return a - b;\n    });\n}\n", "    var result = [];\n    while(n\
    \ > 1){\n        if(n % 2 === 0){\n            n = n / 2;\n        }else{\n  \
    \          n = 3 * n + 1;\n        }\n        result.push(n);\n    }\n    return\
    \ result;\n}\n", "    var collatz = [];\n    while(n > 1){\n        if(n % 2 ==\
    \ 0){\n            n = n / 2;\n        }else{\n            n = 3 * n + 1;\n  \
    \      }\n        collatz.push(n);\n    }\n    return collatz;\n}\n", "  var collatz\
    \ = [];\n  while(n > 1){\n    if(n % 2 === 0){\n      n = n / 2;\n    }else{\n\
    \      n = 3 * n + 1;\n    }\n    collatz.push(n);\n  }\n  return collatz;\n}\n",
  "    var arr = [];\n    while(n > 1){\n        if(n % 2 == 0){\n            n =\
    \ n / 2;\n        }else{\n            n = 3 * n + 1;\n        }\n        arr.push(n);\n\
    \    }\n    arr.sort(function(a, b){return a - b;});\n    return arr;\n}\n", " \
    \   var result = [];\n    while(n > 1){\n        if(n % 2 === 0){\n          \
    \  n = n / 2;\n        }else{\n            n = 3 * n + 1;\n        }\n       \
    \ result.push(n);\n    }\n    return result;\n}\n", "  var collatz = [];\n  while(n\
    \ > 1){\n    if(n % 2 == 0){\n      n = n / 2;\n    }else{\n      n = 3 * n +\
    \ 1;\n    }\n    collatz.push(n);\n  }\n  return collatz.sort(function(a, b){\n\
    \    return a - b;\n  });\n}\n<|endoftext|><|javascript|>var path = require('path');\n\
    var webpack = require('webpack');\nvar autoprefixer = require('autoprefixer');\n\
    var HtmlWebpackPlugin = require('html-webpack-plugin');\nvar ExtractTextPlugin\
    \ = require('extract-text-webpack-plugin');\nvar CopyWebpackPlugin = require('copy-webpack-plugin');\n\
    \nmodule.exports = {\n  entry: [\n    'webpack-dev-server/client?http://localhost:3000',\n\
    \    'webpack/hot/only-dev-server',\n    './src/index'\n  ],\n  output: {\n  \
    \  path: path.join(__dirname, 'dist'),\n    filename: 'bundle.js',\n    publicPath:\
    \ '/'\n  },\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),\n   \
    \ new webpack.NoErrorsPlugin(),\n    new HtmlWebpackPlugin({\n      template:\
    \ 'src/index.html',\n      inject: 'body',\n      filename: 'index.html'\n   \
    \ }),\n    new ExtractTextPlugin('bundle.css'),\n    new CopyWebpackPlugin([{\n\
    \      from: 'src/assets',\n      to: 'assets'\n    }])\n  ],\n  module: {\n \
    \   loaders: [\n      {\n        test: /\\.js$/,\n        loaders: ['react-hot',\
    \ 'babel'],\n        include: path.join(__dirname, 'src')\n      },\n      {\n\
    \        test: /\\.css$/,\n        loader: ExtractTextPlugin.extract('style',\
    \ 'css?modules&importLoaders=1&localIdentName=[name]__[local]___[hash:base64:5]!postcss')\n\
    \      },\n      {\n        test:", "  var collatz = [];\n  while(n > 1){\n  \
    \  if(n % 2 === 0){\n      n = n / 2;\n    }else{\n      n = n * 3 + 1;\n    }\n\
    \    collatz.push(n);\n  }\n  collatz.sort(function(a, b){\n    return a - b;\n\
    \  });\n  return collatz;\n}\n", "    var collatz = [];\n    while(n > 1){\n \
    \       if(n % 2 === 0){\n            n = n / 2;\n        }else{\n           \
    \ n = 3 * n + 1;\n        }\n        collatz.push(n);\n    }\n    return collatz;\n\
    }\n", "    var result = [];\n    while(n > 1){\n        if(n % 2 === 0){\n   \
    \         n = n / 2;\n        }else{\n            n = 3 * n + 1;\n        }\n\
    \        result.push(n);\n    }\n    result.sort(function(a, b){return a - b;});\n\
    \    return result;\n}\n", "    var collatz = [];\n    while(n > 1){\n       \
    \ if(n % 2 == 0){\n            n = n / 2;\n        }else{\n            n = 3 *\
    \ n + 1;\n        }\n        collatz.push(n);\n    }\n    return collatz;\n}\n",
  "    var collatz = [];\n    while(n > 1){\n        if(n % 2 == 0){\n           \
    \ n = n / 2;\n        }else{\n            n = 3 * n + 1;\n        }\n        collatz.push(n);\n\
    \    }\n    return collatz.sort(function(a,b){return a-b});\n}\n", "    var arr\
    \ = [];\n    while(n > 1){\n        if(n % 2 == 0){\n            n = n / 2;\n\
    \        }else{\n            n = n * 3 + 1;\n        }\n        arr.push(n);\n\
    \    }\n    arr.sort(function(a, b){\n        return a - b;\n    });\n    return\
    \ arr;\n}\n", "    var collatz = [];\n    while(n > 1){\n        if(n % 2 == 0){\n\
    \            n = n / 2;\n        }else{\n            n = 3 * n + 1;\n        }\n\
    \        collatz.push(n);\n    }\n    collatz.sort(function(a,b){return a-b});\n\
    \    return collatz;\n}\n", "    var collatz = [];\n    while(n > 1){\n      \
    \  if(n % 2 === 0){\n            n = n / 2;\n        }else{\n            n = 3\
    \ * n + 1;\n        }\n        collatz.push(n);\n    }\n    return collatz.sort(function(a,b){return\
    \ a-b});\n}\n", "    var collatz = [];\n    while(n > 1){\n        if(n % 2 ===\
    \ 0){\n            n = n / 2;\n        }else{\n            n = 3 * n + 1;\n  \
    \      }\n        collatz.push(n);\n    }\n    collatz.sort(function(a, b){\n\
    \        return a - b;\n    });\n    return collatz;\n}\n", "    var arr = [];\n\
    \    while(n > 1){\n        if(n % 2 == 0){\n            arr.push(n/2);\n    \
    \        n = n/2;\n        }else{\n            arr.push(n*3+1);\n            n\
    \ = n*3+1;\n        }\n    }\n    arr.push(1);\n    arr.sort(function(a,b){return\
    \ a-b});\n    return arr;\n}\n", "  var arr = [];\n  while(n > 1){\n    if(n %\
    \ 2 === 0){\n      arr.push(n / 2);\n      n = n / 2;\n    }else{\n      arr.push(n\
    \ * 3 + 1);\n      n = n * 3 + 1;\n    }\n  }\n  arr.push(1);\n  return arr.sort(function(a,\
    \ b){return a - b;});\n}\n", "    var collatz = [];\n    while(n > 1){\n     \
    \   if(n % 2 === 0){\n            n = n / 2;\n        }else{\n            n =\
    \ 3 * n + 1;\n        }\n        collatz.push(n);\n    }\n    return collatz;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
