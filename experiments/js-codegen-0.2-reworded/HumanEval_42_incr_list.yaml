name: HumanEval_42_incr_list
language: js
prompt: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n\
  // [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4,\
  \ 4, 10, 1, 124]\nfunction incr_list(l){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
  \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
  \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
completions: ["  var i = l.length;\n  while(i--){\n    l[i]++;\n  }\n  return l;\n\
    }\n", "  var i = 0;\n  var l_new = [];\n  while(i < l.length){\n    l_new.push(l[i]\
    \ + 1);\n    i++;\n  }\n  return l_new;\n}\n", "  var i = l.length;\n  while(i--){\n\
    \    l[i]++;\n  }\n  return l;\n}\n", "    var i = l.length;\n    while(i--){\n\
    \        l[i]++;\n    }\n    return l;\n}\n", "\tvar i, j, n = l.length, a = [];\n\
    \tfor(i=0; i<n; i++){\n\t\ta[i] = l[i];\n\t\tfor(j=i+1; j<n; j++){\n\t\t\tif(a[j]\
    \ === l[i]){\n\t\t\t\ta[j] = l[j] + 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return a;\n}\n", "  var i = l.length - 1;\n  while(i >= 0){\n    l[i]++;\n   \
    \ i--;\n  }\n  return l;\n}\n", "\tvar i = 0;\n\tvar result = [];\n\tfor(i = 0;\
    \ i < l.length; i++){\n\t\tresult.push(l[i] + 1);\n\t}\n\treturn result;\n}\n",
  "  var i = l.length - 1;\n  while(i >= 0){\n    l[i]++;\n    i--;\n  }\n  return\
    \ l;\n}\n", "  var i, j, k;\n  for(i = 0; i < l.length; i++){\n    for(j = i;\
    \ j < l.length; j++){\n      for(k = j; k < l.length; k++){\n        if(l[i] ===\
    \ l[j] && l[j] === l[k]){\n          l[i] = l[i] + 1;\n          l[j] = l[j] +\
    \ 1;\n          l[k] = l[k] + 1;\n          break;\n        }\n      }\n    }\n\
    \  }\n  return l;\n}\n", "  var i, j, new_list = [];\n  for(i = 0; i < l.length;\
    \ i++){\n    new_list.push(l[i] + 1);\n  }\n  return new_list;\n}\n", "  var i\
    \ = l.length - 1;\n  while(i >= 0){\n    l[i]++;\n    i--;\n  }\n  return l;\n\
    }\n", "\tvar i, new_l = [];\n\tfor(i = 0; i < l.length; i++){\n\t\tnew_l.push(l[i]\
    \ + 1);\n\t}\n\treturn new_l;\n}\n", "  var i = 0;\n  var result = [];\n  while(i\
    \ < l.length){\n    result.push(l[i] + 1);\n    i++;\n  }\n  return result;\n\
    }\n", "  var i = l.length;\n  while(i--){\n    l[i]++;\n  }\n  return l;\n}\n",
  "  var i = l.length - 1;\n  while(i >= 0){\n    l[i]++;\n    i--;\n  }\n  return\
    \ l;\n}\n", "\tvar i, j, new_l = [];\n\tfor (i = 0; i < l.length; i++){\n\t\t\
    new_l.push(l[i] + 1);\n\t}\n\treturn new_l;\n}\n", "    var i, j, n = l.length,\
    \ a = [];\n    for(i=0; i<n; i++){\n        a[i] = l[i];\n    }\n    for(i=n-1;\
    \ i>=0; i--){\n        a[i] = a[i] + 1;\n        if(a[i] < 10){\n            a[i]\
    \ = \"0\" + a[i];\n        }\n    }\n    return a;\n}\n", "  var i, j, new_l =\
    \ [];\n  for(i = 0; i < l.length; i++){\n    new_l.push(l[i]);\n  }\n  for(i =\
    \ 0; i < l.length; i++){\n    for(j = 0; j < l.length; j++){\n      if(l[i] ===\
    \ l[j]){\n        new_l[i] = l[i] + 1;\n      }\n    }\n  }\n  return new_l;\n\
    }\n", "    var i, j, k;\n    for(i=0; i<l.length; i++){\n        for(j=l.length-1;\
    \ j>i; j--){\n            if(l[j] === l[j-1]){\n                l[j] = l[j] +\
    \ 1;\n                for(k=j; k<l.length; k++){\n                    l[k] = l[k+1];\n\
    \                }\n                l.pop();\n                break;\n       \
    \     }\n        }\n    }\n    return l;\n}\n", "  var i = 0;\n  var result =\
    \ [];\n  for(i = 0; i < l.length; i++){\n    result.push(l[i] + 1);\n  }\n  return\
    \ result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
