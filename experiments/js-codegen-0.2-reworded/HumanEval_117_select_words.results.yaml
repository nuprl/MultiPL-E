language: js
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var arr = [];\n    if(s.length ===\
    \ 0) return arr;\n    var i = 0, j = 0, k = 0;\n    while(i < s.length){\n   \
    \     if(s[i] === ' '){\n            i++;\n            continue;\n        }\n\
    \        if(k === n){\n            arr.push(s.substring(j, i));\n            k\
    \ = 0;\n            j = i;\n        }\n        k++;\n        i++;\n    }\n   \
    \ if(k === n){\n        arr.push(s.substring(j, i));\n    }\n    return arr;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary ',\n\
    \  'had a ',\n  'litt',\n  'le la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmp_kyl4urw.js:45:10)\n    at Object.<anonymous> (/tmp/tmp_kyl4urw.js:54:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary ',\
    \ 'had a ', 'litt', 'le la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341866
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var arr = [];\n    if(s.length ==\
    \ 0) return arr;\n    var i = 0, j = 0;\n    while(i < s.length){\n        if(s[i]\
    \ == ' '){\n            i++;\n            continue;\n        }\n        if(j ==\
    \ n){\n            arr.push(s.substring(i, i+j));\n            i += j;\n     \
    \       j = 0;\n        }\n        j++;\n        i++;\n    }\n    return arr;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'had ',\n\
    \  'tle '\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpj7tygpq7.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmpj7tygpq7.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'had ',\
    \ 'tle ' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341866
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var arr = [];\n  if(s.length === 0){\n\
    \    return arr;\n  }\n  var words = s.split(\" \");\n  for(var i = 0; i < words.length;\
    \ i++){\n    if(words[i].length === n){\n      arr.push(words[i]);\n    }\n  }\n\
    \  return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmprey9vqc6.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmprey9vqc6.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341866
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  if(s.length === 0){\n\
    \    return words;\n  }\n  var words = [];\n  for(var i = 0; i < s.length; i++){\n\
    \    var word = s.substring(i, i + n);\n    if(word.length === n){\n      words.push(word);\n\
    \    }\n  }\n  return words;\n}\n<|endoftext|><|javascript|>import React from\
    \ 'react';\nimport { storiesOf } from '@storybook/react';\nimport { action } from\
    \ '@storybook/addon-actions';\nimport { withKnobs, boolean, text, number } from\
    \ '@storybook/addon-knobs';\nimport { withInfo } from '@storybook/addon-info';\n\
    \nimport { Button, ButtonGroup } from '../Button';\nimport { ButtonGroupInfo }\
    \ from '../ButtonGroup';\n\nconst stories = storiesOf('ButtonGroup', module);\n\
    \nstories.addDecorator(withKnobs);\nstories.addDecorator(withInfo);\n\nstories.add('ButtonGroup',\
    \ () => (\n  <ButtonGroup>\n    <Button>Button 1</Button>\n    <Button>Button\
    \ 2</Button>\n    <Button>Button 3</Button>\n  </ButtonGroup>\n));\n\nstories.add('ButtonGroup\
    \ with info', () => (\n  <ButtonGroupInfo>\n    <Button>Button 1</Button>\n  \
    \  <Button>Button 2</Button>\n    <Button>Button 3</Button>\n  </ButtonGroupInfo>\n\
    ));\n\nstories.add('ButtonGroup with disabled', () => (\n  <ButtonGroup>\n   \
    \ <Button disabled>Button 1</Button>\n    <Button>Button 2</Button>\n    <Button>Button\
    \ 3</Button>\n  </ButtonGroup>\n));\n\nstories.add('ButtonGroup with disabled\
    \ and info', () => (\n  <ButtonGroupInfo>\n    <Button disabled>Button 1</Button>\n\
    \    <Button>Button 2</Button>\n    <Button>Button 3</Button>\n  </ButtonGroupInfo>\n\
    ));\n\nstories.add('ButtonGroup with info and disabled', () => (\n  <ButtonGroupInfo>\n\
    \    <Button>Button 1</Button>\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp98mmdcia.js:31\n<|endoftext|><|javascript|>import React from 'react';\n\
    ^\n\nSyntaxError: Unexpected token '<'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341866
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var arr = [];\n  var words = s.split(\"\
    \ \");\n  for(var i = 0; i < words.length; i++){\n    if(words[i].length == n){\n\
    \      arr.push(words[i]);\n    }\n  }\n  return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpvdgtqdlx.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvdgtqdlx.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341866
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var words = [];\n    if(s.length ===\
    \ 0) return words;\n    var i = 0;\n    var j = 0;\n    while(i < s.length){\n\
    \        if(s[i] === ' '){\n            i++;\n            continue;\n        }\n\
    \        if(j === n){\n            words.push(s.substring(i, i + j));\n      \
    \      i += j;\n            j = 0;\n        }\n        else{\n            j++;\n\
    \        }\n    }\n    return words;\n}\n<|endoftext|><|javascript|>'use strict';\n\
    \nvar _ = require('lodash');\nvar async = require('async');\nvar fs = require('fs');\n\
    var path = require('path');\nvar util = require('util');\n\nvar config = require('../config');\n\
    var logger = require('../logger');\nvar db = require('../db');\nvar utils = require('../utils');\n\
    \nvar db_name = config.db.name;\nvar db_host = config.db.host;\nvar db_port =\
    \ config.db.port;\nvar db_user = config.db.user;\nvar db_password = config.db.password;\n\
    \nvar db_connection = null;\n\nvar db_init = function() {\n  if (db_connection)\
    \ {\n    return;\n  }\n\n  db_connection = db.connect(db_name, db_host, db_port,\
    \ db_user, db_password);\n\n  db_connection.on('error', function(err) {\n    logger.error('Database\
    \ error: ' + err.message);\n  });\n\n  db_connection.on('open', function() {\n\
    \    logger.info('Database connection established');\n  });\n};\n\nvar db_close\
    \ = function() {\n  if (!db_connection) {\n    return;\n  }\n\n  db_connection.end();\n\
    \  db_connection = null;\n};\n\nvar db_query = function(query, params, callback)\
    \ {\n  if (!db_connection) {\n    return callback(new Error('Database not connected'));\n\
    \  }\n\n  db_connection.query(query, params, function(err, result)\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpl0lyxcw6.js:38\n<|endoftext|><|javascript|>'use strict';\n^\n\n\
    SyntaxError: Unexpected token '<'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341866
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var arr = [];\n    if(s.length ===\
    \ 0) return arr;\n    var arr = [];\n    var words = s.split(\" \");\n    for(var\
    \ i = 0; i < words.length; i++){\n        var word = words[i];\n        var count\
    \ = 0;\n        for(var j = 0; j < word.length; j++){\n            if(word[j]\
    \ === ' ') continue;\n            count++;\n            if(count === n) arr.push(word);\n\
    \        }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'little',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n \
    \   at test (/tmp/tmpm0qbtsw1.js:39:10)\n    at Object.<anonymous> (/tmp/tmpm0qbtsw1.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'little', 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341866
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var arr = [];\n    var words = s.split('\
    \ ');\n    for(var i = 0; i < words.length; i++){\n        var count = 0;\n  \
    \      for(var j = 0; j < words[i].length; j++){\n            if(words[i][j] ===\
    \ ' '){\n                count++;\n            }\n            if(count === n){\n\
    \                arr.push(words[i]);\n                break;\n            }\n\
    \        }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpoyefbbwu.js:40:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpoyefbbwu.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341866
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var arr = [];\n  if(s.length === 0){\n\
    \    return arr;\n  }\n  var words = s.split(\" \");\n  for(var i = 0; i < words.length;\
    \ i++){\n    var word = words[i];\n    var consonants = word.split(\"\");\n  \
    \  if(consonants.length === n){\n      arr.push(word);\n    }\n  }\n  return arr;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpbq5s_3gs.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbq5s_3gs.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341866
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var arr = [];\n  if(s.length === 0)\
    \ return arr;\n  var words = s.split(' ');\n  for(var i = 0; i < words.length;\
    \ i++){\n    var word = words[i];\n    var count = 0;\n    for(var j = 0; j <\
    \ word.length; j++){\n      if(word.charAt(j) === ' ') continue;\n      count++;\n\
    \      if(count === n) arr.push(word);\n    }\n  }\n  return arr;\n}\n<|endoftext|><|javascript|>import\
    \ React from 'react';\nimport { Link } from 'react-router';\nimport { connect\
    \ } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport {\
    \ push } from 'react-router-redux';\nimport { connect } from 'react-redux';\n\
    import { bindActionCreators } from 'redux';\nimport { Link } from 'react-router';\n\
    import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\
    import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\
    import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\
    import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\
    import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\
    import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\
    import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\
    import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\
    import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\
    import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\
    import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\
    import { connect } from\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_fzeqzba.js:32\n<|endoftext|><|javascript|>import React from 'react';\n\
    ^\n\nSyntaxError: Unexpected token '<'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341866
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var arr = [];\n    if(s.length ===\
    \ 0){\n        return arr;\n    }\n    var words = s.split(' ');\n    for(var\
    \ i = 0; i < words.length; i++){\n        if(words[i].length === n){\n       \
    \     arr.push(words[i]);\n        }\n    }\n    return arr;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpyz4cdd4a.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyz4cdd4a.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341866
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var arr = [];\n    if(s.length ===\
    \ 0) return arr;\n    var words = s.split(\" \");\n    for(var i = 0; i < words.length;\
    \ i++){\n        if(words[i].length === n){\n            arr.push(words[i]);\n\
    \        }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpa93euiae.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpa93euiae.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341866
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var arr = [];\n  if(s.length == 0) return\
    \ arr;\n  var arr = [];\n  for(var i = 0; i < s.length; i++){\n    if(s[i] ==\
    \ ' ') continue;\n    var str = s.substring(i, i + n);\n    if(arr.indexOf(str)\
    \ == -1) arr.push(str);\n  }\n  return arr;\n}\n<|endoftext|><|javascript|>/**\n\
    \ * @fileoverview Rule to flag use of function declaration identifiers as variables.\n\
    \ * @author Ian Christian Myers\n */\n\n\"use strict\";\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpgf5o7wzj.js:28\n<|endoftext|><|javascript|>/**\n^\n\nSyntaxError:\
    \ Unexpected token '<'\n    at Object.compileFunction (node:vm:360:18)\n    at\
    \ wrapSafe (node:internal/modules/cjs/loader:1048:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341866
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var arr = [];\n    var i = 0;\n  \
    \  var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var nl = s.split(\"\
    \ \");\n    for(i=0;i<nl.length;i++){\n        if(nl[i].length > 0){\n       \
    \     for(j=0;j<nl[i].length;j++){\n                if(nl[i][j] == \" \"){\n \
    \                   k = j;\n                    break;\n                }\n  \
    \          }\n            for(l=k;l<nl[i].length;l++){\n                if(nl[i][l]\
    \ == \" \"){\n                    m = l;\n                    break;\n       \
    \         }\n            }\n            if(m-k == n){\n                arr.push(nl[i].substring(k,m));\n\
    \            }\n            k = m+1;\n        }\n    }\n    return arr;\n}\n<|endoftext|><|javascript|>var\
    \ searchData=\n[\n  ['_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpldev5rsy.js:47\n<|endoftext|><|javascript|>var searchData=\n^\n\
    \nSyntaxError: Unexpected token '<'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341866
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  if(s.length === 0)\
    \ return words;\n  for(var i = 0; i < s.length; i++){\n    if(s[i] === ' ') continue;\n\
    \    var word = s.substring(i, i + n);\n    if(word.length === n) words.push(word);\n\
    \    i += word.length - 1;\n  }\n  return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'had ',\n  'a li',\n  'ttle',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp1hdyvu0w.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1hdyvu0w.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had ', 'a li', 'ttle', 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341866
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var arr = [];\n    if(s.length ===\
    \ 0) return arr;\n    var words = s.split(\" \");\n    for(var i = 0; i < words.length;\
    \ i++){\n        if(words[i].length === n){\n            arr.push(words[i]);\n\
    \        }\n    }\n    return arr;\n}\n<|endoftext|><|javascript|>import {\n \
    \ moduleForComponent,\n  test\n} from 'ember-qunit';\n\nmoduleForComponent('md-list-item',\
    \ {\n  // specify the other units that are required for this test\n  // needs:\
    \ ['component:foo', 'helper:bar']\n});\n\ntest('it renders', function(assert)\
    \ {\n  assert.expect(2);\n\n  // creates the component instance\n  var component\
    \ = this.subject();\n  assert.equal(component._state, 'preRender');\n\n  // renders\
    \ the component to the page\n  this.render();\n  assert.equal(component._state,\
    \ 'inDOM');\n});\n<|endoftext|><|javascript|>import React from 'react';\nimport\
    \ PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\
    import Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\
    import { withRouter } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\n\
    \nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexDirection:\
    \ 'column',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n\
    \    padding: theme.spacing.unit * 2,\n  },\n  button: {\n    margin: theme.spacing.unit\
    \ * 2,\n  },\n});\n\nclass NavBar extends React.Component {\n  static propTypes\
    \ = {\n    classes: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const\
    \ { classes } = this.props;\n\n    return (\n      <div className={classes.root}>\n\
    \        <Link className={classes.button} to=\"/\">\n          Home\n        </Link>\n\
    \        \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxhy_zi4w.js:28\n<|endoftext|><|javascript|>import {\n^\n\nSyntaxError:\
    \ Unexpected token '<'\n    at Object.compileFunction (node:vm:360:18)\n    at\
    \ wrapSafe (node:internal/modules/cjs/loader:1048:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341866
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var arr = [];\n    var words = s.split(\"\
    \ \");\n    for(var i = 0; i < words.length; i++){\n        if(words[i].length\
    \ == n){\n            arr.push(words[i]);\n        }\n    }\n    return arr;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmplu_bwtw_.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmplu_bwtw_.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341866
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var arr = [];\n    if(s.length ===\
    \ 0){\n        return arr;\n    }\n    var i = 0;\n    while(i < s.length){\n\
    \        if(s[i] === ' '){\n            i++;\n            continue;\n        }\n\
    \        var j = i;\n        while(j < s.length && s[j] !== ' '){\n          \
    \  j++;\n        }\n        if(j - i === n){\n            arr.push(s.substring(i,\
    \ j));\n            i = j;\n        }else{\n            i++;\n        }\n    }\n\
    \    return arr;\n}\n<|endoftext|><|javascript|>/**\n * @author       Richard\
    \ Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license\
    \      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nvar GetTilesWithin\
    \ = require('./GetTilesWithin');\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpotk549w9.js:41\n<|endoftext|><|javascript|>/**\n^\n\nSyntaxError:\
    \ Unexpected token '<'\n    at Object.compileFunction (node:vm:360:18)\n    at\
    \ wrapSafe (node:internal/modules/cjs/loader:1048:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341866
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var arr = [];\n    if(s.length ===\
    \ 0) return arr;\n    var words = s.split(\" \");\n    for(var i = 0; i < words.length;\
    \ i++){\n        var word = words[i];\n        var count = 0;\n        for(var\
    \ j = 0; j < word.length; j++){\n            if(word[j].match(/[a-zA-Z]/)){\n\
    \                count++;\n            }\n        }\n        if(count === n){\n\
    \            arr.push(word);\n        }\n    }\n    return arr;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpnutr14p0.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnutr14p0.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341866
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var arr = [];\n    if(s.length ===\
    \ 0) return arr;\n    var words = s.split(' ');\n    for(var i = 0; i < words.length;\
    \ i++){\n        var word = words[i];\n        var count = 0;\n        for(var\
    \ j = 0; j < word.length; j++){\n            if(word.charAt(j) === ' ') continue;\n\
    \            count++;\n            if(count === n) arr.push(word);\n        }\n\
    \    }\n    return arr;\n}\n<|endoftext|><|javascript|>import React from 'react';\n\
    import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\
    import { bindActionCreators } from 'redux';\nimport { push } from 'react-router-redux';\n\
    import { connectToStores } from 'fluxible-addons-react';\nimport { createStructuredSelector\
    \ } from 'reselect';\nimport { FormattedMessage } from 'react-intl';\nimport {\
    \ Form, FormGroup, FormControl, ControlLabel, Button } from 'react-bootstrap';\n\
    import { get } from 'lodash';\nimport { createSelector } from 'reselect';\nimport\
    \ { createAsyncSelector } from 'reselect-async';\nimport { selectUser, selectUserId\
    \ } from 'containers/App/selectors';\nimport { selectIsLoggedIn } from 'containers/App/selectors';\n\
    import { selectCurrentUser } from 'containers/App/selectors';\nimport { selectCurrentUserId\
    \ } from 'containers/App/selectors';\nimport { selectCurrentUserProfile } from\
    \ 'containers/App/selectors';\nimport { selectCurrentUserProfileId } from 'containers/App/selectors';\n\
    import { selectCurrentUserProfileImage } from 'containers/App/selectors';\nimport\
    \ { selectCurrentUserProfileImageId } from 'containers/App/selectors';\nimport\
    \ { selectCurrentUserProfileImageUrl } from 'containers/App/selectors';\nimport\
    \ { selectCurrentUserProfileImageUrlId } from 'containers/App/selectors';\nimport\
    \ { selectCurrentUserProfileImageUrlLarge } from 'containers/App/selectors';\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpz183fkhc.js:32\n<|endoftext|><|javascript|>import React from 'react';\n\
    ^\n\nSyntaxError: Unexpected token '<'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341866
