{
  "name": "HumanEval_20_find_closest_elements",
  "language": "js",
  "prompt": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for (var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n    }\n    for (var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if (diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n    }\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpq5dyv6is.js:49:10)\n    at Object.<anonymous> (/tmp/tmpq5dyv6is.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n        }\n    }\n    min_value = numbers[min_index];\n    max_value = numbers[max_index];\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpmt2bo9pk.js:47:10)\n    at Object.<anonymous> (/tmp/tmpmt2bo9pk.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    var diff = 0;\n    for(var i = 0; i < numbers.length; i++){\n        diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    min_value = numbers[min_index];\n    max_value = numbers[min_index];\n    for(var i = 0; i < numbers.length; i++){\n        diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp6gs49fsu.js:48:10)\n    at Object.<anonymous> (/tmp/tmp6gs49fsu.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for (var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n    }\n    for (var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if (diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n    }\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpq5dyv6is.js:49:10)\n    at Object.<anonymous> (/tmp/tmpq5dyv6is.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    var min_diff_value = 0;\n    var max_diff_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpo421ng_m.js:47:10)\n    at Object.<anonymous> (/tmp/tmpo421ng_m.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var min_value = 0;\n  var max_index = 0;\n  var max_value = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpg3_ct9uf.js:49:10)\n    at Object.<anonymous> (/tmp/tmpg3_ct9uf.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n        }\n    }\n    min_value = numbers[min_index];\n    max_value = numbers[max_index];\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp9ko_v19o.js:47:10)\n    at Object.<anonymous> (/tmp/tmp9ko_v19o.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_val = 0;\n    var max_val = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_val = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_val = numbers[i];\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_val = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_val = numbers[i];\n        }\n    }\n    return [min_val, max_val];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpvw_w1j3q.js:49:10)\n    at Object.<anonymous> (/tmp/tmpvw_w1j3q.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if (diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpb4uv4u7g.js:49:10)\n    at Object.<anonymous> (/tmp/tmpb4uv4u7g.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmp40rmcmrd.js:71\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min = numbers[0];\n    var max = numbers[0];\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] < min){\n            min = numbers[i];\n        }\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n    }\n    var closest = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] === min || numbers[i] === max){\n            closest.push(numbers[i]);\n        }\n    }\n    return closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp1_2avery.js:32:10)\n    at Object.<anonymous> (/tmp/tmp1_2avery.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    var diff = 0;\n    for(var i = 0; i < numbers.length; i++){\n        diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n    }\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpx4yzgcmu.js:36:10)\n    at Object.<anonymous> (/tmp/tmpx4yzgcmu.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmpdsc0dhuq.js:92\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = numbers[0] - numbers[1];\n    var min_diff_index = 0;\n    var min_diff_value = min_diff;\n    for(var i = 0; i < numbers.length - 1; i++){\n        var diff = numbers[i] - numbers[i + 1];\n        if(diff < min_diff){\n            min_diff = diff;\n            min_diff_index = i;\n            min_diff_value = diff;\n        }\n    }\n    return [numbers[min_diff_index], numbers[min_diff_index + 1]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3.9\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp994m_05p.js:27:10)\n    at Object.<anonymous> (/tmp/tmp994m_05p.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3.9 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = numbers[0] - numbers[1];\n  var min_index = 0;\n  var max_diff = numbers[0] - numbers[1];\n  var max_index = 0;\n  for (var i = 0; i < numbers.length - 1; i++){\n    var diff = numbers[i] - numbers[i + 1];\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    if (diff > max_diff){\n      max_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp2k58ikx7.js:31:10)\n    at Object.<anonymous> (/tmp/tmp2k58ikx7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var closest_pair = [];\n    var min_diff = Number.MAX_VALUE;\n    for (var i = 0; i < numbers.length - 1; i++) {\n        for (var j = i + 1; j < numbers.length; j++) {\n            var diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                closest_pair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5.9,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  5.9\n]\n    at test (/tmp/tmpcx5h1xan.js:28:10)\n    at Object.<anonymous> (/tmp/tmpcx5h1xan.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5.9, 5 ],\n  expected: [ 5, 5.9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = numbers[0];\n  var max_value = numbers[0];\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - min_value);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - max_value);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpg6_ith91.js:33:10)\n    at Object.<anonymous> (/tmp/tmpg6_ith91.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var closest_pair = [0, 0];\n    var closest_pair_distance = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmp6jm257nb.js:92\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    var diff = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmpzokj6fyu.js:92\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpoiz9pou0.js:45:10)\n    at Object.<anonymous> (/tmp/tmpoiz9pou0.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var closest_pair = [];\n  for(var i = 0; i < numbers.length; i++){\n    for(var j = i + 1; j < numbers.length; j++){\n      var diff = Math.abs(numbers[i] - numbers[j]);\n      if(diff < min_diff){\n        min_diff = diff;\n        closest_pair = [numbers[i], numbers[j]];\n      }\n    }\n  }\n  return closest_pair;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5.9,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  5.9\n]\n    at test (/tmp/tmps2fn95ls.js:28:10)\n    at Object.<anonymous> (/tmp/tmps2fn95ls.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5.9, 5 ],\n  expected: [ 5, 5.9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = numbers[0] - numbers[1];\n  var min_index = 0;\n  var max_diff = numbers[0] - numbers[1];\n  var max_index = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = numbers[i] - numbers[1];\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    if(diff > max_diff){\n      max_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp2jnnzsrz.js:31:10)\n    at Object.<anonymous> (/tmp/tmp2jnnzsrz.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var min_value = 0;\n  var max_index = 0;\n  var max_value = 0;\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n    if (diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp00nbxbcm.js:49:10)\n    at Object.<anonymous> (/tmp/tmp00nbxbcm.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = numbers[0] - numbers[1];\n    var min_diff_index = 0;\n    var min_diff_number = numbers[0];\n    for (var i = 0; i < numbers.length - 1; i++){\n        var diff = numbers[i] - numbers[i + 1];\n        if (diff < min_diff){\n            min_diff = diff;\n            min_diff_index = i;\n            min_diff_number = numbers[i];\n        }\n    }\n    return [min_diff_number, numbers[min_diff_index + 1]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3.9\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpd7ithm7x.js:27:10)\n    at Object.<anonymous> (/tmp/tmpd7ithm7x.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3.9 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n        }\n    }\n    min_value = numbers[min_index];\n    max_value = numbers[max_index];\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp9ko_v19o.js:47:10)\n    at Object.<anonymous> (/tmp/tmp9ko_v19o.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_num = 0;\n    var max_num = 0;\n    var min_diff_num = 0;\n    var max_diff_num = 0;\n    var diff_num = 0;\n    var diff = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmpl3tu5t5u.js:91\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  min_value = numbers[min_index];\n  max_value = numbers[min_index];\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp_9xwxda3.js:47:10)\n    at Object.<anonymous> (/tmp/tmp_9xwxda3.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = numbers[0];\n  var max_value = numbers[0];\n  for(var i = 0; i < numbers.length; i++){\n    if(numbers[i] < min_value){\n      min_value = numbers[i];\n      min_index = i;\n    }\n    if(numbers[i] > max_value){\n      max_value = numbers[i];\n      max_index = i;\n    }\n    var diff = Math.abs(numbers[i] - min_value);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - max_value);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpvk5gil8a.js:41:10)\n    at Object.<anonymous> (/tmp/tmpvk5gil8a.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  var min_diff_value = 0;\n  var max_diff_value = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmpz6u7f049.js:72\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  min_value = numbers[min_index];\n  max_value = numbers[min_index];\n  for(var i = 0; i < numbers.length; i++){\n    if(numbers[i] < min_value){\n      min_value = numbers[i];\n      min_index = i;\n    }\n    if(numbers[i] > max_value){\n      max_value = numbers[i];\n      max_index = i;\n    }\n  }\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp1o_pb50y.js:45:10)\n    at Object.<anonymous> (/tmp/tmp1o_pb50y.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[2]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    min_value = numbers[min_index];\n    max_value = numbers[min_index];\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] < min_value){\n            min_value = numbers[i];\n        }\n        if(numbers[i] > max_value){\n            max_value = numbers[i];\n        }\n    }\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpt4nvxsiv.js:48:10)\n    at Object.<anonymous> (/tmp/tmpt4nvxsiv.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpz0jiy6m9.js:49:10)\n    at Object.<anonymous> (/tmp/tmpz0jiy6m9.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var closest_pair = [0, 0];\n    var min_diff = Number.MAX_VALUE;\n    for (var i = 0; i < numbers.length - 1; i++){\n        for (var j = i + 1; j < numbers.length; j++){\n            var diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff){\n                min_diff = diff;\n                closest_pair[0] = numbers[i];\n                closest_pair[1] = numbers[j];\n            }\n        }\n    }\n    return closest_pair;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5.9,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  5.9\n]\n    at test (/tmp/tmptqjfmmjo.js:29:10)\n    at Object.<anonymous> (/tmp/tmptqjfmmjo.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5.9, 5 ],\n  expected: [ 5, 5.9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  min_value = numbers[min_index];\n  max_value = numbers[max_index];\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmptn872kl7.js:47:10)\n    at Object.<anonymous> (/tmp/tmptn872kl7.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if (diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpstbb0oes.js:52:10)\n    at Object.<anonymous> (/tmp/tmpstbb0oes.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp93a75rhy.js:49:10)\n    at Object.<anonymous> (/tmp/tmp93a75rhy.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n    }\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpop1jgw17.js:49:10)\n    at Object.<anonymous> (/tmp/tmpop1jgw17.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min = numbers[0];\n  var max = numbers[0];\n  var min_index = 0;\n  var max_index = 0;\n  for(var i = 0; i < numbers.length; i++){\n    if(numbers[i] < min){\n      min = numbers[i];\n      min_index = i;\n    }\n    if(numbers[i] > max){\n      max = numbers[i];\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp4wmvj6b1.js:30:10)\n    at Object.<anonymous> (/tmp/tmp4wmvj6b1.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n    }\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpop1jgw17.js:49:10)\n    at Object.<anonymous> (/tmp/tmpop1jgw17.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for (var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n    }\n    for (var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if (diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n    }\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpq5dyv6is.js:49:10)\n    at Object.<anonymous> (/tmp/tmpq5dyv6is.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpoiz9pou0.js:45:10)\n    at Object.<anonymous> (/tmp/tmpoiz9pou0.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var min_value = 0;\n  var max_index = 0;\n  var max_value = 0;\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  return [min_value, numbers[min_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp7893lg0b.js:49:10)\n    at Object.<anonymous> (/tmp/tmp7893lg0b.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_val = numbers[0];\n    var max_val = numbers[0];\n    for (var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - min_val);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - max_val);\n        if (diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n        }\n        if (numbers[i] > max_val){\n            max_val = numbers[i];\n        }\n        if (numbers[i] < min_val){\n            min_val = numbers[i];\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpxmpdy_xx.js:39:10)\n    at Object.<anonymous> (/tmp/tmpxmpdy_xx.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmp6zln315i.js:78\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  min_value = numbers[min_index];\n  max_value = numbers[min_index];\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp_9xwxda3.js:47:10)\n    at Object.<anonymous> (/tmp/tmp_9xwxda3.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  var min_diff_value = 0;\n  var max_diff_value = 0;\n  var min_diff_index = 0;\n  var max_diff_index = 0;\n  var diff_value = 0;\n  var diff_index = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmprbhm6abq.js:89\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  min_value = numbers[min_index];\n  max_value = numbers[min_index];\n  for (var i = 0; i < numbers.length; i++){\n    if (numbers[i] < min_value){\n      min_value = numbers[i];\n      min_index = i;\n    }\n    if (numbers[i] > max_value){\n      max_value = numbers[i];\n      max_index = i;\n    }\n  }\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpcntmddk8.js:45:10)\n    at Object.<anonymous> (/tmp/tmpcntmddk8.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  var diff = 0;\n  for(var i = 0; i < numbers.length; i++){\n    diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  min_value = numbers[min_index];\n  max_value = numbers[min_index];\n  for(var i = 0; i < numbers.length; i++){\n    diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpaipqmm__.js:48:10)\n    at Object.<anonymous> (/tmp/tmpaipqmm__.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmp6zln315i.js:78\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  min_value = numbers[min_index];\n  max_value = numbers[min_index];\n  for(var i = 0; i < numbers.length; i++){\n    if(numbers[i] < min_value){\n      min_value = numbers[i];\n      min_index = i;\n    }\n    if(numbers[i] > max_value){\n      max_value = numbers[i];\n      max_index = i;\n    }\n  }\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp1o_pb50y.js:45:10)\n    at Object.<anonymous> (/tmp/tmp1o_pb50y.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var min_value = 0;\n  var max_index = 0;\n  var max_value = 0;\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  return [min_value, numbers[min_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp7893lg0b.js:49:10)\n    at Object.<anonymous> (/tmp/tmp7893lg0b.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    var min_diff_value = 0;\n    var max_diff_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n    }\n    return [min_value, numbers[min_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp13latapc.js:51:10)\n    at Object.<anonymous> (/tmp/tmp13latapc.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = numbers[0] - numbers[1];\n    var min_diff_index = 0;\n    var max_diff = numbers[0] - numbers[1];\n    var max_diff_index = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = numbers[i] - numbers[1];\n        if(diff < min_diff){\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        if(diff > max_diff){\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return [numbers[min_diff_index], numbers[max_diff_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpp0pbpb4h.js:31:10)\n    at Object.<anonymous> (/tmp/tmpp0pbpb4h.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_val = 0;\n    var max_val = 0;\n    for (var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    min_val = numbers[min_index];\n    max_val = numbers[min_index];\n    for (var i = 0; i < numbers.length; i++){\n        if (numbers[i] < min_val){\n            min_val = numbers[i];\n            min_index = i;\n        }\n        if (numbers[i] > max_val){\n            max_val = numbers[i];\n            max_index = i;\n        }\n    }\n    return [min_val, max_val];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmps_8roxiv.js:45:10)\n    at Object.<anonymous> (/tmp/tmps_8roxiv.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min = numbers[0];\n    var max = numbers[0];\n    for (var i = 1; i < numbers.length; i++){\n        if (numbers[i] < min){\n            min = numbers[i];\n        }\n        if (numbers[i] > max){\n            max = numbers[i];\n        }\n    }\n    var min_index = 0;\n    var max_index = 0;\n    for (var i = 0; i < numbers.length; i++){\n        if (numbers[i] == min){\n            min_index = i;\n        }\n        if (numbers[i] == max){\n            max_index = i;\n        }\n    }\n    var min_index_other = (min_index + 1) % numbers.length;\n    var max_index_other = (max_index + 1) % numbers.length;\n    return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpkifa1q86.js:38:10)\n    at Object.<anonymous> (/tmp/tmpkifa1q86.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  var diff = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmpgzgvmz7y.js:92\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  return [min_value, numbers[min_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp_n_fku7m.js:49:10)\n    at Object.<anonymous> (/tmp/tmp_n_fku7m.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = numbers[0] - numbers[1];\n    var min_index = 0;\n    var max_diff = numbers[0] - numbers[1];\n    var max_index = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = numbers[i] - numbers[i+1];\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        if(diff > max_diff){\n            max_diff = diff;\n            max_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpu956oeuu.js:31:10)\n    at Object.<anonymous> (/tmp/tmpu956oeuu.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    min_value = numbers[min_index];\n    max_value = numbers[max_index];\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpewi_05_2.js:47:10)\n    at Object.<anonymous> (/tmp/tmpewi_05_2.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var closest_pair = [],\n      closest_pair_index = 0,\n      closest_pair_value = 0,\n      i = 0,\n      j = 0,\n      k = 0,\n      l = 0,\n      m = 0,\n      n = 0,\n      o = 0,\n      p = 0,\n      q = 0,\n      r = 0,\n      s = 0,\n      t = 0,\n      u = 0,\n      v = 0,\n      w = 0,\n      x = 0,\n      y = 0,\n      z = 0,\n      a = 0,\n      b = 0,\n      c = 0,\n      d = 0,\n      e = 0,\n      f = 0,\n      g = 0,\n      h = 0,\n      i = 0,\n      j = 0,\n      k = 0,\n      l = 0,\n      m = 0,\n      n = 0,\n      o = 0,\n      p = 0,\n      q = 0,\n      r = 0,\n      s = 0,\n      t = 0,\n      u = 0,\n      v = 0,\n      w = 0,\n      x = 0,\n      y = 0,\n      z = 0,\n      a = 0,\n      b = 0,\n      c = 0,\n      d = 0,\n      e = 0,\n      f = 0,\n      g = 0,\n      h = 0,\n      i = 0,\n      j = 0,\n      k = 0,\n      l = 0,\n      m = 0,\n      n = 0,\n      o = 0,\n      p = 0,\n      q = 0,\n      r = 0,\n      s = 0,\n      t = 0,\n      u = 0,\n      v = 0,\n      w = 0,\n      x = 0,\n      y = 0,\n      z = 0,\n      a = 0,\n      b = 0,\n      c = 0,\n      d = 0,\n      e = 0,\n      f = 0,\n      g = 0,\n      h = 0,\n      i = 0,\n      j = 0,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmphyfrmsa3.js:91\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    min_value = numbers[min_index];\n    max_value = numbers[max_index];\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpewi_05_2.js:47:10)\n    at Object.<anonymous> (/tmp/tmpewi_05_2.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = numbers[0] - numbers[1];\n    var min_index = 0;\n    var max_diff = numbers[0] - numbers[1];\n    var max_index = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = numbers[i] - numbers[1];\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        if(diff > max_diff){\n            max_diff = diff;\n            max_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp9u_wdxo6.js:31:10)\n    at Object.<anonymous> (/tmp/tmp9u_wdxo6.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpz0jiy6m9.js:49:10)\n    at Object.<anonymous> (/tmp/tmpz0jiy6m9.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var closest_pair = [];\n  var min_diff = Infinity;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmpc5pfmz5i.js:93\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_num = 0;\n    var max_num = 0;\n    var min_num_index = 0;\n    var max_num_index = 0;\n    for (var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_num = numbers[i];\n            min_num_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_num = numbers[i];\n            min_num_index = i;\n        }\n    }\n    for (var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_num = numbers[i];\n            min_num_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_num = numbers[i];\n            min_num_index = i;\n        }\n    }\n    return [numbers[min_num_index], numbers[max_num_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmptjp03m08.js:49:10)\n    at Object.<anonymous> (/tmp/tmptjp03m08.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  min_value = numbers[min_index];\n  max_value = numbers[min_index];\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp_9xwxda3.js:47:10)\n    at Object.<anonymous> (/tmp/tmp_9xwxda3.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var closest_pair = [0, 0];\n    var min_diff = Number.MAX_VALUE;\n    for(var i = 0; i < numbers.length; i++){\n        for(var j = i + 1; j < numbers.length; j++){\n            var diff = Math.abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                closest_pair[0] = numbers[i];\n                closest_pair[1] = numbers[j];\n            }\n        }\n    }\n    return closest_pair;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5.9,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  5.9\n]\n    at test (/tmp/tmpy9to9sti.js:29:10)\n    at Object.<anonymous> (/tmp/tmpy9to9sti.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5.9, 5 ],\n  expected: [ 5, 5.9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    var diff;\n    for(var i = 0; i < numbers.length; i++){\n        diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    min_value = numbers[min_index];\n    max_value = numbers[min_index];\n    for(var i = 0; i < numbers.length; i++){\n        diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpi2qaz78d.js:48:10)\n    at Object.<anonymous> (/tmp/tmpi2qaz78d.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = numbers[0] - numbers[1];\n    var min_index = 0;\n    var max_diff = numbers[0] - numbers[1];\n    var max_index = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = numbers[i] - numbers[0];\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        if(diff > max_diff){\n            max_diff = diff;\n            max_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmphs22bikt.js:31:10)\n    at Object.<anonymous> (/tmp/tmphs22bikt.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if (diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpb4uv4u7g.js:49:10)\n    at Object.<anonymous> (/tmp/tmpb4uv4u7g.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff && i != min_index){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff && i != min_index && i != max_index){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpsdu14zht.js:40:10)\n    at Object.<anonymous> (/tmp/tmpsdu14zht.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n    }\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpaorrg17u.js:49:10)\n    at Object.<anonymous> (/tmp/tmpaorrg17u.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var closest_pair = [];\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_val = 0;\n  var max_val = 0;\n  var i = 0;\n  var j = 0;\n  var diff = 0;\n  var index = 0;\n  var val = 0;\n  var min_diff_index = 0;\n  var min_diff_val = 0;\n  var max_diff_index = 0;\n  var max_diff_val = 0;\n  var min_diff_index_val = 0;\n  var max_diff_index_val = 0;\n  var min_diff_val_index = 0;\n  var max_diff_val_index = 0;\n  var min_diff_val_val = 0;\n  var max_diff_val_val = 0;\n  for(i = 0; i < numbers.length; i++){\n    for(j = 0; j < numbers.length; j++){\n      if(i == j){\n        continue;\n      }\n      diff = Math.abs(numbers[i] - numbers[j]);\n      if(diff < min_diff){\n        min_diff = diff;\n        min_index = i;\n        max_index = j;\n      }\n    }\n  }\n  min_val = numbers[min_index];\n  max_val = numbers[max_index];\n  min_diff_index = min_index;\n  max_diff_index = max_index;\n  min_diff_val = min_val;\n  max_diff_val = max_val;\n  min_diff_index_val = min_index;\n  max_diff_index_val = max_index;\n  min_diff_val_index = min_index;\n  max_diff_val_index = max_index;\n  min_diff_val_val = min_val;\n  max_diff_val_val = max_val;\n  for(i = 0; i < numbers.length; i++){\n    for(j = 0; j < numbers.length; j++){\n      if\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmpftmi19n9.js:57\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = numbers[0] - numbers[1];\n  var min_index = 0;\n  var max_diff = numbers[0] - numbers[1];\n  var max_index = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = numbers[i] - numbers[i+1];\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    if(diff > max_diff){\n      max_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpc18cqplw.js:31:10)\n    at Object.<anonymous> (/tmp/tmpc18cqplw.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_val = 0;\n  var max_val = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_val = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_val = numbers[i];\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_val = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_val = numbers[i];\n    }\n  }\n  return [min_val, max_val];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmptc60uybn.js:49:10)\n    at Object.<anonymous> (/tmp/tmptc60uybn.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var min_value = 0;\n  var max_index = 0;\n  var max_value = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  return [min_value, numbers[min_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpouywtue_.js:49:10)\n    at Object.<anonymous> (/tmp/tmpouywtue_.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var closest_pair = [numbers[0], numbers[1]];\n    var closest_pair_distance = closest_pair[0] - closest_pair[1];\n    var closest_pair_index = 0;\n    for(var i = 1; i < numbers.length; i++){\n        var current_pair = [numbers[i], numbers[i-1]];\n        var current_pair_distance = current_pair[0] - current_pair[1];\n        if(current_pair_distance < closest_pair_distance){\n            closest_pair_distance = current_pair_distance;\n            closest_pair = current_pair;\n            closest_pair_index = i;\n        }\n    }\n    return [closest_pair[0], closest_pair[1]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2.2,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpq8886t0g.js:28:10)\n    at Object.<anonymous> (/tmp/tmpq8886t0g.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2.2, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = numbers[0];\n  var max_value = numbers[0];\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp3dwhi0at.js:33:10)\n    at Object.<anonymous> (/tmp/tmp3dwhi0at.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[min_index]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    var diff = Math.abs(numbers[i] - numbers[max_index]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp1oehbii0.js:31:10)\n    at Object.<anonymous> (/tmp/tmp1oehbii0.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[2]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[3]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[4]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[5]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[6]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[7]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[8]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[9]);\n        if(diff < min_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmpulga_j3p.js:61\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var closest_pair = [];\n    var min_diff = Number.MAX_VALUE;\n    var i, j;\n    for (i = 0; i < numbers.length - 1; i++) {\n        for (j = i + 1; j < numbers.length; j++) {\n            var diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                closest_pair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5.9,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  5.9\n]\n    at test (/tmp/tmpwiu6n6fw.js:29:10)\n    at Object.<anonymous> (/tmp/tmpwiu6n6fw.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5.9, 5 ],\n  expected: [ 5, 5.9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  var min_diff_value = 0;\n  var max_diff_value = 0;\n  var min_diff_index = 0;\n  var max_diff_index = 0;\n  var diff_value = 0;\n  var diff_index = 0;\n  for(var i = 0; i < numbers.length; i++){\n    diff_value = Math.abs(numbers[i] - numbers[0]);\n    diff_index = i;\n    if(diff_value < min_diff){\n      min_diff = diff_value;\n      min_index = diff_index;\n      min_value = numbers[diff_index];\n    }\n    diff_value = Math.abs(numbers[i] - numbers[1]);\n    diff_index = i;\n    if(diff_value < min_diff){\n      min_diff = diff_value;\n      min_index = diff_index;\n      min_value = numbers[diff_index];\n    }\n  }\n  diff_value = Math.abs(numbers[0] - numbers[1]);\n  diff_index = 1;\n  if(diff_value < min_diff){\n    min_diff = diff_value;\n    min_index = diff_index;\n    min_value = numbers[diff_index];\n  }\n  diff_value = Math.abs(numbers[numbers.length - 1] - numbers[numbers.length - 2]);\n  diff_index = numbers.length - 2;\n  if(diff_value < min_diff){\n    min_diff = diff_value;\n    min_index = diff_index;\n    min_value = numbers[diff_index];\n  }\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpn975opso.js:57:10)\n    at Object.<anonymous> (/tmp/tmpn975opso.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for (var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    min_value = numbers[min_index];\n    max_value = numbers[min_index];\n    for (var i = 0; i < numbers.length; i++){\n        if (numbers[i] < min_value){\n            min_value = numbers[i];\n        }\n        if (numbers[i] > max_value){\n            max_value = numbers[i];\n        }\n    }\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp_efnojou.js:43:10)\n    at Object.<anonymous> (/tmp/tmp_efnojou.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = numbers[0];\n    var max_value = numbers[0];\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] < min_value){\n            min_value = numbers[i];\n            min_index = i;\n        }\n        if(numbers[i] > max_value){\n            max_value = numbers[i];\n            max_index = i;\n        }\n        var diff = Math.abs(numbers[i] - min_value);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - max_value);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmprwvb0nlh.js:41:10)\n    at Object.<anonymous> (/tmp/tmprwvb0nlh.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff && i != min_index){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff && i != min_index && i != max_index){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpsdu14zht.js:40:10)\n    at Object.<anonymous> (/tmp/tmpsdu14zht.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  var min_diff_value = 0;\n  var max_diff_value = 0;\n  var min_diff_index = 0;\n  var max_diff_index = 0;\n  var min_diff_value = 0;\n  var max_diff_value = 0;\n  var min_diff_index = 0;\n  var max_diff_index = 0;\n  var min_diff_value = 0;\n  var max_diff_value = 0;\n  var min_diff_index = 0;\n  var max_diff_index = 0;\n  var min_diff_value = 0;\n  var max_diff_value = 0;\n  var min_diff_index = 0;\n  var max_diff_index = 0;\n  var min_diff_value = 0;\n  var max_diff_value = 0;\n  var min_diff_index = 0;\n  var max_diff_index = 0;\n  var min_diff_value = 0;\n  var max_diff_value = 0;\n  var min_diff_index = 0;\n  var max_diff_index = 0;\n  var min_diff_value = 0;\n  var max_diff_value = 0;\n  var min_diff_index = 0;\n  var max_diff_index = 0;\n  var min_diff_value = 0;\n  var max_diff_value = 0;\n  var min_diff_index = 0;\n  var max_diff_index = 0;\n  var min_diff_value = 0;\n  var max_diff_value = 0;\n  var min_diff_index = 0;\n  var max_diff_index = 0;\n  var min_diff_value = 0;\n  var max_diff_value = 0;\n  var min_diff_index = 0;\n  var max_diff_index = 0;\n  var min_diff_value = 0;\n  var max_diff_value = 0;\n  var min_diff\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmpuri0_4sh.js:68\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var min_value = 0;\n  var max_index = 0;\n  var max_value = 0;\n  var diff = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmp9ilko3j_.js:92\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var closest_pair = [numbers[0], numbers[1]];\n    var closest_distance = closest_pair[0] - closest_pair[1];\n    for(var i = 0; i < numbers.length - 1; i++){\n        for(var j = i + 1; j < numbers.length; j++){\n            var distance = numbers[i] - numbers[j];\n            if(distance < closest_distance){\n                closest_distance = distance;\n                closest_pair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmprd507nx5.js:27:10)\n    at Object.<anonymous> (/tmp/tmprd507nx5.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min = numbers[0];\n    var max = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] < min){\n            min = numbers[i];\n        }\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n    }\n    var closest = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] === min || numbers[i] === max){\n            closest.push(numbers[i]);\n        }\n    }\n    return closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpl3h1prar.js:32:10)\n    at Object.<anonymous> (/tmp/tmpl3h1prar.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpz0jiy6m9.js:49:10)\n    at Object.<anonymous> (/tmp/tmpz0jiy6m9.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var min_value = 0;\n  var max_index = 0;\n  var max_value = 0;\n  var diff = 0;\n  var i = 0;\n  for(i = 0; i < numbers.length; i++){\n    diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  diff = Math.abs(numbers[0] - numbers[1]);\n  if(diff < min_diff){\n    min_diff = diff;\n    min_index = 0;\n    min_value = numbers[0];\n  }\n  return [min_value, numbers[min_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpdl542kci.js:43:10)\n    at Object.<anonymous> (/tmp/tmpdl542kci.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var closest_pair = [0, 0];\n    var min_diff = Number.MAX_VALUE;\n    for (var i = 0; i < numbers.length - 1; i++){\n        for (var j = i + 1; j < numbers.length; j++){\n            var diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff){\n                min_diff = diff;\n                closest_pair[0] = numbers[i];\n                closest_pair[1] = numbers[j];\n            }\n        }\n    }\n    return closest_pair;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5.9,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  5.9\n]\n    at test (/tmp/tmptqjfmmjo.js:29:10)\n    at Object.<anonymous> (/tmp/tmptqjfmmjo.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5.9, 5 ],\n  expected: [ 5, 5.9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  var min_diff_value = 0;\n  var max_diff_value = 0;\n  var diff_value = 0;\n  var diff_value_2 = 0;\n  var diff_value_3 = 0;\n  var diff_value_4 = 0;\n  var diff_value_5 = 0;\n  var diff_value_6 = 0;\n  var diff_value_7 = 0;\n  var diff_value_8 = 0;\n  var diff_value_9 = 0;\n  var diff_value_10 = 0;\n  var diff_value_11 = 0;\n  var diff_value_12 = 0;\n  var diff_value_13 = 0;\n  var diff_value_14 = 0;\n  var diff_value_15 = 0;\n  var diff_value_16 = 0;\n  var diff_value_17 = 0;\n  var diff_value_18 = 0;\n  var diff_value_19 = 0;\n  var diff_value_20 = 0;\n  var diff_value_21 = 0;\n  var diff_value_22 = 0;\n  var diff_value_23 = 0;\n  var diff_value_24 = 0;\n  var diff_value_25 = 0;\n  var diff_value_26 = 0;\n  var diff_value_27 = 0;\n  var diff_value_28 = 0;\n  var diff_value_29 = 0;\n  var diff_value_30 = 0;\n  var diff_value_31 = 0;\n  var diff_value_32 = 0;\n  var diff_value_33 = 0;\n  var diff_value_34 = 0;\n  var diff_value_35 = 0;\n  var diff_value_36 = 0;\n  var diff_value_37 = 0;\n  var diff_value_38 = 0;\n  var diff_value_39 = 0;\n  var diff_value_40 = 0;\n  var diff_value_41\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmp72qnbmf8.js:68\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[min_index]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[max_index]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  min_value = numbers[min_index];\n  max_value = numbers[max_index];\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpta875hor.js:35:10)\n    at Object.<anonymous> (/tmp/tmpta875hor.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var min_value = 0;\n  var max_index = 0;\n  var max_value = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmprpxx57s2.js:92\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[min_index]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[max_index]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  min_value = numbers[min_index];\n  max_value = numbers[max_index];\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpta875hor.js:35:10)\n    at Object.<anonymous> (/tmp/tmpta875hor.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmp6zln315i.js:78\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  var min_diff_value = 0;\n  var max_diff_value = 0;\n  var min_diff_index = 0;\n  var max_diff_index = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < max_diff){\n      max_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < max_diff){\n      max_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmppbz0yc9o.js:33\n    if(diff < max_diff){\n              ^\n\nReferenceError: max_diff is not defined\n    at find_closest_elements (/tmp/tmppbz0yc9o.js:33:15)\n    at test (/tmp/tmppbz0yc9o.js:53:20)\n    at Object.<anonymous> (/tmp/tmppbz0yc9o.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  min_value = numbers[min_index];\n  max_value = numbers[min_index];\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp_9xwxda3.js:47:10)\n    at Object.<anonymous> (/tmp/tmp_9xwxda3.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpoiz9pou0.js:45:10)\n    at Object.<anonymous> (/tmp/tmpoiz9pou0.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  return [min_value, numbers[min_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8bl3nhjp.js:49:10)\n    at Object.<anonymous> (/tmp/tmp8bl3nhjp.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    var min_diff_value = 0;\n    var max_diff_value = 0;\n    var min_diff_index = 0;\n    var max_diff_index = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmphp6ezpk7.js:90\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n        }\n    }\n    min_value = numbers[min_index];\n    max_value = numbers[max_index];\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp9ko_v19o.js:47:10)\n    at Object.<anonymous> (/tmp/tmp9ko_v19o.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Number.MAX_VALUE;\n    var min_num = 0;\n    var max_num = 0;\n    var min_num_index = 0;\n    var max_num_index = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_num = numbers[i];\n            min_num_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_num = numbers[i];\n            min_num_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_num = numbers[i];\n            min_num_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_num = numbers[i];\n            min_num_index = i;\n        }\n    }\n    return [numbers[min_num_index], numbers[max_num_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpidqinvaq.js:49:10)\n    at Object.<anonymous> (/tmp/tmpidqinvaq.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_num = 0;\n  var max_num = 0;\n  var min_diff_num = 0;\n  var max_diff_num = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmpabb7v67a.js:92\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var closest = [],\n        min_distance = Infinity,\n        i,\n        j;\n\n    for(i = 0; i < numbers.length - 1; i++){\n        for(j = i + 1; j < numbers.length; j++){\n            var distance = Math.abs(numbers[i] - numbers[j]);\n            if(distance < min_distance){\n                min_distance = distance;\n                closest = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\n    return closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5.9,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  5.9\n]\n    at test (/tmp/tmp52nuu2um.js:32:10)\n    at Object.<anonymous> (/tmp/tmp52nuu2um.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5.9, 5 ],\n  expected: [ 5, 5.9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_val = 0;\n  var max_val = 0;\n  var min_diff_val = 0;\n  var max_diff_val = 0;\n  var diff_val = 0;\n  var diff_val_val = 0;\n  var diff_val_val_val = 0;\n  var diff_val_val_val_val = 0;\n  var diff_val_val_val_val_val = 0;\n  var diff_val_val_val_val_val_val = 0;\n  var diff_val_val_val_val_val_val_val = 0;\n  var diff_val_val_val_val_val_val_val_val = 0;\n  var diff_val_val_val_val_val_val_val_val_val = 0;\n  var diff_val_val_val_val_val_val_val_val_val_val = 0;\n  var diff_val_val_val_val_val_val_val_val_val_val_val = 0;\n  var diff_val_val_val_val_val_val_val_val_val_val_val_val = 0;\n  var diff_val_val_val_val_val_val_val_val_val_val_val_val_val = 0;\n  var diff_val_val_val_val_val_val_val_val_val_val_val_val_val_val = 0;\n  var diff_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val = 0;\n  var diff_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val = 0;\n  var diff_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val = 0;\n  var diff_val_val_val_val_val_val_val_val_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmpb9pqzar0.js:45\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  var diff = 0;\n  for (var i = 0; i < numbers.length; i++){\n    diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  for (var i = 0; i < numbers.length; i++){\n    diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  for (var i = 0; i < numbers.length; i++){\n    diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  for (var i = 0; i < numbers.length; i++){\n    diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  for (var i = 0; i < numbers.length; i++){\n    diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  for (var i = 0; i < numbers.length; i++){\n    diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  for (var i = 0; i < numbers.length; i++){\n    diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmpxfv9tk5c.js:72\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp93a75rhy.js:49:10)\n    at Object.<anonymous> (/tmp/tmp93a75rhy.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpz0jiy6m9.js:49:10)\n    at Object.<anonymous> (/tmp/tmpz0jiy6m9.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = numbers[0] - numbers[1];\n  var min_index = 0;\n  var max_diff = numbers[0] - numbers[1];\n  var max_index = 0;\n  for (var i = 0; i < numbers.length; i++){\n    var diff = numbers[i] - numbers[0];\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    if (diff > max_diff){\n      max_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp3nfanjha.js:31:10)\n    at Object.<anonymous> (/tmp/tmp3nfanjha.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  min_value = numbers[min_index];\n  max_value = numbers[max_index];\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmptn872kl7.js:47:10)\n    at Object.<anonymous> (/tmp/tmptn872kl7.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_num = 0;\n    var max_num = 0;\n    var min_diff_num = 0;\n    var max_diff_num = 0;\n    var min_diff_num_index = 0;\n    var max_diff_num_index = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_num = numbers[i];\n            min_diff_num = diff;\n            min_diff_num_index = i;\n        }\n        if(diff > min_diff){\n            max_diff_num = diff;\n            max_diff_num_index = i;\n        }\n    }\n    return [numbers[min_diff_num_index], numbers[max_diff_num_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2.2\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpf3s75efk.js:36:10)\n    at Object.<anonymous> (/tmp/tmpf3s75efk.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2.2 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for (var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n    }\n    for (var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if (diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n    }\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpq5dyv6is.js:49:10)\n    at Object.<anonymous> (/tmp/tmpq5dyv6is.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    var min_diff_value = 0;\n    var max_diff_value = 0;\n    var min_diff_index = 0;\n    var max_diff_index = 0;\n    for (var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[2]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[3]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[4]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[5]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[6]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmprn8lju9k.js:61\nconst assert = require('node:assert');\n      ^^^^^^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var closest_pair = [];\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var i = 0;\n    var j = 0;\n    var diff = 0;\n    var min_diff_index = 0;\n    var max_diff_index = 0;\n    var min_diff_value = 0;\n    var max_diff_value = 0;\n    for(i = 0; i < numbers.length; i++){\n        for(j = i + 1; j < numbers.length; j++){\n            diff = Math.abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                min_diff_index = i;\n                max_diff_index = j;\n                min_diff_value = numbers[i];\n                max_diff_value = numbers[j];\n            }\n        }\n    }\n    closest_pair[0] = numbers[min_diff_index];\n    closest_pair[1] = numbers[max_diff_index];\n    return closest_pair;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5.9,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  5.9\n]\n    at test (/tmp/tmpuitonq_u.js:42:10)\n    at Object.<anonymous> (/tmp/tmpuitonq_u.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5.9, 5 ],\n  expected: [ 5, 5.9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp5e1i1hf1.js:52:10)\n    at Object.<anonymous> (/tmp/tmp5e1i1hf1.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var closest_pair = [];\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var max_diff = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < max_diff){\n            max_diff = diff;\n            max_index = i;\n        }\n    }\n    closest_pair[0] = numbers[min_index];\n    closest_pair[1] = numbers[max_index];\n    return closest_pair;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpj7urarm0.js:35:10)\n    at Object.<anonymous> (/tmp/tmpj7urarm0.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var min_value = 0;\n  var max_index = 0;\n  var max_value = 0;\n  var diff = 0;\n  for (var i = 0; i < numbers.length; i++){\n    diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  diff = Math.abs(numbers[0] - numbers[1]);\n  if (diff < min_diff){\n    min_diff = diff;\n    min_index = 0;\n    min_value = numbers[0];\n  }\n  return [min_value, numbers[min_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpguk9gq16.js:42:10)\n    at Object.<anonymous> (/tmp/tmpguk9gq16.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff && i != min_index){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff && i != min_index && i != max_index){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpsdu14zht.js:40:10)\n    at Object.<anonymous> (/tmp/tmpsdu14zht.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = numbers[0];\n  var max_value = numbers[0];\n  for(var i = 0; i < numbers.length; i++){\n    if(numbers[i] < min_value){\n      min_value = numbers[i];\n      min_index = i;\n    }\n    if(numbers[i] > max_value){\n      max_value = numbers[i];\n      max_index = i;\n    }\n    var diff = Math.abs(numbers[i] - min_value);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - max_value);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpvk5gil8a.js:41:10)\n    at Object.<anonymous> (/tmp/tmpvk5gil8a.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var closest_pair = [];\n    var min_diff = Number.MAX_VALUE;\n    var i, j;\n    for (i = 0; i < numbers.length - 1; i++) {\n        for (j = i + 1; j < numbers.length; j++) {\n            var diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                closest_pair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5.9,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  5.9\n]\n    at test (/tmp/tmpwiu6n6fw.js:29:10)\n    at Object.<anonymous> (/tmp/tmpwiu6n6fw.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5.9, 5 ],\n  expected: [ 5, 5.9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var closest_pair = [numbers[0], numbers[1]];\n  var closest_pair_distance = closest_pair[0] - closest_pair[1];\n  for(var i = 0; i < numbers.length - 1; i++){\n    for(var j = i + 1; j < numbers.length; j++){\n      var current_pair = [numbers[i], numbers[j]];\n      var current_pair_distance = current_pair[0] - current_pair[1];\n      if(current_pair_distance < closest_pair_distance){\n        closest_pair = current_pair;\n        closest_pair_distance = current_pair_distance;\n      }\n    }\n  }\n  return closest_pair;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp1ot4ne8u.js:28:10)\n    at Object.<anonymous> (/tmp/tmp1ot4ne8u.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  var diff = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmpgzgvmz7y.js:92\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_val = numbers[0];\n  var max_val = numbers[0];\n  for(var i = 0; i < numbers.length; i++){\n    if(numbers[i] < min_val){\n      min_val = numbers[i];\n      min_index = i;\n    }\n    if(numbers[i] > max_val){\n      max_val = numbers[i];\n      max_index = i;\n    }\n    var diff = Math.abs(numbers[i] - numbers[min_index]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[max_index]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpn4zlsnq2.js:41:10)\n    at Object.<anonymous> (/tmp/tmpn4zlsnq2.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min = numbers[0];\n  var max = numbers[0];\n  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i] < min){\n      min = numbers[i];\n    }\n    if(numbers[i] > max){\n      max = numbers[i];\n    }\n  }\n  var closest = [];\n  for(var i = 0; i < numbers.length; i++){\n    if(numbers[i] == min || numbers[i] == max){\n      closest.push(numbers[i]);\n    }\n  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpcn8ypfo8.js:32:10)\n    at Object.<anonymous> (/tmp/tmpcn8ypfo8.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpoiz9pou0.js:45:10)\n    at Object.<anonymous> (/tmp/tmpoiz9pou0.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = numbers[0] - numbers[1];\n    var min_diff_index = 0;\n    var max_diff = numbers[0] - numbers[1];\n    var max_diff_index = 0;\n    for(var i = 0; i < numbers.length - 1; i++){\n        var diff = numbers[i] - numbers[i+1];\n        if(diff < min_diff){\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        if(diff > max_diff){\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return [numbers[min_diff_index], numbers[max_diff_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpeyzxv9ju.js:31:10)\n    at Object.<anonymous> (/tmp/tmpeyzxv9ju.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_num = 0;\n    var max_num = 0;\n    var min_num_index = 0;\n    var max_num_index = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_num = numbers[i];\n            min_num_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_num = numbers[i];\n            min_num_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_num = numbers[i];\n            min_num_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_num = numbers[i];\n            min_num_index = i;\n        }\n    }\n    return [numbers[min_num_index], numbers[max_num_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpke24okc_.js:49:10)\n    at Object.<anonymous> (/tmp/tmpke24okc_.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff && i != min_index){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff && i != min_index && i != max_index){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff && i != min_index && i != max_index && i != min_index){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff && i != min_index && i != max_index && i != min_index && i != max_index){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n\n  for(var i = 0; i < numbers.\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "/tmp/tmpwu67oayl.js:60\nconst assert = require('node:assert');\n      ^^^^^^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var closest_pair = [];\n  var min_diff = Infinity;\n  var i, j;\n\n  for (i = 0; i < numbers.length - 1; i++){\n    for (j = i + 1; j < numbers.length; j++){\n      var diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < min_diff){\n        min_diff = diff;\n        closest_pair[0] = numbers[i];\n        closest_pair[1] = numbers[j];\n      }\n    }\n  }\n  return closest_pair;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5.9,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  5.9\n]\n    at test (/tmp/tmpt5b7pxoo.js:31:10)\n    at Object.<anonymous> (/tmp/tmpt5b7pxoo.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5.9, 5 ],\n  expected: [ 5, 5.9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n    }\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpop1jgw17.js:49:10)\n    at Object.<anonymous> (/tmp/tmpop1jgw17.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_val = 0;\n    var max_val = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpkf55jpr3.js:45:10)\n    at Object.<anonymous> (/tmp/tmpkf55jpr3.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpoiz9pou0.js:45:10)\n    at Object.<anonymous> (/tmp/tmpoiz9pou0.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_val = 0;\n  var max_val = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  min_val = numbers[min_index];\n  max_val = numbers[min_index];\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  max_val = numbers[min_index];\n  min_val = numbers[min_index];\n  return [min_val, max_val];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpwggnxcf7.js:61:10)\n    at Object.<anonymous> (/tmp/tmpwggnxcf7.js:68:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  return [min_value, numbers[min_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp_n_fku7m.js:49:10)\n    at Object.<anonymous> (/tmp/tmp_n_fku7m.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n    }\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpop1jgw17.js:49:10)\n    at Object.<anonymous> (/tmp/tmpop1jgw17.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_val = 0;\n    var max_val = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n        }\n    }\n    min_val = numbers[min_index];\n    max_val = numbers[max_index];\n    return [min_val, max_val];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp_quf6bv0.js:47:10)\n    at Object.<anonymous> (/tmp/tmp_quf6bv0.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    var min_diff_value = 0;\n    var max_diff_value = 0;\n    for (var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpt6wvasoo.js:45:10)\n    at Object.<anonymous> (/tmp/tmpt6wvasoo.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min = numbers[0];\n  var max = numbers[0];\n  for(var i = 0; i < numbers.length; i++){\n    if(numbers[i] < min){\n      min = numbers[i];\n    }\n    if(numbers[i] > max){\n      max = numbers[i];\n    }\n  }\n  var closest_min = numbers[0];\n  var closest_max = numbers[0];\n  for(var i = 0; i < numbers.length; i++){\n    if(numbers[i] < min){\n      closest_min = numbers[i];\n    }\n    if(numbers[i] > max){\n      closest_max = numbers[i];\n    }\n  }\n  return [closest_min, closest_max];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpzytobk72.js:36:10)\n    at Object.<anonymous> (/tmp/tmpzytobk72.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n    }\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpop1jgw17.js:49:10)\n    at Object.<anonymous> (/tmp/tmpop1jgw17.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n    }\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpaorrg17u.js:49:10)\n    at Object.<anonymous> (/tmp/tmpaorrg17u.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpz0jiy6m9.js:49:10)\n    at Object.<anonymous> (/tmp/tmpz0jiy6m9.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[min_index]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[max_index]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n        }\n    }\n    min_value = numbers[min_index];\n    max_value = numbers[max_index];\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpr0gwkkad.js:35:10)\n    at Object.<anonymous> (/tmp/tmpr0gwkkad.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for (var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n    }\n    for (var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if (diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n    }\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpq5dyv6is.js:49:10)\n    at Object.<anonymous> (/tmp/tmpq5dyv6is.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff && i != min_index){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff && i != min_index && i != max_index){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff && i != min_index && i != max_index && i != min_index){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff && i != min_index && i != max_index && i != min_index && i != max_index){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n\n  for(var i = 0; i < numbers.\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "/tmp/tmpwu67oayl.js:60\nconst assert = require('node:assert');\n      ^^^^^^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var closest_pair = [];\n  var min_diff = Infinity;\n  var i, j;\n  for (i = 0; i < numbers.length - 1; i++) {\n    for (j = i + 1; j < numbers.length; j++) {\n      var diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < min_diff) {\n        min_diff = diff;\n        closest_pair = [numbers[i], numbers[j]];\n      }\n    }\n  }\n  return closest_pair;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5.9,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  5.9\n]\n    at test (/tmp/tmptq0nk8v7.js:29:10)\n    at Object.<anonymous> (/tmp/tmptq0nk8v7.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5.9, 5 ],\n  expected: [ 5, 5.9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var closest_pair = [];\n    var min_diff = Infinity;\n    for (var i = 0; i < numbers.length; i++){\n        for (var j = i + 1; j < numbers.length; j++){\n            var diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff){\n                min_diff = diff;\n                closest_pair[0] = numbers[i];\n                closest_pair[1] = numbers[j];\n            }\n        }\n    }\n    return closest_pair;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5.9,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  5.9\n]\n    at test (/tmp/tmplaqvvioy.js:29:10)\n    at Object.<anonymous> (/tmp/tmplaqvvioy.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5.9, 5 ],\n  expected: [ 5, 5.9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp5hikew00.js:45:10)\n    at Object.<anonymous> (/tmp/tmp5hikew00.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = numbers[0] - numbers[1];\n    var min_index = 0;\n    var max_diff = numbers[0] - numbers[1];\n    var max_index = 0;\n    for (var i = 0; i < numbers.length - 1; i++){\n        var diff = numbers[i] - numbers[i + 1];\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        if (diff > max_diff){\n            max_diff = diff;\n            max_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpd260f2ki.js:31:10)\n    at Object.<anonymous> (/tmp/tmpd260f2ki.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[min_index]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[max_index]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n        }\n    }\n    min_value = numbers[min_index];\n    max_value = numbers[max_index];\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpr0gwkkad.js:35:10)\n    at Object.<anonymous> (/tmp/tmpr0gwkkad.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_val = 0;\n  var max_val = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_val = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_val = numbers[i];\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_val = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_val = numbers[i];\n    }\n  }\n  return [min_val, max_val];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmptc60uybn.js:49:10)\n    at Object.<anonymous> (/tmp/tmptc60uybn.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    min_value = numbers[min_index];\n    max_value = numbers[min_index];\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] < min_value){\n            min_value = numbers[i];\n        }\n        if(numbers[i] > max_value){\n            max_value = numbers[i];\n        }\n    }\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpufl42tdz.js:55:10)\n    at Object.<anonymous> (/tmp/tmpufl42tdz.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = numbers[0] - numbers[1];\n  var min_index = 0;\n  var max_diff = numbers[0] - numbers[1];\n  var max_index = 0;\n  for(var i = 0; i < numbers.length - 1; i++){\n    var diff = numbers[i] - numbers[i+1];\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    if(diff > max_diff){\n      max_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmps3dp8o_m.js:31:10)\n    at Object.<anonymous> (/tmp/tmps3dp8o_m.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n    }\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpop1jgw17.js:49:10)\n    at Object.<anonymous> (/tmp/tmpop1jgw17.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var closest_pair = [0, 0];\n    var closest_distance = 0;\n    for(var i = 0; i < numbers.length - 1; i++){\n        for(var j = i + 1; j < numbers.length; j++){\n            var distance = Math.abs(numbers[i] - numbers[j]);\n            if(distance < closest_distance){\n                closest_distance = distance;\n                closest_pair[0] = numbers[i];\n                closest_pair[1] = numbers[j];\n            }\n        }\n    }\n    return closest_pair;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpqoby2ni0.js:28:10)\n    at Object.<anonymous> (/tmp/tmpqoby2ni0.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    var diff = 0;\n    for (var i = 0; i < numbers.length; i++){\n        diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[2]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[3]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[4]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[5]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[6]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[7]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[8]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[9]);\n        \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "/tmp/tmp3o9mpkxv.js:74\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    var min_diff_value = 0;\n    var max_diff_value = 0;\n    var diff_value = 0;\n    var diff_value_2 = 0;\n    var diff_value_3 = 0;\n    var diff_value_4 = 0;\n    var diff_value_5 = 0;\n    var diff_value_6 = 0;\n    var diff_value_7 = 0;\n    var diff_value_8 = 0;\n    var diff_value_9 = 0;\n    var diff_value_10 = 0;\n    var diff_value_11 = 0;\n    var diff_value_12 = 0;\n    var diff_value_13 = 0;\n    var diff_value_14 = 0;\n    var diff_value_15 = 0;\n    var diff_value_16 = 0;\n    var diff_value_17 = 0;\n    var diff_value_18 = 0;\n    var diff_value_19 = 0;\n    var diff_value_20 = 0;\n    var diff_value_21 = 0;\n    var diff_value_22 = 0;\n    var diff_value_23 = 0;\n    var diff_value_24 = 0;\n    var diff_value_25 = 0;\n    var diff_value_26 = 0;\n    var diff_value_27 = 0;\n    var diff_value_28 = 0;\n    var diff_value_29 = 0;\n    var diff_value_30 = 0;\n    var diff_value_31 = 0;\n    var diff_value_32 = 0;\n    var diff_value_33 = 0;\n    var diff_value_34 = 0;\n    var diff_value_35 = 0;\n    var diff_value_36 = 0;\n    var diff_value_37 = 0;\n    var diff_value_38 = 0;\n    var diff_value_39 = 0;\n    var diff_value_40 = 0;\n    var diff_value_41\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "/tmp/tmpdimiv79b.js:68\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpoiz9pou0.js:45:10)\n    at Object.<anonymous> (/tmp/tmpoiz9pou0.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n    }\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpop1jgw17.js:49:10)\n    at Object.<anonymous> (/tmp/tmpop1jgw17.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp93a75rhy.js:49:10)\n    at Object.<anonymous> (/tmp/tmp93a75rhy.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_num = 0;\n  var max_num = 0;\n  var min_num_index = 0;\n  var max_num_index = 0;\n  var diff = 0;\n  for(var i = 0; i < numbers.length; i++){\n    diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_num = numbers[i];\n      min_num_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_num = numbers[i];\n      min_num_index = i;\n    }\n  }\n  return [numbers[min_num_index], numbers[max_num_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpxwr3fagj.js:36:10)\n    at Object.<anonymous> (/tmp/tmpxwr3fagj.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmpdsc0dhuq.js:92\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if (diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpxv4szzzn.js:31:10)\n    at Object.<anonymous> (/tmp/tmpxv4szzzn.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[2]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[3]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[4]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[5]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[6]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[7]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[8]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[9]);\n        if(diff < min_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "/tmp/tmpulga_j3p.js:61\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = numbers[0] - numbers[1];\n  var min_index = 0;\n  var max_diff = numbers[0] - numbers[1];\n  var max_index = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = numbers[i] - numbers[0];\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    if(diff > max_diff){\n      max_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpgis258of.js:31:10)\n    at Object.<anonymous> (/tmp/tmpgis258of.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    min_value = numbers[min_index];\n    max_value = numbers[min_index];\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpesp50h6e.js:47:10)\n    at Object.<anonymous> (/tmp/tmpesp50h6e.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpoiz9pou0.js:45:10)\n    at Object.<anonymous> (/tmp/tmpoiz9pou0.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for (var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n    }\n    for (var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if (diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n    }\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpq5dyv6is.js:49:10)\n    at Object.<anonymous> (/tmp/tmpq5dyv6is.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var closest_pair = [0, 0];\n  var min_diff = Number.MAX_VALUE;\n  for (var i = 0; i < numbers.length - 1; i++){\n    for (var j = i + 1; j < numbers.length; j++){\n      var diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < min_diff){\n        min_diff = diff;\n        closest_pair[0] = numbers[i];\n        closest_pair[1] = numbers[j];\n      }\n    }\n  }\n  return closest_pair;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5.9,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  5.9\n]\n    at test (/tmp/tmpucj28_dn.js:29:10)\n    at Object.<anonymous> (/tmp/tmpucj28_dn.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5.9, 5 ],\n  expected: [ 5, 5.9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = numbers[0];\n    var max_value = numbers[0];\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] < min_value){\n            min_value = numbers[i];\n            min_index = i;\n        }\n        if(numbers[i] > max_value){\n            max_value = numbers[i];\n            max_index = i;\n        }\n        var diff = Math.abs(numbers[i] - min_value);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - max_value);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpsateni6x.js:41:10)\n    at Object.<anonymous> (/tmp/tmpsateni6x.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpz0jiy6m9.js:49:10)\n    at Object.<anonymous> (/tmp/tmpz0jiy6m9.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var closest_pair = [];\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var i = 0;\n  var j = 0;\n  var diff = 0;\n  var num_len = numbers.length;\n  for(i = 0; i < num_len; i++){\n    for(j = i + 1; j < num_len; j++){\n      diff = Math.abs(numbers[i] - numbers[j]);\n      if(diff < min_diff){\n        min_diff = diff;\n        min_index = i;\n        max_index = j;\n      }\n    }\n  }\n  closest_pair[0] = numbers[min_index];\n  closest_pair[1] = numbers[max_index];\n  return closest_pair;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5.9,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  5.9\n]\n    at test (/tmp/tmpv3rohfma.js:37:10)\n    at Object.<anonymous> (/tmp/tmpv3rohfma.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5.9, 5 ],\n  expected: [ 5, 5.9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for (var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n    }\n    for (var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n        if (diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n    }\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpgs4nv4g7.js:49:10)\n    at Object.<anonymous> (/tmp/tmpgs4nv4g7.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = numbers[0] - numbers[1];\n  var min_index = 0;\n  var max_index = 1;\n  var max_diff = numbers[0] - numbers[1];\n  for(var i = 0; i < numbers.length - 1; i++){\n    var diff = numbers[i] - numbers[i+1];\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    if(diff > max_diff){\n      max_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpble6_48g.js:31:10)\n    at Object.<anonymous> (/tmp/tmpble6_48g.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff && i != min_index){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff && i != min_index && i != max_index){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpsdu14zht.js:40:10)\n    at Object.<anonymous> (/tmp/tmpsdu14zht.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff && i != min_index){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff && i != min_index && i != max_index){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp9cve2zyr.js:40:10)\n    at Object.<anonymous> (/tmp/tmp9cve2zyr.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = numbers[0] - numbers[1];\n    var min_diff_index = 0;\n    var max_diff = numbers[0] - numbers[1];\n    var max_diff_index = 0;\n    for(var i = 0; i < numbers.length - 1; i++){\n        var diff = numbers[i] - numbers[i + 1];\n        if(diff < min_diff){\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        if(diff > max_diff){\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return [numbers[min_diff_index], numbers[max_diff_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp3lu0fgc6.js:31:10)\n    at Object.<anonymous> (/tmp/tmp3lu0fgc6.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    var min_diff_value = 0;\n    var max_diff_value = 0;\n    var min_diff_index = 0;\n    var max_diff_index = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < max_diff){\n            max_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < max_diff){\n            max_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n    }\n    if(min_diff < max_diff){\n        min_diff_value = min_value;\n        min_diff_index = min_index;\n        max_diff_value = max_value;\n        max_diff_index = max_index;\n    }\n    else{\n        min_diff_value = max_value;\n        min_diff_index = max_index;\n        max_diff_value = min_value;\n        max_diff_index = min_index;\n    }\n    return [min_diff_value, max_diff_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "/tmp/tmpgep86ah9.js:33\n        if(diff < max_diff){\n                  ^\n\nReferenceError: max_diff is not defined\n    at find_closest_elements (/tmp/tmpgep86ah9.js:33:19)\n    at test (/tmp/tmpgep86ah9.js:65:20)\n    at Object.<anonymous> (/tmp/tmpgep86ah9.js:72:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n    }\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpaorrg17u.js:49:10)\n    at Object.<anonymous> (/tmp/tmpaorrg17u.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_val = 0;\n    var max_val = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    min_val = numbers[min_index];\n    max_val = numbers[min_index];\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] < min_val){\n            min_val = numbers[i];\n        }\n        if(numbers[i] > max_val){\n            max_val = numbers[i];\n        }\n    }\n    return [min_val, max_val];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpegp0jkij.js:55:10)\n    at Object.<anonymous> (/tmp/tmpegp0jkij.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n        }\n    }\n    min_value = numbers[min_index];\n    max_value = numbers[max_index];\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp9ko_v19o.js:47:10)\n    at Object.<anonymous> (/tmp/tmp9ko_v19o.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  var min_diff_value = 0;\n  var max_diff_value = 0;\n  var min_diff_index = 0;\n  var max_diff_index = 0;\n  var diff_value = 0;\n  var diff_index = 0;\n  var i = 0;\n  for (i = 0; i < numbers.length; i++){\n    diff_value = Math.abs(numbers[i] - numbers[0]);\n    diff_index = 0;\n    for (diff_index = 1; diff_index < numbers.length; diff_index++){\n      if (Math.abs(numbers[i] - numbers[diff_index]) < diff_value){\n        diff_value = Math.abs(numbers[i] - numbers[diff_index]);\n        diff_index = diff_index;\n      }\n    }\n    if (diff_value < min_diff){\n      min_diff = diff_value;\n      min_index = diff_index;\n      min_value = numbers[diff_index];\n      min_diff_value = diff_value;\n      min_diff_index = diff_index;\n    }\n    if (diff_value > max_diff){\n      max_diff = diff_value;\n      max_index = diff_index;\n      max_value = numbers[diff_index];\n      max_diff_value = diff_value;\n      max_diff_index = diff_index;\n    }\n  }\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "/tmp/tmpv55igiyk.js:36\n    if (diff_value > max_diff){\n                     ^\n\nReferenceError: max_diff is not defined\n    at find_closest_elements (/tmp/tmpv55igiyk.js:36:22)\n    at test (/tmp/tmpv55igiyk.js:52:20)\n    at Object.<anonymous> (/tmp/tmpv55igiyk.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  var min_diff_value = 0;\n  var max_diff_value = 0;\n  var min_diff_index = 0;\n  var max_diff_index = 0;\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < max_diff){\n      max_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if(diff < max_diff){\n      max_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n  if(min_diff < max_diff){\n    min_diff_value = min_value;\n    min_diff_index = min_index;\n    max_diff_value = max_value;\n    max_diff_index = max_index;\n  }\n  else{\n    min_diff_value = max_value;\n    min_diff_index = max_index;\n    max_diff_value = min_value;\n    max_diff_index = min_index;\n  }\n  return [min_diff_value, max_diff_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "/tmp/tmp98ya8q00.js:33\n    if(diff < max_diff){\n              ^\n\nReferenceError: max_diff is not defined\n    at find_closest_elements (/tmp/tmp98ya8q00.js:33:15)\n    at test (/tmp/tmp98ya8q00.js:65:20)\n    at Object.<anonymous> (/tmp/tmp98ya8q00.js:72:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_val = 0;\n    var max_val = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n        }\n    }\n    min_val = numbers[min_index];\n    max_val = numbers[max_index];\n    return [min_val, max_val];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp3itxkcyy.js:47:10)\n    at Object.<anonymous> (/tmp/tmp3itxkcyy.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for (var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for (var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if (diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    min_value = numbers[min_index];\n    max_value = numbers[max_index];\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp04pe76q6.js:47:10)\n    at Object.<anonymous> (/tmp/tmp04pe76q6.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var min_value = 0;\n    var max_index = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n    }\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpp7wwu6al.js:49:10)\n    at Object.<anonymous> (/tmp/tmpp7wwu6al.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var closest_pair = [];\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    for(var i = 0; i < numbers.length; i++){\n        for(var j = i + 1; j < numbers.length; j++){\n            var diff = Math.abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                min_index = i;\n                max_index = j;\n            }\n        }\n    }\n    closest_pair[0] = numbers[min_index];\n    closest_pair[1] = numbers[max_index];\n    return closest_pair;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5.9,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  5.9\n]\n    at test (/tmp/tmpsvo80ga9.js:33:10)\n    at Object.<anonymous> (/tmp/tmpsvo80ga9.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5.9, 5 ],\n  expected: [ 5, 5.9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  var min_diff_value = 0;\n  var max_diff_value = 0;\n  var min_diff_index = 0;\n  var max_diff_index = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "/tmp/tmpr3xyxwzb.js:90\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  var diff = 0;\n  for(var i = 0; i < numbers.length; i++){\n    diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  for(var i = 0; i < numbers.length; i++){\n    diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n    diff = Math.abs(numbers[i] - numbers[0]);\n    if(diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "/tmp/tmpjfys0vu9.js:75\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    var diff = 0;\n    for(var i = 0; i < numbers.length; i++){\n        diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    min_value = numbers[min_index];\n    max_value = numbers[min_index];\n    for(var i = 0; i < numbers.length; i++){\n        diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp6gs49fsu.js:48:10)\n    at Object.<anonymous> (/tmp/tmp6gs49fsu.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  var min_diff_value = 0;\n  var max_diff_value = 0;\n  var diff_value = 0;\n  var diff_value_index = 0;\n  var diff_value_value = 0;\n  var diff_value_diff = 0;\n  var diff_value_diff_index = 0;\n  var diff_value_diff_value = 0;\n  var diff_value_diff_diff = 0;\n  var diff_value_diff_diff_index = 0;\n  var diff_value_diff_diff_value = 0;\n  var diff_value_diff_diff_diff = 0;\n  var diff_value_diff_diff_diff_index = 0;\n  var diff_value_diff_diff_diff_value = 0;\n  var diff_value_diff_diff_diff_diff = 0;\n  var diff_value_diff_diff_diff_diff_index = 0;\n  var diff_value_diff_diff_diff_diff_value = 0;\n  var diff_value_diff_diff_diff_diff_diff = 0;\n  var diff_value_diff_diff_diff_diff_diff_index = 0;\n  var diff_value_diff_diff_diff_diff_diff_value = 0;\n  var diff_value_diff_diff_diff_diff_diff_diff = 0;\n  var diff_value_diff_diff_diff_diff_diff_diff_index = 0;\n  var diff_value_diff_diff_diff_diff_diff_diff_value = 0;\n  var diff_value_diff_diff_diff_diff_diff_diff_diff = 0;\n  var diff_value_diff_diff_diff_diff_diff_diff_diff_index = 0;\n  var diff_value_diff_diff_diff_diff_diff_diff_diff_value = 0;\n  var diff_value_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n  var diff_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "/tmp/tmpee07tnw2.js:53\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n        }\n    }\n    min_value = numbers[min_index];\n    max_value = numbers[max_index];\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp9ko_v19o.js:47:10)\n    at Object.<anonymous> (/tmp/tmp9ko_v19o.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_diff = Infinity;\n  var min_index = 0;\n  var max_index = 0;\n  var min_value = 0;\n  var max_value = 0;\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if (diff < min_diff){\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for (var i = 0; i < numbers.length; i++){\n    var diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if (diff < min_diff){\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n  return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpb4uv4u7g.js:49:10)\n    at Object.<anonymous> (/tmp/tmpb4uv4u7g.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var closest_pair = [];\n    var min_diff = Infinity;\n    var i, j;\n    for (i = 0; i < numbers.length - 1; i++){\n        for (j = i + 1; j < numbers.length; j++){\n            var diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff){\n                min_diff = diff;\n                closest_pair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5.9,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  5.9\n]\n    at test (/tmp/tmpf55rjrkp.js:29:10)\n    at Object.<anonymous> (/tmp/tmpf55rjrkp.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5.9, 5 ],\n  expected: [ 5, 5.9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min = numbers[0];\n    var max = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] < min){\n            min = numbers[i];\n        }\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n    }\n    var closest = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] == min || numbers[i] == max){\n            closest.push(numbers[i]);\n        }\n    }\n    return closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp6bh47y75.js:32:10)\n    at Object.<anonymous> (/tmp/tmp6bh47y75.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    min_value = numbers[min_index];\n    max_value = numbers[min_index];\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] < min_value){\n            min_value = numbers[i];\n        }\n        if(numbers[i] > max_value){\n            max_value = numbers[i];\n        }\n    }\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpufl42tdz.js:55:10)\n    at Object.<anonymous> (/tmp/tmpufl42tdz.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var min_index = 0;\n    var max_index = 0;\n    var min_value = 0;\n    var max_value = 0;\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n        }\n    }\n    min_value = numbers[min_index];\n    max_value = numbers[max_index];\n    return [min_value, max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp9ko_v19o.js:47:10)\n    at Object.<anonymous> (/tmp/tmp9ko_v19o.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Number.MAX_VALUE;\n    var min_diff_index = 0;\n    var max_diff = 0;\n    var max_diff_index = 0;\n    var diff;\n    var i;\n\n    for(i = 0; i < numbers.length; i++){\n        diff = Math.abs(numbers[i] - numbers[0]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[1]);\n        if(diff < max_diff){\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n\n    return [numbers[min_diff_index], numbers[max_diff_index]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpsfuj6fco.js:36:10)\n    at Object.<anonymous> (/tmp/tmpsfuj6fco.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var closest_pair = [0, 0];\n    var closest_pair_distance = 0;\n    for(var i = 0; i < numbers.length - 1; i++){\n        for(var j = i + 1; j < numbers.length; j++){\n            var distance = Math.abs(numbers[i] - numbers[j]);\n            if(distance < closest_pair_distance){\n                closest_pair_distance = distance;\n                closest_pair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpp3ybmxd6.js:27:10)\n    at Object.<anonymous> (/tmp/tmpp3ybmxd6.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    }
  ]
}