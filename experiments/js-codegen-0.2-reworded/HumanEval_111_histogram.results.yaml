language: js
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a\
    \ b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b':\
    \ 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\n\
    function histogram(test){\n    var arr = test.split(' ');\n    var dict = {};\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(dict[arr[i]] === undefined){\n\
    \            dict[arr[i]] = 1;\n        }\n        else{\n            dict[arr[i]]\
    \ += 1;\n        }\n    }\n    var max = 0;\n    var max_key = '';\n    for(var\
    \ key in dict){\n        if(dict[key] > max){\n            max = dict[key];\n\
    \            max_key = key;\n        }\n    }\n    return max_key;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'a'\n\nshould\
    \ loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp4bu4s841.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4bu4s841.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected:\
    \ { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a\
    \ b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b':\
    \ 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\n\
    function histogram(test){\n    var arr = test.split(' ');\n    var result = {};\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n     \
    \       result[arr[i]] += 1;\n        }else{\n            result[arr[i]] = 1;\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpabxarohy.js:34:10)\n    at Object.<anonymous> (/tmp/tmpabxarohy.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a\
    \ b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b':\
    \ 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\n\
    function histogram(test){\n    var count = {};\n    var max = 0;\n    var max_count\
    \ = 0;\n    for(var i = 0; i < test.length; i++){\n        if(test[i] in count){\n\
    \            count[test[i]]++;\n        }\n        else{\n            count[test[i]]\
    \ = 1;\n        }\n        if(count[test[i]] > max_count){\n            max_count\
    \ = count[test[i]];\n            max = test[i];\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpl5kp9nfd.js:39:10)\n    at Object.<anonymous> (/tmp/tmpl5kp9nfd.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a\
    \ b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b':\
    \ 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\n\
    function histogram(test){\n  var arr = test.split(' ');\n  var obj = {};\n  for(var\
    \ i = 0; i < arr.length; i++){\n    if(obj[arr[i]] === undefined){\n      obj[arr[i]]\
    \ = 1;\n    } else {\n      obj[arr[i]] += 1;\n    }\n  }\n  return obj;\n}\n\
    <|endoftext|><|javascript|>var path = require('path');\nvar webpack = require('webpack');\n\
    var ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports\
    \ = {\n  entry: [\n    './src/index.js'\n  ],\n  output: {\n    path: path.join(__dirname,\
    \ 'dist'),\n    filename: 'bundle.js'\n  },\n  module: {\n    loaders: [\n   \
    \   {\n        test: /\\.js$/,\n        loader: 'babel',\n        exclude: /node_modules/\n\
    \      },\n      {\n        test: /\\.css$/,\n        loader: ExtractTextPlugin.extract('style',\
    \ 'css')\n      }\n    ]\n  },\n  plugins: [\n    new ExtractTextPlugin('bundle.css')\n\
    \  ]\n};\n<|endoftext|><|javascript|>import React from 'react';\nimport PropTypes\
    \ from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\
    import Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\
    import Grid from '@material-ui/core/Grid';\nimport { withRouter } from 'react-router-dom';\n\
    \nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexDirection:\
    \ 'column',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n\
    \    backgroundColor: theme.palette.background.paper,\n  },\n  title: {\n    margin:\
    \ theme.spacing.unit,\n  },\n  subtitle: {\n    margin: theme.spacing.unit,\n\
    \  },\n  button: {\n    margin: theme.spacing.unit\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1pyxin3l.js:27\n<|endoftext|><|javascript|>var path = require('path');\n\
    ^\n\nSyntaxError: Unexpected token '<'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a\
    \ b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b':\
    \ 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\n\
    function histogram(test){\n    var arr = test.split(' ');\n    var result = {};\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n     \
    \       result[arr[i]] += 1;\n        }else{\n            result[arr[i]] = 1;\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpabxarohy.js:34:10)\n    at Object.<anonymous> (/tmp/tmpabxarohy.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a\
    \ b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b':\
    \ 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\n\
    function histogram(test){\n    var hist = {};\n    for(var i = 0; i < test.length;\
    \ i++){\n        if(!(test[i] in hist)){\n            hist[test[i]] = 1;\n   \
    \     }\n        else{\n            hist[test[i]]++;\n        }\n    }\n    return\
    \ hist;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpuwssynhu.js:33:10)\n    at Object.<anonymous> (/tmp/tmpuwssynhu.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a\
    \ b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b':\
    \ 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\n\
    function histogram(test){\n  var arr = test.split(' ');\n  var obj = {};\n  for(var\
    \ i = 0; i < arr.length; i++){\n    if(obj[arr[i]] === undefined){\n      obj[arr[i]]\
    \ = 1;\n    } else {\n      obj[arr[i]] += 1;\n    }\n  }\n  return obj;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpkt7d_gyx.js:34:10)\n    at Object.<anonymous> (/tmp/tmpkt7d_gyx.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a\
    \ b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b':\
    \ 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\n\
    function histogram(test){\n    var arr = test.split(' ');\n    var obj = {};\n\
    \    for(var i=0;i<arr.length;i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n\
    \        }else{\n            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n\
    }\n<|endoftext|><|javascript|>'use strict';\n\nvar _ = require('lodash');\nvar\
    \ async = require('async');\nvar fs = require('fs');\nvar path = require('path');\n\
    var util = require('util');\n\nvar config = require('../config');\nvar logger\
    \ = require('../logger');\nvar utils = require('../utils');\n\nvar db = require('../db');\n\
    var dbUtils = require('../db/utils');\n\nvar dbPath = path.join(config.db.path,\
    \ config.db.name);\n\nvar dbInit = function(callback) {\n  if (db.isInitialized())\
    \ {\n    return callback();\n  }\n\n  logger.info('Initializing database');\n\n\
    \  db.init(dbPath, function(err) {\n    if (err) {\n      return callback(err);\n\
    \    }\n\n    logger.info('Database initialized');\n    return callback();\n \
    \ });\n};\n\nvar dbDrop = function(callback) {\n  if (!db.isInitialized()) {\n\
    \    return callback();\n  }\n\n  logger.info('Dropping database');\n\n  db.drop(dbPath,\
    \ function(err) {\n    if (err) {\n      return callback(err);\n    }\n\n    logger.info('Database\
    \ dropped');\n    return callback();\n  });\n};\n\nvar dbMigrate = function(callback)\
    \ {\n  if (!db.isInitialized()) {\n    return callback();\n  }\n\n  logger.info('Migrating\
    \ database');\n\n  db.migrate(dbPath, function(err) {\n    if (err) {\n      return\
    \ callback(err);\n    }\n\n    logger.info('Database migrated');\n    return callback();\n\
    \  });\n};\n\nvar dbCreate = function(callback) {\n  if (!db.isInitialized())\
    \ {\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp9wsa6zhu.js:27\n<|endoftext|><|javascript|>'use strict';\n^\n\n\
    SyntaxError: Unexpected token '<'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341951
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a\
    \ b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b':\
    \ 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\n\
    function histogram(test){\n    var result = {};\n    var arr = test.split(' ');\n\
    \    for(var i=0; i<arr.length; i++){\n        if(result[arr[i]]){\n         \
    \   result[arr[i]] += 1;\n        }else{\n            result[arr[i]] = 1;\n  \
    \      }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpzeuf9c5k.js:34:10)\n    at Object.<anonymous> (/tmp/tmpzeuf9c5k.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341951
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a\
    \ b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b':\
    \ 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\n\
    function histogram(test){\n    var arr = test.split(' ');\n    var result = {};\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n     \
    \       result[arr[i]] += 1;\n        }else{\n            result[arr[i]] = 1;\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpabxarohy.js:34:10)\n    at Object.<anonymous> (/tmp/tmpabxarohy.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341950
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a\
    \ b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b':\
    \ 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\n\
    function histogram(test){\n    var arr = test.split(' ');\n    var result = {};\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n     \
    \       result[arr[i]]++;\n        }else{\n            result[arr[i]] = 1;\n \
    \       }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpfj3ube5t.js:34:10)\n    at Object.<anonymous> (/tmp/tmpfj3ube5t.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341951
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a\
    \ b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b':\
    \ 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\n\
    function histogram(test){\n    var arr = test.split(' ');\n    var result = {};\n\
    \    for(var i=0;i<arr.length;i++){\n        if(result[arr[i]]){\n           \
    \ result[arr[i]]++;\n        }else{\n            result[arr[i]] = 1;\n       \
    \ }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp031txz_u.js:34:10)\n    at Object.<anonymous> (/tmp/tmp031txz_u.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341951
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a\
    \ b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b':\
    \ 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\n\
    function histogram(test){\n    var hist = {};\n    for(var i = 0; i < test.length;\
    \ i++){\n        if(test[i] in hist){\n            hist[test[i]] += 1;\n     \
    \   } else {\n            hist[test[i]] = 1;\n        }\n    }\n    return hist;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpe_kvcw0l.js:32:10)\n    at Object.<anonymous> (/tmp/tmpe_kvcw0l.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341951
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a\
    \ b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b':\
    \ 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\n\
    function histogram(test){\n    var arr = test.split(' ');\n    var result = {};\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(result[arr[i]] === undefined){\n\
    \            result[arr[i]] = 1;\n        }else{\n            result[arr[i]] +=\
    \ 1;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmplu2mopna.js:34:10)\n    at Object.<anonymous> (/tmp/tmplu2mopna.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341951
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a\
    \ b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b':\
    \ 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\n\
    function histogram(test){\n    var arr = test.split(' ');\n    var obj = {};\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(obj[arr[i]] === undefined){\n\
    \            obj[arr[i]] = 1;\n        } else {\n            obj[arr[i]] += 1;\n\
    \        }\n    }\n    return obj;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmprqq3npec.js:34:10)\n    at Object.<anonymous> (/tmp/tmprqq3npec.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341951
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a\
    \ b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b':\
    \ 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\n\
    function histogram(test){\n  var hist = {};\n  var arr = test.split(' ');\n  for(var\
    \ i = 0; i < arr.length; i++){\n    if(hist[arr[i]] === undefined){\n      hist[arr[i]]\
    \ = 1;\n    } else {\n      hist[arr[i]]++;\n    }\n  }\n  return hist;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpexajywvz.js:34:10)\n    at Object.<anonymous> (/tmp/tmpexajywvz.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341951
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a\
    \ b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b':\
    \ 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\n\
    function histogram(test){\n    var histogram = {};\n    var letters = test.split('\
    \ ');\n    for(var i = 0; i < letters.length; i++){\n        if(histogram[letters[i]]\
    \ === undefined){\n            histogram[letters[i]] = 1;\n        }\n       \
    \ else{\n            histogram[letters[i]] += 1;\n        }\n    }\n    return\
    \ histogram;\n}\n<|endoftext|><|javascript|>import React from 'react';\nimport\
    \ { Link } from 'react-router';\nimport { connect } from 'react-redux';\nimport\
    \ { bindActionCreators } from 'redux';\nimport { fetchPosts } from '../actions/index';\n\
    import Helmet from 'react-helmet';\nimport { config } from 'config';\nimport {\
    \ prefixLink } from 'gatsby-helpers';\nimport { config as configClient } from\
    \ '../config';\nimport { Link as GatsbyLink } from 'gatsby';\nimport { Link as\
    \ GatsbyAnchorLink } from 'gatsby-plugin-anchor';\nimport { Link as GatsbyImageLink\
    \ } from 'gatsby-plugin-image';\nimport { Link as GatsbyVideoLink } from 'gatsby-plugin-video';\n\
    import { Link as GatsbyAudioLink } from 'gatsby-plugin-audio';\nimport { Link\
    \ as GatsbySourceLink } from 'gatsby-source-filesystem';\nimport { Link as GatsbyStaticLink\
    \ } from 'gatsby-plugin-static';\nimport { Link as GatsbyFaviconLink } from 'gatsby-plugin-favicon';\n\
    import { Link as GatsbyFontawesomeLink } from 'gatsby-plugin-fontawesome';\nimport\
    \ { Link as GatsbyGoogleFontLink } from 'gatsby-plugin-google-font';\nimport {\
    \ Link as GatsbyJekyllLink } from 'gatsby-plugin-jekyll-frontmatter';\nimport\
    \ { Link as GatsbyJekyllPageLink } from 'gatsby-plugin-page';\nimport { Link as\
    \ GatsbyJekyllFileLink } from 'gatsby-plugin-file';\nimport { Link as GatsbyJekyll\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8wmxigli.js:28\n<|endoftext|><|javascript|>import React from 'react';\n\
    ^\n\nSyntaxError: Unexpected token '<'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341951
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a\
    \ b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b':\
    \ 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\n\
    function histogram(test){\n    var hist = {};\n    var arr = test.split(' ');\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(hist[arr[i]] === undefined){\n\
    \            hist[arr[i]] = 1;\n        }else{\n            hist[arr[i]] += 1;\n\
    \        }\n    }\n    return hist;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpguezvsra.js:34:10)\n    at Object.<anonymous> (/tmp/tmpguezvsra.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341951
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a\
    \ b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b':\
    \ 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\n\
    function histogram(test){\n    var hist = {};\n    for(var i = 0; i < test.length;\
    \ i++){\n        if(test[i] in hist){\n            hist[test[i]] += 1;\n     \
    \   }\n        else{\n            hist[test[i]] = 1;\n        }\n    }\n    return\
    \ hist;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpspw6g9ac.js:33:10)\n    at Object.<anonymous> (/tmp/tmpspw6g9ac.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341951
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a\
    \ b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b':\
    \ 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\n\
    function histogram(test){\n    var histogram = {};\n    var string = test.split('\
    \ ');\n    for(var i = 0; i < string.length; i++){\n        if(histogram[string[i]]\
    \ === undefined){\n            histogram[string[i]] = 1;\n        } else {\n \
    \           histogram[string[i]] += 1;\n        }\n    }\n    return histogram;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpa7jq2wu8.js:34:10)\n    at Object.<anonymous> (/tmp/tmpa7jq2wu8.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.8.0\n"
  stdout: ''
  timestamp: 1662341951
