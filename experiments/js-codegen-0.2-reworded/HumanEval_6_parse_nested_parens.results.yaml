language: js
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_list\
    \ = paren_string.split(' ');\n    var max_nesting = 0;\n    var max_nesting_index\
    \ = 0;\n    for (var i = 0; i < paren_list.length; i++){\n        var paren_count\
    \ = count_parens(paren_list[i]);\n        if (paren_count > max_nesting){\n  \
    \          max_nesting = paren_count;\n            max_nesting_index = i;\n  \
    \      }\n    }\n    return [max_nesting, max_nesting_index];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpx4zrkr0h.js:11\n        var paren_count = count_parens(paren_list[i]);\n\
    \                          ^\n\nReferenceError: count_parens is not defined\n\
    \    at parse_nested_parens (/tmp/tmpx4zrkr0h.js:11:27)\n    at test (/tmp/tmpx4zrkr0h.js:25:20)\n\
    \    at Object.<anonymous> (/tmp/tmpx4zrkr0h.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371526
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var paren_count_max = 0;\n    var paren_count_max_index\
    \ = 0;\n    var paren_count_max_index_string = '';\n    var paren_count_max_index_string_index\
    \ = 0;\n    var paren_count_max_index_string_index_max = 0;\n    var paren_count_max_index_string_index_max_index\
    \ = 0;\n    var paren_count_max_index_string_index_max_index_string = '';\n  \
    \  var paren_count_max_index_string_index_max_index_string_index = 0;\n    var\
    \ paren_count_max_index_string_index_max_index_string_index_max = 0;\n    var\
    \ paren_count_max_index_string_index_max_index_string_index_max_index = 0;\n \
    \   var paren_count_max_index_string_index_max_index_string_index_max_index_string\
    \ = '';\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index\
    \ = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max\
    \ = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max_index\
    \ = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max_index_string\
    \ = '';\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max_index_string_index\
    \ = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max_index_string_index_max\
    \ = 0;\n    var paren_count_max_index_string_index_max_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpgvp8uhbp.js:37\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371526
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n\
    \        if(paren_string[i] == '('){\n            paren_count++;\n           \
    \ paren_stack.push(paren_count);\n        }\n        else if(paren_string[i] ==\
    \ ')'){\n            paren_count--;\n            if(paren_count < 0){\n      \
    \          console.log('Error: Invalid parentheses');\n                return;\n\
    \            }\n            else if(paren_count == 0){\n                paren_level\
    \ = paren_stack.pop();\n            }\n        }\n    }\n    return paren_level;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp7skjzdi8.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7skjzdi8.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371526
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var max_nesting = 0;\n    var paren_count = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n\
    \        if(paren_string[i] === '('){\n            paren_stack.push(paren_count);\n\
    \            paren_count++;\n        }\n        else if(paren_string[i] === ')'){\n\
    \            paren_count--;\n            if(paren_count === 0){\n            \
    \    max_nesting = Math.max(max_nesting, paren_stack.pop());\n            }\n\
    \        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp3se5ukwu.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3se5ukwu.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371526
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var paren_depth = 0;\n    var paren_index\
    \ = 0;\n    var paren_string_length = paren_string.length;\n    var paren_string_index\
    \ = 0;\n    var paren_string_char;\n    var paren_string_char_index;\n    var\
    \ paren_string_char_count;\n    var paren_string_char_count_index;\n    var paren_string_char_count_count;\n\
    \    var paren_string_char_count_count_index;\n    var paren_string_char_count_count_count;\n\
    \    var paren_string_char_count_count_count_index;\n    var paren_string_char_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_count_count_index;\n    var\
    \ paren_string_char_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpufov9q2f.js:45\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371526
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var max_nesting = 0;\n    var current_nesting = 0;\n    var current_char\
    \ = '';\n    var current_index = 0;\n    var paren_count = 0;\n    var paren_count_stack\
    \ = [];\n    var paren_count_stack_index = 0;\n    var paren_count_stack_length\
    \ = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_index\
    \ = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_index\
    \ = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_index\
    \ = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_index\
    \ = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_index\
    \ = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_index\
    \ = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_index\
    \ = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_index\
    \ = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_index\
    \ = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_index\
    \ = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_index\
    \ = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_index\
    \ = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_index\
    \ = 0;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((()))\
    \ () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((()))\
    \ (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp2xldmkqz.js:53\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371526
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var result =\
    \ [];\n    var parens = paren_string.split(' ');\n    for(var i = 0; i < parens.length;\
    \ i++){\n        var paren = parens[i];\n        var depth = 0;\n        for(var\
    \ j = 0; j < paren.length; j++){\n            if(paren[j] == '('){\n         \
    \       depth++;\n            }\n            else if(paren[j] == ')'){\n     \
    \           depth--;\n            }\n        }\n        result.push(depth);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpqnupzmca.js:30:10)\n    at Object.<anonymous> (/tmp/tmpqnupzmca.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371526
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_groups\
    \ = paren_string.split(' ');\n  var max_nesting = 0;\n  var max_nesting_index\
    \ = 0;\n  for(var i = 0; i < paren_groups.length; i++){\n    var paren_group =\
    \ paren_groups[i];\n    var paren_count = 0;\n    for(var j = 0; j < paren_group.length;\
    \ j++){\n      if(paren_group[j] == '('){\n        paren_count++;\n      }\n \
    \     else if(paren_group[j] == ')'){\n        paren_count--;\n      }\n    }\n\
    \    if(paren_count > max_nesting){\n      max_nesting = paren_count;\n      max_nesting_index\
    \ = i;\n    }\n  }\n  return [max_nesting_index, max_nesting];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp9h0seuil.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9h0seuil.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n\
    \  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371526
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_count_in_level\
    \ = 0;\n    var paren_count_in_next_level = 0;\n    var paren_count_in_next_next_level\
    \ = 0;\n    var paren_count_in_next_next_next_level = 0;\n    var paren_count_in_next_next_next_next_level\
    \ = 0;\n    var paren_count_in_next_next_next_next_next_level = 0;\n    var paren_count_in_next_next_next_next_next_next_level\
    \ = 0;\n    var paren_count_in_next_next_next_next_next_next_next_level = 0;\n\
    \    var paren_count_in_next_next_next_next_next_next_next_next_level = 0;\n \
    \   var paren_count_in_next_next_next_next_next_next_next_next_next_level = 0;\n\
    \    var paren_count_in_next_next_next_next_next_next_next_next_next_next_level\
    \ = 0;\n    var paren_count_in_next_next_next_next_next_next_next_next_next_next_next_level\
    \ = 0;\n    var paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_level\
    \ = 0;\n    var paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_next_level\
    \ = 0;\n    var paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_next_next_level\
    \ = 0;\n    var paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_level\
    \ = 0;\n    var paren_count_in_next_next_next_next_next_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpqa_ga65y.js:37\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371526
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_count\
    \ = 0;\n    var paren_stack = [];\n    var paren_stack_count = 0;\n    var paren_stack_index\
    \ = 0;\n    var paren_stack_string = '';\n    var paren_stack_string_count = 0;\n\
    \    var paren_stack_string_index = 0;\n    var paren_stack_string_string = '';\n\
    \    var paren_stack_string_string_count = 0;\n    var paren_stack_string_string_index\
    \ = 0;\n    var paren_stack_string_string_string = '';\n    var paren_stack_string_string_string_count\
    \ = 0;\n    var paren_stack_string_string_string_index = 0;\n    var paren_stack_string_string_string_string\
    \ = '';\n    var paren_stack_string_string_string_string_count = 0;\n    var paren_stack_string_string_string_string_index\
    \ = 0;\n    var paren_stack_string_string_string_string_string = '';\n    var\
    \ paren_stack_string_string_string_string_string_count = 0;\n    var paren_stack_string_string_string_string_string_index\
    \ = 0;\n    var paren_stack_string_string_string_string_string_string = '';\n\
    \    var paren_stack_string_string_string_string_string_string_count = 0;\n  \
    \  var paren_stack_string_string_string_string_string_string_index = 0;\n    var\
    \ paren_stack_string_string_string_string_string_string_string = '';\n    var\
    \ paren_stack_string_string_string_string_string_string_string_count = 0;\n  \
    \  var paren_stack_string_string_string_string_string_string_string_index = 0;\n\
    \    var paren_stack_string_string_string_string_string_string_string_string =\
    \ '';\n    var paren_stack_string_string_string_string_string_string_string_string_count\
    \ = 0;\n    var paren_stack_string_\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpnujhjh57.js:45\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371526
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_groups\
    \ = paren_string.split(' ');\n  var max_nesting = 0;\n  var max_nesting_index\
    \ = 0;\n  for(var i = 0; i < paren_groups.length; i++){\n    var paren_group =\
    \ paren_groups[i];\n    var nesting = 0;\n    for(var j = 0; j < paren_group.length;\
    \ j++){\n      if(paren_group[j] === '('){\n        nesting++;\n      }\n    \
    \  else if(paren_group[j] === ')'){\n        nesting--;\n      }\n    }\n    if(nesting\
    \ > max_nesting){\n      max_nesting = nesting;\n      max_nesting_index = i;\n\
    \    }\n  }\n  return [max_nesting_index, max_nesting];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpftqifofy.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpftqifofy.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n\
    \  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371526
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var max_nesting = 0;\n    var current_nesting = 0;\n    var current_char\
    \ = '';\n    var current_paren_string = '';\n    for (var i = 0; i < paren_string.length;\
    \ i++){\n        current_char = paren_string[i];\n        if (current_char ===\
    \ '('){\n            current_paren_string += current_char;\n            current_nesting++;\n\
    \            if (current_nesting > max_nesting){\n                max_nesting\
    \ = current_nesting;\n            }\n        }\n        else if (current_char\
    \ === ')'){\n            current_paren_string += current_char;\n            current_nesting--;\n\
    \        }\n        else {\n            current_paren_string += current_char;\n\
    \        }\n    }\n    return [max_nesting, current_paren_string];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  '(()())\
    \ ((())) () ((())()())'\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n\
    \  3\n]\n    at test (/tmp/tmptgzfckpz.js:37:10)\n    at Object.<anonymous> (/tmp/tmptgzfckpz.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, '(()())\
    \ ((())) () ((())()())' ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371526
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var parens =\
    \ paren_string.split(' ');\n    var max_nesting = 0;\n    var max_nesting_index\
    \ = 0;\n    for(var i = 0; i < parens.length; i++){\n        if(parens[i].length\
    \ > max_nesting){\n            max_nesting = parens[i].length;\n            max_nesting_index\
    \ = i;\n        }\n    }\n    return max_nesting_index;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpl2z2a_0b.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpl2z2a_0b.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371526
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_groups\
    \ = paren_string.split(' ');\n  var max_nesting = 0;\n  var max_nesting_index\
    \ = 0;\n  for (var i = 0; i < paren_groups.length; i++){\n    var paren_group\
    \ = paren_groups[i];\n    var nesting = 0;\n    for (var j = 0; j < paren_group.length;\
    \ j++){\n      if (paren_group[j] === '('){\n        nesting++;\n      }\n   \
    \   else if (paren_group[j] === ')'){\n        nesting--;\n      }\n    }\n  \
    \  if (nesting > max_nesting){\n      max_nesting = nesting;\n      max_nesting_index\
    \ = i;\n    }\n  }\n  return max_nesting_index;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpnvcrmkbc.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnvcrmkbc.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371526
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_count\
    \ = 0;\n    var paren_stack = [];\n    var output = [];\n    var paren_count_stack\
    \ = [];\n    var paren_count_stack_index = 0;\n    var paren_count_stack_top =\
    \ 0;\n    var paren_count_stack_top_index = 0;\n    var paren_count_stack_top_top\
    \ = 0;\n    var paren_count_stack_top_top_index = 0;\n    var paren_count_stack_top_top_top\
    \ = 0;\n    var paren_count_stack_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top\
    \ = 0;\n    var paren_count_stack_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top_top_index = 0;\n    var\
    \ paren_count_stack_top_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_index\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top = 0;\n    var\
    \ paren_count_stack_top_top_top_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top_index =\
    \ 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top_top = 0;\n\
    \    var paren_count_stack_top_top_top_top\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp48n0odfb.js:42\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371526
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    var paren_index = 0;\n    var paren_char = '';\n\
    \    var paren_char_count = 0;\n    var paren_char_index = 0;\n    var paren_char_length\
    \ = 0;\n    var paren_char_string = '';\n    var paren_char_string_length = 0;\n\
    \    var paren_char_string_index = 0;\n    var paren_char_string_length = 0;\n\
    \    var paren_char_string_char = '';\n    var paren_char_string_char_count =\
    \ 0;\n    var paren_char_string_char_index = 0;\n    var paren_char_string_char_length\
    \ = 0;\n    var paren_char_string_char_string = '';\n    var paren_char_string_char_string_length\
    \ = 0;\n    var paren_char_string_char_string_index = 0;\n    var paren_char_string_char_string_length\
    \ = 0;\n    var paren_char_string_char_string_char = '';\n    var paren_char_string_char_string_char_count\
    \ = 0;\n    var paren_char_string_char_string_char_index = 0;\n    var paren_char_string_char_string_char_length\
    \ = 0;\n    var paren_char_string_char_string_char_string = '';\n    var paren_char_string_char_string_char_string_length\
    \ = 0;\n    var paren_char_string_char_string_char_string_index = 0;\n    var\
    \ paren_char_string_char_string_char_string_length = 0;\n    var paren_char_string_char_string_char_string_char\
    \ = '';\n    var paren_char_string_char_string_char_string_char_count = 0;\n \
    \   var paren_char_string_char_string_char\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpek_ley89.js:49\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371526
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var result =\
    \ [];\n    var current_level = 0;\n    var current_group = 0;\n    var current_paren_string\
    \ = '';\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i]\
    \ === '('){\n            current_group++;\n            current_level++;\n    \
    \        current_paren_string += paren_string[i];\n        }\n        else if(paren_string[i]\
    \ === ')'){\n            current_level--;\n            current_paren_string +=\
    \ paren_string[i];\n            if(current_level === 0){\n                result.push(current_group);\n\
    \                current_group = 0;\n                current_level = 0;\n    \
    \            current_paren_string = '';\n            }\n        }\n        else{\n\
    \            current_paren_string += paren_string[i];\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n\
    \  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpoqwgrsi2.js:39:10)\n    at Object.<anonymous> (/tmp/tmpoqwgrsi2.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 1,\
    \ 5 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371526
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var max_nesting = 0;\n    var current_nesting\
    \ = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0;\
    \ i < paren_string_length; i++){\n        if(paren_string[i] == '('){\n      \
    \      paren_stack.push(paren_count);\n            paren_count++;\n        }\n\
    \        else if(paren_string[i] == ')'){\n            paren_count--;\n      \
    \      if(paren_count == 0){\n                current_nesting = paren_stack.pop();\n\
    \                if(current_nesting > max_nesting){\n                    max_nesting\
    \ = current_nesting;\n                }\n            }\n        }\n    }\n   \
    \ return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpn2p2dk2v.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn2p2dk2v.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371526
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups\
    \ = paren_string.split(' ');\n    var max_nesting = 0;\n    var max_nesting_index\
    \ = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group\
    \ = paren_groups[i];\n        var nesting = 0;\n        for(var j = 0; j < paren_group.length;\
    \ j++){\n            if(paren_group[j] === '('){\n                nesting++;\n\
    \            }\n            else if(paren_group[j] === ')'){\n               \
    \ nesting--;\n            }\n        }\n        if(nesting > max_nesting){\n \
    \           max_nesting = nesting;\n            max_nesting_index = i;\n     \
    \   }\n    }\n    return [max_nesting_index, max_nesting];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpot7hejap.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpot7hejap.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n\
    \  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371526
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n\
    \        if(paren_string[i] === '('){\n            paren_count++;\n          \
    \  paren_stack.push(paren_count);\n        }\n        else if(paren_string[i]\
    \ === ')'){\n            paren_count--;\n            if(paren_count === 0){\n\
    \                paren_level = paren_stack.pop();\n            }\n        }\n\
    \    }\n    return paren_level;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpflq07tzo.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpflq07tzo.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662371526
