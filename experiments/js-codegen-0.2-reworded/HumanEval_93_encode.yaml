name: HumanEval_93_encode
language: js
prompt: "//Write a function that takes a message, and encodes in such a \n// way that\
  \ it swaps case of all letters, replaces all vowels in \n// the message with the\
  \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
  \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n//\
  \ >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
  Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
  This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt\
  \ KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
completions: ["  var vowels = ['a', 'e', 'i', 'o', 'u'];\n  var newMessage = '';\n\
    \  for (var i = 0; i < message.length; i++){\n    if (vowels.indexOf(message[i])\
    \ > -1){\n      newMessage += message[i] + message[i+2];\n    } else {\n     \
    \ newMessage += message[i];\n    }\n  }\n  return newMessage;\n}\n", "  var vowels\
    \ = ['a','e','i','o','u'];\n  var encoded = '';\n  for (var i = 0; i < message.length;\
    \ i++) {\n    var char = message.charAt(i);\n    if (vowels.indexOf(char) > -1)\
    \ {\n      encoded += message.charAt(i+2);\n    } else {\n      encoded += message.charAt(i);\n\
    \    }\n  }\n  return encoded;\n}\n", "  var vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \  var vowels2 = ['A', 'E', 'I', 'O', 'U'];\n  var encoded = '';\n  for (var i\
    \ = 0; i < message.length; i++) {\n    if (vowels.indexOf(message.charAt(i)) >\
    \ -1) {\n      encoded += vowels2[vowels.indexOf(message.charAt(i)) + 2];\n  \
    \  } else {\n      encoded += message.charAt(i);\n    }\n  }\n  return encoded;\n\
    }\n", "  var vowels = ['a', 'e', 'i', 'o', 'u'];\n  var encoded = '';\n  for (var\
    \ i = 0; i < message.length; i++) {\n    var letter = message.charAt(i);\n   \
    \ if (vowels.indexOf(letter) !== -1) {\n      encoded += message.charAt(i + 2);\n\
    \    } else {\n      encoded += message.charAt(i);\n    }\n  }\n  return encoded;\n\
    }\n", "  var vowels = ['a','e','i','o','u'];\n  var encoded = '';\n  for(var i=0;\
    \ i<message.length; i++){\n    if(vowels.indexOf(message[i]) != -1){\n      encoded\
    \ += message[i];\n      encoded += message[i+2];\n    }\n    else{\n      encoded\
    \ += message[i];\n    }\n  }\n  return encoded;\n}\n", "  var vowels = ['a','e','i','o','u'];\n\
    \  var result = '';\n  for(var i=0;i<message.length;i++){\n    var letter = message.charAt(i);\n\
    \    if(vowels.indexOf(letter) !== -1){\n      result += message.charAt(i+2);\n\
    \    }else{\n      result += message.charAt(i);\n    }\n  }\n  return result;\n\
    }\n", "  var vowels = 'aeiouAEIOU';\n  var encoded = '';\n  for(var i = 0; i <\
    \ message.length; i++){\n    if(vowels.indexOf(message.charAt(i)) > -1){\n   \
    \   encoded += message.charAt(i).toUpperCase();\n      encoded += message.charAt(i).toLowerCase();\n\
    \    }\n    else{\n      encoded += message.charAt(i).toUpperCase();\n    }\n\
    \  }\n  return encoded;\n}\n", "  var vowels = ['a', 'e', 'i', 'o', 'u'];\n  var\
    \ result = '';\n  for (var i = 0; i < message.length; i++) {\n    var char = message.charAt(i);\n\
    \    if (vowels.indexOf(char) >= 0) {\n      result += char.toUpperCase();\n \
    \     result += message.charAt(i + 2);\n    } else {\n      result += char.toLowerCase();\n\
    \    }\n  }\n  return result;\n}\n", "  var vowels = \"AEIOU\";\n  var encoded\
    \ = message.toLowerCase();\n  for(var i = 0; i < message.length; i++){\n    if(vowels.indexOf(message.charAt(i))\
    \ != -1){\n      encoded = encoded.replace(message.charAt(i), vowels.charAt(vowels.indexOf(message.charAt(i))\
    \ + 2));\n    }\n  }\n  return encoded;\n}\n", "  var vowels = 'AEIOU'\n  var\
    \ result = ''\n  for(var i = 0; i < message.length; i++){\n    if(vowels.indexOf(message[i])\
    \ > -1){\n      result += message[i] + message[i + 2]\n    } else {\n      result\
    \ += message[i]\n    }\n  }\n  return result\n}\n", "  var vowels = 'AEIOU'\n\
    \  var encoded = ''\n  for(var i = 0; i < message.length; i++){\n    if(vowels.indexOf(message[i])\
    \ > -1){\n      encoded += message[i] + message[i+2]\n    }\n    else{\n     \
    \ encoded += message[i]\n    }\n  }\n  return encoded\n}\n<|endoftext|><|javascript|>import\
    \ React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect }\
    \ from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Link\
    \ } from 'react-router-dom';\nimport { fetchPosts } from '../actions/index';\n\
    import { LinkContainer } from 'react-router-bootstrap';\nimport { fetchComments\
    \ } from '../actions/comments';\nimport CommentList from '../components/CommentList';\n\
    import CommentForm from '../components/CommentForm';\nimport Post from '../components/Post';\n\
    import { getPost, getComments } from '../selectors/index';\n\nclass PostsShow\
    \ extends React.Component {\n  componentWillMount() {\n    this.props.fetchPosts();\n\
    \    this.props.fetchComments(this.props.params.id);\n  }\n\n  render() {\n  \
    \  const post = this.props.post;\n    const comments = this.props.comments;\n\n\
    \    return (\n      <div>\n        <h1>{post.title}</h1>\n        <Post post={post}\
    \ />\n        <CommentList comments={comments} />\n        <CommentForm postId={this.props.params.id}\
    \ />\n      </div>\n    );\n  }\n}\n\nPostsShow.propTypes = {\n  post: PropTypes.object,\n\
    \  comments: PropTypes.array,\n  fetchPosts: PropTypes.func.isRequired,\n  fetchComments:\
    \ PropTypes.func.isRequired,\n};\n", "  var vowels = 'aeiouAEIOU';\n  var encoded\
    \ = '';\n  for(var i = 0; i < message.length; i++){\n    if(vowels.indexOf(message[i])\
    \ != -1){\n      encoded += message[i] + message[i+2];\n    } else {\n      encoded\
    \ += message[i];\n    }\n  }\n  return encoded;\n}\n", "  var vowels = 'aeiouAEIOU'\n\
    \  var encoded = ''\n  for(var i=0; i<message.length; i++){\n    var char = message.charAt(i)\n\
    \    if(vowels.indexOf(char) > -1){\n      encoded += message.charAt(i+2)\n  \
    \  } else {\n      encoded += message.charAt(i)\n    }\n  }\n  return encoded\n\
    }\n", "  var vowels = ['a', 'e', 'i', 'o', 'u'];\n  var encoded = '';\n  for(var\
    \ i = 0; i < message.length; i++){\n    var letter = message.charAt(i);\n    if(vowels.indexOf(letter)\
    \ > -1){\n      encoded += message.charAt(i + 2);\n    }\n    else{\n      encoded\
    \ += message.charAt(i);\n    }\n  }\n  return encoded;\n}\n", "  var vowels =\
    \ ['a','e','i','o','u'];\n  var encoded = '';\n  for(var i = 0; i < message.length;\
    \ i++){\n    if(vowels.indexOf(message[i]) != -1){\n      encoded += message[i]\
    \ + message[i+2];\n    }\n    else{\n      encoded += message[i];\n    }\n  }\n\
    \  return encoded;\n}\n", "  var vowels = 'aeiouAEIOU';\n  var encoded = '';\n\
    \  for(var i = 0; i < message.length; i++){\n    if(vowels.indexOf(message.charAt(i))\
    \ > -1){\n      encoded += message.charAt(i);\n      encoded += message.charAt(i\
    \ + 2);\n    }\n    else{\n      encoded += message.charAt(i).toUpperCase();\n\
    \    }\n  }\n  return encoded;\n}\n", "  var vowels = 'AEIOU'\n  var encoded =\
    \ ''\n  for(var i = 0; i < message.length; i++){\n    if(vowels.indexOf(message.charAt(i))\
    \ > -1){\n      encoded += message.charAt(i) + message.charAt(i+2)\n    } else\
    \ {\n      encoded += message.charAt(i)\n    }\n  }\n  return encoded\n}\n<|endoftext|><|javascript|>import\
    \ React from 'react';\nimport { Link } from 'react-router';\nimport { connect\
    \ } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport {\
    \ fetchPosts } from '../actions/index';\nimport { LinkContainer } from 'react-router-bootstrap';\n\
    \nclass PostsIndex extends React.Component {\n  componentDidMount() {\n    this.props.fetchPosts();\n\
    \  }\n\n  renderPosts() {\n    return this.props.posts.map((post) => {\n     \
    \ return (\n        <li key={post.id}>\n          <Link to={`/posts/${post.id}`}>\n\
    \            {post.title}\n          </Link>\n        </li>\n      );\n    });\n\
    \  }\n\n  render() {\n    return (\n      <div>\n        <ul>\n          {this.renderPosts()}\n\
    \        </ul>\n      </div>\n    );\n  }\n}\n", "  var vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n  var result = '';\n  for (var i = 0; i < message.length; i++) {\n\
    \    var char = message.charAt(i);\n    if (vowels.indexOf(char) > -1) {\n   \
    \   result += char.toUpperCase();\n      result += message.charAt(i + 2);\n  \
    \  } else {\n      result += char.toLowerCase();\n    }\n  }\n  return result;\n\
    }\n", "  var vowels = ['a', 'e', 'i', 'o', 'u'];\n  var new_message = '';\n  for\
    \ (var i = 0; i < message.length; i++) {\n    if (vowels.indexOf(message[i]) >\
    \ -1) {\n      new_message += message[i] + message[i + 2];\n    } else {\n   \
    \   new_message += message[i];\n    }\n  }\n  return new_message;\n}\n", "  var\
    \ vowels = 'aeiouAEIOU';\n  var result = '';\n  for(var i = 0; i < message.length;\
    \ i++){\n    if(vowels.indexOf(message[i]) > -1){\n      result += message[i]\
    \ + message[i + 2];\n    }\n    else{\n      result += message[i];\n    }\n  }\n\
    \  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
