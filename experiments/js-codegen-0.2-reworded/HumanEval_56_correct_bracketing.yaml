name: HumanEval_56_correct_bracketing
language: js
prompt: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
  \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
  )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
  <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
  <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
  <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
  ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
  <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
  >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
  <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n\
  }\n\ntest();"
completions: ["  var opening_brackets = 0;\n  var closing_brackets = 0;\n  for (var\
    \ i = 0; i < brackets.length; i++){\n    if (brackets[i] == \"<\"){\n      opening_brackets++;\n\
    \    }\n    else if (brackets[i] == \">\"){\n      closing_brackets++;\n    }\n\
    \  }\n  return opening_brackets == closing_brackets;\n}\n", "  var opening_bracket_count\
    \ = 0;\n  var closing_bracket_count = 0;\n  for (var i = 0; i < brackets.length;\
    \ i++){\n    if (brackets[i] == \"<\"){\n      opening_bracket_count++;\n    }\n\
    \    else if (brackets[i] == \">\"){\n      closing_bracket_count++;\n    }\n\
    \  }\n  if (opening_bracket_count == closing_bracket_count){\n    return true;\n\
    \  }\n  else {\n    return false;\n  }\n}\n", "  var opening_bracket = brackets.indexOf(\"\
    <\");\n  var closing_bracket = brackets.indexOf(\">\");\n  if(opening_bracket\
    \ < 0 || closing_bracket < 0 || opening_bracket > closing_bracket){\n    return\
    \ false;\n  }\n  for(var i = opening_bracket + 1; i < closing_bracket; i++){\n\
    \    if(brackets[i] != \">\"){\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "    var opening_brackets = 0;\n    var closing_brackets = 0;\n    for(var\
    \ i = 0; i < brackets.length; i++){\n        if(brackets[i] == \"<\"){\n     \
    \       opening_brackets++;\n        }\n        else if(brackets[i] == \">\"){\n\
    \            closing_brackets++;\n        }\n    }\n    return opening_brackets\
    \ == closing_brackets;\n}\n", "  var opening_brackets = 0;\n  var closing_brackets\
    \ = 0;\n  var i = 0;\n  while (i < brackets.length){\n    if (brackets[i] == \"\
    <\"){\n      opening_brackets += 1;\n    }\n    else if (brackets[i] == \">\"\
    ){\n      closing_brackets += 1;\n    }\n    i += 1;\n  }\n  return opening_brackets\
    \ == closing_brackets;\n}\n", "    var opening_bracket_count = 0;\n    var closing_bracket_count\
    \ = 0;\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i]\
    \ == \"<\"){\n            opening_bracket_count++;\n        }\n        else if(brackets[i]\
    \ == \">\"){\n            closing_bracket_count++;\n        }\n    }\n    return\
    \ opening_bracket_count == closing_bracket_count;\n}\n", "  var opening_brackets\
    \ = 0;\n  var closing_brackets = 0;\n  for(var i = 0; i < brackets.length; i++){\n\
    \    if(brackets[i] == \"<\"){\n      opening_brackets++;\n    }\n    else if(brackets[i]\
    \ == \">\"){\n      closing_brackets++;\n    }\n  }\n  return opening_brackets\
    \ == closing_brackets;\n}\n", "  var opening_brackets = 0;\n  var closing_brackets\
    \ = 0;\n  var i = 0;\n  while(i < brackets.length){\n    if(brackets[i] == \"\
    <\"){\n      opening_brackets += 1;\n    }\n    else if(brackets[i] == \">\"){\n\
    \      closing_brackets += 1;\n    }\n    i += 1;\n  }\n  return opening_brackets\
    \ == closing_brackets;\n}\n", "    var opening_bracket = brackets.indexOf(\"<\"\
    );\n    var closing_bracket = brackets.indexOf(\">\");\n    if(opening_bracket\
    \ < 0 || closing_bracket < 0 || opening_bracket > closing_bracket){\n        return\
    \ false;\n    }\n    for(var i = opening_bracket + 1; i < closing_bracket; i++){\n\
    \        if(brackets[i] != \">\"){\n            return false;\n        }\n   \
    \ }\n    return true;\n}\n", "  var opening_brackets = 0;\n  var closing_brackets\
    \ = 0;\n  var opening_bracket_index = 0;\n  var closing_bracket_index = 0;\n \
    \ var opening_bracket_count = 0;\n  var closing_bracket_count = 0;\n  var opening_bracket_count_max\
    \ = 0;\n  var opening_bracket_count_min = 0;\n  var opening_bracket_index_max\
    \ = 0;\n  var opening_bracket_index_min = 0;\n  var opening_bracket_index_max_count\
    \ = 0;\n  var opening_bracket_index_min_count = 0;\n  var opening_bracket_index_min_count_max\
    \ = 0;\n  var opening_bracket_index_min_count_min = 0;\n  var opening_bracket_index_min_count_max_count\
    \ = 0;\n  var opening_bracket_index_min_count_min_count = 0;\n  var opening_bracket_index_min_count_max_count_min\
    \ = 0;\n  var opening_bracket_index_min_count_max_count_min_count = 0;\n  var\
    \ opening_bracket_index_min_count_max_count_min_count_max = 0;\n  var opening_bracket_index_min_count_max_count_min_count_max_count\
    \ = 0;\n  var opening_bracket_index_min_count_max_count_min_count_max_count_min\
    \ = 0;\n  var opening_bracket_index_min_count_max_count_min_count_max_count_min_count\
    \ = 0;\n  var opening_bracket_index_min_count_max_count_min_count_max_count_min_count_max\
    \ = 0;\n  var opening_bracket_index_min_count_max_count_min_count_max_count_min_count_max_count\
    \ = 0;\n  var opening_bracket_index_min_count_max_count_min_count_max_count_min_count_max_count_min\
    \ = 0;\n  var opening_bracket_index_min", "  var opening_brackets = 0;\n  var\
    \ closing_brackets = 0;\n  for (var i = 0; i < brackets.length; i++){\n    if\
    \ (brackets[i] == \"<\"){\n      opening_brackets++;\n    }\n    else if (brackets[i]\
    \ == \">\"){\n      closing_brackets++;\n    }\n  }\n  return opening_brackets\
    \ == closing_brackets;\n}\n", "    var opening_brackets = 0;\n    var closing_brackets\
    \ = 0;\n    var i = 0;\n    while(i < brackets.length){\n        if(brackets[i]\
    \ == \"<\"){\n            opening_brackets += 1;\n        }\n        else if(brackets[i]\
    \ == \">\"){\n            closing_brackets += 1;\n        }\n        i += 1;\n\
    \    }\n    return opening_brackets == closing_brackets;\n}\n", "  var opening_brackets\
    \ = 0;\n  var closing_brackets = 0;\n  var opening_bracket = false;\n  var closing_bracket\
    \ = false;\n  var i = 0;\n  while(i < brackets.length){\n    if(brackets[i] ===\
    \ \"<\"){\n      opening_brackets += 1;\n      opening_bracket = true;\n    }\n\
    \    else if(brackets[i] === \">\"){\n      closing_brackets += 1;\n      closing_bracket\
    \ = true;\n    }\n    i += 1;\n  }\n  return opening_bracket && opening_brackets\
    \ === closing_brackets;\n}\n", "  var opening_brackets = 0;\n  var closing_brackets\
    \ = 0;\n  for (var i = 0; i < brackets.length; i++){\n    if (brackets[i] == \"\
    <\"){\n      opening_brackets++;\n    } else if (brackets[i] == \">\"){\n    \
    \  closing_brackets++;\n    }\n  }\n  return opening_brackets == closing_brackets;\n\
    }\n", "  var opening_brackets = 0;\n  var closing_brackets = 0;\n  for (var i\
    \ = 0; i < brackets.length; i++){\n    if (brackets[i] == \"<\"){\n      opening_brackets++;\n\
    \    }\n    else if (brackets[i] == \">\"){\n      closing_brackets++;\n    }\n\
    \  }\n  return opening_brackets == closing_brackets;\n}\n", "  var opening_brackets\
    \ = 0;\n  var closing_brackets = 0;\n  for(var i = 0; i < brackets.length; i++){\n\
    \    if(brackets[i] == \"<\"){\n      opening_brackets++;\n    }\n    else if(brackets[i]\
    \ == \">\"){\n      closing_brackets++;\n    }\n  }\n  return opening_brackets\
    \ == closing_brackets;\n}\n", "  var opening_brackets = 0;\n  var closing_brackets\
    \ = 0;\n  var opening_bracket = false;\n  var closing_bracket = false;\n  for(var\
    \ i = 0; i < brackets.length; i++){\n    if(brackets[i] == \"<\"){\n      opening_brackets++;\n\
    \      opening_bracket = true;\n    }\n    else if(brackets[i] == \">\"){\n  \
    \    closing_brackets++;\n      closing_bracket = true;\n    }\n  }\n  if(opening_brackets\
    \ == closing_brackets){\n    return true;\n  }\n  else{\n    return false;\n \
    \ }\n}\n", "  var opening_brackets = 0;\n  var closing_brackets = 0;\n  var opening_bracket\
    \ = false;\n  var closing_bracket = false;\n  var i = 0;\n  while(i < brackets.length){\n\
    \    if(brackets[i] == '<'){\n      opening_brackets++;\n      opening_bracket\
    \ = true;\n    }\n    else if(brackets[i] == '>'){\n      closing_brackets++;\n\
    \      closing_bracket = true;\n    }\n    i++;\n  }\n  if(opening_bracket &&\
    \ !closing_bracket){\n    return false;\n  }\n  else if(opening_bracket && closing_bracket){\n\
    \    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "  var opening_brackets\
    \ = 0;\n  var closing_brackets = 0;\n  for(var i = 0; i < brackets.length; i++){\n\
    \    if(brackets[i] == \"<\"){\n      opening_brackets++;\n    }\n    else if(brackets[i]\
    \ == \">\"){\n      closing_brackets++;\n    }\n  }\n  return opening_brackets\
    \ == closing_brackets;\n}\n", "    var opening_bracket_count = 0;\n    var closing_bracket_count\
    \ = 0;\n    var opening_bracket = brackets.indexOf(\"<\");\n    var closing_bracket\
    \ = brackets.indexOf(\">\");\n    while(opening_bracket != -1){\n        opening_bracket_count++;\n\
    \        opening_bracket = brackets.indexOf(\"<\", opening_bracket + 1);\n   \
    \ }\n    while(closing_bracket != -1){\n        closing_bracket_count++;\n   \
    \     closing_bracket = brackets.indexOf(\">\", closing_bracket + 1);\n    }\n\
    \    if(opening_bracket_count == closing_bracket_count){\n        return true;\n\
    \    }\n    else{\n        return false;\n    }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
