name: HumanEval_158_find_max
language: js
prompt: "//Write a function that accepts an array of strings.\n// The array contains\
  \ different words. Return the word with maximum number\n// of unique characters.\
  \ If multiple strings have maximum number of unique\n// characters, return the one\
  \ which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\"\
  , \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n\
  // \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n// \"aaaaaaa\"\nfunction\
  \ find_max(words){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\"\
  );\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
  aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
  , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
  , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"\
  are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\",\
  \ \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
  this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"\
  ]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\"\
  );\n}\n\ntest();"
completions: ["  var max = words[0];\n  var max_count = words[0].length;\n  for (var\
    \ i = 1; i < words.length; i++){\n    if (words[i].length > max_count){\n    \
    \  max_count = words[i].length;\n      max = words[i];\n    }\n  }\n  return max;\n\
    }\n", "    var max_count = 0;\n    var max_word = \"\";\n    for(var i = 0; i\
    \ < words.length; i++){\n        var count = 0;\n        for(var j = 0; j < words[i].length;\
    \ j++){\n            if(words[i][j] !== \"\"){\n                count++;\n   \
    \         }\n        }\n        if(count > max_count){\n            max_count\
    \ = count;\n            max_word = words[i];\n        }\n    }\n    return max_word;\n\
    }\n<|endoftext|><|javascript|>import React from 'react';\nimport { Link } from\
    \ 'react-router';\nimport { connect } from 'react-redux';\nimport { bindActionCreators\
    \ } from 'redux';\nimport { push } from 'react-router-redux';\nimport { connect\
    \ } from 'react-redux';\nimport { Link } from 'react-router';\nimport { connect\
    \ } from 'react-redux';\nimport { Link } from 'react-router';\nimport { Link }\
    \ from 'react-router';\nimport { Link } from 'react-router';\nimport { Link }\
    \ from 'react-router';\nimport { Link } from 'react-router';\nimport { Link }\
    \ from 'react-router';\nimport { Link } from 'react-router';\nimport { Link }\
    \ from 'react-router';\nimport { Link } from 'react-router';\nimport { Link }\
    \ from 'react-router';\nimport { Link } from 'react-router';\nimport { Link }\
    \ from 'react-router';\nimport { Link } from 'react-router';\nimport { Link }\
    \ from 'react-router';\nimport { Link } from 'react-router';\nimport { Link }\
    \ from 'react-router';\nimport { Link } from 'react-router';\nimport { Link }\
    \ from 'react-router';\nimport { Link } from 'react-router';\nimport { Link }\
    \ from 'react-router';\nimport { Link } from 'react-router';\nimport { Link }\
    \ from 'react-router';\nimport { Link } from 'react-router';\nimport { Link }",
  "    var max = words[0];\n    var max_count = words[0].length;\n    for(var i =\
    \ 1; i < words.length; i++){\n        if(words[i].length > max_count){\n     \
    \       max = words[i];\n            max_count = words[i].length;\n        }\n\
    \    }\n    return max;\n}\n", "  var max = words[0];\n  var max_count = words[0].length;\n\
    \  for(var i = 1; i < words.length; i++){\n    var count = 0;\n    for(var j =\
    \ 0; j < words[i].length; j++){\n      if(words[i][j] !== words[0][j]){\n    \
    \    count++;\n      }\n    }\n    if(count > max_count){\n      max = words[i];\n\
    \      max_count = count;\n    }\n  }\n  return max;\n}\n", "  var max = words[0];\n\
    \  var max_count = words[0].length;\n  for(var i = 1; i < words.length; i++){\n\
    \    if(words[i].length > max_count){\n      max = words[i];\n      max_count\
    \ = words[i].length;\n    }\n  }\n  return max;\n}\n", "  var max = words[0];\n\
    \  var max_count = words[0].length;\n  for(var i = 1; i < words.length; i++){\n\
    \    if(words[i].length > max_count){\n      max = words[i];\n      max_count\
    \ = words[i].length;\n    }\n  }\n  return max;\n}\n<|endoftext|><|javascript|>var\
    \ gulp = require('gulp');\nvar sass = require('gulp-sass');\nvar autoprefixer\
    \ = require('gulp-autoprefixer');\nvar concat = require('gulp-concat');\nvar uglify\
    \ = require('gulp-uglify');\nvar rename = require('gulp-rename');\nvar cleanCSS\
    \ = require('gulp-clean-css');\nvar sourcemaps = require('gulp-sourcemaps');\n\
    var browserSync = require('browser-sync');\nvar reload = browserSync.reload;\n\
    \nvar paths = {\n  sass: ['./scss/**/*.scss'],\n  js: ['./js/**/*.js'],\n  html:\
    \ ['./index.html'],\n  dist: './dist'\n};\n\ngulp.task('sass', function() {\n\
    \  return gulp.src('./scss/style.scss')\n    .pipe(sourcemaps.init())\n    .pipe(sass({\n\
    \      outputStyle: 'compressed',\n      includePaths: ['scss']\n    }))\n   \
    \ .pipe(autoprefixer({\n      browsers: ['last 2 versions'],\n      cascade: false\n\
    \    }))\n    .pipe(concat('style.css'))\n    .pipe(cleanCSS())\n    .pipe(sourcemaps.write('.'))\n\
    \    .pipe(gulp.dest(paths.dist))\n    .pipe(reload({stream: true}));\n});\n\n\
    gulp.task('js', function() {\n  return gulp.src('./js/main.js')\n    .pipe(concat('main.js'))\n\
    \    .pipe(uglify())\n    .pipe(rename({suffix: '.min'", "  var max = words[0];\n\
    \  var max_count = words[0].length;\n  for(var i=1; i<words.length; i++){\n  \
    \  var count = 0;\n    for(var j=0; j<words[i].length; j++){\n      if(words[i][j]\
    \ !== words[0][j]){\n        count++;\n      }\n    }\n    if(count > max_count){\n\
    \      max = words[i];\n      max_count = count;\n    }\n  }\n  return max;\n\
    }\n<|endoftext|><|javascript|>var express = require('express');\nvar router =\
    \ express.Router();\nvar mongoose = require('mongoose');\nvar User = mongoose.model('User');\n\
    var passport = require('passport');\nvar jwt = require('jsonwebtoken');\n\nrouter.get('/',\
    \ function(req, res) {\n  res.send('Hello World');\n});\n\nrouter.post('/login',\
    \ function(req, res) {\n  passport.authenticate('local', function(err, user, info)\
    \ {\n    if (err) {\n      return res.status(400).send(err);\n    }\n    if (!user)\
    \ {\n      return res.status(401).send(info);\n    }\n    var token = jwt.sign(user,\
    \ 'secret');\n    res.json({ token: token });\n  })(req, res);\n});\n\nrouter.post('/register',\
    \ function(req, res) {\n  var user = new User({\n    username: req.body.username,\n\
    \    password: req.body.password\n  });\n  user.save(function(err) {\n    if (err)\
    \ {\n      return res.status(400).send(err);\n    }\n    res.json({ message: 'User\
    \ created!' });\n  });\n});\n\nmodule.exports = router;\n<|endoftext|><|javascript|>var\
    \ _ = require('lodash');\nvar async = require('async');\nvar fs = require('fs');\n\
    var path = require('path');\nvar util = require('util');\nvar yaml = require('js-y",
  "    var max = 0,\n        max_index = 0,\n        i = 0;\n    for (i = 0; i < words.length;\
    \ i++) {\n        var count = 0;\n        for (var j = 0; j < words[i].length;\
    \ j++) {\n            if (words[i][j] !== words[i][j].toLowerCase()) {\n     \
    \           count++;\n            }\n        }\n        if (count > max) {\n \
    \           max = count;\n            max_index = i;\n        }\n    }\n    return\
    \ words[max_index];\n}\n<|endoftext|><|javascript|>/**\n * @author       Richard\
    \ Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license\
    \      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nvar GetTilesWithin\
    \ = require('./GetTilesWithin');\n", "    var max = 0,\n        max_index = 0,\n\
    \        i = 0;\n    for(i = 0; i < words.length; i++){\n        if(words[i].length\
    \ > max){\n            max = words[i].length;\n            max_index = i;\n  \
    \      }\n    }\n    return words[max_index];\n}\n", "  var max = words[0];\n\
    \  var max_count = words[0].length;\n  for(var i = 1; i < words.length; i++){\n\
    \    if(words[i].length > max_count){\n      max = words[i];\n      max_count\
    \ = words[i].length;\n    }\n  }\n  return max;\n}\n", "    var max = words[0];\n\
    \    var max_count = words[0].length;\n    for(var i = 1; i < words.length; i++){\n\
    \        var count = 0;\n        for(var j = 0; j < words[i].length; j++){\n \
    \           if(words[i][j] !== words[0][j]){\n                count++;\n     \
    \       }\n        }\n        if(count > max_count){\n            max = words[i];\n\
    \            max_count = count;\n        }\n    }\n    return max;\n}\n", "  var\
    \ max_count = 0;\n  var max_word = \"\";\n  for(var i = 0; i < words.length; i++){\n\
    \    var count = 0;\n    for(var j = 0; j < words[i].length; j++){\n      if(words[i][j]\
    \ !== \"\"){\n        count++;\n      }\n    }\n    if(count > max_count){\n \
    \     max_count = count;\n      max_word = words[i];\n    }\n  }\n  return max_word;\n\
    }\n", "  var max = words[0];\n  var max_count = words[0].length;\n  for(var i\
    \ = 1; i < words.length; i++){\n    if(words[i].length > max_count){\n      max\
    \ = words[i];\n      max_count = words[i].length;\n    }\n  }\n  return max;\n\
    }\n", "    var max = words[0];\n    for(var i = 1; i < words.length; i++){\n \
    \       if(words[i].length > max.length){\n            max = words[i];\n     \
    \   }\n    }\n    return max;\n}\n<|endoftext|><|javascript|>var path = require('path');\n\
    var webpack = require('webpack');\nvar autoprefixer = require('autoprefixer');\n\
    var ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar HtmlWebpackPlugin\
    \ = require('html-webpack-plugin');\nvar CopyWebpackPlugin = require('copy-webpack-plugin');\n\
    \nmodule.exports = {\n  entry: [\n    './src/index.js'\n  ],\n  output: {\n  \
    \  path: path.join(__dirname, 'dist'),\n    filename: 'bundle.js'\n  },\n  module:\
    \ {\n    loaders: [\n      {\n        test: /\\.js$/,\n        loader: 'babel',\n\
    \        exclude: /node_modules/\n      },\n      {\n        test: /\\.css$/,\n\
    \        loader: ExtractTextPlugin.extract('style', 'css?modules&importLoaders=1&localIdentName=[name]__[local]___[hash:base64:5]')\n\
    \      },\n      {\n        test: /\\.scss$/,\n        loader: ExtractTextPlugin.extract('style',\
    \ 'css?modules&importLoaders=1&localIdentName=[name]__[local]___[hash:base64:5]!postcss!sass')\n\
    \      },\n      {\n        test: /\\.woff(2)?(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,\n\
    \        loader: 'url-loader?limit=10000&mimetype=application/font-woff'\n   \
    \   },\n      {\n        test: /\\.(ttf|eot|svg)(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,\n\
    \        loader: 'file-loader'\n      }\n    ]\n  },\n  postcss: [autop", "  \
    \  var max = words[0];\n    var max_count = words[0].length;\n    for(var i=1;\
    \ i<words.length; i++){\n        if(words[i].length > max_count){\n          \
    \  max = words[i];\n            max_count = words[i].length;\n        }\n    }\n\
    \    return max;\n}\n<|endoftext|><|javascript|>var searchData=\n[\n  ['_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5",
  "  var max = words[0];\n  var max_count = 0;\n  for(var i = 0; i < words.length;\
    \ i++){\n    var count = 0;\n    for(var j = 0; j < words[i].length; j++){\n \
    \     if(words[i][j] !== words[i][j].toLowerCase()){\n        count++;\n     \
    \ }\n    }\n    if(count > max_count){\n      max = words[i];\n      max_count\
    \ = count;\n    }\n  }\n  return max;\n}\n<|endoftext|><|javascript|>var _ = require('lodash');\n\
    var async = require('async');\nvar fs = require('fs');\nvar path = require('path');\n\
    var util = require('util');\n\nvar config = require('./config');\nvar logger =\
    \ require('./logger');\nvar utils = require('./utils');\n\nvar db = require('./db');\n\
    var db_utils = require('./db_utils');\n\nvar db_utils = require('./db_utils');\n\
    var db_utils = require('./db_utils');\n\nvar db_utils = require('./db_utils');\n\
    var db_utils = require('./db_utils');\n\nvar db_utils = require('./db_utils');\n\
    var db_utils = require('./db_utils');\n\nvar db_utils = require('./db_utils');\n\
    var db_utils = require('./db_utils');\n\nvar db_utils = require('./db_utils');\n\
    var db_utils = require('./db_utils');\n\nvar db_utils = require('./db_utils');\n\
    var db_utils = require('./db_utils');\n\nvar db_utils = require('./db_utils');\n\
    var db_utils = require('./db_utils');\n\nvar db_utils = require('./db_utils');\n\
    var db_utils = require('./db_utils');\n\nvar db_utils = require('./db_utils');\n\
    var db_utils = require('./db_utils');\n\nvar db_utils = require('.", "  var max\
    \ = words[0];\n  var max_count = words[0].length;\n  for(var i = 1; i < words.length;\
    \ i++){\n    if(words[i].length > max_count){\n      max = words[i];\n      max_count\
    \ = words[i].length;\n    }\n  }\n  return max;\n}\n", "    var max = 0,\n   \
    \     max_index = 0,\n        i = 0;\n    for(i = 0; i < words.length; i++){\n\
    \        var count = 0;\n        for(var j = 0; j < words[i].length; j++){\n \
    \           if(words[i][j] === words[i][j+1]){\n                count++;\n   \
    \         }\n            else{\n                count = 1;\n            }\n  \
    \      }\n        if(count > max){\n            max = count;\n            max_index\
    \ = i;\n        }\n    }\n    return words[max_index];\n}\n", "    var max = 0,\n\
    \        max_index = 0,\n        i = 0;\n    for(i = 0; i < words.length; i++){\n\
    \        var count = 0;\n        for(var j = 0; j < words[i].length; j++){\n \
    \           count += (words[i][j] === 'a' || words[i][j] === 'e' || words[i][j]\
    \ === 'i' || words[i][j] === 'o' || words[i][j] === 'u') ? 1 : 0;\n        }\n\
    \        if(count > max){\n            max = count;\n            max_index = i;\n\
    \        }\n    }\n    return words[max_index];\n}\n", "    var max = words[0];\n\
    \    var max_count = words[0].length;\n    for(var i = 1; i < words.length; i++){\n\
    \        if(words[i].length > max_count){\n            max_count = words[i].length;\n\
    \            max = words[i];\n        }\n    }\n    return max;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
