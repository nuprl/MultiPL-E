name: HumanEval_129_minPath
language: js
prompt: "//Given a grid with N rows and N columns (N >= 2) and a positive integer\
  \ k, \n// each cell of the grid contains a value. Every integer in the range [1,\
  \ N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
  \ to find the minimum path of length k in the grid. You can start\n// from any cell,\
  \ and in each step you can move to any of the neighbor cells,\n// in other words,\
  \ you can go to cells which share an edge with you current\n// cell.\n// Please\
  \ note that a path of length k means visiting exactly k cells (not\n// necessarily\
  \ distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered\
  \ less than a path B (of length k) if\n// after making the ordered arrays of the\
  \ values on the cells that A and B go\n// through (let's call them lst_A and lst_B),\
  \ lst_A is lexicographically less\n// than lst_B, in other words, there exist an\
  \ integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j\
  \ (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer\
  \ is unique.\n// Return an ordered array of the values on the cells that the minimum\
  \ path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7,\
  \ 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n\
  // [1]\nfunction minPath(grid, k){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = minPath;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1,\
  \ 2, 1]);\n  assert.deepEqual(candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1]);\n\
  \  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13,\
  \ 14, 15, 16]], 4),[1, 2, 1, 2]);\n  assert.deepEqual(candidate([[6, 4, 13, 10],\
  \ [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10, 1, 10, 1]);\n\
  \  assert.deepEqual(candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3,\
  \ 10, 11, 16]], 5),[1, 7, 1, 7, 1]);\n  assert.deepEqual(candidate([[11, 8, 7, 2],\
  \ [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1]);\n\
  \  assert.deepEqual(candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11,\
  \ 8, 7, 2]], 12),[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]);\n  assert.deepEqual(candidate([[2,\
  \ 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1, 3, 1, 3, 1, 3, 1, 3]);\n  assert.deepEqual(candidate([[6,\
  \ 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1, 5, 1, 5, 1, 5, 1, 5]);\n  assert.deepEqual(candidate([[1,\
  \ 2], [3, 4]], 10),[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);\n  assert.deepEqual(candidate([[1,\
  \ 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]);\n}\n\ntest();"
completions: ["    var i, j, lst = [],\n        n = grid.length,\n        m = grid[0].length,\n\
    \        visited = [],\n        min = Infinity;\n    \n    for(i = 0; i < n; i++){\n\
    \        for(j = 0; j < m; j++){\n            if(!visited[i][j]){\n          \
    \      visited[i][j] = true;\n                lst.push(grid[i][j]);\n        \
    \        if(lst.length === k){\n                    min = Math.min(min, lst.sort(function(a,\
    \ b){return a - b;}));\n                    lst = [];\n                }\n   \
    \         }\n        }\n    }\n    return min;\n}\n", "    var i, j, lst = [],\n\
    \        n = grid.length,\n        m = n * n,\n        visited = [],\n       \
    \ min = m,\n        min_index = 0;\n    \n    for(i = 0; i < n; i++){\n      \
    \  for(j = 0; j < n; j++){\n            if(!visited[i * n + j]){\n           \
    \     lst = [grid[i][j]];\n                visited[i * n + j] = true;\n      \
    \          \n                while(lst.length < k){\n                    var next\
    \ = [];\n                    \n                    for(var ii = 0; ii < lst.length;\
    \ ii++){\n                        for(var jj = 0; jj < lst.length; jj++){\n  \
    \                          if(i + ii < n && j + jj < n && !visited[i + ii * n\
    \ + j + jj]){\n                                next.push(grid[i + ii][j + jj]);\n\
    \                                visited[i + ii * n + j + jj] = true;\n      \
    \                      }\n                        }\n                    }\n \
    \                   \n                    if(next.length < lst.length){\n    \
    \                    lst = next;\n                    }\n                }\n \
    \               \n                if(lst.length < min){\n                    min\
    \ = lst.length;\n                    min_index = i * n + j;\n                }\n\
    \            }\n        }\n    }\n    \n    return lst.sort(function(a, b){\n\
    \        return a - b;\n    });\n}\n", "    var i, j, lst = [],\n        n = grid.length,\n\
    \        m = grid[0].length,\n        min = Infinity;\n    \n    for(i = 0; i\
    \ < n; i++){\n        for(j = 0; j < m; j++){\n            if(grid[i][j] === 0)\
    \ continue;\n            lst.push(grid[i][j]);\n        }\n    }\n    \n    for(i\
    \ = 0; i < k; i++){\n        min = Math.min(min, lst.sort(function(a, b){return\
    \ a - b;}));\n        for(j = 0; j < lst.length - 1; j++){\n            if(lst[j]\
    \ < lst[j + 1]){\n                lst[j] = lst[j + 1];\n                break;\n\
    \            }\n        }\n    }\n    \n    return lst;\n}\n", "    var result\
    \ = [];\n    var visited = [];\n    var min = Infinity;\n    var min_index = -1;\n\
    \    \n    for(var i = 0; i < grid.length; i++){\n        for(var j = 0; j < grid[i].length;\
    \ j++){\n            if(visited.indexOf(grid[i][j]) == -1){\n                visited.push(grid[i][j]);\n\
    \                if(min > grid[i][j]){\n                    min = grid[i][j];\n\
    \                    min_index = visited.length - 1;\n                }\n    \
    \        }\n        }\n    }\n    \n    for(var i = 0; i < visited.length; i++){\n\
    \        result.push(visited[i]);\n        if(i == min_index){\n            break;\n\
    \        }\n        var temp = visited[i];\n        visited[i] = visited[min_index];\n\
    \        visited[min_index] = temp;\n    }\n    \n    if(k > visited.length){\n\
    \        return result;\n    }\n    \n    for(var i = 0; i < visited.length; i++){\n\
    \        if(visited[i] == min){\n            result.push(min);\n            break;\n\
    \        }\n    }\n    \n    return result;\n}\n", "    var i, j, min = [],\n\
    \        n = grid.length,\n        m = grid[0].length,\n        visited = [],\n\
    \        visited_row = [],\n        visited_col = [],\n        visited_diag_r\
    \ = [],\n        visited_diag_l = [],\n        visited_diag_u = [],\n        visited_diag_d\
    \ = [],\n        visited_diag_r_u = [],\n        visited_diag_r_d = [],\n    \
    \    visited_diag_l_u = [],\n        visited_diag_l_d = [],\n        visited_diag_u_r\
    \ = [],\n        visited_diag_u_l = [],\n        visited_diag_d_r = [],\n    \
    \    visited_diag_d_l = [],\n        visited_diag_r_l = [],\n        visited_diag_l_r\
    \ = [],\n        visited_diag_u_r_u = [],\n        visited_diag_u_r_d = [],\n\
    \        visited_diag_u_l_u = [],\n        visited_diag_u_l_d = [],\n        visited_diag_d_r_u\
    \ = [],\n        visited_diag_d_r_d = [],\n        visited_diag_d_l_u = [],\n\
    \        visited_diag_d_l_d = [],\n        visited_diag_r_u_r = [],\n        visited_diag_r_u_l\
    \ = [],\n        visited_diag_r_d_r = [],\n        visited_diag_r_d_l = [],\n\
    \        visited_diag_l_u_r = [],\n        visited_diag_l_u_l = [],\n        visited_diag_l_d_r\
    \ = [],\n        visited_diag_l_d_l = [],\n        visited_diag_u_r_r = [", " \
    \   var n = grid.length,\n        m = grid[0].length,\n        dp = new Array(n),\n\
    \        path = new Array(k+1);\n    \n    for(var i = 0; i < n; i++){\n     \
    \   dp[i] = new Array(m);\n        for(var j = 0; j < m; j++){\n            dp[i][j]\
    \ = grid[i][j];\n        }\n    }\n    \n    for(var i = 0; i < k; i++){\n   \
    \     path[i] = dp[0][0];\n        for(var j = 0; j < m; j++){\n            if(dp[0][j]\
    \ < dp[0][j+1]){\n                dp[0][j+1] = dp[0][j];\n                path[i+1]\
    \ = dp[0][j];\n            }else{\n                dp[0][j+1] = dp[0][j+1];\n\
    \            }\n        }\n    }\n    \n    return path;\n}\n", "    var i, j,\
    \ min = [],\n        n = grid.length,\n        m = grid[0].length,\n        visited\
    \ = [],\n        path = [];\n    \n    for(i = 0; i < n; i++){\n        for(j\
    \ = 0; j < m; j++){\n            if(visited[i] || visited[j]) continue;\n    \
    \        visited[i] = visited[j] = true;\n            path.push(grid[i][j]);\n\
    \            if(path.length === k){\n                min = path;\n           \
    \     break;\n            }\n            if(i > 0 && !visited[i-1]){\n       \
    \         path.push(grid[i-1][j]);\n                if(path.length === k){\n \
    \                   min = path;\n                    break;\n                }\n\
    \            }\n            if(j > 0 && !visited[i] && !visited[j-1]){\n     \
    \           path.push(grid[i][j-1]);\n                if(path.length === k){\n\
    \                    min = path;\n                    break;\n               \
    \ }\n            }\n            if(i < n-1 && !visited[i+1]){\n              \
    \  path.push(grid[i+1][j]);\n                if(path.length === k){\n        \
    \            min = path;\n                    break;\n                }\n    \
    \        }\n            if(j < m-1 && !visited[i] && !visited[j+1]){\n       \
    \         path.push(grid[i][j+1]);\n                if(path.length === k){\n \
    \                   min = path;\n                    break;\n                }\n\
    \            }\n        }\n    }\n    return min;\n}\n", "    var i, j, lst =\
    \ [],\n        n = grid.length,\n        m = grid[0].length,\n        visited\
    \ = [],\n        min = Infinity,\n        min_index = 0,\n        min_value =\
    \ Infinity;\n    \n    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n\
    \            if(!visited[i][j]){\n                lst = [grid[i][j]];\n      \
    \          visited[i][j] = true;\n                \n                if(k > 1){\n\
    \                    lst.push(min_value);\n                    min_value = grid[i][j];\n\
    \                    min_index = lst.length - 1;\n                }\n        \
    \        \n                for(var x = 0; x < 4; x++){\n                    var\
    \ next_i = i + dx[x],\n                        next_j = j + dy[x];\n         \
    \           \n                    if(next_i >= 0 && next_i < n && next_j >= 0\
    \ && next_j < m && !visited[next_i][next_j]){\n                        lst.push(grid[next_i][next_j]);\n\
    \                        visited[next_i][next_j] = true;\n                   \
    \ }\n                }\n                \n                if(lst.length < min){\n\
    \                    min = lst.length;\n                    min_index = lst.length\
    \ - 1;\n                    min_value = lst[min_index];\n                }\n \
    \           }\n        }\n    }\n    \n    return lst;\n}\n", "    var row = grid.length,\n\
    \        col = grid[0].length,\n        result = [],\n        visited = [],\n\
    \        i, j,\n        min = Infinity;\n\n    for(i = 0; i < row; i++){\n   \
    \     for(j = 0; j < col; j++){\n            if(visited[i] || visited[j]) continue;\n\
    \            visited[i] = visited[j] = true;\n            if(grid[i][j] < min){\n\
    \                min = grid[i][j];\n                result = [i, j];\n       \
    \     }\n        }\n    }\n\n    return result;\n}\n", "    var i, j, min = Infinity,\
    \ min_i = -1, min_j = -1;\n    for(i = 0; i < grid.length; i++){\n        for(j\
    \ = 0; j < grid[i].length; j++){\n            if(grid[i][j] < min && grid[i][j]\
    \ >= 1){\n                min = grid[i][j];\n                min_i = i;\n    \
    \            min_j = j;\n            }\n        }\n    }\n    \n    var lst =\
    \ [];\n    var lst_i = -1;\n    var lst_j = -1;\n    var lst_k = 0;\n    \n  \
    \  while(lst_k < k){\n        lst_i = min_i + 1;\n        lst_j = min_j + 1;\n\
    \        \n        if(lst_i < grid.length && lst_j < grid[lst_i].length){\n  \
    \          if(grid[lst_i][lst_j] < min){\n                min = grid[lst_i][lst_j];\n\
    \                lst_i = min_i;\n                lst_j = min_j;\n            }\n\
    \            \n            lst.push(grid[lst_i][lst_j]);\n            \n     \
    \       min_i = lst_i;\n            min_j = lst_j;\n            \n           \
    \ lst_k++;\n        }\n        else{\n            break;\n        }\n    }\n \
    \   \n    return lst;\n}\n", "    var i, j, lst = [],\n        n = grid.length,\n\
    \        m = grid[0].length;\n    for(i = 0; i < n; i++){\n        for(j = 0;\
    \ j < m; j++){\n            lst.push(grid[i][j]);\n        }\n    }\n    var dp\
    \ = new Array(k + 1);\n    for(i = 0; i <= k; i++){\n        dp[i] = new Array(m\
    \ + 1);\n        for(j = 0; j <= m; j++){\n            dp[i][j] = Number.POSITIVE_INFINITY;\n\
    \        }\n    }\n    dp[0][0] = 0;\n    for(i = 0; i < n; i++){\n        for(j\
    \ = 0; j < m; j++){\n            for(var l = 1; l <= k; l++){\n              \
    \  if(i - 1 >= 0 && j - 1 >= 0){\n                    dp[l][j] = Math.min(dp[l][j],\
    \ dp[l - 1][j - 1] + grid[i - 1][j - 1]);\n                }\n               \
    \ if(i - 1 >= 0){\n                    dp[l][j] = Math.min(dp[l][j], dp[l][j -\
    \ 1] + grid[i - 1][j]);\n                }\n                if(j - 1 >= 0){\n\
    \                    dp[l][j] = Math.min(dp[l][j], dp[l - 1][j] + grid[i][j -\
    \ 1]);\n                }\n            }\n        }\n    }\n    return lst.sort(function(a,\
    \ b){\n        return dp[k][a] - dp[k][b];\n    });\n}\n", "    let m = grid.length,\
    \ n = grid[0].length;\n    let dp = new Array(m).fill(0);\n    let lst = new Array(m).fill(0);\n\
    \    for(let i = 0; i < m; i++){\n        for(let j = 0; j < n; j++){\n      \
    \      if(i === 0 && j === 0){\n                dp[i] = grid[i][j];\n        \
    \        lst[i] = grid[i][j];\n            }else if(i === 0){\n              \
    \  dp[i] = Math.min(dp[i], dp[i-1] + grid[i][j]);\n                lst[i] = dp[i];\n\
    \            }else if(j === 0){\n                dp[i] = Math.min(dp[i], dp[i-1]\
    \ + grid[i][j]);\n                lst[i] = dp[i];\n            }else{\n      \
    \          dp[i] = Math.min(dp[i], Math.min(dp[i-1], dp[i-1] + grid[i][j]));\n\
    \                lst[i] = dp[i];\n            }\n        }\n    }\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        result.push(lst[i]);\n    }\n\
    \    return result;\n}\n", "    var i, j, min = Infinity, min_i = -1, min_j =\
    \ -1;\n    var lst = [];\n    for(i = 0; i < grid.length; i++){\n        for(j\
    \ = 0; j < grid[i].length; j++){\n            if(grid[i][j] < min){\n        \
    \        min = grid[i][j];\n                min_i = i;\n                min_j\
    \ = j;\n            }\n            lst.push(grid[i][j]);\n        }\n    }\n \
    \   var path = [];\n    for(i = 0; i < k; i++){\n        path.push(lst[i]);\n\
    \    }\n    if(min_i === -1 || min_j === -1){\n        return path;\n    }\n \
    \   var lst_i = [];\n    var lst_j = [];\n    for(i = 0; i < lst.length; i++){\n\
    \        if(i === min_i){\n            lst_i.push(lst[i]);\n        }\n      \
    \  if(i === min_j){\n            lst_j.push(lst[i]);\n        }\n    }\n    var\
    \ lst_i_sorted = lst_i.sort(function(a, b){return a - b});\n    var lst_j_sorted\
    \ = lst_j.sort(function(a, b){return a - b});\n    for(i = 0; i < lst_i_sorted.length;\
    \ i++){\n        if(lst_i_sorted[i] === lst_j_sorted[i]){\n            path.push(lst_i_sorted[i]);\n\
    \        }\n    }\n    return path;\n}\n", "    var i, j, lst = [],\n        n\
    \ = grid.length,\n        m = grid[0].length,\n        visited = [];\n    \n \
    \   for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n            if(visited[i]\
    \ || visited[j]) continue;\n            lst.push(grid[i][j]);\n            visited[i]\
    \ = true;\n            visited[j] = true;\n            if(k === 1){\n        \
    \        break;\n            }\n            \n            // go to the neighbors\n\
    \            if(i > 0 && !visited[i - 1]){\n                lst.push(grid[i -\
    \ 1][j]);\n                visited[i - 1] = true;\n            }\n           \
    \ if(j > 0 && !visited[i][j - 1]){\n                lst.push(grid[i][j - 1]);\n\
    \                visited[i][j - 1] = true;\n            }\n            if(i <\
    \ n - 1 && !visited[i + 1]){\n                lst.push(grid[i + 1][j]);\n    \
    \            visited[i + 1] = true;\n            }\n            if(j < m - 1 &&\
    \ !visited[i][j + 1]){\n                lst.push(grid[i][j + 1]);\n          \
    \      visited[i][j + 1] = true;\n            }\n        }\n    }\n    \n    return\
    \ lst;\n}\n", "    var i, j, lst = [],\n        n = grid.length,\n        m =\
    \ grid[0].length;\n    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n\
    \            lst.push(grid[i][j]);\n        }\n    }\n    var dp = new Array(k\
    \ + 1);\n    for(i = 0; i <= k; i++){\n        dp[i] = [];\n    }\n    for(i =\
    \ 0; i < n; i++){\n        for(j = 0; j < m; j++){\n            if(i > 0){\n \
    \               dp[0][j] = grid[i - 1][j];\n            }\n            if(j >\
    \ 0){\n                dp[0][j] = Math.min(dp[0][j], dp[0][j - 1]);\n        \
    \    }\n            if(i < n - 1){\n                dp[0][j] = Math.min(dp[0][j],\
    \ dp[1][j]);\n            }\n            if(j < m - 1){\n                dp[0][j]\
    \ = Math.min(dp[0][j], dp[0][j + 1]);\n            }\n        }\n    }\n    for(i\
    \ = 1; i <= k; i++){\n        for(j = 0; j < m; j++){\n            dp[i][j] =\
    \ Math.min(dp[i - 1][j], dp[i][j]);\n            if(i < k){\n                dp[i][j]\
    \ = Math.min(dp[i][j], dp[i + 1][j]);\n            }\n            if(j < m - 1){\n\
    \                dp[i][j] = Math.min(dp[i][j], dp[i][j + 1]);\n            }\n\
    \        }\n    }\n    return lst.sort(function(a, b){\n        return a - b;\n\
    \    });\n}\n", "    var result = [];\n    var visited = [];\n    var dfs = function(i,\
    \ j){\n        if(visited[i] || visited[j]) return;\n        visited[i] = true;\n\
    \        visited[j] = true;\n        if(i == j) result.push(grid[i][j]);\n   \
    \     else{\n            for(var i = 0; i < grid[0].length; i++){\n          \
    \      if(i != j && !visited[i]) dfs(i, j);\n            }\n        }\n    }\n\
    \    for(var i = 0; i < grid.length; i++){\n        for(var j = 0; j < grid[0].length;\
    \ j++){\n            if(!visited[i] && !visited[j]) dfs(i, j);\n        }\n  \
    \  }\n    return result;\n}\n", "    var i, j, min = Infinity, min_i = -1, min_j\
    \ = -1;\n    var lst = [];\n    for(i = 0; i < grid.length; i++){\n        for(j\
    \ = 0; j < grid[i].length; j++){\n            lst.push(grid[i][j]);\n        }\n\
    \    }\n    for(i = 0; i < lst.length; i++){\n        for(j = 0; j < lst.length;\
    \ j++){\n            if(i === j){\n                continue;\n            }\n\
    \            if(lst[i] < lst[j] && lst[i] < min){\n                min = lst[i];\n\
    \                min_i = i;\n                min_j = j;\n            }\n     \
    \   }\n    }\n    if(min === Infinity){\n        return [];\n    }\n    var path\
    \ = [];\n    for(i = 0; i < k; i++){\n        path.push(lst[min_i]);\n       \
    \ min_i = min_j;\n        min_j = lst.indexOf(lst[min_i]);\n        min = lst[min_i];\n\
    \    }\n    return path;\n}\n", "    var i, j, len, min = [],\n        n = grid.length,\n\
    \        m = grid[0].length,\n        visited = [],\n        path = [];\n    \n\
    \    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n            if(visited[i]\
    \ || visited[j]) continue;\n            visited[i] = visited[j] = true;\n    \
    \        path.push(grid[i][j]);\n            if(k === 0){\n                return\
    \ path;\n            }\n            len = path.length;\n            for(i = 0;\
    \ i < len; i++){\n                for(j = 0; j < len; j++){\n                \
    \    if(i !== j && path[i] < path[j]){\n                        min[i] = path[j];\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n            path = [];\n        }\n    }\n    return min;\n}\n",
  "    var i, j, min = grid[0][0], min_i = 0, min_j = 0;\n    for(i = 0; i < grid.length;\
    \ i++){\n        for(j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ < min){\n                min = grid[i][j];\n                min_i = i;\n   \
    \             min_j = j;\n            }\n        }\n    }\n    var lst = [];\n\
    \    for(i = 0; i < k; i++){\n        lst.push(grid[min_i][min_j]);\n        min_i\
    \ = Math.floor(min_i / 2);\n        min_j = Math.floor(min_j / 2);\n        if(min_i\
    \ < 0 || min_j < 0){\n            break;\n        }\n        if(min_i === 0 &&\
    \ min_j === 0){\n            break;\n        }\n    }\n    return lst;\n}\n",
  "    var result = [];\n    var visited = [];\n    var dfs = function(i, j){\n  \
    \      if(visited[i] || visited[j]) return;\n        visited[i] = true;\n    \
    \    visited[j] = true;\n        result.push(grid[i][j]);\n        for(var i =\
    \ 0; i < grid.length; i++){\n            if(i != j && !visited[i]){\n        \
    \        dfs(i, j);\n            }\n        }\n    };\n    for(var i = 0; i <\
    \ grid.length; i++){\n        for(var j = 0; j < grid[i].length; j++){\n     \
    \       if(!visited[i] && !visited[j]){\n                dfs(i, j);\n        \
    \    }\n        }\n    }\n    return result;\n}\n", "    var i, j, lst = [],\n\
    \        n = grid.length,\n        m = grid[0].length,\n        min = Infinity;\n\
    \    \n    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n        \
    \    if(grid[i][j] === 0) continue;\n            lst.push(grid[i][j]);\n     \
    \   }\n    }\n    \n    for(i = 0; i < k; i++){\n        min = Math.min(min, lst.sort(function(a,\
    \ b){return a - b;}));\n        lst = lst.sort(function(a, b){return a - b;});\n\
    \    }\n    \n    return lst;\n}\n", "    var i, j, min = grid[0][0], min_i, min_j;\n\
    \    for(i = 0; i < grid.length; i++){\n        for(j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] < min){\n                min = grid[i][j];\n\
    \                min_i = i;\n                min_j = j;\n            }\n     \
    \   }\n    }\n    var lst = [];\n    for(i = 0; i < grid.length; i++){\n     \
    \   for(j = 0; j < grid[i].length; j++){\n            if(i == min_i && j == min_j){\n\
    \                lst.push(grid[i][j]);\n            }\n        }\n    }\n    if(lst.length\
    \ < k){\n        return [];\n    }\n    return lst.sort(function(a, b){\n    \
    \    return a - b;\n    });\n}\n", "    var i, j, min = [],\n        n = grid.length,\n\
    \        m = grid[0].length,\n        visited = [],\n        path = [];\n    \n\
    \    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n            if(visited[i]\
    \ || visited[j]) continue;\n            visited[i] = visited[j] = true;\n    \
    \        path.push(grid[i][j]);\n            if(k === 0){\n                return\
    \ path;\n            }\n            min = minPathHelper(grid, i, j, k, visited,\
    \ min);\n            visited[i] = visited[j] = false;\n            path.pop();\n\
    \        }\n    }\n    return min;\n}\n\nfunction minPathHelper(grid, i, j, k,\
    \ visited, min){\n    var i_min, j_min,\n        n = grid.length,\n        m =\
    \ grid[0].length,\n        i_min = i,\n        j_min = j;\n    \n    for(var ii\
    \ = i - 1; ii <= i + 1; ii++){\n        for(var jj = j - 1; jj <= j + 1; jj++){\n\
    \            if(ii < 0 || jj < 0 || ii >= n || jj >= m || visited[ii] || visited[jj])\
    \ continue;\n            visited[ii] = visited[jj] = true;\n            min =\
    \ minPathHelper(grid, ii, jj, k - 1, visited, min);\n            visited[ii] =\
    \ visited[jj] = false;\n        }\n    }\n    \n    if(min.length === k){\n  \
    \      return min;\n    }\n    \n    if(i_min < i){\n        min.push(grid[i][j]);\n\
    \        i_min = i;\n    }\n    if(j_min < j){\n        min.push(grid[i][j]);\n\
    \        j_min = j;\n    }\n    \n    return min;\n}", "    var i, j, n = grid.length,\
    \ m = n * n,\n        lst = [],\n        min = m,\n        min_i = -1,\n     \
    \   min_j = -1;\n    \n    for(i = 0; i < n; i++){\n        for(j = 0; j < n;\
    \ j++){\n            if(grid[i][j] < m){\n                lst.push(grid[i][j]);\n\
    \            }\n        }\n    }\n    \n    for(i = 0; i < k; i++){\n        for(j\
    \ = 0; j < lst.length; j++){\n            if(lst[j] < min){\n                min\
    \ = lst[j];\n                min_i = i;\n                min_j = j;\n        \
    \    }\n        }\n        \n        if(min_i === -1){\n            break;\n \
    \       }\n        \n        lst[min_j] = m;\n        min_j = -1;\n        \n\
    \        for(j = 0; j < lst.length; j++){\n            if(lst[j] < min){\n   \
    \             min = lst[j];\n                min_i = i;\n                min_j\
    \ = j;\n            }\n        }\n        \n        if(min_i === -1){\n      \
    \      break;\n        }\n        \n        lst[min_j] = m;\n        min_j = -1;\n\
    \    }\n    \n    return lst;\n}\n", "    var i, j, min_path = [],\n        n\
    \ = grid.length,\n        m = grid[0].length;\n    \n    for(i = 0; i < n; i++){\n\
    \        for(j = 0; j < m; j++){\n            min_path.push(grid[i][j]);\n   \
    \     }\n    }\n    \n    for(i = 0; i < k; i++){\n        for(j = 0; j < n; j++){\n\
    \            min_path.sort(function(a, b){return a - b});\n            min_path.splice(0,\
    \ 0, grid[j][i]);\n        }\n    }\n    \n    return min_path;\n}\n", "    var\
    \ i, j, lst = [],\n        n = grid.length,\n        m = grid[0].length;\n   \
    \ \n    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n           \
    \ lst.push(grid[i][j]);\n        }\n    }\n    \n    for(i = 0; i < k; i++){\n\
    \        for(j = 0; j < lst.length; j++){\n            if(lst[j] < lst[j+1]){\n\
    \                lst[j] = lst[j+1];\n                lst[j+1] = lst[j];\n    \
    \            lst[j] = lst[j+1];\n            }\n        }\n    }\n    \n    return\
    \ lst;\n}\n", "    var i, j, min = [],\n        n = grid.length,\n        m =\
    \ grid[0].length,\n        visited = [],\n        path = [],\n        lst = [],\n\
    \        min_lst = [],\n        min_lst_i = 0;\n\n    for(i = 0; i < n; i++){\n\
    \        for(j = 0; j < m; j++){\n            if(visited[i] || visited[j]) continue;\n\
    \            path.push([i, j]);\n            visited[i] = visited[j] = true;\n\
    \            lst.push(grid[i][j]);\n        }\n    }\n\n    for(i = 0; i < k;\
    \ i++){\n        min_lst = [];\n        for(j = 0; j < path.length; j++){\n  \
    \          if(lst[j] < min_lst[min_lst_i]){\n                min_lst[min_lst_i]\
    \ = lst[j];\n            }\n            if(lst[j] > min_lst[min_lst_i]){\n   \
    \             min_lst_i = 0;\n                min_lst = [];\n            }\n \
    \           if(lst[j] === min_lst[min_lst_i]){\n                min_lst_i++;\n\
    \            }\n        }\n        min.push(min_lst[min_lst_i - 1]);\n       \
    \ lst = [];\n        for(j = 0; j < path.length; j++){\n            if(visited[path[j][0]]\
    \ || visited[path[j][1]]){\n                lst.push(grid[path[j][0]][path[j][1]]);\n\
    \            }\n            visited[path[j][0]] = visited[path[j][1]] = true;\n\
    \        }\n    }\n\n    return min;\n}\n", "    var i, j, min = grid[0][0], min_i\
    \ = 0, min_j = 0;\n    for(i = 0; i < grid.length; i++){\n        for(j = 0; j\
    \ < grid[i].length; j++){\n            if(grid[i][j] < min){\n               \
    \ min = grid[i][j];\n                min_i = i;\n                min_j = j;\n\
    \            }\n        }\n    }\n    var lst = [];\n    for(i = 0; i < k; i++){\n\
    \        lst.push(grid[min_i][min_j]);\n        min_i = Math.floor(min_i / 2);\n\
    \        min_j = Math.floor(min_j / 2);\n        if(min_i < 0 || min_j < 0){\n\
    \            break;\n        }\n    }\n    return lst;\n}\n", "    var len = grid.length;\n\
    \    var i, j, path = [];\n    var lst = [];\n    for(i = 0; i < len; i++){\n\
    \        lst[i] = grid[i].slice(0);\n    }\n    for(i = 0; i < len; i++){\n  \
    \      for(j = 0; j < len; j++){\n            if(i !== j && grid[i][j] === 1){\n\
    \                path.push(grid[i][j]);\n                lst[i].splice(j, 1);\n\
    \                lst[j].splice(i, 1);\n            }\n        }\n    }\n    for(i\
    \ = 0; i < len; i++){\n        if(lst[i].length === k){\n            return lst[i];\n\
    \        }\n    }\n    return path;\n}\n", "    var i, j, min = Infinity, min_i\
    \ = -1, min_j = -1;\n    var lst = [];\n    for(i = 0; i < grid.length; i++){\n\
    \        for(j = 0; j < grid[i].length; j++){\n            if(grid[i][j] < min){\n\
    \                min = grid[i][j];\n                min_i = i;\n             \
    \   min_j = j;\n            }\n            lst.push(grid[i][j]);\n        }\n\
    \    }\n    var lst_i = [];\n    var lst_j = [];\n    for(i = 0; i < lst.length;\
    \ i++){\n        lst_i.push(lst[i]);\n        lst_j.push(lst[i]);\n    }\n   \
    \ for(i = 0; i < lst.length; i++){\n        for(j = 0; j < lst.length; j++){\n\
    \            if(i != j && lst[i] < lst[j]){\n                lst_i.push(lst[j]);\n\
    \                lst_j.push(lst[i]);\n            }\n        }\n    }\n    for(i\
    \ = 0; i < lst_i.length; i++){\n        if(lst_i[i] < min){\n            min =\
    \ lst_i[i];\n            min_i = i;\n        }\n    }\n    for(i = 0; i < lst_j.length;\
    \ i++){\n        if(lst_j[i] < min){\n            min = lst_j[i];\n          \
    \  min_j = i;\n        }\n    }\n    if(min_i == -1 || min_j == -1){\n       \
    \ return [];\n    }\n    var path = [];\n    path.push(min_i);\n    path.push(min_j);\n\
    \    for(i = 0; i < lst_i.length; i++){\n        if(lst_i[i] == min){\n      \
    \      path.push(i);\n        }\n    }\n    for(i = 0", "    var i, j, lst = [],\n\
    \        n = grid.length,\n        m = grid[0].length;\n    for(i = 0; i < n;\
    \ i++){\n        for(j = 0; j < m; j++){\n            lst.push(grid[i][j]);\n\
    \        }\n    }\n    lst.sort(function(a, b){\n        return a - b;\n    });\n\
    \    var min = lst[k - 1];\n    for(i = k; i < n * m; i++){\n        if(lst[i]\
    \ < min){\n            min = lst[i];\n        }\n    }\n    return lst;\n}\n",
  "    var i, j, min = Infinity, min_i = 0, min_j = 0;\n    var lst = [];\n    for(i\
    \ = 0; i < grid.length; i++){\n        for(j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] < min){\n                min = grid[i][j];\n      \
    \          min_i = i;\n                min_j = j;\n            }\n           \
    \ lst.push(grid[i][j]);\n        }\n    }\n    var path = [];\n    for(i = 0;\
    \ i < k; i++){\n        path.push(lst[i]);\n    }\n    for(i = k; i < lst.length;\
    \ i++){\n        if(lst[i] < lst[i - k]){\n            path.push(lst[i]);\n  \
    \      }\n    }\n    return path;\n}\n", "    var dp = [];\n    var n = grid.length;\n\
    \    var m = grid[0].length;\n    \n    for(var i = 0; i < n; i++){\n        dp[i]\
    \ = [];\n        for(var j = 0; j < m; j++){\n            dp[i][j] = grid[i][j];\n\
    \        }\n    }\n    \n    for(var i = 0; i < n; i++){\n        for(var j =\
    \ 0; j < m; j++){\n            for(var l = 0; l < m; l++){\n                if(i\
    \ > 0 && j > 0 && dp[i-1][j-1] < dp[i][j]){\n                    dp[i][j] = dp[i-1][j-1];\n\
    \                }\n                if(i > 0 && j < m-1 && dp[i-1][j+1] < dp[i][j]){\n\
    \                    dp[i][j] = dp[i-1][j+1];\n                }\n           \
    \     if(i < n-1 && j > 0 && dp[i+1][j-1] < dp[i][j]){\n                    dp[i][j]\
    \ = dp[i+1][j-1];\n                }\n                if(i < n-1 && j < m-1 &&\
    \ dp[i+1][j+1] < dp[i][j]){\n                    dp[i][j] = dp[i+1][j+1];\n  \
    \              }\n            }\n        }\n    }\n    \n    var result = [];\n\
    \    for(var i = 0; i < k; i++){\n        result.push(dp[n-1][m-1]);\n    }\n\
    \    \n    return result;\n}\n", "    var i, j, lst = [],\n        n = grid.length,\n\
    \        m = grid[0].length;\n    \n    for(i = 0; i < n; i++){\n        for(j\
    \ = 0; j < m; j++){\n            lst.push(grid[i][j]);\n        }\n    }\n   \
    \ \n    var min = lst[0];\n    for(i = 1; i <= k; i++){\n        min = Math.min(min,\
    \ lst[i]);\n    }\n    \n    return lst.sort(function(a, b){\n        return a\
    \ - b;\n    });\n}\n", "    var i, j, lst = [],\n        N = grid.length,\n  \
    \      M = grid[0].length,\n        visited = [],\n        min = Infinity;\n \
    \   \n    for(i = 0; i < N; i++){\n        for(j = 0; j < M; j++){\n         \
    \   if(!visited[i][j]){\n                visited[i][j] = true;\n             \
    \   lst.push(grid[i][j]);\n                if(lst.length === k){\n           \
    \         min = Math.min(min, lst.sort(function(a, b){return a - b;}));\n    \
    \                lst = [];\n                }\n            }\n        }\n    }\n\
    \    return min;\n}\n", "    let m = grid.length, n = grid[0].length;\n    let\
    \ dp = Array(m).fill(0).map(() => Array(n).fill(0));\n    let lst = [];\n    for(let\
    \ i = 0; i < m; i++){\n        for(let j = 0; j < n; j++){\n            if(i ===\
    \ 0 && j === 0){\n                dp[i][j] = grid[i][j];\n                lst.push(grid[i][j]);\n\
    \            }else if(i === 0){\n                dp[i][j] = Math.min(dp[i][j -\
    \ 1], dp[i][j]) + grid[i][j];\n                lst.push(dp[i][j]);\n         \
    \   }else if(j === 0){\n                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j])\
    \ + grid[i][j];\n                lst.push(dp[i][j]);\n            }else{\n   \
    \             dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n\
    \                lst.push(dp[i][j]);\n            }\n        }\n    }\n    let\
    \ result = lst.sort((a, b) => a - b);\n    if(result.length < k) return [];\n\
    \    return result.slice(0, k);\n}\n", "    var i, j, lst = [],\n        n = grid.length,\n\
    \        m = grid[0].length,\n        path = [];\n    \n    for(i = 0; i < n;\
    \ i++){\n        for(j = 0; j < m; j++){\n            if(i === 0 && j === 0){\n\
    \                lst.push(grid[i][j]);\n            }else if(i === 0){\n     \
    \           lst.push(grid[i][j]);\n            }else if(j === 0){\n          \
    \      lst.push(grid[i][j]);\n            }else{\n                lst.push(grid[i][j]);\n\
    \                if(lst.indexOf(grid[i][j]) === -1){\n                    lst.push(grid[i][j]);\n\
    \                }\n            }\n        }\n    }\n    \n    for(i = 0; i <\
    \ k; i++){\n        path.push(lst.shift());\n    }\n    \n    return path;\n}\n",
  "    var row = grid.length,\n        col = grid[0].length,\n        visited = [],\n\
    \        min = [],\n        i, j,\n        min_i, min_j,\n        min_val;\n \
    \   \n    for(i = 0; i < row; i++){\n        for(j = 0; j < col; j++){\n     \
    \       visited.push([]);\n            visited[i][j] = 1;\n        }\n    }\n\
    \    \n    for(i = 0; i < row; i++){\n        for(j = 0; j < col; j++){\n    \
    \        if(visited[i][j] === 1){\n                min_i = i;\n              \
    \  min_j = j;\n                min_val = grid[i][j];\n                \n     \
    \           if(i > 0 && visited[i-1][j] === 1){\n                    min_val =\
    \ Math.min(min_val, grid[i-1][j]);\n                    min_i = i-1;\n       \
    \         }\n                \n                if(j > 0 && visited[i][j-1] ===\
    \ 1){\n                    min_val = Math.min(min_val, grid[i][j-1]);\n      \
    \              min_j = j-1;\n                }\n                \n           \
    \     if(i < row-1 && visited[i+1][j] === 1){\n                    min_val = Math.min(min_val,\
    \ grid[i+1][j]);\n                    min_i = i+1;\n                }\n      \
    \          \n                if(j < col-1 && visited[i][j+1] === 1){\n       \
    \             min_val = Math.min(min_val, grid[i][j+1]);\n                   \
    \ min_j = j+1;\n                }\n                \n                visited[i][j]\
    \ = 2;\n                min.push(min_val);\n                min_i = i;\n     \
    \           min_j = j;\n                min_val = grid[i][j];\n              \
    \  \n                if(i > 0 && visited[i-1][j] === 1){\n                   \
    \ min_val = Math.min(min_val, grid[i-1][j]);\n                    min", "    var\
    \ len = grid.length;\n    var len2 = len * len;\n    var lst = [];\n    var lst2\
    \ = [];\n    for(var i = 0; i < len; i++){\n        lst.push(grid[i][0]);\n  \
    \      lst2.push(grid[i][len - 1]);\n    }\n    for(var i = 0; i < len; i++){\n\
    \        lst.push(grid[i][len - 1]);\n        lst2.push(grid[i][0]);\n    }\n\
    \    for(var i = 0; i < len; i++){\n        lst.push(grid[i][len - 1]);\n    \
    \    lst2.push(grid[i][len - 1]);\n    }\n    for(var i = 0; i < len; i++){\n\
    \        lst.push(grid[i][0]);\n        lst2.push(grid[i][0]);\n    }\n    for(var\
    \ i = 0; i < len; i++){\n        lst.push(grid[i][0]);\n        lst2.push(grid[i][len\
    \ - 1]);\n    }\n    for(var i = 0; i < len; i++){\n        lst.push(grid[i][0]);\n\
    \        lst2.push(grid[i][0]);\n    }\n    for(var i = 0; i < len; i++){\n  \
    \      lst.push(grid[i][0]);\n        lst2.push(grid[i][0]);\n    }\n    for(var\
    \ i = 0; i < len; i++){\n        lst.push(grid[i][0]);\n        lst2.push(grid[i][0]);\n\
    \    }\n    for(var i = 0; i < len; i++){\n        lst.push(grid[i][0]);\n   \
    \     lst2.push(grid[i][0]);\n    }\n    for(var i = 0; i < len; i++){\n     \
    \   lst.push(grid[i][0]);\n        lst2.push(grid[i][0]);\n    }\n    for(var\
    \ i = 0;", "    var i, j, min = grid[0][0], min_i = 0, min_j = 0;\n    for(i =\
    \ 0; i < grid.length; i++){\n        for(j = 0; j < grid[i].length; j++){\n  \
    \          if(grid[i][j] < min){\n                min = grid[i][j];\n        \
    \        min_i = i;\n                min_j = j;\n            }\n        }\n  \
    \  }\n    var lst = [];\n    for(i = 0; i < k; i++){\n        lst.push(grid[min_i][min_j]);\n\
    \        min_i = Math.floor(min_i / 2);\n        min_j = Math.floor(min_j / 2);\n\
    \        if(min_i < 0 || min_j < 0){\n            break;\n        }\n        if(min_i\
    \ === 0 && min_j === 0){\n            break;\n        }\n    }\n    return lst;\n\
    }\n", "    var row = grid.length;\n    var col = grid[0].length;\n    var min\
    \ = [];\n    var dp = [];\n    var i, j;\n    for(i = 0; i < row; i++){\n    \
    \    dp[i] = [];\n        for(j = 0; j < col; j++){\n            dp[i][j] = grid[i][j];\n\
    \        }\n    }\n    for(i = 0; i < row; i++){\n        for(j = 0; j < col;\
    \ j++){\n            if(i > 0 && j > 0){\n                if(dp[i][j] < dp[i-1][j-1]){\n\
    \                    dp[i][j] = dp[i-1][j-1];\n                }\n           \
    \ }\n            if(i > 0 && j < col-1){\n                if(dp[i][j] < dp[i-1][j+1]){\n\
    \                    dp[i][j] = dp[i-1][j+1];\n                }\n           \
    \ }\n            if(i < row-1 && j > 0){\n                if(dp[i][j] < dp[i+1][j-1]){\n\
    \                    dp[i][j] = dp[i+1][j-1];\n                }\n           \
    \ }\n            if(i < row-1 && j < col-1){\n                if(dp[i][j] < dp[i+1][j+1]){\n\
    \                    dp[i][j] = dp[i+1][j+1];\n                }\n           \
    \ }\n        }\n    }\n    for(i = 0; i < row; i++){\n        for(j = 0; j < col;\
    \ j++){\n            if(i > 0 && j > 0){\n                if(dp[i][j] < dp[i-1][j-1]){\n\
    \                    dp[i][j] = dp[i-1][j-1];\n                }\n           \
    \ }\n            if(i > 0 && j < col-1){\n                if(dp[i][j] < dp[i-1][j+1",
  "    var i, j, lst = [],\n        n = grid.length,\n        m = grid[0].length,\n\
    \        visited = [],\n        min = Infinity;\n    \n    for(i = 0; i < n; i++){\n\
    \        for(j = 0; j < m; j++){\n            if(!visited[i][j]){\n          \
    \      visited[i][j] = true;\n                lst.push(grid[i][j]);\n        \
    \        if(lst.length === k){\n                    min = Math.min(min, lst.sort(compare));\n\
    \                    lst = [];\n                }\n            }\n        }\n\
    \    }\n    return min;\n}\n\nfunction compare(a, b){\n    return a - b;\n}",
  "  var result = [];\n  var visited = [];\n  var dfs = function(i, j){\n    if(visited[i]\
    \ || visited[j]) return;\n    visited[i] = true;\n    visited[j] = true;\n   \
    \ result.push(grid[i][j]);\n    for(var ii = i - 1; ii >= 0; ii--){\n      if(grid[ii][j]\
    \ < grid[i][j]){\n        dfs(ii, j);\n      }\n    }\n    for(var jj = j + 1;\
    \ jj < grid[0].length; jj++){\n      if(grid[i][jj] < grid[i][j]){\n        dfs(i,\
    \ jj);\n      }\n    }\n  }\n  for(var i = 0; i < grid.length; i++){\n    for(var\
    \ j = 0; j < grid[0].length; j++){\n      if(!visited[i] && !visited[j]){\n  \
    \      dfs(i, j);\n      }\n    }\n  }\n  return result;\n}\n", "    var i, j,\
    \ min = grid[0][0], min_i = 0, min_j = 0;\n    for(i = 0; i < grid.length; i++){\n\
    \        for(j = 0; j < grid[i].length; j++){\n            if(grid[i][j] < min){\n\
    \                min = grid[i][j];\n                min_i = i;\n             \
    \   min_j = j;\n            }\n        }\n    }\n    var lst = [];\n    var lst_i\
    \ = min_i, lst_j = min_j;\n    for(i = 0; i < k; i++){\n        lst.push(grid[lst_i][lst_j]);\n\
    \        lst_i = Math.floor(lst_i / grid[0].length);\n        lst_j = Math.floor(lst_j\
    \ / grid.length);\n    }\n    return lst;\n}\n", "    var n = grid.length;\n \
    \   var m = grid[0].length;\n    var dp = [];\n    for(var i = 0; i < n; i++){\n\
    \        dp[i] = [];\n        for(var j = 0; j < m; j++){\n            dp[i][j]\
    \ = grid[i][j];\n        }\n    }\n    var dp_len = dp.length;\n    var dp_len_m\
    \ = dp_len - 1;\n    var dp_len_n = dp_len - 2;\n    for(var i = 0; i < dp_len;\
    \ i++){\n        for(var j = 0; j < dp_len; j++){\n            if(i == 0 && j\
    \ == 0){\n                dp[i][j] = grid[i][j];\n            }\n            else\
    \ if(i == 0 && j == 1){\n                dp[i][j] = Math.min(dp[i][j], dp[i][j\
    \ - 1]);\n            }\n            else if(i == 0 && j == dp_len_m){\n     \
    \           dp[i][j] = Math.min(dp[i][j], dp[i][j + 1]);\n            }\n    \
    \        else if(i == 1 && j == 0){\n                dp[i][j] = Math.min(dp[i][j],\
    \ dp[i - 1][j]);\n            }\n            else if(i == 1 && j == 1){\n    \
    \            dp[i][j] = Math.min(dp[i][j], dp[i - 1][j]);\n            }\n   \
    \         else if(i == 1 && j == dp_len_m){\n                dp[i][j] = Math.min(dp[i][j],\
    \ dp[i - 1][j]);\n            }\n            else if(i == dp_len_n && j == 0){\n\
    \                dp[i][j] = Math.min(dp[i][j], dp[i + 1][j]);\n            }\n\
    \            else if(i == dp_len_n && j == 1){\n                dp[i][j] = Math.min(",
  "    var result = [];\n    var dp = [];\n    var dp_i = [];\n    var dp_j = [];\n\
    \    var dp_k = [];\n    var dp_l = [];\n    var dp_m = [];\n    var dp_n = [];\n\
    \    var dp_o = [];\n    var dp_p = [];\n    var dp_q = [];\n    var dp_r = [];\n\
    \    var dp_s = [];\n    var dp_t = [];\n    var dp_u = [];\n    var dp_v = [];\n\
    \    var dp_w = [];\n    var dp_x = [];\n    var dp_y = [];\n    var dp_z = [];\n\
    \    var dp_a = [];\n    var dp_b = [];\n    var dp_c = [];\n    var dp_d = [];\n\
    \    var dp_e = [];\n    var dp_f = [];\n    var dp_g = [];\n    var dp_h = [];\n\
    \    var dp_i = [];\n    var dp_j = [];\n    var dp_k = [];\n    var dp_l = [];\n\
    \    var dp_m = [];\n    var dp_n = [];\n    var dp_o = [];\n    var dp_p = [];\n\
    \    var dp_q = [];\n    var dp_r = [];\n    var dp_s = [];\n    var dp_t = [];\n\
    \    var dp_u = [];\n    var dp_v = [];\n    var dp_w = [];\n    var dp_x = [];\n\
    \    var dp_y = [];\n    var dp_z = [];\n    var dp_a = [];\n    var dp_b = [];\n\
    \    var dp_c = [];\n    var dp_d = [];\n    var dp_e = [];\n    var dp_f = [];\n\
    \    var dp_g = [];\n    var dp_h = [];\n    var dp_i = [];\n    var dp_j = [];\n\
    \    var dp_k = [];\n    var dp", "    var len = grid.length;\n    var i, j, min\
    \ = [], min_i, min_j;\n    for(i = 0; i < len; i++){\n        min_i = i;\n   \
    \     for(j = 0; j < len; j++){\n            if(i == j){\n                min_j\
    \ = j;\n            }\n            if(grid[i][j] < grid[min_i][min_j]){\n    \
    \            min_i = i;\n                min_j = j;\n            }\n        }\n\
    \        min.push(grid[min_i][min_j]);\n    }\n    if(k > min.length){\n     \
    \   return [];\n    }\n    var lst = [];\n    for(i = 0; i < k; i++){\n      \
    \  lst.push(min[i]);\n    }\n    return lst;\n}\n", "    var i, j, len = grid.length,\n\
    \        n = len - 1,\n        m = n - 1,\n        result = [],\n        visited\
    \ = [];\n    \n    for(i = 0; i < len; i++){\n        visited[i] = [];\n     \
    \   for(j = 0; j < len; j++){\n            visited[i][j] = false;\n        }\n\
    \    }\n    \n    visited[0][0] = true;\n    \n    for(i = 0; i < len; i++){\n\
    \        for(j = 0; j < len; j++){\n            if(visited[i][j] === false){\n\
    \                if(i > 0 && visited[i - 1][j] === true){\n                  \
    \  visited[i][j] = true;\n                    result.push(grid[i][j]);\n     \
    \           }\n                if(j > 0 && visited[i][j - 1] === true){\n    \
    \                visited[i][j] = true;\n                    result.push(grid[i][j]);\n\
    \                }\n                if(i > 0 && j > 0 && visited[i - 1][j - 1]\
    \ === true){\n                    visited[i][j] = true;\n                    result.push(grid[i][j]);\n\
    \                }\n                if(i > 0 && j < n && visited[i - 1][j + 1]\
    \ === true){\n                    visited[i][j] = true;\n                    result.push(grid[i][j]);\n\
    \                }\n                if(j < m && visited[i][j + 1] === true){\n\
    \                    visited[i][j] = true;\n                    result.push(grid[i][j]);\n\
    \                }\n                if(i < n && j < m && visited[i + 1][j + 1]\
    \ === true){\n                    visited[i][j] = true;\n                    result.push(grid[i][j]);\n\
    \                }\n                if(i < n && j > 0 && visited[i + 1][j - 1]\
    \ === true){\n                    visited[i][j] = true;\n                    result.push(grid[i][j]);\n\
    \                }\n            }\n        }\n", "    var result = [];\n    var\
    \ dp = [];\n    var dp_len = [];\n    var dp_len_len = [];\n    var dp_len_len_len\
    \ = [];\n    var dp_len_len_len_len = [];\n    var dp_len_len_len_len_len = [];\n\
    \    var dp_len_len_len_len_len_len = [];\n    var dp_len_len_len_len_len_len_len\
    \ = [];\n    var dp_len_len_len_len_len_len_len_len = [];\n    var dp_len_len_len_len_len_len_len_len_len\
    \ = [];\n    var dp_len_len_len_len_len_len_len_len_len_len = [];\n    var dp_len_len_len_len_len_len_len_len_len_len_len\
    \ = [];\n    var dp_len_len_len_len_len_len_len_len_len_len_len_len = [];\n  \
    \  var dp_len_len_len_len_len_len_len_len_len_len_len_len_len = [];\n    var dp_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = [];\n    var dp_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = [];\n    var dp_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = [];\n    var dp_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = [];\n    var dp_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = [];\n    var dp_len_len_len_len_len_len_len_len_len_len_len_len_len_", " \
    \   var dp = [];\n    for(var i = 0; i < grid.length; i++){\n        dp[i] = [];\n\
    \        for(var j = 0; j < grid[i].length; j++){\n            dp[i][j] = grid[i][j];\n\
    \        }\n    }\n    for(var i = 0; i < grid.length; i++){\n        for(var\
    \ j = 0; j < grid[i].length; j++){\n            for(var k = 0; k < grid[i].length;\
    \ k++){\n                if(i > 0 && j > 0 && grid[i][j] < grid[i-1][j-1]){\n\
    \                    dp[i][j] = Math.min(dp[i][j], dp[i-1][j-1]);\n          \
    \      }\n                if(i > 0 && grid[i][j] < grid[i-1][j]){\n          \
    \          dp[i][j] = Math.min(dp[i][j], dp[i-1][j]);\n                }\n   \
    \             if(j > 0 && grid[i][j] < grid[i][j-1]){\n                    dp[i][j]\
    \ = Math.min(dp[i][j], dp[i][j-1]);\n                }\n            }\n      \
    \  }\n    }\n    return dp[grid.length-1][grid[0].length-1];\n}\n", "    var i,\
    \ j, lst = [],\n        n = grid.length,\n        m = grid[0].length,\n      \
    \  visited = [],\n        min = Infinity,\n        min_i = -1,\n        min_j\
    \ = -1;\n    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n      \
    \      if(visited[i] || visited[j]) continue;\n            lst.push(grid[i][j]);\n\
    \            visited[i] = visited[j] = true;\n            if(lst.length === k){\n\
    \                if(lst.sort(function(a, b){return a - b}) < min){\n         \
    \           min = lst.sort(function(a, b){return a - b});\n                  \
    \  min_i = i;\n                    min_j = j;\n                }\n           \
    \     lst = [];\n            }\n        }\n    }\n    return [min_i, min_j];\n\
    }\n", "    var i, j, min, min_i, min_j, min_val;\n    var lst = [];\n    var lst_i\
    \ = [];\n    var lst_j = [];\n    var lst_val = [];\n    var lst_i_len = 0;\n\
    \    var lst_j_len = 0;\n    var lst_val_len = 0;\n    \n    for(i = 0; i < grid.length;\
    \ i++){\n        for(j = 0; j < grid[i].length; j++){\n            lst.push(grid[i][j]);\n\
    \            lst_i.push(i);\n            lst_j.push(j);\n            lst_val.push(grid[i][j]);\n\
    \            lst_i_len++;\n            lst_j_len++;\n            lst_val_len++;\n\
    \        }\n    }\n    \n    min = lst[0];\n    min_i = 0;\n    min_j = 0;\n \
    \   min_val = lst[0];\n    \n    for(i = 1; i < lst_i_len; i++){\n        if(lst[i]\
    \ < min){\n            min = lst[i];\n            min_i = lst_i[i];\n        \
    \    min_j = lst_j[i];\n            min_val = lst_val[i];\n        }\n    }\n\
    \    \n    for(i = 0; i < lst_i_len; i++){\n        for(j = 0; j < lst_j_len;\
    \ j++){\n            if(lst_i[i] == min_i && lst_j[j] == min_j){\n           \
    \     lst[i] = lst_val[i];\n                lst_i[i] = min_i;\n              \
    \  lst_j[i] = min_j;\n                lst_val[i] = min_val;\n                lst_i_len--;\n\
    \                lst_j_len--;\n                lst_val_len--;\n            }\n\
    \        }\n    }\n    \n    for(i = 0", "    var result = [];\n    var dp = [];\n\
    \    var visited = [];\n    var i, j;\n    \n    for(i = 0; i < grid.length; i++){\n\
    \        for(j = 0; j < grid[i].length; j++){\n            dp[i][j] = grid[i][j];\n\
    \        }\n    }\n    \n    for(i = 0; i < grid.length; i++){\n        for(j\
    \ = 0; j < grid[i].length; j++){\n            if(visited[i][j] == false){\n  \
    \              visited[i][j] = true;\n                if(k == 1){\n          \
    \          result.push(dp[i][j]);\n                    break;\n              \
    \  }\n                \n                var min = Infinity;\n                var\
    \ min_i = -1;\n                var min_j = -1;\n                \n           \
    \     for(var m = 0; m < 4; m++){\n                    var n = i + dx[m];\n  \
    \                  var o = j + dy[m];\n                    \n                \
    \    if(n >= 0 && n < grid.length && o >= 0 && o < grid[n].length && visited[n][o]\
    \ == false){\n                        var val = dp[i][j] + grid[n][o];\n     \
    \                   if(val < min){\n                            min = val;\n \
    \                           min_i = n;\n                            min_j = o;\n\
    \                        }\n                    }\n                }\n       \
    \         \n                if(min_i != -1){\n                    dp[min_i][min_j]\
    \ = min;\n                    visited[min_i][min_j] = true;\n                }\n\
    \            }\n        }\n    }\n    \n    return result;\n}\n", "    var i,\
    \ j, lst = [],\n        n = grid.length,\n        m = n * n;\n    for(i = 0; i\
    \ < n; i++){\n        for(j = 0; j < n; j++){\n            lst.push(grid[i][j]);\n\
    \        }\n    }\n    for(i = 1; i <= k; i++){\n        for(j = 0; j < n; j++){\n\
    \            lst.sort(function(a, b){\n                return a - b;\n       \
    \     });\n        }\n    }\n    return lst;\n}\n", "    var len = grid.length;\n\
    \    var result = [];\n    var visited = [];\n    var dfs = function(i, j){\n\
    \        if(visited[i] || visited[j]) return;\n        visited[i] = true;\n  \
    \      visited[j] = true;\n        if(i == len - 1 && j == len - 1){\n       \
    \     result.push(grid[i][j]);\n            return;\n        }\n        if(i <\
    \ len - 1 && grid[i + 1][j] < grid[i][j]){\n            dfs(i + 1, j);\n     \
    \   }\n        if(j < len - 1 && grid[i][j + 1] < grid[i][j]){\n            dfs(i,\
    \ j + 1);\n        }\n    }\n    for(var i = 0; i < len; i++){\n        for(var\
    \ j = 0; j < len; j++){\n            if(i == 0 && j == 0){\n                dfs(i,\
    \ j);\n            }\n        }\n    }\n    return result;\n}\n", "    var n =\
    \ grid.length;\n    var m = grid[0].length;\n    var dp = [];\n    for(var i =\
    \ 0; i < n; i++){\n        dp[i] = [];\n        for(var j = 0; j < m; j++){\n\
    \            dp[i][j] = grid[i][j];\n        }\n    }\n    var min = dp[0][0];\n\
    \    for(var i = 0; i < n; i++){\n        for(var j = 0; j < m; j++){\n      \
    \      for(var l = 0; l < k; l++){\n                if(i - 1 >= 0 && j - 1 >=\
    \ 0){\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j - 1]);\n\
    \                }\n                if(i - 1 >= 0){\n                    dp[i][j]\
    \ = Math.min(dp[i][j], dp[i - 1][j]);\n                }\n                if(j\
    \ - 1 >= 0){\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1]);\n\
    \                }\n            }\n            min = Math.min(min, dp[i][j]);\n\
    \        }\n    }\n    return dp[n - 1][m - 1];\n}\n", "    var i, j, min = grid[0][0],\
    \ min_i = 0, min_j = 0;\n    for(i = 0; i < grid.length; i++){\n        for(j\
    \ = 0; j < grid[i].length; j++){\n            if(grid[i][j] < min){\n        \
    \        min = grid[i][j];\n                min_i = i;\n                min_j\
    \ = j;\n            }\n        }\n    }\n    var lst = [];\n    var lst_i = 0;\n\
    \    var lst_j = 0;\n    var lst_min = 0;\n    var lst_min_i = 0;\n    var lst_min_j\
    \ = 0;\n    var lst_min_k = 0;\n    var lst_min_l = 0;\n    var lst_min_m = 0;\n\
    \    var lst_min_n = 0;\n    var lst_min_o = 0;\n    var lst_min_p = 0;\n    var\
    \ lst_min_q = 0;\n    var lst_min_r = 0;\n    var lst_min_s = 0;\n    var lst_min_t\
    \ = 0;\n    var lst_min_u = 0;\n    var lst_min_v = 0;\n    var lst_min_w = 0;\n\
    \    var lst_min_x = 0;\n    var lst_min_y = 0;\n    var lst_min_z = 0;\n    var\
    \ lst_min_aa = 0;\n    var lst_min_bb = 0;\n    var lst_min_cc = 0;\n    var lst_min_dd\
    \ = 0;\n    var lst_min_ee = 0;\n    var lst_min_ff = 0;\n    var lst_min_gg =\
    \ 0;\n    var lst_min_hh = 0;\n    var lst_min_ii = 0;\n    var lst_min_jj = 0;\n\
    \    var lst_min_kk = 0;\n    var lst_min_ll = 0;\n    var lst", "    var i, j,\
    \ lst = [],\n        n = grid.length,\n        m = grid[0].length,\n        visited\
    \ = [],\n        min = Infinity;\n\n    for(i = 0; i < n; i++){\n        for(j\
    \ = 0; j < m; j++){\n            if(!visited[i][j]){\n                visited[i][j]\
    \ = true;\n                lst.push(grid[i][j]);\n                if(lst.length\
    \ === k){\n                    min = Math.min(min, lst.sort(function(a, b){return\
    \ a - b;}));\n                    lst = [];\n                }\n            }\n\
    \        }\n    }\n\n    return min;\n}\n\nminPath([[1, 2, 3], [4, 5, 6], [7,\
    \ 8, 9]], 3);", "    var i, j, min = Infinity, min_i = 0, min_j = 0;\n    var\
    \ lst = [];\n    for(i = 0; i < grid.length; i++){\n        for(j = 0; j < grid[i].length;\
    \ j++){\n            lst.push(grid[i][j]);\n        }\n    }\n    for(i = 0; i\
    \ < lst.length; i++){\n        for(j = 0; j < lst.length; j++){\n            if(i\
    \ != j && lst[i] < lst[j]){\n                if(min > lst[i] + lst[j]){\n    \
    \                min = lst[i] + lst[j];\n                    min_i = i;\n    \
    \                min_j = j;\n                }\n            }\n        }\n   \
    \ }\n    return lst.slice(min_i - k + 1, min_i + 1).concat(lst.slice(min_j - k\
    \ + 1, min_j + 1));\n}\n", "    var i, j, lst = [],\n        n = grid.length,\n\
    \        m = grid[0].length,\n        path = [],\n        min = Infinity;\n\n\
    \    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n            if(grid[i][j]\
    \ === 0){\n                path.push(grid[i][j]);\n                lst.push(grid[i][j]);\n\
    \            }\n        }\n    }\n\n    for(i = 0; i < k; i++){\n        min =\
    \ Math.min(min, lst.indexOf(path[i]));\n        lst = lst.sort(function(a, b){\n\
    \            return a - b;\n        });\n    }\n\n    return lst;\n}\n", "   \
    \ var i, j, min = [],\n        n = grid.length,\n        m = grid[0].length,\n\
    \        visited = [],\n        path = [];\n\n    for(i = 0; i < n; i++){\n  \
    \      for(j = 0; j < m; j++){\n            visited[i * m + j] = false;\n    \
    \    }\n    }\n\n    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n\
    \            if(!visited[i * m + j] && grid[i][j] === k){\n                visited[i\
    \ * m + j] = true;\n                path.push(grid[i][j]);\n                min.push(grid[i][j]);\n\
    \                dfs(grid, i, j, k, visited, path);\n                path.pop();\n\
    \            }\n        }\n    }\n\n    return min;\n}\n\nfunction dfs(grid, i,\
    \ j, k, visited, path){\n    var n = grid.length,\n        m = grid[0].length,\n\
    \        i_new, j_new,\n        i_old, j_old,\n        min = Infinity;\n\n   \
    \ for(i_new = i - 1; i_new <= i + 1; i_new++){\n        for(j_new = j - 1; j_new\
    \ <= j + 1; j_new++){\n            if(i_new >= 0 && i_new < n && j_new >= 0 &&\
    \ j_new < m && !visited[i_new * m + j_new] && grid[i_new][j_new] !== k){\n   \
    \             visited[i_new * m + j_new] = true;\n                path.push(grid[i_new][j_new]);\n\
    \                min = Math.min(min, grid[i_new][j_new]);\n                dfs(grid,\
    \ i_new, j_new, k, visited, path);\n                path.pop();\n            }\n\
    \        }\n    }\n}", "    var result = [];\n    var row = grid.length;\n   \
    \ var col = grid[0].length;\n    var visited = [];\n    var dfs = function(i,\
    \ j){\n        if(i < 0 || i >= row || j < 0 || j >= col || visited[i] || grid[i][j]\
    \ === 0) return;\n        visited[i] = true;\n        result.push(grid[i][j]);\n\
    \        for(var r = 0; r < 4; r++){\n            var nr = i + dr[r];\n      \
    \      var nc = j + dc[r];\n            if(nr >= 0 && nr < row && nc >= 0 && nc\
    \ < col && !visited[nr] && grid[nr][nc] !== 0){\n                dfs(nr, nc);\n\
    \            }\n        }\n    }\n    for(var i = 0; i < row; i++){\n        for(var\
    \ j = 0; j < col; j++){\n            if(grid[i][j] === 0) continue;\n        \
    \    visited[i] = false;\n            dfs(i, j);\n        }\n    }\n    return\
    \ result;\n}\n", "    var i, j, len = grid.length,\n        min = [],\n      \
    \  min_index = 0,\n        min_len = 0,\n        min_i = 0,\n        min_j = 0;\n\
    \    \n    for(i = 0; i < len; i++){\n        for(j = 0; j < len; j++){\n    \
    \        if(grid[i][j] === 0){\n                continue;\n            }\n   \
    \         \n            min_len = min_len + 1;\n            min[min_len - 1] =\
    \ grid[i][j];\n            \n            if(min_len === k){\n                if(min_i\
    \ === i && min_j === j){\n                    continue;\n                }\n \
    \               \n                if(min_i === i){\n                    min_i\
    \ = j;\n                    min_j = i;\n                }else if(min_j === i){\n\
    \                    min_i = j;\n                    min_j = i;\n            \
    \    }else if(min_i === j){\n                    min_i = i;\n                \
    \    min_j = j;\n                }\n                \n                min_index\
    \ = min_len - 1;\n            }\n        }\n    }\n    \n    return min.slice(0,\
    \ min_len);\n}\n", "    var i, j, lst = [],\n        n = grid.length,\n      \
    \  m = n * n,\n        visited = [],\n        min = m;\n\n    for(i = 0; i < n;\
    \ i++){\n        lst[i] = grid[i][0];\n        visited[i] = false;\n    }\n\n\
    \    for(i = 0; i < n; i++){\n        for(j = 1; j < n; j++){\n            if(!visited[i\
    \ + j] && grid[i][j] < lst[i + j]){\n                lst[i + j] = grid[i][j];\n\
    \            }\n        }\n    }\n\n    for(i = 0; i < n; i++){\n        for(j\
    \ = 1; j < n; j++){\n            if(!visited[i + j] && grid[i][j] < lst[i + j]){\n\
    \                lst[i + j] = grid[i][j];\n            }\n        }\n    }\n\n\
    \    for(i = 0; i < n; i++){\n        for(j = 1; j < n; j++){\n            if(!visited[i\
    \ + j] && grid[i][j] < lst[i + j]){\n                lst[i + j] = grid[i][j];\n\
    \            }\n        }\n    }\n\n    for(i = 0; i < n; i++){\n        for(j\
    \ = 1; j < n; j++){\n            if(!visited[i + j] && grid[i][j] < lst[i + j]){\n\
    \                lst[i + j] = grid[i][j];\n            }\n        }\n    }\n\n\
    \    for(i = 0; i < n; i++){\n        for(j = 1; j < n; j++){\n            if(!visited[i\
    \ + j] && grid[i][j] < lst[i + j]){\n                lst[i + j] = grid[i][j];\n\
    \            }\n        }\n    }\n\n    for(i = 0; i < n; i++){", "    var i,\
    \ j, min = Infinity, min_i = 0, min_j = 0, min_val = 0, min_val_i = 0, min_val_j\
    \ = 0;\n    var lst = [];\n    for(i = 0; i < grid.length; i++){\n        for(j\
    \ = 0; j < grid[i].length; j++){\n            lst.push(grid[i][j]);\n        }\n\
    \    }\n    for(i = 0; i < lst.length; i++){\n        for(j = 0; j < lst.length;\
    \ j++){\n            if(i == j){\n                continue;\n            }\n \
    \           if(lst[i] < lst[j] && i < j){\n                if(min > lst[j] - lst[i]){\n\
    \                    min = lst[j] - lst[i];\n                    min_i = i;\n\
    \                    min_j = j;\n                    min_val = lst[j];\n     \
    \               min_val_i = i;\n                    min_val_j = j;\n         \
    \       }\n            }\n        }\n    }\n    return [min_i, min_j, min_val,\
    \ min_val_i, min_val_j];\n}\n", "    var i, j, lst, len, min, min_len, min_lst,\
    \ min_i, min_j;\n    \n    lst = [];\n    len = grid.length;\n    for(i = 0; i\
    \ < len; i++){\n        lst.push([]);\n        for(j = 0; j < len; j++){\n   \
    \         lst[i].push(grid[i][j]);\n        }\n    }\n    \n    min_len = len;\n\
    \    min_lst = lst;\n    min_i = 0;\n    min_j = 0;\n    \n    for(i = 0; i <\
    \ len; i++){\n        for(j = 0; j < len; j++){\n            if(i == j){\n   \
    \             continue;\n            }\n            \n            if(lst[i][j]\
    \ < lst[i][min_j]){\n                min_j = j;\n            }\n            \n\
    \            if(lst[i][j] < lst[min_i][min_j]){\n                min_i = i;\n\
    \                min_j = j;\n            }\n        }\n    }\n    \n    if(k >\
    \ min_len){\n        return [];\n    }\n    \n    if(k == min_len){\n        return\
    \ lst[min_i];\n    }\n    \n    for(i = 0; i < len; i++){\n        if(lst[min_i][min_j]\
    \ < lst[i][min_j]){\n            min_i = i;\n        }\n    }\n    \n    for(j\
    \ = 0; j < len; j++){\n        if(lst[min_i][min_j] < lst[min_i][j]){\n      \
    \      min_j = j;\n        }\n    }\n    \n    if(k == min_len - 1){\n       \
    \ return [lst[min_i][min_j]];\n    }\n    \n    return [lst[min_i][min_j], lst[min_i][min_j]];\n\
    }\n", "    var result = [];\n    var visited = [];\n    var dfs = function(i,\
    \ j){\n        if(visited[i] || visited[j]){\n            return;\n        }\n\
    \        visited[i] = true;\n        visited[j] = true;\n        result.push(grid[i][j]);\n\
    \        if(i > 0 && grid[i - 1][j] < grid[i][j]){\n            dfs(i - 1, j);\n\
    \        }\n        if(j > 0 && grid[i][j - 1] < grid[i][j]){\n            dfs(i,\
    \ j - 1);\n        }\n        if(i < grid.length - 1 && grid[i + 1][j] < grid[i][j]){\n\
    \            dfs(i + 1, j);\n        }\n        if(j < grid[i].length - 1 && grid[i][j\
    \ + 1] < grid[i][j]){\n            dfs(i, j + 1);\n        }\n    }\n    for(var\
    \ i = 0; i < grid.length; i++){\n        for(var j = 0; j < grid[i].length; j++){\n\
    \            if(!visited[i] && !visited[j]){\n                dfs(i, j);\n   \
    \         }\n        }\n    }\n    return result;\n}\n", "    var dp = [];\n \
    \   for(var i = 0; i < grid.length; i++){\n        dp[i] = [];\n        for(var\
    \ j = 0; j < grid[i].length; j++){\n            dp[i][j] = grid[i][j];\n     \
    \   }\n    }\n    for(var i = 0; i < grid.length; i++){\n        for(var j = 0;\
    \ j < grid[i].length; j++){\n            for(var l = 0; l < grid.length; l++){\n\
    \                for(var m = 0; m < grid[l].length; m++){\n                  \
    \  if(i == l && j == m){\n                        continue;\n                \
    \    }\n                    if(dp[i][j] < dp[l][m]){\n                       \
    \ dp[i][j] = dp[l][m];\n                    }\n                }\n           \
    \ }\n        }\n    }\n    var result = [];\n    for(var i = 0; i < grid.length;\
    \ i++){\n        for(var j = 0; j < grid[i].length; j++){\n            result.push(dp[i][j]);\n\
    \        }\n    }\n    return result;\n}\n", "    var i, j, len, min, min_i, min_j,\
    \ min_len, min_lst, lst;\n    \n    len = grid.length;\n    min_len = len * len;\n\
    \    min = Infinity;\n    \n    for(i = 0; i < len; i++){\n        lst = [];\n\
    \        \n        for(j = 0; j < len; j++){\n            if(i === j){\n     \
    \           lst.push(grid[i][j]);\n            }else{\n                lst.push(grid[i][j]\
    \ + grid[i][j-1] + grid[i][j+1] + grid[i-1][j] + grid[i+1][j]);\n            }\n\
    \        }\n        \n        lst.sort(function(a, b){\n            return a -\
    \ b;\n        });\n        \n        if(lst.length < k){\n            continue;\n\
    \        }\n        \n        if(lst.length === k){\n            if(lst[0] < min){\n\
    \                min = lst[0];\n                min_i = i;\n                min_j\
    \ = j;\n                min_lst = lst;\n            }\n        }else if(lst.length\
    \ > k){\n            if(lst[k] < min){\n                min = lst[k];\n      \
    \          min_i = i;\n                min_j = j;\n                min_lst = lst;\n\
    \            }\n        }\n    }\n    \n    if(min === min_len){\n        return\
    \ min_lst;\n    }else{\n        return [];\n    }\n}\n", "    var i, j, len =\
    \ grid.length,\n        result = [],\n        visited = [],\n        min = Infinity,\n\
    \        min_i = -1,\n        min_j = -1;\n    \n    for(i = 0; i < len; i++){\n\
    \        visited[i] = false;\n    }\n    \n    for(i = 0; i < len; i++){\n   \
    \     for(j = 0; j < len; j++){\n            if(!visited[i] && !visited[j] &&\
    \ grid[i][j] <= k){\n                visited[i] = true;\n                visited[j]\
    \ = true;\n                \n                if(grid[i][j] < min){\n         \
    \           min = grid[i][j];\n                    min_i = i;\n              \
    \      min_j = j;\n                }\n            }\n        }\n    }\n    \n\
    \    for(i = 0; i < len; i++){\n        result.push(grid[min_i][min_j]);\n   \
    \ }\n    \n    return result;\n}\n", "    var result = [];\n    var dfs = function(grid,\
    \ k, i, j){\n        if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length\
    \ || grid[i][j] === undefined) return;\n        if(k === 0){\n            result.push(grid[i][j]);\n\
    \            return;\n        }\n        dfs(grid, k - 1, i - 1, j);\n       \
    \ dfs(grid, k - 1, i, j - 1);\n        dfs(grid, k - 1, i + 1, j);\n        dfs(grid,\
    \ k - 1, i, j + 1);\n    }\n    dfs(grid, k, 0, 0);\n    return result;\n}\n",
  "    var i, j, lst = [],\n        n = grid.length,\n        m = grid[0].length;\n\
    \    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n            if(i\
    \ === 0 && j === 0){\n                lst.push(grid[i][j]);\n            }else\
    \ if(i === 0){\n                lst.push(grid[i][j]);\n            }else if(j\
    \ === 0){\n                lst.push(grid[i][j]);\n            }else{\n       \
    \         lst.push(Math.min(grid[i][j], lst[lst.length - 1]));\n            }\n\
    \        }\n    }\n    return lst.slice(0, k);\n}\n", "    var i, j, min, min_i,\
    \ min_j, min_i_j;\n    var lst = [];\n    var len = grid.length;\n    var len_i\
    \ = len - 1;\n    var len_j = len - 1;\n    var len_i_j = len - 1;\n    for(i\
    \ = 0; i < len; i++){\n        for(j = 0; j < len; j++){\n            if(grid[i][j]\
    \ === 0){\n                continue;\n            }\n            lst.push(grid[i][j]);\n\
    \            if(i > 0 && grid[i - 1][j] === 0){\n                continue;\n \
    \           }\n            if(j > 0 && grid[i][j - 1] === 0){\n              \
    \  continue;\n            }\n            if(i > 0 && j > 0 && grid[i - 1][j -\
    \ 1] === 0){\n                continue;\n            }\n            if(i < len_i\
    \ && j > 0 && grid[i + 1][j - 1] === 0){\n                continue;\n        \
    \    }\n            if(i < len_i && j < len_j && grid[i + 1][j + 1] === 0){\n\
    \                continue;\n            }\n            if(i > 0 && j < len_j &&\
    \ grid[i - 1][j + 1] === 0){\n                continue;\n            }\n     \
    \       if(i < len_i && j < len_j && grid[i + 1][j + 1] === 0){\n            \
    \    continue;\n            }\n            if(i < len_i && j > 0 && grid[i + 1][j\
    \ - 1] === 0){\n                continue;\n            }\n            if(i > 0\
    \ && j < len_j && grid[i - 1][j + 1] === 0){\n                continue;\n    \
    \        }\n            if(i > 0 && j > 0 && grid[i - 1][j - 1] === 0){\n    \
    \            continue;\n            }\n            if(i < len_i && j < len_j &&\
    \ grid[i + 1][j + 1] === 0){\n                continue;\n            }\n     \
    \       if(i < len_i && j > 0 && grid[", "    var i, j, min, min_index, min_value,\
    \ min_path, min_path_length,\n        n = grid.length,\n        m = grid[0].length,\n\
    \        path = [],\n        path_length = [],\n        visited = [],\n      \
    \  visited_length = [],\n        visited_index = [],\n        visited_value =\
    \ [],\n        visited_value_length = [],\n        visited_value_index = [],\n\
    \        visited_value_value = [],\n        visited_value_value_length = [],\n\
    \        visited_value_value_index = [],\n        visited_value_value_value =\
    \ [],\n        visited_value_value_value_length = [],\n        visited_value_value_value_index\
    \ = [],\n        visited_value_value_value_value = [],\n        visited_value_value_value_value_length\
    \ = [],\n        visited_value_value_value_value_index = [],\n        visited_value_value_value_value_value\
    \ = [],\n        visited_value_value_value_value_value_length = [],\n        visited_value_value_value_value_value_index\
    \ = [],\n        visited_value_value_value_value_value_value = [],\n        visited_value_value_value_value_value_value_length\
    \ = [],\n        visited_value_value_value_value_value_value_index = [],\n   \
    \     visited_value_value_value_value_value_value_value = [],\n        visited_value_value_value_value_value_value_value_length\
    \ = [],\n        visited_value_value_value_value_value_value_value_index = [],\n\
    \        visited_value_value_value_value_value_value_value_value = [],\n     \
    \   visited_value_value_value_value_value_value_value_value_length = [],\n   \
    \     visited_value_value_value_value_value_value_value_value_index = [],\n  \
    \      visited_value_value_value_value_", "    var i, j, min = Infinity, min_i\
    \ = 0, min_j = 0;\n    for(i = 0; i < grid.length; i++){\n        for(j = 0; j\
    \ < grid[i].length; j++){\n            if(grid[i][j] < min){\n               \
    \ min = grid[i][j];\n                min_i = i;\n                min_j = j;\n\
    \            }\n        }\n    }\n    var lst = [];\n    var lst_i = [];\n   \
    \ var lst_j = [];\n    var lst_i_j = [];\n    var i_j = [];\n    var i_j_i = [];\n\
    \    var i_j_j = [];\n    var i_j_i_j = [];\n    var i_j_j_i = [];\n    var i_j_j_j\
    \ = [];\n    var i_j_i_j_i = [];\n    var i_j_j_i_j = [];\n    var i_j_i_j_j =\
    \ [];\n    var i_j_j_i_j_i = [];\n    var i_j_i_j_j_i = [];\n    var i_j_j_i_j_j\
    \ = [];\n    var i_j_i_j_j_i_j = [];\n    var i_j_j_i_j_j_i_j = [];\n    var i_j_i_j_j_i_j_i_j\
    \ = [];\n    var i_j_j_i_j_j_i_j_i_j = [];\n    var i_j_i_j_j_i_j_i_j_i_j = [];\n\
    \    var i_j_j_i_j_j_i_j_i_j_i_j = [];\n    var i_j_i_j_j_i_j_i_j_i_j_i_j = [];\n\
    \    var i_j_j_i_j_j_i_j_i_j_i_j_i_j = [];\n    var i_j_i_j_j_i_j", "    var n\
    \ = grid.length,\n        m = grid[0].length,\n        i, j,\n        lst = [],\n\
    \        min = Infinity,\n        min_i = -1,\n        min_j = -1;\n    \n   \
    \ for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n            if(grid[i][j]\
    \ === 0){\n                lst.push(grid[i][j]);\n            }\n        }\n \
    \   }\n    \n    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n  \
    \          if(grid[i][j] === 0){\n                if(lst.length === k){\n    \
    \                if(lst.sort(function(a, b){return a - b}) < lst.sort(function(a,\
    \ b){return b - a})){\n                        min = lst.length;\n           \
    \             min_i = i;\n                        min_j = j;\n               \
    \     }\n                }\n                else{\n                    lst.push(grid[i][j]);\n\
    \                    if(lst.length === k){\n                        if(lst.sort(function(a,\
    \ b){return a - b}) < lst.sort(function(a, b){return b - a})){\n             \
    \               min = lst.length;\n                            min_i = i;\n  \
    \                          min_j = j;\n                        }\n           \
    \         }\n                    lst.pop();\n                }\n            }\n\
    \        }\n    }\n    \n    return [min_i, min_j];\n}\n", "    var i, j, len,\
    \ min, min_i, min_j, min_len, min_lst, lst;\n    \n    // find the minimum path\n\
    \    for(i = 0; i < grid.length; i++){\n        for(j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] < min || min === undefined){\n            \
    \    min = grid[i][j];\n                min_i = i;\n                min_j = j;\n\
    \                min_len = 0;\n                min_lst = [];\n            }\n\
    \            \n            if(grid[i][j] === min){\n                lst = grid[i][j];\n\
    \                min_lst.push(lst);\n                \n                if(min_len\
    \ === 0){\n                    min_len = 1;\n                }\n             \
    \   \n                if(min_len === k){\n                    break;\n       \
    \         }\n            }\n        }\n    }\n    \n    // return the minimum\
    \ path\n    return min_lst;\n}\n", "    var i, j, min = Infinity, min_i = -1,\
    \ min_j = -1;\n    var lst = [];\n    for(i = 0; i < grid.length; i++){\n    \
    \    for(j = 0; j < grid[i].length; j++){\n            if(grid[i][j] < min){\n\
    \                min = grid[i][j];\n                min_i = i;\n             \
    \   min_j = j;\n            }\n            lst.push(grid[i][j]);\n        }\n\
    \    }\n    var path = [];\n    for(i = 0; i < k; i++){\n        path.push(lst[i]);\n\
    \    }\n    for(i = 0; i < k; i++){\n        for(j = 0; j < grid[min_i].length;\
    \ j++){\n            if(grid[min_i][j] < lst[i]){\n                lst[i] = grid[min_i][j];\n\
    \            }\n        }\n    }\n    for(i = 0; i < k; i++){\n        path.push(lst[i]);\n\
    \    }\n    return path;\n}\n", "    var len = grid.length;\n    var res = [];\n\
    \    var dp = [];\n    var i, j;\n    for(i = 0; i < len; i++){\n        dp[i]\
    \ = [];\n        for(j = 0; j < len; j++){\n            dp[i][j] = grid[i][j];\n\
    \        }\n    }\n    for(i = 0; i < len; i++){\n        for(j = 0; j < len;\
    \ j++){\n            if(i > 0 && j > 0){\n                dp[i][j] = Math.min(dp[i][j],\
    \ dp[i-1][j-1] + grid[i][j]);\n            }\n            if(i > 0){\n       \
    \         dp[i][j] = Math.min(dp[i][j], dp[i-1][j] + grid[i][j]);\n          \
    \  }\n            if(j > 0){\n                dp[i][j] = Math.min(dp[i][j], dp[i][j-1]\
    \ + grid[i][j]);\n            }\n        }\n    }\n    for(i = 0; i < len; i++){\n\
    \        for(j = 0; j < len; j++){\n            if(i > 0 && j > 0){\n        \
    \        if(dp[i][j] == dp[i-1][j-1] + grid[i][j]){\n                    res.push(grid[i][j]);\n\
    \                }\n            }\n            if(i > 0){\n                if(dp[i][j]\
    \ == dp[i-1][j] + grid[i][j]){\n                    res.push(grid[i][j]);\n  \
    \              }\n            }\n            if(j > 0){\n                if(dp[i][j]\
    \ == dp[i][j-1] + grid[i][j]){\n                    res.push(grid[i][j]);\n  \
    \              }\n            }\n        }\n    }\n    return res;\n}\n", "  \
    \  var i, j, min = grid[0][0], min_i = 0, min_j = 0;\n    for(i = 0; i < grid.length;\
    \ i++){\n        for(j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ < min){\n                min = grid[i][j];\n                min_i = i;\n   \
    \             min_j = j;\n            }\n        }\n    }\n    var lst = [];\n\
    \    var lst_i = [];\n    var lst_j = [];\n    var lst_i_j = [];\n    var lst_i_j_i\
    \ = [];\n    var lst_i_j_i_j = [];\n    var lst_i_j_i_j_i = [];\n    var lst_i_j_i_j_i_j\
    \ = [];\n    var lst_i_j_i_j_i_j_i = [];\n    var lst_i_j_i_j_i_j_i_j = [];\n\
    \    var lst_i_j_i_j_i_j_i_j_i = [];\n    var lst_i_j_i_j_i_j_i_j_i_j = [];\n\
    \    var lst_i_j_i_j_i_j_i_j_i_j_i = [];\n    var lst_i_j_i_j_i_j_i_j_i_j_i_j\
    \ = [];\n    var lst_i_j_i_j_i_j_i_j_i_j_i_j_i = [];\n    var lst_i_j_i_j_i_j_i_j_i_j_i_j_i_j\
    \ = [];\n    var lst_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i = [];\n    var lst_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j\
    \ = [];\n    ", "  var len = grid.length;\n  var result = [];\n  var visited =\
    \ [];\n  var min = Infinity;\n  var i, j, curr, next, min_i, min_j;\n  for(i =\
    \ 0; i < len; i++){\n    visited[i] = [];\n    for(j = 0; j < len; j++){\n   \
    \   visited[i][j] = false;\n    }\n  }\n  for(i = 0; i < len; i++){\n    for(j\
    \ = 0; j < len; j++){\n      if(grid[i][j] == k){\n        curr = grid[i][j];\n\
    \        next = [];\n        while(visited[i][j] == false){\n          next.push(grid[i][j]);\n\
    \          visited[i][j] = true;\n          i = Math.floor(i/2);\n          j\
    \ = Math.floor(j/2);\n        }\n        if(next.length < min){\n          min\
    \ = next.length;\n          min_i = i;\n          min_j = j;\n        }\n    \
    \  }\n    }\n  }\n  result.push(grid[min_i][min_j]);\n  while(visited[min_i][min_j]\
    \ == true){\n    result.push(grid[min_i][min_j]);\n    i = Math.floor(min_i/2);\n\
    \    j = Math.floor(min_j/2);\n    visited[i][j] = false;\n    min_i = i;\n  \
    \  min_j = j;\n  }\n  return result;\n}\n", "    var i, j, lst = [];\n    for(i\
    \ = 0; i < grid.length; i++){\n        for(j = 0; j < grid[i].length; j++){\n\
    \            lst.push(grid[i][j]);\n        }\n    }\n    var min = function(a,\
    \ b){\n        return a < b ? a : b;\n    };\n    var compare = function(a, b){\n\
    \        return a < b ? -1 : a > b ? 1 : 0;\n    };\n    var compare2 = function(a,\
    \ b){\n        return a < b ? 1 : a > b ? -1 : 0;\n    };\n    var compare3 =\
    \ function(a, b){\n        return a < b ? 1 : a > b ? -1 : 0;\n    };\n    var\
    \ compare4 = function(a, b){\n        return a < b ? -1 : a > b ? 1 : 0;\n   \
    \ };\n    var compare5 = function(a, b){\n        return a < b ? -1 : a > b ?\
    \ 1 : 0;\n    };\n    var compare6 = function(a, b){\n        return a < b ? 1\
    \ : a > b ? -1 : 0;\n    };\n    var compare7 = function(a, b){\n        return\
    \ a < b ? 1 : a > b ? -1 : 0;\n    };\n    var compare8 = function(a, b){\n  \
    \      return a < b ? -1 : a > b ? 1 : 0;\n    };\n    var compare9 = function(a,\
    \ b){\n        return a < b ? 1 : a > b ? -1 : 0;\n    };\n    var compare10 =\
    \ function(a, b){\n        return a < b ? -1 : a > b ? 1 : 0;\n    };\n    var\
    \ compare11 = function(a, b){\n        return a < b ? 1 : a > b ? -1 : 0;\n  \
    \  };\n    var compare12 = function(a, b){\n        return a < b ? -1 : a > b\
    \ ? 1 : 0;\n    };\n    var compare13 = function(a, b){\n        return a < b\
    \ ? 1 : a > b ? -1", "    var len = grid.length;\n    var i, j, min, min_i, min_j,\
    \ min_len;\n    var lst = [];\n    for(i = 0; i < len; i++){\n        lst[i] =\
    \ grid[i].sort();\n    }\n    for(i = 0; i < len; i++){\n        for(j = 0; j\
    \ < len; j++){\n            if(i === j){\n                continue;\n        \
    \    }\n            if(lst[i][k] < lst[j][k]){\n                min = lst[i];\n\
    \                min_i = i;\n                min_j = j;\n                min_len\
    \ = k;\n            }\n        }\n        if(min_len === k){\n            break;\n\
    \        }\n        lst[min_i][min_len] = lst[min_j][min_len];\n        lst[min_j][min_len]\
    \ = min[min_len];\n    }\n    return lst;\n}\n", "    var i, j, lst = [],\n  \
    \      N = grid.length,\n        M = grid[0].length,\n        visited = [],\n\
    \        min = [],\n        min_index = 0;\n    \n    for(i = 0; i < N; i++){\n\
    \        for(j = 0; j < M; j++){\n            if(!visited[i][j]){\n          \
    \      lst = [grid[i][j]];\n                visited[i][j] = true;\n          \
    \      min = [grid[i][j]];\n                min_index = 0;\n                dfs(grid,\
    \ i, j, k, lst, min, min_index);\n            }\n        }\n    }\n    return\
    \ min;\n}\n\nfunction dfs(grid, i, j, k, lst, min, min_index){\n    var N = grid.length,\n\
    \        M = grid[0].length,\n        visited = [],\n        min = [],\n     \
    \   min_index = 0;\n    \n    if(k === 0){\n        return;\n    }\n    \n   \
    \ if(i < 0 || i >= N || j < 0 || j >= M || visited[i][j] || lst[min_index] > grid[i][j]){\n\
    \        return;\n    }\n    \n    visited[i][j] = true;\n    lst.push(grid[i][j]);\n\
    \    min.push(grid[i][j]);\n    min_index++;\n    \n    dfs(grid, i + 1, j, k\
    \ - 1, lst, min, min_index);\n    dfs(grid, i - 1, j, k - 1, lst, min, min_index);\n\
    \    dfs(grid, i, j + 1, k - 1, lst, min, min_index);\n    dfs(grid, i, j - 1,\
    \ k - 1, lst, min, min_index);\n    \n    min.pop();\n    min_index--;\n    lst.pop();\n\
    }\n", "    var i, j, lst = [],\n        n = grid.length,\n        m = grid[0].length,\n\
    \        dp = [],\n        min = Infinity;\n    \n    for(i = 0; i < n; i++){\n\
    \        for(j = 0; j < m; j++){\n            if(grid[i][j] === 0){\n        \
    \        dp[i][j] = Infinity;\n            } else {\n                dp[i][j]\
    \ = 0;\n            }\n        }\n    }\n    \n    for(i = 0; i < n; i++){\n \
    \       for(j = 0; j < m; j++){\n            if(dp[i][j] === 0){\n           \
    \     lst.push(grid[i][j]);\n                if(k === 1){\n                  \
    \  break;\n                }\n                \n                for(var ii = 0;\
    \ ii < 4; ii++){\n                    var new_i = i + dx[ii],\n              \
    \          new_j = j + dy[ii];\n                    \n                    if(new_i\
    \ >= 0 && new_i < n && new_j >= 0 && new_j < m && grid[new_i][new_j] !== 0){\n\
    \                        dp[new_i][new_j] = Math.min(dp[new_i][new_j], dp[i][j]\
    \ + 1);\n                    }\n                }\n            }\n        }\n\
    \    }\n    \n    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n \
    \           if(dp[i][j] === 0){\n                continue;\n            }\n  \
    \          \n            if(lst.length === k){\n                break;\n     \
    \       }\n            \n            if(lst.length < k){\n                min\
    \ = Math.min(min, dp[i][j]);\n            } else {\n                if(lst[lst.length\
    \ - 1] < grid[i][j]){\n                    min = Math.min(min, dp[i][j]);\n  \
    \              }\n            }\n        }\n    }\n    \n    return lst;\n}\n",
  "    var n = grid.length;\n    var m = grid[0].length;\n    var dp = new Array(m);\n\
    \    for(var i = 0; i < m; i++){\n        dp[i] = new Array(n);\n        for(var\
    \ j = 0; j < n; j++){\n            dp[i][j] = grid[j][i];\n        }\n    }\n\
    \    var result = [];\n    var min = dp[0][0];\n    for(var i = 0; i < m; i++){\n\
    \        for(var j = 0; j < n; j++){\n            if(dp[i][j] < min){\n      \
    \          min = dp[i][j];\n                result = [i, j];\n            }\n\
    \        }\n    }\n    return result;\n}\n", "    var i, j, lst = [],\n      \
    \  n = grid.length,\n        m = grid[0].length,\n        visited = [],\n    \
    \    min = Infinity;\n\n    for(i = 0; i < n; i++){\n        for(j = 0; j < m;\
    \ j++){\n            if(visited[i] || visited[j]) continue;\n            if(grid[i][j]\
    \ < min){\n                min = grid[i][j];\n                lst = [];\n    \
    \        }\n            if(grid[i][j] === min){\n                lst.push(grid[i][j]);\n\
    \            }\n            visited[i] = visited[j] = true;\n        }\n    }\n\
    \n    if(lst.length < k){\n        return [];\n    }\n\n    for(i = 0; i < k;\
    \ i++){\n        for(j = 0; j < lst.length; j++){\n            if(lst[j] === min){\n\
    \                lst.splice(j, 1);\n                break;\n            }\n  \
    \      }\n    }\n\n    return lst;\n}\n", "    var len = grid.length;\n    var\
    \ res = [];\n    var dp = [];\n    for(var i = 0; i < len; i++){\n        dp[i]\
    \ = [];\n        for(var j = 0; j < len; j++){\n            dp[i][j] = grid[i][j];\n\
    \        }\n    }\n    for(var i = 0; i < len; i++){\n        for(var j = 0; j\
    \ < len; j++){\n            if(i == 0 && j == 0){\n                dp[i][j] =\
    \ grid[i][j];\n                continue;\n            }\n            if(i == 0){\n\
    \                dp[i][j] = Math.min(dp[i][j], dp[i][j-1]);\n                continue;\n\
    \            }\n            if(j == 0){\n                dp[i][j] = Math.min(dp[i][j],\
    \ dp[i-1][j]);\n                continue;\n            }\n            if(dp[i][j]\
    \ == dp[i-1][j] && dp[i][j] == dp[i][j-1]){\n                dp[i][j] = Math.min(dp[i][j],\
    \ dp[i-1][j-1]);\n            }\n        }\n    }\n    for(var i = 0; i < len;\
    \ i++){\n        for(var j = 0; j < len; j++){\n            if(i == 0 && j ==\
    \ 0){\n                res.push(dp[i][j]);\n                continue;\n      \
    \      }\n            if(i == 0){\n                res.push(dp[i][j]);\n     \
    \           continue;\n            }\n            if(j == 0){\n              \
    \  res.push(dp[i][j]);\n                continue;\n            }\n           \
    \ if(dp[i][j] == dp[i-1][j] && dp[i][j] == dp[i][j-1]){\n                res.push(dp[i][j]);\n\
    \            }\n        }\n    }\n    return res;\n}\n", "    var i, j, lst =\
    \ [],\n        n = grid.length,\n        m = grid[0].length;\n    for(i = 0; i\
    \ < n; i++){\n        for(j = 0; j < m; j++){\n            lst.push(grid[i][j]);\n\
    \        }\n    }\n    var dp = [],\n        len = lst.length,\n        min =\
    \ len - k + 1;\n    for(i = 0; i < len; i++){\n        dp[i] = min;\n        for(j\
    \ = 0; j < len; j++){\n            if(i == j){\n                continue;\n  \
    \          }\n            if(lst[i] < lst[j]){\n                dp[i] = Math.min(dp[i],\
    \ dp[j] + 1);\n            }\n        }\n        min = Math.min(min, dp[i]);\n\
    \    }\n    return dp;\n}\n", "    var i, j, min_path = [],\n        n = grid.length,\n\
    \        m = grid[0].length,\n        visited = [],\n        min_path_length =\
    \ k + 1;\n\n    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n   \
    \         if(visited[i] || visited[j]) continue;\n            visited[i] = visited[j]\
    \ = true;\n            if(min_path_length > grid[i][j]){\n                min_path_length\
    \ = grid[i][j];\n                min_path = [i, j];\n            }\n        }\n\
    \    }\n\n    return min_path;\n}\n", "    var rows = grid.length;\n    var cols\
    \ = grid[0].length;\n    var result = [];\n    var dp = [];\n    var dp_row =\
    \ [];\n    var dp_col = [];\n    for(var i=0; i<rows; i++){\n        dp_row[i]\
    \ = [];\n        for(var j=0; j<cols; j++){\n            dp_row[i][j] = 0;\n \
    \       }\n    }\n    for(var i=0; i<rows; i++){\n        dp_col[i] = [];\n  \
    \      for(var j=0; j<cols; j++){\n            dp_col[i][j] = 0;\n        }\n\
    \    }\n    for(var i=0; i<rows; i++){\n        for(var j=0; j<cols; j++){\n \
    \           if(grid[i][j] == 0){\n                continue;\n            }\n \
    \           dp_row[i][j] = 1;\n            dp_col[i][j] = 1;\n        }\n    }\n\
    \    for(var i=0; i<rows; i++){\n        for(var j=0; j<cols; j++){\n        \
    \    if(dp_row[i][j] == 0){\n                continue;\n            }\n      \
    \      for(var ii=0; ii<rows; ii++){\n                for(var jj=0; jj<cols; jj++){\n\
    \                    if(dp_row[ii][jj] == 0){\n                        continue;\n\
    \                    }\n                    if(i == ii && j == jj){\n        \
    \                continue;\n                    }\n                    if(i ==\
    \ ii && jj < j){\n                        continue;\n                    }\n \
    \                   if(i == ii && jj > j){\n                        continue;\n\
    \                    }\n                    if(i < ii && jj == j){\n         \
    \               continue;\n                    }\n                    if(i > ii\
    \ && jj == j){\n                        continue;\n                    }\n   \
    \                 if(i < ii && jj < j){\n                        continue;\n \
    \                   }\n                    if(i > ii && jj > j){\n           \
    \             continue;\n                    ", "    var result = [];\n    var\
    \ dp = [];\n    var dp_len = 0;\n    var dp_i = 0;\n    var dp_j = 0;\n    var\
    \ dp_val = 0;\n    var dp_len_i = 0;\n    var dp_len_j = 0;\n    var dp_len_val\
    \ = 0;\n    var dp_len_i_j = 0;\n    var dp_len_i_j_val = 0;\n    var dp_len_i_j_i\
    \ = 0;\n    var dp_len_i_j_i_val = 0;\n    var dp_len_i_j_i_i = 0;\n    var dp_len_i_j_i_i_val\
    \ = 0;\n    var dp_len_i_j_i_i_i = 0;\n    var dp_len_i_j_i_i_i_val = 0;\n   \
    \ var dp_len_i_j_i_i_i_i = 0;\n    var dp_len_i_j_i_i_i_i_val = 0;\n    var dp_len_i_j_i_i_i_i_i\
    \ = 0;\n    var dp_len_i_j_i_i_i_i_i_val = 0;\n    var dp_len_i_j_i_i_i_i_i_i\
    \ = 0;\n    var dp_len_i_j_i_i_i_i_i_i_val = 0;\n    var dp_len_i_j_i_i_i_i_i_i_i\
    \ = 0;\n    var dp_len_i_j_i_i_i_i_i_i_i_val = 0;\n    var dp_len_i_j_i_i_i_i_i_i_i_i\
    \ = 0;\n    var dp_len_i_j_i_i_i_i_i_i_i_i_val = 0;\n    var dp_len_i_", "   \
    \ var dp = [];\n    var n = grid.length;\n    var m = grid[0].length;\n    var\
    \ i, j, p;\n    for(i = 0; i < n; i++){\n        dp[i] = [];\n        for(j =\
    \ 0; j < m; j++){\n            dp[i][j] = grid[i][j];\n        }\n    }\n    for(i\
    \ = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n            if(i > 0 &&\
    \ j > 0){\n                if(dp[i - 1][j] < dp[i][j - 1]){\n                \
    \    dp[i][j] = dp[i - 1][j];\n                }else{\n                    dp[i][j]\
    \ = dp[i][j - 1];\n                }\n            }else if(i > 0){\n         \
    \       dp[i][j] = dp[i - 1][j];\n            }else if(j > 0){\n             \
    \   dp[i][j] = dp[i][j - 1];\n            }\n        }\n    }\n    var result\
    \ = [];\n    for(i = 0; i < k; i++){\n        p = dp[n - 1][m - 1];\n        for(j\
    \ = m - 1; j >= 0; j--){\n            if(dp[n - 1][j] < p){\n                p\
    \ = dp[n - 1][j];\n            }\n        }\n        result.push(p);\n       \
    \ for(j = m - 1; j >= 0; j--){\n            if(dp[j][n - 1] < p){\n          \
    \      p = dp[j][n - 1];\n            }\n        }\n        result.push(p);\n\
    \    }\n    return result;\n}\n", "    var i, j, min = Infinity, min_i = -1, min_j\
    \ = -1;\n    for(i = 0; i < grid.length; i++){\n        for(j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] < min){\n                min = grid[i][j];\n\
    \                min_i = i;\n                min_j = j;\n            }\n     \
    \   }\n    }\n    var lst = [];\n    for(i = 0; i < grid.length; i++){\n     \
    \   for(j = 0; j < grid[i].length; j++){\n            if(i == min_i && j == min_j){\n\
    \                lst.push(grid[i][j]);\n            }\n        }\n    }\n    if(lst.length\
    \ < k){\n        return [];\n    }\n    return lst.sort(function(a, b){\n    \
    \    return a - b;\n    });\n}\n", "    var i, j, lst = [],\n        n = grid.length,\n\
    \        m = grid[0].length,\n        dp = new Array(n * m);\n    \n    for(i\
    \ = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n            dp[i * m + j]\
    \ = grid[i][j];\n        }\n    }\n    \n    for(i = 0; i < n; i++){\n       \
    \ for(j = 0; j < m; j++){\n            if(i > 0 && dp[i * m + j] < dp[(i - 1)\
    \ * m + j]){\n                dp[i * m + j] = dp[(i - 1) * m + j];\n         \
    \   }\n            if(j > 0 && dp[i * m + j] < dp[i * m + (j - 1)]){\n       \
    \         dp[i * m + j] = dp[i * m + (j - 1)];\n            }\n            if(i\
    \ > 0 && j > 0 && dp[i * m + j] < dp[(i - 1) * m + (j - 1)]){\n              \
    \  dp[i * m + j] = dp[(i - 1) * m + (j - 1)];\n            }\n        }\n    }\n\
    \    \n    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n        \
    \    lst.push(dp[i * m + j]);\n        }\n    }\n    \n    return lst.sort(function(a,\
    \ b){\n        return a - b;\n    });\n}\n", "    var i, j, min, min_index, min_value,\
    \ min_path, min_path_index, min_path_value;\n    var lst = [];\n    var lst_index\
    \ = [];\n    var lst_value = [];\n    var lst_path = [];\n    var lst_path_index\
    \ = [];\n    var lst_path_value = [];\n    var lst_path_length = 0;\n    \n  \
    \  for(i = 0; i < grid.length; i++){\n        for(j = 0; j < grid[i].length; j++){\n\
    \            lst.push(grid[i][j]);\n            lst_index.push(i);\n         \
    \   lst_value.push(j);\n            lst_path.push(i);\n            lst_path_index.push(j);\n\
    \            lst_path_value.push(grid[i][j]);\n            lst_path_length = 0;\n\
    \        }\n    }\n    \n    min = lst[0];\n    min_index = 0;\n    min_path =\
    \ lst_path[0];\n    min_path_index = lst_path_index[0];\n    min_path_value =\
    \ lst_path_value[0];\n    \n    for(i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ < min){\n            min = lst[i];\n            min_index = i;\n           \
    \ min_path = lst_path[i];\n            min_path_index = lst_path_index[i];\n \
    \           min_path_value = lst_path_value[i];\n        }\n    }\n    \n    for(i\
    \ = 0; i < lst_path_length; i++){\n        if(lst_path_index[i] == min_path_index){\n\
    \            lst_path_value[i] = min_path_value;\n        }\n    }\n    \n   \
    \ for(i = 0; i < lst_path_length; i++){\n        if(lst_path_value[i] == min_path_value){\n\
    \            lst_", "    var n = grid.length;\n    var m = grid[0].length;\n \
    \   var dp = new Array(n);\n    for(var i = 0; i < n; i++){\n        dp[i] = new\
    \ Array(m);\n        for(var j = 0; j < m; j++){\n            dp[i][j] = grid[i][j];\n\
    \        }\n    }\n    var min = dp[0][0];\n    for(var i = 0; i < n; i++){\n\
    \        for(var j = 0; j < m; j++){\n            if(i > 0 && j > 0){\n      \
    \          dp[i][j] = Math.min(dp[i][j], dp[i-1][j] + dp[i][j-1]);\n         \
    \   }\n            if(i > 0){\n                dp[i][j] = Math.min(dp[i][j], dp[i-1][j]);\n\
    \            }\n            if(j > 0){\n                dp[i][j] = Math.min(dp[i][j],\
    \ dp[i][j-1]);\n            }\n            if(i > 0 && j > 0){\n             \
    \   dp[i][j] = Math.min(dp[i][j], dp[i-1][j-1]);\n            }\n            min\
    \ = Math.min(min, dp[i][j]);\n        }\n    }\n    return dp[n-1][m-1];\n}\n",
  "    var i, j, lst = [],\n        n = grid.length,\n        m = grid[0].length,\n\
    \        min = Infinity;\n    \n    for(i = 0; i < n; i++){\n        for(j = 0;\
    \ j < m; j++){\n            if(grid[i][j] === 0){\n                continue;\n\
    \            }\n            lst.push(grid[i][j]);\n        }\n    }\n    \n  \
    \  for(i = 0; i < k; i++){\n        min = Math.min(min, lst.sort(function(a, b){return\
    \ a - b;}));\n        \n        for(j = 0; j < lst.length - 1; j++){\n       \
    \     if(lst[j] < lst[j + 1]){\n                lst[j] = lst[j + 1];\n       \
    \     }\n        }\n        \n        lst.pop();\n    }\n    \n    return lst;\n\
    }\n", "    var i, j, lst = [],\n        N = grid.length,\n        M = grid[0].length,\n\
    \        visited = [],\n        min = Infinity,\n        min_index = 0;\n    \n\
    \    for(i = 0; i < N; i++){\n        for(j = 0; j < M; j++){\n            if(!visited[i][j]){\n\
    \                lst = [grid[i][j]];\n                visited[i][j] = true;\n\
    \                min = Math.min(min, k);\n                while(lst.length < min){\n\
    \                    lst.push(grid[i][j]);\n                    visited[i][j]\
    \ = true;\n                    i = Math.floor(i / 2);\n                    j =\
    \ Math.floor(j / 2);\n                }\n                if(lst.length == k){\n\
    \                    min_index = lst.indexOf(Math.min.apply(Math, lst));\n   \
    \                 break;\n                }\n            }\n        }\n    }\n\
    \    return lst.slice(0, min_index + 1);\n}\n", "    var i, j, lst = [],\n   \
    \     n = grid.length,\n        m = grid[0].length,\n        visited = [],\n \
    \       min = Infinity,\n        min_i = -1,\n        min_j = -1;\n    \n    for(i\
    \ = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n            if(visited[i]\
    \ || visited[j]) continue;\n            lst.push(grid[i][j]);\n            visited[i]\
    \ = visited[j] = true;\n            if(lst.length === k){\n                if(lst.sort(function(a,\
    \ b){return a - b;}).join('') < lst.sort(function(a, b){return b - a;}).join('')){\n\
    \                    min = lst.length;\n                    min_i = i;\n     \
    \               min_j = j;\n                }\n                lst = [];\n   \
    \         }\n        }\n    }\n    \n    return [min_i, min_j];\n}\n", "    var\
    \ i, j, min = Infinity, min_i = 0, min_j = 0;\n    var lst = [];\n    for (i =\
    \ 0; i < grid.length; i++){\n        for (j = 0; j < grid[i].length; j++){\n \
    \           lst.push(grid[i][j]);\n        }\n    }\n    for (i = 0; i < lst.length;\
    \ i++){\n        for (j = 0; j < lst.length; j++){\n            if (i === j) continue;\n\
    \            if (lst[i] < lst[j] && lst[i] < min) {\n                min = lst[i];\n\
    \                min_i = i;\n                min_j = j;\n            }\n     \
    \   }\n    }\n    if (min === Infinity) return [];\n    var path = [];\n    for\
    \ (i = 0; i < k; i++){\n        path.push(lst[min_i]);\n        min_i = min_j;\n\
    \        min_j = lst.indexOf(min);\n        min = lst[min_i];\n    }\n    return\
    \ path;\n}\n", "  var i, j, min = Infinity, min_i = -1, min_j = -1;\n  var lst\
    \ = [];\n  for(i = 0; i < grid.length; i++){\n    for(j = 0; j < grid[i].length;\
    \ j++){\n      lst.push(grid[i][j]);\n    }\n  }\n  for(i = 0; i < lst.length;\
    \ i++){\n    for(j = 0; j < lst.length; j++){\n      if(i < j && lst[i] < lst[j]){\n\
    \        min = Math.min(min, lst[i] + lst[j]);\n        min_i = i;\n        min_j\
    \ = j;\n      }\n    }\n  }\n  if(min > k) return [];\n  return lst.slice(min_i,\
    \ min_j + 1);\n}\n", "    var i, j, lst = [],\n        n = grid.length,\n    \
    \    m = grid[0].length,\n        visited = [],\n        min = Infinity;\n   \
    \ \n    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n           \
    \ if(visited[i] || visited[j]) continue;\n            lst.push(grid[i][j]);\n\
    \            visited[i] = visited[j] = true;\n            if(lst.length === k){\n\
    \                min = Math.min(min, lst.sort(function(a, b){return a - b;}));\n\
    \                lst = [];\n            }\n        }\n    }\n    return min ===\
    \ Infinity ? [] : min;\n}\n", "  var n = grid.length,\n      m = grid[0].length,\n\
    \      i, j,\n      path = [],\n      min = Infinity,\n      min_i = -1,\n   \
    \   min_j = -1;\n  \n  for(i = 0; i < n; i++){\n    for(j = 0; j < m; j++){\n\
    \      if(grid[i][j] === 0){\n        continue;\n      }\n      \n      var lst\
    \ = [];\n      \n      if(i > 0){\n        lst.push(grid[i - 1][j]);\n      }\n\
    \      if(j > 0){\n        lst.push(grid[i][j - 1]);\n      }\n      if(i < n\
    \ - 1){\n        lst.push(grid[i + 1][j]);\n      }\n      if(j < m - 1){\n  \
    \      lst.push(grid[i][j + 1]);\n      }\n      \n      var len = lst.length;\n\
    \      \n      if(len === 0){\n        continue;\n      }\n      \n      var val\
    \ = lst.sort(function(a, b){\n        return a - b;\n      });\n      \n     \
    \ if(val[k - 1] < min){\n        min = val[k - 1];\n        min_i = i;\n     \
    \   min_j = j;\n      }\n    }\n  }\n  \n  path.push(min_i);\n  path.push(min_j);\n\
    \  \n  return path;\n}\n", "    var i, j, min, min_index, min_value, min_path,\
    \ min_path_length, min_path_index;\n    \n    min_path = [];\n    min_path_length\
    \ = 0;\n    min_path_index = 0;\n    \n    for(i = 0; i < grid.length; i++){\n\
    \        for(j = 0; j < grid[i].length; j++){\n            min = grid[i][j];\n\
    \            min_index = i * grid[i].length + j;\n            \n            if(min_path_length\
    \ < k){\n                min_path_length += 1;\n                min_path.push(min);\n\
    \            }\n            \n            if(min_path_length === k){\n       \
    \         if(min_path_index < min_index){\n                    min_path_index\
    \ = min_index;\n                    min_path = [min];\n                }\n   \
    \             else if(min_path_index === min_index){\n                    min_path.push(min);\n\
    \                }\n            }\n        }\n    }\n    \n    return min_path;\n\
    }\n", "    var i, j, min_path = [],\n        n = grid.length,\n        m = grid[0].length,\n\
    \        visited = [],\n        min_path_length = k + 1,\n        min_path_index\
    \ = 0;\n\n    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n     \
    \       if(visited[i] || visited[j]) continue;\n            visited[i] = visited[j]\
    \ = true;\n            min_path_length = Math.min(min_path_length, minPathLength(grid,\
    \ i, j, visited));\n            visited[i] = visited[j] = false;\n        }\n\
    \    }\n\n    for(i = 0; i < min_path_length; i++){\n        min_path[i] = grid[min_path_index][i];\n\
    \    }\n\n    return min_path;\n}\n\nfunction minPathLength(grid, i, j, visited){\n\
    \    var n = grid.length,\n        m = grid[0].length,\n        min_path_length\
    \ = k + 1,\n        min_path_index = 0;\n\n    if(i < 0 || i >= n || j < 0 ||\
    \ j >= m || visited[i] || visited[j]) return min_path_length;\n\n    visited[i]\
    \ = visited[j] = true;\n    min_path_length = Math.min(min_path_length, minPathLength(grid,\
    \ i - 1, j, visited) + 1);\n    min_path_length = Math.min(min_path_length, minPathLength(grid,\
    \ i, j - 1, visited) + 1);\n    min_path_length = Math.min(min_path_length, minPathLength(grid,\
    \ i + 1, j, visited) + 1);\n    min_path_length = Math.min(min_path_length, minPathLength(grid,\
    \ i, j + 1, visited) + 1);\n    visited[i] = visited[j] = false;\n\n    return\
    \ min_path_length;\n}\n", "    var i, j, min = grid[0][0], min_i = 0, min_j =\
    \ 0;\n    for(i = 0; i < grid.length; i++){\n        for(j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] < min){\n                min = grid[i][j];\n\
    \                min_i = i;\n                min_j = j;\n            }\n     \
    \   }\n    }\n    var lst = [];\n    var lst_i = min_i, lst_j = min_j;\n    for(i\
    \ = 0; i < k; i++){\n        lst.push(grid[lst_i][lst_j]);\n        if(lst_i >\
    \ 0){\n            lst_i--;\n        }else{\n            lst_i = grid.length -\
    \ 1;\n        }\n        if(lst_j > 0){\n            lst_j--;\n        }else{\n\
    \            lst_j = grid[0].length - 1;\n        }\n    }\n    return lst;\n\
    }\n", "    var n = grid.length,\n        m = grid[0].length,\n        min = [],\n\
    \        i, j,\n        min_i, min_j,\n        min_val;\n    \n    for(i = 0;\
    \ i < n; i++){\n        for(j = 0; j < m; j++){\n            min_val = grid[i][j];\n\
    \            min_i = i;\n            min_j = j;\n            \n            for(var\
    \ ii = i - 1; ii >= 0; ii--){\n                if(grid[ii][j] < min_val){\n  \
    \                  min_val = grid[ii][j];\n                    min_i = ii;\n \
    \                   min_j = j;\n                }\n            }\n           \
    \ \n            for(var jj = j - 1; jj >= 0; jj--){\n                if(grid[i][jj]\
    \ < min_val){\n                    min_val = grid[i][jj];\n                  \
    \  min_i = i;\n                    min_j = jj;\n                }\n          \
    \  }\n            \n            for(var ii = i + 1; ii < n; ii++){\n         \
    \       if(grid[ii][j] < min_val){\n                    min_val = grid[ii][j];\n\
    \                    min_i = ii;\n                    min_j = j;\n           \
    \     }\n            }\n            \n            for(var jj = j + 1; jj < m;\
    \ jj++){\n                if(grid[i][jj] < min_val){\n                    min_val\
    \ = grid[i][jj];\n                    min_i = i;\n                    min_j =\
    \ jj;\n                }\n            }\n            \n            if(min_val\
    \ < min[k - 1]){\n                min[k - 1] = min_val;\n                min_i\
    \ = i;\n                min_j = j;\n            }\n            \n            min[k]\
    \ = min_i;\n            min[k + 1] = min_j;\n        }\n    }\n    \n    return\
    \ min;\n}\n", "    var i, j, lst = [],\n        n = grid.length,\n        m =\
    \ grid[0].length,\n        visited = [];\n    \n    for(i = 0; i < n; i++){\n\
    \        for(j = 0; j < m; j++){\n            if(visited[i] || visited[j]) continue;\n\
    \            visited[i] = visited[j] = true;\n            lst.push(grid[i][j]);\n\
    \            if(k === 1){\n                break;\n            }\n           \
    \ if(i > 0 && !visited[i - 1]){\n                lst.push(grid[i - 1][j]);\n \
    \           }\n            if(j > 0 && !visited[i]){\n                lst.push(grid[i][j\
    \ - 1]);\n            }\n            if(i < n - 1 && !visited[i + 1]){\n     \
    \           lst.push(grid[i + 1][j]);\n            }\n            if(j < m - 1\
    \ && !visited[i]){\n                lst.push(grid[i][j + 1]);\n            }\n\
    \        }\n    }\n    return lst;\n}\n", "    var dp = [];\n    var dp_i = [];\n\
    \    var dp_j = [];\n    var dp_k = [];\n    var dp_l = [];\n    var dp_m = [];\n\
    \    var dp_n = [];\n    var dp_o = [];\n    var dp_p = [];\n    var dp_q = [];\n\
    \    var dp_r = [];\n    var dp_s = [];\n    var dp_t = [];\n    var dp_u = [];\n\
    \    var dp_v = [];\n    var dp_w = [];\n    var dp_x = [];\n    var dp_y = [];\n\
    \    var dp_z = [];\n    var dp_aa = [];\n    var dp_ab = [];\n    var dp_ac =\
    \ [];\n    var dp_ad = [];\n    var dp_ae = [];\n    var dp_af = [];\n    var\
    \ dp_ag = [];\n    var dp_ah = [];\n    var dp_ai = [];\n    var dp_aj = [];\n\
    \    var dp_ak = [];\n    var dp_al = [];\n    var dp_am = [];\n    var dp_an\
    \ = [];\n    var dp_ao = [];\n    var dp_ap = [];\n    var dp_aq = [];\n    var\
    \ dp_ar = [];\n    var dp_as = [];\n    var dp_at = [];\n    var dp_au = [];\n\
    \    var dp_av = [];\n    var dp_aw = [];\n    var dp_ax = [];\n    var dp_ay\
    \ = [];\n    var dp_az = [];\n    var dp_ba = [];\n    var dp_bb = [];\n    var\
    \ dp_bc = [];\n    var dp_bd = [];\n    var dp_be = [];\n    var dp_bf = [];\n\
    \    var dp_bg = [];\n    var dp_bh = [];\n    var dp_bi = [];\n    var dp_bj\
    \ = [];\n    var dp_bk = [];\n    var dp_bl = [];\n", "    var dp = [];\n    var\
    \ n = grid.length;\n    var m = grid[0].length;\n    for(var i = 0; i < n; i++){\n\
    \        dp[i] = [];\n        for(var j = 0; j < m; j++){\n            dp[i][j]\
    \ = grid[i][j];\n        }\n    }\n    for(var i = 0; i < n; i++){\n        for(var\
    \ j = 0; j < m; j++){\n            for(var l = 0; l < m; l++){\n             \
    \   if(i > 0 && j > 0 && grid[i - 1][j - 1] < grid[i][j]){\n                 \
    \   dp[i][j] = Math.min(dp[i][j], dp[i - 1][j - 1] + grid[i][j]);\n          \
    \      }\n                if(i > 0 && j < m - 1 && grid[i - 1][j + 1] < grid[i][j]){\n\
    \                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j + 1] + grid[i][j]);\n\
    \                }\n                if(i < n - 1 && j > 0 && grid[i + 1][j - 1]\
    \ < grid[i][j]){\n                    dp[i][j] = Math.min(dp[i][j], dp[i + 1][j\
    \ - 1] + grid[i][j]);\n                }\n                if(i < n - 1 && j <\
    \ m - 1 && grid[i + 1][j + 1] < grid[i][j]){\n                    dp[i][j] = Math.min(dp[i][j],\
    \ dp[i + 1][j + 1] + grid[i][j]);\n                }\n            }\n        }\n\
    \    }\n    var result = [];\n    for(var i = 0; i < k; i++){\n        result.push(dp[n\
    \ - 1][m - 1]);\n        for(var j = m - 1; j > 0; j--){\n            if(dp[n\
    \ - 1][j] < dp[n - 1][j - 1])", "    var result = [];\n    var visited = [];\n\
    \    var min = Infinity;\n    var min_index = -1;\n    var i, j;\n    \n    for(i\
    \ = 0; i < grid.length; i++){\n        for(j = 0; j < grid[i].length; j++){\n\
    \            if(visited.indexOf(grid[i][j]) === -1){\n                visited.push(grid[i][j]);\n\
    \                if(grid[i][j] < min){\n                    min = grid[i][j];\n\
    \                    min_index = visited.length - 1;\n                }\n    \
    \        }\n        }\n    }\n    \n    for(i = 0; i < visited.length; i++){\n\
    \        result.push(visited[i]);\n    }\n    \n    while(k > 0){\n        if(min_index\
    \ > 0){\n            min_index--;\n            result.push(visited[min_index]);\n\
    \            k--;\n        }else{\n            min_index = visited.length - 1;\n\
    \            min = Infinity;\n            for(i = 0; i < visited.length; i++){\n\
    \                if(visited[i] < min){\n                    min = visited[i];\n\
    \                    min_index = i;\n                }\n            }\n      \
    \      result.push(min);\n            k--;\n        }\n    }\n    \n    return\
    \ result;\n}\n", "    var i, j, lst = [],\n        n = grid.length,\n        m\
    \ = n * n,\n        min = m,\n        min_i = 0,\n        min_j = 0;\n    \n \
    \   for(i = 0; i < n; i++){\n        for(j = 0; j < n; j++){\n            if(grid[i][j]\
    \ < min){\n                min = grid[i][j];\n                min_i = i;\n   \
    \             min_j = j;\n            }\n        }\n    }\n    \n    for(i = 0;\
    \ i < k; i++){\n        lst.push(grid[min_i][min_j]);\n        min_i = Math.floor(min_i\
    \ / n) * n;\n        min_j = Math.floor(min_j / n) * n;\n        \n        if(min_i\
    \ === 0 && min_j === 0){\n            break;\n        }\n        \n        min\
    \ = grid[min_i][min_j];\n    }\n    \n    return lst;\n}\n", "    var result =\
    \ [];\n    var dp = [];\n    var dp_len = 0;\n    var dp_index = 0;\n    var dp_value\
    \ = 0;\n    var dp_value_index = 0;\n    var dp_value_value = 0;\n    \n    for(var\
    \ i = 0; i < grid.length; i++){\n        for(var j = 0; j < grid[i].length; j++){\n\
    \            dp[i][j] = grid[i][j];\n        }\n    }\n    \n    for(var i = 0;\
    \ i < grid.length; i++){\n        for(var j = 0; j < grid[i].length; j++){\n \
    \           if(i == 0 && j == 0){\n                dp_len = 1;\n             \
    \   dp_index = 0;\n                dp_value = grid[i][j];\n                dp_value_index\
    \ = 0;\n                dp_value_value = grid[i][j];\n            }\n        \
    \    else if(i == 0){\n                dp_len = 1;\n                dp_index =\
    \ 0;\n                dp_value = grid[i][j];\n                dp_value_index =\
    \ 0;\n                dp_value_value = grid[i][j];\n            }\n          \
    \  else if(j == 0){\n                dp_len = 1;\n                dp_index = 0;\n\
    \                dp_value = grid[i][j];\n                dp_value_index = 0;\n\
    \                dp_value_value = grid[i][j];\n            }\n            else\
    \ if(dp_len == k){\n                if(dp_value < grid[i][j]){\n             \
    \       dp_value = grid[i][j];\n                    dp_value_index = dp_index;\n\
    \                    dp_value_value = dp_value;\n                }\n         \
    \   }\n            else if(dp_len < k){\n                if(dp[i][j] < grid[i][j]){\n\
    \                    dp[i][j] = grid[i][j];\n                    dp_index = i;\n\
    \                    dp_value = grid[i][j];\n                    dp_value_index\
    \ = j;\n                    dp_value_", "    var i, j, min, min_i, min_j, min_val,\
    \ min_lst;\n    var lst = [];\n    var lst_i = [];\n    var lst_j = [];\n    var\
    \ lst_val = [];\n    var lst_lst = [];\n    var lst_lst_i = [];\n    var lst_lst_j\
    \ = [];\n    var lst_lst_val = [];\n    var lst_lst_lst = [];\n    var lst_lst_lst_i\
    \ = [];\n    var lst_lst_lst_j = [];\n    var lst_lst_lst_val = [];\n    \n  \
    \  for(i = 0; i < grid.length; i++){\n        for(j = 0; j < grid[i].length; j++){\n\
    \            lst.push(grid[i][j]);\n            lst_i.push(i);\n            lst_j.push(j);\n\
    \            lst_val.push(grid[i][j]);\n            lst_lst.push(lst);\n     \
    \       lst_lst_i.push(lst_i);\n            lst_lst_j.push(lst_j);\n         \
    \   lst_lst_val.push(lst_val);\n            lst_lst_lst.push(lst_lst);\n     \
    \       lst_lst_lst_i.push(lst_lst_i);\n            lst_lst_lst_j.push(lst_lst_j);\n\
    \            lst_lst_lst_val.push(lst_lst_val);\n        }\n    }\n    \n    min\
    \ = lst_lst_lst_val[0][0];\n    min_i = lst_lst_lst_i[0][0];\n    min_j = lst_lst_lst_j[0][0];\n\
    \    min_val = lst_lst_lst_val[0][0];\n    min_lst = lst_lst_lst[0];\n", "   \
    \ var i, j, lst = [],\n        n = grid.length,\n        m = grid[0].length;\n\
    \    \n    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n        \
    \    lst.push(grid[i][j]);\n        }\n    }\n    \n    for(i = 0; i < n; i++){\n\
    \        for(j = 0; j < m; j++){\n            lst.sort(function(a, b){\n     \
    \           return a - b;\n            });\n            \n            if(lst.length\
    \ === k){\n                return lst;\n            }\n            \n        \
    \    lst.pop();\n        }\n    }\n}\n", "    var n = grid.length;\n    var m\
    \ = grid[0].length;\n    var dp = new Array(n);\n    for(var i = 0; i < n; i++){\n\
    \        dp[i] = new Array(m);\n        for(var j = 0; j < m; j++){\n        \
    \    dp[i][j] = grid[i][j];\n        }\n    }\n    var lst = new Array(k+1);\n\
    \    for(var i = 0; i < k+1; i++){\n        lst[i] = 0;\n    }\n    var min =\
    \ 0;\n    for(var i = 0; i < n; i++){\n        for(var j = 0; j < m; j++){\n \
    \           for(var l = 1; l <= k; l++){\n                if(i-l >= 0 && j-l >=\
    \ 0){\n                    if(dp[i-l][j-l] < dp[i][j]){\n                    \
    \    dp[i][j] = dp[i-l][j-l];\n                        lst[l] = i-l;\n       \
    \             }\n                }\n            }\n        }\n    }\n    return\
    \ lst;\n}\n", "    var i, j, lst, lst_i, lst_j, lst_i_j;\n    var min = Number.POSITIVE_INFINITY;\n\
    \    var min_i = 0;\n    var min_j = 0;\n    \n    for(i = 0; i < grid.length;\
    \ i++){\n        lst = [];\n        for(j = 0; j < grid[i].length; j++){\n   \
    \         lst.push(grid[i][j]);\n        }\n        lst_i = lst.sort(function(a,\
    \ b){return a - b});\n        for(j = 0; j < k; j++){\n            lst_i_j = lst_i.slice(0,\
    \ j + 1);\n            if(lst_i_j.length > 0 && lst_i_j[lst_i_j.length - 1] <\
    \ lst_i_j[lst_i_j.length - 2]){\n                min = Math.min(min, lst_i_j[lst_i_j.length\
    \ - 1]);\n                min_i = i;\n                min_j = j;\n           \
    \ }\n        }\n    }\n    \n    return [min_i, min_j];\n}\n", "    var i, j,\
    \ lst = [],\n        n = grid.length,\n        m = grid[0].length;\n    \n   \
    \ for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n            lst.push(grid[i][j]);\n\
    \        }\n    }\n    \n    for(i = 0; i < k; i++){\n        for(j = 0; j < lst.length;\
    \ j++){\n            if(lst[j] < lst[j+1]){\n                lst[j] = lst[j+1];\n\
    \                lst[j+1] = lst[j];\n            }\n        }\n    }\n    \n \
    \   return lst;\n}\n", "    var i, j, lst = [],\n        n = grid.length,\n  \
    \      m = grid[0].length,\n        visited = [],\n        min = Infinity;\n \
    \   \n    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n         \
    \   if(visited[i] || visited[j]) continue;\n            if(grid[i][j] < min){\n\
    \                min = grid[i][j];\n                lst = [i, j];\n          \
    \  }\n        }\n        visited[lst[0]] = true;\n        visited[lst[1]] = true;\n\
    \    }\n    \n    for(i = 0; i < k; i++){\n        if(lst[i] < lst[k]){\n    \
    \        lst = lst.slice(0, i).concat(lst.slice(i+1));\n        }\n    }\n   \
    \ \n    return lst;\n}\n", "  var i, j, lst = [],\n      n = grid.length,\n  \
    \    m = grid[0].length,\n      path = [];\n  \n  for(i = 0; i < n; i++){\n  \
    \  for(j = 0; j < m; j++){\n      lst.push(grid[i][j]);\n    }\n  }\n  \n  for(i\
    \ = 0; i < k; i++){\n    path.push(lst.shift());\n  }\n  \n  return path;\n}\n\
    \nminPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3);\n", "    var i, j, lst = [],\n\
    \        n = grid.length,\n        m = grid[0].length,\n        visited = [],\n\
    \        min = [],\n        min_index = 0;\n\n    for (i = 0; i < n; i++) {\n\
    \        for (j = 0; j < m; j++) {\n            if (visited[i] || visited[j])\
    \ continue;\n            lst.push(grid[i][j]);\n            visited[i] = visited[j]\
    \ = true;\n        }\n    }\n\n    for (i = 0; i < lst.length; i++) {\n      \
    \  if (lst[i] === k) {\n            min_index = i;\n            break;\n     \
    \   }\n    }\n\n    for (i = min_index; i < lst.length; i++) {\n        for (j\
    \ = 0; j < min_index; j++) {\n            if (lst[i] < lst[j]) {\n           \
    \     min.push(lst[i]);\n                break;\n            }\n        }\n  \
    \  }\n\n    return min;\n}\n", "    var n = grid.length,\n        m = grid[0].length,\n\
    \        dp = Array(n),\n        i, j,\n        min = Infinity,\n        min_i\
    \ = -1,\n        min_j = -1;\n\n    for(i = 0; i < n; i++){\n        dp[i] = Array(m);\n\
    \        for(j = 0; j < m; j++){\n            dp[i][j] = grid[i][j] + (i > 0 &&\
    \ j > 0 ? dp[i - 1][j - 1] : 0);\n            if(dp[i][j] < min){\n          \
    \      min = dp[i][j];\n                min_i = i;\n                min_j = j;\n\
    \            }\n        }\n    }\n\n    var path = [];\n    for(i = min_i; i >=\
    \ 0; i--){\n        path.push(grid[i][min_j]);\n    }\n    for(j = min_j; j >=\
    \ 0; j--){\n        path.push(grid[min_i][j]);\n    }\n\n    return path.slice(0,\
    \ k);\n}\n\nminPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3);\nminPath([[5, 9, 3],\
    \ [4, 1, 6], [7, 8, 2]], 1);\nminPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 2);\n\
    minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 3);\nminPath([[5, 9, 3], [4, 1, 6],\
    \ [7, 8, 2]], 4);\nminPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 5);\nminPath([[5,\
    \ 9, 3], [4, 1, 6], [7, 8, 2]], 6);\nminPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]],\
    \ 7);\nminPath([[5, 9, 3], [4, 1", "  var lst = [];\n  var i = 0;\n  var j = 0;\n\
    \  var min = grid[0][0];\n  for(i = 0; i < grid.length; i++){\n    for(j = 0;\
    \ j < grid[i].length; j++){\n      if(grid[i][j] < min){\n        min = grid[i][j];\n\
    \        lst = [i, j];\n      }\n    }\n  }\n  var path = [];\n  var path_len\
    \ = 0;\n  while(path_len < k){\n    path.push(lst[path_len]);\n    path_len++;\n\
    \    lst = [lst[0], lst[1]];\n    lst[0]++;\n    if(lst[0] > grid.length - 1){\n\
    \      lst[0] = 0;\n      lst[1]++;\n    }\n    if(lst[1] > grid[0].length - 1){\n\
    \      lst[1] = 0;\n      lst[0]++;\n    }\n  }\n  return path;\n}\n", "    var\
    \ i, j, lst = [],\n        n = grid.length,\n        m = grid[0].length,\n   \
    \     visited = [],\n        min = Infinity;\n    \n    for(i = 0; i < n; i++){\n\
    \        for(j = 0; j < m; j++){\n            if(!visited[i][j]){\n          \
    \      visited[i][j] = true;\n                lst.push(grid[i][j]);\n        \
    \        if(lst.length === k){\n                    min = Math.min(min, lst.sort(function(a,\
    \ b){return a - b;}));\n                    lst = [];\n                }\n   \
    \         }\n        }\n    }\n    return min;\n}\n", "    var n = grid.length,\n\
    \        m = grid[0].length,\n        visited = [],\n        min = [],\n     \
    \   i, j,\n        min_i, min_j;\n    \n    for(i = 0; i < n; i++){\n        for(j\
    \ = 0; j < m; j++){\n            visited.push(false);\n        }\n    }\n    \n\
    \    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n            if(visited[i][j]\
    \ === false){\n                visited[i][j] = true;\n                min.push(grid[i][j]);\n\
    \                \n                if(k === 1){\n                    break;\n\
    \                }\n                \n                min_i = i;\n           \
    \     min_j = j;\n                \n                if(i > 0){\n             \
    \       if(visited[i - 1][j] === false){\n                        visited[i -\
    \ 1][j] = true;\n                        min.push(grid[i - 1][j]);\n         \
    \           }\n                }\n                \n                if(j > 0){\n\
    \                    if(visited[i][j - 1] === false){\n                      \
    \  visited[i][j - 1] = true;\n                        min.push(grid[i][j - 1]);\n\
    \                    }\n                }\n                \n                if(i\
    \ < n - 1){\n                    if(visited[i + 1][j] === false){\n          \
    \              visited[i + 1][j] = true;\n                        min.push(grid[i\
    \ + 1][j]);\n                    }\n                }\n                \n    \
    \            if(j < m - 1){\n                    if(visited[i][j + 1] === false){\n\
    \                        visited[i][j + 1] = true;\n                        min.push(grid[i][j\
    \ + 1]);\n                    }\n                }\n            }\n        }\n\
    \    }\n    \n    return min;\n}\n", "    var result = [];\n    var visited =\
    \ [];\n    var dfs = function(i, j){\n        if(visited[i] === true || visited[j]\
    \ === true){\n            return;\n        }\n        visited[i] = true;\n   \
    \     visited[j] = true;\n        result.push(grid[i][j]);\n        for(var x\
    \ = 0; x < 4; x++){\n            if(x === 0 && i > 0 && grid[i - 1][j] !== undefined){\n\
    \                dfs(i - 1, j);\n            }\n            if(x === 1 && i <\
    \ grid.length - 1 && grid[i + 1][j] !== undefined){\n                dfs(i + 1,\
    \ j);\n            }\n            if(x === 2 && j > 0 && grid[i][j - 1] !== undefined){\n\
    \                dfs(i, j - 1);\n            }\n            if(x === 3 && j <\
    \ grid[0].length - 1 && grid[i][j + 1] !== undefined){\n                dfs(i,\
    \ j + 1);\n            }\n        }\n    };\n    for(var i = 0; i < grid.length;\
    \ i++){\n        for(var j = 0; j < grid[0].length; j++){\n            if(grid[i][j]\
    \ === undefined){\n                continue;\n            }\n            if(k\
    \ === 1){\n                result.push(grid[i][j]);\n                continue;\n\
    \            }\n            dfs(i, j);\n        }\n    }\n    return result;\n\
    }\n", "  var result = [];\n  var visited = [];\n  var current = 0;\n  var min\
    \ = grid[0][0];\n  for(var i = 0; i < grid.length; i++){\n    for(var j = 0; j\
    \ < grid[i].length; j++){\n      if(visited[i] || visited[j]) continue;\n    \
    \  if(grid[i][j] < min){\n        min = grid[i][j];\n        current = i;\n  \
    \      result = [grid[i][j]];\n      } else if(grid[i][j] == min){\n        result.push(grid[i][j]);\n\
    \      }\n      visited[i] = true;\n    }\n  }\n  while(result.length < k){\n\
    \    if(current == 0){\n      result.push(min);\n      break;\n    }\n    visited[current]\
    \ = true;\n    current = grid[current][0];\n    result.push(grid[current][0]);\n\
    \  }\n  return result;\n}\n", "    var i, j, min, min_i, min_j, min_i_j;\n   \
    \ var lst = [];\n    for(i = 0; i < grid.length; i++){\n        for(j = 0; j <\
    \ grid[i].length; j++){\n            lst.push(grid[i][j]);\n        }\n    }\n\
    \    min = lst[0];\n    for(i = 1; i < lst.length; i++){\n        if(lst[i] <\
    \ min){\n            min = lst[i];\n            min_i = i;\n        }\n    }\n\
    \    for(i = 0; i < grid.length; i++){\n        for(j = 0; j < grid[i].length;\
    \ j++){\n            if(i == min_i && j == min_j){\n                continue;\n\
    \            }\n            if(i < min_i || j < min_j){\n                continue;\n\
    \            }\n            if(lst[i] < lst[j]){\n                min = lst[i];\n\
    \                min_i = i;\n                min_j = j;\n            }\n     \
    \   }\n    }\n    if(k == 1){\n        return [min];\n    }\n    lst = [];\n \
    \   for(i = 0; i < grid.length; i++){\n        for(j = 0; j < grid[i].length;\
    \ j++){\n            if(i == min_i && j == min_j){\n                continue;\n\
    \            }\n            if(i < min_i || j < min_j){\n                continue;\n\
    \            }\n            if(lst[i] < lst[j]){\n                min = lst[i];\n\
    \                min_i = i;\n                min_j = j;\n            }\n     \
    \   }\n    }\n    return [min];\n}\n", "    var i, j, min, min_i, min_j, min_i_j,\
    \ min_i_j_i, min_i_j_i_j;\n    var lst_i, lst_j, lst_i_j, lst_i_j_i, lst_i_j_i_j;\n\
    \    var lst_i_j_i_j_i, lst_i_j_i_j_i_j;\n    var lst_i_j_i_j_i_j_i_j;\n    var\
    \ lst_i_j_i_j_i_j_i_j_i;\n    var lst_i_j_i_j_i_j_i_j_i_j;\n    var lst_i_j_i_j_i_j_i_j_i_j_i;\n\
    \    var lst_i_j_i_j_i_j_i_j_i_j_i_j;\n    var lst_i_j_i_j_i_j_i_j_i_j_i_j_i;\n\
    \    var lst_i_j_i_j_i_j_i_j_i_j_i_j_i_j;\n    var lst_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i;\n\
    \    var lst_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j;\n    var lst_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i;\n\
    \    var lst_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j;\n    var lst_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i;\n\
    \    var lst", "    var i, j, min = Infinity, min_i = -1, min_j = -1;\n    var\
    \ lst = [];\n    for(i = 0; i < grid.length; i++){\n        lst.push(grid[i][0]);\n\
    \    }\n    for(j = 0; j < grid[0].length; j++){\n        lst.push(grid[0][j]);\n\
    \    }\n    for(i = 1; i < grid.length; i++){\n        for(j = 1; j < grid[0].length;\
    \ j++){\n            if(grid[i][j] < min){\n                min = grid[i][j];\n\
    \                min_i = i;\n                min_j = j;\n            }\n     \
    \   }\n    }\n    if(k === 1){\n        return lst[0];\n    }\n    for(i = 1;\
    \ i < k; i++){\n        if(lst[i] < lst[i-1]){\n            lst[i] = lst[i-1];\n\
    \        }\n    }\n    return lst;\n}\n", '    var i, j, len, min, min_i, min_j,
    min_len, min_i_j, min_i_j_len, min_i_j_i, min_i_j_i_len, min_i_j_i_j, min_i_j_i_j_len,
    min_i_j_i_j_i, min_i_j_i_j_i_len, min_i_j_i_j_i_j, min_i_j_i_j_i_j_len, min_i_j_i_j_i_j_i,
    min_i_j_i_j_i_j_i_len, min_i_j_i_j_i_j_i_j, min_i_j_i_j_i_j_i_j_len, min_i_j_i_j_i_j_i_j_i,
    min_i_j_i_j_i_j_i_j_i_len, min_i_j_i_j_i_j_i_j_i_j, min_i_j_i_j_i_j_i_j_i_j_len,
    min_i_j_i_j_i_j_i_j_i_j_i, min_i_j_i_j_i_j_i_j_i_j_i_len, min_i_j_i_j_i_j_i_j_i_j_i_j,
    min_i_j_i_j_i_j_i_j_i_j_i_j_len, min_i_j_i_j_i_j_i_j_i_j_i_j_i, min_i_j_i_j_i_j_i_j_i_j_i_j_i_len,
    min_i_j_i_j_i_j_i_j_i_j_i_j_i_j, min_i_j_i_j_i_j_i_j_i_j_i_j_i_', "    var rows\
    \ = grid.length;\n    var cols = grid[0].length;\n    var result = [];\n    var\
    \ dp = [];\n    var dp_row = [];\n    var dp_col = [];\n    for(var i = 0; i <\
    \ rows; i++){\n        dp_row[i] = [];\n        for(var j = 0; j < cols; j++){\n\
    \            dp_row[i][j] = [];\n        }\n    }\n    for(var i = 0; i < rows;\
    \ i++){\n        for(var j = 0; j < cols; j++){\n            dp_row[i][j] = grid[i][j];\n\
    \        }\n    }\n    for(var i = 0; i < rows; i++){\n        dp_col[i] = [];\n\
    \        for(var j = 0; j < cols; j++){\n            dp_col[i][j] = [];\n    \
    \    }\n    }\n    for(var i = 0; i < rows; i++){\n        for(var j = 0; j <\
    \ cols; j++){\n            dp_col[i][j] = dp_row[i][j];\n        }\n    }\n  \
    \  for(var i = 0; i < rows; i++){\n        for(var j = 0; j < cols; j++){\n  \
    \          if(i > 0 && j > 0){\n                dp_col[i][j] = Math.min(dp_col[i][j],\
    \ dp_col[i - 1][j]) + grid[i][j];\n            }\n            if(i > 0){\n   \
    \             dp_col[i][j] = Math.min(dp_col[i][j], dp_row[i - 1][j]) + grid[i][j];\n\
    \            }\n            if(j > 0){\n                dp_col[i][j] = Math.min(dp_col[i][j],\
    \ dp_col[i][j - 1]) + grid[i][j];\n            }\n            if(i > 0 && j >\
    \ 0){\n                dp_col[i][j] = Math.min(dp_col[", "    var result = [];\n\
    \    var visited = [];\n    var dfs = function(i, j){\n        if(visited[i] ||\
    \ visited[j]){\n            return;\n        }\n        visited[i] = true;\n \
    \       visited[j] = true;\n        if(i === j){\n            result.push(grid[i][j]);\n\
    \            return;\n        }\n        for(var i = 0; i < 4; i++){\n       \
    \     var next = [i, j];\n            if(next[0] === next[1]){\n             \
    \   next[0] = next[1] = (next[0] + 1) % 4;\n            }\n            dfs(next[0],\
    \ next[1]);\n        }\n    }\n    for(var i = 0; i < grid.length; i++){\n   \
    \     for(var j = 0; j < grid[i].length; j++){\n            if(!visited[i] &&\
    \ !visited[j]){\n                dfs(i, j);\n            }\n        }\n    }\n\
    \    return result;\n}\n", "    var i, j, min, min_i, min_j, min_val;\n    var\
    \ lst = [];\n    var len = grid.length;\n    var len2 = len * len;\n    for(i\
    \ = 0; i < len; i++){\n        lst.push(grid[i][0]);\n    }\n    for(i = 0; i\
    \ < len; i++){\n        lst.push(grid[i][len-1]);\n    }\n    for(i = 0; i < len;\
    \ i++){\n        lst.push(grid[len-1][i]);\n    }\n    for(i = 0; i < len; i++){\n\
    \        lst.push(grid[len-1][len-1]);\n    }\n    for(i = 0; i < len; i++){\n\
    \        for(j = 0; j < len; j++){\n            if(i == j){\n                continue;\n\
    \            }\n            if(grid[i][j] < grid[i][j-1] && grid[i][j] < grid[i-1][j]\
    \ && grid[i][j] < grid[i-1][j-1]){\n                lst.push(grid[i][j]);\n  \
    \          }\n        }\n    }\n    min = lst[0];\n    min_i = 0;\n    min_j =\
    \ 0;\n    for(i = 1; i < len2; i++){\n        if(lst[i] < min){\n            min\
    \ = lst[i];\n            min_i = i;\n            min_j = 0;\n        }\n     \
    \   if(lst[i] == min){\n            min_j++;\n            if(min_j == k){\n  \
    \              break;\n            }\n        }\n    }\n    return lst.slice(min_i\
    \ - k + 1, min_i + 1);\n}\n", "    var i, j, min = Infinity, min_i = 0, min_j\
    \ = 0, min_val = Infinity;\n    var lst = [];\n    for(i = 0; i < grid.length;\
    \ i++){\n        for(j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ < min){\n                min = grid[i][j];\n                min_i = i;\n   \
    \             min_j = j;\n                min_val = grid[i][j];\n            }\n\
    \            lst.push(grid[i][j]);\n        }\n    }\n    var lst_i = [];\n  \
    \  var lst_j = [];\n    for(i = 0; i < lst.length; i++){\n        if(lst[i] <\
    \ min){\n            min = lst[i];\n            min_i = i;\n            min_j\
    \ = i;\n            min_val = lst[i];\n        }\n        lst_i.push(lst[i]);\n\
    \        lst_j.push(lst[i]);\n    }\n    for(i = 0; i < lst_i.length; i++){\n\
    \        for(j = 0; j < lst_j.length; j++){\n            if(lst_i[i] < lst_j[j]){\n\
    \                lst_i[i] = lst_j[j];\n                lst_j[j] = lst_i[i];\n\
    \            }\n        }\n    }\n    for(i = 0; i < lst_i.length; i++){\n   \
    \     if(lst_i[i] < min){\n            min = lst_i[i];\n            min_i = i;\n\
    \            min_j = i;\n            min_val = lst_i[i];\n        }\n    }\n \
    \   var res = [];\n    for(i = 0; i < lst_i.length; i++){\n        if(lst_i[i]\
    \ == min){\n            res.push(lst_i[i]);\n        }\n    }\n    if(res.length\
    \ <", "    var i, j, min = Infinity, min_i = 0, min_j = 0, min_val = 0;\n    for(i\
    \ = 0; i < grid.length; i++){\n        for(j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] < min){\n                min = grid[i][j];\n      \
    \          min_i = i;\n                min_j = j;\n                min_val = grid[i][j];\n\
    \            }\n        }\n    }\n    var lst = [];\n    for(i = 0; i < k; i++){\n\
    \        lst.push(min_val);\n        min_val = grid[min_i][min_j];\n        min_i\
    \ = min_i - 1 < 0 ? grid.length - 1 : min_i - 1;\n        min_j = min_j - 1 <\
    \ 0 ? grid[min_i].length - 1 : min_j - 1;\n    }\n    return lst;\n}\n", "   \
    \ var n = grid.length,\n        m = grid[0].length,\n        i, j,\n        path\
    \ = [],\n        visited = [],\n        min = Infinity,\n        min_i, min_j;\n\
    \n    for(i = 0; i < n; i++){\n        visited[i] = [];\n        for(j = 0; j\
    \ < m; j++){\n            visited[i][j] = false;\n        }\n    }\n\n    for(i\
    \ = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n            if(visited[i][j]\
    \ === false){\n                visited[i][j] = true;\n                path.push(grid[i][j]);\n\
    \                if(path.length === k){\n                    if(min > grid[i][j]){\n\
    \                        min = grid[i][j];\n                        min_i = i;\n\
    \                        min_j = j;\n                    }\n                }\n\
    \                if(path.length === k + 1){\n                    break;\n    \
    \            }\n                if(i > 0){\n                    visited[i - 1][j]\
    \ = true;\n                }\n                if(j > 0){\n                   \
    \ visited[i][j - 1] = true;\n                }\n                if(i < n - 1){\n\
    \                    visited[i + 1][j] = true;\n                }\n          \
    \      if(j < m - 1){\n                    visited[i][j + 1] = true;\n       \
    \         }\n            }\n        }\n    }\n\n    return path.map(function(v){\n\
    \        return grid[min_i][min_j];\n    });\n}\n", "    var i, j, min = Infinity,\
    \ min_i = 0, min_j = 0;\n    for (i = 0; i < grid.length; i++){\n        for (j\
    \ = 0; j < grid[i].length; j++){\n            if (grid[i][j] < min){\n       \
    \         min = grid[i][j];\n                min_i = i;\n                min_j\
    \ = j;\n            }\n        }\n    }\n    var lst = [];\n    var lst_i = [];\n\
    \    var lst_j = [];\n    var lst_i_j = [];\n    var lst_i_j_i = [];\n    var\
    \ lst_i_j_i_j = [];\n    for (i = 0; i < grid.length; i++){\n        for (j =\
    \ 0; j < grid[i].length; j++){\n            lst.push(grid[i][j]);\n          \
    \  lst_i.push(i);\n            lst_j.push(j);\n            lst_i_j.push(lst_i.concat(lst_j));\n\
    \            lst_i_j_i.push(lst_i.concat(lst_j).concat(i));\n            lst_i_j_i_j.push(lst_i.concat(lst_j).concat(i).concat(j));\n\
    \        }\n    }\n    var lst_i_j_i_j_i = lst_i_j_i_j.concat(lst_i_j_i);\n  \
    \  var lst_i_j_i_j_i_i = lst_i_j_i_j_i.concat(lst_i_j_i);\n    var lst_i_j_i_j_i_i_j\
    \ = lst_i_j_i_j_i_i.concat(lst_i_j_i_j);\n    var lst_i_j_i_j_i_i_j_k = lst_i_j_i_j_i_i_j.concat",
  "    var result = [];\n    var visited = [];\n    var dfs = function(i, j){\n  \
    \      if(visited[i] || visited[j]) return;\n        visited[i] = true;\n    \
    \    visited[j] = true;\n        if(i === j) result.push(grid[i][j]);\n      \
    \  else{\n            dfs(i + 1, j);\n            dfs(i, j + 1);\n        }\n\
    \    }\n    for(var i = 0; i < grid.length; i++){\n        for(var j = 0; j <\
    \ grid[i].length; j++){\n            dfs(i, j);\n        }\n    }\n    return\
    \ result;\n}\n", "    var len = grid.length;\n    var result = [];\n    var dp\
    \ = [];\n    var i, j;\n    for(i = 0; i < len; i++){\n        dp[i] = [];\n \
    \       for(j = 0; j < len; j++){\n            dp[i][j] = grid[i][j];\n      \
    \  }\n    }\n    \n    for(i = 0; i < len; i++){\n        for(j = 0; j < len;\
    \ j++){\n            if(i == 0 && j == 0){\n                dp[i][j] = grid[i][j];\n\
    \            }else if(i == 0){\n                dp[i][j] = Math.min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n            }else if(j == 0){\n               \
    \ dp[i][j] = Math.min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            }else{\n\
    \                dp[i][j] = Math.min(dp[i][j], Math.min(dp[i - 1][j], dp[i][j\
    \ - 1]) + grid[i][j]);\n            }\n        }\n    }\n    \n    for(i = 0;\
    \ i < len; i++){\n        for(j = 0; j < len; j++){\n            result.push(dp[i][j]);\n\
    \        }\n    }\n    \n    return result;\n}\n", "    var dp = [];\n    for(var\
    \ i = 0; i < grid.length; i++){\n        dp[i] = [];\n        for(var j = 0; j\
    \ < grid[i].length; j++){\n            dp[i][j] = grid[i][j];\n        }\n   \
    \ }\n    for(var i = 0; i < grid.length; i++){\n        for(var j = 0; j < grid[i].length;\
    \ j++){\n            for(var l = 0; l < grid[i].length; l++){\n              \
    \  if(i > 0 && j > 0 && grid[i][j] < grid[i-1][j-1]){\n                    dp[i][j]\
    \ = Math.min(dp[i][j], dp[i-1][j-1]);\n                }\n                if(i\
    \ > 0 && j < grid[i].length - 1 && grid[i][j] < grid[i-1][j+1]){\n           \
    \         dp[i][j] = Math.min(dp[i][j], dp[i-1][j+1]);\n                }\n  \
    \              if(i < grid.length - 1 && j > 0 && grid[i][j] < grid[i+1][j-1]){\n\
    \                    dp[i][j] = Math.min(dp[i][j], dp[i+1][j-1]);\n          \
    \      }\n                if(i < grid.length - 1 && j < grid[i].length - 1 &&\
    \ grid[i][j] < grid[i+1][j+1]){\n                    dp[i][j] = Math.min(dp[i][j],\
    \ dp[i+1][j+1]);\n                }\n            }\n        }\n    }\n    var\
    \ result = [];\n    for(var i = 0; i < k; i++){\n        result.push(dp[0][0]);\n\
    \        for(var j = 0; j < dp.length; j++){\n            for(var l = 0; l < dp[j].length;\
    \ l++){\n                if(dp[j][l] == dp[0][0]){\n                    dp[j][l",
  "    var i, j, min = grid[0][0], min_i = 0, min_j = 0;\n    for(i = 0; i < grid.length;\
    \ i++){\n        for(j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ < min){\n                min = grid[i][j];\n                min_i = i;\n   \
    \             min_j = j;\n            }\n        }\n    }\n    var lst = [];\n\
    \    for(i = 0; i < k; i++){\n        lst.push(grid[min_i][min_j]);\n        min_i\
    \ = Math.floor(min_i / 2);\n        min_j = Math.floor(min_j / 2);\n        if(min_i\
    \ === 0 && min_j === 0){\n            break;\n        }\n    }\n    return lst;\n\
    }\n", "    var dp = new Array(grid.length * grid[0].length);\n    for(var i =\
    \ 0; i < grid.length; i++){\n        for(var j = 0; j < grid[i].length; j++){\n\
    \            dp[i * grid[0].length + j] = grid[i][j];\n        }\n    }\n    var\
    \ result = [];\n    var min = dp[0];\n    for(var i = 0; i < dp.length; i++){\n\
    \        if(dp[i] < min){\n            min = dp[i];\n            result = [i /\
    \ grid[0].length, i % grid[0].length];\n        }\n    }\n    for(var i = 0; i\
    \ < result.length; i++){\n        for(var j = 0; j < result.length; j++){\n  \
    \          if(i != j){\n                if(dp[result[i] * grid[0].length + j]\
    \ < dp[result[j] * grid[0].length + i]){\n                    result[i] = result[j];\n\
    \                }\n            }\n        }\n    }\n    for(var i = 0; i < result.length;\
    \ i++){\n        result[i] = result[i] * grid[0].length + i;\n    }\n    return\
    \ result;\n}\n", "    var result = [];\n    var visited = [];\n    var i = 0;\n\
    \    var j = 0;\n    var min = grid[0][0];\n    var min_index = 0;\n    \n   \
    \ for(i = 0; i < grid.length; i++){\n        for(j = 0; j < grid[i].length; j++){\n\
    \            if(visited[i] == false && visited[j] == false){\n               \
    \ visited[i] = true;\n                visited[j] = true;\n                if(grid[i][j]\
    \ < min){\n                    min = grid[i][j];\n                    min_index\
    \ = i;\n                }\n            }\n        }\n    }\n    \n    result.push(min);\n\
    \    \n    while(k > 1){\n        visited[min_index] = true;\n        min = grid[min_index][0];\n\
    \        min_index = 0;\n        \n        for(i = 0; i < grid.length; i++){\n\
    \            for(j = 0; j < grid[i].length; j++){\n                if(visited[i]\
    \ == false && visited[j] == false){\n                    visited[i] = true;\n\
    \                    visited[j] = true;\n                    if(grid[i][j] < min){\n\
    \                        min = grid[i][j];\n                        min_index\
    \ = i;\n                    }\n                }\n            }\n        }\n \
    \       \n        result.push(min);\n        k--;\n    }\n    \n    return result;\n\
    }\n", "    var i, j, min = [],\n        n = grid.length,\n        m = grid[0].length,\n\
    \        visited = [],\n        min_index = 0;\n    \n    for(i = 0; i < n; i++){\n\
    \        for(j = 0; j < m; j++){\n            if(!visited[i][j]){\n          \
    \      visited[i][j] = true;\n                min_index = min_index || 1;\n  \
    \              min[min_index] = grid[i][j];\n                min_index++;\n  \
    \              min_index = min_index || 1;\n                min[min_index] = grid[i][j];\n\
    \                min_index++;\n                min_index = min_index || 1;\n \
    \               min[min_index] = grid[i][j];\n                min_index++;\n \
    \               min_index = min_index || 1;\n                min[min_index] =\
    \ grid[i][j];\n                min_index++;\n                min_index = min_index\
    \ || 1;\n                min[min_index] = grid[i][j];\n                min_index++;\n\
    \                min_index = min_index || 1;\n                min[min_index] =\
    \ grid[i][j];\n                min_index++;\n                min_index = min_index\
    \ || 1;\n                min[min_index] = grid[i][j];\n                min_index++;\n\
    \                min_index = min_index || 1;\n                min[min_index] =\
    \ grid[i][j];\n                min_index++;\n                min_index = min_index\
    \ || 1;\n                min[min_index] = grid[i][j];\n                min_index++;\n\
    \                min_index = min_index || 1;\n                min[min_index] =\
    \ grid[i][j];\n                min_index++;\n                min_index = min_index\
    \ || 1;\n                min[min_index] = grid[i][j];\n                min_index++;\n\
    \                min_index = min_index || 1;\n                min[min_index] =\
    \ grid[i][j];\n                min_index++;\n                min_index = min_index\
    \ || 1;\n                min[", "    var i, j, min = grid[0][0], min_index = 0;\n\
    \    for(i = 0; i < grid.length; i++){\n        for(j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] < min){\n                min = grid[i][j];\n\
    \                min_index = [i, j];\n            }\n        }\n    }\n    var\
    \ path = [];\n    while(min_index.length > 0){\n        path.push(min);\n    \
    \    min = grid[min_index[0]][min_index[1]];\n        min_index = [min_index[0]\
    \ + 1, min_index[1]];\n        if(min_index[0] >= grid.length){\n            min_index\
    \ = [0, min_index[1] + 1];\n        }\n        if(min_index[1] >= grid[min_index[0]].length){\n\
    \            min_index = [min_index[0] + 1, 0];\n        }\n    }\n    return\
    \ path.slice(0, k);\n}\n", "    var len = grid.length;\n    var len2 = len * len;\n\
    \    var result = [];\n    var dp = [];\n    var dp2 = [];\n    for(var i = 0;\
    \ i < len; i++){\n        dp[i] = [];\n        for(var j = 0; j < len; j++){\n\
    \            dp[i][j] = grid[i][j];\n        }\n    }\n    for(var i = 0; i <\
    \ len2; i++){\n        dp2[i] = [];\n        for(var j = 0; j < len; j++){\n \
    \           dp2[i][j] = Infinity;\n        }\n    }\n    dp2[0][0] = 0;\n    for(var\
    \ i = 0; i < len; i++){\n        for(var j = 0; j < len; j++){\n            if(i\
    \ == 0 && j == 0){\n                dp2[i + j][0] = 0;\n            }\n      \
    \      else if(i == 0){\n                dp2[i + j][0] = dp2[i + j - 1][0] + grid[i][j];\n\
    \            }\n            else if(j == 0){\n                dp2[i + j][0] =\
    \ dp2[i - 1][0] + grid[i][j];\n            }\n            else{\n            \
    \    dp2[i + j][0] = Math.min(dp2[i - 1][0] + grid[i][j], dp2[i][j - 1] + grid[i][j]);\n\
    \            }\n        }\n    }\n    for(var i = 0; i < len; i++){\n        for(var\
    \ j = 0; j < len; j++){\n            if(i == 0 && j == 0){\n                dp2[i\
    \ + j][0] = 0;\n            }\n            else if(i == 0){\n                dp2[i\
    \ + j][0] = dp2[i + j - 1][0] + grid[i][j];\n            }\n            else if(j\
    \ == 0){\n                dp2[i + j][0] = dp2[i - 1][", "    var rows = grid.length,\n\
    \        cols = grid[0].length,\n        min = [],\n        visited = [],\n  \
    \      i, j,\n        min_index = 0,\n        min_value = grid[0][0];\n\n    for(i\
    \ = 0; i < rows; i++){\n        for(j = 0; j < cols; j++){\n            if(visited[i]\
    \ || visited[j]) continue;\n            visited[i] = true;\n            visited[j]\
    \ = true;\n            if(grid[i][j] < min_value){\n                min_value\
    \ = grid[i][j];\n                min_index = i;\n            }\n        }\n  \
    \  }\n\n    for(i = 0; i < rows; i++){\n        for(j = 0; j < cols; j++){\n \
    \           if(visited[i] || visited[j]) continue;\n            visited[i] = true;\n\
    \            visited[j] = true;\n            if(grid[i][j] < min_value){\n   \
    \             min_value = grid[i][j];\n                min_index = i;\n      \
    \      }\n        }\n    }\n\n    for(i = 0; i < rows; i++){\n        for(j =\
    \ 0; j < cols; j++){\n            if(visited[i] || visited[j]) continue;\n   \
    \         visited[i] = true;\n            visited[j] = true;\n            if(grid[i][j]\
    \ < min_value){\n                min_value = grid[i][j];\n                min_index\
    \ = i;\n            }\n        }\n    }\n\n    for(i = 0; i < rows; i++){\n  \
    \      for(j = 0; j < cols; j++){\n            if(visited[i] || visited[j]) continue;\n\
    \            visited[i] = true;\n            visited[j] = true;\n            if(grid[i][j]\
    \ < min_value){\n                min_value = grid[i][j];\n                min_index\
    \ = i;\n            }\n        }\n    }\n\n    for(i = 0; i <", "  var n = grid.length,\n\
    \      m = grid[0].length,\n      dp = new Array(n * m),\n      i, j,\n      min\
    \ = Infinity;\n\n  for(i = 0; i < n; i++){\n    for(j = 0; j < m; j++){\n    \
    \  dp[i * m + j] = grid[i][j] + Math.min(\n        dp[(i - 1) * m + j],\n    \
    \    dp[i * m + (j - 1)],\n        dp[(i - 1) * m + (j - 1)]\n      );\n     \
    \ min = Math.min(min, dp[i * m + j]);\n    }\n  }\n\n  return dp.slice(0, k).sort(function(a,\
    \ b){\n    return a - b;\n  });\n}\n", "    var i, j, lst = [],\n        n = grid.length,\n\
    \        m = grid[0].length,\n        visited = [],\n        min = Infinity;\n\
    \    \n    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n        \
    \    if(!visited[i][j]){\n                lst = [grid[i][j]];\n              \
    \  visited[i][j] = true;\n                min = Math.min(min, k);\n          \
    \      while(lst.length < k){\n                    lst.push(grid[i][j]);\n   \
    \                 i = i - 1;\n                    j = j + 1;\n               \
    \     if(i < 0 || j >= m) break;\n                    visited[i][j] = true;\n\
    \                }\n            }\n        }\n    }\n    return lst;\n}\n", " \
    \   var i, j, min = Infinity, min_index = -1, min_value = Infinity;\n    var lst\
    \ = [];\n    for(i = 0; i < grid.length; i++){\n        lst[i] = [];\n       \
    \ for(j = 0; j < grid[i].length; j++){\n            lst[i][j] = grid[i][j];\n\
    \        }\n    }\n    for(i = 0; i < lst.length; i++){\n        for(j = 0; j\
    \ < lst[i].length; j++){\n            if(lst[i][j] < min){\n                min\
    \ = lst[i][j];\n                min_index = i;\n                min_value = j;\n\
    \            }\n        }\n    }\n    var path = [];\n    while(min_index > 0\
    \ && min_index < lst.length && min_value > 0 && min_value < lst[min_index].length){\n\
    \        path.push(lst[min_index][min_value]);\n        min_index = Math.floor(min_index\
    \ / 2);\n        min_value = Math.floor(min_value / 2);\n    }\n    path.reverse();\n\
    \    return path;\n}\n", "    var i, j, min = Infinity, min_i = 0, min_j = 0;\n\
    \    var lst = [];\n    for(i = 0; i < grid.length; i++){\n        for(j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] < min){\n             \
    \   min = grid[i][j];\n                min_i = i;\n                min_j = j;\n\
    \            }\n            lst.push(grid[i][j]);\n        }\n    }\n    for(i\
    \ = 0; i < k; i++){\n        if(lst[i] < min){\n            min = lst[i];\n  \
    \          min_i = i;\n            min_j = i;\n        }\n    }\n    return lst.slice(0,\
    \ k);\n}\n", "    var i, j, lst = [],\n        n = grid.length,\n        m = grid[0].length,\n\
    \        visited = [];\n    \n    for(i = 0; i < n; i++){\n        for(j = 0;\
    \ j < m; j++){\n            if(visited[i] || visited[j]) continue;\n         \
    \   lst.push(grid[i][j]);\n            visited[i] = true;\n            visited[j]\
    \ = true;\n            if(k === 1){\n                break;\n            }\n \
    \           \n            // go to the neighbors\n            if(i > 0 && !visited[i-1]){\n\
    \                lst.push(grid[i-1][j]);\n                visited[i-1] = true;\n\
    \            }\n            if(i < n-1 && !visited[i+1]){\n                lst.push(grid[i+1][j]);\n\
    \                visited[i+1] = true;\n            }\n            if(j > 0 &&\
    \ !visited[i][j-1]){\n                lst.push(grid[i][j-1]);\n              \
    \  visited[i][j-1] = true;\n            }\n            if(j < m-1 && !visited[i][j+1]){\n\
    \                lst.push(grid[i][j+1]);\n                visited[i][j+1] = true;\n\
    \            }\n        }\n    }\n    \n    return lst;\n}\n", "    var i, j,\
    \ len, min, min_index, min_value, min_path, path, path_index, path_value;\n  \
    \  \n    // find the minimum value in the grid\n    min = grid[0][0];\n    for(i\
    \ = 0; i < grid.length; i++){\n        for(j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] < min){\n                min = grid[i][j];\n      \
    \      }\n        }\n    }\n    \n    // find the minimum path\n    min_path =\
    \ [];\n    min_index = 0;\n    for(i = 0; i < grid.length; i++){\n        for(j\
    \ = 0; j < grid[i].length; j++){\n            if(grid[i][j] == min){\n       \
    \         min_path.push(grid[i][j]);\n                min_index = i * grid[i].length\
    \ + j;\n            }\n        }\n    }\n    \n    // find the path\n    path\
    \ = [];\n    path_index = 0;\n    path_value = 0;\n    for(i = 0; i < min_path.length;\
    \ i++){\n        if(min_path[i] == min){\n            path.push(min_path[i]);\n\
    \            path_index = i;\n            path_value = min_path[i];\n        }\n\
    \    }\n    \n    // find the minimum path\n    while(path_index < min_path.length\
    \ && path_index < k){\n        path_index++;\n        path_value = min_path[path_index];\n\
    \        for(i = 0; i < path.length; i++){\n            if(path[i] == path_value){\n\
    \                path.push(path_value);\n                path_index = i;\n   \
    \             path_value = min_path[path_index];\n                break;\n   \
    \         }\n        }\n    }\n    \n    return path;\n}", "  var i, j, lst =\
    \ [],\n      n = grid.length,\n      m = grid[0].length,\n      visited = [],\n\
    \      min = Infinity;\n\n  for(i = 0; i < n; i++){\n    for(j = 0; j < m; j++){\n\
    \      if(visited[i] || visited[j]) continue;\n      lst.push(grid[i][j]);\n \
    \     visited[i] = true;\n      visited[j] = true;\n      if(lst.length === k){\n\
    \        min = Math.min(min, lst.sort(function(a, b){return a - b;}));\n     \
    \   lst = [];\n      }\n    }\n  }\n  return min === Infinity ? [] : lst;\n}\n",
  "    var i, j, len = grid.length,\n        result = [],\n        min = Infinity,\n\
    \        min_index = 0;\n    \n    for(i = 0; i < len; i++){\n        for(j =\
    \ 0; j < len; j++){\n            if(grid[i][j] < min){\n                min =\
    \ grid[i][j];\n                min_index = j;\n            }\n        }\n    \
    \    result.push(min);\n        min = Infinity;\n        min_index = 0;\n    }\n\
    \    \n    for(i = 0; i < len; i++){\n        for(j = 0; j < len; j++){\n    \
    \        if(grid[i][j] == min){\n                if(j - 1 >= 0 && grid[i][j -\
    \ 1] < min){\n                    min = grid[i][j - 1];\n                    min_index\
    \ = j - 1;\n                }\n                if(j + 1 < len && grid[i][j + 1]\
    \ < min){\n                    min = grid[i][j + 1];\n                    min_index\
    \ = j + 1;\n                }\n            }\n        }\n        result.push(min);\n\
    \        min = Infinity;\n        min_index = 0;\n    }\n    \n    for(i = 0;\
    \ i < len; i++){\n        for(j = 0; j < len; j++){\n            if(grid[i][j]\
    \ == min){\n                if(i - 1 >= 0 && grid[i - 1][j] < min){\n        \
    \            min = grid[i - 1][j];\n                    min_index = i - 1;\n \
    \               }\n                if(i + 1 < len && grid[i + 1][j] < min){\n\
    \                    min = grid[i + 1][j];\n                    min_index = i\
    \ + 1;\n                }\n            }\n        }\n        result.push(min);\n\
    \        min = Infinity;\n        min_index = 0;\n    }\n    \n    for(i = 0;\
    \ i < len; i++){\n        for(j = 0; j < len; j++){\n            if(grid[i][j]\
    \ == min){\n                if(i", "    let m = grid.length, n = grid[0].length;\n\
    \    let dp = new Array(m).fill(0);\n    let lst = new Array(m).fill(0);\n   \
    \ let i, j;\n    for(i = 0; i < m; i++){\n        for(j = 0; j < n; j++){\n  \
    \          if(i === 0 && j === 0){\n                dp[i] = grid[i][j];\n    \
    \            lst[i] = grid[i][j];\n            }else if(i === 0){\n          \
    \      dp[i] = Math.min(dp[i], dp[i-1] + grid[i][j]);\n                lst[i]\
    \ = dp[i];\n            }else if(j === 0){\n                dp[i] = Math.min(dp[i],\
    \ dp[i-1] + grid[i][j]);\n                lst[i] = dp[i];\n            }else{\n\
    \                dp[i] = Math.min(dp[i], Math.min(dp[i-1], dp[i-1]+grid[i][j]));\n\
    \                lst[i] = dp[i];\n            }\n        }\n    }\n    let result\
    \ = [];\n    for(i = 0; i < k; i++){\n        result.push(lst[i]);\n    }\n  \
    \  return result;\n}\n", "    var n = grid.length;\n    var m = grid[0].length;\n\
    \    var dp = [];\n    var dp_i = [];\n    var dp_j = [];\n    var dp_k = [];\n\
    \    var dp_l = [];\n    var dp_m = [];\n    var dp_n = [];\n    var dp_o = [];\n\
    \    var dp_p = [];\n    var dp_q = [];\n    var dp_r = [];\n    var dp_s = [];\n\
    \    var dp_t = [];\n    var dp_u = [];\n    var dp_v = [];\n    var dp_w = [];\n\
    \    var dp_x = [];\n    var dp_y = [];\n    var dp_z = [];\n    var dp_a = [];\n\
    \    var dp_b = [];\n    var dp_c = [];\n    var dp_d = [];\n    var dp_e = [];\n\
    \    var dp_f = [];\n    var dp_g = [];\n    var dp_h = [];\n    var dp_i = [];\n\
    \    var dp_j = [];\n    var dp_k = [];\n    var dp_l = [];\n    var dp_m = [];\n\
    \    var dp_n = [];\n    var dp_o = [];\n    var dp_p = [];\n    var dp_q = [];\n\
    \    var dp_r = [];\n    var dp_s = [];\n    var dp_t = [];\n    var dp_u = [];\n\
    \    var dp_v = [];\n    var dp_w = [];\n    var dp_x = [];\n    var dp_y = [];\n\
    \    var dp_z = [];\n    var dp_a = [];\n    var dp_b = [];\n    var dp_c = [];\n\
    \    var dp_d = [];\n    var dp_e = [];\n    var dp_f = [];\n    var dp_g = [];\n\
    \    var dp_h = [];\n    var dp_i = [];\n    var dp_j = [];", "    let result\
    \ = [];\n    let visited = [];\n    let min = Infinity;\n    let min_index = 0;\n\
    \    let i = 0;\n    let j = 0;\n    let cur = grid[0][0];\n    while(i < grid.length\
    \ && j < grid[0].length){\n        visited.push(cur);\n        if(i === 0 && j\
    \ === 0){\n            min = grid[i][j];\n            min_index = 0;\n       \
    \ }\n        else if(i === 0){\n            min = Math.min(min, grid[i][j]);\n\
    \            min_index = j;\n        }\n        else if(j === 0){\n          \
    \  min = Math.min(min, grid[i][j]);\n            min_index = i;\n        }\n \
    \       else{\n            min = Math.min(min, grid[i][j]);\n            min_index\
    \ = Math.min(min_index, j);\n        }\n        if(min === k){\n            result.push(grid[i][j]);\n\
    \            i++;\n            j++;\n        }\n        else if(min === grid[i][j]){\n\
    \            i++;\n            j++;\n        }\n        else if(min === grid[i][j]\
    \ + 1){\n            i++;\n        }\n        else if(min === grid[i][j] - 1){\n\
    \            j++;\n        }\n        else{\n            i++;\n            j++;\n\
    \        }\n        cur = visited[visited.length - 1];\n    }\n    return result;\n\
    }\n", "    let rows = grid.length;\n    let cols = grid[0].length;\n    let dp\
    \ = new Array(rows);\n    for(let i = 0; i < rows; i++){\n        dp[i] = new\
    \ Array(cols);\n        for(let j = 0; j < cols; j++){\n            dp[i][j] =\
    \ grid[i][j];\n        }\n    }\n    let result = [];\n    let dp_i = 0;\n   \
    \ let dp_j = 0;\n    while(k > 0){\n        let i = dp_i;\n        let j = dp_j;\n\
    \        let min = dp[i][j];\n        let next_i = i;\n        let next_j = j;\n\
    \        let next_min = min;\n        let next_next_i = i;\n        let next_next_j\
    \ = j;\n        let next_next_min = min;\n        let next_next_next_i = i;\n\
    \        let next_next_next_j = j;\n        let next_next_next_min = min;\n  \
    \      let next_next_next_next_i = i;\n        let next_next_next_next_j = j;\n\
    \        let next_next_next_next_min = min;\n        let next_next_next_next_next_i\
    \ = i;\n        let next_next_next_next_next_j = j;\n        let next_next_next_next_next_min\
    \ = min;\n        let next_next_next_next_next_next_i = i;\n        let next_next_next_next_next_next_j\
    \ = j;\n        let next_next_next_next_next_next_min = min;\n        let next_next_next_next_next_next_next_i\
    \ = i;\n        let next_next_next_next_next_next_next_j = j;\n        let next_next_next_next_next_next_next_min\
    \ = min;\n        let next_next_next_next_next_next_next_next_i = i;\n       \
    \ let next_next_next_next", "    var i, j, lst = [],\n        n = grid.length,\n\
    \        m = grid[0].length,\n        visited = [],\n        min = Infinity;\n\
    \    \n    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n        \
    \    if(visited[i] || visited[j]) continue;\n            if(grid[i][j] < min){\n\
    \                min = grid[i][j];\n                lst = [i, j];\n          \
    \  }\n        }\n        visited[lst[0]] = true;\n        visited[lst[1]] = true;\n\
    \    }\n    \n    for(i = 0; i < k; i++){\n        lst = [lst[0] + 1, lst[1] +\
    \ 1];\n        if(lst[0] >= n || lst[1] >= m) break;\n        if(visited[lst[0]]\
    \ && visited[lst[1]]) break;\n        visited[lst[0]] = true;\n        visited[lst[1]]\
    \ = true;\n    }\n    \n    return lst;\n}\n", "    var result = [];\n    var\
    \ dp = [];\n    var visited = [];\n    var i, j, n, m;\n    var min = Number.MAX_VALUE;\n\
    \    var min_index = -1;\n    \n    for(i = 0; i < grid.length; i++){\n      \
    \  for(j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 0){\n \
    \               continue;\n            }\n            \n            if(visited[i]\
    \ === false && visited[j] === false){\n                dp[i] = [];\n         \
    \       visited[i] = true;\n                \n                for(n = 0; n < grid.length;\
    \ n++){\n                    if(grid[n][j] !== 0){\n                        dp[i][n]\
    \ = grid[i][j];\n                    }\n                }\n                \n\
    \                for(m = 0; m < grid.length; m++){\n                    if(grid[i][m]\
    \ !== 0){\n                        dp[i][m] = grid[i][m];\n                  \
    \  }\n                }\n            }\n            \n            if(dp[i][j]\
    \ < min){\n                min = dp[i][j];\n                min_index = i;\n \
    \           }\n        }\n    }\n    \n    if(min_index === -1){\n        return\
    \ result;\n    }\n    \n    result.push(min);\n    \n    while(k > 0){\n     \
    \   result.unshift(dp[min_index][k]);\n        k--;\n        min_index = dp[min_index][k];\n\
    \    }\n    \n    return result;\n}\n", "    var i, j, lst = [],\n        n =\
    \ grid.length,\n        m = grid[0].length,\n        visited = [],\n        min\
    \ = Infinity;\n    \n    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n\
    \            if(!visited[i][j]){\n                lst = [grid[i][j]];\n      \
    \          visited[i][j] = true;\n                min = Math.min(min, k);\n  \
    \              while(lst.length < k){\n                    lst.push(grid[i][j]);\n\
    \                    visited[i][j] = true;\n                    i = Math.floor(i\
    \ / 2);\n                    j = Math.floor(j / 2);\n                }\n     \
    \       }\n        }\n    }\n    \n    return lst.sort(function(a, b){\n     \
    \   return a - b;\n    });\n}\n", "    var n = grid.length,\n        m = grid[0].length,\n\
    \        result = [],\n        i, j,\n        min = Infinity,\n        min_i,\
    \ min_j;\n\n    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n   \
    \         if(grid[i][j] < min){\n                min = grid[i][j];\n         \
    \       min_i = i;\n                min_j = j;\n            }\n        }\n   \
    \ }\n\n    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n        \
    \    if(grid[i][j] === min){\n                result.push(grid[i][j]);\n     \
    \       }\n        }\n    }\n\n    for(i = 0; i < k; i++){\n        if(result[i]\
    \ === min){\n            result.splice(i, 1);\n        }\n    }\n\n    return\
    \ result;\n}\n\nminPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3);\nminPath([[5, 9,\
    \ 3], [4, 1, 6], [7, 8, 2]], 1);\nminPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 2);\n\
    minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 3);\nminPath([[5, 9, 3], [4, 1, 6],\
    \ [7, 8, 2]], 4);\nminPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 5);\nminPath([[5,\
    \ 9, 3], [4, 1, 6], [7, 8, 2]], 6);\nminPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]],\
    \ 7);\nminPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 8);\nminPath([[5, 9, 3], [4,\
    \ 1, 6], [7,", "    var i, j, len, min, min_i, min_j, min_len, min_lst, lst, lst_i,\
    \ lst_j, lst_len, lst_lst, lst_lst_i, lst_lst_j, lst_lst_len;\n    \n    if(grid.length\
    \ < 2 || grid[0].length < 2) return [];\n    \n    lst = [];\n    lst_i = [];\n\
    \    lst_j = [];\n    lst_len = [];\n    lst_lst = [];\n    lst_lst_i = [];\n\
    \    lst_lst_j = [];\n    lst_lst_len = [];\n    \n    for(i = 0; i < grid.length;\
    \ i++){\n        for(j = 0; j < grid[i].length; j++){\n            lst.push(grid[i][j]);\n\
    \            lst_i.push(i);\n            lst_j.push(j);\n            lst_len.push(1);\n\
    \            lst_lst.push([i, j]);\n            lst_lst_i.push(i);\n         \
    \   lst_lst_j.push(j);\n            lst_lst_len.push(1);\n        }\n    }\n \
    \   \n    min = Infinity;\n    min_i = 0;\n    min_j = 0;\n    min_len = 0;\n\
    \    min_lst = [];\n    min_lst_i = [];\n    min_lst_j = [];\n    min_lst_len\
    \ = [];\n    \n    for(i = 0; i < lst_len.length; i++){\n        if(lst_len[i]\
    \ < min){\n            min = lst_len[i];\n            min_i = lst_i[i];\n    \
    \        min_j = lst_j[i];\n            min_len = lst_len[i];\n            min_lst\
    \ = lst_lst[i];\n            min_lst_i = lst_lst_i[i];\n            min_l", " \
    \   var i, j, min = Infinity, min_i = -1, min_j = -1;\n    var lst = [];\n   \
    \ for(i = 0; i < grid.length; i++){\n        for(j = 0; j < grid[i].length; j++){\n\
    \            lst.push(grid[i][j]);\n        }\n    }\n    for(i = 0; i < lst.length;\
    \ i++){\n        for(j = 0; j < lst.length; j++){\n            if(i !== j && lst[i]\
    \ < lst[j]){\n                if(min > lst[i] + lst[j]){\n                   \
    \ min = lst[i] + lst[j];\n                    min_i = i;\n                   \
    \ min_j = j;\n                }\n            }\n        }\n    }\n    if(min ===\
    \ Infinity) return [];\n    var path = [];\n    for(i = 0; i < k; i++){\n    \
    \    path.push(lst[min_i]);\n        min_i = min_i === 0 ? lst.length - 1 : min_i\
    \ - 1;\n        min_j = min_j === 0 ? lst.length - 1 : min_j - 1;\n        min\
    \ = lst[min_i] + lst[min_j];\n    }\n    return path;\n}\n", "    var i, j, min\
    \ = [],\n        n = grid.length,\n        m = grid[0].length,\n        visited\
    \ = [],\n        path = [];\n\n    for(i = 0; i < n; i++){\n        visited[i]\
    \ = [];\n        for(j = 0; j < m; j++){\n            visited[i][j] = false;\n\
    \        }\n    }\n\n    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n\
    \            if(visited[i][j] === false){\n                visited[i][j] = true;\n\
    \                path.push(grid[i][j]);\n                if(path.length === k){\n\
    \                    min = path;\n                    break;\n               \
    \ }\n                if(i > 0){\n                    path.push(grid[i - 1][j]);\n\
    \                    if(path.length === k){\n                        min = path;\n\
    \                        break;\n                    }\n                }\n  \
    \              if(j > 0){\n                    path.push(grid[i][j - 1]);\n  \
    \                  if(path.length === k){\n                        min = path;\n\
    \                        break;\n                    }\n                }\n  \
    \              if(i > 0 && j > 0){\n                    path.push(grid[i - 1][j\
    \ - 1]);\n                    if(path.length === k){\n                       \
    \ min = path;\n                        break;\n                    }\n       \
    \         }\n            }\n        }\n    }\n    return min;\n}\n", "    var\
    \ i, j, min = Number.MAX_VALUE, min_i = 0, min_j = 0;\n    for(i = 0; i < grid.length;\
    \ i++){\n        for(j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ < min){\n                min = grid[i][j];\n                min_i = i;\n   \
    \             min_j = j;\n            }\n        }\n    }\n    var lst = [];\n\
    \    var lst_i = [];\n    var lst_j = [];\n    var lst_i_j = [];\n    var lst_i_j_i\
    \ = [];\n    var lst_i_j_i_j = [];\n    var lst_i_j_i_j_k = [];\n    for(i = 0;\
    \ i < grid.length; i++){\n        for(j = 0; j < grid[i].length; j++){\n     \
    \       lst.push(grid[i][j]);\n            lst_i.push(i);\n            lst_j.push(j);\n\
    \            lst_i_j.push(i);\n            lst_i_j_i.push(i);\n            lst_i_j_i_j.push(i);\n\
    \            lst_i_j_i_j_k.push(i);\n        }\n    }\n    for(i = 0; i < k; i++){\n\
    \        lst_i_j_i_j_k.push(min_i);\n        lst_i_j_i_j_k.push(min_j);\n    \
    \    lst_i_j_i_j_k.push(lst_i_j_i_j[lst_i_j_i_j_k.length - 3]);\n        lst_i_j_i_j_k.push(lst_i_j_i_j[lst_i_j_i_j_k.length\
    \ - 2]);\n        lst_i_j_i_j_k.push(lst_i_j_i_j[lst_i_", "    var row = grid.length;\n\
    \    var col = grid[0].length;\n    var dp = [];\n    var dp_row = [];\n    var\
    \ dp_col = [];\n    for(var i = 0; i < row; i++){\n        dp_row[i] = [];\n \
    \       for(var j = 0; j < col; j++){\n            dp_row[i][j] = [];\n      \
    \      dp_col[i][j] = [];\n        }\n    }\n    for(var i = 0; i < row; i++){\n\
    \        for(var j = 0; j < col; j++){\n            dp[i][j] = grid[i][j];\n \
    \           dp_row[i][j] = grid[i][j];\n            dp_col[i][j] = grid[i][j];\n\
    \        }\n    }\n    for(var i = 0; i < row; i++){\n        for(var j = 0; j\
    \ < col; j++){\n            for(var ii = 0; ii < row; ii++){\n               \
    \ for(var jj = 0; jj < col; jj++){\n                    if(i == ii && j == jj){\n\
    \                        continue;\n                    }\n                  \
    \  if(i == ii && j != jj){\n                        dp[i][j] = Math.min(dp[i][j],\
    \ dp[ii][jj] + grid[i][j]);\n                        dp_row[i][j] = Math.min(dp_row[i][j],\
    \ dp_row[ii][jj] + grid[i][j]);\n                        dp_col[i][j] = Math.min(dp_col[i][j],\
    \ dp_col[ii][jj] + grid[i][j]);\n                    }\n                    if(i\
    \ != ii && j == jj){\n                        dp[i][j] = Math.min(dp[i][j], dp[ii][jj]\
    \ + grid[i][j]);\n                        dp_row[i][j] = Math.min(dp_row[i][j],\
    \ dp_row[ii][jj] + grid[i][j]);\n                        dp_col[i][j]", "    var\
    \ i, j, min = [],\n        n = grid.length,\n        m = grid[0].length,\n   \
    \     visited = [],\n        path = [],\n        min_path = [],\n        min_len\
    \ = 0,\n        min_index = 0;\n    \n    for(i = 0; i < n; i++){\n        for(j\
    \ = 0; j < m; j++){\n            if(visited[i] || visited[j]) continue;\n    \
    \        visited[i] = visited[j] = true;\n            path.push([i, j]);\n   \
    \         if(min_len === 0){\n                min_len = k;\n                min_index\
    \ = 0;\n                min[0] = grid[i][j];\n            }\n            else\
    \ if(k > 0){\n                if(grid[i][j] < min[min_index]){\n             \
    \       min_len = k;\n                    min_index = 0;\n                   \
    \ min[0] = grid[i][j];\n                }\n                else if(grid[i][j]\
    \ === min[min_index]){\n                    min_len++;\n                    if(min_len\
    \ === k){\n                        min_path.push(path[min_index]);\n         \
    \           }\n                }\n                else{\n                    min_len\
    \ = k;\n                    min_index = 0;\n                    min[0] = grid[i][j];\n\
    \                }\n            }\n            else{\n                min_len\
    \ = k;\n                min_index = 0;\n                min[0] = grid[i][j];\n\
    \            }\n        }\n    }\n    return min_path;\n}\n", "    var len = grid.length;\n\
    \    var len2 = grid[0].length;\n    var result = [];\n    var dp = [];\n    var\
    \ dp2 = [];\n    var dp3 = [];\n    var dp4 = [];\n    var dp5 = [];\n    var\
    \ dp6 = [];\n    var dp7 = [];\n    var dp8 = [];\n    var dp9 = [];\n    var\
    \ dp10 = [];\n    var dp11 = [];\n    var dp12 = [];\n    var dp13 = [];\n   \
    \ var dp14 = [];\n    var dp15 = [];\n    var dp16 = [];\n    var dp17 = [];\n\
    \    var dp18 = [];\n    var dp19 = [];\n    var dp20 = [];\n    var dp21 = [];\n\
    \    var dp22 = [];\n    var dp23 = [];\n    var dp24 = [];\n    var dp25 = [];\n\
    \    var dp26 = [];\n    var dp27 = [];\n    var dp28 = [];\n    var dp29 = [];\n\
    \    var dp30 = [];\n    var dp31 = [];\n    var dp32 = [];\n    var dp33 = [];\n\
    \    var dp34 = [];\n    var dp35 = [];\n    var dp36 = [];\n    var dp37 = [];\n\
    \    var dp38 = [];\n    var dp39 = [];\n    var dp40 = [];\n    var dp41 = [];\n\
    \    var dp42 = [];\n    var dp43 = [];\n    var dp44 = [];\n    var dp45 = [];\n\
    \    var dp46 = [];\n    var dp47 = [];\n    var dp48 = [];\n    var dp49 = [];\n\
    \    var dp50 = [];\n    var dp51 = [];\n    var dp52 = [];\n    var dp53 = [];\n\
    \    var dp54 = [];\n    var dp55 = [];\n    var dp56 = [];\n    var dp57 = [];\n\
    \    var dp58 = [];\n    var dp59 = [];\n    var dp60 = [];\n    var dp61 =",
  "    var i, j, len = grid.length, len2 = grid[0].length,\n        lst = [], lst2\
    \ = [],\n        min = [], min2 = [];\n    for(i = 0; i < len; i++){\n       \
    \ for(j = 0; j < len2; j++){\n            lst.push(grid[i][j]);\n            lst2.push(grid[i][j]);\n\
    \        }\n    }\n    for(i = 0; i < len; i++){\n        for(j = 0; j < len2;\
    \ j++){\n            if(i > 0 && j > 0){\n                if(lst[i-1] < lst[i]\
    \ && lst[i-1] < lst[j-1]){\n                    lst[i] = lst[i-1];\n         \
    \       }\n                else if(lst[i] < lst[j-1]){\n                    lst[i]\
    \ = lst[j-1];\n                }\n                else{\n                    lst[i]\
    \ = lst[i-1];\n                }\n            }\n            else if(i > 0){\n\
    \                if(lst[i-1] < lst[i]){\n                    lst[i] = lst[i-1];\n\
    \                }\n                else{\n                    lst[i] = lst[i-1];\n\
    \                }\n            }\n            else if(j > 0){\n             \
    \   if(lst[j-1] < lst[i]){\n                    lst[i] = lst[j-1];\n         \
    \       }\n                else{\n                    lst[i] = lst[j-1];\n   \
    \             }\n            }\n            min.push(lst[i]);\n        }\n   \
    \ }\n    for(i = 0; i < len; i++){\n        for(j = 0; j < len2; j++){\n     \
    \       if(i > 0 && j > 0){\n                if(lst2[i-1] < lst2[i] && lst2[i-1]\
    \ < lst2[j-1]){\n                    lst2[i] =", "    var len = grid.length;\n\
    \    var res = [];\n    var dp = [];\n    var dp_len = 0;\n    var dp_i = 0;\n\
    \    for(var i = 0; i < len; i++){\n        dp[i] = [];\n        for(var j = 0;\
    \ j < len; j++){\n            dp[i][j] = grid[i][j];\n        }\n    }\n    for(var\
    \ i = 0; i < len; i++){\n        dp_i = i;\n        for(var j = 0; j < len; j++){\n\
    \            if(i == j){\n                continue;\n            }\n         \
    \   if(dp[i][j] < dp[i][dp_i]){\n                dp_i = j;\n            }\n  \
    \      }\n        dp_len = dp_len + 1;\n        if(dp_len == k){\n           \
    \ res = res.concat(dp[i]);\n            break;\n        }\n        dp[i][dp_i]\
    \ = dp[i][dp_i] + 1;\n        for(var j = 0; j < len; j++){\n            if(i\
    \ == j){\n                continue;\n            }\n            if(dp[i][j] >\
    \ dp[i][dp_i]){\n                dp[i][dp_i] = dp[i][j];\n            }\n    \
    \    }\n    }\n    return res;\n}\n", "    var i, j, lst = [],\n        n = grid.length,\n\
    \        m = grid[0].length,\n        visited = [],\n        min = Infinity;\n\
    \    \n    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n        \
    \    if(!visited[i][j]){\n                lst = [grid[i][j]];\n              \
    \  visited[i][j] = true;\n                min = Math.min(min, findMin(grid, i,\
    \ j, k, lst));\n            }\n        }\n    }\n    return lst;\n}\n\nfunction\
    \ findMin(grid, i, j, k, lst){\n    var i_min, j_min,\n        n = grid.length,\n\
    \        m = grid[0].length,\n        visited = [],\n        min = Infinity;\n\
    \    \n    for(i_min = i - 1; i_min <= i + 1; i_min++){\n        for(j_min = j\
    \ - 1; j_min <= j + 1; j_min++){\n            if(!visited[i_min][j_min]){\n  \
    \              visited[i_min][j_min] = true;\n                min = Math.min(min,\
    \ findMin(grid, i_min, j_min, k, lst));\n            }\n        }\n    }\n   \
    \ return min;\n}", "    var i, j, min = grid[0][0], min_index = 0;\n    for(i\
    \ = 0; i < grid.length; i++){\n        for(j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] < min){\n                min = grid[i][j];\n      \
    \          min_index = i;\n            }\n        }\n    }\n    var lst = [];\n\
    \    var lst_i = [], lst_j = [];\n    var i, j;\n    for(i = 0; i < grid.length;\
    \ i++){\n        for(j = 0; j < grid[i].length; j++){\n            if(i == min_index\
    \ && j == min_index){\n                lst.push(grid[i][j]);\n               \
    \ lst_i.push(i);\n                lst_j.push(j);\n            }\n            else\
    \ if(i == min_index && j != min_index){\n                lst.push(grid[i][j]);\n\
    \                lst_i.push(i);\n                lst_j.push(j);\n            }\n\
    \            else if(i != min_index && j == min_index){\n                lst.push(grid[i][j]);\n\
    \                lst_i.push(i);\n                lst_j.push(j);\n            }\n\
    \            else if(i != min_index && j != min_index){\n                lst.push(grid[i][j]);\n\
    \                lst_i.push(i);\n                lst_j.push(j);\n            }\n\
    \        }\n    }\n    lst_i.sort();\n    lst_j.sort();\n    for(i = 0; i < lst_i.length;\
    \ i++){\n        for(j = 0; j < lst_j.length; j++){\n            if(lst_i[i] ==\
    \ lst_j[j]){\n                lst.push(lst[lst_i[i]]);\n            }\n      \
    \  }\n    }\n    lst.sort();\n    return lst;\n}\n", "    var dp = [];\n    for(var\
    \ i=0; i<grid.length; i++){\n        dp[i] = [];\n        for(var j=0; j<grid[i].length;\
    \ j++){\n            dp[i][j] = grid[i][j];\n        }\n    }\n    \n    for(var\
    \ i=0; i<grid.length; i++){\n        for(var j=0; j<grid[i].length; j++){\n  \
    \          for(var l=0; l<grid[i].length; l++){\n                if(i==l && j==l){\n\
    \                    dp[i][j] = Math.min(dp[i][j], dp[i][j-1] + dp[i][j+1]);\n\
    \                }\n                else if(i==l){\n                    dp[i][j]\
    \ = Math.min(dp[i][j], dp[i][j-1] + dp[i][j+1]);\n                }\n        \
    \        else if(j==l){\n                    dp[i][j] = Math.min(dp[i][j], dp[i-1][j]\
    \ + dp[i+1][j]);\n                }\n                else{\n                 \
    \   dp[i][j] = Math.min(dp[i][j], dp[i-1][j] + dp[i+1][j] + dp[i][j-1] + dp[i][j+1]);\n\
    \                }\n            }\n        }\n    }\n    \n    return dp[0][0];\n\
    }\n", "    var i, j, min = Infinity, min_i = -1, min_j = -1;\n    for(i = 0; i\
    \ < grid.length; i++){\n        for(j = 0; j < grid[i].length; j++){\n       \
    \     if(grid[i][j] < min){\n                min = grid[i][j];\n             \
    \   min_i = i;\n                min_j = j;\n            }\n        }\n    }\n\
    \    var lst = [];\n    for(i = 0; i < grid.length; i++){\n        for(j = 0;\
    \ j < grid[i].length; j++){\n            if(i == min_i && j == min_j){\n     \
    \           lst.push(grid[i][j]);\n            }\n        }\n    }\n    if(lst.length\
    \ < k){\n        return [];\n    }\n    return lst.sort(function(a, b){\n    \
    \    return a - b;\n    });\n}\n", "    var n = grid.length;\n    var m = grid[0].length;\n\
    \    var dp = new Array(n);\n    for(var i = 0; i < n; i++){\n        dp[i] =\
    \ new Array(m);\n        for(var j = 0; j < m; j++){\n            dp[i][j] = grid[i][j];\n\
    \        }\n    }\n    var ans = dp[0][0];\n    for(var i = 0; i < n; i++){\n\
    \        for(var j = 0; j < m; j++){\n            for(var l = 0; l < k; l++){\n\
    \                if(i + 1 < n && dp[i + 1][j] < dp[i][j]){\n                 \
    \   dp[i + 1][j] = dp[i][j];\n                }\n                if(j + 1 < m\
    \ && dp[i][j + 1] < dp[i][j]){\n                    dp[i][j + 1] = dp[i][j];\n\
    \                }\n            }\n            if(i + 1 < n && j + 1 < m && dp[i\
    \ + 1][j + 1] < dp[i][j]){\n                dp[i + 1][j + 1] = dp[i][j];\n   \
    \         }\n            if(i + 1 < n && dp[i + 1][j] < dp[i][j]){\n         \
    \       dp[i + 1][j] = dp[i][j];\n            }\n            if(j + 1 < m && dp[i][j\
    \ + 1] < dp[i][j]){\n                dp[i][j + 1] = dp[i][j];\n            }\n\
    \            if(dp[i][j] < ans){\n                ans = dp[i][j];\n          \
    \  }\n        }\n    }\n    return ans;\n}\n", "    var i, j, min, lst = [],\n\
    \        n = grid.length,\n        m = grid[0].length,\n        visited = [],\n\
    \        path = [];\n    \n    for(i = 0; i < n; i++){\n        for(j = 0; j <\
    \ m; j++){\n            if(visited[i] || visited[j]) continue;\n            lst.push(grid[i][j]);\n\
    \            visited[i] = true;\n            path.push(i);\n            if(k ===\
    \ 1){\n                break;\n            }\n            min = Infinity;\n  \
    \          for(var ii = 0; ii < 4; ii++){\n                if(i + ii >= n || j\
    \ + ii >= m || visited[i + ii] || visited[j + ii]) continue;\n               \
    \ if(grid[i + ii][j + ii] < min){\n                    min = grid[i + ii][j +\
    \ ii];\n                }\n            }\n            if(min < Infinity){\n  \
    \              lst.push(min);\n                visited[i + ii] = true;\n     \
    \           path.push(i + ii);\n            }\n        }\n    }\n    \n    return\
    \ lst.sort(function(a, b){\n        return a - b;\n    });\n}\n\nminPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 3);\n", "    var i, j, lst = [],\n        n =\
    \ grid.length,\n        m = grid[0].length,\n        visited = [],\n        min\
    \ = Infinity,\n        min_index = 0,\n        min_value = Infinity;\n\n    for(i\
    \ = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n            if(!visited[i][j]){\n\
    \                lst.push(grid[i][j]);\n                visited[i][j] = true;\n\
    \            }\n        }\n    }\n\n    for(i = 0; i < k; i++){\n        for(j\
    \ = 0; j < lst.length; j++){\n            if(lst[j] < min){\n                min\
    \ = lst[j];\n                min_index = j;\n            }\n            else if(lst[j]\
    \ == min){\n                if(j < min_index){\n                    min_index\
    \ = j;\n                }\n            }\n        }\n        lst.splice(min_index,\
    \ 1);\n    }\n\n    return lst;\n}\n", "    var i, j, min = Infinity, min_i =\
    \ 0, min_j = 0;\n    var lst = [];\n    for(i = 0; i < grid.length; i++){\n  \
    \      for(j = 0; j < grid[i].length; j++){\n            lst.push(grid[i][j]);\n\
    \        }\n    }\n    for(i = 0; i < lst.length; i++){\n        for(j = 0; j\
    \ < lst.length; j++){\n            if(i == j){\n                continue;\n  \
    \          }\n            if(lst[i] < lst[j] && lst[i] < min){\n             \
    \   min = lst[i];\n                min_i = i;\n                min_j = j;\n  \
    \          }\n        }\n    }\n    if(min == Infinity){\n        return [];\n\
    \    }\n    var path = [];\n    for(i = 0; i < k; i++){\n        path.push(lst[min_i]);\n\
    \        min_i = min_i - 1 < 0 ? lst.length - 1 : min_i - 1;\n        min_j =\
    \ min_j - 1 < 0 ? lst.length - 1 : min_j - 1;\n        lst[min_i] = lst[min_j];\n\
    \        lst[min_j] = min;\n    }\n    return path;\n}\n", "    var i, j, min\
    \ = Infinity, min_i = 0, min_j = 0, min_lst = [];\n    for(i = 0; i < grid.length;\
    \ i++){\n        for(j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ < min){\n                min = grid[i][j];\n                min_i = i;\n   \
    \             min_j = j;\n                min_lst = [];\n            }\n     \
    \       else if(grid[i][j] === min){\n                min_lst.push(grid[i][j]);\n\
    \            }\n        }\n    }\n    \n    if(k === 1){\n        return min_lst;\n\
    \    }\n    \n    var lst = [];\n    for(i = 0; i < min_lst.length; i++){\n  \
    \      for(j = 0; j < min_lst.length; j++){\n            if(i !== j && min_lst[i]\
    \ < min_lst[j]){\n                lst.push(min_lst[i]);\n                break;\n\
    \            }\n        }\n    }\n    \n    return lst;\n}\n", "    var rows =\
    \ grid.length,\n        cols = grid[0].length,\n        visited = [],\n      \
    \  min = [],\n        i, j,\n        min_index = 0,\n        min_value = grid[0][0];\n\
    \n    for(i = 0; i < rows; i++){\n        for(j = 0; j < cols; j++){\n       \
    \     if(visited[i] || visited[j]) continue;\n            visited[i] = visited[j]\
    \ = true;\n            if(grid[i][j] < min_value){\n                min_value\
    \ = grid[i][j];\n                min_index = 0;\n            }\n            if(grid[i][j]\
    \ === min_value){\n                min_index++;\n            }\n        }\n  \
    \  }\n\n    for(i = 0; i < rows; i++){\n        for(j = 0; j < cols; j++){\n \
    \           if(visited[i] || visited[j]) continue;\n            visited[i] = visited[j]\
    \ = true;\n            if(grid[i][j] === min_value){\n                min_index++;\n\
    \            }\n        }\n    }\n\n    for(i = 0; i < rows; i++){\n        for(j\
    \ = 0; j < cols; j++){\n            if(visited[i] || visited[j]) continue;\n \
    \           visited[i] = visited[j] = true;\n            if(grid[i][j] === min_value){\n\
    \                min_index++;\n            }\n        }\n    }\n\n    for(i =\
    \ 0; i < rows; i++){\n        for(j = 0; j < cols; j++){\n            if(visited[i]\
    \ || visited[j]) continue;\n            visited[i] = visited[j] = true;\n    \
    \        if(grid[i][j] === min_value){\n                min_index++;\n       \
    \     }\n        }\n    }\n\n    for(i = 0; i < rows; i++){\n        for(j = 0;\
    \ j < cols; j++){\n            if(visited[i] || visited[j]) continue;\n", "  \
    \  var i, j, lst, min = Infinity, min_i, min_j;\n    for(i = 0; i < grid.length;\
    \ i++){\n        for(j = 0; j < grid[i].length; j++){\n            lst = [grid[i][j]];\n\
    \            for(var n = 0; n < 4; n++){\n                if(i + 1 < grid.length\
    \ && grid[i + 1][j] < grid[i][j]){\n                    lst.push(grid[i + 1][j]);\n\
    \                }\n                if(j + 1 < grid[i].length && grid[i][j + 1]\
    \ < grid[i][j]){\n                    lst.push(grid[i][j + 1]);\n            \
    \    }\n            }\n            if(lst.length < min){\n                min\
    \ = lst.length;\n                min_i = i;\n                min_j = j;\n    \
    \        }\n        }\n    }\n    return [min_i, min_j, min];\n}\n", "    var\
    \ i, j, min_path = [],\n        n = grid.length,\n        m = grid[0].length;\n\
    \    \n    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n        \
    \    min_path.push(grid[i][j]);\n        }\n    }\n    \n    for(i = 0; i < k;\
    \ i++){\n        for(j = 0; j < m; j++){\n            min_path.sort(function(a,\
    \ b){\n                return a - b;\n            });\n        }\n    }\n    \n\
    \    return min_path;\n}\n", "    var n = grid.length,\n        m = grid[0].length,\n\
    \        result = [],\n        visited = [],\n        i, j,\n        min = Infinity,\n\
    \        min_index = -1;\n\n    for(i = 0; i < n; i++){\n        for(j = 0; j\
    \ < m; j++){\n            if(!visited[i][j]){\n                visited[i][j] =\
    \ true;\n                if(k === 1){\n                    result.push(grid[i][j]);\n\
    \                    min = Math.min(min, grid[i][j]);\n                } else\
    \ {\n                    result = minPath(grid, k - 1, i, j, visited, result);\n\
    \                    min = Math.min(min, result[result.length - 1]);\n       \
    \         }\n                visited[i][j] = false;\n            }\n        }\n\
    \    }\n\n    return result;\n}\n\nminPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]],\
    \ 3);", "    var result = [];\n    var visited = [];\n    var dfs = function(i,\
    \ j){\n        if(visited[i] === true || visited[j] === true) return;\n      \
    \  visited[i] = true;\n        visited[j] = true;\n        if(i === j) return;\n\
    \        if(result.length === k) return;\n        result.push(grid[i][j]);\n \
    \       dfs(i - 1, j);\n        dfs(i, j - 1);\n        dfs(i + 1, j);\n     \
    \   dfs(i, j + 1);\n    };\n    for(var i = 0; i < grid.length; i++){\n      \
    \  for(var j = 0; j < grid[i].length; j++){\n            visited[i] = false;\n\
    \            dfs(i, j);\n        }\n    }\n    return result;\n}\n", "    var\
    \ result = [];\n    var visited = [];\n    var dfs = function(i, j){\n       \
    \ if(visited[i] || visited[j]) return;\n        visited[i] = true;\n        visited[j]\
    \ = true;\n        if(i == j) result.push(grid[i][j]);\n        else{\n      \
    \      dfs(i + 1, j);\n            dfs(i, j + 1);\n            dfs(i - 1, j);\n\
    \            dfs(i, j - 1);\n        }\n    }\n    for(var i = 0; i < grid.length;\
    \ i++){\n        for(var j = 0; j < grid[i].length; j++){\n            if(!visited[i]\
    \ && !visited[j]) dfs(i, j);\n        }\n    }\n    return result;\n}\n", "  \
    \  var i, j, min = [],\n        n = grid.length,\n        m = grid[0].length,\n\
    \        visited = [];\n    \n    for(i = 0; i < n; i++){\n        for(j = 0;\
    \ j < m; j++){\n            if(visited[i] || visited[j]) continue;\n         \
    \   visited[i] = visited[j] = true;\n            min = minPathHelper(grid, i,\
    \ j, k, visited, min);\n            visited[i] = visited[j] = false;\n       \
    \ }\n    }\n    return min;\n}\n\nfunction minPathHelper(grid, i, j, k, visited,\
    \ min){\n    var i_n = i + k,\n        j_n = j + k,\n        i_m = i - k,\n  \
    \      j_m = j - k,\n        i_p = i - 1,\n        j_p = j - 1,\n        i_r =\
    \ i + 1,\n        j_r = j + 1,\n        i_l = i - 1,\n        j_l = j - 1,\n \
    \       i_u = i + 1,\n        j_u = j + 1,\n        i_d = i - 1,\n        j_d\
    \ = j + 1,\n        i_u_l = i - 1,\n        j_u_l = j + 1,\n        i_u_r = i\
    \ + 1,\n        j_u_r = j + 1,\n        i_d_l = i - 1,\n        j_d_l = j + 1,\n\
    \        i_d_r = i + 1,\n        j_d_r = j + 1,\n        i_l_u = i - 1,\n    \
    \    j_l_u = j - 1,\n        i_l_d = i - 1,\n        j_l_d = j + 1,\n        i_r_u\
    \ = i + 1,\n        j_r_u = j - 1,\n        i_r_d = i + 1,\n        j_r_d = j\
    \ + 1,\n        i_l_u_l = i - 1,\n", "    var len = grid.length;\n    var result\
    \ = [];\n    var visited = [];\n    var i, j;\n    for(i = 0; i < len; i++){\n\
    \        visited[i] = [];\n        for(j = 0; j < len; j++){\n            visited[i][j]\
    \ = false;\n        }\n    }\n    \n    var min = Infinity;\n    var min_i = -1;\n\
    \    var min_j = -1;\n    \n    for(i = 0; i < len; i++){\n        for(j = 0;\
    \ j < len; j++){\n            if(visited[i][j] == false && grid[i][j] < min){\n\
    \                min = grid[i][j];\n                min_i = i;\n             \
    \   min_j = j;\n            }\n        }\n    }\n    \n    if(min_i == -1 || min_j\
    \ == -1){\n        return result;\n    }\n    \n    visited[min_i][min_j] = true;\n\
    \    result.push(min);\n    \n    while(k > 1){\n        min = Infinity;\n   \
    \     for(i = 0; i < len; i++){\n            for(j = 0; j < len; j++){\n     \
    \           if(visited[i][j] == false && grid[i][j] < min){\n                \
    \    min = grid[i][j];\n                    min_i = i;\n                    min_j\
    \ = j;\n                }\n            }\n        }\n        \n        if(min_i\
    \ == -1 || min_j == -1){\n            return result;\n        }\n        \n  \
    \      visited[min_i][min_j] = true;\n        result.push(min);\n        k--;\n\
    \    }\n    \n    return result;\n}\n", "    var result = [];\n    var dp = [];\n\
    \    var dp_i = [];\n    var dp_j = [];\n    var dp_k = [];\n    var dp_l = [];\n\
    \    var dp_m = [];\n    var dp_n = [];\n    var dp_o = [];\n    var dp_p = [];\n\
    \    var dp_q = [];\n    var dp_r = [];\n    var dp_s = [];\n    var dp_t = [];\n\
    \    var dp_u = [];\n    var dp_v = [];\n    var dp_w = [];\n    var dp_x = [];\n\
    \    var dp_y = [];\n    var dp_z = [];\n    var dp_aa = [];\n    var dp_ab =\
    \ [];\n    var dp_ac = [];\n    var dp_ad = [];\n    var dp_ae = [];\n    var\
    \ dp_af = [];\n    var dp_ag = [];\n    var dp_ah = [];\n    var dp_ai = [];\n\
    \    var dp_aj = [];\n    var dp_ak = [];\n    var dp_al = [];\n    var dp_am\
    \ = [];\n    var dp_an = [];\n    var dp_ao = [];\n    var dp_ap = [];\n    var\
    \ dp_aq = [];\n    var dp_ar = [];\n    var dp_as = [];\n    var dp_at = [];\n\
    \    var dp_au = [];\n    var dp_av = [];\n    var dp_aw = [];\n    var dp_ax\
    \ = [];\n    var dp_ay = [];\n    var dp_az = [];\n    var dp_ba = [];\n    var\
    \ dp_bb = [];\n    var dp_bc = [];\n    var dp_bd = [];\n    var dp_be = [];\n\
    \    var dp_bf = [];\n    var dp_bg = [];\n    var dp_bh = [];\n    var dp_bi\
    \ = [];\n    var dp_bj = [];\n    var dp_bk = [];\n    var d", "    var result\
    \ = [];\n    var visited = [];\n    var dfs = function(i, j){\n        if(visited[i]\
    \ || visited[j]) return;\n        visited[i] = true;\n        visited[j] = true;\n\
    \        if(i == j) result.push(grid[i][j]);\n        else{\n            for(var\
    \ x = 0; x < 4; x++){\n                var nx = i + dx[x];\n                var\
    \ ny = j + dy[x];\n                if(nx >= 0 && nx < grid.length && ny >= 0 &&\
    \ ny < grid[0].length && !visited[nx] && grid[nx][ny] < grid[i][j]){\n       \
    \             dfs(nx, ny);\n                }\n            }\n        }\n    }\n\
    \    for(var i = 0; i < grid.length; i++){\n        for(var j = 0; j < grid[0].length;\
    \ j++){\n            if(!visited[i] && !visited[j]){\n                dfs(i, j);\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    var i, j, lst\
    \ = [],\n        n = grid.length,\n        m = grid[0].length,\n        visited\
    \ = [],\n        min = Infinity;\n    \n    for(i = 0; i < n; i++){\n        for(j\
    \ = 0; j < m; j++){\n            if(visited[i] || visited[j]) continue;\n    \
    \        if(grid[i][j] < min){\n                min = grid[i][j];\n          \
    \      lst = [i, j];\n            }\n        }\n        visited[lst[0]] = true;\n\
    \        visited[lst[1]] = true;\n    }\n    \n    for(i = 0; i < k; i++){\n \
    \       if(lst[i] > lst[k]) lst = lst.slice(0, i).concat(lst.slice(i+1));\n  \
    \  }\n    \n    return lst;\n}\n", "  var i, j, lst = [],\n      n = grid.length,\n\
    \      m = grid[0].length,\n      visited = [],\n      min = Infinity;\n\n  for\
    \ (i = 0; i < n; i++) {\n    for (j = 0; j < m; j++) {\n      if (visited[i] ||\
    \ visited[j]) continue;\n      lst.push(grid[i][j]);\n      visited[i] = visited[j]\
    \ = true;\n      if (lst.length === k) {\n        min = Math.min(min, lst.sort(function(a,\
    \ b){ return a - b; }));\n      }\n      lst.pop();\n    }\n  }\n  return min\
    \ === Infinity ? [] : lst;\n}\n", "    var n = grid.length,\n        m = grid[0].length,\n\
    \        result = [],\n        i, j,\n        min = Infinity,\n        min_i =\
    \ -1,\n        min_j = -1;\n    \n    for(i = 0; i < n; i++){\n        for(j =\
    \ 0; j < m; j++){\n            if(grid[i][j] < min){\n                min = grid[i][j];\n\
    \                min_i = i;\n                min_j = j;\n            }\n     \
    \   }\n    }\n    \n    for(i = 0; i < k; i++){\n        result.push(grid[min_i][min_j]);\n\
    \        min_i = Math.floor(min_i / n);\n        min_j = Math.floor(min_j / m);\n\
    \        min = Math.min(grid[min_i][min_j], min);\n    }\n    \n    return result;\n\
    }\n", "    var len = grid.length;\n    var i, j, min = [], min_i = 0, min_j =\
    \ 0;\n    for(i = 0; i < len; i++){\n        min[i] = grid[i][0];\n    }\n   \
    \ for(i = 0; i < len; i++){\n        for(j = 1; j < len; j++){\n            if(grid[i][j]\
    \ < min[i]){\n                min[i] = grid[i][j];\n                min_i = i;\n\
    \                min_j = j;\n            }\n        }\n    }\n    for(i = 0; i\
    \ < k; i++){\n        min[min_i] = grid[min_i][min_j];\n        min_i = Math.floor(min_i\
    \ / len) * len;\n        min_j = Math.floor(min_j / len) * len;\n    }\n    return\
    \ min;\n}\n", "    var n = grid.length;\n    var m = grid[0].length;\n    var\
    \ dp = [];\n    var dp_i = [];\n    var dp_j = [];\n    var dp_k = [];\n    var\
    \ dp_l = [];\n    var dp_m = [];\n    var dp_n = [];\n    var dp_o = [];\n   \
    \ var dp_p = [];\n    var dp_q = [];\n    var dp_r = [];\n    var dp_s = [];\n\
    \    var dp_t = [];\n    var dp_u = [];\n    var dp_v = [];\n    var dp_w = [];\n\
    \    var dp_x = [];\n    var dp_y = [];\n    var dp_z = [];\n    var dp_aa = [];\n\
    \    var dp_ab = [];\n    var dp_ac = [];\n    var dp_ad = [];\n    var dp_ae\
    \ = [];\n    var dp_af = [];\n    var dp_ag = [];\n    var dp_ah = [];\n    var\
    \ dp_ai = [];\n    var dp_aj = [];\n    var dp_ak = [];\n    var dp_al = [];\n\
    \    var dp_am = [];\n    var dp_an = [];\n    var dp_ao = [];\n    var dp_ap\
    \ = [];\n    var dp_aq = [];\n    var dp_ar = [];\n    var dp_as = [];\n    var\
    \ dp_at = [];\n    var dp_au = [];\n    var dp_av = [];\n    var dp_aw = [];\n\
    \    var dp_ax = [];\n    var dp_ay = [];\n    var dp_az = [];\n    var dp_ba\
    \ = [];\n    var dp_bb = [];\n    var dp_bc = [];\n    var dp_bd = [];\n    var\
    \ dp_be = [];\n    var dp_bf = [];\n    var dp_bg = [];\n    var dp_bh = [];\n\
    \    var dp_bi = [];\n    var dp_bj = [];", "    let dp = new Array(grid.length\
    \ * grid[0].length);\n    let dp_i = 0;\n    let dp_j = 0;\n    let dp_k = 0;\n\
    \    let dp_lst = [];\n    let dp_lst_i = 0;\n    let dp_lst_j = 0;\n    let dp_lst_k\
    \ = 0;\n    let dp_lst_lst = [];\n    \n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            dp[dp_i] = grid[i][j];\n\
    \            dp_i++;\n        }\n    }\n    \n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            for(let\
    \ k = 0; k < grid[i].length; k++){\n                if(i > 0 && j > 0 && grid[i\
    \ - 1][j - 1] < grid[i][j]){\n                    dp[dp_i] = grid[i][j];\n   \
    \                 dp_i++;\n                }\n                if(i > 0 && grid[i\
    \ - 1][j] < grid[i][j]){\n                    dp[dp_i] = grid[i][j];\n       \
    \             dp_i++;\n                }\n                if(j > 0 && grid[i][j\
    \ - 1] < grid[i][j]){\n                    dp[dp_i] = grid[i][j];\n          \
    \          dp_i++;\n                }\n                if(i > 0 && j > 0 && grid[i\
    \ - 1][j - 1] < grid[i][j] && grid[i - 1][j] < grid[i][j] && grid[i][j - 1] <\
    \ grid[i][j]){\n                    dp[dp_i] = grid[i][j];\n                 \
    \   dp_i++;\n                }\n            }\n        }\n    }\n    \n    for(let\
    \ i = 0; i < dp.length; i++){\n        dp_lst[dp_", "    var i, j, lst = [],\n\
    \        n = grid.length,\n        m = grid[0].length,\n        min = Infinity;\n\
    \    \n    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n        \
    \    if(grid[i][j] === 0){\n                continue;\n            }\n       \
    \     lst.push(grid[i][j]);\n        }\n    }\n    \n    for(i = 0; i < k; i++){\n\
    \        min = Math.min(min, lst.sort(function(a, b){\n            return a -\
    \ b;\n        }));\n        \n        for(j = 0; j < lst.length - 1; j++){\n \
    \           if(lst[j] < lst[j + 1]){\n                lst[j] = lst[j + 1];\n \
    \           }\n        }\n        \n        lst.pop();\n    }\n    \n    return\
    \ lst;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
