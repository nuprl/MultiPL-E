name: HumanEval_6_parse_nested_parens
language: js
prompt: "//Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n// For each of the group, output the deepest\
  \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
  )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
  ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
  \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
completions: ["    var paren_stack = [];\n    var max_nesting = 0;\n    var paren_count\
    \ = 0;\n    var paren_index = 0;\n    var paren_length = paren_string.length;\n\
    \    var paren_char = paren_string.charAt(paren_index);\n    while(paren_index\
    \ < paren_length){\n        if(paren_char === '('){\n            paren_stack.push(paren_count);\n\
    \            paren_count++;\n        }\n        else if(paren_char === ')'){\n\
    \            paren_count--;\n            if(paren_stack.length > 0){\n       \
    \         max_nesting = Math.max(max_nesting, paren_stack.pop());\n          \
    \  }\n        }\n        paren_index++;\n        paren_char = paren_string.charAt(paren_index);\n\
    \    }\n    return max_nesting;\n}\n", "    var paren_stack = [];\n    var paren_count\
    \ = 0;\n    var paren_depth = 0;\n    var paren_index = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    var paren_string_index = 0;\n    var paren_string_index_prev\
    \ = 0;\n    var paren_string_index_next = 0;\n    var paren_string_index_next_prev\
    \ = 0;\n    var paren_string_index_next_next = 0;\n    var paren_string_index_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next = 0;\n    var paren_string_index_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next_next_next = 0;\n    var\
    \ paren_string_index_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next\
    \ = 0;\n    var paren_string_index_next_next_next_next_next_next_next_prev = 0;\n\
    \    var paren_string_index_next_next_next_next_next_next_next_next = 0;\n   \
    \ var paren_string_index_next_next_next_next_next_next_next_next_prev = 0;\n \
    \   var paren_string_index_next_next_next_next_next_next_next_next_next = 0;\n\
    \    var paren_string_index_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next", "    var paren_groups\
    \ = paren_string.split(\" \");\n    var max_nesting = 0;\n    var max_nesting_index\
    \ = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var group =\
    \ paren_groups[i];\n        var nesting = 0;\n        for(var j = 0; j < group.length;\
    \ j++){\n            if(group[j] == \"(\"){\n                nesting++;\n    \
    \        }\n            else if(group[j] == \")\"){\n                nesting--;\n\
    \            }\n        }\n        if(nesting > max_nesting){\n            max_nesting\
    \ = nesting;\n            max_nesting_index = i;\n        }\n    }\n    return\
    \ max_nesting_index;\n}\n", "    var paren_stack = [];\n    var paren_count =\
    \ 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n\
    \    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i]\
    \ === '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n\
    \            paren_level = paren_stack.length;\n        }\n        else if(paren_string[i]\
    \ === ')'){\n            paren_count--;\n            if(paren_count === 0){\n\
    \                var max_level = paren_stack.pop();\n                if(max_level\
    \ === paren_level){\n                    console.log(max_level);\n           \
    \     }\n                else{\n                    console.log(max_level);\n\
    \                }\n            }\n        }\n    }\n}\n", "    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var max_nesting = 0;\n    var i = 0;\n\
    \    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n\
    \    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n\
    \    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n\
    \    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n\
    \    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n\
    \    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n\
    \    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n\
    \    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n\
    \    var x = 0;\n    var y = 0;\n    var z = 0;\n    var aa = 0;\n    var ab =\
    \ 0;\n    var ac = 0;\n    var ad = 0;\n    var ae = 0;\n    var af = 0;\n   \
    \ var ag = 0;\n    var ah = 0;\n    var ai = 0;\n    var aj = 0;\n    var ak =\
    \ 0;\n    var al = 0;\n    var am = 0;\n    var an = 0;\n    var ao = 0;\n   \
    \ var ap = 0;\n    var aq = 0;\n    var ar = 0;\n    var as = 0;\n    var at =\
    \ 0;\n    var au = 0;\n    var av = 0;\n    var aw = 0;\n    var ax = 0;\n    ",
  "    var paren_stack = [];\n    var paren_count = 0;\n    var paren_depth = 0;\n\
    \    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length;\
    \ i++){\n        if(paren_string[i] === '('){\n            paren_count++;\n  \
    \          paren_stack.push(paren_count);\n        }\n        else if(paren_string[i]\
    \ === ')'){\n            paren_count--;\n            if(paren_count === 0){\n\
    \                paren_depth = paren_stack.pop();\n            }\n        }\n\
    \    }\n    return paren_depth;\n}\n", "    var paren_stack = [];\n    var paren_count\
    \ = 0;\n    var paren_count_max = 0;\n    var paren_count_max_index = 0;\n   \
    \ var paren_count_max_index_string = \"\";\n    var paren_count_max_index_string_index\
    \ = 0;\n    var paren_count_max_index_string_index_max = 0;\n    var paren_count_max_index_string_index_max_index\
    \ = 0;\n    var paren_count_max_index_string_index_max_index_string = \"\";\n\
    \    var paren_count_max_index_string_index_max_index_string_index = 0;\n    var\
    \ paren_count_max_index_string_index_max_index_string_index_max = 0;\n    var\
    \ paren_count_max_index_string_index_max_index_string_index_max_index = 0;\n \
    \   var paren_count_max_index_string_index_max_index_string_index_max_index_string\
    \ = \"\";\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index\
    \ = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max\
    \ = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max_index\
    \ = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max_index_string\
    \ = \"\";\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max_index_string_index\
    \ = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max_index_string_index_max\
    \ = 0;\n    var paren_count_max_index_string_index_max_", "    var paren_groups\
    \ = paren_string.split(\" \");\n    var max_nesting = 0;\n    var max_nesting_index\
    \ = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var curr_nesting\
    \ = 0;\n        for(var j = 0; j < paren_groups[i].length; j++){\n           \
    \ if(paren_groups[i][j] == \"(\"){\n                curr_nesting++;\n        \
    \    }\n            else if(paren_groups[i][j] == \")\"){\n                curr_nesting--;\n\
    \            }\n        }\n        if(curr_nesting > max_nesting){\n         \
    \   max_nesting = curr_nesting;\n            max_nesting_index = i;\n        }\n\
    \    }\n    return [max_nesting_index, max_nesting];\n}\n", "    var paren_stack\
    \ = [];\n    var max_nesting = 0;\n    var current_nesting = 0;\n    var current_index\
    \ = 0;\n    var current_char = paren_string[current_index];\n    while(current_char\
    \ !== \"\"){\n        if(current_char === \"(\"){\n            paren_stack.push(current_char);\n\
    \            current_nesting++;\n        }else if(current_char === \")\"){\n \
    \           if(paren_stack.length === 0){\n                console.log(\"Error:\
    \ Unbalanced parentheses\");\n                return;\n            }\n       \
    \     current_nesting--;\n            if(current_nesting === 0){\n           \
    \     current_index++;\n                current_char = paren_string[current_index];\n\
    \                continue;\n            }\n            paren_stack.pop();\n  \
    \      }\n        current_index++;\n        current_char = paren_string[current_index];\n\
    \    }\n    if(paren_stack.length !== 0){\n        console.log(\"Error: Unbalanced\
    \ parentheses\");\n        return;\n    }\n    console.log(max_nesting);\n}\n",
  "    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n \
    \   for (var i = 0; i < paren_groups.length; i++){\n        var paren_group =\
    \ paren_groups[i];\n        var nesting = 0;\n        for (var j = 0; j < paren_group.length;\
    \ j++){\n            if (paren_group[j] == \"(\"){\n                nesting++;\n\
    \            }\n            else if (paren_group[j] == \")\"){\n             \
    \   nesting--;\n            }\n        }\n        if (nesting > max_nesting){\n\
    \            max_nesting = nesting;\n        }\n    }\n    return max_nesting;\n\
    }\n", "    var paren_groups = paren_string.split(\" \");\n    var max_nesting\
    \ = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var group =\
    \ paren_groups[i];\n        var nesting = 0;\n        for(var j = 0; j < group.length;\
    \ j++){\n            if(group[j] == \"(\"){\n                nesting++;\n    \
    \        }\n            else if(group[j] == \")\"){\n                nesting--;\n\
    \            }\n        }\n        if(nesting > max_nesting){\n            max_nesting\
    \ = nesting;\n        }\n    }\n    return max_nesting;\n}\n", "    var paren_groups\
    \ = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i\
    \ < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n \
    \       var paren_count = 0;\n        for(var j = 0; j < paren_group.length; j++){\n\
    \            if(paren_group[j] == \"(\"){\n                paren_count++;\n  \
    \          }\n            else if(paren_group[j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        if(paren_count > max_nesting){\n          \
    \  max_nesting = paren_count;\n        }\n    }\n    return max_nesting;\n}\n",
  "    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n \
    \   for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n\
    \        var nesting = 0;\n        for(var j = 0; j < paren_group.length; j++){\n\
    \            if(paren_group[j] == \"(\"){\n                nesting++;\n      \
    \      }\n            else if(paren_group[j] == \")\"){\n                nesting--;\n\
    \            }\n        }\n        if(nesting > max_nesting){\n            max_nesting\
    \ = nesting;\n        }\n    }\n    return max_nesting;\n}\n", "    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    var paren_string_index = 0;\n    var paren_string_char;\n\
    \    var paren_string_char_index;\n    var paren_string_char_count;\n    var paren_string_char_count_index;\n\
    \    var paren_string_char_count_count;\n    var paren_string_char_count_count_index;\n\
    \    var paren_string_char_count_count_count;\n    var paren_string_char_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count;\n    var paren_string_char_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count_count_count;\n    var\
    \ paren_string_char_count_count_count_count_count_count_count_index;\n    var\
    \ paren_string_char_count_count_count_count_count_count_count_count;\n    var\
    \ paren_string_char_count_count_count_count_count_count_count_count_index;\n \
    \   var paren_string_char_count_count_count_count_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count", " \
    \   var paren_count = 0;\n    var paren_stack = [];\n    var output = [];\n  \
    \  var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length;\
    \ i++){\n        if(paren_string[i] == '('){\n            paren_count++;\n   \
    \         paren_stack.push(paren_count);\n        }\n        else if(paren_string[i]\
    \ == ')'){\n            paren_count--;\n            if(paren_count == 0){\n  \
    \              output.push(paren_stack.pop());\n            }\n        }\n   \
    \ }\n    return output;\n}\n", "    var paren_stack = [];\n    var current_level\
    \ = 0;\n    var max_level = 0;\n    for(var i = 0; i < paren_string.length; i++){\n\
    \        if(paren_string[i] === '('){\n            paren_stack.push(i);\n    \
    \        current_level++;\n        }\n        else if(paren_string[i] === ')'){\n\
    \            if(current_level === 0){\n                console.log(\"Error: Unbalanced\
    \ parentheses\");\n                return;\n            }\n            current_level--;\n\
    \            if(current_level === max_level){\n                max_level = 0;\n\
    \            }\n            else{\n                max_level = current_level;\n\
    \            }\n            paren_stack.pop();\n        }\n    }\n    if(current_level\
    \ !== 0){\n        console.log(\"Error: Unbalanced parentheses\");\n        return;\n\
    \    }\n    console.log(max_level);\n}\n", "    var paren_groups = paren_string.split(\"\
    \ \");\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var\
    \ i = 0; i < paren_groups.length; i++){\n        var current_nesting = 0;\n  \
    \      var current_nesting_index = 0;\n        for(var j = 0; j < paren_groups[i].length;\
    \ j++){\n            if(paren_groups[i][j] == \"(\"){\n                current_nesting++;\n\
    \            }\n            else if(paren_groups[i][j] == \")\"){\n          \
    \      current_nesting--;\n            }\n            if(current_nesting > max_nesting){\n\
    \                max_nesting = current_nesting;\n                max_nesting_index\
    \ = current_nesting_index;\n            }\n            current_nesting_index++;\n\
    \        }\n    }\n    return [max_nesting, max_nesting_index];\n}\n", "    var\
    \ paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    var\
    \ max_nesting_index = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n\
    \        var paren_group = paren_groups[i];\n        var nesting = get_nesting(paren_group);\n\
    \        if(nesting > max_nesting){\n            max_nesting = nesting;\n    \
    \        max_nesting_index = i;\n        }\n    }\n    return max_nesting_index;\n\
    }\n", "    var paren_stack = [];\n    var paren_count = 0;\n    var paren_depth\
    \ = 0;\n    var paren_index = 0;\n    var paren_string_length = paren_string.length;\n\
    \    var paren_string_index = 0;\n    var paren_string_index_prev = 0;\n    var\
    \ paren_string_index_next = 0;\n    var paren_string_index_next_prev = 0;\n  \
    \  var paren_string_index_next_next = 0;\n    var paren_string_index_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next = 0;\n    var paren_string_index_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next_next_next = 0;\n    var\
    \ paren_string_index_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next\
    \ = 0;\n    var paren_string_index_next_next_next_next_next_next_next_prev = 0;\n\
    \    var paren_string_index_next_next_next_next_next_next_next_next = 0;\n   \
    \ var paren_string_index_next_next_next_next_next_next_next_next_prev = 0;\n \
    \   var paren_string_index_next_next_next_next_next_next_next_next_next = 0;\n\
    \    var paren_string_index_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next", "    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n\
    \        if(paren_string[i] == '('){\n            paren_stack.push(paren_count);\n\
    \            paren_count = 0;\n            paren_level++;\n        }\n       \
    \ else if(paren_string[i] == ')'){\n            paren_count++;\n            if(paren_stack.length\
    \ > 0){\n                paren_count = paren_stack.pop();\n                paren_level--;\n\
    \            }\n        }\n    }\n    return paren_level;\n}\n", "    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var paren_depth = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n\
    \        if(paren_string[i] === '('){\n            paren_stack.push(paren_count);\n\
    \            paren_count++;\n        }\n        else if(paren_string[i] === ')'){\n\
    \            paren_count--;\n            if(paren_count === 0){\n            \
    \    paren_depth = paren_stack.pop();\n            }\n        }\n    }\n    return\
    \ paren_depth;\n}\n", "    var paren_stack = [];\n    var paren_count = 0;\n \
    \   var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var i = 0; i\
    \ < paren_string.length; i++){\n        if(paren_string[i] === '('){\n       \
    \     paren_stack.push(paren_count);\n            paren_count++;\n        }\n\
    \        else if(paren_string[i] === ')'){\n            paren_count--;\n     \
    \       if(paren_stack.length > 0){\n                if(paren_count === paren_stack[paren_stack.length\
    \ - 1]){\n                    paren_stack.pop();\n                }\n        \
    \        else{\n                    paren_count = paren_stack[paren_stack.length\
    \ - 1];\n                }\n            }\n        }\n        if(paren_count >\
    \ max_nesting){\n            max_nesting = paren_count;\n            max_nesting_index\
    \ = i;\n        }\n    }\n    return [max_nesting, max_nesting_index];\n}\n",
  "    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n \
    \   var max_nesting_index = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n\
    \        var paren_group = paren_groups[i];\n        var nesting = 0;\n      \
    \  for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j]\
    \ == \"(\"){\n                nesting++;\n            }\n            else if(paren_group[j]\
    \ == \")\"){\n                nesting--;\n            }\n        }\n        if(nesting\
    \ > max_nesting){\n            max_nesting = nesting;\n            max_nesting_index\
    \ = i;\n        }\n    }\n    return [max_nesting_index, max_nesting];\n}\n",
  "    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n\
    \    var paren_index = 0;\n    var paren_string_length = paren_string.length;\n\
    \    var paren_string_index = 0;\n    var paren_string_index_prev = 0;\n    var\
    \ paren_string_index_next = 0;\n    var paren_string_index_next_prev = 0;\n  \
    \  var paren_string_index_next_next = 0;\n    var paren_string_index_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next = 0;\n    var paren_string_index_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next_next_next = 0;\n    var\
    \ paren_string_index_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next\
    \ = 0;\n    var paren_string_index_next_next_next_next_next_next_next_prev = 0;\n\
    \    var paren_string_index_next_next_next_next_next_next_next_next = 0;\n   \
    \ var paren_string_index_next_next_next_next_next_next_next_next_prev = 0;\n \
    \   var paren_string_index_next_next_next_next_next_next_next_next_next = 0;\n\
    \    var paren_string_index_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next", "    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    var paren_index = 0;\n    var paren_char = \"\"\
    ;\n    var paren_char_index = 0;\n    var paren_char_count = 0;\n    var paren_char_count_index\
    \ = 0;\n    var paren_char_count_count = 0;\n    var paren_char_count_count_index\
    \ = 0;\n    var paren_char_count_count_count = 0;\n    var paren_char_count_count_count_index\
    \ = 0;\n    var paren_char_count_count_count_count = 0;\n    var paren_char_count_count_count_count_index\
    \ = 0;\n    var paren_char_count_count_count_count_count = 0;\n    var paren_char_count_count_count_count_count_index\
    \ = 0;\n    var paren_char_count_count_count_count_count_count = 0;\n    var paren_char_count_count_count_count_count_count_index\
    \ = 0;\n    var paren_char_count_count_count_count_count_count_count = 0;\n  \
    \  var paren_char_count_count_count_count_count_count_count_index = 0;\n    var\
    \ paren_char_count_count_count_count_count_count_count_count = 0;\n    var paren_char_count_count_count_count_count_count_count_count_index\
    \ = 0;\n    var paren_char_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    var paren_char_count_count_count_count_count_count_count_count_count_index\
    \ = 0;\n    var paren_char_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    var paren_char_count_count_count_count_count_count_count_count_count_count",
  "    var paren_stack = [];\n    var paren_count = 0;\n    var paren_count_max =\
    \ 0;\n    var paren_count_min = 0;\n    var paren_count_max_min = 0;\n    var\
    \ paren_count_min_max = 0;\n    var paren_count_max_min_max = 0;\n    var paren_count_min_max_min\
    \ = 0;\n    var paren_count_max_min_max_min = 0;\n    var paren_count_min_max_min_max\
    \ = 0;\n    var paren_count_max_min_max_min_max = 0;\n    var paren_count_min_max_min_max_min_max\
    \ = 0;\n    var paren_count_max_min_max_min_max_min_max = 0;\n    var paren_count_min_max_min_max_min_max_min_max\
    \ = 0;\n    var paren_count_max_min_max_min_max_min_max_min_max = 0;\n    var\
    \ paren_count_min_max_min_max_min_max_min_max_min_max = 0;\n    var paren_count_max_min_max_min_max_min_max_min_max_min_max\
    \ = 0;\n    var paren_count_min_max_min_max_min_max_min_max_min_max_min_max =\
    \ 0;\n    var paren_count_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = 0;\n    var paren_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = 0;\n    var paren_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = 0;\n    var paren_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = 0;\n    ", "    var parens = paren_string.split(\" \");\n    var max_nesting\
    \ = 0;\n    var max_nesting_index = 0;\n    for(var i = 0; i < parens.length;\
    \ i++){\n        var paren_count = 0;\n        for(var j = 0; j < parens[i].length;\
    \ j++){\n            if(parens[i][j] == '('){\n                paren_count++;\n\
    \            }\n            else if(parens[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        if(paren_count > max_nesting){\n          \
    \  max_nesting = paren_count;\n            max_nesting_index = i;\n        }\n\
    \    }\n    return [max_nesting, max_nesting_index];\n}\n", "    var paren_groups\
    \ = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i\
    \ < paren_groups.length; i++){\n        var group = paren_groups[i];\n       \
    \ var nesting = get_nesting(group);\n        if(nesting > max_nesting){\n    \
    \        max_nesting = nesting;\n        }\n    }\n    return max_nesting;\n}\n",
  "    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n \
    \   for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n\
    \        var paren_count = 0;\n        for(var j = 0; j < paren_group.length;\
    \ j++){\n            if(paren_group[j] == \"(\"){\n                paren_count++;\n\
    \            }\n            else if(paren_group[j] == \")\"){\n              \
    \  paren_count--;\n            }\n        }\n        if(paren_count > max_nesting){\n\
    \            max_nesting = paren_count;\n        }\n    }\n    return max_nesting;\n\
    }\n", "    var paren_stack = [];\n    var paren_count = 0;\n    var max_nesting\
    \ = 0;\n    var max_nesting_index = 0;\n    var paren_string_length = paren_string.length;\n\
    \    for (var i = 0; i < paren_string_length; i++) {\n        if (paren_string[i]\
    \ === '(') {\n            paren_stack.push(paren_count);\n            paren_count++;\n\
    \        } else if (paren_string[i] === ')') {\n            paren_count--;\n \
    \           if (paren_count === 0) {\n                max_nesting = Math.max(max_nesting,\
    \ paren_stack.pop());\n            }\n        }\n    }\n    max_nesting_index\
    \ = paren_stack.pop();\n    return max_nesting_index;\n}\n", "    var paren_groups\
    \ = paren_string.split(\" \");\n    var max_nesting = 0;\n    var max_nesting_index\
    \ = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var group =\
    \ paren_groups[i];\n        var nesting = 0;\n        for(var j = 0; j < group.length;\
    \ j++){\n            if(group[j] === \"(\"){\n                nesting++;\n   \
    \         }\n            else if(group[j] === \")\"){\n                nesting--;\n\
    \            }\n        }\n        if(nesting > max_nesting){\n            max_nesting\
    \ = nesting;\n            max_nesting_index = i;\n        }\n    }\n    return\
    \ max_nesting_index;\n}\n", "    var paren_stack = [];\n    var paren_count =\
    \ 0;\n    var paren_depth = 0;\n    var paren_index = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    var paren_string_index = 0;\n    var paren_string_char\
    \ = \"\";\n    var paren_string_char_index = 0;\n    var paren_string_char_count\
    \ = 0;\n    var paren_string_char_count_index = 0;\n    var paren_string_char_count_count\
    \ = 0;\n    var paren_string_char_count_count_index = 0;\n    var paren_string_char_count_count_count\
    \ = 0;\n    var paren_string_char_count_count_count_index = 0;\n    var paren_string_char_count_count_count_count\
    \ = 0;\n    var paren_string_char_count_count_count_count_index = 0;\n    var\
    \ paren_string_char_count_count_count_count_count = 0;\n    var paren_string_char_count_count_count_count_count_index\
    \ = 0;\n    var paren_string_char_count_count_count_count_count_count = 0;\n \
    \   var paren_string_char_count_count_count_count_count_count_index = 0;\n   \
    \ var paren_string_char_count_count_count_count_count_count_count = 0;\n    var\
    \ paren_string_char_count_count_count_count_count_count_count_index = 0;\n   \
    \ var paren_string_char_count_count_count_count_count_count_count_count = 0;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_index\
    \ = 0;\n    var paren_string_char_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    var paren_string_char_count_count_count_count_count_count_count_count_count_index\
    \ = 0;\n    var paren", "    var paren_groups = paren_string.split(\" \");\n \
    \   var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n\
    \        var paren_group = paren_groups[i];\n        var nesting = count_nested_parens(paren_group);\n\
    \        if(nesting > max_nesting){\n            max_nesting = nesting;\n    \
    \    }\n    }\n    return max_nesting;\n}\n", "    var paren_stack = [];\n   \
    \ var paren_count = 0;\n    var paren_count_stack = [];\n    var max_nesting =\
    \ 0;\n    var max_nesting_stack = [];\n    var i = 0;\n    var j = 0;\n    var\
    \ k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n   \
    \ var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n\
    \    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n\
    \    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n\
    \    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n\
    \    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n\
    \    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n\
    \    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n\
    \    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n\
    \    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n\
    \    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n\
    \    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n\
    \    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;", "    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_count_stack\
    \ = [];\n    var paren_count_stack_index = 0;\n    var paren_count_stack_max =\
    \ 0;\n    var paren_count_stack_max_index = 0;\n    var paren_count_stack_max_max\
    \ = 0;\n    var paren_count_stack_max_max_index = 0;\n    var paren_count_stack_max_max_max\
    \ = 0;\n    var paren_count_stack_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max\
    \ = 0;\n    var paren_count_stack_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max\
    \ = 0;\n    var paren_count_stack_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max\
    \ = 0;\n    var paren_count_stack_max_max_max_max_max_max_index = 0;\n    var\
    \ paren_count_stack_max_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_index\
    \ = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    var\
    \ paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max_index =\
    \ 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n\
    \    var paren_count_stack_max_max", "    var paren_count = 0;\n    var paren_stack\
    \ = [];\n    var paren_string_length = paren_string.length;\n    var output =\
    \ [];\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i]\
    \ === '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n\
    \        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n\
    \            if(paren_count === 0){\n                output.push(paren_stack.pop());\n\
    \            }\n        }\n    }\n    return output;\n}\n", "    var paren_groups\
    \ = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i\
    \ < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n \
    \       var paren_count = 0;\n        for(var j = 0; j < paren_group.length; j++){\n\
    \            if(paren_group[j] == \"(\"){\n                paren_count++;\n  \
    \          }\n            else if(paren_group[j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        if(paren_count > max_nesting){\n          \
    \  max_nesting = paren_count;\n        }\n    }\n    return max_nesting;\n}\n",
  "    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n\
    \    var paren_string = paren_string.split(\" \");\n    for(var i = 0; i < paren_string.length;\
    \ i++){\n        if(paren_string[i] == \"(\"){\n            paren_count++;\n \
    \           paren_stack.push(paren_count);\n            paren_level++;\n     \
    \   }\n        else if(paren_string[i] == \")\"){\n            paren_count--;\n\
    \            if(paren_count == 0){\n                var max_level = Math.max.apply(null,\
    \ paren_stack);\n                console.log(max_level);\n                paren_stack.pop();\n\
    \                paren_level--;\n            }\n        }\n    }\n}\n", "    var\
    \ paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var\
    \ paren_string_length = paren_string.length;\n    var paren_index = 0;\n    var\
    \ paren_char;\n    var paren_char_index;\n    var paren_char_count;\n    var paren_char_count_index;\n\
    \    var paren_char_count_count;\n    var paren_char_count_count_index;\n    var\
    \ paren_char_count_count_count;\n    var paren_char_count_count_count_index;\n\
    \    var paren_char_count_count_count_count;\n    var paren_char_count_count_count_count_index;\n\
    \    var paren_char_count_count_count_count_count;\n    var paren_char_count_count_count_count_count_index;\n\
    \    var paren_char_count_count_count_count_count_count;\n    var paren_char_count_count_count_count_count_count_index;\n\
    \    var paren_char_count_count_count_count_count_count_count;\n    var paren_char_count_count_count_count_count_count_count_index;\n\
    \    var paren_char_count_count_count_count_count_count_count_count;\n    var\
    \ paren_char_count_count_count_count_count_count_count_count_index;\n    var paren_char_count_count_count_count_count_count_count_count_count;\n\
    \    var paren_char_count_count_count_count_count_count_count_count_count_index;\n\
    \    var paren_char_count_count_count_count_count_count_count_count_count_count;\n\
    \    var paren_char_count_count_count_count_count_count_count_count_count_count_index;\n\
    \    var paren_char_count_count_count_count_count_count_count_count_count_count_count;\n\
    \    var paren_char_count", "    var paren_stack = [];\n    var paren_count =\
    \ 0;\n    var paren_depth = 0;\n    var paren_string_length = paren_string.length;\n\
    \    var paren_index = 0;\n    var paren_char = \"\";\n    var paren_char_index\
    \ = 0;\n    var paren_char_length = 0;\n    var paren_char_count = 0;\n    var\
    \ paren_char_count_max = 0;\n    var paren_char_count_min = 0;\n    var paren_char_count_diff\
    \ = 0;\n    var paren_char_count_diff_max = 0;\n    var paren_char_count_diff_min\
    \ = 0;\n    var paren_char_count_diff_diff = 0;\n    var paren_char_count_diff_diff_max\
    \ = 0;\n    var paren_char_count_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff\
    \ = 0;\n    var paren_char_count_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_min\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_max\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff_diff\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_min\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff_max\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff_min = 0;\n    var\
    \ paren_char_count_diff_diff_diff_diff", "    var paren_stack = [];\n    var paren_count\
    \ = 0;\n    var paren_level = 0;\n    var paren_count_stack = [];\n    var paren_count_stack_index\
    \ = 0;\n    var paren_count_stack_top = 0;\n    var paren_count_stack_top_index\
    \ = 0;\n    var paren_count_stack_top_top = 0;\n    var paren_count_stack_top_top_index\
    \ = 0;\n    var paren_count_stack_top_top_top = 0;\n    var paren_count_stack_top_top_top_index\
    \ = 0;\n    var paren_count_stack_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_index\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_index\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_top_index\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_index\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top = 0;\n    var\
    \ paren_count_stack_top_top_top_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top_index =\
    \ 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top_top = 0;\n\
    \    var paren_count_stack_top_top", "    var paren_stack = [];\n    var paren_count\
    \ = 0;\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n\
    \        if(paren_string[i] == '('){\n            paren_stack.push(paren_count);\n\
    \            paren_count++;\n        }\n        else if(paren_string[i] == ')'){\n\
    \            paren_count--;\n            if(paren_count < 0){\n              \
    \  console.log(\"Error: Invalid parentheses string\");\n                return;\n\
    \            }\n            if(paren_count > max_nesting){\n                max_nesting\
    \ = paren_count;\n                max_nesting_index = i;\n            }\n    \
    \    }\n    }\n    console.log(max_nesting);\n    console.log(max_nesting_index);\n\
    }\n", "    var paren_stack = [];\n    var paren_count = 0;\n    var paren_depth\
    \ = 0;\n    var paren_count_stack = [];\n    var paren_depth_stack = [];\n   \
    \ var paren_count_stack_index = 0;\n    var paren_depth_stack_index = 0;\n   \
    \ var paren_count_stack_top = 0;\n    var paren_depth_stack_top = 0;\n    var\
    \ paren_count_stack_top_index = 0;\n    var paren_depth_stack_top_index = 0;\n\
    \    var paren_count_stack_top_top = 0;\n    var paren_depth_stack_top_top = 0;\n\
    \    var paren_count_stack_top_top_index = 0;\n    var paren_depth_stack_top_top_index\
    \ = 0;\n    var paren_count_stack_top_top_top = 0;\n    var paren_depth_stack_top_top_top\
    \ = 0;\n    var paren_count_stack_top_top_top_index = 0;\n    var paren_depth_stack_top_top_top_index\
    \ = 0;\n    var paren_count_stack_top_top_top_top = 0;\n    var paren_depth_stack_top_top_top_top\
    \ = 0;\n    var paren_count_stack_top_top_top_top_index = 0;\n    var paren_depth_stack_top_top_top_top_index\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top = 0;\n    var paren_depth_stack_top_top_top_top_top\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top_index = 0;\n    var paren_depth_stack_top_top_top_top_top_index\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top_top = 0;\n    var paren_depth_stack_top_top_top_top_top_top\
    \ = 0;\n    var paren_", "    var paren_stack = [];\n    var paren_count = 0;\n\
    \    var paren_depth = 0;\n    var paren_index = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    var paren_string_index = 0;\n    var paren_string_index_prev\
    \ = 0;\n    var paren_string_index_next = 0;\n    var paren_string_index_next_prev\
    \ = 0;\n    var paren_string_index_next_next = 0;\n    var paren_string_index_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next = 0;\n    var paren_string_index_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next_next_next = 0;\n    var\
    \ paren_string_index_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next\
    \ = 0;\n    var paren_string_index_next_next_next_next_next_next_next_prev = 0;\n\
    \    var paren_string_index_next_next_next_next_next_next_next_next = 0;\n   \
    \ var paren_string_index_next_next_next_next_next_next_next_next_prev = 0;\n \
    \   var paren_string_index_next_next_next_next_next_next_next_next_next = 0;\n\
    \    var paren_string_index_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next", "    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string\
    \ = paren_string.split(\" \");\n    for(var i = 0; i < paren_string.length; i++){\n\
    \        if(paren_string[i] == \"(\"){\n            paren_count++;\n         \
    \   paren_stack.push(paren_count);\n        }\n        else if(paren_string[i]\
    \ == \")\"){\n            paren_count--;\n            if(paren_count < paren_stack[paren_stack.length\
    \ - 1]){\n                paren_level = paren_stack.pop();\n            }\n  \
    \      }\n    }\n    return paren_level;\n}\n", "    var paren_stack = [];\n \
    \   var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n\
    \        if(paren_string[i] === '('){\n            paren_count++;\n          \
    \  paren_stack.push(paren_count);\n            paren_level++;\n        }\n   \
    \     else if(paren_string[i] === ')'){\n            paren_count--;\n        \
    \    if(paren_count === 0){\n                var max_paren_level = paren_stack.pop();\n\
    \                if(max_paren_level > paren_level){\n                    paren_level\
    \ = max_paren_level;\n                }\n            }\n        }\n    }\n   \
    \ return paren_level;\n}\n", "    var paren_stack = [];\n    var paren_count =\
    \ 0;\n    var paren_level = 0;\n    var paren_count_stack = [];\n    var paren_level_stack\
    \ = [];\n    var paren_count_stack_index = 0;\n    var paren_level_stack_index\
    \ = 0;\n    var paren_count_stack_max = 0;\n    var paren_level_stack_max = 0;\n\
    \    var paren_count_stack_index_max = 0;\n    var paren_level_stack_index_max\
    \ = 0;\n    var paren_count_stack_index_min = 0;\n    var paren_level_stack_index_min\
    \ = 0;\n    var paren_count_stack_min = 0;\n    var paren_level_stack_min = 0;\n\
    \    var paren_count_stack_min_index = 0;\n    var paren_level_stack_min_index\
    \ = 0;\n    var paren_count_stack_min_index_max = 0;\n    var paren_level_stack_min_index_max\
    \ = 0;\n    var paren_count_stack_min_index_min = 0;\n    var paren_level_stack_min_index_min\
    \ = 0;\n    var paren_count_stack_min_index_min_index = 0;\n    var paren_level_stack_min_index_min_index\
    \ = 0;\n    var paren_count_stack_min_index_min_index_max = 0;\n    var paren_level_stack_min_index_min_index_max\
    \ = 0;\n    var paren_count_stack_min_index_min_index_min = 0;\n    var paren_level_stack_min_index_min_index_min\
    \ = 0;\n    var paren_count_stack_min_index_min_index_min_index = 0;\n    var\
    \ paren_level_stack_min_index_min_index_min_index = 0;\n    var paren_count_stack_min_index_min_index_min_index_max\
    \ = 0;\n    var paren_level_", "    var paren_groups = paren_string.split(\" \"\
    );\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n\
    \        var paren_group = paren_groups[i];\n        var paren_count = 0;\n  \
    \      for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j]\
    \ == \"(\"){\n                paren_count++;\n            }\n            else\
    \ if(paren_group[j] == \")\"){\n                paren_count--;\n            }\n\
    \        }\n        if(paren_count > max_nesting){\n            max_nesting =\
    \ paren_count;\n        }\n    }\n    return max_nesting;\n}\n", "    var paren_stack\
    \ = [];\n    var max_nesting = 0;\n    var paren_count = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n\
    \        if(paren_string[i] === '('){\n            paren_stack.push(paren_count);\n\
    \            paren_count++;\n        }\n        else if(paren_string[i] === ')'){\n\
    \            paren_count--;\n            if(paren_stack.length > 0){\n       \
    \         var last_index = paren_stack.pop();\n                if(last_index >\
    \ max_nesting){\n                    max_nesting = last_index;\n             \
    \   }\n            }\n        }\n    }\n    return max_nesting;\n}\n", "    var\
    \ paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var\
    \ paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length;\
    \ i++){\n        if(paren_string[i] === '('){\n            paren_count++;\n  \
    \          paren_stack.push(paren_count);\n            paren_level = paren_stack.length;\n\
    \        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n\
    \            if(paren_count === 0){\n                var max_paren_level = paren_stack.pop();\n\
    \                if(max_paren_level > paren_level){\n                    paren_level\
    \ = max_paren_level;\n                }\n            }\n        }\n    }\n   \
    \ return paren_level;\n}\n", "    var paren_groups = paren_string.split(\" \"\
    );\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n\
    \        var paren_group = paren_groups[i];\n        var paren_count = 0;\n  \
    \      for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j]\
    \ == \"(\"){\n                paren_count++;\n            }\n            else\
    \ if(paren_group[j] == \")\"){\n                paren_count--;\n            }\n\
    \        }\n        if(paren_count > max_nesting){\n            max_nesting =\
    \ paren_count;\n        }\n    }\n    return max_nesting;\n}\n", "    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var paren_depth = 0;\n    var paren_count_max\
    \ = 0;\n    var paren_depth_max = 0;\n    var paren_count_max_index = 0;\n   \
    \ var paren_depth_max_index = 0;\n    var paren_count_max_index_stack = [];\n\
    \    var paren_depth_max_index_stack = [];\n    var paren_count_max_index_stack_index\
    \ = 0;\n    var paren_depth_max_index_stack_index = 0;\n    var paren_count_max_index_stack_index_stack\
    \ = [];\n    var paren_depth_max_index_stack_index_stack = [];\n    var paren_count_max_index_stack_index_stack_index\
    \ = 0;\n    var paren_depth_max_index_stack_index_stack_index = 0;\n    var paren_count_max_index_stack_index_stack_index_stack\
    \ = [];\n    var paren_depth_max_index_stack_index_stack_index_stack = [];\n \
    \   var paren_count_max_index_stack_index_stack_index_stack_index = 0;\n    var\
    \ paren_depth_max_index_stack_index_stack_index_stack_index = 0;\n    var paren_count_max_index_stack_index_stack_index_stack_index_stack\
    \ = [];\n    var paren_depth_max_index_stack_index_stack_index_stack_index_stack\
    \ = [];\n    var paren_count_max_index_stack_index_stack_index_stack_index_stack_index\
    \ = 0;\n    var paren_depth_max_index_stack_index_stack_index_stack_index_stack_index\
    \ = 0;\n    var paren_count_max_index_stack_index_stack_index_stack_index_stack_index_stack\
    \ = [];\n    var paren_depth_max_index_stack_index_stack_index_stack_index_stack_index_stack\
    \ = [];\n    var paren_count_max_", "    var paren_groups = paren_string.split(\"\
    \ \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length;\
    \ i++){\n        var paren_group = paren_groups[i];\n        var paren_count =\
    \ 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j]\
    \ == \"(\"){\n                paren_count++;\n            }\n            else\
    \ if(paren_group[j] == \")\"){\n                paren_count--;\n            }\n\
    \        }\n        if(paren_count > max_nesting){\n            max_nesting =\
    \ paren_count;\n        }\n    }\n    return max_nesting;\n}\n", "    var paren_groups\
    \ = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i=0; i<paren_groups.length;\
    \ i++){\n        var paren_group = paren_groups[i];\n        var paren_count =\
    \ 0;\n        for(var j=0; j<paren_group.length; j++){\n            if(paren_group[j]\
    \ == \"(\"){\n                paren_count++;\n            }\n            else\
    \ if(paren_group[j] == \")\"){\n                paren_count--;\n            }\n\
    \        }\n        if(paren_count > max_nesting){\n            max_nesting =\
    \ paren_count;\n        }\n    }\n    return max_nesting;\n}\n", "    var paren_groups\
    \ = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i\
    \ < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n \
    \       var paren_count = 0;\n        for(var j = 0; j < paren_group.length; j++){\n\
    \            if(paren_group[j] == \"(\"){\n                paren_count++;\n  \
    \          }\n            else if(paren_group[j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        if(paren_count > max_nesting){\n          \
    \  max_nesting = paren_count;\n        }\n    }\n    return max_nesting;\n}\n",
  "    var paren_stack = [];\n    var max_nesting = 0;\n    var current_nesting =\
    \ 0;\n    var current_index = 0;\n    var current_char = \"\";\n    var current_char_index\
    \ = 0;\n    var current_paren_index = 0;\n    var current_paren_string = \"\"\
    ;\n    var current_paren_stack = [];\n    var current_paren_stack_index = 0;\n\
    \    var current_paren_stack_string = \"\";\n    var current_paren_stack_string_index\
    \ = 0;\n    var current_paren_stack_string_length = 0;\n    var current_paren_stack_string_length_index\
    \ = 0;\n    var current_paren_stack_string_length_length = 0;\n    var current_paren_stack_string_length_length_index\
    \ = 0;\n    var current_paren_stack_string_length_length_length = 0;\n    var\
    \ current_paren_stack_string_length_length_length_index = 0;\n    var current_paren_stack_string_length_length_length_length\
    \ = 0;\n    var current_paren_stack_string_length_length_length_length_index =\
    \ 0;\n    var current_paren_stack_string_length_length_length_length_length =\
    \ 0;\n    var current_paren_stack_string_length_length_length_length_length_index\
    \ = 0;\n    var current_paren_stack_string_length_length_length_length_length_length\
    \ = 0;\n    var current_paren_stack_string_length_length_length_length_length_length_index\
    \ = 0;\n    var current_paren_stack_string_length_length_length_length_length_length_length\
    \ = 0;\n    var current_paren_stack_string_length_length_length_length_length_length_length_index\
    \ = 0;\n    var current_paren_stack_string_length_length_length_length_length_length_length_length\
    \ = 0;\n    var current_paren_stack_string_length_length_length_length_length_length_length_length_index\
    \ = 0;\n    var current_paren_stack_string_length_length", "  var paren_stack\
    \ = [];\n  var paren_count = 0;\n  var paren_level = 0;\n  var paren_string =\
    \ paren_string.split(\" \");\n  for(var i = 0; i < paren_string.length; i++){\n\
    \    if(paren_string[i] == \"(\"){\n      paren_count++;\n      paren_stack.push(paren_count);\n\
    \    }\n    else if(paren_string[i] == \")\"){\n      paren_count--;\n      if(paren_count\
    \ < paren_stack[paren_stack.length - 1]){\n        paren_level = paren_stack.pop();\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n", "    var paren_groups = paren_string.split(\"\
    \ \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length;\
    \ i++){\n        var paren_group = paren_groups[i];\n        var paren_count =\
    \ 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j]\
    \ == \"(\"){\n                paren_count++;\n            }\n            else\
    \ if(paren_group[j] == \")\"){\n                paren_count--;\n            }\n\
    \        }\n        if(paren_count > max_nesting){\n            max_nesting =\
    \ paren_count;\n        }\n    }\n    return max_nesting;\n}\n", "    var paren_groups\
    \ = paren_string.split(\" \");\n    var max_nesting = 0;\n    var max_nesting_index\
    \ = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group\
    \ = paren_groups[i];\n        var nesting = 0;\n        for(var j = 0; j < paren_group.length;\
    \ j++){\n            if(paren_group[j] == \"(\"){\n                nesting++;\n\
    \            }\n            else if(paren_group[j] == \")\"){\n              \
    \  nesting--;\n            }\n        }\n        if(nesting > max_nesting){\n\
    \            max_nesting = nesting;\n            max_nesting_index = i;\n    \
    \    }\n    }\n    return [max_nesting_index, max_nesting];\n}\n", "    var paren_groups\
    \ = paren_string.split(\" \");\n    var max_nesting = 0;\n    for (var i = 0;\
    \ i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n\
    \        var paren_count = 0;\n        for (var j = 0; j < paren_group.length;\
    \ j++){\n            if (paren_group[j] == \"(\"){\n                paren_count++;\n\
    \            }\n            else if (paren_group[j] == \")\"){\n             \
    \   paren_count--;\n            }\n        }\n        if (paren_count > max_nesting){\n\
    \            max_nesting = paren_count;\n        }\n    }\n    return max_nesting;\n\
    }\n", "    var paren_stack = [];\n    var paren_count = 0;\n    var paren_depth\
    \ = 0;\n    var paren_string_length = paren_string.length;\n    var paren_index\
    \ = 0;\n    var paren_char = \"\";\n    var paren_char_index = 0;\n    var paren_char_length\
    \ = 0;\n    var paren_char_count = 0;\n    var paren_char_count_max = 0;\n   \
    \ var paren_char_count_min = 0;\n    var paren_char_count_diff = 0;\n    var paren_char_count_diff_max\
    \ = 0;\n    var paren_char_count_diff_min = 0;\n    var paren_char_count_diff_diff\
    \ = 0;\n    var paren_char_count_diff_diff_max = 0;\n    var paren_char_count_diff_diff_min\
    \ = 0;\n    var paren_char_count_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_max\
    \ = 0;\n    var paren_char_count_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_min\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_max\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff_max = 0;\n    var\
    \ paren_char_count_diff_diff_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff",
  "    var paren_stack = [];\n    var paren_count = 0;\n    var paren_count_max =\
    \ 0;\n    var paren_count_max_index = 0;\n    var paren_count_max_index_string\
    \ = \"\";\n    var paren_count_max_index_string_index = 0;\n    var paren_count_max_index_string_index_max\
    \ = 0;\n    var paren_count_max_index_string_index_max_index = 0;\n    var paren_count_max_index_string_index_max_index_string\
    \ = \"\";\n    var paren_count_max_index_string_index_max_index_string_index =\
    \ 0;\n    var paren_count_max_index_string_index_max_index_string_index_max =\
    \ 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index\
    \ = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string\
    \ = \"\";\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index\
    \ = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max\
    \ = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max_index\
    \ = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max_index_string\
    \ = \"\";\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max_index_string_index\
    \ = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max_index_string_index_max\
    \ = 0;\n    var paren_count_max_index_string_index_max_", "    var paren_stack\
    \ = [];\n    var max_depth = 0;\n    var current_depth = 0;\n    var current_paren_string\
    \ = \"\";\n    var current_paren_stack = [];\n    var current_paren_stack_length\
    \ = 0;\n    var current_paren_stack_index = 0;\n    var current_paren_stack_index_end\
    \ = 0;\n    var current_paren_stack_index_start = 0;\n    var current_paren_stack_length_end\
    \ = 0;\n    var current_paren_stack_length_start = 0;\n    var current_paren_stack_length_diff\
    \ = 0;\n    var current_paren_stack_index_diff = 0;\n    var current_paren_stack_index_end_diff\
    \ = 0;\n    var current_paren_stack_index_start_diff = 0;\n    var current_paren_stack_length_end_diff\
    \ = 0;\n    var current_paren_stack_length_start_diff = 0;\n    var current_paren_stack_length_diff\
    \ = 0;\n    var current_paren_stack_index_diff = 0;\n    var current_paren_stack_index_end_diff\
    \ = 0;\n    var current_paren_stack_index_start_diff = 0;\n    var current_paren_stack_length_end_diff\
    \ = 0;\n    var current_paren_stack_length_start_diff = 0;\n    var current_paren_stack_length_diff\
    \ = 0;\n    var current_paren_stack_index_diff = 0;\n    var current_paren_stack_index_end_diff\
    \ = 0;\n    var current_paren_stack_index_start_diff = 0;\n    var current_paren_stack_length_end_diff\
    \ = 0;\n    var current_paren_stack_length_start_diff = 0;\n    var current_paren_stack_length_diff\
    \ = 0;\n    var current_paren_stack_index_diff = 0;\n    var current_paren_stack_index_end_diff\
    \ = 0;\n    var current_paren_stack_index_start_diff = 0;\n    var current_paren_stack_length_end_diff\
    \ = 0;\n    var current", "    var paren_stack = [];\n    var paren_count = 0;\n\
    \    var paren_depth = 0;\n    var paren_string_length = paren_string.length;\n\
    \    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i]\
    \ === '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n\
    \        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n\
    \            if(paren_count === 0){\n                paren_depth = paren_stack.pop();\n\
    \            }\n        }\n    }\n    return paren_depth;\n}\n", "    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n\
    \        if(paren_string[i] === '('){\n            paren_stack.push(paren_count);\n\
    \            paren_count++;\n            paren_level++;\n        }\n        else\
    \ if(paren_string[i] === ')'){\n            paren_count--;\n            if(paren_count\
    \ === -1){\n                console.log(paren_level);\n                return\
    \ paren_level;\n            }\n            else if(paren_count === 0){\n     \
    \           paren_level--;\n            }\n        }\n    }\n    return paren_level;\n\
    }\n", "    var paren_stack = [];\n    var max_nesting = 0;\n    var paren_count\
    \ = 0;\n    var paren_index = 0;\n    var paren_string_length = paren_string.length;\n\
    \    var paren_string_index = 0;\n    var paren_string_char;\n    var paren_string_char_index;\n\
    \    var paren_string_char_count;\n    var paren_string_char_count_index;\n  \
    \  var paren_string_char_count_count;\n    var paren_string_char_count_count_index;\n\
    \    var paren_string_char_count_count_count;\n    var paren_string_char_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count;\n    var paren_string_char_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count_count_count;\n    var\
    \ paren_string_char_count_count_count_count_count_count_count_index;\n    var\
    \ paren_string_char_count_count_count_count_count_count_count_count;\n    var\
    \ paren_string_char_count_count_count_count_count_count_count_count_index;\n \
    \   var paren_string_char_count_count_count_count_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count", "    var paren_groups = paren_string.split(\"\
    \ \");\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var\
    \ i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n\
    \        var nesting = 0;\n        for(var j = 0; j < paren_group.length; j++){\n\
    \            if(paren_group[j] == \"(\"){\n                nesting++;\n      \
    \      }\n            else if(paren_group[j] == \")\"){\n                nesting--;\n\
    \            }\n        }\n        if(nesting > max_nesting){\n            max_nesting\
    \ = nesting;\n            max_nesting_index = i;\n        }\n    }\n    return\
    \ [max_nesting_index, max_nesting];\n}\n", "    var paren_stack = [];\n    var\
    \ paren_count = 0;\n    var paren_depth = 0;\n    var paren_index = 0;\n    var\
    \ paren_count_temp = 0;\n    var paren_depth_temp = 0;\n    var paren_index_temp\
    \ = 0;\n    var paren_count_temp2 = 0;\n    var paren_depth_temp2 = 0;\n    var\
    \ paren_index_temp2 = 0;\n    var paren_count_temp3 = 0;\n    var paren_depth_temp3\
    \ = 0;\n    var paren_index_temp3 = 0;\n    var paren_count_temp4 = 0;\n    var\
    \ paren_depth_temp4 = 0;\n    var paren_index_temp4 = 0;\n    var paren_count_temp5\
    \ = 0;\n    var paren_depth_temp5 = 0;\n    var paren_index_temp5 = 0;\n    var\
    \ paren_count_temp6 = 0;\n    var paren_depth_temp6 = 0;\n    var paren_index_temp6\
    \ = 0;\n    var paren_count_temp7 = 0;\n    var paren_depth_temp7 = 0;\n    var\
    \ paren_index_temp7 = 0;\n    var paren_count_temp8 = 0;\n    var paren_depth_temp8\
    \ = 0;\n    var paren_index_temp8 = 0;\n    var paren_count_temp9 = 0;\n    var\
    \ paren_depth_temp9 = 0;\n    var paren_index_temp9 = 0;\n    var paren_count_temp10\
    \ = 0;\n    var paren_depth_temp10 = 0;\n    var paren_index_temp10 = 0;\n   \
    \ var paren_count_temp11 = 0;\n    var paren_depth_temp11 = 0;\n    var paren_index_temp11\
    \ = 0;\n    var paren_count_temp12 = 0;\n    var paren_depth_temp12 = 0;\n   \
    \ var paren_index_temp12 = 0;\n    var paren_count_temp", "    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    for(var i=0; i<paren_string_length; i++){\n    \
    \    if(paren_string[i] == '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n\
    \            paren_level++;\n        }\n        else if(paren_string[i] == ')'){\n\
    \            paren_count--;\n            if(paren_count < 0){\n              \
    \  console.log(\"Error: Invalid parentheses string\");\n                return;\n\
    \            }\n            if(paren_count == 0){\n                var max_level\
    \ = Math.max.apply(null, paren_stack);\n                console.log(max_level);\n\
    \                paren_stack.pop();\n                paren_level--;\n        \
    \    }\n        }\n    }\n}\n", "    var paren_stack = [];\n    var paren_count\
    \ = 0;\n    var paren_depth = 0;\n    var paren_index = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    var paren_string_index = 0;\n    var paren_string_char;\n\
    \    var paren_string_char_index;\n    var paren_string_char_count;\n    var paren_string_char_count_index;\n\
    \    var paren_string_char_count_count;\n    var paren_string_char_count_count_index;\n\
    \    var paren_string_char_count_count_count;\n    var paren_string_char_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count;\n    var paren_string_char_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count_count_count;\n    var\
    \ paren_string_char_count_count_count_count_count_count_count_index;\n    var\
    \ paren_string_char_count_count_count_count_count_count_count_count;\n    var\
    \ paren_string_char_count_count_count_count_count_count_count_count_index;\n \
    \   var paren_string_char_count_count_count_count_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count", "    var paren_stack = [];\n  \
    \  var max_depth = 0;\n    var paren_count = 0;\n    var paren_string_length =\
    \ paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n  \
    \      if(paren_string[i] === '('){\n            paren_stack.push(paren_count);\n\
    \            paren_count++;\n        }\n        else if(paren_string[i] === ')'){\n\
    \            paren_count--;\n            if(paren_stack.length > 0){\n       \
    \         var last_index = paren_stack.pop();\n                if(last_index >\
    \ max_depth){\n                    max_depth = last_index;\n                }\n\
    \            }\n        }\n    }\n    return max_depth;\n}\n", "    var paren_count\
    \ = 0;\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    var paren_stack\
    \ = [];\n    var paren_stack_index = 0;\n    var paren_stack_count = 0;\n    var\
    \ paren_stack_count_index = 0;\n    var paren_stack_count_count = 0;\n    var\
    \ paren_stack_count_count_index = 0;\n    var paren_stack_count_count_count =\
    \ 0;\n    var paren_stack_count_count_count_index = 0;\n    var paren_stack_count_count_count_count\
    \ = 0;\n    var paren_stack_count_count_count_count_index = 0;\n    var paren_stack_count_count_count_count_count\
    \ = 0;\n    var paren_stack_count_count_count_count_count_index = 0;\n    var\
    \ paren_stack_count_count_count_count_count_count = 0;\n    var paren_stack_count_count_count_count_count_count_index\
    \ = 0;\n    var paren_stack_count_count_count_count_count_count_count = 0;\n \
    \   var paren_stack_count_count_count_count_count_count_count_index = 0;\n   \
    \ var paren_stack_count_count_count_count_count_count_count_count = 0;\n    var\
    \ paren_stack_count_count_count_count_count_count_count_count_index = 0;\n   \
    \ var paren_stack_count_count_count_count_count_count_count_count_count = 0;\n\
    \    var paren_stack_count_count_count_count_count_count_count_count_count_index\
    \ = 0;\n    var paren_stack_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    var paren_stack_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0;\n    var paren_stack_count_count_count_count_count_count_", "    var paren_stack\
    \ = [];\n    var max_nesting = 0;\n    var current_nesting = 0;\n    var current_index\
    \ = 0;\n    var current_char = paren_string.charAt(current_index);\n    while(current_index\
    \ < paren_string.length){\n        if(current_char === '('){\n            paren_stack.push(current_index);\n\
    \            current_nesting++;\n        }\n        else if(current_char === ')'){\n\
    \            if(current_nesting > max_nesting){\n                max_nesting =\
    \ current_nesting;\n            }\n            current_nesting--;\n          \
    \  if(current_nesting === 0){\n                var last_index = paren_stack.pop();\n\
    \                var last_char = paren_string.charAt(last_index);\n          \
    \      if(last_char === '('){\n                    current_nesting++;\n      \
    \          }\n            }\n        }\n        current_index++;\n        current_char\
    \ = paren_string.charAt(current_index);\n    }\n    return max_nesting;\n}\n",
  "    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n\
    \    var paren_count_stack = [];\n    var paren_level_stack = [];\n    var paren_stack_output\
    \ = [];\n    var paren_count_output = [];\n    var paren_level_output = [];\n\
    \    var paren_count_stack_output = [];\n    var paren_level_stack_output = [];\n\
    \    var paren_stack_output_count = 0;\n    var paren_count_output_count = 0;\n\
    \    var paren_level_output_count = 0;\n    var paren_count_stack_output_count\
    \ = 0;\n    var paren_level_stack_output_count = 0;\n    var paren_stack_output_index\
    \ = 0;\n    var paren_count_output_index = 0;\n    var paren_level_output_index\
    \ = 0;\n    var paren_count_stack_output_index = 0;\n    var paren_level_stack_output_index\
    \ = 0;\n    var paren_stack_output_index = 0;\n    var paren_count_output_index\
    \ = 0;\n    var paren_level_output_index = 0;\n    var paren_count_stack_output_index\
    \ = 0;\n    var paren_level_stack_output_index = 0;\n    var paren_stack_output_index\
    \ = 0;\n    var paren_count_output_index = 0;\n    var paren_level_output_index\
    \ = 0;\n    var paren_count_stack_output_index = 0;\n    var paren_level_stack_output_index\
    \ = 0;\n    var paren_stack_output_index = 0;\n    var paren_count_output_index\
    \ = 0;\n    var paren_level_output_index = 0;\n    var paren_count_stack_output_index\
    \ = 0;\n    var paren_level_stack_output_index = 0;\n    var paren_stack_output_index\
    \ = 0;\n    var paren_count_output_index = 0;\n    var paren", "    var paren_stack\
    \ = [];\n    var max_nesting = 0;\n    var i = 0;\n    var j = 0;\n    var k =\
    \ 0;\n    var paren_count = 0;\n    var paren_count_stack = [];\n    var paren_count_stack_index\
    \ = 0;\n    var paren_count_stack_max = 0;\n    var paren_count_stack_max_index\
    \ = 0;\n    var paren_count_stack_max_max = 0;\n    var paren_count_stack_max_max_index\
    \ = 0;\n    var paren_count_stack_max_max_max = 0;\n    var paren_count_stack_max_max_max_index\
    \ = 0;\n    var paren_count_stack_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_index\
    \ = 0;\n    var paren_count_stack_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_index\
    \ = 0;\n    var paren_count_stack_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_index\
    \ = 0;\n    var paren_count_stack_max_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_index\
    \ = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    var\
    \ paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max_index =\
    \ 0;\n    var paren_count_stack_max_max_max_max_max_max_max_", "    var paren_count\
    \ = 0;\n    var max_paren_count = 0;\n    var max_paren_count_index = 0;\n   \
    \ var paren_stack = [];\n    var paren_stack_index = 0;\n    var paren_stack_count\
    \ = 0;\n    var paren_stack_count_index = 0;\n    var paren_stack_count_max =\
    \ 0;\n    var paren_stack_count_max_index = 0;\n    var paren_stack_count_max_max\
    \ = 0;\n    var paren_stack_count_max_max_index = 0;\n    var paren_stack_count_max_max_max\
    \ = 0;\n    var paren_stack_count_max_max_max_index = 0;\n    var paren_stack_count_max_max_max_max\
    \ = 0;\n    var paren_stack_count_max_max_max_max_index = 0;\n    var paren_stack_count_max_max_max_max_max\
    \ = 0;\n    var paren_stack_count_max_max_max_max_max_index = 0;\n    var paren_stack_count_max_max_max_max_max_max\
    \ = 0;\n    var paren_stack_count_max_max_max_max_max_max_index = 0;\n    var\
    \ paren_stack_count_max_max_max_max_max_max_max = 0;\n    var paren_stack_count_max_max_max_max_max_max_max_index\
    \ = 0;\n    var paren_stack_count_max_max_max_max_max_max_max_max = 0;\n    var\
    \ paren_stack_count_max_max_max_max_max_max_max_max_index = 0;\n    var paren_stack_count_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_stack_count_max_max_max_max_max_max_max_max_max_index =\
    \ 0;\n    var paren_stack_count_max_max_max_max_", "    var paren_list = paren_string.split(\"\
    \ \");\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var\
    \ i = 0; i < paren_list.length; i++){\n        var paren_count = 0;\n        for(var\
    \ j = 0; j < paren_list[i].length; j++){\n            if(paren_list[i][j] == '('){\n\
    \                paren_count++;\n            }\n            else if(paren_list[i][j]\
    \ == ')'){\n                paren_count--;\n            }\n        }\n       \
    \ if(paren_count > max_nesting){\n            max_nesting = paren_count;\n   \
    \         max_nesting_index = i;\n        }\n    }\n    return [max_nesting_index,\
    \ max_nesting];\n}\n", "    var paren_stack = [];\n    var paren_count = 0;\n\
    \    var max_nesting = 0;\n    var paren_string_length = paren_string.length;\n\
    \    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i]\
    \ === '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n\
    \        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n\
    \            if(paren_count === 0){\n                max_nesting = Math.max(max_nesting,\
    \ paren_stack.pop());\n            }\n        }\n    }\n    return max_nesting;\n\
    }\n", "    var paren_stack = [];\n    var paren_count = 0;\n    var paren_depth\
    \ = 0;\n    var paren_string_length = paren_string.length;\n    var paren_string_index\
    \ = 0;\n    var paren_string_char;\n    var paren_string_char_index;\n    var\
    \ paren_string_char_count;\n    var paren_string_char_count_index;\n    var paren_string_char_count_count;\n\
    \    var paren_string_char_count_count_index;\n    var paren_string_char_count_count_count;\n\
    \    var paren_string_char_count_count_count_index;\n    var paren_string_char_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_count_count_index;\n    var\
    \ paren_string_char_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count", " \
    \   var paren_stack = [];\n    var max_nesting = 0;\n    for (var i = 0; i < paren_string.length;\
    \ i++){\n        if (paren_string[i] == '('){\n            paren_stack.push(i);\n\
    \        }\n        else if (paren_string[i] == ')'){\n            var last_paren\
    \ = paren_stack.pop();\n            if (paren_stack.length > 0){\n           \
    \     max_nesting = Math.max(max_nesting, paren_stack.length);\n            }\n\
    \            else{\n                max_nesting = Math.max(max_nesting, i - last_paren);\n\
    \            }\n        }\n    }\n    return max_nesting;\n}\n", "    var paren_stack\
    \ = [];\n    var max_nesting = 0;\n    var i = 0;\n    var j = 0;\n    var k =\
    \ 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var\
    \ p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n   \
    \ var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n\
    \    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n\
    \    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n\
    \    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n\
    \    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n\
    \    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n\
    \    var y = 0;\n    var z = 0;\n    var aa = 0;\n    var ab = 0;\n    var ac\
    \ = 0;\n    var ad = 0;\n    var ae = 0;\n    var af = 0;\n    var ag = 0;\n \
    \   var ah = 0;\n    var ai = 0;\n    var aj = 0;\n    var ak = 0;\n    var al\
    \ = 0;\n    var am = 0;\n    var an = 0;\n    var ao = 0;\n    var ap = 0;\n \
    \   var aq = 0;\n    var ar = 0;\n    var as = 0;\n    var at = 0;\n    var au\
    \ = 0;\n    var av = 0;\n    var aw = 0;\n    var ax = 0;\n    var ay = 0;\n \
    \   var az =", "    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level\
    \ = 0;\n    var paren_string_length = paren_string.length;\n    var paren_string_index\
    \ = 0;\n    var paren_string_char;\n    var paren_string_char_index = 0;\n   \
    \ var paren_string_char_count = 0;\n    var paren_string_char_count_max = 0;\n\
    \    var paren_string_char_count_min = 0;\n    var paren_string_char_count_diff\
    \ = 0;\n    var paren_string_char_count_diff_max = 0;\n    var paren_string_char_count_diff_min\
    \ = 0;\n    var paren_string_char_count_diff_diff = 0;\n    var paren_string_char_count_diff_diff_max\
    \ = 0;\n    var paren_string_char_count_diff_diff_min = 0;\n    var paren_string_char_count_diff_diff_diff\
    \ = 0;\n    var paren_string_char_count_diff_diff_diff_max = 0;\n    var paren_string_char_count_diff_diff_diff_min\
    \ = 0;\n    var paren_string_char_count_diff_diff_diff_diff = 0;\n    var paren_string_char_count_diff_diff_diff_diff_max\
    \ = 0;\n    var paren_string_char_count_diff_diff_diff_diff_min = 0;\n    var\
    \ paren_string_char_count_diff_diff_diff_diff_diff = 0;\n    var paren_string_char_count_diff_diff_diff_diff_diff_max\
    \ = 0;\n    var paren_string_char_count_diff_diff_diff_diff_diff_min = 0;\n  \
    \  var paren_string_char_count_diff_diff_diff_diff_diff_diff = 0;\n    var paren_string_char_count_diff_diff_diff_diff_diff_diff_max\
    \ = 0;\n    var paren_string_char_count", "    var paren_stack = [];\n    var\
    \ max_depth = 0;\n    var current_depth = 0;\n    var current_paren = 0;\n   \
    \ var current_paren_string = \"\";\n    var current_paren_string_length = 0;\n\
    \    var current_paren_string_index = 0;\n    var current_paren_string_index_end\
    \ = 0;\n    var current_paren_string_index_start = 0;\n    var current_paren_string_length_end\
    \ = 0;\n    var current_paren_string_length_start = 0;\n    var current_paren_string_length_total\
    \ = 0;\n    var current_paren_string_length_total_end = 0;\n    var current_paren_string_length_total_start\
    \ = 0;\n    var current_paren_string_length_total_total = 0;\n    var current_paren_string_length_total_total_end\
    \ = 0;\n    var current_paren_string_length_total_total_start = 0;\n    var current_paren_string_length_total_total_total\
    \ = 0;\n    var current_paren_string_length_total_total_total_end = 0;\n    var\
    \ current_paren_string_length_total_total_total_start = 0;\n    var current_paren_string_length_total_total_total_total\
    \ = 0;\n    var current_paren_string_length_total_total_total_total_end = 0;\n\
    \    var current_paren_string_length_total_total_total_total_start = 0;\n    var\
    \ current_paren_string_length_total_total_total_total_total = 0;\n    var current_paren_string_length_total_total_total_total_total_end\
    \ = 0;\n    var current_paren_string_length_total_total_total_total_total_start\
    \ = 0;\n    var current_paren_string_length_total_total_total_total_total_total\
    \ = 0;\n    var current_paren_string_length_total_total_total_total_total_total_end\
    \ = 0;\n    var current_paren_string_length_total_total_total_total_total_total_",
  "    var paren_stack = [];\n    var paren_count = 0;\n    var max_nesting = 0;\n\
    \    var current_nesting = 0;\n    var current_paren = 0;\n    var current_char\
    \ = \"\";\n    var current_string = \"\";\n    for(var i = 0; i < paren_string.length;\
    \ i++){\n        current_char = paren_string[i];\n        if(current_char ===\
    \ \"(\"){\n            paren_stack.push(current_paren);\n            current_paren\
    \ = i;\n            current_string = \"\";\n        }\n        else if(current_char\
    \ === \")\"){\n            current_paren = paren_stack.pop();\n            current_string\
    \ += current_char;\n        }\n        else if(current_char === \" \"){\n    \
    \        if(current_string.length > 0){\n                current_string += current_char;\n\
    \            }\n            else{\n                current_string = current_char;\n\
    \            }\n        }\n        else{\n            current_string += current_char;\n\
    \        }\n        if(current_paren > max_nesting){\n            max_nesting\
    \ = current_paren;\n        }\n        if(current_paren < current_nesting){\n\
    \            current_nesting = current_paren;\n        }\n    }\n    return [max_nesting,\
    \ current_nesting];\n}\n", "    var paren_stack = [];\n    var max_nesting = 0;\n\
    \    var i = 0;\n    var j = 0;\n    var k = 0;\n    var paren_count = 0;\n  \
    \  var paren_count_stack = [];\n    var paren_count_stack_index = 0;\n    var\
    \ paren_count_stack_top = 0;\n    var paren_count_stack_top_index = 0;\n    var\
    \ paren_count_stack_top_top = 0;\n    var paren_count_stack_top_top_index = 0;\n\
    \    var paren_count_stack_top_top_top = 0;\n    var paren_count_stack_top_top_top_index\
    \ = 0;\n    var paren_count_stack_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_index\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_index\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_top_index\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_index\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top = 0;\n    var\
    \ paren_count_stack_top_top_top_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top_index =\
    \ 0;\n    var paren_count_stack_top_top_top_top_top_top_top_", "    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    var paren_string_index = 0;\n    var paren_string_index_prev\
    \ = 0;\n    var paren_string_index_next = 0;\n    var paren_string_index_next_prev\
    \ = 0;\n    var paren_string_index_next_next = 0;\n    var paren_string_index_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next = 0;\n    var paren_string_index_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next_next_next = 0;\n    var\
    \ paren_string_index_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next\
    \ = 0;\n    var paren_string_index_next_next_next_next_next_next_next_prev = 0;\n\
    \    var paren_string_index_next_next_next_next_next_next_next_next = 0;\n   \
    \ var paren_string_index_next_next_next_next_next_next_next_next_prev = 0;\n \
    \   var paren_string_index_next_next_next_next_next_next_next_next_next = 0;\n\
    \    var paren_string_index_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next_next",
  "    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n\
    \    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length;\
    \ i++){\n        if(paren_string[i] == '('){\n            paren_count++;\n   \
    \         paren_stack.push(paren_count);\n            paren_level++;\n       \
    \ }\n        else if(paren_string[i] == ')'){\n            paren_count--;\n  \
    \          if(paren_count < 0){\n                console.log(\"Error: Invalid\
    \ parentheses\");\n                return;\n            }\n            if(paren_count\
    \ == 0){\n                if(paren_level > 0){\n                    console.log(\"\
    Error: Invalid parentheses\");\n                    return;\n                }\n\
    \                var max_level = Math.max.apply(null, paren_stack);\n        \
    \        console.log(max_level);\n                paren_stack.pop();\n       \
    \         paren_level--;\n            }\n        }\n    }\n}\n", "    var paren_stack\
    \ = [];\n    var max_nesting = 0;\n    var paren_count = 0;\n    var paren_index\
    \ = 0;\n    var paren_length = paren_string.length;\n    for(var i = 0; i < paren_length;\
    \ i++){\n        if(paren_string[i] == '('){\n            paren_stack.push(paren_count);\n\
    \            paren_count++;\n        }\n        else if(paren_string[i] == ')'){\n\
    \            paren_count--;\n            if(paren_count < 0){\n              \
    \  console.log(\"Error: Invalid parentheses string\");\n                return;\n\
    \            }\n            if(paren_stack.length > 0){\n                var top_index\
    \ = paren_stack.pop();\n                if(top_index > max_nesting){\n       \
    \             max_nesting = top_index;\n                }\n            }\n   \
    \     }\n    }\n    if(paren_stack.length > 0){\n        console.log(\"Error:\
    \ Invalid parentheses string\");\n        return;\n    }\n    console.log(max_nesting);\n\
    }\n", "    var paren_stack = [];\n    var max_nesting = 0;\n    var current_level\
    \ = 0;\n    var paren_count = 0;\n    var paren_string_length = paren_string.length;\n\
    \    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i]\
    \ === '('){\n            paren_stack.push(i);\n            paren_count++;\n  \
    \          current_level++;\n            if(current_level > max_nesting){\n  \
    \              max_nesting = current_level;\n            }\n        }\n      \
    \  else if(paren_string[i] === ')'){\n            if(paren_count === 0){\n   \
    \             console.log(\"Error: Unbalanced parentheses\");\n              \
    \  return;\n            }\n            paren_count--;\n            current_level--;\n\
    \            if(current_level === 0){\n                var paren_index = paren_stack.pop();\n\
    \                var paren_string_sub = paren_string.substring(paren_index, i);\n\
    \                console.log(paren_string_sub);\n                if(paren_stack.length\
    \ > 0){\n                    parse_nested_parens(paren_string.substring(paren_index,\
    \ i));\n                }\n            }\n        }\n    }\n    if(paren_count\
    \ !== 0){\n        console.log(\"Error: Unbalanced parentheses\");\n    }\n  \
    \  return max_nesting;\n}\n", "    var paren_groups = paren_string.split(\" \"\
    );\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n\
    \        var paren_group = paren_groups[i];\n        var nesting = 0;\n      \
    \  for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j]\
    \ == \"(\"){\n                nesting++;\n            }\n            else if(paren_group[j]\
    \ == \")\"){\n                nesting--;\n            }\n        }\n        if(nesting\
    \ > max_nesting){\n            max_nesting = nesting;\n        }\n    }\n    return\
    \ max_nesting;\n}\n", "    var paren_stack = [];\n    var paren_count = 0;\n \
    \   var max_nesting = 0;\n    var max_nesting_index = 0;\n    var current_nesting\
    \ = 0;\n    var current_nesting_index = 0;\n    for(var i = 0; i < paren_string.length;\
    \ i++){\n        if(paren_string[i] == '('){\n            paren_stack.push(paren_count);\n\
    \            paren_count++;\n        }\n        else if(paren_string[i] == ')'){\n\
    \            if(paren_count == 0){\n                console.log(\"Error: Unbalanced\
    \ parentheses\");\n                return;\n            }\n            paren_count--;\n\
    \            if(paren_stack.length > 0){\n                current_nesting = paren_stack.pop();\n\
    \                if(current_nesting > max_nesting){\n                    max_nesting\
    \ = current_nesting;\n                    max_nesting_index = current_nesting_index;\n\
    \                }\n            }\n        }\n        else if(paren_string[i]\
    \ == ' '){\n            if(paren_stack.length > 0){\n                current_nesting\
    \ = paren_stack.pop();\n                if(current_nesting > max_nesting){\n \
    \                   max_nesting = current_nesting;\n                    max_nesting_index\
    \ = current_nesting_index;\n                }\n            }\n        }\n    \
    \    current_nesting_index++;\n    }\n    if(paren_count != 0){\n        console.log(\"\
    Error: Unbalanced parentheses\");\n        return;\n    }\n    console.log(max_nesting_index);\n\
    }\n", "    var paren_groups = paren_string.split(\" \");\n    var max_nesting\
    \ = 0;\n    var max_nesting_index = 0;\n    for(var i = 0; i < paren_groups.length;\
    \ i++){\n        var paren_group = paren_groups[i];\n        var nesting = count_nesting(paren_group);\n\
    \        if(nesting > max_nesting){\n            max_nesting = nesting;\n    \
    \        max_nesting_index = i;\n        }\n    }\n    return max_nesting_index;\n\
    }\n", "    var paren_groups = paren_string.split(\" \");\n    var max_nesting\
    \ = 0;\n    var max_nesting_index = 0;\n    for(var i=0; i<paren_groups.length;\
    \ i++){\n        var paren_group = paren_groups[i];\n        var nesting = 0;\n\
    \        for(var j=0; j<paren_group.length; j++){\n            if(paren_group[j]\
    \ == \"(\"){\n                nesting++;\n            }\n            else if(paren_group[j]\
    \ == \")\"){\n                nesting--;\n            }\n        }\n        if(nesting\
    \ > max_nesting){\n            max_nesting = nesting;\n            max_nesting_index\
    \ = i;\n        }\n    }\n    return [max_nesting_index, max_nesting];\n}\n",
  "    var paren_stack = [];\n    var max_nesting = 0;\n    var current_nesting =\
    \ 0;\n    var current_paren = \"\";\n    var current_paren_count = 0;\n    var\
    \ current_paren_index = 0;\n    var current_paren_string = \"\";\n    var current_paren_string_count\
    \ = 0;\n    var current_paren_string_index = 0;\n    var current_paren_string_length\
    \ = 0;\n    var current_paren_string_length_count = 0;\n    var current_paren_string_length_index\
    \ = 0;\n    var current_paren_string_length_length = 0;\n    var current_paren_string_length_length_count\
    \ = 0;\n    var current_paren_string_length_length_index = 0;\n    var current_paren_string_length_length_length\
    \ = 0;\n    var current_paren_string_length_length_length_count = 0;\n    var\
    \ current_paren_string_length_length_length_index = 0;\n    var current_paren_string_length_length_length_length\
    \ = 0;\n    var current_paren_string_length_length_length_length_count = 0;\n\
    \    var current_paren_string_length_length_length_length_index = 0;\n    var\
    \ current_paren_string_length_length_length_length_length = 0;\n    var current_paren_string_length_length_length_length_length_count\
    \ = 0;\n    var current_paren_string_length_length_length_length_length_index\
    \ = 0;\n    var current_paren_string_length_length_length_length_length_length\
    \ = 0;\n    var current_paren_string_length_length_length_length_length_length_count\
    \ = 0;\n    var current_paren_string_length_length_length_length_length_length_index\
    \ = 0;\n    var current_paren_string_length_length_length_length_length_length_length\
    \ = 0;\n    var current_paren_string_length_length_length_length_length_length_length_count\
    \ = 0;\n    var current_paren_string_length_length_length_length", "    var paren_stack\
    \ = [];\n    var max_nesting = 0;\n    var current_nesting = 0;\n    var paren_count\
    \ = 0;\n    var paren_index = 0;\n    var paren_string_length = paren_string.length;\n\
    \    var paren_string_index = 0;\n    var paren_string_char = \"\";\n    var paren_string_char_index\
    \ = 0;\n    var paren_string_char_count = 0;\n    var paren_string_char_count_index\
    \ = 0;\n    var paren_string_char_count_count = 0;\n    var paren_string_char_count_count_index\
    \ = 0;\n    var paren_string_char_count_count_count = 0;\n    var paren_string_char_count_count_count_index\
    \ = 0;\n    var paren_string_char_count_count_count_count = 0;\n    var paren_string_char_count_count_count_count_index\
    \ = 0;\n    var paren_string_char_count_count_count_count_count = 0;\n    var\
    \ paren_string_char_count_count_count_count_count_index = 0;\n    var paren_string_char_count_count_count_count_count_count\
    \ = 0;\n    var paren_string_char_count_count_count_count_count_count_index =\
    \ 0;\n    var paren_string_char_count_count_count_count_count_count_count = 0;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_index = 0;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count = 0;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_index\
    \ = 0;\n    var paren_string_char_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    var paren_string_char_count_count_count_count_count_count_count_count_count",
  "    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n\
    \    var paren_string_length = paren_string.length;\n    var paren_string_index\
    \ = 0;\n    var paren_string_char;\n    var paren_string_char_index;\n    var\
    \ paren_string_char_count;\n    var paren_string_char_count_index;\n    var paren_string_char_count_count;\n\
    \    var paren_string_char_count_count_index;\n    var paren_string_char_count_count_count;\n\
    \    var paren_string_char_count_count_count_index;\n    var paren_string_char_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_count_count_index;\n    var\
    \ paren_string_char_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count", " \
    \   var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n\
    \    var paren_count_stack = [];\n    var paren_count_stack_index = 0;\n    var\
    \ paren_count_stack_max = 0;\n    var paren_count_stack_max_index = 0;\n    var\
    \ paren_count_stack_max_max = 0;\n    var paren_count_stack_max_max_index = 0;\n\
    \    var paren_count_stack_max_max_max = 0;\n    var paren_count_stack_max_max_max_index\
    \ = 0;\n    var paren_count_stack_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_index\
    \ = 0;\n    var paren_count_stack_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_index\
    \ = 0;\n    var paren_count_stack_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_index\
    \ = 0;\n    var paren_count_stack_max_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_index\
    \ = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    var\
    \ paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max_index =\
    \ 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n\
    \    var paren_count_stack_max_max", "    var paren_stack = [];\n    var paren_count\
    \ = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n\
    \    var paren_index = 0;\n    var paren_char;\n    var paren_char_index;\n  \
    \  var paren_char_count;\n    var paren_char_count_index;\n    var paren_char_count_count;\n\
    \    var paren_char_count_count_index;\n    var paren_char_count_count_count;\n\
    \    var paren_char_count_count_count_index;\n    var paren_char_count_count_count_count;\n\
    \    var paren_char_count_count_count_count_index;\n    var paren_char_count_count_count_count_count;\n\
    \    var paren_char_count_count_count_count_count_index;\n    var paren_char_count_count_count_count_count_count;\n\
    \    var paren_char_count_count_count_count_count_count_index;\n    var paren_char_count_count_count_count_count_count_count;\n\
    \    var paren_char_count_count_count_count_count_count_count_index;\n    var\
    \ paren_char_count_count_count_count_count_count_count_count;\n    var paren_char_count_count_count_count_count_count_count_count_index;\n\
    \    var paren_char_count_count_count_count_count_count_count_count_count;\n \
    \   var paren_char_count_count_count_count_count_count_count_count_count_index;\n\
    \    var paren_char_count_count_count_count_count_count_count_count_count_count;\n\
    \    var paren_char_count_count_count_count_count_count_count_count_count_count_index;\n\
    \    var paren_char_count_count_count_count_count_count_count_count_count_count_count;\n\
    \    var paren_char_count", "    var paren_stack = [];\n    var paren_count =\
    \ 0;\n    var paren_string_length = paren_string.length;\n    var paren_index\
    \ = 0;\n    var paren_char = \"\";\n    var paren_char_index = 0;\n    var paren_char_length\
    \ = 0;\n    var paren_char_count = 0;\n    var paren_char_count_stack = [];\n\
    \    var paren_char_count_stack_index = 0;\n    var paren_char_count_stack_length\
    \ = 0;\n    var paren_char_count_stack_length_stack = [];\n    var paren_char_count_stack_length_stack_index\
    \ = 0;\n    var paren_char_count_stack_length_stack_length = 0;\n    var paren_char_count_stack_length_stack_length_stack\
    \ = [];\n    var paren_char_count_stack_length_stack_length_stack_index = 0;\n\
    \    var paren_char_count_stack_length_stack_length_stack_length = 0;\n    var\
    \ paren_char_count_stack_length_stack_length_stack_length_stack = [];\n    var\
    \ paren_char_count_stack_length_stack_length_stack_length_stack_index = 0;\n \
    \   var paren_char_count_stack_length_stack_length_stack_length_stack_length =\
    \ 0;\n    var paren_char_count_stack_length_stack_length_stack_length_stack_length_stack\
    \ = [];\n    var paren_char_count_stack_length_stack_length_stack_length_stack_length_stack_index\
    \ = 0;\n    var paren_char_count_stack_length_stack_length_stack_length_stack_length_stack_length\
    \ = 0;\n    var paren_char_count_stack_length_stack_length_stack_length_stack_length_stack_length_stack\
    \ = [];\n    var paren_char_count_stack_length_stack_length_stack_length_stack_length_stack_length_stack_index\
    \ = 0;\n    var paren_char", "    var result = [];\n    var stack = [];\n    var\
    \ max_depth = 0;\n    var current_depth = 0;\n    var current_index = 0;\n   \
    \ var current_char = paren_string.charAt(current_index);\n    while(current_index\
    \ < paren_string.length){\n        if(current_char === \"(\"){\n            stack.push(current_char);\n\
    \            current_depth++;\n        }\n        else if(current_char === \"\
    )\"){\n            if(stack.length === 0){\n                result.push(current_depth);\n\
    \            }\n            else{\n                stack.pop();\n            \
    \    current_depth--;\n            }\n        }\n        current_index++;\n  \
    \      current_char = paren_string.charAt(current_index);\n    }\n    if(stack.length\
    \ > 0){\n        result.push(current_depth);\n    }\n    return result;\n}\n",
  "    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n\
    \    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length;\
    \ i++){\n        if(paren_string[i] == '('){\n            paren_stack.push(paren_count);\n\
    \            paren_count++;\n        }\n        else if(paren_string[i] == ')'){\n\
    \            paren_count--;\n            if(paren_count == 0){\n             \
    \   paren_level = paren_stack.pop();\n            }\n        }\n    }\n    return\
    \ paren_level;\n}\n", "    var parens = paren_string.split(\" \");\n    var max_nesting\
    \ = 0;\n    var max_nesting_index = 0;\n    for(var i = 0; i < parens.length;\
    \ i++){\n        var num_nesting = count_nesting(parens[i]);\n        if(num_nesting\
    \ > max_nesting){\n            max_nesting = num_nesting;\n            max_nesting_index\
    \ = i;\n        }\n    }\n    return max_nesting_index;\n}\n", "    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n\
    \        if(paren_string[i] == '('){\n            paren_stack.push(paren_count);\n\
    \            paren_count++;\n        }\n        else if(paren_string[i] == ')'){\n\
    \            paren_count--;\n            if(paren_count < 0){\n              \
    \  console.log(\"Error: Invalid parentheses string\");\n                return;\n\
    \            }\n            if(paren_stack.length > 0){\n                paren_level\
    \ = paren_stack.pop();\n            }\n        }\n    }\n    return paren_level;\n\
    }\n", "    var paren_stack = [];\n    var paren_count = 0;\n    var paren_depth\
    \ = 0;\n    var paren_index = 0;\n    var paren_string_length = paren_string.length;\n\
    \    var paren_string_index = 0;\n    var paren_string_index_prev = 0;\n    var\
    \ paren_string_index_next = 0;\n    var paren_string_index_next_prev = 0;\n  \
    \  var paren_string_index_next_next = 0;\n    var paren_string_index_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next = 0;\n    var paren_string_index_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next_next_next = 0;\n    var\
    \ paren_string_index_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next\
    \ = 0;\n    var paren_string_index_next_next_next_next_next_next_next_prev = 0;\n\
    \    var paren_string_index_next_next_next_next_next_next_next_next = 0;\n   \
    \ var paren_string_index_next_next_next_next_next_next_next_next_prev = 0;\n \
    \   var paren_string_index_next_next_next_next_next_next_next_next_next = 0;\n\
    \    var paren_string_index_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next", "    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n\
    \        if(paren_string[i] === '('){\n            paren_stack.push(paren_count);\n\
    \            paren_count++;\n            paren_level++;\n        }\n        else\
    \ if(paren_string[i] === ')'){\n            paren_count--;\n            paren_level--;\n\
    \            if(paren_level === 0){\n                var max_nesting = Math.max.apply(null,\
    \ paren_stack);\n                console.log(max_nesting);\n                paren_stack\
    \ = [];\n            }\n        }\n    }\n}\n", "    var paren_stack = [];\n \
    \   var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    for (var i = 0; i < paren_string_length; i++){\n\
    \        if (paren_string[i] === '('){\n            paren_count++;\n         \
    \   paren_stack.push(paren_count);\n            paren_level++;\n        }\n  \
    \      else if (paren_string[i] === ')'){\n            if (paren_level === 0){\n\
    \                console.log(\"Error: Invalid parentheses\");\n              \
    \  return;\n            }\n            paren_count--;\n            if (paren_count\
    \ === 0){\n                var max_level = Math.max.apply(null, paren_stack);\n\
    \                console.log(max_level);\n                paren_stack.pop();\n\
    \                paren_level--;\n            }\n        }\n    }\n}\n", "    var\
    \ paren_stack = [];\n    var paren_count = 0;\n    var paren_depth = 0;\n    var\
    \ paren_index = 0;\n    var paren_count_max = 0;\n    var paren_depth_max = 0;\n\
    \    var paren_index_max = 0;\n    var paren_count_max_index = 0;\n    var paren_depth_max_index\
    \ = 0;\n    var paren_index_max_index = 0;\n    var paren_count_max_index_max\
    \ = 0;\n    var paren_depth_max_index_max = 0;\n    var paren_index_max_index_max\
    \ = 0;\n    var paren_count_max_index_max_index = 0;\n    var paren_depth_max_index_max_index\
    \ = 0;\n    var paren_index_max_index_max_index = 0;\n    var paren_count_max_index_max_index_max\
    \ = 0;\n    var paren_depth_max_index_max_index_max = 0;\n    var paren_index_max_index_max_index_max\
    \ = 0;\n    var paren_count_max_index_max_index_max_index = 0;\n    var paren_depth_max_index_max_index_max_index\
    \ = 0;\n    var paren_index_max_index_max_index_max_index = 0;\n    var paren_count_max_index_max_index_max_index_max\
    \ = 0;\n    var paren_depth_max_index_max_index_max_index_max = 0;\n    var paren_index_max_index_max_index_max_index_max\
    \ = 0;\n    var paren_count_max_index_max_index_max_index_max_index = 0;\n   \
    \ var paren_depth_max_index_max_index_max_index_max_index = 0;\n    var paren_index_max_index_max_index_max_index_max_index\
    \ = 0;\n    var paren_count_max_index_max_index_max_", "    var paren_count =\
    \ 0;\n    var paren_stack = [];\n    var paren_count_stack = [];\n    var paren_stack_count\
    \ = 0;\n    var paren_count_stack_count = 0;\n    var paren_stack_count_stack\
    \ = [];\n    var paren_count_stack_count_stack = [];\n    var paren_stack_count_stack_count\
    \ = 0;\n    var paren_count_stack_count_stack_count = 0;\n    var paren_stack_count_stack_count_stack\
    \ = [];\n    var paren_count_stack_count_stack_count_stack = [];\n    var paren_stack_count_stack_count_stack_count\
    \ = 0;\n    var paren_count_stack_count_stack_count_stack_count = 0;\n    var\
    \ paren_stack_count_stack_count_stack_count_stack = [];\n    var paren_count_stack_count_stack_count_stack_count_stack\
    \ = [];\n    var paren_stack_count_stack_count_stack_count_stack_count = 0;\n\
    \    var paren_count_stack_count_stack_count_stack_count_stack_count = 0;\n  \
    \  var paren_stack_count_stack_count_stack_count_stack_count_stack = [];\n   \
    \ var paren_count_stack_count_stack_count_stack_count_stack_count_stack = [];\n\
    \    var paren_stack_count_stack_count_stack_count_stack_count_stack_count = 0;\n\
    \    var paren_count_stack_count_stack_count_stack_count_stack_count_stack_count\
    \ = 0;\n    var paren_stack_count_stack_count_stack_count_stack_count_stack_count_stack\
    \ = [];\n    var paren_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack\
    \ = [];\n    var paren_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count\
    \ = 0;\n    var paren_count_stack_count_stack_count_stack_count_stack", "    var\
    \ result = [];\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_depth\
    \ = 0;\n    var paren_index = 0;\n    var paren_char = \"\";\n    var paren_char_index\
    \ = 0;\n    var paren_char_count = 0;\n    var paren_char_count_index = 0;\n \
    \   var paren_char_count_count = 0;\n    var paren_char_count_count_index = 0;\n\
    \    var paren_char_count_count_count = 0;\n    var paren_char_count_count_count_index\
    \ = 0;\n    var paren_char_count_count_count_count = 0;\n    var paren_char_count_count_count_count_index\
    \ = 0;\n    var paren_char_count_count_count_count_count = 0;\n    var paren_char_count_count_count_count_count_index\
    \ = 0;\n    var paren_char_count_count_count_count_count_count = 0;\n    var paren_char_count_count_count_count_count_count_index\
    \ = 0;\n    var paren_char_count_count_count_count_count_count_count = 0;\n  \
    \  var paren_char_count_count_count_count_count_count_count_index = 0;\n    var\
    \ paren_char_count_count_count_count_count_count_count_count = 0;\n    var paren_char_count_count_count_count_count_count_count_count_index\
    \ = 0;\n    var paren_char_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    var paren_char_count_count_count_count_count_count_count_count_count_index\
    \ = 0;\n    var paren_char_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    var paren_char_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0;\n    var paren_", "    var paren_stack = [];\n    var paren_count = 0;\n\
    \    var max_nesting = 0;\n    var current_level = 0;\n    var current_paren =\
    \ 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i\
    \ < paren_string_length; i++){\n        if(paren_string[i] == '('){\n        \
    \    paren_stack.push(paren_count);\n            paren_count++;\n            current_level++;\n\
    \        }\n        else if(paren_string[i] == ')'){\n            paren_count--;\n\
    \            current_level--;\n            if(current_level < 0){\n          \
    \      console.log(\"Error: Invalid parentheses string\");\n                return;\n\
    \            }\n            if(paren_count == 0){\n                max_nesting\
    \ = Math.max(max_nesting, current_level);\n                current_paren = paren_stack.pop();\n\
    \            }\n        }\n    }\n    console.log(max_nesting);\n}\n", "  var\
    \ paren_groups = paren_string.split(\" \");\n  var max_nesting = 0;\n  var max_nesting_index\
    \ = 0;\n  for(var i = 0; i < paren_groups.length; i++){\n    var paren_group =\
    \ paren_groups[i];\n    var nesting = 0;\n    for(var j = 0; j < paren_group.length;\
    \ j++){\n      if(paren_group[j] == \"(\"){\n        nesting++;\n      }\n   \
    \   else if(paren_group[j] == \")\"){\n        nesting--;\n      }\n    }\n  \
    \  if(nesting > max_nesting){\n      max_nesting = nesting;\n      max_nesting_index\
    \ = i;\n    }\n  }\n  return [max_nesting_index, max_nesting];\n}\n", "    var\
    \ paren_count = 0;\n    var paren_stack = [];\n    var paren_string_arr = paren_string.split(\"\
    \ \");\n    for(var i=0; i<paren_string_arr.length; i++){\n        if(paren_string_arr[i]\
    \ == \"(\"){\n            paren_count++;\n            paren_stack.push(paren_count);\n\
    \        }\n        else if(paren_string_arr[i] == \")\"){\n            paren_count--;\n\
    \            if(paren_count == 0){\n                var max_nesting = Math.max.apply(null,\
    \ paren_stack);\n                console.log(max_nesting);\n                paren_stack.pop();\n\
    \            }\n        }\n    }\n}\n", "    var result = [];\n    var stack =\
    \ [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string\
    \ = paren_string.split(\" \");\n    for(var i = 0; i < paren_string.length; i++){\n\
    \        if(paren_string[i] == \"(\"){\n            stack.push(paren_string[i]);\n\
    \            paren_count++;\n            paren_level++;\n        }\n        else\
    \ if(paren_string[i] == \")\"){\n            if(stack.length > 0){\n         \
    \       stack.pop();\n                paren_count--;\n            }\n        }\n\
    \        else{\n            if(stack.length > 0){\n                stack.pop();\n\
    \                paren_count--;\n            }\n            if(paren_count ==\
    \ 0){\n                result.push(paren_level);\n                paren_count\
    \ = 0;\n                paren_level = 0;\n            }\n        }\n    }\n  \
    \  return result;\n}\n", "    var paren_stack = [];\n    var paren_count = 0;\n\
    \    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n\
    \    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i]\
    \ == '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n\
    \            paren_level++;\n        }\n        else if(paren_string[i] == ')'){\n\
    \            paren_count--;\n            if(paren_count == 0){\n             \
    \   var max_level = Math.max.apply(null, paren_stack);\n                console.log(max_level);\n\
    \                paren_stack.pop();\n                paren_level--;\n        \
    \    }\n        }\n    }\n}\n", "    var paren_stack = [];\n    var max_nesting\
    \ = 0;\n    var current_nesting = 0;\n    var current_char = \"\";\n    var current_char_index\
    \ = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0;\
    \ i < paren_string_length; i++){\n        current_char = paren_string[i];\n  \
    \      if(current_char == \"(\"){\n            paren_stack.push(current_char);\n\
    \            current_nesting++;\n        }\n        else if(current_char == \"\
    )\"){\n            if(paren_stack.length > 0){\n                paren_stack.pop();\n\
    \                current_nesting--;\n            }\n        }\n        else if(current_char\
    \ == \" \"){\n            if(paren_stack.length > 0){\n                if(current_nesting\
    \ > max_nesting){\n                    max_nesting = current_nesting;\n      \
    \          }\n                current_nesting = 0;\n            }\n        }\n\
    \    }\n    return max_nesting;\n}\n", "    var paren_stack = [];\n    var paren_count\
    \ = 0;\n    var paren_depth = 0;\n    var paren_string_length = paren_string.length;\n\
    \    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i]\
    \ === '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n\
    \        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n\
    \            if(paren_count === 0){\n                paren_depth = paren_stack.pop();\n\
    \            }\n        }\n    }\n    return paren_depth;\n}\n", "    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var paren_count_stack = [];\n    var paren_count_stack_index\
    \ = 0;\n    var paren_count_stack_index_stack = [];\n    var paren_count_stack_index_stack_index\
    \ = 0;\n    var paren_count_stack_index_stack_index_stack = [];\n    var paren_count_stack_index_stack_index_stack_index\
    \ = 0;\n    var paren_count_stack_index_stack_index_stack_index_stack = [];\n\
    \    var paren_count_stack_index_stack_index_stack_index_stack_index = 0;\n  \
    \  var paren_count_stack_index_stack_index_stack_index_stack_index_stack = [];\n\
    \    var paren_count_stack_index_stack_index_stack_index_stack_index_stack_index\
    \ = 0;\n    var paren_count_stack_index_stack_index_stack_index_stack_index_stack_index\
    \ = [];\n    var paren_count_stack_index_stack_index_stack_index_stack_index_stack_index_stack\
    \ = [];\n    var paren_count_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index\
    \ = 0;\n    var paren_count_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index\
    \ = [];\n    var paren_count_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index_stack\
    \ = [];\n    var paren_count_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index_stack\
    \ = [];\n    var paren_count_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index\
    \ = 0;\n    var paren_count_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index_stack\
    \ = [];\n    var paren_count_stack_index_stack_index_stack_index", "    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var max_nesting = 0;\n    var paren_count_stack\
    \ = [];\n    var paren_count_stack_index = 0;\n    var paren_count_stack_max =\
    \ 0;\n    var paren_count_stack_max_index = 0;\n    var paren_count_stack_max_length\
    \ = 0;\n    var paren_count_stack_max_length_index = 0;\n    var paren_count_stack_max_length_length\
    \ = 0;\n    var paren_count_stack_max_length_length_index = 0;\n    var paren_count_stack_max_length_length_length\
    \ = 0;\n    var paren_count_stack_max_length_length_length_index = 0;\n    var\
    \ paren_count_stack_max_length_length_length_length = 0;\n    var paren_count_stack_max_length_length_length_length_index\
    \ = 0;\n    var paren_count_stack_max_length_length_length_length_length = 0;\n\
    \    var paren_count_stack_max_length_length_length_length_length_index = 0;\n\
    \    var paren_count_stack_max_length_length_length_length_length_length = 0;\n\
    \    var paren_count_stack_max_length_length_length_length_length_length_index\
    \ = 0;\n    var paren_count_stack_max_length_length_length_length_length_length_length\
    \ = 0;\n    var paren_count_stack_max_length_length_length_length_length_length_length_index\
    \ = 0;\n    var paren_count_stack_max_length_length_length_length_length_length_length_length\
    \ = 0;\n    var paren_count_stack_max_length_length_length_length_length_length_length_length_index\
    \ = 0;\n    var paren_count_stack_max_length_length_length_length_length_length_length_length_length\
    \ = 0;\n    var paren_count_stack_max_length", "    var paren_stack = [];\n  \
    \  var paren_count = 0;\n    var paren_count_stack = [];\n    var paren_count_stack_index\
    \ = 0;\n    var paren_count_stack_top = 0;\n    var paren_count_stack_top_index\
    \ = 0;\n    var paren_count_stack_top_value = 0;\n    var paren_count_stack_top_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value = 0;\n    var paren_count_stack_top_value_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value_value = 0;\n   \
    \ var paren_count_stack_top_value_value_value_value_value_index = 0;\n    var\
    \ paren_count_stack_top_value_value_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_value\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_value_value\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value_value_value", " \
    \   var paren_count = 0;\n    var paren_stack = [];\n    var output = [];\n  \
    \  var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length;\
    \ i++){\n        if(paren_string[i] === '('){\n            paren_count++;\n  \
    \          paren_stack.push(paren_count);\n        }\n        else if(paren_string[i]\
    \ === ')'){\n            paren_count--;\n            if(paren_count === 0){\n\
    \                output.push(paren_stack.pop());\n            }\n        }\n \
    \   }\n    return output;\n}\n", "    var paren_count = 0;\n    var paren_stack\
    \ = [];\n    var output = [];\n    var current_level = 0;\n    var current_paren_count\
    \ = 0;\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i]\
    \ === '('){\n            paren_count++;\n            current_paren_count++;\n\
    \            if(current_level === 0){\n                current_level = paren_count;\n\
    \            }\n            else{\n                current_level = Math.max(current_level,\
    \ paren_count);\n            }\n        }\n        else if(paren_string[i] ===\
    \ ')'){\n            current_paren_count--;\n            if(current_paren_count\
    \ === 0){\n                current_level = Math.max(current_level, paren_count);\n\
    \                paren_count--;\n                paren_stack.push(current_level);\n\
    \                current_level = paren_stack.pop();\n            }\n        }\n\
    \    }\n    if(current_level !== 0){\n        output.push(current_level);\n  \
    \  }\n    return output;\n}\n", "    var paren_stack = [];\n    var paren_count\
    \ = 0;\n    var paren_level = 0;\n    var paren_count_stack = [];\n    var paren_count_stack_index\
    \ = 0;\n    var paren_count_stack_top = 0;\n    var paren_count_stack_top_index\
    \ = 0;\n    var paren_count_stack_top_top = 0;\n    var paren_count_stack_top_top_index\
    \ = 0;\n    var paren_count_stack_top_top_top = 0;\n    var paren_count_stack_top_top_top_index\
    \ = 0;\n    var paren_count_stack_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_index\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_index\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_top_index\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_index\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top = 0;\n    var\
    \ paren_count_stack_top_top_top_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top_index =\
    \ 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top_top = 0;\n\
    \    var paren_count_stack_top_top", "    var paren_groups = paren_string.split(\"\
    \ \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length;\
    \ i++){\n        var paren_group = paren_groups[i];\n        var nesting = count_nesting(paren_group);\n\
    \        if(nesting > max_nesting){\n            max_nesting = nesting;\n    \
    \    }\n    }\n    return max_nesting;\n}\n", "    var paren_stack = [];\n   \
    \ var max_nesting = 0;\n    var current_nesting = 0;\n    var paren_count = 0;\n\
    \    var paren_index = 0;\n    var paren_char = \"\";\n    var paren_char_count\
    \ = 0;\n    var paren_char_index = 0;\n    var paren_char_count_stack = [];\n\
    \    var paren_char_index_stack = [];\n    var paren_char_stack = [];\n    var\
    \ paren_char_stack_index = 0;\n    var paren_char_stack_count = 0;\n    var paren_char_stack_count_stack\
    \ = [];\n    var paren_char_stack_index_stack = [];\n    var paren_char_stack_stack\
    \ = [];\n    var paren_char_stack_stack_index = 0;\n    var paren_char_stack_stack_count\
    \ = 0;\n    var paren_char_stack_stack_count_stack = [];\n    var paren_char_stack_stack_index_stack\
    \ = [];\n    var paren_char_stack_stack_stack = [];\n    var paren_char_stack_stack_index_stack\
    \ = [];\n    var paren_char_stack_stack_stack_index = 0;\n    var paren_char_stack_stack_stack_count\
    \ = 0;\n    var paren_char_stack_stack_stack_count_stack = [];\n    var paren_char_stack_stack_stack_index_stack\
    \ = [];\n    var paren_char_stack_stack_stack_stack = [];\n    var paren_char_stack_stack_stack_index_stack\
    \ = [];\n    var paren_char_stack_stack_stack_stack_index = 0;\n    var paren_char_stack_stack_stack_stack_count\
    \ = 0;\n    var paren_char_stack_stack_stack_stack_count_stack = [];\n    var\
    \ paren_char_stack_stack_stack_stack_index_stack = [];\n    var paren_char_stack_stack_stack_stack_stack\
    \ = [];\n    var paren_char_stack_stack_stack", "    var paren_groups = paren_string.split(\"\
    \ \");\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var\
    \ i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n\
    \        var nesting = count_nested_parens(paren_group);\n        if(nesting >\
    \ max_nesting){\n            max_nesting = nesting;\n            max_nesting_index\
    \ = i;\n        }\n    }\n    return [max_nesting, max_nesting_index];\n}\n",
  "    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n \
    \   for(var i=0; i<paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n\
    \        var paren_count = 0;\n        for(var j=0; j<paren_group.length; j++){\n\
    \            if(paren_group[j] == \"(\"){\n                paren_count++;\n  \
    \          }\n            else if(paren_group[j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        if(paren_count > max_nesting){\n          \
    \  max_nesting = paren_count;\n        }\n    }\n    return max_nesting;\n}\n",
  "    var paren_stack = [];\n    var paren_count = 0;\n    var max_nesting = 0;\n\
    \    var max_nesting_index = 0;\n    var paren_string_length = paren_string.length;\n\
    \    for (var i = 0; i < paren_string_length; i++){\n        if (paren_string[i]\
    \ === '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n\
    \        }\n        else if (paren_string[i] === ')'){\n            paren_count--;\n\
    \            if (paren_count === 0){\n                var max_nesting_count =\
    \ 0;\n                for (var j = 0; j < paren_stack.length; j++){\n        \
    \            if (paren_stack[j] > max_nesting_count){\n                      \
    \  max_nesting_count = paren_stack[j];\n                        max_nesting_index\
    \ = j;\n                    }\n                }\n                max_nesting\
    \ = max_nesting_count;\n                paren_stack.splice(max_nesting_index,\
    \ 1);\n            }\n        }\n    }\n    return max_nesting;\n}\n", "    var\
    \ paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var\
    \ paren_count_stack = [];\n    var paren_count_stack_index = 0;\n    var paren_count_stack_max\
    \ = 0;\n    var paren_count_stack_max_index = 0;\n    var paren_count_stack_max_max\
    \ = 0;\n    var paren_count_stack_max_max_index = 0;\n    var paren_count_stack_max_max_max\
    \ = 0;\n    var paren_count_stack_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max\
    \ = 0;\n    var paren_count_stack_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max\
    \ = 0;\n    var paren_count_stack_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max\
    \ = 0;\n    var paren_count_stack_max_max_max_max_max_max_index = 0;\n    var\
    \ paren_count_stack_max_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_index\
    \ = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    var\
    \ paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max_index =\
    \ 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n\
    \    var paren_count_stack_max_max", "    var paren_stack = [];\n    var paren_count\
    \ = 0;\n    var paren_count_stack = [];\n    var max_nesting = 0;\n    var max_nesting_stack\
    \ = [];\n    var paren_string_split = paren_string.split(\" \");\n    for(var\
    \ i = 0; i < paren_string_split.length; i++){\n        if(paren_string_split[i]\
    \ == \"(\" || paren_string_split[i] == \")\"){\n            paren_count++;\n \
    \           paren_count_stack.push(paren_count);\n            paren_stack.push(paren_string_split[i]);\n\
    \        }\n        else if(paren_string_split[i] == \")\"){\n            if(paren_count_stack.length\
    \ > 0){\n                paren_count = paren_count_stack.pop();\n            }\n\
    \            else{\n                console.log(\"Error: Invalid input\");\n \
    \               return;\n            }\n        }\n        else if(paren_string_split[i]\
    \ == \"(\"){\n            if(paren_count_stack.length > 0){\n                paren_count\
    \ = paren_count_stack.pop();\n            }\n            else{\n             \
    \   console.log(\"Error: Invalid input\");\n                return;\n        \
    \    }\n        }\n        if(paren_count > max_nesting){\n            max_nesting\
    \ = paren_count;\n            max_nesting_stack = paren_count_stack;\n       \
    \ }\n    }\n    console.log(max_nesting_stack);\n}\n", "    var paren_groups =\
    \ paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i <\
    \ paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n   \
    \     var nesting = 0;\n        for(var j = 0; j < paren_group.length; j++){\n\
    \            if(paren_group[j] == \"(\"){\n                nesting++;\n      \
    \      }\n            else if(paren_group[j] == \")\"){\n                nesting--;\n\
    \            }\n        }\n        if(nesting > max_nesting){\n            max_nesting\
    \ = nesting;\n        }\n    }\n    return max_nesting;\n}\n", "    var paren_count\
    \ = 0;\n    var paren_stack = [];\n    var output = [];\n    var paren_string_length\
    \ = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n\
    \        if(paren_string[i] === '('){\n            paren_count++;\n          \
    \  paren_stack.push(paren_count);\n        }\n        else if(paren_string[i]\
    \ === ')'){\n            if(paren_stack.length === 0){\n                output.push(paren_count);\n\
    \            }\n            else{\n                paren_count = paren_stack.pop();\n\
    \            }\n        }\n    }\n    return output;\n}\n", "    var paren_stack\
    \ = [];\n    var current_level = 0;\n    var max_level = 0;\n    var max_index\
    \ = 0;\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i]\
    \ === '('){\n            paren_stack.push(i);\n            current_level++;\n\
    \        }\n        else if(paren_string[i] === ')'){\n            if(current_level\
    \ === 0){\n                console.log(\"Error: Unbalanced parentheses\");\n \
    \               return;\n            }\n            current_level--;\n       \
    \     if(current_level === 0){\n                max_index = i;\n             \
    \   max_level = paren_stack.length;\n            }\n            paren_stack.pop();\n\
    \        }\n    }\n    if(current_level !== 0){\n        console.log(\"Error:\
    \ Unbalanced parentheses\");\n        return;\n    }\n    console.log(max_level);\n\
    \    console.log(max_index);\n}\n", "    var paren_groups = paren_string.split(\"\
    \ \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length;\
    \ i++){\n        var paren_group = paren_groups[i];\n        var nesting = 0;\n\
    \        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j]\
    \ == \"(\"){\n                nesting++;\n            }\n            else if(paren_group[j]\
    \ == \")\"){\n                nesting--;\n            }\n        }\n        if(nesting\
    \ > max_nesting){\n            max_nesting = nesting;\n        }\n    }\n    return\
    \ max_nesting;\n}\n", "    var paren_count = 0;\n    var paren_stack = [];\n \
    \   var result = [];\n    for(var i = 0; i < paren_string.length; i++){\n    \
    \    if(paren_string[i] === '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n\
    \        }\n        else if(paren_string[i] === ')'){\n            if(paren_stack.length\
    \ === 0){\n                result.push(paren_count);\n            }\n        \
    \    else{\n                var top = paren_stack.pop();\n                if(top\
    \ === paren_count){\n                    result.push(paren_count);\n         \
    \       }\n                else{\n                    result.push(top);\n    \
    \            }\n            }\n        }\n    }\n    return result;\n}\n", " \
    \   var paren_stack = [];\n    var paren_count = 0;\n    var max_nesting = 0;\n\
    \    var max_nesting_index = 0;\n    var paren_string_length = paren_string.length;\n\
    \    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i]\
    \ === '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n\
    \        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n\
    \            if(paren_count === 0){\n                max_nesting = Math.max(max_nesting,\
    \ paren_stack.pop());\n            }\n        }\n    }\n    max_nesting_index\
    \ = paren_stack.indexOf(max_nesting);\n    return max_nesting_index;\n}\n", " \
    \   var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n\
    \    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group =\
    \ paren_groups[i];\n        var nesting = 0;\n        for(var j = 0; j < paren_group.length;\
    \ j++){\n            if(paren_group[j] == \"(\"){\n                nesting++;\n\
    \            }\n            else if(paren_group[j] == \")\"){\n              \
    \  nesting--;\n            }\n        }\n        if(nesting > max_nesting){\n\
    \            max_nesting = nesting;\n        }\n    }\n    return max_nesting;\n\
    }\n", "    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level\
    \ = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0;\
    \ i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n     \
    \       paren_count++;\n            paren_stack.push(paren_count);\n         \
    \   paren_level++;\n        }\n        else if(paren_string[i] === ')'){\n   \
    \         paren_count--;\n            if(paren_count === 0){\n               \
    \ var max_level = Math.max.apply(null, paren_stack);\n                console.log(max_level);\n\
    \                paren_stack.pop();\n                paren_level--;\n        \
    \    }\n        }\n    }\n}\n", "    var paren_groups = paren_string.split(\"\
    \ \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length;\
    \ i++){\n        var paren_group = paren_groups[i];\n        var nesting = count_nested_parens(paren_group);\n\
    \        if(nesting > max_nesting){\n            max_nesting = nesting;\n    \
    \    }\n    }\n    return max_nesting;\n}\n\nfunction count_nested_parens(paren_group){\n\
    \    var nesting = 0;\n    for(var i = 0; i < paren_group.length; i++){\n    \
    \    if(paren_group[i] === \"(\"){\n            nesting++;\n        }\n      \
    \  else if(paren_group[i] === \")\"){\n            nesting--;\n        }\n   \
    \ }\n    return nesting;\n}\n\nfunction get_max_nesting(paren_string){\n    var\
    \ paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var\
    \ i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n\
    \        var nesting = count_nested_parens(paren_group);\n        if(nesting >\
    \ max_nesting){\n            max_nesting = nesting;\n        }\n    }\n    return\
    \ max_nesting;\n}\n\nfunction get_max_nesting_from_string(paren_string){\n   \
    \ var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n  \
    \  for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n\
    \        var nesting = count_nested_parens(paren_group);\n        if(nesting >\
    \ max_nesting){\n            max_nesting = nesting;\n        }\n    }\n    return\
    \ max_nesting;\n}\n\nfunction get_max_nesting_from_string_2(paren_string){\n \
    \   var paren_groups = paren", "    var paren_stack = [];\n    var paren_count\
    \ = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n\
    \    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i]\
    \ === '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n\
    \            paren_level++;\n        }\n        else if(paren_string[i] === ')'){\n\
    \            paren_count--;\n            if(paren_count === 0){\n            \
    \    paren_level--;\n                if(paren_level === 0){\n                \
    \    var max_nesting = Math.max.apply(null, paren_stack);\n                  \
    \  console.log(max_nesting);\n                    paren_stack = [];\n        \
    \        }\n            }\n            else{\n                paren_stack.push(paren_count);\n\
    \            }\n        }\n    }\n}\n", "    var paren_stack = [];\n    var paren_count\
    \ = 0;\n    var paren_level = 0;\n    var paren_count_stack = [];\n    var paren_level_stack\
    \ = [];\n    var paren_count_stack_index = 0;\n    var paren_level_stack_index\
    \ = 0;\n    var paren_count_stack_top = 0;\n    var paren_level_stack_top = 0;\n\
    \    var paren_count_stack_top_index = 0;\n    var paren_level_stack_top_index\
    \ = 0;\n    var paren_count_stack_top_value = 0;\n    var paren_level_stack_top_value\
    \ = 0;\n    var paren_count_stack_top_index_value = 0;\n    var paren_level_stack_top_index_value\
    \ = 0;\n    var paren_count_stack_top_value_value = 0;\n    var paren_level_stack_top_value_value\
    \ = 0;\n    var paren_count_stack_top_index_value_value = 0;\n    var paren_level_stack_top_index_value_value\
    \ = 0;\n    var paren_count_stack_top_value_value_value = 0;\n    var paren_level_stack_top_value_value_value\
    \ = 0;\n    var paren_count_stack_top_index_value_value_value = 0;\n    var paren_level_stack_top_index_value_value_value\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value = 0;\n    var paren_level_stack_top_value_value_value_value\
    \ = 0;\n    var paren_count_stack_top_index_value_value_value_value = 0;\n   \
    \ var paren_level_stack_top_index_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_value\
    \ = 0;\n    var paren_level_stack_top_value_value_value_value_value = 0;\n   \
    \ var paren_", "    var result = [];\n    var stack = [];\n    var paren_count\
    \ = 0;\n    var paren_depth = 0;\n    var paren_index = 0;\n    var paren_string\
    \ = paren_string.split(\" \");\n    for(var i = 0; i < paren_string.length; i++){\n\
    \        if(paren_string[i] == \"(\"){\n            paren_count++;\n         \
    \   stack.push(paren_count);\n            paren_depth = 0;\n        }\n      \
    \  else if(paren_string[i] == \")\"){\n            paren_depth = stack.pop();\n\
    \        }\n        else if(paren_string[i] == \")\"){\n            paren_depth++;\n\
    \        }\n        result.push(paren_depth);\n    }\n    return result;\n}\n",
  "    var paren_list = paren_string.split(\" \");\n    var max_nesting = 0;\n   \
    \ var max_nesting_index = 0;\n    for(var i = 0; i < paren_list.length; i++){\n\
    \        var paren_count = 0;\n        for(var j = 0; j < paren_list[i].length;\
    \ j++){\n            if(paren_list[i][j] == \"(\"){\n                paren_count++;\n\
    \            }\n            else if(paren_list[i][j] == \")\"){\n            \
    \    paren_count--;\n            }\n        }\n        if(paren_count > max_nesting){\n\
    \            max_nesting = paren_count;\n            max_nesting_index = i;\n\
    \        }\n    }\n    return [max_nesting_index, max_nesting];\n}\n", "    var\
    \ paren_stack = [];\n    var paren_count = 0;\n    var paren_count_stack = [];\n\
    \    var paren_count_stack_index = 0;\n    var paren_count_stack_max = 0;\n  \
    \  var paren_count_stack_max_index = 0;\n    var paren_count_stack_max_max = 0;\n\
    \    var paren_count_stack_max_max_index = 0;\n    var paren_count_stack_max_max_max\
    \ = 0;\n    var paren_count_stack_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max\
    \ = 0;\n    var paren_count_stack_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max\
    \ = 0;\n    var paren_count_stack_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max\
    \ = 0;\n    var paren_count_stack_max_max_max_max_max_max_index = 0;\n    var\
    \ paren_count_stack_max_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_index\
    \ = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    var\
    \ paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max_index =\
    \ 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n\
    \    var paren_count_stack_max_max_max_max_max_max_max", "    var paren_stack\
    \ = [];\n    var current_level = 0;\n    var max_level = 0;\n    var max_level_index\
    \ = 0;\n    var paren_count = 0;\n    var paren_count_index = 0;\n    var paren_string_index\
    \ = 0;\n    var paren_string_length = paren_string.length;\n    var paren_string_char;\n\
    \    var paren_string_char_index;\n    var paren_string_char_count;\n    var paren_string_char_count_index;\n\
    \    var paren_string_char_count_length;\n    var paren_string_char_count_char;\n\
    \    var paren_string_char_count_char_index;\n    var paren_string_char_count_char_count;\n\
    \    var paren_string_char_count_char_count_index;\n    var paren_string_char_count_char_count_length;\n\
    \    var paren_string_char_count_char_count_char;\n    var paren_string_char_count_char_count_char_index;\n\
    \    var paren_string_char_count_char_count_char_count;\n    var paren_string_char_count_char_count_char_count_index;\n\
    \    var paren_string_char_count_char_count_char_count_length;\n    var paren_string_char_count_char_count_char_count_char;\n\
    \    var paren_string_char_count_char_count_char_count_char_index;\n    var paren_string_char_count_char_count_char_count_char_count;\n\
    \    var paren_string_char_count_char_count_char_count_char_count_index;\n   \
    \ var paren_string_char_count_char_count_char_count_char_count_length;\n    var\
    \ paren_string_char_count_char_count_char_count_char_count_char;\n    var paren_string_char_count_char_count_char_count_char_count_char_index;\n\
    \    ", "    var paren_stack = [];\n    var max_nesting = 0;\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        if(paren_string[i] == '('){\n        \
    \    paren_stack.push(i);\n        }\n        else if(paren_string[i] == ')'){\n\
    \            var last_index = paren_stack.pop();\n            if(paren_stack.length\
    \ > 0){\n                max_nesting = Math.max(max_nesting, paren_stack.length);\n\
    \            }\n            else{\n                max_nesting = Math.max(max_nesting,\
    \ i - last_index);\n            }\n        }\n    }\n    return max_nesting;\n\
    }\n", "    var paren_groups = paren_string.split(\" \");\n    var max_nesting\
    \ = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var group =\
    \ paren_groups[i];\n        var nesting = 0;\n        for(var j = 0; j < group.length;\
    \ j++){\n            if(group[j] === \"(\"){\n                nesting++;\n   \
    \         }\n            else if(group[j] === \")\"){\n                nesting--;\n\
    \            }\n        }\n        if(nesting > max_nesting){\n            max_nesting\
    \ = nesting;\n        }\n    }\n    return max_nesting;\n}\n", "    var paren_stack\
    \ = [];\n    var max_depth = 0;\n    var current_depth = 0;\n    var current_paren\
    \ = 0;\n    var current_paren_string = \"\";\n    var paren_string_length = paren_string.length;\n\
    \    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i]\
    \ === \" \"){\n            continue;\n        }\n        if(paren_string[i] ===\
    \ \"(\"){\n            current_depth++;\n            current_paren_string += paren_string[i];\n\
    \            if(current_depth > max_depth){\n                max_depth = current_depth;\n\
    \            }\n            if(current_depth === 1){\n                paren_stack.push(current_paren);\n\
    \                current_paren = i;\n            }\n        }\n        else if(paren_string[i]\
    \ === \")\"){\n            current_depth--;\n            current_paren_string\
    \ += paren_string[i];\n            if(current_depth === 0){\n                current_paren\
    \ = paren_stack.pop();\n                current_paren_string = current_paren_string.substring(0,\
    \ current_paren);\n            }\n        }\n    }\n    return max_depth;\n}\n",
  "    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n \
    \   var max_nesting_index = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n\
    \        var paren_group = paren_groups[i];\n        var nesting = 0;\n      \
    \  for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j]\
    \ == \"(\"){\n                nesting++;\n            }\n            else if(paren_group[j]\
    \ == \")\"){\n                nesting--;\n            }\n        }\n        if(nesting\
    \ > max_nesting){\n            max_nesting = nesting;\n            max_nesting_index\
    \ = i;\n        }\n    }\n    return [max_nesting_index, max_nesting];\n}\n",
  "    var paren_count = 0;\n    var paren_stack = [];\n    var output = [];\n   \
    \ var paren_level = 0;\n    var paren_level_count = 0;\n    var paren_level_max\
    \ = 0;\n    var paren_level_min = 0;\n    var paren_level_max_count = 0;\n   \
    \ var paren_level_min_count = 0;\n    var paren_level_min_max_count = 0;\n   \
    \ var paren_level_min_max_count_count = 0;\n    var paren_level_min_max_count_count_count\
    \ = 0;\n    var paren_level_min_max_count_count_count_count = 0;\n    var paren_level_min_max_count_count_count_count_count\
    \ = 0;\n    var paren_level_min_max_count_count_count_count_count_count = 0;\n\
    \    var paren_level_min_max_count_count_count_count_count_count_count = 0;\n\
    \    var paren_level_min_max_count_count_count_count_count_count_count_count =\
    \ 0;\n    var paren_level_min_max_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    var paren_level_min_max_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    var paren_level_min_max_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    var paren_level_min_max_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    var paren_level_min_max_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    var paren_level_min_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    var paren_level_", "    var paren_stack = [];\n    var max_nesting\
    \ = 0;\n    var current_nesting = 0;\n    var current_paren = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n\
    \        if(paren_string[i] === '('){\n            current_paren++;\n        }\n\
    \        else if(paren_string[i] === ')'){\n            current_paren--;\n   \
    \     }\n        if(current_paren === 0){\n            current_nesting++;\n  \
    \          if(current_nesting > max_nesting){\n                max_nesting = current_nesting;\n\
    \            }\n        }\n        else if(current_paren < 0){\n            current_nesting--;\n\
    \        }\n    }\n    return max_nesting;\n}\n", "    var paren_stack = [];\n\
    \    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    var paren_index = 0;\n    var paren_char = \"\"\
    ;\n    var paren_char_index = 0;\n    var paren_char_length = 0;\n    var paren_char_count\
    \ = 0;\n    var paren_char_count_max = 0;\n    var paren_char_count_min = 0;\n\
    \    var paren_char_count_diff = 0;\n    var paren_char_count_diff_max = 0;\n\
    \    var paren_char_count_diff_min = 0;\n    var paren_char_count_diff_diff =\
    \ 0;\n    var paren_char_count_diff_diff_max = 0;\n    var paren_char_count_diff_diff_min\
    \ = 0;\n    var paren_char_count_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_max\
    \ = 0;\n    var paren_char_count_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_min\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_max\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff_max = 0;\n    var\
    \ paren_char_count_diff_diff_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff",
  "    var paren_stack = [];\n    var paren_count = 0;\n    var paren_count_stack\
    \ = [];\n    var max_nesting = 0;\n    var max_nesting_stack = [];\n    var i\
    \ = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var\
    \ n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n   \
    \ var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n\
    \    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n\
    \    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n\
    \    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n\
    \    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n\
    \    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n\
    \    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var aa =\
    \ 0;\n    var ab = 0;\n    var ac = 0;\n    var ad = 0;\n    var ae = 0;\n   \
    \ var af = 0;\n    var ag = 0;\n    var ah = 0;\n    var ai = 0;\n    var aj =\
    \ 0;\n    var ak = 0;\n    var al = 0;\n    var am = 0;\n    var an = 0;\n   \
    \ var ao = 0;\n    var ap = 0;\n    var aq = 0;\n    var ar = 0;\n    var as =\
    \ 0;\n    var at = 0;\n    var au = 0;\n", "    var paren_stack = [];\n    var\
    \ paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n\
    \    var paren_index = 0;\n    var paren_char = \"\";\n    var paren_char_index\
    \ = 0;\n    var paren_char_length = 0;\n    var paren_char_count = 0;\n    var\
    \ paren_char_count_max = 0;\n    var paren_char_count_min = 0;\n    var paren_char_count_diff\
    \ = 0;\n    var paren_char_count_diff_max = 0;\n    var paren_char_count_diff_min\
    \ = 0;\n    var paren_char_count_diff_diff = 0;\n    var paren_char_count_diff_diff_max\
    \ = 0;\n    var paren_char_count_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff\
    \ = 0;\n    var paren_char_count_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_min\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_max\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff_diff\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_min\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff_max\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff_min = 0;\n    var\
    \ paren_char_count_diff_diff_diff_diff", "    var paren_stack = [];\n    var paren_count\
    \ = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n\
    \    var paren_index = 0;\n    var paren_char = \"\";\n    var paren_char_index\
    \ = 0;\n    var paren_char_length = 0;\n    var paren_char_count = 0;\n    var\
    \ paren_char_count_max = 0;\n    var paren_char_count_min = 0;\n    var paren_char_count_diff\
    \ = 0;\n    var paren_char_count_diff_max = 0;\n    var paren_char_count_diff_min\
    \ = 0;\n    var paren_char_count_diff_diff = 0;\n    var paren_char_count_diff_diff_max\
    \ = 0;\n    var paren_char_count_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff\
    \ = 0;\n    var paren_char_count_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_min\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_max\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff_diff\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_min\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff_max\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff_min = 0;\n    var\
    \ paren_char_count_diff_diff_diff_diff", "    var paren_stack = [];\n    var max_nesting\
    \ = 0;\n    var current_nesting = 0;\n    var current_paren = 0;\n    var current_paren_string\
    \ = \"\";\n    var current_paren_string_length = 0;\n    var current_paren_string_index\
    \ = 0;\n    var current_paren_string_index_end = 0;\n    var current_paren_string_index_start\
    \ = 0;\n    var current_paren_string_length_end = 0;\n    var current_paren_string_length_start\
    \ = 0;\n    var current_paren_string_length_total = 0;\n    var current_paren_string_length_total_end\
    \ = 0;\n    var current_paren_string_length_total_start = 0;\n    var current_paren_string_length_total_total\
    \ = 0;\n    var current_paren_string_length_total_total_end = 0;\n    var current_paren_string_length_total_total_start\
    \ = 0;\n    var current_paren_string_length_total_total_total = 0;\n    var current_paren_string_length_total_total_total_end\
    \ = 0;\n    var current_paren_string_length_total_total_total_start = 0;\n   \
    \ var current_paren_string_length_total_total_total_total = 0;\n    var current_paren_string_length_total_total_total_total_end\
    \ = 0;\n    var current_paren_string_length_total_total_total_total_start = 0;\n\
    \    var current_paren_string_length_total_total_total_total_total = 0;\n    var\
    \ current_paren_string_length_total_total_total_total_total_end = 0;\n    var\
    \ current_paren_string_length_total_total_total_total_total_start = 0;\n    var\
    \ current_paren_string_length_total_total_total_total_total_total = 0;\n    var\
    \ current_paren_string_length_total_total_total_total_total_total_end = 0;\n \
    \   var current_paren_string_length_total_total_total_total_total_", "    var\
    \ paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    var\
    \ max_nesting_index = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n\
    \        var paren_group = paren_groups[i];\n        var nesting = count_nesting(paren_group);\n\
    \        if(nesting > max_nesting){\n            max_nesting = nesting;\n    \
    \        max_nesting_index = i;\n        }\n    }\n    return max_nesting_index;\n\
    }\n", "    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level\
    \ = 0;\n    var paren_string_length = paren_string.length;\n    var paren_index\
    \ = 0;\n    var paren_char = \"\";\n    var paren_char_index = 0;\n    var paren_char_length\
    \ = 0;\n    var paren_char_count = 0;\n    var paren_char_count_max = 0;\n   \
    \ var paren_char_count_min = 0;\n    var paren_char_count_diff = 0;\n    var paren_char_count_diff_max\
    \ = 0;\n    var paren_char_count_diff_min = 0;\n    var paren_char_count_diff_diff\
    \ = 0;\n    var paren_char_count_diff_diff_max = 0;\n    var paren_char_count_diff_diff_min\
    \ = 0;\n    var paren_char_count_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_max\
    \ = 0;\n    var paren_char_count_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_min\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_max\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff_max = 0;\n    var\
    \ paren_char_count_diff_diff_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff",
  "    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n \
    \   for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n\
    \        var paren_count = 0;\n        for(var j = 0; j < paren_group.length;\
    \ j++){\n            if(paren_group[j] == \"(\"){\n                paren_count++;\n\
    \            }\n            else if(paren_group[j] == \")\"){\n              \
    \  paren_count--;\n            }\n        }\n        if(paren_count > max_nesting){\n\
    \            max_nesting = paren_count;\n        }\n    }\n    return max_nesting;\n\
    }\n", "    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level\
    \ = 0;\n    var paren_count_stack = [];\n    var paren_count_stack_index = 0;\n\
    \    var paren_count_stack_max = 0;\n    var paren_count_stack_max_index = 0;\n\
    \    var paren_count_stack_max_value = 0;\n    var paren_count_stack_max_value_index\
    \ = 0;\n    var paren_count_stack_max_value_value = 0;\n    var paren_count_stack_max_value_value_index\
    \ = 0;\n    var paren_count_stack_max_value_value_value = 0;\n    var paren_count_stack_max_value_value_value_index\
    \ = 0;\n    var paren_count_stack_max_value_value_value_value = 0;\n    var paren_count_stack_max_value_value_value_value_index\
    \ = 0;\n    var paren_count_stack_max_value_value_value_value_value = 0;\n   \
    \ var paren_count_stack_max_value_value_value_value_value_index = 0;\n    var\
    \ paren_count_stack_max_value_value_value_value_value_value = 0;\n    var paren_count_stack_max_value_value_value_value_value_value_index\
    \ = 0;\n    var paren_count_stack_max_value_value_value_value_value_value_value\
    \ = 0;\n    var paren_count_stack_max_value_value_value_value_value_value_value_index\
    \ = 0;\n    var paren_count_stack_max_value_value_value_value_value_value_value_value\
    \ = 0;\n    var paren_count_stack_max_value_value_value_value_value_value_value_value_index\
    \ = 0;\n    var paren_count_stack_max_value_value_value_value_value_value_value_value_value\
    \ = 0;\n    var paren_count_stack_max_value", "    var result = [];\n    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var paren_count_stack = [];\n    var paren_count_stack_index\
    \ = 0;\n    var paren_count_stack_top = 0;\n    var paren_count_stack_top_index\
    \ = 0;\n    var paren_count_stack_top_value = 0;\n    var paren_count_stack_top_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value = 0;\n    var paren_count_stack_top_value_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value_value = 0;\n   \
    \ var paren_count_stack_top_value_value_value_value_value_index = 0;\n    var\
    \ paren_count_stack_top_value_value_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_value\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_value_value\
    \ = 0;\n    var paren_count_stack_top_value_value_value", "    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    var paren_index = 0;\n    var paren_char = '';\n\
    \    var paren_char_index = 0;\n    var paren_char_length = 0;\n    var paren_char_count\
    \ = 0;\n    var paren_char_count_max = 0;\n    var paren_char_count_min = 0;\n\
    \    var paren_char_count_diff = 0;\n    var paren_char_count_diff_max = 0;\n\
    \    var paren_char_count_diff_min = 0;\n    var paren_char_count_diff_diff =\
    \ 0;\n    var paren_char_count_diff_diff_max = 0;\n    var paren_char_count_diff_diff_min\
    \ = 0;\n    var paren_char_count_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_max\
    \ = 0;\n    var paren_char_count_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_min\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_max\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff\
    \ = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff_max = 0;\n    var\
    \ paren_char_count_diff_diff_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff",
  "    var paren_count = 0;\n    var paren_stack = [];\n    var result = [];\n   \
    \ var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length;\
    \ i++){\n        if(paren_string[i] == '('){\n            paren_count++;\n   \
    \         paren_stack.push(paren_count);\n        }\n        else if(paren_string[i]\
    \ == ')'){\n            paren_count--;\n            if(paren_count == 0){\n  \
    \              result.push(paren_stack.pop());\n            }\n        }\n   \
    \ }\n    return result;\n}\n", "    var paren_stack = [];\n    var paren_count\
    \ = 0;\n    var paren_level = 0;\n    var paren_count_stack = [];\n    var paren_count_stack_index\
    \ = 0;\n    var paren_count_stack_length = 0;\n    var paren_count_stack_max =\
    \ 0;\n    var paren_count_stack_max_index = 0;\n    var paren_count_stack_max_length\
    \ = 0;\n    var paren_count_stack_max_max = 0;\n    var paren_count_stack_max_max_index\
    \ = 0;\n    var paren_count_stack_max_max_length = 0;\n    var paren_count_stack_max_max_max\
    \ = 0;\n    var paren_count_stack_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_length\
    \ = 0;\n    var paren_count_stack_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_index\
    \ = 0;\n    var paren_count_stack_max_max_max_max_length = 0;\n    var paren_count_stack_max_max_max_max_max\
    \ = 0;\n    var paren_count_stack_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_length\
    \ = 0;\n    var paren_count_stack_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_index\
    \ = 0;\n    var paren_count_stack_max_max_max_max_max_max_length = 0;\n    var\
    \ paren_count_stack_max_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_index\
    \ = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_length", "    var\
    \ paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var\
    \ i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n\
    \        var paren_count = 0;\n        for(var j = 0; j < paren_group.length;\
    \ j++){\n            if(paren_group[j] == \"(\"){\n                paren_count++;\n\
    \            }\n            else if(paren_group[j] == \")\"){\n              \
    \  paren_count--;\n            }\n        }\n        if(paren_count > max_nesting){\n\
    \            max_nesting = paren_count;\n        }\n    }\n    return max_nesting;\n\
    }\n", "    var paren_groups = paren_string.split(\" \");\n    var max_nesting\
    \ = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group\
    \ = paren_groups[i];\n        var paren_count = 0;\n        for(var j = 0; j <\
    \ paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n      \
    \          paren_count++;\n            }\n            else if(paren_group[j] ==\
    \ \")\"){\n                paren_count--;\n            }\n        }\n        if(paren_count\
    \ > max_nesting){\n            max_nesting = paren_count;\n        }\n    }\n\
    \    return max_nesting;\n}\n", "    var paren_groups = paren_string.split(\"\
    \ \");\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var\
    \ i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n\
    \        var nesting = 0;\n        for(var j = 0; j < paren_group.length; j++){\n\
    \            if(paren_group[j] == \"(\"){\n                nesting++;\n      \
    \      }\n            else if(paren_group[j] == \")\"){\n                nesting--;\n\
    \            }\n        }\n        if(nesting > max_nesting){\n            max_nesting\
    \ = nesting;\n            max_nesting_index = i;\n        }\n    }\n    return\
    \ [max_nesting_index, max_nesting];\n}\n", "    var paren_stack = [];\n    var\
    \ paren_count = 0;\n    var paren_level = 0;\n    var paren_count_stack = [];\n\
    \    var paren_count_stack_index = 0;\n    var paren_count_stack_top = 0;\n  \
    \  var paren_count_stack_top_index = 0;\n    var paren_count_stack_top_top = 0;\n\
    \    var paren_count_stack_top_top_index = 0;\n    var paren_count_stack_top_top_top\
    \ = 0;\n    var paren_count_stack_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top\
    \ = 0;\n    var paren_count_stack_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top_top_index = 0;\n    var\
    \ paren_count_stack_top_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_index\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top = 0;\n    var\
    \ paren_count_stack_top_top_top_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top_index =\
    \ 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top_top = 0;\n\
    \    var paren_count_stack_top_top", "    var paren_stack = [];\n    var paren_count\
    \ = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n\
    \    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i]\
    \ === '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n\
    \            paren_level++;\n        }\n        else if(paren_string[i] === ')'){\n\
    \            paren_count--;\n            if(paren_count === 0){\n            \
    \    var max_level = Math.max.apply(null, paren_stack);\n                console.log(max_level);\n\
    \                paren_stack.pop();\n            }\n            else{\n      \
    \          paren_level--;\n            }\n        }\n    }\n}\n", "    var paren_list\
    \ = paren_string.split(\" \");\n    var max_nesting = 0;\n    var max_nesting_index\
    \ = 0;\n    for(var i = 0; i < paren_list.length; i++){\n        var num_of_parens\
    \ = count_parens(paren_list[i]);\n        if(num_of_parens > max_nesting){\n \
    \           max_nesting = num_of_parens;\n            max_nesting_index = i;\n\
    \        }\n    }\n    return max_nesting_index;\n}\n", "    var paren_stack =\
    \ [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    var paren_string_index = 0;\n    var paren_string_index_prev\
    \ = 0;\n    var paren_string_index_next = 0;\n    var paren_string_index_next_prev\
    \ = 0;\n    var paren_string_index_next_next = 0;\n    var paren_string_index_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next = 0;\n    var paren_string_index_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next_next_next = 0;\n    var\
    \ paren_string_index_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next\
    \ = 0;\n    var paren_string_index_next_next_next_next_next_next_next_prev = 0;\n\
    \    var paren_string_index_next_next_next_next_next_next_next_next = 0;\n   \
    \ var paren_string_index_next_next_next_next_next_next_next_next_prev = 0;\n \
    \   var paren_string_index_next_next_next_next_next_next_next_next_next = 0;\n\
    \    var paren_string_index_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next_next",
  "    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n\
    \    var paren_string_length = paren_string.length;\n    var paren_string_index\
    \ = 0;\n    var paren_string_char;\n    var paren_string_char_index;\n    var\
    \ paren_string_char_count;\n    var paren_string_char_count_index;\n    var paren_string_char_count_count;\n\
    \    var paren_string_char_count_count_index;\n    var paren_string_char_count_count_count;\n\
    \    var paren_string_char_count_count_count_index;\n    var paren_string_char_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_count_count_index;\n    var\
    \ paren_string_char_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count", " \
    \   var paren_count = 0;\n    var paren_stack = [];\n    var result = [];\n  \
    \  var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length;\
    \ i++){\n        if(paren_string[i] === '('){\n            paren_count++;\n  \
    \          paren_stack.push(paren_count);\n        }\n        else if(paren_string[i]\
    \ === ')'){\n            paren_count--;\n            if(paren_count === 0){\n\
    \                result.push(paren_stack.pop());\n            }\n        }\n \
    \   }\n    return result;\n}\n", "    var paren_stack = [];\n    var paren_count\
    \ = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n\
    \    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i]\
    \ == '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n\
    \            paren_level++;\n        }\n        else if(paren_string[i] == ')'){\n\
    \            paren_count--;\n            if(paren_count == 0){\n             \
    \   paren_level--;\n                if(paren_level == 0){\n                  \
    \  var max_nesting = Math.max.apply(null, paren_stack);\n                    console.log(max_nesting);\n\
    \                }\n            }\n        }\n    }\n}\n", "    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n\
    \        if(paren_string[i] === '('){\n            paren_count++;\n          \
    \  paren_stack.push(paren_count);\n            paren_level++;\n        }\n   \
    \     else if(paren_string[i] === ')'){\n            paren_count--;\n        \
    \    if(paren_count === 0){\n                paren_level--;\n                if(paren_level\
    \ === 0){\n                    var max_level = Math.max.apply(null, paren_stack);\n\
    \                    console.log(max_level);\n                }\n            }\n\
    \            else{\n                paren_stack.pop();\n            }\n      \
    \  }\n    }\n}\n", "    var paren_stack = [];\n    var paren_count = 0;\n    var\
    \ paren_level = 0;\n    var paren_string_length = paren_string.length;\n    var\
    \ paren_string_index = 0;\n    var paren_string_char;\n    var paren_string_char_index;\n\
    \    var paren_string_char_count;\n    var paren_string_char_count_index;\n  \
    \  var paren_string_char_count_count;\n    var paren_string_char_count_count_index;\n\
    \    var paren_string_char_count_count_count;\n    var paren_string_char_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count;\n    var paren_string_char_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count_count_count;\n    var\
    \ paren_string_char_count_count_count_count_count_count_count_index;\n    var\
    \ paren_string_char_count_count_count_count_count_count_count_count;\n    var\
    \ paren_string_char_count_count_count_count_count_count_count_count_index;\n \
    \   var paren_string_char_count_count_count_count_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count", " \
    \   var paren_stack = [];\n    var max_nesting = 0;\n    for (var i = 0; i < paren_string.length;\
    \ i++){\n        if (paren_string[i] == '('){\n            paren_stack.push(i);\n\
    \        }\n        else if (paren_string[i] == ')'){\n            if (paren_stack.length\
    \ > 0){\n                var last_index = paren_stack.pop();\n               \
    \ max_nesting = Math.max(max_nesting, paren_stack.length);\n                i\
    \ = last_index;\n            }\n        }\n    }\n    return max_nesting;\n}\n",
  "    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n\
    \    var paren_index = 0;\n    var paren_string_length = paren_string.length;\n\
    \    var paren_string_index = 0;\n    var paren_string_char = \"\";\n    var paren_string_char_index\
    \ = 0;\n    var paren_string_char_count = 0;\n    var paren_string_char_count_index\
    \ = 0;\n    var paren_string_char_count_count = 0;\n    var paren_string_char_count_count_index\
    \ = 0;\n    var paren_string_char_count_count_count = 0;\n    var paren_string_char_count_count_count_index\
    \ = 0;\n    var paren_string_char_count_count_count_count = 0;\n    var paren_string_char_count_count_count_count_index\
    \ = 0;\n    var paren_string_char_count_count_count_count_count = 0;\n    var\
    \ paren_string_char_count_count_count_count_count_index = 0;\n    var paren_string_char_count_count_count_count_count_count\
    \ = 0;\n    var paren_string_char_count_count_count_count_count_count_index =\
    \ 0;\n    var paren_string_char_count_count_count_count_count_count_count = 0;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_index = 0;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count = 0;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_index\
    \ = 0;\n    var paren_string_char_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    var paren_string_char_count_count_count_count_count_count_count_count_count_index\
    \ = 0;\n    var paren", "    var paren_stack = [];\n    var max_nesting = 0;\n\
    \    var current_nesting = 0;\n    var current_index = 0;\n    var current_char\
    \ = paren_string[current_index];\n    while(current_char != \"\"){\n        if(current_char\
    \ == \"(\"){\n            current_nesting++;\n            if(current_nesting >\
    \ max_nesting){\n                max_nesting = current_nesting;\n            }\n\
    \            paren_stack.push(current_nesting);\n        }\n        else if(current_char\
    \ == \")\"){\n            current_nesting--;\n            if(current_nesting <\
    \ 0){\n                throw \"Invalid input\";\n            }\n            if(current_nesting\
    \ == 0){\n                current_index++;\n                current_char = paren_string[current_index];\n\
    \            }\n        }\n        else{\n            current_index++;\n     \
    \       current_char = paren_string[current_index];\n        }\n    }\n    return\
    \ max_nesting;\n}\n", "    var paren_stack = [];\n    var paren_count = 0;\n \
    \   var paren_level = 0;\n    var paren_string_length = paren_string.length;\n\
    \    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i]\
    \ === '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n\
    \            paren_level++;\n        }\n        else if(paren_string[i] === ')'){\n\
    \            paren_count--;\n            if(paren_count === 0){\n            \
    \    var max_level = Math.max.apply(null, paren_stack);\n                console.log(max_level);\n\
    \            }\n            else{\n                paren_stack.pop();\n      \
    \      }\n            paren_level--;\n        }\n    }\n}\n", "    var paren_stack\
    \ = [];\n    var max_nesting = 0;\n    var current_level = 0;\n    var current_paren\
    \ = 0;\n    var current_paren_string = \"\";\n    var current_paren_string_length\
    \ = 0;\n    var current_paren_string_index = 0;\n    var current_paren_string_index_end\
    \ = 0;\n    var current_paren_string_index_start = 0;\n    var current_paren_string_length_end\
    \ = 0;\n    var current_paren_string_length_start = 0;\n    var current_paren_string_length_diff\
    \ = 0;\n    var current_paren_string_length_diff_end = 0;\n    var current_paren_string_length_diff_start\
    \ = 0;\n    var current_paren_string_length_diff_start_end = 0;\n    var current_paren_string_length_diff_start_start\
    \ = 0;\n    var current_paren_string_length_diff_start_start_end = 0;\n    var\
    \ current_paren_string_length_diff_start_start_start = 0;\n    var current_paren_string_length_diff_start_start_start_end\
    \ = 0;\n    var current_paren_string_length_diff_start_start_start_start = 0;\n\
    \    var current_paren_string_length_diff_start_start_start_start_end = 0;\n \
    \   var current_paren_string_length_diff_start_start_start_start_start_end = 0;\n\
    \    var current_paren_string_length_diff_start_start_start_start_start_start_end\
    \ = 0;\n    var current_paren_string_length_diff_start_start_start_start_start_start_start_end\
    \ = 0;\n    var current_paren_string_length_diff_start_start_start_start_start_start_start_start_end\
    \ = 0;\n    var current_paren_string_length_diff_start_start_start_start_start_start_start_start_start_end\
    \ = 0;\n    var current_paren_string_length_diff_start_start_start_start_start_start",
  "    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n\
    \    var paren_count_stack = [];\n    var paren_count_stack_index = 0;\n    var\
    \ paren_count_stack_top = 0;\n    var paren_count_stack_top_index = 0;\n    var\
    \ paren_count_stack_top_value = 0;\n    var paren_count_stack_top_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value = 0;\n    var paren_count_stack_top_value_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value_value = 0;\n   \
    \ var paren_count_stack_top_value_value_value_value_value_index = 0;\n    var\
    \ paren_count_stack_top_value_value_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_value\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_value_value\
    \ = 0;\n    var paren_count_stack_top_value", "    var paren_stack = [];\n   \
    \ var max_nesting = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var\
    \ l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n   \
    \ var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n\
    \    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n\
    \    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n\
    \    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n\
    \    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n\
    \    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n\
    \    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n\
    \    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n\
    \    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n\
    \    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n\
    \    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n\
    \    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n\
    \    var y = 0;\n    var z = 0;\n    var a", "    var paren_stack = [];\n    var\
    \ paren_count = 0;\n    var paren_count_stack = [];\n    var paren_count_stack_index\
    \ = 0;\n    var paren_count_stack_top = 0;\n    var paren_count_stack_top_index\
    \ = 0;\n    var paren_count_stack_top_value = 0;\n    var paren_count_stack_top_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value = 0;\n    var paren_count_stack_top_value_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value_value = 0;\n   \
    \ var paren_count_stack_top_value_value_value_value_value_index = 0;\n    var\
    \ paren_count_stack_top_value_value_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_value\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_value_index\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_value_value\
    \ = 0;\n    var paren_count_stack_top_value_value_value_value_value_value", " \
    \   var result = [];\n    var stack = [];\n    var paren_count = 0;\n    var paren_level\
    \ = 0;\n    var paren_start = 0;\n    var paren_end = 0;\n    var paren_string\
    \ = paren_string.split(\" \");\n    for(var i = 0; i < paren_string.length; i++){\n\
    \        if(paren_string[i] == \"(\"){\n            paren_count++;\n         \
    \   stack.push(paren_count);\n            paren_level = stack.length - 1;\n  \
    \          paren_start = i;\n        }\n        else if(paren_string[i] == \"\
    )\"){\n            paren_count--;\n            if(paren_count == 0){\n       \
    \         paren_end = i;\n                result.push(paren_level);\n        \
    \    }\n        }\n    }\n    return result;\n}\n", "    var paren_stack = [];\n\
    \    var paren_count = 0;\n    var paren_string_length = paren_string.length;\n\
    \    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i]\
    \ === '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n\
    \        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n\
    \            if(paren_stack.length > 0){\n                var top_index = paren_stack.pop();\n\
    \                if(paren_stack.length > 0){\n                    var second_top_index\
    \ = paren_stack.pop();\n                    if(top_index > second_top_index){\n\
    \                        console.log(top_index);\n                    }\n    \
    \                else{\n                        console.log(second_top_index);\n\
    \                    }\n                }\n                else{\n           \
    \         console.log(top_index);\n                }\n            }\n        \
    \    else{\n                console.log(paren_count);\n            }\n       \
    \ }\n    }\n}\n", "    var paren_groups = paren_string.split(\" \");\n    var\
    \ max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n      \
    \  var paren_group = paren_groups[i];\n        var paren_count = 0;\n        for(var\
    \ j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"\
    ){\n                paren_count++;\n            }\n            else if(paren_group[j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   if(paren_count > max_nesting){\n            max_nesting = paren_count;\n \
    \       }\n    }\n    return max_nesting;\n}\n", "    var paren_stack = [];\n\
    \    var paren_count = 0;\n    var paren_count_stack = [];\n    var max_nesting\
    \ = 0;\n    var max_nesting_stack = [];\n    var i = 0;\n    var j = 0;\n    var\
    \ k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n   \
    \ var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n\
    \    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n\
    \    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n\
    \    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n\
    \    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n\
    \    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n\
    \    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n\
    \    var y = 0;\n    var z = 0;\n    var aa = 0;\n    var ab = 0;\n    var ac\
    \ = 0;\n    var ad = 0;\n    var ae = 0;\n    var af = 0;\n    var ag = 0;\n \
    \   var ah = 0;\n    var ai = 0;\n    var aj = 0;\n    var ak = 0;\n    var al\
    \ = 0;\n    var am = 0;\n    var an = 0;\n    var ao = 0;\n    var ap = 0;\n \
    \   var aq = 0;\n    var ar = 0;\n    var as = 0;\n    var at = 0;\n    var au\
    \ = 0;\n", "    var paren_stack = [];\n    var paren_count = 0;\n    var max_nesting\
    \ = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0;\
    \ i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n     \
    \       paren_stack.push(paren_count);\n            paren_count++;\n        }\n\
    \        else if(paren_string[i] === ')'){\n            paren_count--;\n     \
    \       if(paren_count < 0){\n                console.log(\"Error: Invalid parentheses\
    \ string\");\n                return;\n            }\n            if(paren_count\
    \ > max_nesting){\n                max_nesting = paren_count;\n            }\n\
    \        }\n    }\n    console.log(max_nesting);\n}\n", "    var paren_stack =\
    \ [];\n    var paren_count = 0;\n    var max_nesting = 0;\n    var max_nesting_index\
    \ = 0;\n    var current_nesting = 0;\n    var current_nesting_index = 0;\n   \
    \ var current_paren_string = \"\";\n    var current_paren_string_index = 0;\n\
    \    var current_paren_string_length = 0;\n    var current_paren_string_length_index\
    \ = 0;\n    var current_paren_string_length_length = 0;\n    var current_paren_string_length_length_index\
    \ = 0;\n    var current_paren_string_length_length_length = 0;\n    var current_paren_string_length_length_length_index\
    \ = 0;\n    var current_paren_string_length_length_length_length = 0;\n    var\
    \ current_paren_string_length_length_length_length_index = 0;\n    var current_paren_string_length_length_length_length_length\
    \ = 0;\n    var current_paren_string_length_length_length_length_length_index\
    \ = 0;\n    var current_paren_string_length_length_length_length_length_length\
    \ = 0;\n    var current_paren_string_length_length_length_length_length_length_index\
    \ = 0;\n    var current_paren_string_length_length_length_length_length_length_length\
    \ = 0;\n    var current_paren_string_length_length_length_length_length_length_length_index\
    \ = 0;\n    var current_paren_string_length_length_length_length_length_length_length_length\
    \ = 0;\n    var current_paren_string_length_length_length_length_length_length_length_length_index\
    \ = 0;\n    var current_paren_string_length_length_length_length_length_length_length_length_length\
    \ = 0;\n    var current_paren_string_length_length_length_length_length_length_length_length_length_index\
    \ = 0;\n    var current_paren_string_length_length_length_length_length_length_length_length_length_length\
    \ = 0", "    var paren_count = 0;\n    var paren_stack = [];\n    var result =\
    \ [];\n    var paren_level = 0;\n    var paren_count = 0;\n    var paren_stack\
    \ = [];\n    var result = [];\n    var paren_level = 0;\n    var paren_count =\
    \ 0;\n    var paren_stack = [];\n    var result = [];\n    var paren_level = 0;\n\
    \    var paren_count = 0;\n    var paren_stack = [];\n    var result = [];\n \
    \   var paren_level = 0;\n    var paren_count = 0;\n    var paren_stack = [];\n\
    \    var result = [];\n    var paren_level = 0;\n    var paren_count = 0;\n  \
    \  var paren_stack = [];\n    var result = [];\n    var paren_level = 0;\n   \
    \ var paren_count = 0;\n    var paren_stack = [];\n    var result = [];\n    var\
    \ paren_level = 0;\n    var paren_count = 0;\n    var paren_stack = [];\n    var\
    \ result = [];\n    var paren_level = 0;\n    var paren_count = 0;\n    var paren_stack\
    \ = [];\n    var result = [];\n    var paren_level = 0;\n    var paren_count =\
    \ 0;\n    var paren_stack = [];\n    var result = [];\n    var paren_level = 0;\n\
    \    var paren_count = 0;\n    var paren_stack = [];\n    var result = [];\n \
    \   var paren_level = 0;\n    var paren_count = 0;\n    var paren_stack = [];\n\
    \    var result = [];\n    var paren_level = 0;\n    var paren_count = 0;\n  \
    \  var paren_stack = [];\n    var result = [];\n    var paren_level = 0;\n   \
    \ var paren_count = 0;\n    var paren_stack = [];\n    var result = [];\n    var\
    \ paren_level = 0;\n    var paren_count = 0;\n    var paren_stack = [];\n    var\
    \ result", "    var paren_count = 0;\n    var paren_stack = [];\n    var output\
    \ = [];\n    for(var i=0; i<paren_string.length; i++){\n        if(paren_string[i]\
    \ == '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n\
    \        }\n        else if(paren_string[i] == ')'){\n            paren_count--;\n\
    \            if(paren_count == 0){\n                output.push(paren_stack.pop());\n\
    \            }\n        }\n    }\n    return output;\n}\n", "    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var max_nesting = 0;\n    var max_nesting_index\
    \ = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var\
    \ m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n   \
    \ var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n\
    \    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n\
    \    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n\
    \    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n\
    \    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n\
    \    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n\
    \    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n\
    \    var aa = 0;\n    var ab = 0;\n    var ac = 0;\n    var ad = 0;\n    var ae\
    \ = 0;\n    var af = 0;\n    var ag = 0;\n    var ah = 0;\n    var ai = 0;\n \
    \   var aj = 0;\n    var ak = 0;\n    var al = 0;\n    var am = 0;\n    var an\
    \ = 0;\n    var ao = 0;\n    var ap = 0;\n    var aq = 0;\n    var ar = 0;\n \
    \   var as = 0;\n    var at = 0;\n    var au = 0;\n    var av = 0;\n    var aw",
  "    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n \
    \   for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n\
    \        var paren_count = 0;\n        for(var j = 0; j < paren_group.length;\
    \ j++){\n            if(paren_group[j] == \"(\"){\n                paren_count++;\n\
    \            }\n            else if(paren_group[j] == \")\"){\n              \
    \  paren_count--;\n            }\n        }\n        if(paren_count > max_nesting){\n\
    \            max_nesting = paren_count;\n        }\n    }\n    return max_nesting;\n\
    }\n", "    var paren_groups = paren_string.split(\" \");\n    var max_nesting\
    \ = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group\
    \ = paren_groups[i];\n        var paren_count = 0;\n        for(var j = 0; j <\
    \ paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n      \
    \          paren_count++;\n            }\n            else if(paren_group[j] ==\
    \ \")\"){\n                paren_count--;\n            }\n        }\n        if(paren_count\
    \ > max_nesting){\n            max_nesting = paren_count;\n        }\n    }\n\
    \    return max_nesting;\n}\n", "    var paren_groups = paren_string.split(\"\
    \ \");\n    var max_nesting = 0;\n    for(var i=0; i<paren_groups.length; i++){\n\
    \        var paren_group = paren_groups[i];\n        var paren_count = 0;\n  \
    \      for(var j=0; j<paren_group.length; j++){\n            if(paren_group[j]\
    \ == \"(\"){\n                paren_count++;\n            }\n            else\
    \ if(paren_group[j] == \")\"){\n                paren_count--;\n            }\n\
    \        }\n        if(paren_count > max_nesting){\n            max_nesting =\
    \ paren_count;\n        }\n    }\n    return max_nesting;\n}\n", "    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    var paren_string_index = 0;\n    var paren_string_char\
    \ = \"\";\n    var paren_string_char_index = 0;\n    while(paren_string_index\
    \ < paren_string_length){\n        paren_string_char = paren_string[paren_string_index];\n\
    \        if(paren_string_char === \"(\"){\n            paren_count += 1;\n   \
    \         paren_stack.push(paren_count);\n            paren_level = paren_stack[paren_stack.length\
    \ - 1];\n        }\n        else if(paren_string_char === \")\"){\n          \
    \  paren_count -= 1;\n            if(paren_count === 0){\n                paren_level\
    \ = paren_stack.pop();\n            }\n        }\n        paren_string_index +=\
    \ 1;\n    }\n    return paren_stack;\n}\n", "    var paren_count = 0;\n    var\
    \ paren_stack = [];\n    var paren_count_stack = [];\n    var paren_stack_count\
    \ = 0;\n    var paren_stack_count_stack = [];\n    var paren_stack_count_stack_count\
    \ = 0;\n    var paren_stack_count_stack_count_stack = [];\n    var paren_stack_count_stack_count_stack_count\
    \ = 0;\n    var paren_stack_count_stack_count_stack_count_stack = [];\n    var\
    \ paren_stack_count_stack_count_stack_count_stack_count = 0;\n    var paren_stack_count_stack_count_stack_count_stack_count_stack\
    \ = [];\n    var paren_stack_count_stack_count_stack_count_stack_count_stack_count\
    \ = 0;\n    var paren_stack_count_stack_count_stack_count_stack_count_stack_count_stack\
    \ = [];\n    var paren_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count\
    \ = 0;\n    var paren_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack\
    \ = [];\n    var paren_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count\
    \ = 0;\n    var paren_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack\
    \ = [];\n    var paren_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count\
    \ = 0;\n    var paren_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack\
    \ = [];\n    var paren_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count\
    \ = 0;\n    var paren_stack_count_stack_count_stack", "    var paren_groups =\
    \ paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i <\
    \ paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n   \
    \     var nesting = 0;\n        for(var j = 0; j < paren_group.length; j++){\n\
    \            if(paren_group[j] == \"(\"){\n                nesting++;\n      \
    \      }\n            else if(paren_group[j] == \")\"){\n                nesting--;\n\
    \            }\n        }\n        if(nesting > max_nesting){\n            max_nesting\
    \ = nesting;\n        }\n    }\n    return max_nesting;\n}\n", "    var paren_groups\
    \ = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i\
    \ < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n \
    \       var nesting = paren_group.match(/\\(([^()]*)\\)/g);\n        if(nesting){\n\
    \            max_nesting = Math.max(max_nesting, nesting.length);\n        }\n\
    \    }\n    return max_nesting;\n}\n", "    var paren_stack = [];\n    var paren_count\
    \ = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n\
    \    for (var i = 0; i < paren_string_length; i++){\n        if (paren_string[i]\
    \ === '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n\
    \            paren_level++;\n        }\n        else if (paren_string[i] === ')'){\n\
    \            paren_count--;\n            if (paren_count === 0){\n           \
    \     paren_level--;\n                if (paren_level === 0){\n              \
    \      var max_level = Math.max.apply(null, paren_stack);\n                  \
    \  console.log(max_level);\n                }\n            }\n        }\n    }\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
