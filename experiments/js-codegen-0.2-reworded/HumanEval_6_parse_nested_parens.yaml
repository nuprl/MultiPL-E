name: HumanEval_6_parse_nested_parens
language: js
prompt: "//Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n// For each of the group, output the deepest\
  \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
  // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
  ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
  \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
completions: ["    var paren_list = paren_string.split(' ');\n    var max_nesting\
    \ = 0;\n    var max_nesting_index = 0;\n    for (var i = 0; i < paren_list.length;\
    \ i++){\n        var paren_count = count_parens(paren_list[i]);\n        if (paren_count\
    \ > max_nesting){\n            max_nesting = paren_count;\n            max_nesting_index\
    \ = i;\n        }\n    }\n    return [max_nesting, max_nesting_index];\n}\n",
  "    var paren_stack = [];\n    var paren_count = 0;\n    var paren_count_max =\
    \ 0;\n    var paren_count_max_index = 0;\n    var paren_count_max_index_string\
    \ = '';\n    var paren_count_max_index_string_index = 0;\n    var paren_count_max_index_string_index_max\
    \ = 0;\n    var paren_count_max_index_string_index_max_index = 0;\n    var paren_count_max_index_string_index_max_index_string\
    \ = '';\n    var paren_count_max_index_string_index_max_index_string_index = 0;\n\
    \    var paren_count_max_index_string_index_max_index_string_index_max = 0;\n\
    \    var paren_count_max_index_string_index_max_index_string_index_max_index =\
    \ 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string\
    \ = '';\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index\
    \ = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max\
    \ = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max_index\
    \ = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max_index_string\
    \ = '';\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max_index_string_index\
    \ = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max_index_string_index_max\
    \ = 0;\n    var paren_count_max_index_string_index_max_", "    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length\
    \ = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n\
    \        if(paren_string[i] == '('){\n            paren_count++;\n           \
    \ paren_stack.push(paren_count);\n        }\n        else if(paren_string[i] ==\
    \ ')'){\n            paren_count--;\n            if(paren_count < 0){\n      \
    \          console.log('Error: Invalid parentheses');\n                return;\n\
    \            }\n            else if(paren_count == 0){\n                paren_level\
    \ = paren_stack.pop();\n            }\n        }\n    }\n    return paren_level;\n\
    }\n", "    var paren_stack = [];\n    var max_nesting = 0;\n    var paren_count\
    \ = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0;\
    \ i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n     \
    \       paren_stack.push(paren_count);\n            paren_count++;\n        }\n\
    \        else if(paren_string[i] === ')'){\n            paren_count--;\n     \
    \       if(paren_count === 0){\n                max_nesting = Math.max(max_nesting,\
    \ paren_stack.pop());\n            }\n        }\n    }\n    return max_nesting;\n\
    }\n", "    var paren_stack = [];\n    var paren_count = 0;\n    var paren_depth\
    \ = 0;\n    var paren_index = 0;\n    var paren_string_length = paren_string.length;\n\
    \    var paren_string_index = 0;\n    var paren_string_char;\n    var paren_string_char_index;\n\
    \    var paren_string_char_count;\n    var paren_string_char_count_index;\n  \
    \  var paren_string_char_count_count;\n    var paren_string_char_count_count_index;\n\
    \    var paren_string_char_count_count_count;\n    var paren_string_char_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count;\n    var paren_string_char_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count_count_count;\n    var\
    \ paren_string_char_count_count_count_count_count_count_count_index;\n    var\
    \ paren_string_char_count_count_count_count_count_count_count_count;\n    var\
    \ paren_string_char_count_count_count_count_count_count_count_count_index;\n \
    \   var paren_string_char_count_count_count_count_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_count_index;\n\
    \    var paren_string_char_count_count_count_count_count_count_count_count_count_count;\n\
    \    var paren_string_char_count_count_count", "    var paren_stack = [];\n  \
    \  var max_nesting = 0;\n    var current_nesting = 0;\n    var current_char =\
    \ '';\n    var current_index = 0;\n    var paren_count = 0;\n    var paren_count_stack\
    \ = [];\n    var paren_count_stack_index = 0;\n    var paren_count_stack_length\
    \ = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_index\
    \ = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_index\
    \ = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_index\
    \ = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_index\
    \ = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_index\
    \ = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_index\
    \ = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_index\
    \ = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_index\
    \ = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_index\
    \ = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_index\
    \ = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_index\
    \ = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_index\
    \ = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_index\
    \ = 0;\n", "    var result = [];\n    var parens = paren_string.split(' ');\n\
    \    for(var i = 0; i < parens.length; i++){\n        var paren = parens[i];\n\
    \        var depth = 0;\n        for(var j = 0; j < paren.length; j++){\n    \
    \        if(paren[j] == '('){\n                depth++;\n            }\n     \
    \       else if(paren[j] == ')'){\n                depth--;\n            }\n \
    \       }\n        result.push(depth);\n    }\n    return result;\n}\n", "  var\
    \ paren_groups = paren_string.split(' ');\n  var max_nesting = 0;\n  var max_nesting_index\
    \ = 0;\n  for(var i = 0; i < paren_groups.length; i++){\n    var paren_group =\
    \ paren_groups[i];\n    var paren_count = 0;\n    for(var j = 0; j < paren_group.length;\
    \ j++){\n      if(paren_group[j] == '('){\n        paren_count++;\n      }\n \
    \     else if(paren_group[j] == ')'){\n        paren_count--;\n      }\n    }\n\
    \    if(paren_count > max_nesting){\n      max_nesting = paren_count;\n      max_nesting_index\
    \ = i;\n    }\n  }\n  return [max_nesting_index, max_nesting];\n}\n", "    var\
    \ paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var\
    \ paren_count_in_level = 0;\n    var paren_count_in_next_level = 0;\n    var paren_count_in_next_next_level\
    \ = 0;\n    var paren_count_in_next_next_next_level = 0;\n    var paren_count_in_next_next_next_next_level\
    \ = 0;\n    var paren_count_in_next_next_next_next_next_level = 0;\n    var paren_count_in_next_next_next_next_next_next_level\
    \ = 0;\n    var paren_count_in_next_next_next_next_next_next_next_level = 0;\n\
    \    var paren_count_in_next_next_next_next_next_next_next_next_level = 0;\n \
    \   var paren_count_in_next_next_next_next_next_next_next_next_next_level = 0;\n\
    \    var paren_count_in_next_next_next_next_next_next_next_next_next_next_level\
    \ = 0;\n    var paren_count_in_next_next_next_next_next_next_next_next_next_next_next_level\
    \ = 0;\n    var paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_level\
    \ = 0;\n    var paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_next_level\
    \ = 0;\n    var paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_next_next_level\
    \ = 0;\n    var paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_level\
    \ = 0;\n    var paren_count_in_next_next_next_next_next_", "    var paren_count\
    \ = 0;\n    var paren_stack = [];\n    var paren_stack_count = 0;\n    var paren_stack_index\
    \ = 0;\n    var paren_stack_string = '';\n    var paren_stack_string_count = 0;\n\
    \    var paren_stack_string_index = 0;\n    var paren_stack_string_string = '';\n\
    \    var paren_stack_string_string_count = 0;\n    var paren_stack_string_string_index\
    \ = 0;\n    var paren_stack_string_string_string = '';\n    var paren_stack_string_string_string_count\
    \ = 0;\n    var paren_stack_string_string_string_index = 0;\n    var paren_stack_string_string_string_string\
    \ = '';\n    var paren_stack_string_string_string_string_count = 0;\n    var paren_stack_string_string_string_string_index\
    \ = 0;\n    var paren_stack_string_string_string_string_string = '';\n    var\
    \ paren_stack_string_string_string_string_string_count = 0;\n    var paren_stack_string_string_string_string_string_index\
    \ = 0;\n    var paren_stack_string_string_string_string_string_string = '';\n\
    \    var paren_stack_string_string_string_string_string_string_count = 0;\n  \
    \  var paren_stack_string_string_string_string_string_string_index = 0;\n    var\
    \ paren_stack_string_string_string_string_string_string_string = '';\n    var\
    \ paren_stack_string_string_string_string_string_string_string_count = 0;\n  \
    \  var paren_stack_string_string_string_string_string_string_string_index = 0;\n\
    \    var paren_stack_string_string_string_string_string_string_string_string =\
    \ '';\n    var paren_stack_string_string_string_string_string_string_string_string_count\
    \ = 0;\n    var paren_stack_string_", "  var paren_groups = paren_string.split('\
    \ ');\n  var max_nesting = 0;\n  var max_nesting_index = 0;\n  for(var i = 0;\
    \ i < paren_groups.length; i++){\n    var paren_group = paren_groups[i];\n   \
    \ var nesting = 0;\n    for(var j = 0; j < paren_group.length; j++){\n      if(paren_group[j]\
    \ === '('){\n        nesting++;\n      }\n      else if(paren_group[j] === ')'){\n\
    \        nesting--;\n      }\n    }\n    if(nesting > max_nesting){\n      max_nesting\
    \ = nesting;\n      max_nesting_index = i;\n    }\n  }\n  return [max_nesting_index,\
    \ max_nesting];\n}\n", "    var paren_stack = [];\n    var max_nesting = 0;\n\
    \    var current_nesting = 0;\n    var current_char = '';\n    var current_paren_string\
    \ = '';\n    for (var i = 0; i < paren_string.length; i++){\n        current_char\
    \ = paren_string[i];\n        if (current_char === '('){\n            current_paren_string\
    \ += current_char;\n            current_nesting++;\n            if (current_nesting\
    \ > max_nesting){\n                max_nesting = current_nesting;\n          \
    \  }\n        }\n        else if (current_char === ')'){\n            current_paren_string\
    \ += current_char;\n            current_nesting--;\n        }\n        else {\n\
    \            current_paren_string += current_char;\n        }\n    }\n    return\
    \ [max_nesting, current_paren_string];\n}\n", "    var parens = paren_string.split('\
    \ ');\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var i\
    \ = 0; i < parens.length; i++){\n        if(parens[i].length > max_nesting){\n\
    \            max_nesting = parens[i].length;\n            max_nesting_index =\
    \ i;\n        }\n    }\n    return max_nesting_index;\n}\n", "  var paren_groups\
    \ = paren_string.split(' ');\n  var max_nesting = 0;\n  var max_nesting_index\
    \ = 0;\n  for (var i = 0; i < paren_groups.length; i++){\n    var paren_group\
    \ = paren_groups[i];\n    var nesting = 0;\n    for (var j = 0; j < paren_group.length;\
    \ j++){\n      if (paren_group[j] === '('){\n        nesting++;\n      }\n   \
    \   else if (paren_group[j] === ')'){\n        nesting--;\n      }\n    }\n  \
    \  if (nesting > max_nesting){\n      max_nesting = nesting;\n      max_nesting_index\
    \ = i;\n    }\n  }\n  return max_nesting_index;\n}\n", "    var paren_count =\
    \ 0;\n    var paren_stack = [];\n    var output = [];\n    var paren_count_stack\
    \ = [];\n    var paren_count_stack_index = 0;\n    var paren_count_stack_top =\
    \ 0;\n    var paren_count_stack_top_index = 0;\n    var paren_count_stack_top_top\
    \ = 0;\n    var paren_count_stack_top_top_index = 0;\n    var paren_count_stack_top_top_top\
    \ = 0;\n    var paren_count_stack_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top\
    \ = 0;\n    var paren_count_stack_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top_top_index = 0;\n    var\
    \ paren_count_stack_top_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_index\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top = 0;\n    var\
    \ paren_count_stack_top_top_top_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top\
    \ = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top_index =\
    \ 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top_top = 0;\n\
    \    var paren_count_stack_top_top_top_top", "    var paren_stack = [];\n    var\
    \ paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n\
    \    var paren_index = 0;\n    var paren_char = '';\n    var paren_char_count\
    \ = 0;\n    var paren_char_index = 0;\n    var paren_char_length = 0;\n    var\
    \ paren_char_string = '';\n    var paren_char_string_length = 0;\n    var paren_char_string_index\
    \ = 0;\n    var paren_char_string_length = 0;\n    var paren_char_string_char\
    \ = '';\n    var paren_char_string_char_count = 0;\n    var paren_char_string_char_index\
    \ = 0;\n    var paren_char_string_char_length = 0;\n    var paren_char_string_char_string\
    \ = '';\n    var paren_char_string_char_string_length = 0;\n    var paren_char_string_char_string_index\
    \ = 0;\n    var paren_char_string_char_string_length = 0;\n    var paren_char_string_char_string_char\
    \ = '';\n    var paren_char_string_char_string_char_count = 0;\n    var paren_char_string_char_string_char_index\
    \ = 0;\n    var paren_char_string_char_string_char_length = 0;\n    var paren_char_string_char_string_char_string\
    \ = '';\n    var paren_char_string_char_string_char_string_length = 0;\n    var\
    \ paren_char_string_char_string_char_string_index = 0;\n    var paren_char_string_char_string_char_string_length\
    \ = 0;\n    var paren_char_string_char_string_char_string_char = '';\n    var\
    \ paren_char_string_char_string_char_string_char_count = 0;\n    var paren_char_string_char_string_char",
  "    var result = [];\n    var current_level = 0;\n    var current_group = 0;\n\
    \    var current_paren_string = '';\n    for(var i = 0; i < paren_string.length;\
    \ i++){\n        if(paren_string[i] === '('){\n            current_group++;\n\
    \            current_level++;\n            current_paren_string += paren_string[i];\n\
    \        }\n        else if(paren_string[i] === ')'){\n            current_level--;\n\
    \            current_paren_string += paren_string[i];\n            if(current_level\
    \ === 0){\n                result.push(current_group);\n                current_group\
    \ = 0;\n                current_level = 0;\n                current_paren_string\
    \ = '';\n            }\n        }\n        else{\n            current_paren_string\
    \ += paren_string[i];\n        }\n    }\n    return result;\n}\n", "    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var max_nesting = 0;\n    var current_nesting\
    \ = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0;\
    \ i < paren_string_length; i++){\n        if(paren_string[i] == '('){\n      \
    \      paren_stack.push(paren_count);\n            paren_count++;\n        }\n\
    \        else if(paren_string[i] == ')'){\n            paren_count--;\n      \
    \      if(paren_count == 0){\n                current_nesting = paren_stack.pop();\n\
    \                if(current_nesting > max_nesting){\n                    max_nesting\
    \ = current_nesting;\n                }\n            }\n        }\n    }\n   \
    \ return max_nesting;\n}\n", "    var paren_groups = paren_string.split(' ');\n\
    \    var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var i = 0;\
    \ i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n\
    \        var nesting = 0;\n        for(var j = 0; j < paren_group.length; j++){\n\
    \            if(paren_group[j] === '('){\n                nesting++;\n       \
    \     }\n            else if(paren_group[j] === ')'){\n                nesting--;\n\
    \            }\n        }\n        if(nesting > max_nesting){\n            max_nesting\
    \ = nesting;\n            max_nesting_index = i;\n        }\n    }\n    return\
    \ [max_nesting_index, max_nesting];\n}\n", "    var paren_stack = [];\n    var\
    \ paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n\
    \    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i]\
    \ === '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n\
    \        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n\
    \            if(paren_count === 0){\n                paren_level = paren_stack.pop();\n\
    \            }\n        }\n    }\n    return paren_level;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
