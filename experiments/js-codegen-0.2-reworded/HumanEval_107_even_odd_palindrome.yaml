name: HumanEval_107_even_odd_palindrome
language: js
prompt: "//Given a positive integer n, return an array that has the number of even\
  \ and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
  // Example 1:\n// >>> even_odd_palindrome(3)\n// (1, 2)\n// Explanation:\n// Integer\
  \ palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example\
  \ 2:\n// >>> even_odd_palindrome(12)\n// (4, 6)\n// Explanation:\n// Integer palindrome\
  \ are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
  // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and\
  \ odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = even_odd_palindrome;\n  assert.deepEqual(candidate(123),[8, 13]);\n  assert.deepEqual(candidate(12),[4,\
  \ 6]);\n  assert.deepEqual(candidate(3),[1, 2]);\n  assert.deepEqual(candidate(63),[6,\
  \ 8]);\n  assert.deepEqual(candidate(25),[5, 6]);\n  assert.deepEqual(candidate(19),[4,\
  \ 6]);\n  assert.deepEqual(candidate(9),[4, 5]);\n  assert.deepEqual(candidate(1),[0,\
  \ 1]);\n}\n\ntest();"
completions: ["  let even = 0, odd = 0, i = 0;\n  while(i <= n){\n    if(is_palindrome(i)){\n\
    \      if(i % 2 === 0){\n        even++;\n      }else{\n        odd++;\n     \
    \ }\n    }\n    i++;\n  }\n  return [even, odd];\n}\n", "    let even = 0, odd\
    \ = 0, i = 0, j = 0, count = 0;\n    while(i < n){\n        count++;\n       \
    \ if(i % 2 === 0){\n            even++;\n        }else{\n            odd++;\n\
    \        }\n        i++;\n    }\n    return [even, odd];\n}\n<|endoftext|><|javascript|>'use\
    \ strict';\n\nvar _ = require('lodash');\nvar async = require('async');\nvar fs\
    \ = require('fs');\nvar path = require('path');\nvar util = require('util');\n\
    \nvar config = require('../config');\nvar logger = require('../logger');\nvar\
    \ utils = require('../utils');\n\nvar db = require('../db');\nvar dbUtils = require('../db/utils');\n\
    \nvar dbPath = path.join(config.dbPath, 'db.json');\n\nvar dbCache = {};\n", " \
    \ var result = [];\n  var i = 1;\n  var j = n;\n  while(i <= j){\n    var count\
    \ = 0;\n    var mid = i + (j - i)/2;\n    var start = mid - 1;\n    var end =\
    \ mid + 1;\n    while(start >= 1 && end <= n){\n      if(isPalindrome(start, end)){\n\
    \        count++;\n      }\n      start--;\n      end++;\n    }\n    if(count\
    \ % 2 === 0){\n      result.push(mid);\n    }\n    i = mid + 1;\n    j = mid -\
    \ 1;\n  }\n  return result;\n}\n", "  var arr = [];\n  for(var i = 1; i <= n;\
    \ i++){\n    var odd = 0;\n    var even = 0;\n    for(var j = 1; j <= i/2; j++){\n\
    \      if(i % j === 0){\n        odd++;\n      }\n      else{\n        even++;\n\
    \      }\n    }\n    arr.push([odd, even]);\n  }\n  return arr;\n}\n", "  var\
    \ arr = [];\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  var sum = 0;\n  while(i\
    \ < n){\n    sum = 0;\n    while(sum < i){\n      sum += i;\n    }\n    if(sum\
    \ % 2 === 0){\n      arr.push(i);\n      count++;\n    }\n    i++;\n  }\n  while(j\
    \ < n){\n    sum = 0;\n    while(sum < j){\n      sum += j;\n    }\n    if(sum\
    \ % 2 === 1){\n      arr.push(j);\n      count++;\n    }\n    j++;\n  }\n  return\
    \ [count, arr];\n}\n", "  let even = 0, odd = 0, i = 1, j = 1, count = 0;\n  while(i\
    \ <= n){\n    if(i % 2 === 0){\n      count++;\n      even++;\n    }\n    else{\n\
    \      count++;\n      odd++;\n    }\n    i++;\n  }\n  return [count, even, odd];\n\
    }\n", "  let even = 0, odd = 0, i = 1, j = 1, count = 0;\n  while(i <= n){\n \
    \   if(i % 2 === 0){\n      even++;\n    }else{\n      odd++;\n    }\n    i++;\n\
    \  }\n  count = even + odd;\n  let result = [];\n  while(count > 0){\n    result.push(count\
    \ % 2);\n    count = Math.floor(count / 2);\n  }\n  return result;\n}\n", "  let\
    \ result = [];\n  let count = 0;\n  for(let i = 1; i <= n; i++){\n    let sum\
    \ = 0;\n    for(let j = 1; j <= i/2; j++){\n      if(i % j === 0){\n        sum\
    \ += j;\n      }\n    }\n    if(sum % 2 === 0){\n      count++;\n    }\n  }\n\
    \  result.push(count);\n  result.push(n - count);\n  return result;\n}\n", " \
    \   let result = [];\n    let count = 0;\n    let i = 1;\n    while(i <= n){\n\
    \        let sum = 0;\n        while(i <= n){\n            sum += i;\n       \
    \     i += 2;\n        }\n        if(sum % 2 === 0){\n            count++;\n \
    \       }\n        i = 1;\n    }\n    result.push(count);\n    result.push(n -\
    \ count);\n    return result;\n}\n", "  var result = [];\n  for(var i = 1; i <=\
    \ n; i++){\n    var count = 0;\n    for(var j = 1; j <= i/2; j++){\n      if(i\
    \ % j === 0){\n        count++;\n      }\n    }\n    if(count % 2 === 0){\n  \
    \    result.push(i);\n    }\n  }\n  return result;\n}\n", "  let even = 0, odd\
    \ = 0, i = 1;\n  while(i <= n){\n    if(isPalindrome(i)){\n      if(i % 2 ===\
    \ 0){\n        even++;\n      }else{\n        odd++;\n      }\n    }\n    i++;\n\
    \  }\n  return [even, odd];\n}\n", "  let even = 0, odd = 0\n  for(let i = 1;\
    \ i <= n; i++){\n    let num = i\n    let isPal = true\n    while(num){\n    \
    \  let digit = num % 10\n      if(digit !== digit){\n        isPal = false\n \
    \       break\n      }\n      num = num / 10\n    }\n    if(isPal){\n      if(num\
    \ % 2 === 0){\n        even++\n      }else{\n        odd++\n      }\n    }\n \
    \ }\n  return [even, odd]\n}\n", "  let even = 0, odd = 0\n  for(let i = 1; i\
    \ <= n; i++){\n    let is_palindrome = true\n    for(let j = 1; j <= i/2; j++){\n\
    \      if(i % j !== 0){\n        is_palindrome = false\n        break\n      }\n\
    \    }\n    if(is_palindrome){\n      if(i % 2 === 0){\n        even++\n     \
    \ }else{\n        odd++\n      }\n    }\n  }\n  return [even, odd]\n}\n<|endoftext|><|javascript|>import\
    \ {\n  GraphQLObjectType,\n  GraphQLString,\n  GraphQLNonNull,\n  GraphQLInt,\n\
    \  GraphQLBoolean,\n  GraphQLID,\n  GraphQLInt,\n  GraphQLNonNull,\n  GraphQLField,\n\
    \  GraphQLInputObjectType,\n  GraphQLInputObjectField,\n  GraphQLInputObjectType,\n\
    \  GraphQLInputObjectField,\n  GraphQLInputObjectType,\n  GraphQLInputObjectField,\n\
    \  GraphQLInputObjectType,\n  GraphQLInputObjectField,\n  GraphQLInputObjectType,\n\
    \  GraphQLInputObjectField,\n  GraphQLInputObjectType,\n  GraphQLInputObjectField,\n\
    \  GraphQLInputObjectType,\n  GraphQLInputObjectField,\n  GraphQLInputObjectType,\n\
    \  GraphQLInputObjectField,\n  GraphQLInputObjectType,\n  GraphQLInputObjectField,\n\
    \  GraphQLInputObjectType,\n  GraphQLInputObjectField,\n  GraphQLInputObjectType,\n\
    \  GraphQLInputObjectField,\n  GraphQLInputObjectType,\n  GraphQLInputObjectField,\n\
    \  GraphQLInputObjectType,\n  GraphQLInputObjectField,\n  GraphQLInputObjectType,\n\
    \  GraphQLInputObjectField,\n  GraphQLInputObjectType,\n  GraphQLInputObjectField,\n\
    \  GraphQLInputObjectType,\n  GraphQLInputObjectField,\n  GraphQLInputObjectType,\n\
    \  GraphQLInputObjectField,\n  GraphQLInputObjectType,\n  GraphQLInputObjectField,\n\
    \  GraphQLInputObjectType,\n  GraphQLInputObjectField,\n  GraphQLInputObjectType",
  "  var arr = [];\n  var i = 1;\n  while(i <= n){\n    if(isPalindrome(i)){\n   \
    \   arr.push(i);\n    }\n    i++;\n  }\n  return arr;\n}\n", "  var arr = [];\n\
    \  for(var i=1; i<=n; i++){\n    var count = 0;\n    for(var j=1; j<=i; j++){\n\
    \      if(i%j === 0){\n        count++;\n      }\n    }\n    if(count%2 === 0){\n\
    \      arr.push(i);\n    }\n  }\n  return arr;\n}\n", "  var result = [];\n  var\
    \ i = 1;\n  while(i <= n){\n    var count = 0;\n    var j = i;\n    while(j <=\
    \ n){\n      if(isPalindrome(i + j)){\n        count++;\n      }\n      j++;\n\
    \    }\n    if(count % 2 === 0){\n      result.push(i);\n    }\n    i++;\n  }\n\
    \  return result;\n}\n", "  var even = 0, odd = 0, i = 1, j = 1, count = 0;\n\
    \  while(i <= n){\n    if(i % 2 === 0){\n      count++;\n      even++;\n    }else{\n\
    \      count++;\n      odd++;\n    }\n    i++;\n  }\n  return [count, even, odd];\n\
    }\n", "  var result = [];\n  var even = 0;\n  var odd = 0;\n  for(var i = 1; i\
    \ <= n; i++){\n    if(isPalindrome(i)){\n      if(i % 2 === 0){\n        even++;\n\
    \      }else{\n        odd++;\n      }\n    }\n  }\n  result.push(even);\n  result.push(odd);\n\
    \  return result;\n}\n", "    var result = [];\n    for(var i=1; i<=n; i++){\n\
    \        var count = 0;\n        for(var j=1; j<=i/2; j++){\n            if(i%j\
    \ === 0){\n                count++;\n            }\n        }\n        if(count%2\
    \ === 0){\n            result.push(i);\n        }\n    }\n    return result;\n\
    }\n", "  let even = 0, odd = 0, i = 1, j = 1, count = 0;\n  while(i <= n){\n \
    \   if(isPalindrome(i)){\n      count++;\n      if(i % 2 === 0){\n        even++;\n\
    \      }else{\n        odd++;\n      }\n    }\n    i++;\n  }\n  return [even,\
    \ odd];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
