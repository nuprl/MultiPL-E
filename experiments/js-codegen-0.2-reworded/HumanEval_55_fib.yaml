name: HumanEval_55_fib
language: js
prompt: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n//\
  \ 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
  \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n \
  \ assert.deepEqual(candidate(12),144);\n}\n\ntest();"
completions: ["  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 1;\n\
    \  }\n  return fib(n-1) + fib(n-2);\n}\n", "    if(n == 0) return 0;\n    if(n\
    \ == 1) return 1;\n    return fib(n-1) + fib(n-2);\n}\n", "  if(n==0) return 0;\n\
    \  if(n==1) return 1;\n  return fib(n-1)+fib(n-2);\n}\n", "  if(n==0 || n==1){\n\
    \    return 1;\n  }else{\n    return fib(n-1)+fib(n-2);\n  }\n}\n", "  if(n <\
    \ 2){\n    return 1;\n  }\n  return fib(n-1) + fib(n-2);\n}\n", "  if(n < 2) return\
    \ 1;\n  return fib(n-1) + fib(n-2);\n}\n", "  if(n==0){\n    return 0;\n  }\n\
    \  if(n==1){\n    return 1;\n  }\n  return fib(n-1)+fib(n-2);\n}\n", "  if(n==0)\
    \ return 0;\n  if(n==1) return 1;\n  return fib(n-1)+fib(n-2);\n}\n", "  if(n==0)\
    \ return 0;\n  if(n==1) return 1;\n  return fib(n-1)+fib(n-2);\n}\n", "  if(n\
    \ == 0) return 0;\n  if(n == 1) return 1;\n  return fib(n-1) + fib(n-2);\n}\n",
  "  if(n==0){\n    return 0;\n  }\n  if(n==1){\n    return 1;\n  }\n  return fib(n-1)+fib(n-2);\n\
    }\n", "  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 1;\n  }\n\
    \  return fib(n-1) + fib(n-2);\n}\n", "    if(n==0) return 0;\n    if(n==1) return\
    \ 1;\n    return fib(n-1)+fib(n-2);\n}\n", "    if(n == 0){\n        return 0;\n\
    \    }\n    else if(n == 1){\n        return 1;\n    }\n    else{\n        return\
    \ fib(n-1) + fib(n-2);\n    }\n}\n", "  if(n === 0){\n    return 0;\n  }\n  if(n\
    \ === 1){\n    return 1;\n  }\n  return fib(n-1) + fib(n-2);\n}\n", "    if(n==0){\n\
    \        return 0;\n    }\n    if(n==1){\n        return 1;\n    }\n    return\
    \ fib(n-1)+fib(n-2);\n}\n<|endoftext|><|javascript|>/*\n * Copyright (c) 2015,\
    \ WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses\
    \ this file to you under the Apache License,\n * Version 2.0 (the \"License\"\
    ); you may not use this file except\n * in compliance with the License.\n * You\
    \ may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n\
    \ *\n * Unless required by applicable law or agreed to in writing,\n * software\
    \ distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT\
    \ WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the\
    \ License for the\n * specific language governing permissions and limitations\n\
    \ * under the License.\n */\n\nvar getConfig = function (config) {\n    var configObj\
    \ = {};\n    if (config) {\n        config = config.trim();\n        var configArray\
    \ = config.split(\"&\");\n        for (var i = 0; i < configArray.length; i++)\
    \ {\n            var configPair = configArray[i].split(\"=\");\n            configObj[configPair[0]]\
    \ = configPair[1];\n        }\n    }\n    return configObj;\n};\n\nvar getConfigFromUrl\
    \ = function (url) {\n    var configUrl = url.split(\"?\");\n    var config =\
    \ configUrl[1];\n    return getConfig(config);\n};\n\nvar getConfigFromUrlObj\
    \ = function (urlObj) {\n    var config = urlObj.query;\n    return getConfig(config);\n\
    };\n\nvar getConfigFromUrlObj = function (urlObj) {\n    var config = urlObj.query;\n\
    \    return getConfig(config);\n};\n\nvar getConfigFromUrlObj = function (urlObj)\
    \ {\n    var config = urlObj.query;\n    return getConfig(config);\n};\n\nvar\
    \ getConfigFromUrlObj =", "    if(n==0) return 0;\n    if(n==1) return 1;\n  \
    \  return fib(n-1)+fib(n-2);\n}\n", "  if(n==0) return 0;\n  if(n==1) return 1;\n\
    \  return fib(n-1)+fib(n-2);\n}\n", "    if(n == 0) return 0;\n    if(n == 1)\
    \ return 1;\n    return fib(n-1) + fib(n-2);\n}\n", "    if(n == 0) return 0;\n\
    \    if(n == 1) return 1;\n    return fib(n-1) + fib(n-2);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
