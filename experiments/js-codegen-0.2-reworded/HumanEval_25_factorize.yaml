name: HumanEval_25_factorize
language: js
prompt: "//Return array of prime factors of given integer in the order from smallest\
  \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
  \ to how many times it appeares in factorization.\n// Input number should be equal\
  \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
  // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
  \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
  \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
  \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n \
  \ assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
completions: ["  var factors = [];\n  for (var i = 2; i <= n; i++) {\n    if (n %\
    \ i === 0) {\n      factors.push(i);\n      factors.push(n / i);\n    }\n  }\n\
    \  return factors;\n}\n", "    var factors = [];\n    for(var i=2;i<n;i++){\n\
    \        if(n%i==0){\n            factors.push(i);\n            factors.push(n/i);\n\
    \        }\n    }\n    return factors;\n}\n", "    var factors = [];\n    for(var\
    \ i = 2; i <= Math.sqrt(n); i++){\n        if(n % i == 0){\n            factors.push(i);\n\
    \            factors.push(n / i);\n        }\n    }\n    return factors;\n}\n",
  "    var factors = [];\n    for(var i = 2; i <= Math.sqrt(n); i++){\n        if(n\
    \ % i == 0){\n            factors.push(i);\n            factors.push(n/i);\n \
    \       }\n    }\n    return factors;\n}\n", "  var factors = [];\n  var i = 2;\n\
    \  while(n > 1){\n    if(n % i === 0){\n      factors.push(i);\n      n = n /\
    \ i;\n    }\n    else{\n      i++;\n    }\n  }\n  return factors;\n}\n", "   \
    \ var factors = [];\n    for(var i = 2; i <= Math.sqrt(n); i++){\n        if(n\
    \ % i == 0){\n            factors.push(i);\n            factors.push(n / i);\n\
    \        }\n    }\n    return factors;\n}\n", "  var factors = [];\n  var i =\
    \ 2;\n  while(n > 1){\n    while(n % i == 0){\n      factors.push(i);\n      n\
    \ /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  var factors = [];\n\
    \  while(n > 1){\n    var factor = Math.sqrt(n);\n    while(n % factor === 0){\n\
    \      factors.push(factor);\n      n /= factor;\n    }\n  }\n  return factors;\n\
    }\n", "    var factors = [];\n    for (var i = 2; i <= Math.sqrt(n); i++) {\n\
    \        if (n % i == 0) {\n            factors.push(i);\n            factors.push(n\
    \ / i);\n        }\n    }\n    return factors;\n}\n", "  var factors = [];\n \
    \ var i = 2;\n  while(n > 1){\n    while(n % i == 0){\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  var factors\
    \ = [];\n  var i = 2;\n  while(n > 1){\n    if(n % i === 0){\n      factors.push(i);\n\
    \      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return factors;\n\
    }\n", "  var factors = [];\n  while(n > 1){\n    var i = 2;\n    while(n > 1){\n\
    \      if(n % i == 0){\n        factors.push(i);\n        n /= i;\n      }\n \
    \     i++;\n    }\n  }\n  return factors;\n}\n", "  var factors = [];\n  for (var\
    \ i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n\
    \      factors.push(n / i);\n    }\n  }\n  return factors;\n}\n", "  var factors\
    \ = [];\n  for (var i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n\
    \      factors.push(i);\n      factors.push(n / i);\n    }\n  }\n  return factors;\n\
    }\n", "  var factors = [];\n  var i = 2;\n  while(n > 1){\n    if(n % i === 0){\n\
    \      factors.push(i);\n      n /= i;\n    }\n    else{\n      i++;\n    }\n\
    \  }\n  return factors;\n}\n", "\tvar factors = [];\n\tfor(var i = 2; i <= Math.sqrt(n);\
    \ i++){\n\t\tif(n % i === 0){\n\t\t\tfactors.push(i);\n\t\t\tfactors.push(n /\
    \ i);\n\t\t}\n\t}\n\treturn factors;\n}\n", "    var factors = [];\n    for(var\
    \ i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0){\n            factors.push(i);\n\
    \            factors.push(n/i);\n        }\n    }\n    return factors;\n}\n",
  "  var factors = [];\n  for(var i = 2; i <= Math.sqrt(n); i++){\n    if(n % i ===\
    \ 0){\n      factors.push(i);\n      factors.push(n / i);\n    }\n  }\n  return\
    \ factors;\n}\n", "  var factors = [];\n  var i = 2;\n  while(n > 1){\n    if(n\
    \ % i === 0){\n      factors.push(i);\n      n /= i;\n    }else{\n      i++;\n\
    \    }\n  }\n  return factors;\n}\n", "    var factors = [];\n    for(var i=2;i<n;i++){\n\
    \        if(n%i==0){\n            factors.push(i);\n            factors.push(n/i);\n\
    \        }\n    }\n    return factors;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
