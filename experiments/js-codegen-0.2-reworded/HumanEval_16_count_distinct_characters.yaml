name: HumanEval_16_count_distinct_characters
language: js
prompt: "//Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
  // 4\nfunction count_distinct_characters(string){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = count_distinct_characters;\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
  abcde\"),5);\n  assert.deepEqual(candidate(\"abcdecadeCADE\"),5);\n  assert.deepEqual(candidate(\"\
  aaaaAAAAaaaa\"),1);\n  assert.deepEqual(candidate(\"Jerry jERRY JeRRRY\"),5);\n\
  }\n\ntest();"
completions: ["    var count = 0;\n    for(var i = 0; i < string.length; i++){\n \
    \       if(string.charAt(i).toLowerCase() != string.charAt(i).toUpperCase()){\n\
    \            count++;\n        }\n    }\n    return count;\n}\n", "    var count\
    \ = 0;\n    for(var i = 0; i < string.length; i++){\n        var char = string.charAt(i);\n\
    \        if(count_distinct_characters.cache[char]){\n            count += count_distinct_characters.cache[char];\n\
    \        }\n        count_distinct_characters.cache[char] = 1;\n    }\n    return\
    \ count;\n}\ncount_distinct_characters.cache = {};\n", "    var count = 0;\n \
    \   for(var i = 0; i < string.length; i++){\n        if(string.charAt(i) != string.charAt(i).toLowerCase()){\n\
    \            count++;\n        }\n    }\n    return count;\n}\n", "    var count\
    \ = 0;\n    for(var i = 0; i < string.length; i++){\n        var char = string.charAt(i);\n\
    \        if(count_distinct_characters.cache[char]){\n            count += count_distinct_characters.cache[char];\n\
    \        }else{\n            count += 1;\n            count_distinct_characters.cache[char]\
    \ = 1;\n        }\n    }\n    return count;\n}\ncount_distinct_characters.cache\
    \ = {};\n", "    var count = 0;\n    for(var i=0; i<string.length; i++){\n   \
    \     var char = string.charAt(i);\n        if(count_distinct_characters.hasOwnProperty(char)){\n\
    \            count += count_distinct_characters[char];\n        }else{\n     \
    \       count_distinct_characters[char] = 1;\n        }\n    }\n    return count;\n\
    }\n", "  var characters = string.split('');\n  var count = 0;\n  for(var i = 0;\
    \ i < characters.length; i++){\n    if(characters[i] != characters[i].toLowerCase()){\n\
    \      count++;\n    }\n  }\n  return count;\n}\n", "    var char_count = {};\n\
    \    for(var i = 0; i < string.length; i++){\n        var char = string.charAt(i);\n\
    \        if(char_count[char] === undefined){\n            char_count[char] = 1;\n\
    \        } else {\n            char_count[char] += 1;\n        }\n    }\n    return\
    \ Object.keys(char_count).length;\n}\n", "  var count = 0;\n  for(var i = 0; i\
    \ < string.length; i++){\n    if(string.charAt(i) !== string.charAt(i).toLowerCase()){\n\
    \      count++;\n    }\n  }\n  return count;\n}\n<|endoftext|><|javascript|>var\
    \ gulp = require('gulp');\nvar concat = require('gulp-concat');\nvar uglify =\
    \ require('gulp-uglify');\nvar rename = require('gulp-rename');\nvar minifyCss\
    \ = require('gulp-minify-css');\nvar sass = require('gulp-sass');\nvar sourcemaps\
    \ = require('gulp-sourcemaps');\nvar autoprefixer = require('gulp-autoprefixer');\n\
    var notify = require('gulp-notify');\nvar plumber = require('gulp-plumber');\n\
    var browserSync = require('browser-sync');\nvar reload = browserSync.reload;\n\
    \nvar paths = {\n  scripts: [\n    './src/js/app.js',\n    './src/js/app.js',\n\
    \    './src/js/app.js',\n    './src/js/app.js',\n    './src/js/app.js',\n    './src/js/app.js',\n\
    \    './src/js/app.js',\n    './src/js/app.js',\n    './src/js/app.js',\n    './src/js/app.js',\n\
    \    './src/js/app.js',\n    './src/js/app.js',\n    './src/js/app.js',\n    './src/js/app.js',\n\
    \    './src/js/app.js',\n    './src/js/app.js',\n    './src/js/app.js',\n    './src/js/app.js',\n\
    \    './src/js/app.js',\n    './src/js/app.js',\n    './src/js/app.js',\n    './src/js/app.js',\n\
    \    './src/js/", "    var count = 0;\n    for(var i = 0; i < string.length; i++){\n\
    \        var character = string.charAt(i);\n        if(count_distinct_characters.cache[character]){\n\
    \            count += count_distinct_characters.cache[character];\n        }\n\
    \        else{\n            count += 1;\n            count_distinct_characters.cache[character]\
    \ = 1;\n        }\n    }\n    return count;\n}\ncount_distinct_characters.cache\
    \ = {};\n", "    var char_count = {};\n    for(var i = 0; i < string.length; i++){\n\
    \        var char = string.charAt(i);\n        if(char_count[char] === undefined){\n\
    \            char_count[char] = 1;\n        } else {\n            char_count[char]\
    \ += 1;\n        }\n    }\n    return Object.keys(char_count).length;\n}\n", " \
    \ var count = 0;\n  for(var i=0;i<string.length;i++){\n    var char = string.charAt(i);\n\
    \    if(count_distinct_characters.cache[char]){\n      count += count_distinct_characters.cache[char];\n\
    \    }else{\n      count += 1;\n      count_distinct_characters.cache[char] =\
    \ 1;\n    }\n  }\n  return count;\n}\ncount_distinct_characters.cache = {};\n",
  "  var count = 0;\n  for(var i = 0; i < string.length; i++){\n    var char = string.charAt(i);\n\
    \    if(count_distinct_characters.cache[char]){\n      count += count_distinct_characters.cache[char];\n\
    \    }else{\n      count += 1;\n      count_distinct_characters.cache[char] =\
    \ 1;\n    }\n  }\n  return count;\n}\ncount_distinct_characters.cache = {};\n\
    <|endoftext|><|javascript|>import {\n  GraphQLObjectType,\n  GraphQLString,\n\
    \  GraphQLInt,\n  GraphQLNonNull,\n  GraphQLID\n} from 'graphql';\nimport {\n\
    \  connectionArgs,\n  connectionDefinitions,\n  connectionFromArray\n} from 'graphql-relay';\n\
    import {\n  nodeDefinitions,\n  nodeInterface,\n  nodeField,\n  nodeType,\n  nodeTypeMap\n\
    } from 'graphql-sequelize';\nimport {\n  User,\n  UserType\n} from '../../models';\n\
    \nconst UserType = new GraphQLObjectType({\n  name: 'User',\n  description: 'A\
    \ user of the app',\n  fields: () => ({\n    id: {\n      type: new GraphQLNonNull(GraphQLID)\n\
    \    },\n    name: {\n      type: new GraphQLNonNull(GraphQLString)\n    },\n\
    \    email: {\n      type: new GraphQLNonNull(GraphQLString)\n    },\n    password:\
    \ {\n      type: new GraphQLNonNull(GraphQLString)\n    },\n    createdAt: {\n\
    \      type: new GraphQLNonNull(GraphQLString)\n    },\n    updatedAt: {\n   \
    \   type: new GraphQLNonNull(GraphQLString)\n    }\n  })\n});\n\nconst UserConnection\
    \ = connectionDefinitions({\n  name: 'User',\n  nodeType: UserType,\n  connectionFields:\
    \ () => ({\n    totalCount: {\n      type: GraphQLInt,\n      resolve: ({ totalCount\
    \ }) => totalCount\n    }\n  })\n});\n\nexport default {\n  type: User", "  var\
    \ count = 0;\n  for(var i = 0; i < string.length; i++){\n    count += (string.charAt(i)\
    \ === string.charAt(i).toLowerCase()) ? 0 : 1;\n  }\n  return count;\n}\n", " \
    \   var count = 0;\n    for(var i = 0; i < string.length; i++){\n        var char\
    \ = string.charAt(i);\n        if(count_distinct_characters.cache[char]){\n  \
    \          count += count_distinct_characters.cache[char];\n        }\n      \
    \  count_distinct_characters.cache[char] = 1;\n    }\n    return count;\n}\ncount_distinct_characters.cache\
    \ = {};\n", "    var count = 0;\n    for(var i = 0; i < string.length; i++){\n\
    \        var char = string.charAt(i);\n        if(count_distinct_characters.cache[char]){\n\
    \            count += count_distinct_characters.cache[char];\n        }else{\n\
    \            count += 1;\n            count_distinct_characters.cache[char] =\
    \ 1;\n        }\n    }\n    return count;\n}\ncount_distinct_characters.cache\
    \ = {};\n", "    var char_count = {};\n    for(var i=0; i<string.length; i++){\n\
    \        var char = string.charAt(i);\n        if(char_count[char] == undefined){\n\
    \            char_count[char] = 1;\n        } else {\n            char_count[char]++;\n\
    \        }\n    }\n    var count = 0;\n    for(var key in char_count){\n     \
    \   if(char_count[key] > 1){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n", "    var count = 0;\n    for(var i = 0; i < string.length; i++){\n\
    \        var character = string.charAt(i);\n        if(count_distinct_characters.hasOwnProperty(character)){\n\
    \            count += count_distinct_characters[character];\n        }\n     \
    \   else{\n            count_distinct_characters[character] = 1;\n        }\n\
    \    }\n    return count;\n}\n", "    var count = 0;\n    for(var i=0;i<string.length;i++){\n\
    \        var character = string.charAt(i);\n        if(count_distinct_characters.cache[character]){\n\
    \            count += count_distinct_characters.cache[character];\n        }else{\n\
    \            count += 1;\n            count_distinct_characters.cache[character]\
    \ = 1;\n        }\n    }\n    return count;\n}\ncount_distinct_characters.cache\
    \ = {};\n", "    var count = 0;\n    for(var i = 0; i < string.length; i++){\n\
    \        var char = string.charAt(i);\n        if(count_distinct_characters.cache[char]){\n\
    \            count += count_distinct_characters.cache[char];\n        }else{\n\
    \            count += 1;\n            count_distinct_characters.cache[char] =\
    \ 1;\n        }\n    }\n    return count;\n}\n\ncount_distinct_characters.cache\
    \ = {};\n<|endoftext|><|javascript|>/**\n * @license\n * Copyright Google Inc.\
    \ All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style\
    \ license that can be\n * found in the LICENSE file at https://angular.io/license\n\
    \ */\n", "    var count = 0;\n    for(var i = 0; i < string.length; i++){\n  \
    \      var char = string.charAt(i);\n        if(count_distinct_characters.cache[char]){\n\
    \            count += count_distinct_characters.cache[char];\n        }else{\n\
    \            count += 1;\n            count_distinct_characters.cache[char] =\
    \ 1;\n        }\n    }\n    return count;\n}\ncount_distinct_characters.cache\
    \ = {};\n<|endoftext|><|javascript|>var fs = require('fs');\nvar path = require('path');\n\
    var _ = require('lodash');\n\nvar config = {\n  // The root directory for all\
    \ the files\n  root: path.join(__dirname, '..', '..', '..', '..'),\n\n  // The\
    \ directory where the build files are\n  build: path.join(__dirname, '..', '..',\
    \ '..', '..', 'build'),\n\n  // The directory where the source files are\n  src:\
    \ path.join(__dirname, '..', '..', '..', '..', 'src'),\n\n  // The directory where\
    \ the test files are\n  test: path.join(__dirname, '..', '..', '..', '..', 'test'),\n\
    \n  // The directory where the documentation files are\n  docs: path.join(__dirname,\
    \ '..', '..', '..', '..', 'docs'),\n\n  // The directory where the documentation\
    \ files are\n  examples: path.join(__dirname, '..', '..', '..', '..', 'examples'),\n\
    \n  // The directory where the documentation files are\n  test_examples: path.join(__dirname,\
    \ '..', '..', '..', '..', 'test', 'examples'),\n\n  // The directory where the\
    \ documentation files are\n  test_docs: path.join(__dirname, '..', '..', '..',\
    \ '..', 'test', 'docs'),\n\n  // The directory where the documentation files are\n\
    \  test_examples_docs: path.join(__dirname, '..', '..', '..', '..', 'test', 'ex"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
