name: HumanEval_103_rounded_avg
language: js
prompt: "//You are given two positive integers n and m, and your task is to compute\
  \ the\n// average of the integers from n through m (including n and m). \n// Round\
  \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
  \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
  \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20,\
  \ 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
  \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
  \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
  \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
  );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
  \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
  );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
  \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
completions: ["  var sum = 0;\n  for(var i = n; i <= m; i++){\n    sum += i;\n  }\n\
    \  return sum / (m - n + 1);\n}\n", "  var sum = 0;\n  for(var i = n; i <= m;\
    \ i++){\n    sum += i;\n  }\n  return sum / (m - n + 1);\n}\n<|endoftext|><|javascript|>import\
    \ React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators\
    \ } from 'redux';\nimport { Link } from 'react-router';\nimport { fetchPosts }\
    \ from '../actions/index';\nimport PostList from '../components/PostList';\n\n\
    class PostsIndex extends React.Component {\n  componentWillMount() {\n    this.props.fetchPosts();\n\
    \  }\n\n  render() {\n    return (\n      <div>\n        <h1>Posts</h1>\n    \
    \    <PostList posts={this.props.posts}/>\n        <Link to=\"/posts/new\">New\
    \ Post</Link>\n      </div>\n    );\n  }\n}\n", "  var sum = 0;\n  for(var i =\
    \ n; i <= m; i++){\n    sum += i;\n  }\n  var avg = sum / (m - n + 1);\n  var\
    \ rounded = Math.round(avg);\n  return rounded.toString(2);\n}\n<|endoftext|><|javascript|>var\
    \ _ = require('lodash');\nvar async = require('async');\nvar fs = require('fs');\n\
    var path = require('path');\nvar util = require('util');\nvar yaml = require('js-yaml');\n\
    \nvar config = require('./config');\nvar logger = require('./logger');\nvar utils\
    \ = require('./utils');\n\nvar defaultConfig = {\n  logLevel: 'info',\n  logFormat:\
    \ '%D %T %L',\n  logFile: '',\n  logToConsole: true,\n  logToFile: false,\n  logToStdout:\
    \ true,\n  logToSyslog: false,\n  logToSyslogHost: 'localhost',\n  logToSyslogPort:\
    \ 514,\n  logToSyslogFacility: 'daemon',\n  logToSyslogFacilityName: '',\n  logToSyslogFacilityPriority:\
    \ '',\n  logToSyslogFacilityTag: '',\n  logToSyslogFacilityTagName: '',\n  logToSyslogFacilityTagPriority:\
    \ '',\n  logToSyslogFacilityTagTag: '',\n  logToSyslogFacilityTagTagName: '',\n\
    \  logToSyslogFacilityTagTagPriority: '',\n  logToSyslogFacilityTagTagTag: '',\n\
    \  logToSyslogFacilityTagTagNamePriority: '',\n  logToSyslogFacilityTagTagTagPriority:\
    \ '',\n  logToSyslogFacilityTagTagTagNamePriority: '',\n  logToSyslogFacilityTagTagTagTagPriority:\
    \ '',\n  logToSyslogFacilityTagTagTagTagNamePriority: '',\n  logToSyslogFacilityTagTagTagTagTagPriority:\
    \ '',\n  logToSyslogFacilityTagTagTagTagTagNamePriority: '',\n  log", "  var sum\
    \ = 0;\n  for(var i = n; i <= m; i++){\n    sum += i;\n  }\n  var avg = sum /\
    \ (m - n + 1);\n  var rounded = Math.round(avg);\n  return rounded.toString(2);\n\
    }\n", "  var sum = 0;\n  for(var i = n; i <= m; i++){\n    sum += i;\n  }\n  var\
    \ avg = sum / (m - n + 1);\n  var rounded = Math.round(avg);\n  return rounded.toString(2);\n\
    }\n", "  var sum = 0;\n  for(var i = n; i <= m; i++){\n    sum += i;\n  }\n  var\
    \ avg = sum / (m - n + 1);\n  return avg.toString(2);\n}\n", "    var sum = 0;\n\
    \    for(var i = n; i <= m; i++){\n        sum += i;\n    }\n    var avg = sum\
    \ / (m - n + 1);\n    return avg.toString(2);\n}\n<|endoftext|><|javascript|>import\
    \ {\n  GraphQLObjectType,\n  GraphQLString,\n  GraphQLNonNull,\n  GraphQLInt,\n\
    \  GraphQLID,\n  GraphQLBoolean,\n  GraphQLFloat,\n  GraphQLInputObjectType,\n\
    \  GraphQLList,\n  GraphQLInputObjectType,\n  GraphQLInputObjectField,\n  GraphQLInputType,\n\
    \  GraphQLInputObjectEnumType,\n  GraphQLInputObjectType,\n} from 'graphql';\n\
    import {\n  GraphQLDate,\n  GraphQLDateTime,\n  GraphQLTime,\n  GraphQLDateTime,\n\
    \  GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n \
    \ GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n\
    \  GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n \
    \ GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n\
    \  GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n \
    \ GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n\
    \  GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n \
    \ GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n\
    \  GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n  GraphQLInt,\n \
    \ GraphQLInt,\n  GraphQLInt,\n  Graph", "    var sum = 0;\n    for(var i = n;\
    \ i <= m; i++){\n        sum += i;\n    }\n    var avg = sum / (m - n + 1);\n\
    \    return avg.toString(2);\n}\n", "    var sum = 0;\n    for(var i = n; i <=\
    \ m; i++){\n        sum += i;\n    }\n    var avg = Math.round(sum/m);\n    return\
    \ avg.toString(2);\n}\n", "  var sum = 0;\n  for(var i = n; i <= m; i++){\n  \
    \  sum += i;\n  }\n  var avg = sum / (m - n + 1);\n  return avg.toString(2);\n\
    }\n<|endoftext|><|javascript|>var path = require('path');\nvar webpack = require('webpack');\n\
    var HtmlWebpackPlugin = require('html-webpack-plugin');\nvar ExtractTextPlugin\
    \ = require('extract-text-webpack-plugin');\nvar autoprefixer = require('autoprefixer');\n\
    \nmodule.exports = {\n  entry: [\n    './src/index.js'\n  ],\n  output: {\n  \
    \  path: path.join(__dirname, 'dist'),\n    filename: 'bundle.js'\n  },\n  plugins:\
    \ [\n    new webpack.optimize.OccurenceOrderPlugin(),\n    new webpack.DefinePlugin({\n\
    \      'process.env.NODE_ENV': JSON.stringify('production')\n    }),\n    new\
    \ webpack.optimize.UglifyJsPlugin({\n      compressor: {\n        warnings: false\n\
    \      }\n    }),\n    new HtmlWebpackPlugin({\n      template: 'src/index.html',\n\
    \      minify: {\n        removeComments: true,\n        collapseWhitespace: true,\n\
    \        removeRedundantAttributes: true,\n        useShortDoctype: true,\n  \
    \      removeEmptyAttributes: true,\n        removeStyleLinkTypeAttributes: true,\n\
    \        keepClosingSlash: true,\n        minifyJS: true,\n        minifyCSS:\
    \ true,\n        minifyURLs: true\n      },\n      inject: true,\n      filename:\
    \ 'index.html',\n      chunks: ['main'],\n      excludeChunks: ['admin']\n   \
    \ }),\n    new ExtractTextPlugin('style.css', {\n      allChunks: true\n    })\n\
    \  ],\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude:\
    \ /node_modules/,\n        use: [{\n          loader: 'babel-loader',\n      \
    \    options:", "    var sum = 0;\n    for(var i = n; i <= m; i++){\n        sum\
    \ += i;\n    }\n    var avg = sum / (m - n + 1);\n    return avg.toString(2);\n\
    }\n", "  var sum = 0;\n  for(var i = n; i <= m; i++){\n    sum += i;\n  }\n  var\
    \ avg = sum / (m - n + 1);\n  return avg.toString(2);\n}\n", "    var sum = 0;\n\
    \    for(var i = n; i <= m; i++){\n        sum += i;\n    }\n    var avg = sum\
    \ / (m - n + 1);\n    return avg.toString(2);\n}\n", "    var sum = 0;\n    for(var\
    \ i = n; i <= m; i++){\n        sum += i;\n    }\n    var avg = Math.round(sum/m);\n\
    \    return avg.toString(2);\n}\n<|endoftext|><|javascript|>/*\n * Copyright (c)\
    \ 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc.\
    \ licenses this file to you under the Apache License,\n * Version 2.0 (the \"\
    License\"); you may not use this file except\n * in compliance with the License.\n\
    \ * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n\
    \ *\n * Unless required by applicable law or agreed to in writing,\n * software\
    \ distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT\
    \ WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the\
    \ License for the\n * specific language governing permissions and limitations\n\
    \ * under the License.\n */\n\nvar getConfig = function (config) {\n    var configObj\
    \ = {};\n    if (config) {\n        configObj.apiVersion = config.apiVersion;\n\
    \        configObj.context = config.context;\n        configObj.apiName = config.apiName;\n\
    \        configObj.apiProvider = config.apiProvider;\n        configObj.apiVersion\
    \ = config.apiVersion;\n        configObj.apiContext = config.apiContext;\n  \
    \      configObj.apiProvider = config.apiProvider;\n        configObj.apiTenant\
    \ = config.apiTenant;\n        configObj.apiVersion = config.apiVersion;\n   \
    \     configObj.apiEndpoint = config.apiEndpoint;\n        configObj.apiEndpoint\
    \ = config.apiEndpoint;\n        configObj.apiEndpoint = config.apiEndpoint;\n\
    \        configObj.apiEndpoint = config.apiEndpoint;\n        configObj.apiEndpoint\
    \ = config.apiEndpoint;\n        configObj.apiEndpoint = config.apiEndpoint;\n\
    \        configObj.apiEndpoint = config.apiEndpoint;\n        configObj.apiEndpoint\
    \ = config.apiEndpoint;\n        configObj", "    var sum = 0;\n    for(var i\
    \ = n; i <= m; i++){\n        sum += i;\n    }\n    var avg = sum / (m - n + 1);\n\
    \    return avg.toString(2);\n}\n<|endoftext|><|javascript|>var searchData=\n\
    [\n  ['_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_",
  "    var sum = 0;\n    for(var i = n; i <= m; i++){\n        sum += i;\n    }\n\
    \    return sum / (m - n + 1);\n}\n", "  var sum = 0;\n  for(var i = n; i <= m;\
    \ i++){\n    sum += i;\n  }\n  var avg = sum / (m - n + 1);\n  return avg.toString(2);\n\
    }\n<|endoftext|><|javascript|>/*\n * Copyright (c) Microsoft Corporation. All\
    \ rights reserved.\n * Licensed under the MIT License. See License.txt in the\
    \ project root for\n * license information.\n *\n * Code generated by Microsoft\
    \ (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will\
    \ be lost if the code is\n * regenerated.\n */\n\n'use strict';\n", "    var sum\
    \ = 0;\n    for(var i = n; i <= m; i++){\n        sum += i;\n    }\n    var avg\
    \ = sum / (m - n + 1);\n    return avg.toString(2);\n}\n<|endoftext|><|javascript|>var\
    \ express = require('express');\nvar path = require('path');\nvar favicon = require('serve-favicon');\n\
    var logger = require('morgan');\nvar cookieParser = require('cookie-parser');\n\
    var bodyParser = require('body-parser');\n\nvar routes = require('./routes/index');\n\
    var users = require('./routes/users');\n\nvar app = express();\n", "    var sum\
    \ = 0;\n    for(var i = n; i <= m; i++){\n        sum += i;\n    }\n    var avg\
    \ = sum / (m - n + 1);\n    return avg.toString(2);\n}\n", "    var sum = 0;\n\
    \    for(var i = n; i <= m; i++){\n        sum += i;\n    }\n    var avg = sum\
    \ / (m - n + 1);\n    return avg.toString(2);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
