{
  "name": "HumanEval_1_separate_paren_groups",
  "language": "js",
  "prompt": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = 0;\n  var current_paren_close = 0;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  var current_paren_open_stack = [];\n  var current_paren_close_stack = [];\n  var current_paren_open_stack_count = 0;\n  var current_paren_close_stack_count = 0;\n  var current_paren_open_stack_index = 0;\n  var current_paren_close_stack_index = 0;\n  var current_paren_open_stack_index_count = 0;\n  var current_paren_close_stack_index_count = 0;\n  var current_paren_open_stack_index_index = 0;\n  var current_paren_close_stack_index_index = 0;\n  var current_paren_open_stack_index_index_count = 0;\n  var current_paren_close_stack_index_index_count = 0;\n  var current_paren_open_stack_index_index_index = 0;\n  var current_paren_close_stack_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_count = 0;\n  var current_paren_close_stack_index_index_index_count = 0;\n  var current_paren_open_stack_index_index_index_index = 0;\n  var current_paren_close_stack_index_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_index_count = 0;\n  var current_paren_close_stack_index_index_index_index_count = 0;\n  var current_paren_open_stack_index_index_index_index_index = 0;\n  var current_paren_close_stack_index_index_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_index_index_count = 0;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpjc1bp3oi.js:51\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    var paren_stack = [];\n    var output = [];\n    var paren_count = 0;\n    var paren_index = 0;\n    var paren_char = \"\";\n    var paren_open = false;\n    var paren_close = false;\n    var paren_count_stack = [];\n    var paren_count_stack_index = 0;\n    var paren_count_stack_count = 0;\n    var paren_count_stack_count_index = 0;\n    var paren_count_stack_count_count = 0;\n    var paren_count_stack_count_count_index = 0;\n    var paren_count_stack_count_count_count = 0;\n    var paren_count_stack_count_count_count_index = 0;\n    var paren_count_stack_count_count_count_count = 0;\n    var paren_count_stack_count_count_count_count_index = 0;\n    var paren_count_stack_count_count_count_count_count = 0;\n    var paren_count_stack_count_count_count_count_count_index = 0;\n    var paren_count_stack_count_count_count_count_count_count = 0;\n    var paren_count_stack_count_count_count_count_count_count_index = 0;\n    var paren_count_stack_count_count_count_count_count_count_count = 0;\n    var paren_count_stack_count_count_count_count_count_count_count_index = 0;\n    var paren_count_stack_count_count_count_count_count_count_count_count = 0;\n    var paren_count_stack_count_count_count_count_count_count_count_count_index = 0;\n    var paren_count_stack_count_count_count_count_count_count_count_count_count = 0;\n    var paren_count_stack_count_count_count_count_count_count_count_count_count_index = 0;\n    var paren_count_stack\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpxs97rqzh.js:47\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split(\"\");\n  var result = [];\n  var stack = [];\n  var current_string = \"\";\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === \"(\"){\n      stack.push(parens[i]);\n    }\n    else if(parens[i] === \")\"){\n      if(stack.length === 0){\n        result.push(current_string);\n        current_string = \"\";\n      }\n      else{\n        current_string += parens[i];\n        stack.pop();\n      }\n    }\n    else{\n      current_string += parens[i];\n    }\n  }\n  if(stack.length > 0){\n    result.push(current_string);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpt0nftp4d.js:41:10)\n    at Object.<anonymous> (/tmp/tmpt0nftp4d.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split(\"\");\n  var stack = [];\n  var result = [];\n  for (var i = 0; i < parens.length; i++){\n    if (parens[i] === \"(\"){\n      stack.push(parens[i]);\n    } else if (parens[i] === \")\"){\n      if (stack.length === 0){\n        result.push(parens[i]);\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpnasi8u06.js:30:10)\n    at Object.<anonymous> (/tmp/tmpnasi8u06.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = false;\n  var current_paren_close = false;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  var current_paren_open_stack = [];\n  var current_paren_close_stack = [];\n  var current_paren_open_stack_count = 0;\n  var current_paren_close_stack_count = 0;\n\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      current_paren_open_count++;\n      current_paren_open = true;\n    }\n    else if(paren_string[i] === \")\"){\n      current_paren_close_count++;\n      current_paren_close = true;\n    }\n    else if(current_paren_open){\n      current_paren_open_stack.push(paren_string[i]);\n      current_paren_open_stack_count++;\n    }\n    else if(current_paren_close){\n      current_paren_close_stack.push(paren_string[i]);\n      current_paren_close_stack_count++;\n    }\n    else if(current_paren_open_count === current_paren_close_count){\n      if(current_paren_open_stack_count > current_paren_close_stack_count){\n        current_paren_open_stack_count--;\n        current_paren_open_stack.pop();\n      }\n      else if(current_paren_close_stack_count > current_paren_open_stack_count){\n        current_paren_close_stack_count--;\n        current_paren_close_stack.pop();\n      }\n      else{\n        current_paren_open_stack_count--;\n        current_paren_open_stack.pop();\n        current_paren_close_stack_count--;\n        current_paren_close_stack.pop();\n      }\n    }\n    else if(\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpdf2u8j54.js:55\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    var paren_stack = [];\n    var result = [];\n    var current_string = \"\";\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === \"(\"){\n            paren_stack.push(paren_string[i]);\n        }\n        else if(paren_string[i] === \")\"){\n            if(paren_stack.length === 0){\n                result.push(current_string);\n                current_string = \"\";\n            }\n            else{\n                current_string += paren_string[i];\n                paren_stack.pop();\n            }\n        }\n        else{\n            current_string += paren_string[i];\n        }\n    }\n    if(paren_stack.length > 0){\n        result.push(current_string);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpm74y8ext.js:40:10)\n    at Object.<anonymous> (/tmp/tmpm74y8ext.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      paren_stack.push(paren_string[i]);\n    }\n    else if(paren_string[i] === ')'){\n      if(paren_stack.length === 0){\n        result.push(current_string);\n        current_string = \"\";\n      }\n      else{\n        current_string += paren_stack.pop();\n      }\n    }\n    else{\n      current_string += paren_string[i];\n    }\n  }\n  if(paren_stack.length > 0){\n    result.push(current_string);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpaogisxq0.js:39:10)\n    at Object.<anonymous> (/tmp/tmpaogisxq0.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      paren_stack.push(paren_string[i]);\n    }\n    else if(paren_string[i] === ')'){\n      if(paren_stack.length === 0){\n        result.push(current_string);\n        current_string = \"\";\n      }\n      else{\n        current_string += paren_stack.pop();\n      }\n    }\n    else{\n      current_string += paren_string[i];\n    }\n  }\n  if(paren_stack.length > 0){\n    result.push(current_string);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpaogisxq0.js:39:10)\n    at Object.<anonymous> (/tmp/tmpaogisxq0.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_open = false;\n  var paren_close = false;\n  var paren_group = \"\";\n  var paren_group_count = 0;\n  var paren_group_open = false;\n  var paren_group_close = false;\n  var paren_group_open_count = 0;\n  var paren_group_close_count = 0;\n  var paren_group_open_index = 0;\n  var paren_group_close_index = 0;\n  var paren_group_open_index_stack = [];\n  var paren_group_close_index_stack = [];\n  var paren_group_open_count_stack = [];\n  var paren_group_close_count_stack = [];\n  var paren_group_open_index_stack_stack = [];\n  var paren_group_close_index_stack_stack = [];\n  var paren_group_open_count_stack_stack = [];\n  var paren_group_close_count_stack_stack = [];\n  var paren_group_open_index_stack_stack_stack = [];\n  var paren_group_close_index_stack_stack_stack = [];\n  var paren_group_open_count_stack_stack_stack = [];\n  var paren_group_close_count_stack_stack_stack = [];\n  var paren_group_open_index_stack_stack_stack_stack = [];\n  var paren_group_close_index_stack_stack_stack_stack = [];\n  var paren_group_open_count_stack_stack_stack_stack = [];\n  var paren_group_close_count_stack_stack_stack_stack = [];\n  var paren_group_open_index_stack_stack_stack_stack_stack = [];\n  var paren_group_close_index_stack_stack_stack_stack_stack = [];\n  var paren_group_open_count_stack_stack_stack_stack_stack = [];\n  var paren_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpikl_jsfy.js:52\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var current_group = [];\n  var current_group_count = 0;\n  var current_group_open_braces = 0;\n  var current_group_close_braces = 0;\n  var current_group_open_parens = 0;\n  var current_group_close_parens = 0;\n  var current_group_string = \"\";\n  var current_group_string_length = 0;\n  var current_group_string_index = 0;\n  var current_group_string_open_braces = 0;\n  var current_group_string_close_braces = 0;\n  var current_group_string_open_parens = 0;\n  var current_group_string_close_parens = 0;\n  var current_group_string_length = 0;\n  var current_group_string_index = 0;\n  var current_group_string_open_braces = 0;\n  var current_group_string_close_braces = 0;\n  var current_group_string_open_parens = 0;\n  var current_group_string_close_parens = 0;\n  var current_group_string_length = 0;\n  var current_group_string_index = 0;\n  var current_group_string_open_braces = 0;\n  var current_group_string_close_braces = 0;\n  var current_group_string_open_parens = 0;\n  var current_group_string_close_parens = 0;\n  var current_group_string_length = 0;\n  var current_group_string_index = 0;\n  var current_group_string_open_braces = 0;\n  var current_group_string_close_braces = 0;\n  var current_group_string_open_parens = 0;\n  var current_group_string_close_parens = 0;\n  var current_group_string_length = 0;\n  var current_group_string_index = 0;\n  var current_group_string_open_braces = 0;\n  var current_group_string_close_braces = 0;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpxswlg10l.js:55\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split('');\n  var stack = [];\n  var result = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === '('){\n      stack.push(parens[i]);\n    }\n    else if(parens[i] === ')'){\n      if(stack.length === 0){\n        result.push('');\n      }\n      else{\n        stack.pop();\n        result.push(stack.join(''));\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(',\n  '(',\n  '',\n  '((',\n  '(',\n  '',\n  '',\n  '((',\n  '(',\n  '(',\n  '(',\n  ''\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp808x68vg.js:33:10)\n    at Object.<anonymous> (/tmp/tmp808x68vg.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '(', '(', '',  '((',\n    '(', '',  '',  '((',\n    '(', '(', '(', ''\n  ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_char = '';\n  var paren_char_count = 0;\n  var paren_char_index = 0;\n  var paren_char_count_stack = [];\n  var paren_char_index_stack = [];\n  var paren_char_stack = [];\n  var paren_char_stack_index = 0;\n  var paren_char_stack_count = 0;\n  var paren_char_stack_count_stack = [];\n  var paren_char_stack_index_stack = [];\n  var paren_char_stack_count_stack_index = 0;\n  var paren_char_stack_count_stack_index_stack = [];\n  var paren_char_stack_index_stack_index = 0;\n  var paren_char_stack_index_stack_index_stack = [];\n  var paren_char_stack_index_stack_index_stack_index = 0;\n  var paren_char_stack_index_stack_index_stack_index_stack = [];\n  var paren_char_stack_index_stack_index_stack_index_stack_index = 0;\n  var paren_char_stack_index_stack_index_stack_index_stack_index_stack = [];\n  var paren_char_stack_index_stack_index_stack_index_stack_index_stack_index = 0;\n  var paren_char_stack_index_stack_index_stack_index_stack_index_stack_index = [];\n  var paren_char_stack_index_stack_index_stack_index_stack_index_stack_index_stack = [];\n  var paren_char_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index = 0;\n  var paren_char_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index = [];\n  var paren_char_stack_index_stack_index_stack_index_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmp0vvhjz2k.js:47\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = false;\n  for (var i = 0; i < paren_string.length; i++){\n    if (paren_string[i] === \"(\"){\n      current_paren_open = true;\n      current_paren_count++;\n    }\n    else if (paren_string[i] === \")\"){\n      current_paren_open = false;\n      current_paren_count--;\n    }\n    else if (current_paren_open && current_paren_count === 0){\n      current_string += paren_string[i];\n    }\n    else if (current_paren_open){\n      current_string += paren_string[i];\n    }\n    else {\n      current_string += paren_string[i];\n    }\n  }\n  if (current_paren_count === 0){\n    result.push(current_string);\n  }\n  else {\n    result = [];\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '   '\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpipk5laa9.js:46:10)\n    at Object.<anonymous> (/tmp/tmpipk5laa9.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '   ' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_string = paren_string.replace(/\\s/g,'');\n  for(var i=0; i<paren_string.length; i++){\n    if(paren_string[i] === '('){\n      paren_open++;\n    }\n    else if(paren_string[i] === ')'){\n      paren_close++;\n    }\n    else if(paren_string[i] === '(' && paren_open > 0){\n      paren_stack.push(paren_open);\n      paren_open = 0;\n    }\n    else if(paren_string[i] === ')' && paren_close > 0){\n      paren_open = paren_stack.pop();\n      paren_close = 0;\n    }\n  }\n  if(paren_open > 0){\n    paren_stack.push(paren_open);\n  }\n  while(paren_stack.length > 0){\n    paren_open = paren_stack.pop();\n    paren_groups.push(paren_string.substring(0,paren_open));\n    paren_string = paren_string.substring(paren_open);\n  }\n  paren_groups.push(paren_string);\n  return paren_groups;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(()())((()))',\n  '()((())()())'\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpgfibaiay.js:47:10)\n    at Object.<anonymous> (/tmp/tmpgfibaiay.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '(()())((()))', '()((())()())' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var result = [];\n  var stack = [];\n  var paren_count = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var paren_string_length = paren_string.length;\n  var paren_string_char = paren_string.charAt(i);\n  var paren_string_index = i;\n  var paren_string_index_end = paren_string_index;\n  var paren_string_index_start = paren_string_index;\n  var paren_string_index_start_end = paren_string_index;\n  var paren_string_index_start_end_end = paren_string_index;\n  var paren_string_index_start_end_end_end = paren_string_index;\n  var paren_string_index_start_end_end_end_end = paren_string_index;\n  var paren_string_index_start_end_end_end_end_end = paren_string_index;\n  var paren_string_index_start_end_end_end_end_end_end = paren_string_index;\n  var paren_string_index_start_end_end_end_end_end_end_end = paren_string_index;\n  var paren_string_index_start_end_end_end_end_end_end_end_end = paren_string_index;\n  var paren_string_index_start_end_end_end_end_end_end_end_end_end = paren_string_index;\n  var paren_string_index_start_end_end_end_end_end_end_end_end_end_end = paren_string_index;\n  var paren_string_index_start_end_end_end_end_end_end_end_end_end_end_end = paren_string_index;\n  var paren_string_index_start_end_end_end_end_end_end_end_end_end_end_end_end = paren_string_index\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmp_li70vqe.js:42\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split(\"\");\n  var result = [];\n  var stack = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === \"(\"){\n      stack.push(parens[i]);\n    } else if(parens[i] === \")\"){\n      if(stack.length === 0){\n        result.push(parens.slice(i, parens.length));\n        break;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpfylpz2j9.js:31:10)\n    at Object.<anonymous> (/tmp/tmpfylpz2j9.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var result = [];\n  var stack = [];\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_char = \"\";\n  var paren_char_count = 0;\n  var paren_char_index = 0;\n  var paren_char_count_stack = [];\n  var paren_char_index_stack = [];\n  var paren_char_stack = [];\n  var paren_char_stack_index = 0;\n  var paren_char_stack_count = 0;\n  var paren_char_stack_count_stack = [];\n  var paren_char_stack_index_stack = [];\n  var paren_char_stack_stack = [];\n  var paren_char_stack_stack_index = 0;\n  var paren_char_stack_stack_count = 0;\n  var paren_char_stack_stack_count_stack = [];\n  var paren_char_stack_stack_index_stack = [];\n  var paren_char_stack_stack_stack = [];\n  var paren_char_stack_stack_index_stack = [];\n  var paren_char_stack_stack_stack_index = 0;\n  var paren_char_stack_stack_stack_count = 0;\n  var paren_char_stack_stack_stack_count_stack = [];\n  var paren_char_stack_stack_stack_index_stack = [];\n  var paren_char_stack_stack_stack_stack = [];\n  var paren_char_stack_stack_stack_index_stack = [];\n  var paren_char_stack_stack_stack_stack_index = 0;\n  var paren_char_stack_stack_stack_stack_count = 0;\n  var paren_char_stack_stack_stack_stack_count_stack = [];\n  var paren_char_stack_stack_stack_stack_index_stack = [];\n  var paren_char_stack_stack_stack_stack_stack = [];\n  var paren_char_stack_stack_stack_stack_index_stack = [];\n  var paren_char_stack\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpdxpl7ncs.js:53\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_index = 0;\n  var current_paren_count = 0;\n  var current_paren_open = false;\n  var current_paren_close = false;\n\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      current_paren_count++;\n      current_paren_open = true;\n    }\n    else if(paren_string[i] === \")\"){\n      current_paren_count--;\n      current_paren_close = true;\n    }\n    else if(current_paren_open){\n      current_string += paren_string[i];\n    }\n    else if(current_paren_close){\n      current_string += paren_string[i];\n      result.push(current_string);\n      current_string = \"\";\n    }\n    else if(current_paren_count === 0){\n      current_string += paren_string[i];\n    }\n  }\n\n  if(current_string !== \"\"){\n    result.push(current_string);\n  }\n\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '   '\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpr9m3zcei.js:50:10)\n    at Object.<anonymous> (/tmp/tmpr9m3zcei.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '   ' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var current_group = [];\n  var current_group_string = \"\";\n  var current_group_index = 0;\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_string_length = paren_string.length;\n  var paren_string_index = 0;\n  var paren_string_char = \"\";\n  var paren_string_char_index = 0;\n  var paren_string_char_count = 0;\n  var paren_string_char_count_index = 0;\n  var paren_string_char_count_count = 0;\n  var paren_string_char_count_count_index = 0;\n  var paren_string_char_count_count_count = 0;\n  var paren_string_char_count_count_count_index = 0;\n  var paren_string_char_count_count_count_count = 0;\n  var paren_string_char_count_count_count_count_index = 0;\n  var paren_string_char_count_count_count_count_count = 0;\n  var paren_string_char_count_count_count_count_count_index = 0;\n  var paren_string_char_count_count_count_count_count_count = 0;\n  var paren_string_char_count_count_count_count_count_count_index = 0;\n  var paren_string_char_count_count_count_count_count_count_count = 0;\n  var paren_string_char_count_count_count_count_count_count_count_index = 0;\n  var paren_string_char_count_count_count_count_count_count_count_count = 0;\n  var paren_string_char_count_count_count_count_count_count_count_count_index = 0;\n  var paren_string_char_count_count_count_count_count_count_count_count_count = 0;\n  var paren_string_char_count_count_count_count\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpzo3m8z00.js:47\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var paren_count = 0;\n  var result = [];\n  var current_string = \"\";\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      paren_stack.push(paren_count);\n      paren_count++;\n    }\n    else if(paren_string[i] === ')'){\n      paren_count--;\n      if(paren_stack.length > 0){\n        if(paren_stack[paren_stack.length - 1] === paren_count){\n          paren_stack.pop();\n        }\n      }\n    }\n    else if(paren_string[i] === ' '){\n      continue;\n    }\n    else{\n      current_string += paren_string[i];\n    }\n  }\n  if(paren_stack.length === 0){\n    result.push(current_string);\n  }\n  else{\n    throw \"Unbalanced parentheses\";\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp9sadweyy.js:46:10)\n    at Object.<anonymous> (/tmp/tmp9sadweyy.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_index = 0;\n  var current_paren_count = 0;\n  var current_paren_index = 0;\n  var current_paren_open = false;\n  var current_paren_close = false;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  var current_paren_open_index = 0;\n  var current_paren_close_index = 0;\n  var current_paren_open_count_index = 0;\n  var current_paren_close_count_index = 0;\n  var current_paren_open_count_index_stack = [];\n  var current_paren_close_count_index_stack = [];\n  var current_paren_open_index_stack = [];\n  var current_paren_close_index_stack = [];\n  var current_paren_open_count_index_stack = [];\n  var current_paren_close_count_index_stack = [];\n  var current_paren_open_count_index_stack_stack = [];\n  var current_paren_close_count_index_stack_stack = [];\n  var current_paren_open_index_stack_stack = [];\n  var current_paren_close_index_stack_stack = [];\n  var current_paren_open_count_index_stack_stack = [];\n  var current_paren_close_count_index_stack_stack = [];\n  var current_paren_open_count_index_stack_stack_stack = [];\n  var current_paren_close_count_index_stack_stack_stack = [];\n  var current_paren_open_index_stack_stack_stack = [];\n  var current_paren_close_index_stack_stack_stack = [];\n  var current_paren_open_count_index_stack_stack_stack = [];\n  var current_paren_close_count_index_stack_stack_stack = [];\n  var current_paren_open_count_index_stack_stack_stack_stack = [];\n  var current_paren_close_count_index_stack_stack_stack_stack\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpqk1c7jgf.js:53\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_index = 0;\n  var current_paren_open_index = 0;\n  var current_paren_close_index = 0;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  var current_paren_open_count_stack = [];\n  var current_paren_close_count_stack = [];\n  var current_paren_open_count_stack_index = 0;\n  var current_paren_close_count_stack_index = 0;\n  var current_paren_open_count_stack_stack = [];\n  var current_paren_close_count_stack_stack = [];\n  var current_paren_open_count_stack_stack_index = 0;\n  var current_paren_close_count_stack_stack_index = 0;\n  var current_paren_open_count_stack_stack_stack = [];\n  var current_paren_close_count_stack_stack_stack = [];\n  var current_paren_open_count_stack_stack_stack_index = 0;\n  var current_paren_close_count_stack_stack_stack_index = 0;\n  var current_paren_open_count_stack_stack_stack_stack = [];\n  var current_paren_close_count_stack_stack_stack_stack = [];\n  var current_paren_open_count_stack_stack_stack_stack_index = 0;\n  var current_paren_close_count_stack_stack_stack_stack_index = 0;\n  var current_paren_open_count_stack_stack_stack_stack_stack = [];\n  var current_paren_close_count_stack_stack_stack_stack_stack = [];\n  var current_paren_open_count_stack_stack_stack_stack_stack_index = 0;\n  var current_paren_close_count_stack_stack_stack_stack_stack_index = 0;\n  var current_paren_open_count_stack_stack_stack_stack_stack = [];\n  var\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpdo_uhwth.js:39\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var current_group = [];\n  var current_group_count = 0;\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_string = paren_string.split(\"\");\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      paren_open++;\n    }\n    else if(paren_string[i] === \")\"){\n      paren_close++;\n    }\n    else if(paren_open === paren_close){\n      current_group.push(paren_string[i]);\n      current_group_count++;\n    }\n    else if(paren_open > paren_close){\n      current_group.push(paren_string[i]);\n      current_group_count++;\n    }\n    else if(paren_open < paren_close){\n      paren_groups.push(current_group.join(\"\"));\n      current_group = [];\n      current_group_count = 0;\n      paren_count = 0;\n      paren_open = 0;\n      paren_close = 0;\n      current_group.push(paren_string[i]);\n      current_group_count++;\n    }\n  }\n  paren_groups.push(current_group.join(\"\"));\n  return paren_groups;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '   '\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp0ghvxqo7.js:50:10)\n    at Object.<anonymous> (/tmp/tmp0ghvxqo7.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '   ' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\" || paren_string[i] === \")\"){\n      if(paren_stack.length === 0){\n        current_string += paren_string[i];\n      }else{\n        if(paren_stack[paren_stack.length - 1] === \"(\" && paren_string[i] === \")\"){\n          paren_stack.pop();\n        }else{\n          current_string += paren_string[i];\n        }\n      }\n    }else{\n      current_string += paren_string[i];\n    }\n  }\n  if(current_string !== \"\"){\n    result.push(current_string);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(()()) ((())) () ((())()())'\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp2dt_pjwm.js:37:10)\n    at Object.<anonymous> (/tmp/tmp2dt_pjwm.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '(()()) ((())) () ((())()())' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split(\"\");\n  var result = [];\n  var stack = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === \"(\"){\n      stack.push(parens[i]);\n    }\n    else if(parens[i] === \")\"){\n      if(stack.length === 0){\n        result.push(stack.join(\"\"));\n      }\n      else{\n        stack.pop();\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpuhv0cwg0.js:32:10)\n    at Object.<anonymous> (/tmp/tmpuhv0cwg0.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var current_group = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_length = paren_string.length;\n  var paren_char = '';\n  var paren_open = false;\n  var paren_close = false;\n  var paren_open_count = 0;\n  var paren_close_count = 0;\n  var paren_open_index = 0;\n  var paren_close_index = 0;\n  var paren_open_index_prev = 0;\n  var paren_close_index_prev = 0;\n  var paren_open_index_next = 0;\n  var paren_close_index_next = 0;\n  var paren_open_index_next_prev = 0;\n  var paren_close_index_next_prev = 0;\n  var paren_open_index_next_next = 0;\n  var paren_close_index_next_next = 0;\n  var paren_open_index_next_next_prev = 0;\n  var paren_close_index_next_next_prev = 0;\n  var paren_open_index_next_next_next = 0;\n  var paren_close_index_next_next_next = 0;\n  var paren_open_index_next_next_next_prev = 0;\n  var paren_close_index_next_next_next_prev = 0;\n  var paren_open_index_next_next_next_next = 0;\n  var paren_close_index_next_next_next_next = 0;\n  var paren_open_index_next_next_next_next_prev = 0;\n  var paren_close_index_next_next_next_next_prev = 0;\n  var paren_open_index_next_next_next_next_next = 0;\n  var paren_close_index_next_next_next_next_next = 0;\n  var paren_open_index_next_next_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpazqnpgab.js:53\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_string = paren_string.replace(/\\s/g,'');\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] == '('){\n      paren_stack.push(paren_count);\n      paren_count++;\n      paren_open++;\n    }\n    else if(paren_string[i] == ')'){\n      paren_count--;\n      paren_close++;\n      if(paren_stack.length > 0){\n        if(paren_stack[paren_stack.length - 1] == paren_count){\n          paren_stack.pop();\n          paren_close--;\n        }\n      }\n    }\n  }\n  if(paren_stack.length > 0){\n    console.log(\"Error: Unbalanced parentheses\");\n  }\n  else{\n    for(var i = 0; i < paren_count; i++){\n      result.push(paren_string.substring(0,paren_open));\n      result.push(paren_string.substring(paren_open,paren_close));\n      result.push(paren_string.substring(paren_close,paren_string.length));\n      paren_open = 0;\n      paren_close = 0;\n      paren_string = paren_string.substring(paren_string.length);\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp1recdt05.js:52:10)\n    at Object.<anonymous> (/tmp/tmp1recdt05.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split('');\n  var result = [];\n  var current_group = [];\n  var current_depth = 0;\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === '('){\n      current_depth++;\n    } else if(parens[i] === ')'){\n      current_depth--;\n    }\n    if(current_depth === 0){\n      result.push(current_group.join(''));\n      current_group = [];\n    }\n    current_group.push(parens[i]);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(()()',\n  ')',\n  ' ((())',\n  ')',\n  ' (',\n  ')',\n  ' ((())()()'\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpe_d28spk.js:32:10)\n    at Object.<anonymous> (/tmp/tmpe_d28spk.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '(()()', ')', ' ((())', ')', ' (', ')', ' ((())()()' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_index = 0;\n  var open_parens = 0;\n  var closed_parens = 0;\n  var open_braces = 0;\n  var closed_braces = 0;\n  var paren_count = 0;\n  var paren_string = paren_string.split(\"\");\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      open_parens++;\n    }\n    if(paren_string[i] === \")\"){\n      closed_parens++;\n    }\n    if(paren_string[i] === \"{\"){\n      open_braces++;\n    }\n    if(paren_string[i] === \"}\"){\n      closed_braces++;\n    }\n    if(paren_string[i] === \" \"){\n      continue;\n    }\n    if(open_parens === closed_parens && open_braces === closed_braces){\n      if(current_string !== \"\"){\n        result.push(current_string);\n        current_string = \"\";\n      }\n      current_string += paren_string[i];\n      paren_count++;\n      if(paren_count === 1){\n        current_index = i;\n      }\n    }\n    else{\n      if(open_parens > closed_parens){\n        current_string += paren_string[i];\n      }\n      else{\n        current_string += paren_string[i];\n        if(open_braces > closed_braces){\n          current_string += paren_string[i];\n        }\n        else{\n          current_string += paren_string[i];\n        }\n      }\n    }\n  }\n  if(current_string !== \"\"){\n    result.push(current_string);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(()()',\n  ')((())',\n  ')(',\n  ')((())()()',\n  ')'\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpovrxg1we.js:71:10)\n    at Object.<anonymous> (/tmp/tmpovrxg1we.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '(()()', ')((())', ')(', ')((())()()', ')' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var current_group = [];\n  var current_group_count = 0;\n  var current_group_open_braces = 0;\n  var current_group_close_braces = 0;\n  var paren_string_length = paren_string.length;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var aa = 0;\n  var ab = 0;\n  var ac = 0;\n  var ad = 0;\n  var ae = 0;\n  var af = 0;\n  var ag = 0;\n  var ah = 0;\n  var ai = 0;\n  var aj = 0;\n  var ak = 0;\n  var al = 0;\n  var am = 0;\n  var an = 0;\n  var ao = 0;\n  var ap = 0;\n  var aq = 0;\n  var ar = 0;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpediq4axm.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split(\"\");\n  var result = [];\n  var stack = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === \"(\"){\n      stack.push(parens[i]);\n    }\n    else if(parens[i] === \")\"){\n      if(stack.length === 0){\n        result.push(stack.join(\"\"));\n      }\n      else{\n        stack.pop();\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpuhv0cwg0.js:32:10)\n    at Object.<anonymous> (/tmp/tmpuhv0cwg0.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var current_group = [];\n  var current_group_index = 0;\n  var paren_count = 0;\n  var paren_stack = [];\n  var paren_stack_index = 0;\n  var paren_stack_count = 0;\n  var paren_stack_index_count = 0;\n  var paren_stack_count_index = 0;\n  var paren_stack_count_index_count = 0;\n  var paren_stack_count_index_count_index = 0;\n  var paren_stack_count_index_count_index_count = 0;\n  var paren_stack_count_index_count_index_count_index = 0;\n  var paren_stack_count_index_count_index_count_index_count = 0;\n  var paren_stack_count_index_count_index_count_index_count_index = 0;\n  var paren_stack_count_index_count_index_count_index_count_index_count = 0;\n  var paren_stack_count_index_count_index_count_index_count_index_count_index = 0;\n  var paren_stack_count_index_count_index_count_index_count_index_count_index_count = 0;\n  var paren_stack_count_index_count_index_count_index_count_index_count_index_count_index = 0;\n  var paren_stack_count_index_count_index_count_index_count_index_count_index_count_index_count = 0;\n  var paren_stack_count_index_count_index_count_index_count_index_count_index_count_index_count_index = 0;\n  var paren_stack_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count = 0;\n  var paren_stack_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index = 0;\n  var paren_stack_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpq4jvqk7l.js:43\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var result = [];\n  var stack = [];\n  var current_string = '';\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      stack.push(paren_string[i]);\n    }\n    else if(paren_string[i] === ')'){\n      if(stack.length === 0){\n        result.push(current_string);\n        current_string = '';\n      }\n      else{\n        stack.pop();\n        current_string += paren_string[i];\n      }\n    }\n    else{\n      current_string += paren_string[i];\n    }\n  }\n  if(stack.length > 0){\n    result.push(current_string);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpvivgb6e8.js:40:10)\n    at Object.<anonymous> (/tmp/tmpvivgb6e8.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_index = 0;\n  var current_paren_count = 0;\n  var current_paren_index = 0;\n  var current_paren_open = true;\n  var current_paren_close = false;\n  var current_paren_open_index = 0;\n  var current_paren_close_index = 0;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  var current_paren_open_count_index = 0;\n  var current_paren_close_count_index = 0;\n  var current_paren_open_count_index_stack = [];\n  var current_paren_close_count_index_stack = [];\n  var current_paren_open_count_index_stack_index = 0;\n  var current_paren_close_count_index_stack_index = 0;\n  var current_paren_open_count_index_stack_stack = [];\n  var current_paren_close_count_index_stack_stack = [];\n  var current_paren_open_count_index_stack_stack_index = 0;\n  var current_paren_close_count_index_stack_stack_index = 0;\n  var current_paren_open_count_index_stack_stack_stack = [];\n  var current_paren_close_count_index_stack_stack_stack = [];\n  var current_paren_open_count_index_stack_stack_stack_index = 0;\n  var current_paren_close_count_index_stack_stack_stack_index = 0;\n  var current_paren_open_count_index_stack_stack_stack_stack = [];\n  var current_paren_close_count_index_stack_stack_stack_stack = [];\n  var current_paren_open_count_index_stack_stack_stack_stack_index = 0;\n  var current_paren_close_count_index_stack_stack_stack_stack_index = 0;\n  var current_paren_open_count_index_stack_stack_stack_stack_stack = [];\n  \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpjugjppf8.js:51\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_stack = [];\n  var current_group = [];\n  var current_group_length = 0;\n  var current_group_index = 0;\n  var current_group_open_braces = 0;\n  var current_group_close_braces = 0;\n  var current_group_open_braces_count = 0;\n  var current_group_close_braces_count = 0;\n  var current_group_open_braces_index = 0;\n  var current_group_close_braces_index = 0;\n  var current_group_open_braces_count_index = 0;\n  var current_group_close_braces_count_index = 0;\n  var current_group_open_braces_count_index_index = 0;\n  var current_group_close_braces_count_index_index = 0;\n  var current_group_open_braces_count_index_index_index = 0;\n  var current_group_close_braces_count_index_index_index = 0;\n  var current_group_open_braces_count_index_index_index_index = 0;\n  var current_group_close_braces_count_index_index_index_index = 0;\n  var current_group_open_braces_count_index_index_index_index_index = 0;\n  var current_group_close_braces_count_index_index_index_index_index = 0;\n  var current_group_open_braces_count_index_index_index_index_index_index = 0;\n  var current_group_close_braces_count_index_index_index_index_index_index = 0;\n  var current_group_open_braces_count_index_index_index_index_index_index_index = 0;\n  var current_group_close_braces_count_index_index_index_index_index_index_index = 0;\n  var current_group_open_braces_count_index_index_index_index_index_index_index_index = 0;\n  var current_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpkeqcrbtc.js:46\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var paren_count = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z =\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpbdpr3htd.js:81\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split(\"\");\n  var result = [];\n  var current_group = [];\n  var current_group_count = 0;\n  var current_group_open_braces = 0;\n  for (var i = 0; i < parens.length; i++){\n    if (parens[i] === \"(\"){\n      current_group_open_braces++;\n    }\n    if (parens[i] === \")\"){\n      current_group_open_braces--;\n    }\n    if (parens[i] === \"(\" && current_group_open_braces === 0){\n      current_group.push(parens[i]);\n      current_group_count++;\n    }\n    if (parens[i] === \")\" && current_group_count > 0){\n      current_group.push(parens[i]);\n      current_group_count--;\n      if (current_group_count === 0){\n        result.push(current_group.join(\"\"));\n        current_group = [];\n        current_group_count = 0;\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp_deevynr.js:42:10)\n    at Object.<anonymous> (/tmp/tmp_deevynr.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split(\"\");\n  var result = [];\n  var stack = [];\n  var open_parens = 0;\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === \"(\"){\n      open_parens++;\n    }\n    else if(parens[i] === \")\"){\n      open_parens--;\n    }\n    else if(parens[i] === \"(\" && open_parens === 0){\n      stack.push(i);\n    }\n    else if(parens[i] === \")\" && open_parens === 0){\n      var start = stack.pop();\n      result.push(parens.slice(start, i+1));\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmphl5gdhg6.js:35:10)\n    at Object.<anonymous> (/tmp/tmphl5gdhg6.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split(\"\");\n  var result = [];\n  var stack = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === \"(\"){\n      stack.push(parens[i]);\n    }\n    else if(parens[i] === \")\"){\n      if(stack.length === 0){\n        result.push(stack.join(\"\"));\n      }\n      else{\n        stack.pop();\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpuhv0cwg0.js:32:10)\n    at Object.<anonymous> (/tmp/tmpuhv0cwg0.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    var paren_stack = [];\n    var result = [];\n    var current_string = \"\";\n    var current_paren_count = 0;\n    var current_paren_open = 0;\n    var current_paren_close = 0;\n    var current_paren_open_count = 0;\n    var current_paren_close_count = 0;\n    var current_paren_open_count_stack = [];\n    var current_paren_close_count_stack = [];\n    var current_paren_open_stack = [];\n    var current_paren_close_stack = [];\n    var current_paren_open_stack_count = 0;\n    var current_paren_close_stack_count = 0;\n    var current_paren_open_stack_count_stack = [];\n    var current_paren_close_stack_count_stack = [];\n    var current_paren_open_stack_count_stack_count = 0;\n    var current_paren_close_stack_count_stack_count = 0;\n    var current_paren_open_stack_count_stack_count_stack = [];\n    var current_paren_close_stack_count_stack_count_stack = [];\n    var current_paren_open_stack_count_stack_count_stack_count = 0;\n    var current_paren_close_stack_count_stack_count_stack_count = 0;\n    var current_paren_open_stack_count_stack_count_stack_count_stack = [];\n    var current_paren_close_stack_count_stack_count_stack_count_stack = [];\n    var current_paren_open_stack_count_stack_count_stack_count_stack_count = 0;\n    var current_paren_close_stack_count_stack_count_stack_count_stack_count = 0;\n    var current_paren_open_stack_count_stack_count_stack_count_stack_count_stack = [];\n    var current_paren_close_stack_count_stack_count_stack_count_stack_count_stack = [];\n    var current_paren_open_stack_count_stack_count_stack_count_stack_count_stack_count = 0;\n    var\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpe939ishi.js:38\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split(\"\");\n  var stack = [];\n  var result = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === \"(\"){\n      stack.push(parens[i]);\n    } else if(parens[i] === \")\"){\n      if(stack.length === 0){\n        result.push(parens[i]);\n      } else {\n        stack.pop();\n        result.push(parens[i]);\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ')',\n  ')',\n  ')',\n  ')',\n  ')',\n  ')',\n  ')',\n  ')',\n  ')',\n  ')',\n  ')',\n  ')'\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpa16vdgrz.js:31:10)\n    at Object.<anonymous> (/tmp/tmpa16vdgrz.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    ')', ')', ')', ')',\n    ')', ')', ')', ')',\n    ')', ')', ')', ')'\n  ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split('');\n  var result = [];\n  var current_string = '';\n  var open_parens = 0;\n  for (var i = 0; i < parens.length; i++) {\n    if (parens[i] === '(') {\n      open_parens++;\n    }\n    if (parens[i] === ')') {\n      open_parens--;\n    }\n    if (open_parens === 0) {\n      current_string += parens[i];\n      if (current_string.length > 0) {\n        result.push(current_string);\n        current_string = '';\n      }\n    } else {\n      current_string += parens[i];\n    }\n  }\n  if (current_string.length > 0) {\n    result.push(current_string);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(()())',\n  ' ',\n  '((()))',\n  ' ',\n  '()',\n  ' ',\n  '((())()())'\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpod211i2g.js:40:10)\n    at Object.<anonymous> (/tmp/tmpod211i2g.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '(()())', ' ', '((()))', ' ', '()', ' ', '((())()())' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_string = paren_string.replace(/\\s/g,'');\n  for (var i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_open++;\n    } else if (paren_string[i] === ')') {\n      paren_close++;\n    }\n    if (paren_open === paren_close) {\n      paren_groups.push(paren_string.substring(paren_count, i));\n      paren_count = i;\n      paren_open = 0;\n      paren_close = 0;\n    }\n  }\n  paren_groups.push(paren_string.substring(paren_count, paren_string.length));\n  return paren_groups;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(()()',\n  ')((())',\n  ')(',\n  ')((())()()',\n  ')'\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp1gr91tyj.js:36:10)\n    at Object.<anonymous> (/tmp/tmp1gr91tyj.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '(()()', ')((())', ')(', ')((())()()', ')' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    var paren_stack = [];\n    var result = [];\n    var current_string = \"\";\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] == \"(\"){\n            paren_stack.push(paren_string[i]);\n        }\n        else if(paren_string[i] == \")\"){\n            if(paren_stack.length == 0){\n                result.push(current_string);\n                current_string = \"\";\n            }\n            else{\n                current_string += paren_string[i];\n                paren_stack.pop();\n            }\n        }\n        else{\n            current_string += paren_string[i];\n        }\n    }\n    if(paren_stack.length > 0){\n        result.push(current_string);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp8gmsb__c.js:40:10)\n    at Object.<anonymous> (/tmp/tmp8gmsb__c.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_index = 0;\n  var current_paren_count = 0;\n  var current_paren_count_in_string = 0;\n  var current_paren_count_in_string_in_stack = 0;\n  var current_open_paren = \"\";\n  var current_close_paren = \"\";\n  var current_open_paren_in_string = \"\";\n  var current_close_paren_in_string = \"\";\n  var current_open_paren_in_string_in_stack = \"\";\n  var current_close_paren_in_string_in_stack = \"\";\n  var current_open_paren_in_string_in_stack_in_stack = \"\";\n  var current_close_paren_in_string_in_stack_in_stack = \"\";\n  var current_open_paren_in_string_in_stack_in_stack_in_stack = \"\";\n  var current_close_paren_in_string_in_stack_in_stack_in_stack = \"\";\n  var current_open_paren_in_string_in_stack_in_stack_in_stack_in_stack = \"\";\n  var current_close_paren_in_string_in_stack_in_stack_in_stack_in_stack = \"\";\n  var current_open_paren_in_string_in_stack_in_stack_in_stack_in_stack_in_stack = \"\";\n  var current_close_paren_in_string_in_stack_in_stack_in_stack_in_stack_in_stack = \"\";\n  var current_open_paren_in_string_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack = \"\";\n  var current_close_paren_in_string_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack = \"\";\n  var current_open_paren_in_string_in_stack_in_stack_in_stack_in_stack_in_stack_in_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpmvjkfxcn.js:43\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = false;\n  var current_paren_close = false;\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      current_paren_count++;\n      current_paren_open = true;\n    }\n    else if(paren_string[i] === \")\"){\n      current_paren_count--;\n      current_paren_close = true;\n    }\n    else if(current_paren_open && current_paren_close){\n      current_string += paren_string[i];\n    }\n    else if(current_paren_open){\n      current_string += paren_string[i];\n    }\n    else if(current_paren_close){\n      current_string += paren_string[i];\n    }\n    else{\n      current_string += paren_string[i];\n    }\n  }\n  if(current_paren_count === 0){\n    result.push(current_string);\n  }\n  else{\n    result = [];\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '   '\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp9ose8srr.js:50:10)\n    at Object.<anonymous> (/tmp/tmp9ose8srr.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '   ' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = false;\n  var current_paren_close = false;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  var current_paren_open_stack = [];\n  var current_paren_close_stack = [];\n  var current_paren_open_stack_count = 0;\n  var current_paren_close_stack_count = 0;\n  var current_paren_open_stack_index = 0;\n  var current_paren_close_stack_index = 0;\n  var current_paren_open_stack_index_count = 0;\n  var current_paren_close_stack_index_count = 0;\n  var current_paren_open_stack_index_count_max = 0;\n  var current_paren_close_stack_index_count_max = 0;\n  var current_paren_open_stack_index_count_min = 0;\n  var current_paren_close_stack_index_count_min = 0;\n  var current_paren_open_stack_index_count_min_max = 0;\n  var current_paren_close_stack_index_count_min_max = 0;\n  var current_paren_open_stack_index_count_min_min = 0;\n  var current_paren_close_stack_index_count_min_min = 0;\n  var current_paren_open_stack_index_count_min_max_min = 0;\n  var current_paren_close_stack_index_count_min_max_min = 0;\n  var current_paren_open_stack_index_count_min_max_max = 0;\n  var current_paren_close_stack_index_count_min_max_max = 0;\n  var current_paren_open_stack_index_count_min_max_min_max = 0;\n  var current_paren_close_stack_index_count_min_max_min_max = 0;\n  var current_paren_open_stack\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpz9uqayhg.js:50\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split('');\n  var result = [];\n  var stack = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === '('){\n      stack.push(parens[i]);\n    }\n    else if(parens[i] === ')'){\n      if(stack.length === 0){\n        result.push('');\n      }\n      else{\n        result.push(stack.pop());\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '('\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpf3l4yith.js:32:10)\n    at Object.<anonymous> (/tmp/tmpf3l4yith.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '(', '(', '(', '(',\n    '(', '(', '(', '(',\n    '(', '(', '(', '('\n  ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var current_group = [];\n  var current_group_count = 0;\n  var current_group_open_braces = 0;\n  var current_group_close_braces = 0;\n  var current_group_string = \"\";\n  var current_group_string_count = 0;\n  var current_group_string_open_braces = 0;\n  var current_group_string_close_braces = 0;\n  var current_group_string_string = \"\";\n  var current_group_string_string_count = 0;\n  var current_group_string_string_open_braces = 0;\n  var current_group_string_string_close_braces = 0;\n  var paren_string_length = paren_string.length;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b =\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmponhz731d.js:68\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split('');\n  var result = [];\n  var stack = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === '('){\n      stack.push(parens[i]);\n    }\n    else if(parens[i] === ')'){\n      if(stack.length === 0){\n        result.push('');\n      }\n      else{\n        result.push(stack.pop());\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '('\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpf3l4yith.js:32:10)\n    at Object.<anonymous> (/tmp/tmpf3l4yith.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '(', '(', '(', '(',\n    '(', '(', '(', '(',\n    '(', '(', '(', '('\n  ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split(\"\");\n  var stack = [];\n  var result = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === \"(\"){\n      stack.push(parens[i]);\n    } else if(parens[i] === \")\"){\n      if(stack.length === 0){\n        result.push(parens[i]);\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp6eugohc2.js:30:10)\n    at Object.<anonymous> (/tmp/tmp6eugohc2.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var result = [];\n  var current_group = \"\";\n  var paren_count = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z =\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpww3gy9f4.js:81\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var result = [];\n  var stack = [];\n  var paren_count = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmps3ysmfh3.js:93\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = false;\n  var current_paren_close = false;\n\n  for (var i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      current_paren_count++;\n      current_paren_open = true;\n    } else if (paren_string[i] === \")\") {\n      current_paren_count--;\n      current_paren_close = true;\n    } else if (paren_string[i] === \" \") {\n      continue;\n    }\n\n    if (current_paren_open && current_paren_close) {\n      current_string += paren_string[i];\n      continue;\n    }\n\n    if (current_paren_open) {\n      current_string += paren_string[i];\n      continue;\n    }\n\n    if (current_paren_close) {\n      if (current_paren_count === 0) {\n        result.push(current_string);\n        current_string = \"\";\n        current_paren_count = 0;\n        current_paren_open = false;\n        current_paren_close = false;\n      } else {\n        current_string += paren_string[i];\n      }\n      continue;\n    }\n\n    if (current_paren_count === 0) {\n      result.push(current_string);\n      current_string = \"\";\n      current_paren_count = 0;\n      current_paren_open = false;\n      current_paren_close = false;\n    } else {\n      current_string += paren_string[i];\n    }\n  }\n\n  if (current_string !== \"\") {\n    result.push(current_string);\n  }\n\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(()())((()))()((())()())'\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp06rv8la1.js:72:10)\n    at Object.<anonymous> (/tmp/tmp06rv8la1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '(()())((()))()((())()())' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var output = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_string = paren_string.replace(/\\s/g,'');\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      paren_stack.push(paren_open);\n      paren_open++;\n    }\n    else if(paren_string[i] === ')'){\n      paren_close++;\n      if(paren_stack.length === 0){\n        output.push(paren_string.substring(0,i));\n        break;\n      }\n      else{\n        paren_open = paren_stack.pop();\n      }\n    }\n  }\n  if(paren_stack.length > 0){\n    output.push(paren_string.substring(0,paren_string.length));\n  }\n  return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp02d51jp2.js:41:10)\n    at Object.<anonymous> (/tmp/tmp02d51jp2.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = false;\n  var current_paren_close = false;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  var current_paren_open_stack = [];\n  var current_paren_close_stack = [];\n  var current_paren_open_stack_count = 0;\n  var current_paren_close_stack_count = 0;\n  var current_paren_open_stack_index = 0;\n  var current_paren_close_stack_index = 0;\n  var current_paren_open_stack_index_count = 0;\n  var current_paren_close_stack_index_count = 0;\n  var current_paren_open_stack_index_index = 0;\n  var current_paren_close_stack_index_index = 0;\n  var current_paren_open_stack_index_index_count = 0;\n  var current_paren_close_stack_index_index_count = 0;\n  var current_paren_open_stack_index_index_index = 0;\n  var current_paren_close_stack_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_count = 0;\n  var current_paren_close_stack_index_index_index_count = 0;\n  var current_paren_open_stack_index_index_index_index = 0;\n  var current_paren_close_stack_index_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_index_count = 0;\n  var current_paren_close_stack_index_index_index_index_count = 0;\n  var current_paren_open_stack_index_index_index_index_index = 0;\n  var current_paren_close_stack_index_index_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_index_index_count = 0;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpsmihukpm.js:51\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_string = paren_string.replace(/\\s/g,'');\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      paren_open++;\n    }\n    if(paren_string[i] === ')'){\n      paren_close++;\n    }\n    if(paren_open === paren_close){\n      paren_stack.push(paren_string[i]);\n    }\n    if(paren_open === 0 && paren_close === 0){\n      paren_groups.push(paren_stack.join(''));\n      paren_stack = [];\n    }\n  }\n  return paren_groups;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpzorxyy53.js:37:10)\n    at Object.<anonymous> (/tmp/tmpzorxyy53.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_string = paren_string.split(\"\");\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      paren_open++;\n    }\n    if(paren_string[i] === \")\"){\n      paren_close++;\n    }\n    if(paren_open === paren_close){\n      paren_count++;\n    }\n    if(paren_count === 1){\n      paren_stack.push(paren_string[i]);\n    }\n    if(paren_count === 0){\n      if(paren_stack.length > 0){\n        paren_groups.push(paren_stack.join(\"\"));\n        paren_stack = [];\n      }\n    }\n  }\n  return paren_groups;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpnorvoeii.js:42:10)\n    at Object.<anonymous> (/tmp/tmpnorvoeii.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      paren_stack.push(paren_string[i]);\n    }\n    else if(paren_string[i] === \")\"){\n      if(paren_stack.length === 0){\n        result.push(current_string);\n        current_string = \"\";\n      }\n      else{\n        current_string += paren_stack.pop();\n      }\n    }\n    else{\n      current_string += paren_string[i];\n    }\n  }\n  if(paren_stack.length > 0){\n    result.push(current_string);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmprer3rrrd.js:39:10)\n    at Object.<anonymous> (/tmp/tmprer3rrrd.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split(\"\");\n  var paren_stack = [];\n  var result = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === \"(\"){\n      paren_stack.push(parens[i]);\n    } else if(parens[i] === \")\"){\n      if(paren_stack.length === 0){\n        result.push(parens.slice(i, parens.length));\n        break;\n      } else {\n        paren_stack.pop();\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmplwf60wjl.js:31:10)\n    at Object.<anonymous> (/tmp/tmplwf60wjl.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      paren_stack.push(paren_string[i]);\n    }\n    else if(paren_string[i] === ')'){\n      if(paren_stack.length === 0){\n        result.push(current_string);\n        current_string = \"\";\n      }\n      else{\n        current_string += paren_stack.pop();\n      }\n    }\n    else{\n      current_string += paren_string[i];\n    }\n  }\n  if(paren_stack.length > 0){\n    result.push(current_string);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpaogisxq0.js:39:10)\n    at Object.<anonymous> (/tmp/tmpaogisxq0.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var result = [];\n  var stack = [];\n  var parens = paren_string.split('');\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === '('){\n      stack.push(parens[i]);\n    }\n    else if(parens[i] === ')'){\n      if(stack.length === 0){\n        result.push('');\n      }\n      else{\n        result.push(stack.pop());\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '('\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmplshtzpiw.js:32:10)\n    at Object.<anonymous> (/tmp/tmplshtzpiw.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '(', '(', '(', '(',\n    '(', '(', '(', '(',\n    '(', '(', '(', '('\n  ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_string = paren_string.split(\"\");\n  for (var i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_open++;\n    } else if (paren_string[i] === \")\") {\n      paren_close++;\n    }\n    if (paren_open === paren_close) {\n      paren_stack.push(paren_count);\n      paren_count = 0;\n    }\n    paren_count++;\n  }\n  for (var i = 0; i < paren_stack.length; i++) {\n    var start = paren_stack[i];\n    var end = paren_stack[i + 1];\n    if (start === end) {\n      paren_groups.push(paren_string.slice(start, end + 1));\n    } else {\n      paren_groups.push(paren_string.slice(start, paren_stack[i]));\n      for (var j = i + 1; j < paren_stack.length; j++) {\n        paren_groups.push(paren_string.slice(paren_stack[j], paren_stack[j + 1]));\n      }\n    }\n  }\n  return paren_groups;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [],\n  [\n    '(',\n    ')',\n    '(',\n    ')',\n    ')'\n  ],\n  [],\n  [\n    '('\n  ],\n  [],\n  [\n    '(',\n    ')',\n    '(',\n    ')',\n    ')',\n    ' ',\n    '(',\n    '(',\n    '('\n  ],\n  [\n    ')',\n    ')',\n    ')',\n    ' ',\n    '(',\n    ')',\n    ' ',\n    '(',\n    '(',\n    '(',\n    ')',\n    ')',\n    '(',\n    ')',\n    '(',\n    ')',\n    ')'\n  ],\n  [],\n  [],\n  [\n    '('\n  ],\n  [],\n  [\n    '(',\n    ')',\n    '(',\n    ')',\n    ')',\n    ' ',\n    '(',\n    '(',\n    '('\n  ],\n  [\n    ')',\n    ')',\n    ')',\n    ' ',\n    '...\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpedmj_ewy.js:46:10)\n    at Object.<anonymous> (/tmp/tmpedmj_ewy.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [],\n    [ '(', ')', '(', ')', ')' ],\n    [],\n    [ '(' ],\n    [],\n    [\n      '(', ')', '(',\n      ')', ')', ' ',\n      '(', '(', '('\n    ],\n    [\n      ')', ')', ')', ' ', '(',\n      ')', ' ', '(', '(', '(',\n      ')', ')', '(', ')', '(',\n      ')', ')'\n    ],\n    [],\n    [],\n    [ '(' ],\n    [],\n    [\n      '(', ')', '(',\n      ')', ')', ' ',\n      '(', '(', '('\n    ],\n    [\n      ')', ')', ')', ' ', '(',\n      ')', ' ', '(', '(', '(',\n      ')', ')', '(', ')', '(',\n      ')', ')'\n    ],\n    [],\n    [ '(' ],\n    [],\n    [\n      '(', ')', '(',\n      ')', ')', ' ',\n      '(', '(', '('\n    ],\n    [\n      ')', ')', ')', ' ', '(',\n      ')', ' ', '(', '(', '(',\n      ')', ')', '(', ')', '(',\n      ')', ')'\n    ],\n    [],\n    [],\n    [\n      '(', ')', '(',\n  ",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_char = \"\";\n  var paren_char_count = 0;\n  var paren_char_index = 0;\n  var paren_char_stack = [];\n  var paren_char_stack_index = 0;\n  var paren_char_stack_count = 0;\n  var paren_char_stack_char = \"\";\n  var paren_char_stack_char_index = 0;\n  var paren_char_stack_char_count = 0;\n  var paren_char_stack_char_stack = [];\n  var paren_char_stack_char_stack_index = 0;\n  var paren_char_stack_char_stack_count = 0;\n  var paren_char_stack_char_stack_char = \"\";\n  var paren_char_stack_char_stack_char_index = 0;\n  var paren_char_stack_char_stack_char_count = 0;\n  var paren_char_stack_char_stack_char_stack = [];\n  var paren_char_stack_char_stack_char_stack_index = 0;\n  var paren_char_stack_char_stack_char_stack_count = 0;\n  var paren_char_stack_char_stack_char_stack_char = \"\";\n  var paren_char_stack_char_stack_char_stack_char_index = 0;\n  var paren_char_stack_char_stack_char_stack_char_count = 0;\n  var paren_char_stack_char_stack_char_stack_char_stack = [];\n  var paren_char_stack_char_stack_char_stack_char_stack_index = 0;\n  var paren_char_stack_char_stack_char_stack_char_stack_count = 0;\n  var paren_char_stack_char_stack_char_stack_char_stack_char = \"\";\n  var paren_char_stack_char_stack\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpoy0vz985.js:49\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var result = [];\n  var current_group = [];\n  var current_group_count = 0;\n  var current_group_open_braces = 0;\n  var current_group_close_braces = 0;\n  var current_group_open_parens = 0;\n  var current_group_close_parens = 0;\n  var current_index = 0;\n  var current_char = paren_string.charAt(current_index);\n  while(current_char !== \"\"){\n    if(current_char === \"(\"){\n      current_group_open_braces++;\n      current_group_open_parens++;\n    }\n    else if(current_char === \")\"){\n      current_group_close_braces++;\n      current_group_close_parens++;\n    }\n    else if(current_char === \" \"){\n      current_index++;\n      continue;\n    }\n    else if(current_char === \")\"){\n      current_group_close_braces++;\n      current_group_close_parens++;\n    }\n    else if(current_char === \"(\"){\n      current_group_open_braces++;\n      current_group_open_parens++;\n    }\n    else if(current_char === \")\"){\n      current_group_close_braces++;\n      current_group_close_parens++;\n    }\n    else if(current_group_open_braces === current_group_close_braces && current_group_open_parens === current_group_close_parens){\n      result.push(current_group.join(\"\"));\n      current_group = [];\n      current_group_count = 0;\n      current_group_open_braces = 0;\n      current_group_close_braces = 0;\n      current_group_open_parens = 0;\n      current_group_close_parens = 0;\n      current_index++;\n      current_char = paren_string.charAt(current_index);\n    }\n    else{\n      current_group.push(current_char);\n      current_group_count++;\n      current_index\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpppi_9f74.js:68\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    var result = [];\n    var stack = [];\n    var current_string = \"\";\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] == '('){\n            stack.push(paren_string[i]);\n        }\n        else if(paren_string[i] == ')'){\n            if(stack.length == 0){\n                result.push(current_string);\n                current_string = \"\";\n            }\n            else{\n                current_string += paren_string[i];\n                stack.pop();\n            }\n        }\n        else{\n            current_string += paren_string[i];\n        }\n    }\n    if(stack.length > 0){\n        result.push(current_string);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmplwo3lxi4.js:40:10)\n    at Object.<anonymous> (/tmp/tmplwo3lxi4.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var result = [];\n  var stack = [];\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_string = paren_string.replace(/\\s/g,'');\n  var paren_string_length = paren_string.length;\n  var paren_string_index = 0;\n  var paren_string_char = '';\n  var paren_string_char_index = 0;\n  var paren_string_char_count = 0;\n  var paren_string_char_count_index = 0;\n  var paren_string_char_count_count = 0;\n  var paren_string_char_count_count_index = 0;\n  var paren_string_char_count_count_count = 0;\n  var paren_string_char_count_count_count_index = 0;\n  var paren_string_char_count_count_count_count = 0;\n  var paren_string_char_count_count_count_count_index = 0;\n  var paren_string_char_count_count_count_count_count = 0;\n  var paren_string_char_count_count_count_count_count_index = 0;\n  var paren_string_char_count_count_count_count_count_count = 0;\n  var paren_string_char_count_count_count_count_count_count_index = 0;\n  var paren_string_char_count_count_count_count_count_count_count = 0;\n  var paren_string_char_count_count_count_count_count_count_count_index = 0;\n  var paren_string_char_count_count_count_count_count_count_count_count = 0;\n  var paren_string_char_count_count_count_count_count_count_count_count_index = 0;\n  var paren_string_char_count_count_count_count_count_count_count_count_count = 0;\n  var paren_string_char_count_count_count_count_count_count_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpoakt305n.js:46\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      paren_stack.push(i);\n    }\n    else if(paren_string[i] === ')'){\n      if(paren_stack.length === 0){\n        result.push(current_string);\n        current_string = \"\";\n      }\n      else{\n        var start_index = paren_stack.pop();\n        current_string += paren_string.substring(start_index, i + 1);\n      }\n    }\n    else{\n      current_string += paren_string[i];\n    }\n  }\n  if(paren_stack.length > 0){\n    result.push(current_string);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp9n7f8aqt.js:40:10)\n    at Object.<anonymous> (/tmp/tmp9n7f8aqt.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split(\"\");\n  var result = [];\n  var stack = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === \"(\" || parens[i] === \"{\"){\n      stack.push(parens[i]);\n    }\n    else if(parens[i] === \")\" || parens[i] === \"}\"){\n      if(stack.length === 0){\n        result.push(parens[i]);\n      }\n      else{\n        stack.pop();\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp4mov8bdr.js:32:10)\n    at Object.<anonymous> (/tmp/tmp4mov8bdr.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var result = [];\n  var stack = [];\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_open = false;\n  var paren_close = false;\n  var paren_open_count = 0;\n  var paren_close_count = 0;\n  var paren_open_index = 0;\n  var paren_close_index = 0;\n  var paren_open_stack = [];\n  var paren_close_stack = [];\n  var paren_open_stack_index = 0;\n  var paren_close_stack_index = 0;\n  var paren_open_stack_count = 0;\n  var paren_close_stack_count = 0;\n  var paren_open_stack_index = 0;\n  var paren_close_stack_index = 0;\n  var paren_open_stack_index = 0;\n  var paren_close_stack_index = 0;\n  var paren_open_stack_count = 0;\n  var paren_close_stack_count = 0;\n  var paren_open_stack_index = 0;\n  var paren_close_stack_index = 0;\n  var paren_open_stack_count = 0;\n  var paren_close_stack_count = 0;\n  var paren_open_stack_index = 0;\n  var paren_close_stack_index = 0;\n  var paren_open_stack_count = 0;\n  var paren_close_stack_count = 0;\n  var paren_open_stack_index = 0;\n  var paren_close_stack_index = 0;\n  var paren_open_stack_count = 0;\n  var paren_close_stack_count = 0;\n  var paren_open_stack_index = 0;\n  var paren_close_stack_index = 0;\n  var paren_open_stack_count = 0;\n  var paren_close_stack_count = 0;\n  var paren_open_stack_index = 0;\n  var paren_close_stack_index = 0\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpal8evdp8.js:59\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_open = false;\n  var paren_close = false;\n  var paren_string = paren_string.split(\"\");\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      paren_stack.push(paren_string[i]);\n      paren_count++;\n      paren_open = true;\n    }\n    else if(paren_string[i] === \")\"){\n      if(paren_open){\n        paren_stack.pop();\n        paren_count--;\n        paren_close = true;\n      }\n      else{\n        console.log(\"Error: Unbalanced parenthesis\");\n        return;\n      }\n    }\n    else if(paren_open){\n      if(paren_stack.length === 0){\n        result.push(paren_string.slice(paren_index, i));\n        paren_index = i;\n        paren_open = false;\n        paren_close = false;\n      }\n      else{\n        paren_stack.push(paren_string[i]);\n      }\n    }\n  }\n  if(paren_open){\n    console.log(\"Error: Unbalanced parenthesis\");\n    return;\n  }\n  else{\n    result.push(paren_string.slice(paren_index, paren_string.length));\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "Error: Unbalanced parenthesis\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpla2c1o6o.js:59:10)\n    at Object.<anonymous> (/tmp/tmpla2c1o6o.js:65:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var paren_count = 0;\n  var result = [];\n  var current_string = \"\";\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] == \"(\"){\n      paren_count++;\n      if(paren_stack.length > 0){\n        current_string += paren_string[i];\n      }\n      paren_stack.push(paren_count);\n    }\n    else if(paren_string[i] == \")\"){\n      paren_count--;\n      if(paren_stack.length > 0){\n        current_string += paren_string[i];\n      }\n      if(paren_count == 0){\n        result.push(current_string);\n        current_string = \"\";\n      }\n    }\n    else if(paren_string[i] == \" \"){\n      if(paren_stack.length > 0){\n        current_string += paren_string[i];\n      }\n    }\n  }\n  if(paren_stack.length > 0){\n    result.push(current_string);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '()())',\n  ' ((()))',\n  ' ()',\n  ' ((())()())',\n  ''\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmplmjmaxyx.js:47:10)\n    at Object.<anonymous> (/tmp/tmplmjmaxyx.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '()())', ' ((()))', ' ()', ' ((())()())', '' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = false;\n  var current_paren_close = false;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  var current_paren_open_stack = [];\n  var current_paren_close_stack = [];\n  var current_paren_open_stack_count = 0;\n  var current_paren_close_stack_count = 0;\n  var current_paren_open_stack_index = 0;\n  var current_paren_close_stack_index = 0;\n  var current_paren_open_stack_index_count = 0;\n  var current_paren_close_stack_index_count = 0;\n  var current_paren_open_stack_index_index = 0;\n  var current_paren_close_stack_index_index = 0;\n  var current_paren_open_stack_index_index_count = 0;\n  var current_paren_close_stack_index_index_count = 0;\n  var current_paren_open_stack_index_index_index = 0;\n  var current_paren_close_stack_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_count = 0;\n  var current_paren_close_stack_index_index_index_count = 0;\n  var current_paren_open_stack_index_index_index_index = 0;\n  var current_paren_close_stack_index_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_index_count = 0;\n  var current_paren_close_stack_index_index_index_index_count = 0;\n  var current_paren_open_stack_index_index_index_index_index = 0;\n  var current_paren_close_stack_index_index_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_index_index_count = 0;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpsmihukpm.js:51\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    var paren_stack = [];\n    var result = [];\n    var paren_count = 0;\n    var paren_index = 0;\n    var paren_char = \"\";\n    var paren_open = false;\n    var paren_close = false;\n    var paren_count_stack = [];\n    var paren_index_stack = [];\n    var paren_char_stack = [];\n    var paren_open_stack = [];\n    var paren_close_stack = [];\n    var paren_count_stack_index = 0;\n    var paren_index_stack_index = 0;\n    var paren_char_stack_index = 0;\n    var paren_open_stack_index = 0;\n    var paren_close_stack_index = 0;\n    var paren_count_stack_index = 0;\n    var paren_index_stack_index = 0;\n    var paren_char_stack_index = 0;\n    var paren_open_stack_index = 0;\n    var paren_close_stack_index = 0;\n    var paren_count_stack_index = 0;\n    var paren_index_stack_index = 0;\n    var paren_char_stack_index = 0;\n    var paren_open_stack_index = 0;\n    var paren_close_stack_index = 0;\n    var paren_count_stack_index = 0;\n    var paren_index_stack_index = 0;\n    var paren_char_stack_index = 0;\n    var paren_open_stack_index = 0;\n    var paren_close_stack_index = 0;\n    var paren_count_stack_index = 0;\n    var paren_index_stack_index = 0;\n    var paren_char_stack_index = 0;\n    var paren_open_stack_index = 0;\n    var paren_close_stack_index = 0;\n    var paren_count_stack_index = 0;\n    var paren_index_stack_index = 0;\n    var paren_char_stack_index = 0;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpmq4dpvqe.js:60\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      paren_stack.push(i);\n    }\n    else if(paren_string[i] === ')'){\n      if(paren_stack.length === 0){\n        result.push(current_string);\n        current_string = \"\";\n      }\n      else{\n        var start = paren_stack.pop();\n        var end = i;\n        current_string += paren_string.substring(start + 1, end);\n      }\n    }\n    else{\n      current_string += paren_string[i];\n    }\n  }\n  if(paren_stack.length > 0){\n    result.push(current_string);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpgot1d9sn.js:41:10)\n    at Object.<anonymous> (/tmp/tmpgot1d9sn.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split(\"\");\n  var result = [];\n  var stack = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === \"(\"){\n      stack.push(parens[i]);\n    }\n    else if(parens[i] === \")\"){\n      if(stack.length === 0){\n        result.push(parens.slice(0, i + 1));\n        break;\n      }\n      else{\n        stack.pop();\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp828f574b.js:33:10)\n    at Object.<anonymous> (/tmp/tmp828f574b.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = false;\n  var current_paren_close = false;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  var current_paren_open_stack = [];\n  var current_paren_close_stack = [];\n  var current_paren_open_stack_count = 0;\n  var current_paren_close_stack_count = 0;\n\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      current_paren_open_count++;\n      current_paren_open_stack.push(current_paren_open_count);\n      current_paren_open = true;\n    }\n    else if(paren_string[i] === \")\"){\n      current_paren_close_count++;\n      current_paren_close_stack.push(current_paren_close_count);\n      current_paren_close = true;\n    }\n    else if(paren_string[i] === \" \"){\n      if(current_paren_open){\n        current_paren_open_count++;\n        current_paren_open_stack.push(current_paren_open_count);\n        current_paren_open = false;\n      }\n      else if(current_paren_close){\n        current_paren_close_count++;\n        current_paren_close_stack.push(current_paren_close_count);\n        current_paren_close = false;\n      }\n    }\n    else if(current_paren_open){\n      current_paren_open_count++;\n      current_paren_open_stack.push(current_paren_open_count);\n      current_paren_open = false;\n    }\n    else if(current_paren_close){\n      current_paren_close_count++;\n      current_paren_close_stack.push(current_paren_close_count);\n      current_paren_close = false;\n    }\n    else{\n      \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpqyg7nnoy.js:67\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_char = \"\";\n  var paren_open = false;\n  var paren_close = false;\n\n  for(var i = 0; i < paren_string.length; i++){\n    paren_char = paren_string[i];\n    if(paren_char === \"(\"){\n      paren_open = true;\n      paren_close = false;\n    }\n    else if(paren_char === \")\"){\n      paren_open = false;\n      paren_close = true;\n    }\n    else if(paren_open){\n      paren_stack.push(paren_char);\n    }\n    else if(paren_close){\n      if(paren_stack.length === 0){\n        paren_groups.push(paren_string.substring(paren_index, i));\n        paren_index = i + 1;\n      }\n      else{\n        paren_stack.pop();\n      }\n    }\n  }\n  if(paren_stack.length > 0){\n    paren_groups.push(paren_string.substring(paren_index, paren_string.length));\n  }\n  return paren_groups;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(()())',\n  '((()))',\n  '()'\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmprwifiuqb.js:50:10)\n    at Object.<anonymous> (/tmp/tmprwifiuqb.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '(()())', '((()))', '()' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split('');\n  var result = [];\n  var stack = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === '('){\n      stack.push(parens[i]);\n    }\n    else if(parens[i] === ')'){\n      if(stack.length === 0){\n        result.push('');\n      }\n      else{\n        stack.pop();\n        result.push(stack.join(''));\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(',\n  '(',\n  '',\n  '((',\n  '(',\n  '',\n  '',\n  '((',\n  '(',\n  '(',\n  '(',\n  ''\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpoc5brzky.js:33:10)\n    at Object.<anonymous> (/tmp/tmpoc5brzky.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '(', '(', '',  '((',\n    '(', '',  '',  '((',\n    '(', '(', '(', ''\n  ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_char = \"\";\n  var paren_open = false;\n  var paren_close = false;\n  var paren_group = \"\";\n  var paren_group_open = false;\n  var paren_group_close = false;\n  var paren_group_count = 0;\n  var paren_group_index = 0;\n  var paren_group_char = \"\";\n  var paren_group_open_count = 0;\n  var paren_group_close_count = 0;\n  var paren_group_open_index = 0;\n  var paren_group_close_index = 0;\n  var paren_group_open_char = \"\";\n  var paren_group_close_char = \"\";\n  var paren_group_open_count_index = 0;\n  var paren_group_close_count_index = 0;\n  var paren_group_open_count_char = \"\";\n  var paren_group_close_count_char = \"\";\n  var paren_group_open_count_index = 0;\n  var paren_group_close_count_index = 0;\n  var paren_group_open_count_char = \"\";\n  var paren_group_close_count_char = \"\";\n  var paren_group_open_count_index = 0;\n  var paren_group_close_count_index = 0;\n  var paren_group_open_count_char = \"\";\n  var paren_group_close_count_char = \"\";\n  var paren_group_open_count_index = 0;\n  var paren_group_close_count_index = 0;\n  var paren_group_open_count_char = \"\";\n  var paren_group_close_count_char = \"\";\n  var paren_group_open_count_index = 0;\n  var paren_group_close_count_index = 0;\n  var\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpb3c2uj2z.js:46\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split(\"\");\n  var result = [];\n  var current_group = [];\n  var current_group_count = 0;\n  var current_group_open_braces = 0;\n  var current_group_close_braces = 0;\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === \"(\"){\n      current_group_open_braces++;\n    }\n    if(parens[i] === \")\"){\n      current_group_close_braces++;\n    }\n    if(parens[i] === \"(\" && current_group_close_braces === 0){\n      current_group_count++;\n    }\n    if(parens[i] === \")\" && current_group_open_braces === 0){\n      current_group_count--;\n    }\n    if(current_group_count === 0 && current_group_open_braces === 0){\n      result.push(current_group.join(\"\"));\n      current_group = [];\n    }\n    current_group.push(parens[i]);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpnj1p56ml.js:41:10)\n    at Object.<anonymous> (/tmp/tmpnj1p56ml.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_string = paren_string.split(\"\");\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      paren_open++;\n    }\n    else if(paren_string[i] === \")\"){\n      paren_close++;\n    }\n    else if(paren_string[i] === \" \"){\n      continue;\n    }\n    else{\n      if(paren_open === paren_close){\n        paren_groups.push(paren_string.slice(0, i));\n        paren_string = paren_string.slice(i);\n        paren_open = 0;\n        paren_close = 0;\n        i = 0;\n      }\n      else{\n        paren_stack.push(paren_string[i]);\n      }\n    }\n  }\n  if(paren_open !== paren_close){\n    paren_groups.push(paren_string);\n  }\n  else{\n    while(paren_stack.length > 0){\n      paren_groups.push(paren_stack.pop());\n    }\n  }\n  return paren_groups;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpja44_q79.js:53:10)\n    at Object.<anonymous> (/tmp/tmpja44_q79.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_open_count = 0;\n  var paren_close_count = 0;\n  var paren_open_stack = [];\n  var paren_close_stack = [];\n  var paren_open_stack_count = 0;\n  var paren_close_stack_count = 0;\n  var paren_open_stack_index = 0;\n  var paren_close_stack_index = 0;\n  var paren_open_stack_index_count = 0;\n  var paren_close_stack_index_count = 0;\n  var paren_open_stack_index_index = 0;\n  var paren_close_stack_index_index = 0;\n  var paren_open_stack_index_index_count = 0;\n  var paren_close_stack_index_index_count = 0;\n  var paren_open_stack_index_index_index = 0;\n  var paren_close_stack_index_index_index = 0;\n  var paren_open_stack_index_index_index_count = 0;\n  var paren_close_stack_index_index_index_count = 0;\n  var paren_open_stack_index_index_index_index = 0;\n  var paren_close_stack_index_index_index_index = 0;\n  var paren_open_stack_index_index_index_index_count = 0;\n  var paren_close_stack_index_index_index_index_count = 0;\n  var paren_open_stack_index_index_index_index_index = 0;\n  var paren_close_stack_index_index_index_index_index = 0;\n  var paren_open_stack_index_index_index_index_index_count = 0;\n  var paren_close_stack_index_index_index_index_index_count = 0;\n  var paren_open_stack_index\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpvdm4wm6q.js:51\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split(\"\");\n  var stack = [];\n  var result = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === \"(\" || parens[i] === \")\"){\n      if(stack.length === 0){\n        result.push(parens[i]);\n      }\n      else{\n        stack.pop();\n        result.push(parens[i]);\n      }\n    }\n    else{\n      stack.push(parens[i]);\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(',\n  '(',\n  ')',\n  '(',\n  ')',\n  ')',\n  '(',\n  '(',\n  '(',\n  ')',\n  ')',\n  ')',\n  '(',\n  ')',\n  '(',\n  '(',\n  '(',\n  ')',\n  ')',\n  '(',\n  ')',\n  '(',\n  ')',\n  ')'\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp1zw6554j.js:33:10)\n    at Object.<anonymous> (/tmp/tmp1zw6554j.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '(', '(', ')', '(', ')',\n    ')', '(', '(', '(', ')',\n    ')', ')', '(', ')', '(',\n    '(', '(', ')', ')', '(',\n    ')', '(', ')', ')'\n  ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split('');\n  var result = [];\n  var current_group = [];\n  for (var i = 0; i < parens.length; i++) {\n    if (parens[i] === '(') {\n      current_group.push(parens[i]);\n    } else if (parens[i] === ')') {\n      if (current_group.length === 0) {\n        result.push(current_group.join(''));\n        current_group = [];\n      } else {\n        current_group.push(parens[i]);\n      }\n    }\n  }\n  if (current_group.length > 0) {\n    result.push(current_group.join(''));\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(()())((()))()((())()())'\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp96og21vt.js:34:10)\n    at Object.<anonymous> (/tmp/tmp96og21vt.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '(()())((()))()((())()())' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var result = [];\n  var stack = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_open_count = 0;\n  var paren_close_count = 0;\n  var paren_open_stack = [];\n  var paren_close_stack = [];\n  var paren_open_stack_count = 0;\n  var paren_close_stack_count = 0;\n  var paren_open_stack_index = 0;\n  var paren_close_stack_index = 0;\n  var paren_open_stack_index_count = 0;\n  var paren_close_stack_index_count = 0;\n  var paren_open_stack_index_count_max = 0;\n  var paren_close_stack_index_count_max = 0;\n  var paren_open_stack_index_count_min = 0;\n  var paren_close_stack_index_count_min = 0;\n  var paren_open_stack_index_count_min_max = 0;\n  var paren_close_stack_index_count_min_max = 0;\n  var paren_open_stack_index_count_min_min = 0;\n  var paren_close_stack_index_count_min_min = 0;\n  var paren_open_stack_index_count_min_max_min = 0;\n  var paren_close_stack_index_count_min_max_min = 0;\n  var paren_open_stack_index_count_min_max_max = 0;\n  var paren_close_stack_index_count_min_max_max = 0;\n  var paren_open_stack_index_count_min_max_min_max = 0;\n  var paren_close_stack_index_count_min_max_min_max = 0;\n  var paren_open_stack_index_count_min_max_min_min_max = 0;\n  var paren_close_stack_index_count_min_max_min_min_max\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpjwy3tmed.js:50\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = false;\n  var current_paren_close = false;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  var current_paren_open_stack = [];\n  var current_paren_close_stack = [];\n  var current_paren_open_stack_count = 0;\n  var current_paren_close_stack_count = 0;\n  var current_paren_open_stack_index = 0;\n  var current_paren_close_stack_index = 0;\n  var current_paren_open_stack_index_count = 0;\n  var current_paren_close_stack_index_count = 0;\n  var current_paren_open_stack_index_index = 0;\n  var current_paren_close_stack_index_index = 0;\n  var current_paren_open_stack_index_index_count = 0;\n  var current_paren_close_stack_index_index_count = 0;\n  var current_paren_open_stack_index_index_index = 0;\n  var current_paren_close_stack_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_count = 0;\n  var current_paren_close_stack_index_index_index_count = 0;\n  var current_paren_open_stack_index_index_index_index = 0;\n  var current_paren_close_stack_index_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_index_count = 0;\n  var current_paren_close_stack_index_index_index_index_count = 0;\n  var current_paren_open_stack_index_index_index_index_index = 0;\n  var current_paren_close_stack_index_index_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_index_index_count = 0;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpsmihukpm.js:51\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split(\"\");\n  var result = [];\n  var stack = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === \"(\"){\n      stack.push(parens[i]);\n    }else if(parens[i] === \")\"){\n      if(stack.length === 0){\n        result.push(parens.slice(i, parens.length));\n        break;\n      }else{\n        stack.pop();\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpgrpf60u7.js:31:10)\n    at Object.<anonymous> (/tmp/tmpgrpf60u7.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_length = paren_string.length;\n  var paren_char = paren_string[0];\n  var paren_open = false;\n  var paren_close = false;\n  var paren_stack_length = 0;\n  var paren_stack_index = 0;\n  var paren_stack_char = '';\n  var paren_stack_open = false;\n  var paren_stack_close = false;\n  var paren_stack_stack_length = 0;\n  var paren_stack_stack_index = 0;\n  var paren_stack_stack_char = '';\n  var paren_stack_stack_open = false;\n  var paren_stack_stack_close = false;\n  var paren_stack_stack_stack_length = 0;\n  var paren_stack_stack_stack_index = 0;\n  var paren_stack_stack_stack_char = '';\n  var paren_stack_stack_stack_open = false;\n  var paren_stack_stack_stack_close = false;\n  var paren_stack_stack_stack_stack_length = 0;\n  var paren_stack_stack_stack_stack_index = 0;\n  var paren_stack_stack_stack_stack_char = '';\n  var paren_stack_stack_stack_stack_open = false;\n  var paren_stack_stack_stack_stack_close = false;\n  var paren_stack_stack_stack_stack_stack_length = 0;\n  var paren_stack_stack_stack_stack_stack_index = 0;\n  var paren_stack_stack_stack_stack_stack_char = '';\n  var paren_stack_stack_stack_stack_stack_open = false;\n  var paren_stack_stack_stack_stack_stack_close = false;\n  var paren_stack_stack_stack_stack_stack_stack_length = 0;\n  var paren_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpanind58m.js:54\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  for (var i = 0; i < paren_string.length; i++){\n    if (paren_string[i] === \"(\"){\n      paren_stack.push(paren_string[i]);\n    }\n    else if (paren_string[i] === \")\"){\n      if (paren_stack.length === 0){\n        result.push(current_string);\n        current_string = \"\";\n      }\n      else {\n        current_string += paren_string[i];\n        paren_stack.pop();\n      }\n    }\n    else {\n      current_string += paren_string[i];\n    }\n  }\n  if (paren_stack.length > 0){\n    result.push(current_string);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpq1h17zv1.js:40:10)\n    at Object.<anonymous> (/tmp/tmpq1h17zv1.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var result = [];\n  var stack = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_open_count = 0;\n  var paren_close_count = 0;\n  var paren_open_stack = [];\n  var paren_close_stack = [];\n  var paren_open_stack_count = 0;\n  var paren_close_stack_count = 0;\n  var paren_open_stack_index = 0;\n  var paren_close_stack_index = 0;\n  var paren_open_stack_index_count = 0;\n  var paren_close_stack_index_count = 0;\n  var paren_open_stack_index_count_max = 0;\n  var paren_close_stack_index_count_max = 0;\n  var paren_open_stack_index_count_min = 0;\n  var paren_close_stack_index_count_min = 0;\n  var paren_open_stack_index_count_min_max = 0;\n  var paren_close_stack_index_count_min_max = 0;\n  var paren_open_stack_index_count_min_min = 0;\n  var paren_close_stack_index_count_min_min = 0;\n  var paren_open_stack_index_count_max_max = 0;\n  var paren_close_stack_index_count_max_max = 0;\n  var paren_open_stack_index_count_min_max_max = 0;\n  var paren_close_stack_index_count_min_max_max = 0;\n  var paren_open_stack_index_count_min_min_max = 0;\n  var paren_close_stack_index_count_min_min_max = 0;\n  var paren_open_stack_index_count_max_min_max = 0;\n  var paren_close_stack_index_count_max_min_max = 0;\n  var paren_open_stack_index_count\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmplnlmw_0a.js:51\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split('');\n  var result = [];\n  var current_group = [];\n  var current_group_count = 0;\n  var current_group_open = false;\n  var current_group_close = false;\n  for (var i = 0; i < parens.length; i++) {\n    if (parens[i] === '(') {\n      current_group_open = true;\n      current_group_count++;\n    } else if (parens[i] === ')') {\n      current_group_close = true;\n      current_group_count--;\n    } else if (parens[i] === ' ') {\n      continue;\n    } else if (current_group_open && current_group_close) {\n      current_group.push(parens[i]);\n    } else if (current_group_open) {\n      current_group.push(parens[i]);\n    } else if (current_group_close) {\n      current_group.push(parens[i]);\n      result.push(current_group.join(''));\n      current_group = [];\n      current_group_count = 0;\n      current_group_open = false;\n      current_group_close = false;\n    } else {\n      current_group.push(parens[i]);\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpzydvtv64.js:46:10)\n    at Object.<anonymous> (/tmp/tmpzydvtv64.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = 0;\n  var current_paren_close = 0;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  var current_paren_open_stack = [];\n  var current_paren_close_stack = [];\n  var current_paren_open_stack_count = 0;\n  var current_paren_close_stack_count = 0;\n  var current_paren_open_stack_index = 0;\n  var current_paren_close_stack_index = 0;\n  var current_paren_open_stack_index_count = 0;\n  var current_paren_close_stack_index_count = 0;\n  var current_paren_open_stack_index_index = 0;\n  var current_paren_close_stack_index_index = 0;\n  var current_paren_open_stack_index_index_count = 0;\n  var current_paren_close_stack_index_index_count = 0;\n  var current_paren_open_stack_index_index_index = 0;\n  var current_paren_close_stack_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_count = 0;\n  var current_paren_close_stack_index_index_index_count = 0;\n  var current_paren_open_stack_index_index_index_index = 0;\n  var current_paren_close_stack_index_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_index_count = 0;\n  var current_paren_close_stack_index_index_index_index_count = 0;\n  var current_paren_open_stack_index_index_index_index_index = 0;\n  var current_paren_close_stack_index_index_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_index_index_count = 0;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpjc1bp3oi.js:51\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split(\"\");\n  var stack = [];\n  var result = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === \"(\" || parens[i] === \"{\"){\n      stack.push(parens[i]);\n    }else if(parens[i] === \")\" || parens[i] === \"}\"){\n      if(stack.length === 0){\n        result.push(parens[i]);\n      }else{\n        stack.pop();\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpnamaizw4.js:30:10)\n    at Object.<anonymous> (/tmp/tmpnamaizw4.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = false;\n  var current_paren_close = false;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  var current_paren_open_stack = [];\n  var current_paren_close_stack = [];\n  var current_paren_open_stack_count = 0;\n  var current_paren_close_stack_count = 0;\n\n  for (var i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      current_paren_open_count++;\n      current_paren_open = true;\n      current_paren_open_stack.push(current_paren_open_count);\n    } else if (paren_string[i] === \")\") {\n      current_paren_close_count++;\n      current_paren_close = true;\n      current_paren_close_stack.push(current_paren_close_count);\n    } else if (paren_string[i] === \" \") {\n      // do nothing\n    } else {\n      if (current_paren_open) {\n        current_paren_open_stack_count++;\n        current_paren_open_stack.push(current_paren_open_stack_count);\n      } else if (current_paren_close) {\n        current_paren_close_stack_count++;\n        current_paren_close_stack.push(current_paren_close_stack_count);\n      }\n      current_string += paren_string[i];\n    }\n  }\n\n  // close the open parens\n  while (current_paren_open_stack.length > 0) {\n    current_paren_open_stack_count = current_paren_open_stack.pop();\n    current_paren_open_count = current_paren_open_stack_count - 1;\n    current_paren_open = current_paren_open_count > 0;\n    if (current_paren_open) {\n      current_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpic09c086.js:62\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = false;\n  var current_paren_close = false;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  var current_paren_open_stack = [];\n  var current_paren_close_stack = [];\n  var current_paren_open_stack_count = 0;\n  var current_paren_close_stack_count = 0;\n  var current_paren_open_stack_index = 0;\n  var current_paren_close_stack_index = 0;\n  var current_paren_open_stack_index_count = 0;\n  var current_paren_close_stack_index_count = 0;\n  var current_paren_open_stack_index_index = 0;\n  var current_paren_close_stack_index_index = 0;\n  var current_paren_open_stack_index_index_count = 0;\n  var current_paren_close_stack_index_index_count = 0;\n  var current_paren_open_stack_index_index_index = 0;\n  var current_paren_close_stack_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_count = 0;\n  var current_paren_close_stack_index_index_index_count = 0;\n  var current_paren_open_stack_index_index_index_index = 0;\n  var current_paren_close_stack_index_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_index_count = 0;\n  var current_paren_close_stack_index_index_index_index_count = 0;\n  var current_paren_open_stack_index_index_index_index_index = 0;\n  var current_paren_close_stack_index_index_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_index_index_count = 0;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpsmihukpm.js:51\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split('');\n  var result = [];\n  var stack = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === '('){\n      stack.push(parens[i]);\n    }\n    else if(parens[i] === ')'){\n      if(stack.length === 0){\n        result.push('');\n      }\n      else{\n        stack.pop();\n        result.push(stack.join(''));\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(',\n  '(',\n  '',\n  '((',\n  '(',\n  '',\n  '',\n  '((',\n  '(',\n  '(',\n  '(',\n  ''\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpoc5brzky.js:33:10)\n    at Object.<anonymous> (/tmp/tmpoc5brzky.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '(', '(', '',  '((',\n    '(', '',  '',  '((',\n    '(', '(', '(', ''\n  ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      paren_stack.push(paren_string[i]);\n    }\n    else if(paren_string[i] === ')'){\n      if(paren_stack.length === 0){\n        result.push(current_string);\n        current_string = \"\";\n      }\n      else{\n        current_string += paren_stack.pop();\n      }\n    }\n    else{\n      current_string += paren_string[i];\n    }\n  }\n  if(paren_stack.length > 0){\n    result.push(current_string);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpaogisxq0.js:39:10)\n    at Object.<anonymous> (/tmp/tmpaogisxq0.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_string = paren_string.replace(/\\s/g,'');\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      paren_open++;\n      paren_stack.push(paren_open);\n    }\n    else if(paren_string[i] === ')'){\n      paren_close++;\n      if(paren_stack.length === 0){\n        paren_groups.push(paren_string.substring(0,i));\n        break;\n      }\n      else{\n        if(paren_stack[paren_stack.length - 1] === paren_open){\n          paren_stack.pop();\n          paren_groups.push(paren_string.substring(0,i));\n          break;\n        }\n        else{\n          paren_stack.push(paren_open);\n        }\n      }\n    }\n  }\n  return paren_groups;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(('\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp7cs6lzfx.js:45:10)\n    at Object.<anonymous> (/tmp/tmp7cs6lzfx.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '((' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    var paren_stack = [];\n    var result = [];\n    var current_string = \"\";\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n            paren_stack.push(paren_string[i]);\n        }\n        else if(paren_string[i] === ')'){\n            if(paren_stack.length === 0){\n                result.push(current_string);\n                current_string = \"\";\n            }\n            else{\n                current_string += paren_stack.pop();\n            }\n        }\n        else{\n            current_string += paren_string[i];\n        }\n    }\n    if(paren_stack.length !== 0){\n        result.push(current_string);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp7ocubatd.js:39:10)\n    at Object.<anonymous> (/tmp/tmp7ocubatd.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    var paren_stack = [];\n    var result = [];\n    var current_string = \"\";\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n            paren_stack.push(paren_string[i]);\n        }\n        else if(paren_string[i] === ')'){\n            if(paren_stack.length === 0){\n                result.push(current_string);\n                current_string = \"\";\n            }\n            else{\n                current_string += paren_stack.pop();\n            }\n        }\n        else{\n            current_string += paren_string[i];\n        }\n    }\n    if(current_string !== \"\"){\n        result.push(current_string);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '((( ((( ( ((((('\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpewog54xw.js:39:10)\n    at Object.<anonymous> (/tmp/tmpewog54xw.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '((( ((( ( (((((' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split('');\n  var result = [];\n  var stack = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === '('){\n      stack.push(parens[i]);\n    }\n    else if(parens[i] === ')'){\n      if(stack.length === 0){\n        result.push('');\n      }\n      else{\n        stack.pop();\n      }\n    }\n    else{\n      result.push(stack.join(''));\n      stack.push(parens[i]);\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  ' ',\n  '  '\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpcn5ke8yo.js:36:10)\n    at Object.<anonymous> (/tmp/tmpcn5ke8yo.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '', ' ', '  ' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_string = paren_string.replace(/\\s/g,'');\n  var paren_string_length = paren_string.length;\n  for(var i = 0; i < paren_string_length; i++){\n    if(paren_string[i] === '('){\n      paren_open++;\n    }\n    else if(paren_string[i] === ')'){\n      paren_close++;\n    }\n    else if(paren_string[i] === '(' && paren_open > 0){\n      paren_stack.push(paren_open);\n      paren_open = 0;\n    }\n    else if(paren_string[i] === ')' && paren_close > 0){\n      paren_open = paren_stack.pop();\n      paren_close = 0;\n    }\n  }\n  if(paren_open > 0){\n    paren_stack.push(paren_open);\n  }\n  while(paren_stack.length > 0){\n    paren_open = paren_stack.pop();\n    paren_groups.push(paren_string.substring(0,paren_open));\n    paren_string = paren_string.substring(paren_open);\n  }\n  paren_groups.push(paren_string);\n  return paren_groups;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(()())((()))',\n  '()((())()())'\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpnqaed7rq.js:48:10)\n    at Object.<anonymous> (/tmp/tmpnqaed7rq.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '(()())((()))', '()((())()())' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_char = \"\";\n  var paren_open = false;\n  var paren_close = false;\n  var paren_count_stack = [];\n  var paren_count_stack_index = 0;\n  var paren_count_stack_length = 0;\n  var paren_count_stack_length_index = 0;\n  var paren_count_stack_length_length = 0;\n  var paren_count_stack_length_length_index = 0;\n  var paren_count_stack_length_length_length = 0;\n  var paren_count_stack_length_length_length_index = 0;\n  var paren_count_stack_length_length_length_length = 0;\n  var paren_count_stack_length_length_length_length_index = 0;\n  var paren_count_stack_length_length_length_length_length = 0;\n  var paren_count_stack_length_length_length_length_length_index = 0;\n  var paren_count_stack_length_length_length_length_length_length = 0;\n  var paren_count_stack_length_length_length_length_length_length_index = 0;\n  var paren_count_stack_length_length_length_length_length_length_length = 0;\n  var paren_count_stack_length_length_length_length_length_length_length_index = 0;\n  var paren_count_stack_length_length_length_length_length_length_length_length = 0;\n  var paren_count_stack_length_length_length_length_length_length_length_length_index = 0;\n  var paren_count_stack_length_length_length_length_length_length_length_length_length = 0;\n  var paren_count_stack_length_length_length_length_length_length_length_length_length_index = 0;\n  var paren_count_stack\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmpq8lfxrzg.js:47\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = false;\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\" && !current_paren_open){\n      current_paren_count++;\n      current_paren_open = true;\n    }\n    if(paren_string[i] === \")\" && current_paren_open){\n      current_paren_count--;\n      current_paren_open = false;\n    }\n    if(current_paren_open && current_paren_count === 0){\n      result.push(current_string);\n      current_string = \"\";\n    }\n    current_string += paren_string[i];\n  }\n  result.push(current_string);\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(()()) ((())) () ((())()())'\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpa5m4bnvj.js:37:10)\n    at Object.<anonymous> (/tmp/tmpa5m4bnvj.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '(()()) ((())) () ((())()())' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var result = [];\n  var current_string = \"\";\n  var open_parens = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z =\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmpfb6c6lj3.js:81\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_char = \"\";\n  var paren_open = false;\n  var paren_close = false;\n  var paren_open_count = 0;\n  var paren_close_count = 0;\n  var paren_open_index = 0;\n  var paren_close_index = 0;\n  var paren_open_stack = [];\n  var paren_close_stack = [];\n  var paren_open_stack_index = 0;\n  var paren_close_stack_index = 0;\n  var paren_open_stack_count = 0;\n  var paren_close_stack_count = 0;\n  var paren_open_stack_index = 0;\n  var paren_close_stack_index = 0;\n  var paren_open_stack_count = 0;\n  var paren_close_stack_count = 0;\n  var paren_open_stack_index = 0;\n  var paren_close_stack_index = 0;\n  var paren_open_stack_count = 0;\n  var paren_close_stack_count = 0;\n  var paren_open_stack_index = 0;\n  var paren_close_stack_index = 0;\n  var paren_open_stack_count = 0;\n  var paren_close_stack_count = 0;\n  var paren_open_stack_index = 0;\n  var paren_close_stack_index = 0;\n  var paren_open_stack_count = 0;\n  var paren_close_stack_count = 0;\n  var paren_open_stack_index = 0;\n  var paren_close_stack_index = 0;\n  var paren_open_stack_count = 0;\n  var paren_close_stack_count = 0;\n  var paren_open_stack_index = 0;\n  var paren_close_stack_index = 0;\n  var paren_open_stack_count = 0;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmpeq0hnhk3.js:59\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split('');\n  var result = [];\n  var stack = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === '('){\n      stack.push(parens[i]);\n    }\n    else if(parens[i] === ')'){\n      if(stack.length === 0){\n        result.push('');\n      }\n      else{\n        stack.pop();\n        result.push(stack.join(''));\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(',\n  '(',\n  '',\n  '((',\n  '(',\n  '',\n  '',\n  '((',\n  '(',\n  '(',\n  '(',\n  ''\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpoc5brzky.js:33:10)\n    at Object.<anonymous> (/tmp/tmpoc5brzky.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '(', '(', '',  '((',\n    '(', '',  '',  '((',\n    '(', '(', '(', ''\n  ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_string = paren_string.replace(/\\s/g,'');\n  for(var i=0; i<paren_string.length; i++){\n    if(paren_string[i] === '('){\n      paren_open++;\n    }\n    if(paren_string[i] === ')'){\n      paren_close++;\n    }\n    if(paren_open === paren_close){\n      paren_stack.push(paren_string[i]);\n    }\n    if(paren_open > paren_close){\n      paren_count++;\n    }\n    if(paren_count === paren_open){\n      paren_groups.push(paren_stack.join(''));\n      paren_stack = [];\n      paren_count = 0;\n      paren_open = 0;\n      paren_close = 0;\n    }\n  }\n  return paren_groups;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  ''\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp47455b4i.js:43:10)\n    at Object.<anonymous> (/tmp/tmp47455b4i.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', ''\n  ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    var paren_groups = [];\n    var current_group = [];\n    var current_group_length = 0;\n    var current_group_index = 0;\n    var current_group_open_braces = 0;\n    var current_group_close_braces = 0;\n    var current_index = 0;\n    var current_char = \"\";\n    var current_char_index = 0;\n    var current_char_is_open_brace = false;\n    var current_char_is_close_brace = false;\n    var current_char_is_space = false;\n    var current_char_is_paren = false;\n    var current_char_is_paren_open = false;\n    var current_char_is_paren_close = false;\n    var current_char_is_paren_open_close = false;\n    var current_char_is_paren_close_open = false;\n    var current_char_is_paren_open_close_open = false;\n    var current_char_is_paren_open_close_close = false;\n    var current_char_is_paren_close_open_close = false;\n    var current_char_is_paren_open_close_open_close = false;\n    var current_char_is_paren_close_open_close_close = false;\n    var current_char_is_paren_open_close_open_close_close = false;\n    var current_char_is_paren_close_open_close_close = false;\n    var current_char_is_paren_open_close_open_close_close = false;\n    var current_char_is_paren_close_open_close_close = false;\n    var current_char_is_paren_open_close_open_close_close = false;\n    var current_char_is_paren_close_open_close_close = false;\n    var current_char_is_paren_open_close_open_close_close = false;\n    var current_char_is_paren_close_open_close_close = false;\n    var current_char_is_paren_open_close_open_close_close = false\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmpjrm4qlj3.js:50\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var current_group = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_char = \"\";\n  var paren_open = false;\n  var paren_close = false;\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_char = \"\";\n  var paren_open = false;\n  var paren_close = false;\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_char = \"\";\n  var paren_open = false;\n  var paren_close = false;\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_char = \"\";\n  var paren_open = false;\n  var paren_close = false;\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_char = \"\";\n  var paren_open = false;\n  var paren_close = false;\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_char = \"\";\n  var paren_open = false;\n  var paren_close = false;\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_char = \"\";\n  var paren_open = false;\n  var paren_close = false;\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_char = \"\";\n  var paren_open = false;\n  var paren_close = false;\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_char = \"\";\n  var paren_open = false;\n  var paren_close = false;\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_char = \"\";\n  var paren_open\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmpxvxrzvr1.js:71\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var current_group = [];\n  var current_group_count = 0;\n  var current_group_open_braces = 0;\n  var current_group_close_braces = 0;\n  var current_group_open_parens = 0;\n  var current_group_close_parens = 0;\n\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      current_group_open_parens++;\n    }\n    else if(paren_string[i] === ')'){\n      current_group_close_parens++;\n    }\n    else if(paren_string[i] === '{'){\n      current_group_open_braces++;\n    }\n    else if(paren_string[i] === '}'){\n      current_group_close_braces++;\n    }\n    else if(paren_string[i] === ' '){\n      // do nothing\n    }\n    else{\n      current_group.push(paren_string[i]);\n    }\n\n    if(current_group_open_parens === current_group_close_parens && current_group_open_braces === current_group_close_braces){\n      if(current_group_open_parens > 0){\n        current_group_open_parens--;\n      }\n      else if(current_group_open_braces > 0){\n        current_group_open_braces--;\n      }\n      else{\n        current_group_close_braces--;\n      }\n      current_group_count++;\n      if(current_group_count === 1){\n        paren_groups.push(current_group);\n        current_group = [];\n      }\n      else{\n        current_group = [];\n      }\n    }\n  }\n  return paren_groups;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  []\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp4nz4x5u1.js:64:10)\n    at Object.<anonymous> (/tmp/tmp4nz4x5u1.js:70:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [] ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var paren_count = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z =\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpbdpr3htd.js:81\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var paren_count = 0;\n  var output = [];\n  var current_string = \"\";\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      paren_stack.push(paren_count);\n      paren_count++;\n    }\n    else if(paren_string[i] === ')'){\n      paren_count--;\n      if(paren_count === -1){\n        output.push(current_string);\n        current_string = \"\";\n      }\n      else if(paren_count === 0){\n        current_string += paren_string[i];\n      }\n      else{\n        current_string += paren_string[i];\n      }\n    }\n    else if(paren_string[i] === ' '){\n      if(current_string !== \"\"){\n        output.push(current_string);\n        current_string = \"\";\n      }\n    }\n    else{\n      current_string += paren_string[i];\n    }\n  }\n  if(current_string !== \"\"){\n    output.push(current_string);\n  }\n  return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ')))',\n  ')))',\n  ')',\n  ')))))'\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpcrcig1ls.js:51:10)\n    at Object.<anonymous> (/tmp/tmpcrcig1ls.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ')))', ')))', ')', ')))))' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_string = paren_string.replace(/\\s/g,'');\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      paren_open++;\n    }\n    if(paren_string[i] === ')'){\n      paren_close++;\n    }\n    if(paren_open === paren_close){\n      paren_stack.push(paren_string[i]);\n    }\n    if(paren_open === 0 && paren_close === 0){\n      paren_groups.push(paren_stack.join(''));\n      paren_stack = [];\n    }\n  }\n  return paren_groups;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpzorxyy53.js:37:10)\n    at Object.<anonymous> (/tmp/tmpzorxyy53.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_group = [];\n  var current_group_string = \"\";\n  var current_group_index = 0;\n  var current_group_open_braces = 0;\n  var current_group_close_braces = 0;\n  var current_index = 0;\n  var current_char = \"\";\n  var current_char_index = 0;\n  var current_char_is_open_brace = false;\n  var current_char_is_close_brace = false;\n  var current_char_is_paren = false;\n  var current_char_is_space = false;\n  var current_char_is_quote = false;\n  var current_char_is_quote_escape = false;\n  var current_char_is_backslash = false;\n  var current_char_is_backslash_escape = false;\n  var current_char_is_escaped = false;\n  var current_char_is_escaped_escape = false;\n  var current_char_is_escaped_quote = false;\n  var current_char_is_escaped_backslash = false;\n  var current_char_is_escaped_escaped = false;\n  var current_char_is_escaped_escaped_escape = false;\n  var current_char_is_escaped_escaped_quote = false;\n  var current_char_is_escaped_escaped_backslash = false;\n  var current_char_is_escaped_escaped_escaped = false;\n  var current_char_is_escaped_escaped_escaped_escape = false;\n  var current_char_is_escaped_escaped_escaped_quote = false;\n  var current_char_is_escaped_escaped_escaped_backslash = false;\n  var current_char_is_escaped_escaped_escaped_escaped = false;\n  var current_char_is_escaped_escaped_escaped_escaped_escape = false;\n  var current_char_is_escaped_escaped_escaped_esc\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmpgsmfud5m.js:52\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var result = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_string = paren_string.replace(/\\s/g,'');\n  var paren_string_length = paren_string.length;\n  for(var i = 0; i < paren_string_length; i++){\n    if(paren_string[i] === '('){\n      paren_stack.push(paren_count);\n      paren_count++;\n      paren_open++;\n    }\n    else if(paren_string[i] === ')'){\n      paren_count--;\n      paren_close++;\n    }\n    else if(paren_string[i] === '(' && paren_open > 0 && paren_close === 0){\n      paren_count++;\n      paren_open--;\n    }\n    else if(paren_string[i] === ')' && paren_open === 0 && paren_close > 0){\n      paren_count--;\n      paren_close--;\n    }\n    if(paren_open === 0 && paren_close === 0){\n      result.push(paren_string.substring(i,paren_stack.pop()+1));\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpezj2dv63.js:45:10)\n    at Object.<anonymous> (/tmp/tmpezj2dv63.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = 0;\n  var current_paren_close = 0;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  var current_paren_open_count_stack = [];\n  var current_paren_close_count_stack = [];\n  var current_paren_open_count_stack_index = 0;\n  var current_paren_close_count_stack_index = 0;\n  var current_paren_open_count_stack_stack = [];\n  var current_paren_close_count_stack_stack = [];\n  var current_paren_open_count_stack_stack_index = 0;\n  var current_paren_close_count_stack_stack_index = 0;\n  var current_paren_open_count_stack_stack_stack = [];\n  var current_paren_close_count_stack_stack_stack = [];\n  var current_paren_open_count_stack_stack_stack_index = 0;\n  var current_paren_close_count_stack_stack_stack_index = 0;\n  var current_paren_open_count_stack_stack_stack_stack = [];\n  var current_paren_close_count_stack_stack_stack_stack = [];\n  var current_paren_open_count_stack_stack_stack_stack_index = 0;\n  var current_paren_close_count_stack_stack_stack_stack_index = 0;\n  var current_paren_open_count_stack_stack_stack_stack_stack = [];\n  var current_paren_close_count_stack_stack_stack_stack_stack = [];\n  var current_paren_open_count_stack_stack_stack_stack_stack_index = 0;\n  var current_paren_close_count_stack_stack_stack_stack_stack_index = 0;\n  var current_paren_open_count_stack_stack_stack_stack_stack = [];\n  var current_paren_close_count_stack_stack_stack_stack\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmpaoxf0wnl.js:49\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_string = paren_string.replace(/\\s/g,'');\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      paren_stack.push(paren_count);\n      paren_count++;\n    }\n    else if(paren_string[i] === ')'){\n      paren_count--;\n      if(paren_count < 0){\n        console.log(\"Error: unbalanced parentheses\");\n        return;\n      }\n      if(paren_stack.length > 0){\n        paren_stack.pop();\n      }\n    }\n  }\n  if(paren_stack.length > 0){\n    console.log(\"Error: unbalanced parentheses\");\n    return;\n  }\n  var result = [];\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      result.push('');\n    }\n    else if(paren_string[i] === ')'){\n      result.push('');\n    }\n    else{\n      result[result.length - 1] += paren_string[i];\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  ''\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpon4_vhpv.js:51:10)\n    at Object.<anonymous> (/tmp/tmpon4_vhpv.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', ''\n  ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = false;\n  for (var i = 0; i < paren_string.length; i++){\n    if (paren_string[i] === \"(\"){\n      current_paren_count++;\n      current_paren_open = true;\n    }\n    else if (paren_string[i] === \")\"){\n      current_paren_count--;\n      if (current_paren_count === 0){\n        current_string += \")\";\n        if (current_paren_open){\n          current_string += \"(\";\n          current_paren_open = false;\n        }\n        result.push(current_string);\n        current_string = \"\";\n      }\n      else {\n        current_string += \")\";\n      }\n    }\n    else {\n      current_string += paren_string[i];\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ')))(',\n  ' )))(',\n  ' )(',\n  ' )))))('\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpbv604bzd.js:45:10)\n    at Object.<anonymous> (/tmp/tmpbv604bzd.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ')))(', ' )))(', ' )(', ' )))))(' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = false;\n  var current_paren_close = false;\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      current_paren_count++;\n      current_paren_open = true;\n    }\n    else if(paren_string[i] === \")\"){\n      current_paren_count--;\n      current_paren_close = true;\n    }\n    else if(current_paren_open && current_paren_close){\n      current_string += paren_string[i];\n    }\n    else if(current_paren_open){\n      current_string += paren_string[i];\n    }\n    else if(current_paren_close){\n      current_string += paren_string[i];\n    }\n    else{\n      current_string += paren_string[i];\n    }\n  }\n  if(current_paren_count === 0){\n    result.push(current_string);\n  }\n  else{\n    result = [];\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '   '\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp9ose8srr.js:50:10)\n    at Object.<anonymous> (/tmp/tmp9ose8srr.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '   ' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = 0;\n  var current_paren_close = 0;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  var current_paren_open_stack = [];\n  var current_paren_close_stack = [];\n  var current_paren_open_stack_count = 0;\n  var current_paren_close_stack_count = 0;\n  var current_paren_open_stack_index = 0;\n  var current_paren_close_stack_index = 0;\n  var current_paren_open_stack_index_count = 0;\n  var current_paren_close_stack_index_count = 0;\n  var current_paren_open_stack_index_index = 0;\n  var current_paren_close_stack_index_index = 0;\n  var current_paren_open_stack_index_index_count = 0;\n  var current_paren_close_stack_index_index_count = 0;\n  var current_paren_open_stack_index_index_index = 0;\n  var current_paren_close_stack_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_count = 0;\n  var current_paren_close_stack_index_index_index_count = 0;\n  var current_paren_open_stack_index_index_index_index = 0;\n  var current_paren_close_stack_index_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_index_count = 0;\n  var current_paren_close_stack_index_index_index_index_count = 0;\n  var current_paren_open_stack_index_index_index_index_index = 0;\n  var current_paren_close_stack_index_index_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_index_index_count = 0;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpjc1bp3oi.js:51\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var result = [];\n  var current_string = \"\";\n  var open_braces = 0;\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      open_braces++;\n    }\n    else if(paren_string[i] === \")\"){\n      open_braces--;\n    }\n    else if(paren_string[i] === \" \"){\n      if(open_braces === 0){\n        result.push(current_string);\n        current_string = \"\";\n      }\n      else{\n        current_string += paren_string[i];\n      }\n    }\n    else{\n      current_string += paren_string[i];\n    }\n  }\n  if(current_string !== \"\"){\n    result.push(current_string);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  '',\n  ''\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpfdhmwsgp.js:42:10)\n    at Object.<anonymous> (/tmp/tmpfdhmwsgp.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '', '', '' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = false;\n  var current_paren_close = false;\n\n  for (var i = 0; i < paren_string.length; i++){\n    if (paren_string[i] === \"(\"){\n      current_paren_count++;\n      current_paren_open = true;\n    }\n    else if (paren_string[i] === \")\"){\n      current_paren_count--;\n      current_paren_close = true;\n    }\n    else if (current_paren_open && current_paren_close){\n      current_string += paren_string[i];\n    }\n    else if (current_paren_open){\n      current_string += paren_string[i];\n    }\n    else if (current_paren_close){\n      current_string += paren_string[i];\n    }\n    else{\n      current_string += paren_string[i];\n    }\n\n    if (current_paren_count === 0){\n      result.push(current_string);\n      current_string = \"\";\n      current_paren_count = 0;\n      current_paren_open = false;\n      current_paren_close = false;\n    }\n  }\n\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  ' ',\n  '',\n  ' ',\n  '',\n  ' ',\n  ''\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp107aszfb.js:54:10)\n    at Object.<anonymous> (/tmp/tmp107aszfb.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '', ' ', '', ' ',\n    '', ' ', ''\n  ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_index = 0;\n  var current_depth = 0;\n  var current_depth_limit = 0;\n  var current_depth_limit_increment = 0;\n  var current_depth_limit_increment_limit = 0;\n  var current_depth_limit_increment_limit_increment = 0;\n  var current_depth_limit_increment_limit_increment_limit = 0;\n  var current_depth_limit_increment_limit_increment_limit_increment = 0;\n  var current_depth_limit_increment_limit_increment_limit_increment_limit = 0;\n  var current_depth_limit_increment_limit_increment_limit_increment_limit_increment = 0;\n  var current_depth_limit_increment_limit_increment_limit_increment_limit_increment_limit = 0;\n  var current_depth_limit_increment_limit_increment_limit_increment_limit_increment_limit_increment = 0;\n  var current_depth_limit_increment_limit_increment_limit_increment_limit_increment_limit_increment_limit = 0;\n  var current_depth_limit_increment_limit_increment_limit_increment_limit_increment_limit_increment_limit_increment = 0;\n  var current_depth_limit_increment_limit_increment_limit_increment_limit_increment_limit_increment_limit_increment_limit = 0;\n  var current_depth_limit_increment_limit_increment_limit_increment_limit_increment_limit_increment_limit_increment_limit_increment = 0;\n  var current_depth_limit_increment_limit_increment_limit_increment_limit_increment_limit_increment_limit_increment_limit_increment_limit = 0;\n  var current_depth_limit_increment_limit_increment_limit_increment_limit_increment_limit_increment_limit_increment_limit_incre\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmp6ko8f8jp.js:40\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = 0;\n  var current_paren_close = 0;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  var current_paren_open_stack = [];\n  var current_paren_close_stack = [];\n  var current_paren_open_stack_count = 0;\n  var current_paren_close_stack_count = 0;\n  var current_paren_open_stack_index = 0;\n  var current_paren_close_stack_index = 0;\n  var current_paren_open_stack_index_count = 0;\n  var current_paren_close_stack_index_count = 0;\n  var current_paren_open_stack_index_index = 0;\n  var current_paren_close_stack_index_index = 0;\n  var current_paren_open_stack_index_index_count = 0;\n  var current_paren_close_stack_index_index_count = 0;\n  var current_paren_open_stack_index_index_index = 0;\n  var current_paren_close_stack_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_count = 0;\n  var current_paren_close_stack_index_index_index_count = 0;\n  var current_paren_open_stack_index_index_index_index = 0;\n  var current_paren_close_stack_index_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_index_count = 0;\n  var current_paren_close_stack_index_index_index_index_count = 0;\n  var current_paren_open_stack_index_index_index_index_index = 0;\n  var current_paren_close_stack_index_index_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_index_index_count = 0;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpjc1bp3oi.js:51\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var result = [];\n  var stack = [];\n  var current_string = \"\";\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] == '('){\n      stack.push(paren_string[i]);\n    }\n    else if(paren_string[i] == ')'){\n      if(stack.length == 0){\n        result.push(current_string);\n        current_string = \"\";\n      }\n      else{\n        stack.pop();\n        current_string += paren_string[i];\n      }\n    }\n    else{\n      current_string += paren_string[i];\n    }\n  }\n  if(stack.length > 0){\n    result.push(current_string);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpdz44s0tw.js:40:10)\n    at Object.<anonymous> (/tmp/tmpdz44s0tw.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_string = paren_string.replace(/\\s/g,'');\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      paren_stack.push(paren_count);\n      paren_count++;\n      paren_open++;\n    }\n    else if(paren_string[i] === ')'){\n      paren_count--;\n      paren_close++;\n      if(paren_stack.length > 0){\n        paren_count = paren_stack.pop();\n      }\n    }\n  }\n  if(paren_open !== paren_close){\n    throw new Error(\"Mismatched parentheses\");\n  }\n  for(var i = 0; i < paren_count; i++){\n    result.push(paren_string.substring(0,i));\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpligqc6vb.js:42:10)\n    at Object.<anonymous> (/tmp/tmpligqc6vb.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_char = \"\";\n  var paren_open = false;\n  var paren_close = false;\n  var paren_count_stack = [];\n  var paren_count_stack_index = 0;\n  var paren_count_stack_length = 0;\n  var paren_count_stack_length_index = 0;\n  var paren_count_stack_length_length = 0;\n  var paren_count_stack_length_length_index = 0;\n  var paren_count_stack_length_length_length = 0;\n  var paren_count_stack_length_length_length_index = 0;\n  var paren_count_stack_length_length_length_length = 0;\n  var paren_count_stack_length_length_length_length_index = 0;\n  var paren_count_stack_length_length_length_length_length = 0;\n  var paren_count_stack_length_length_length_length_length_index = 0;\n  var paren_count_stack_length_length_length_length_length_length = 0;\n  var paren_count_stack_length_length_length_length_length_length_index = 0;\n  var paren_count_stack_length_length_length_length_length_length_length = 0;\n  var paren_count_stack_length_length_length_length_length_length_length_index = 0;\n  var paren_count_stack_length_length_length_length_length_length_length_length = 0;\n  var paren_count_stack_length_length_length_length_length_length_length_length_index = 0;\n  var paren_count_stack_length_length_length_length_length_length_length_length_length = 0;\n  var paren_count_stack_length_length_length_length_length_length_length_length_length_index = 0;\n  var paren_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmpdi6knnx2.js:47\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split(\"\");\n  var stack = [];\n  var result = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === \"(\" || parens[i] === \")\"){\n      stack.push(parens[i]);\n    }else if(stack.length === 0){\n      result.push(parens[i]);\n    }else{\n      stack.pop();\n      result.push(parens[i]);\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' ',\n  ' ',\n  ' '\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpqez6w1y8.js:29:10)\n    at Object.<anonymous> (/tmp/tmpqez6w1y8.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ', ' ', ' ' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_string = paren_string.replace(/\\s/g,'');\n  var paren_string_length = paren_string.length;\n  for(var i=0; i<paren_string_length; i++){\n    if(paren_string[i] === '('){\n      paren_open++;\n    }\n    else if(paren_string[i] === ')'){\n      paren_close++;\n    }\n    else if(paren_string[i] === '(' && paren_open === paren_close){\n      paren_stack.push(paren_count);\n      paren_count = 0;\n      paren_open = 0;\n      paren_close = 0;\n    }\n    else{\n      paren_count++;\n    }\n  }\n  if(paren_open !== paren_close){\n    console.log('Error: parentheses do not match');\n    return;\n  }\n  for(var i=0; i<paren_stack.length; i++){\n    var start = paren_stack[i];\n    var end = paren_stack[i+1];\n    paren_groups.push(paren_string.substring(start,end));\n  }\n  return paren_groups;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpc3ikj_wh.js:49:10)\n    at Object.<anonymous> (/tmp/tmpc3ikj_wh.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_index = 0;\n  var open_parens = 0;\n  var open_braces = 0;\n  var open_brackets = 0;\n  var open_squares = 0;\n  var open_curly = 0;\n  var open_parens_stack = [];\n  var open_braces_stack = [];\n  var open_brackets_stack = [];\n  var open_squares_stack = [];\n  var open_curly_stack = [];\n\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      open_parens++;\n      open_parens_stack.push(open_parens);\n    }\n    else if(paren_string[i] === \")\"){\n      open_parens--;\n      if(open_parens === 0){\n        open_parens_stack.pop();\n      }\n    }\n    else if(paren_string[i] === \"[\"){\n      open_brackets++;\n      open_brackets_stack.push(open_brackets);\n    }\n    else if(paren_string[i] === \"]\"){\n      open_brackets--;\n      if(open_brackets === 0){\n        open_brackets_stack.pop();\n      }\n    }\n    else if(paren_string[i] === \"{\"){\n      open_curly++;\n      open_curly_stack.push(open_curly);\n    }\n    else if(paren_string[i] === \"}\"){\n      open_curly--;\n      if(open_curly === 0){\n        open_curly_stack.pop();\n      }\n    }\n    else if(paren_string[i] === \" \"){\n      // do nothing\n    }\n    else{\n      current_string += paren_string[i];\n    }\n  }\n\n  // check if we have balanced parentheses\n  if(open_parens !== 0){\n    return [];\n  }\n\n  \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmpuk58yi3r.js:79\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_char = \"\";\n  var paren_open = false;\n  var paren_close = false;\n  var paren_count_stack = [];\n  var paren_count_stack_index = 0;\n  var paren_count_stack_top = 0;\n  var paren_count_stack_top_index = 0;\n  var paren_count_stack_top_top = 0;\n  var paren_count_stack_top_top_index = 0;\n  var paren_count_stack_top_top_top = 0;\n  var paren_count_stack_top_top_top_index = 0;\n  var paren_count_stack_top_top_top_top = 0;\n  var paren_count_stack_top_top_top_top_index = 0;\n  var paren_count_stack_top_top_top_top_top = 0;\n  var paren_count_stack_top_top_top_top_top_index = 0;\n  var paren_count_stack_top_top_top_top_top_top = 0;\n  var paren_count_stack_top_top_top_top_top_top_index = 0;\n  var paren_count_stack_top_top_top_top_top_top_top = 0;\n  var paren_count_stack_top_top_top_top_top_top_top_index = 0;\n  var paren_count_stack_top_top_top_top_top_top_top_top = 0;\n  var paren_count_stack_top_top_top_top_top_top_top_top_index = 0;\n  var paren_count_stack_top_top_top_top_top_top_top_top_top = 0;\n  var paren_count_stack_top_top_top_top_top_top_top_top_top_index = 0;\n  var paren_count_stack\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmp8_slwcut.js:47\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var current_group = \"\";\n  var current_index = 0;\n  var paren_count = 0;\n  var open_parens = 0;\n  var open_braces = 0;\n  var close_braces = 0;\n  var close_parens = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var aa = 0;\n  var ab = 0;\n  var ac = 0;\n  var ad = 0;\n  var ae = 0;\n  var af = 0;\n  var ag = 0;\n  var ah = 0;\n  var ai = 0;\n  var aj = 0;\n  var ak = 0;\n  var al = 0;\n  var am = 0;\n  var an = 0;\n  var ao = 0;\n  var ap = 0;\n  var aq = 0;\n  var\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmpj37xa2py.js:78\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = false;\n  var current_paren_close = false;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  var current_paren_open_stack = [];\n  var current_paren_close_stack = [];\n  var current_paren_open_stack_count = 0;\n  var current_paren_close_stack_count = 0;\n\n  for (var i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      current_paren_open_count++;\n      current_paren_open_stack.push(current_paren_open_count);\n      current_paren_open = true;\n    } else if (paren_string[i] === \")\") {\n      current_paren_close_count++;\n      current_paren_close_stack.push(current_paren_close_count);\n      current_paren_close = true;\n    } else if (paren_string[i] === \" \") {\n      if (current_paren_open) {\n        current_paren_open_stack_count++;\n        current_paren_open_stack.push(current_paren_open_stack_count);\n      } else if (current_paren_close) {\n        current_paren_close_stack_count++;\n        current_paren_close_stack.push(current_paren_close_stack_count);\n      }\n    } else if (paren_string[i] === \")\") {\n      if (current_paren_open) {\n        current_paren_open_stack_count--;\n        current_paren_open_stack.pop();\n      } else if (current_paren_close) {\n        current_paren_close_stack_count--;\n        current_paren_close_stack.pop();\n      }\n    } else if (paren_string[i] === \"(\") {\n      if (current_paren_open) {\n        current_paren_open_stack_count\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmp5ti2zudq.js:60\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var result = [];\n  var stack = [];\n  var parens = paren_string.split('');\n  for (var i = 0; i < parens.length; i++) {\n    if (parens[i] === '(') {\n      stack.push(parens[i]);\n    } else if (parens[i] === ')') {\n      if (stack.length === 0) {\n        result.push('');\n      } else {\n        result.push(stack.pop());\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '('\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpgnig9af0.js:30:10)\n    at Object.<anonymous> (/tmp/tmpgnig9af0.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '(', '(', '(', '(',\n    '(', '(', '(', '(',\n    '(', '(', '(', '('\n  ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    var result = [];\n    var stack = [];\n    var paren_count = 0;\n    var paren_open = 0;\n    var paren_close = 0;\n    var paren_string = paren_string.split(\"\");\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === \"(\"){\n            paren_count++;\n            paren_open++;\n        }\n        else if(paren_string[i] === \")\"){\n            paren_count--;\n            paren_close++;\n        }\n        else if(paren_string[i] === \" \"){\n            continue;\n        }\n        else{\n            if(paren_count === 0 && paren_open === 0 && paren_close === 0){\n                result.push(paren_string.slice(i, paren_string.length));\n                break;\n            }\n            else if(paren_count === 0 && paren_open === 0 && paren_close > 0){\n                result.push(paren_string.slice(i, paren_string.length));\n                break;\n            }\n            else if(paren_count === 0 && paren_open > 0 && paren_close === 0){\n                result.push(paren_string.slice(i, paren_string.length));\n                break;\n            }\n            else if(paren_count === 0 && paren_open > 0 && paren_close > 0){\n                result.push(paren_string.slice(i, paren_string.length));\n                break;\n            }\n            else if(paren_count > 0 && paren_open === 0 && paren_close === 0){\n                result.push(paren_string.slice(i, paren_string.length));\n                break;\n            }\n            else if(paren_count > 0 && paren_open === 0 && paren_close > 0){\n                result.push(paren_string.slice(i, paren_string.length));\n                break;\n            }\n            else if(paren_count > 0 && paren_open > 0 && paren_close === 0){\n                result.push\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmpjv4ncwau.js:64\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    var paren_stack = [];\n    var result = [];\n    var paren_count = 0;\n    var paren_open = false;\n    var paren_close = false;\n    var paren_string = paren_string.split(\"\");\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === \"(\"){\n            paren_stack.push(paren_string[i]);\n            paren_count++;\n            paren_open = true;\n        }\n        else if(paren_string[i] === \")\"){\n            paren_stack.pop();\n            paren_count--;\n            paren_close = true;\n        }\n        else if(paren_open && paren_close){\n            result.push(paren_stack.join(\"\"));\n            paren_stack = [];\n            paren_count = 0;\n            paren_open = false;\n            paren_close = false;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  '',\n  ''\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp6lumraxx.js:41:10)\n    at Object.<anonymous> (/tmp/tmp6lumraxx.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '', '', '' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = false;\n  var current_paren_close = false;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  var current_paren_open_stack = [];\n  var current_paren_close_stack = [];\n  var current_paren_open_stack_count = 0;\n  var current_paren_close_stack_count = 0;\n  var current_paren_open_stack_index = 0;\n  var current_paren_close_stack_index = 0;\n  var current_paren_open_stack_index_count = 0;\n  var current_paren_close_stack_index_count = 0;\n  var current_paren_open_stack_index_index = 0;\n  var current_paren_close_stack_index_index = 0;\n  var current_paren_open_stack_index_index_count = 0;\n  var current_paren_close_stack_index_index_count = 0;\n  var current_paren_open_stack_index_index_index = 0;\n  var current_paren_close_stack_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_count = 0;\n  var current_paren_close_stack_index_index_index_count = 0;\n  var current_paren_open_stack_index_index_index_index = 0;\n  var current_paren_close_stack_index_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_index_count = 0;\n  var current_paren_close_stack_index_index_index_index_count = 0;\n  var current_paren_open_stack_index_index_index_index_index = 0;\n  var current_paren_close_stack_index_index_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_index_index_count = 0;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpsmihukpm.js:51\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = 0;\n  var current_paren_close = 0;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  var current_paren_open_count_stack = [];\n  var current_paren_close_count_stack = [];\n  var current_paren_open_stack = [];\n  var current_paren_close_stack = [];\n  var current_paren_open_stack_count = 0;\n  var current_paren_close_stack_count = 0;\n  var current_paren_open_stack_count_stack = [];\n  var current_paren_close_stack_count_stack = [];\n  var current_paren_open_stack_stack = [];\n  var current_paren_close_stack_stack = [];\n  var current_paren_open_stack_stack_count = 0;\n  var current_paren_close_stack_stack_count = 0;\n  var current_paren_open_stack_stack_stack = [];\n  var current_paren_close_stack_stack_stack = [];\n  var current_paren_open_stack_stack_stack_count = 0;\n  var current_paren_close_stack_stack_stack_count = 0;\n  var current_paren_open_stack_stack_stack_stack = [];\n  var current_paren_close_stack_stack_stack_stack = [];\n  var current_paren_open_stack_stack_stack_stack_count = 0;\n  var current_paren_close_stack_stack_stack_stack_count = 0;\n  var current_paren_open_stack_stack_stack_stack_stack = [];\n  var current_paren_close_stack_stack_stack_stack_stack = [];\n  var current_paren_open_stack_stack_stack_stack_stack_count = 0;\n  var current_paren_close_stack_stack_stack_stack_stack_count = 0;\n  var current_paren_open_stack_stack_stack_stack_stack_stack\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmp9mtjlejj.js:52\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = false;\n  var current_paren_close = false;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      current_paren_open_count++;\n      current_paren_open = true;\n    }\n    else if(paren_string[i] === \")\"){\n      current_paren_close_count++;\n      current_paren_close = true;\n    }\n    else if(current_paren_open && current_paren_close){\n      current_paren_close_count--;\n      current_paren_close = false;\n    }\n    else if(current_paren_open){\n      current_paren_open_count--;\n      current_paren_open = false;\n    }\n    else if(current_paren_close){\n      current_paren_close_count--;\n      current_paren_close = false;\n    }\n    else{\n      if(current_paren_open){\n        current_paren_open_count--;\n        current_paren_open = false;\n      }\n      if(current_paren_close){\n        current_paren_close_count--;\n        current_paren_close = false;\n      }\n    }\n\n    if(current_paren_open_count === 0 && current_paren_close_count === 0){\n      if(current_string !== \"\"){\n        result.push(current_string);\n        current_string = \"\";\n      }\n      current_string += paren_string[i];\n    }\n    else{\n      current_string += paren_string[i];\n    }\n  }\n\n  if(current_string !== \"\"){\n    result.push(current_string);\n  }\n\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(()()) ((())) () ((())()())'\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp5j33j1fx.js:73:10)\n    at Object.<anonymous> (/tmp/tmp5j33j1fx.js:79:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '(()()) ((())) () ((())()())' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_open_count = 0;\n  var paren_close_count = 0;\n  var paren_open_stack = [];\n  var paren_close_stack = [];\n  var paren_open_stack_count = 0;\n  var paren_close_stack_count = 0;\n  var paren_open_stack_index = 0;\n  var paren_close_stack_index = 0;\n  var paren_open_stack_index_count = 0;\n  var paren_close_stack_index_count = 0;\n  var paren_open_stack_index_index = 0;\n  var paren_close_stack_index_index = 0;\n  var paren_open_stack_index_index_count = 0;\n  var paren_close_stack_index_index_count = 0;\n  var paren_open_stack_index_index_index = 0;\n  var paren_close_stack_index_index_index = 0;\n  var paren_open_stack_index_index_index_count = 0;\n  var paren_close_stack_index_index_index_count = 0;\n  var paren_open_stack_index_index_index_index = 0;\n  var paren_close_stack_index_index_index_index = 0;\n  var paren_open_stack_index_index_index_index_count = 0;\n  var paren_close_stack_index_index_index_index_count = 0;\n  var paren_open_stack_index_index_index_index_index = 0;\n  var paren_close_stack_index_index_index_index_index = 0;\n  var paren_open_stack_index_index_index_index_index_count = 0;\n  var paren_close_stack_index_index_index_index_index_count = 0;\n  var paren_open_stack_index\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpvdm4wm6q.js:51\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_string = paren_string.split('');\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      paren_open++;\n    }\n    else if(paren_string[i] === ')'){\n      paren_close++;\n    }\n    else if(paren_string[i] === '(' && paren_open > 0){\n      paren_stack.push(paren_open);\n      paren_open = 0;\n    }\n    else if(paren_string[i] === ')' && paren_close > 0){\n      paren_open = paren_stack.pop();\n      paren_close = 0;\n    }\n  }\n  if(paren_open > 0){\n    paren_stack.push(paren_open);\n  }\n  if(paren_stack.length > 0){\n    paren_open = paren_stack.pop();\n  }\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      paren_open++;\n    }\n    else if(paren_string[i] === ')'){\n      paren_close++;\n    }\n    else if(paren_string[i] === '(' && paren_open > 0){\n      paren_stack.push(paren_open);\n      paren_open = 0;\n    }\n    else if(paren_string[i] === ')' && paren_close > 0){\n      paren_open = paren_stack.pop();\n      paren_close = 0;\n    }\n  }\n  if(paren_open > 0){\n    paren_stack.push(paren_open);\n  }\n  if(paren_stack.length > 0){\n    paren_open = paren_stack.pop();\n  }\n  for(var i = 0; i < paren_string.\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmp0we763nl.js:59\nconst assert = require('node:assert');\n      ^^^^^^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_index = 0;\n  var current_depth = 0;\n  var current_depth_string = \"\";\n  var current_depth_index = 0;\n  var current_depth_depth = 0;\n  var current_depth_depth_string = \"\";\n  var current_depth_depth_index = 0;\n  var current_depth_depth_depth = 0;\n  var current_depth_depth_depth_string = \"\";\n  var current_depth_depth_depth_index = 0;\n  var current_depth_depth_depth_depth = 0;\n  var current_depth_depth_depth_depth_string = \"\";\n  var current_depth_depth_depth_depth_index = 0;\n  var current_depth_depth_depth_depth_depth = 0;\n  var current_depth_depth_depth_depth_depth_string = \"\";\n  var current_depth_depth_depth_depth_depth_index = 0;\n  var current_depth_depth_depth_depth_depth_depth = 0;\n  var current_depth_depth_depth_depth_depth_depth_string = \"\";\n  var current_depth_depth_depth_depth_depth_depth_index = 0;\n  var current_depth_depth_depth_depth_depth_depth_depth = 0;\n  var current_depth_depth_depth_depth_depth_depth_depth_string = \"\";\n  var current_depth_depth_depth_depth_depth_depth_depth_index = 0;\n  var current_depth_depth_depth_depth_depth_depth_depth_depth = 0;\n  var current_depth_depth_depth_depth_depth_depth_depth_depth_string = \"\";\n  var current_depth_depth_depth_depth_depth_depth_depth_depth_index = 0;\n  var current_depth_depth_depth_depth_depth_depth_depth_depth_depth = 0;\n  var current_depth_depth_depth_depth_depth_depth_depth_depth_depth_string = \"\";\n  var current_depth_depth_depth_depth\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmpe9ak_6a3.js:50\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    var paren_groups = [];\n    var paren_stack = [];\n    var current_group = [];\n    var current_group_count = 0;\n    var current_group_open_braces = 0;\n    var current_group_close_braces = 0;\n    var current_group_open_parens = 0;\n    var current_group_close_parens = 0;\n    var current_group_open_braces_count = 0;\n    var current_group_close_braces_count = 0;\n    var current_group_open_parens_count = 0;\n    var current_group_close_parens_count = 0;\n    var current_group_open_braces_index = 0;\n    var current_group_close_braces_index = 0;\n    var current_group_open_parens_index = 0;\n    var current_group_close_parens_index = 0;\n    var current_group_open_braces_count_index = 0;\n    var current_group_close_braces_count_index = 0;\n    var current_group_open_parens_count_index = 0;\n    var current_group_close_parens_count_index = 0;\n    var current_group_open_braces_count_index = 0;\n    var current_group_close_braces_count_index = 0;\n    var current_group_open_parens_count_index = 0;\n    var current_group_close_parens_count_index = 0;\n    var current_group_open_braces_count_index = 0;\n    var current_group_close_braces_count_index = 0;\n    var current_group_open_parens_count_index = 0;\n    var current_group_close_parens_count_index = 0;\n    var current_group_open_braces_count_index = 0;\n    var current_group_close_braces_count_index = 0;\n    var current_group_open_parens_count_index = 0;\n    var current_group_close_parens_count_index = 0;\n    var current\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmplawn8ce8.js:52\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var current_group = [];\n  var current_group_count = 0;\n  var paren_count = 0;\n  var paren_string = paren_string.replace(/\\s/g,'');\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      current_group.push(paren_string[i]);\n      current_group_count++;\n    }\n    else if(paren_string[i] === ')'){\n      current_group.push(paren_string[i]);\n      current_group_count--;\n    }\n    if(current_group_count === 0){\n      paren_groups.push(current_group.join(''));\n      current_group = [];\n      current_group_count = 0;\n    }\n  }\n  return paren_groups;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var paren_count = 0;\n  var result = [];\n  var paren_char = \"\";\n  var paren_char_count = 0;\n  var paren_char_stack = [];\n  var paren_char_stack_count = 0;\n  var paren_char_stack_index = 0;\n  var paren_char_stack_index_count = 0;\n  var paren_char_stack_index_count_max = 0;\n  var paren_char_stack_index_count_min = 0;\n  var paren_char_stack_index_count_min_max = 0;\n  var paren_char_stack_index_count_min_min = 0;\n  var paren_char_stack_index_count_min_min_max = 0;\n  var paren_char_stack_index_count_min_min_min = 0;\n  var paren_char_stack_index_count_min_min_min_max = 0;\n  var paren_char_stack_index_count_min_min_min_min = 0;\n  var paren_char_stack_index_count_min_min_min_min_max = 0;\n  var paren_char_stack_index_count_min_min_min_min_min = 0;\n  var paren_char_stack_index_count_min_min_min_min_min_max = 0;\n  var paren_char_stack_index_count_min_min_min_min_min_min = 0;\n  var paren_char_stack_index_count_min_min_min_min_min_min_max = 0;\n  var paren_char_stack_index_count_min_min_min_min_min_min_min = 0;\n  var paren_char_stack_index_count_min_min_min_min_min_min_min_max = 0;\n  var paren_char_stack_index_count_min_min_min_min_min_min_min_min = 0;\n  var paren_char_stack_index\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmpttu31rmc.js:45\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = false;\n  var current_paren_close = false;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  for (var i = 0; i < paren_string.length; i++){\n    if (paren_string[i] === \"(\"){\n      current_paren_open_count++;\n      current_paren_open = true;\n    }\n    if (paren_string[i] === \")\"){\n      current_paren_close_count++;\n      current_paren_close = true;\n    }\n    if (paren_string[i] === \" \"){\n      current_string += \" \";\n    }\n    else if (current_paren_open){\n      if (current_paren_close){\n        current_string += \")\";\n        current_paren_count = current_paren_count - current_paren_close_count + current_paren_open_count;\n        current_paren_close_count = 0;\n        current_paren_open_count = 0;\n        current_paren_close = false;\n        current_paren_open = false;\n      }\n      else {\n        current_string += paren_string[i];\n      }\n    }\n    else if (current_paren_close){\n      current_string += paren_string[i];\n    }\n    else {\n      current_string += paren_string[i];\n    }\n  }\n  if (current_paren_open){\n    current_string += \")\";\n    current_paren_count = current_paren_count - current_paren_close_count + current_paren_open_count;\n    current_paren_close_count = 0;\n    current_paren_open_count = 0;\n    current_paren_close = false;\n    current_paren_open = false;\n  }\n  if (current_paren_count === 0){\n    result.push(current_string);\n  }\n  else {\n    result\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmp4ietgckw.js:72\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split('');\n  var result = [];\n  var stack = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === '('){\n      stack.push(parens[i]);\n    }\n    else if(parens[i] === ')'){\n      if(stack.length === 0){\n        result.push('');\n      }\n      else{\n        stack.pop();\n        result.push(stack.join(''));\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(',\n  '(',\n  '',\n  '((',\n  '(',\n  '',\n  '',\n  '((',\n  '(',\n  '(',\n  '(',\n  ''\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpoc5brzky.js:33:10)\n    at Object.<anonymous> (/tmp/tmpoc5brzky.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '(', '(', '',  '((',\n    '(', '',  '',  '((',\n    '(', '(', '(', ''\n  ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split(\"\");\n  var result = [];\n  var stack = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === \"(\"){\n      stack.push(parens[i]);\n    } else if(parens[i] === \")\"){\n      if(stack.length === 0){\n        result.push(parens[i]);\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpu7j_xj_2.js:30:10)\n    at Object.<anonymous> (/tmp/tmpu7j_xj_2.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  for (var i = 0; i < paren_string.length; i++){\n    if (paren_string[i] === '('){\n      paren_stack.push(paren_string[i]);\n    } else if (paren_string[i] === ')'){\n      if (paren_stack.length === 0){\n        result.push(current_string);\n        current_string = \"\";\n      } else {\n        current_string += paren_string[i];\n        paren_stack.pop();\n      }\n    } else {\n      current_string += paren_string[i];\n    }\n  }\n  if (paren_stack.length > 0){\n    result.push(current_string);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpyq91engc.js:37:10)\n    at Object.<anonymous> (/tmp/tmpyq91engc.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split(\"\");\n  var stack = [];\n  var result = [];\n  for (var i = 0; i < parens.length; i++) {\n    if (parens[i] === \"(\") {\n      stack.push(parens[i]);\n    } else if (parens[i] === \")\") {\n      if (stack.length === 0) {\n        result.push(parens.slice(i, parens.length));\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpmo2a39wr.js:30:10)\n    at Object.<anonymous> (/tmp/tmpmo2a39wr.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = false;\n  var current_paren_close = false;\n  for (var i = 0; i < paren_string.length; i++){\n    if (paren_string[i] === \"(\"){\n      current_paren_open = true;\n      current_paren_close = false;\n      current_string += paren_string[i];\n    }\n    else if (paren_string[i] === \")\"){\n      current_paren_open = false;\n      current_paren_close = true;\n      current_string += paren_string[i];\n    }\n    else if (current_paren_open){\n      current_string += paren_string[i];\n    }\n    else if (current_paren_close){\n      current_string += paren_string[i];\n    }\n    else{\n      current_string += paren_string[i];\n    }\n    if (current_paren_open && current_paren_close){\n      current_paren_count += 1;\n      if (current_paren_count === 1){\n        paren_stack.push(current_string);\n        current_string = \"\";\n      }\n      else{\n        current_string = \"\";\n      }\n      current_paren_count = 0;\n    }\n  }\n  if (current_string !== \"\"){\n    result.push(current_string);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(()()) ((())) () ((())()())'\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpfvjaulze.js:57:10)\n    at Object.<anonymous> (/tmp/tmpfvjaulze.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '(()()) ((())) () ((())()())' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var result = [];\n  var stack = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_string = paren_string.split(\"\");\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      paren_count++;\n      paren_open++;\n    }\n    else if(paren_string[i] === \")\"){\n      paren_count--;\n      paren_close++;\n    }\n    else if(paren_string[i] === \" \"){\n      //ignore spaces\n    }\n    else{\n      //if the current character is not a space and the stack is empty,\n      //push the current character to the stack\n      if(paren_count === 0 && stack.length === 0){\n        stack.push(paren_string[i]);\n      }\n      //if the current character is a space and the stack is not empty,\n      //pop the top character from the stack and push it to the result\n      else if(paren_string[i] === \" \" && stack.length > 0){\n        result.push(stack.pop());\n      }\n      //if the current character is a space and the stack is empty,\n      //do nothing\n      else if(paren_string[i] === \" \" && stack.length === 0){\n        //do nothing\n      }\n      //if the current character is not a space and the stack is not empty,\n      //push the current character to the stack\n      else if(paren_count > 0 && stack.length > 0){\n        stack.push(paren_string[i]);\n      }\n      //if the current character is not a space and the stack is empty,\n      //do nothing\n      else if(paren_count === 0 && stack.length === 0){\n        //do nothing\n      }\n    }\n  }\n  //if the stack is not empty,\n  //pop the top character from the stack and push it to the result\n  while(stack.length > 0){\n    result.push(stack.pop());\n  }\n  return result;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp373af6cr.js:68:10)\n    at Object.<anonymous> (/tmp/tmp373af6cr.js:74:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    var paren_stack = [];\n    var result = [];\n    var current_group = [];\n    var current_group_string = \"\";\n    var current_group_count = 0;\n    var current_group_open_braces = 0;\n    var current_group_close_braces = 0;\n    var current_group_open_parens = 0;\n    var current_group_close_parens = 0;\n    var current_group_open_braces_count = 0;\n    var current_group_close_braces_count = 0;\n    var current_group_open_parens_count = 0;\n    var current_group_close_parens_count = 0;\n    var current_group_open_braces_count_2 = 0;\n    var current_group_close_braces_count_2 = 0;\n    var current_group_open_parens_count_2 = 0;\n    var current_group_close_parens_count_2 = 0;\n    var current_group_open_braces_count_3 = 0;\n    var current_group_close_braces_count_3 = 0;\n    var current_group_open_parens_count_3 = 0;\n    var current_group_close_parens_count_3 = 0;\n    var current_group_open_braces_count_4 = 0;\n    var current_group_close_braces_count_4 = 0;\n    var current_group_open_parens_count_4 = 0;\n    var current_group_close_parens_count_4 = 0;\n    var current_group_open_braces_count_5 = 0;\n    var current_group_close_braces_count_5 = 0;\n    var current_group_open_parens_count_5 = 0;\n    var current_group_close_parens_count_5 = 0;\n    var current_group_open_braces_count_6 = 0;\n    var current_group_close_braces_count_6 = 0;\n    var current_group_open_parens_count_6 = 0;\n    var current_group\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmpz5c1pruf.js:52\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split('');\n  var stack = [];\n  var result = [];\n  for (var i = 0; i < parens.length; i++) {\n    if (parens[i] === '(') {\n      stack.push(parens[i]);\n    } else if (parens[i] === ')') {\n      if (stack.length === 0) {\n        result.push(parens.slice(i, parens.length));\n        break;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpzf5qozlh.js:31:10)\n    at Object.<anonymous> (/tmp/tmpzf5qozlh.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var result = [];\n  var stack = [];\n  var paren_count = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var paren_string_length = paren_string.length;\n  var paren_string_char = paren_string.charAt(i);\n  var paren_string_char_length = paren_string_char.length;\n  var paren_string_char_index = 0;\n  var paren_string_char_index_end = 0;\n  var paren_string_char_index_start = 0;\n  var paren_string_char_index_start_end = 0;\n  var paren_string_char_index_start_end_end = 0;\n  var paren_string_char_index_start_end_end_end = 0;\n  var paren_string_char_index_start_end_end_end_end = 0;\n  var paren_string_char_index_start_end_end_end_end_end = 0;\n  var paren_string_char_index_start_end_end_end_end_end_end = 0;\n  var paren_string_char_index_start_end_end_end_end_end_end_end = 0;\n  var paren_string_char_index_start_end_end_end_end_end_end_end_end = 0;\n  var paren_string_char_index_start_end_end_end_end_end_end_end_end_end = 0;\n  var paren_string_char_index_start_end_end_end_end_end_end_end_end_end_end = 0;\n  var paren_string_char_index_start_end_end_end_end_end_end_end_end_end_end_end = 0;\n  var paren_string_char_index_start_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  var paren_string_char_index_start_end_end_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmp70ca4gyb.js:44\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = 0;\n  var current_paren_close = 0;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  var current_paren_open_count_stack = [];\n  var current_paren_close_count_stack = [];\n  var current_paren_open_count_stack_index = 0;\n  var current_paren_close_count_stack_index = 0;\n  var current_paren_open_count_stack_stack = [];\n  var current_paren_close_count_stack_stack = [];\n  var current_paren_open_count_stack_stack_index = 0;\n  var current_paren_close_count_stack_stack_index = 0;\n  var current_paren_open_count_stack_stack_stack = [];\n  var current_paren_close_count_stack_stack_stack = [];\n  var current_paren_open_count_stack_stack_stack_index = 0;\n  var current_paren_close_count_stack_stack_stack_index = 0;\n  var current_paren_open_count_stack_stack_stack_stack = [];\n  var current_paren_close_count_stack_stack_stack_stack = [];\n  var current_paren_open_count_stack_stack_stack_stack_index = 0;\n  var current_paren_close_count_stack_stack_stack_stack_index = 0;\n  var current_paren_open_count_stack_stack_stack_stack_stack = [];\n  var current_paren_close_count_stack_stack_stack_stack_stack = [];\n  var current_paren_open_count_stack_stack_stack_stack_stack_index = 0;\n  var current_paren_close_count_stack_stack_stack_stack_stack_index = 0;\n  var current_paren_open_count_stack_stack_stack_stack_stack_stack = [];\n  var current_paren_close_count_stack_stack_stack\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmpyeam_ct4.js:49\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split(\"\");\n  var stack = [];\n  var result = [];\n  for (var i = 0; i < parens.length; i++) {\n    if (parens[i] === \"(\") {\n      stack.push(parens[i]);\n    } else if (parens[i] === \")\") {\n      if (stack.length === 0) {\n        result.push(parens[i]);\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpolno0jmy.js:30:10)\n    at Object.<anonymous> (/tmp/tmpolno0jmy.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var paren_count = 0;\n  var output = [];\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      paren_stack.push(paren_count);\n      paren_count++;\n    }\n    else if(paren_string[i] === ')'){\n      paren_count--;\n      if(paren_stack.length === 0){\n        output.push(paren_string.substring(0, i));\n        break;\n      }\n      else{\n        paren_count = paren_stack.pop();\n      }\n    }\n  }\n  return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp5q3r44kh.js:35:10)\n    at Object.<anonymous> (/tmp/tmp5q3r44kh.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var result = [];\n  var stack = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmp9jj496z6.js:92\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_string = paren_string.replace(/\\s/g,'');\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      paren_stack.push(paren_count);\n      paren_count++;\n      paren_open++;\n    }\n    else if(paren_string[i] === ')'){\n      paren_count--;\n      paren_close++;\n    }\n    else if(paren_string[i] === '(' && paren_open > 0){\n      paren_count++;\n      paren_open--;\n    }\n    else if(paren_string[i] === ')' && paren_close > 0){\n      paren_count--;\n      paren_close--;\n    }\n    if(paren_open === 0 && paren_close === 0){\n      paren_groups.push(paren_string.substring(paren_stack.pop(), i));\n    }\n  }\n  return paren_groups;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp0bl022ug.js:44:10)\n    at Object.<anonymous> (/tmp/tmp0bl022ug.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_count_stack = [];\n  var paren_open_stack = [];\n  var paren_close_stack = [];\n  var paren_string_stack = [];\n  var paren_string = paren_string.split(\"\");\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      paren_count++;\n      paren_count_stack.push(paren_count);\n      paren_open_stack.push(paren_open);\n      paren_close_stack.push(paren_close);\n      paren_open = 0;\n      paren_close = 0;\n      paren_string_stack.push(paren_string[i]);\n    }\n    else if(paren_string[i] === \")\"){\n      paren_count--;\n      paren_count_stack.pop();\n      paren_open_stack.pop();\n      paren_close_stack.pop();\n      paren_string_stack.pop();\n      if(paren_count === 0){\n        paren_groups.push(paren_string_stack.join(\"\"));\n        paren_string_stack = [];\n      }\n      else{\n        paren_open = paren_open_stack.pop();\n        paren_close = paren_close_stack.pop();\n      }\n    }\n    else{\n      paren_open++;\n      paren_string_stack.push(paren_string[i]);\n    }\n  }\n  return paren_groups;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  ' ',\n  ' ',\n  ' '\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpzzgir9d0.js:56:10)\n    at Object.<anonymous> (/tmp/tmpzzgir9d0.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '', ' ', ' ', ' ' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_char = \"\";\n  var paren_open = false;\n  var paren_close = false;\n  var paren_group = \"\";\n  var paren_group_count = 0;\n  var paren_group_index = 0;\n  var paren_group_open = false;\n  var paren_group_close = false;\n  var paren_group_char = \"\";\n  var paren_group_open_count = 0;\n  var paren_group_close_count = 0;\n  var paren_group_open_index = 0;\n  var paren_group_close_index = 0;\n  var paren_group_open_char = \"\";\n  var paren_group_close_char = \"\";\n  var paren_group_open_char_count = 0;\n  var paren_group_close_char_count = 0;\n  var paren_group_open_char_index = 0;\n  var paren_group_close_char_index = 0;\n  var paren_group_open_char_count_index = 0;\n  var paren_group_close_char_count_index = 0;\n  var paren_group_open_char_count_index_count = 0;\n  var paren_group_close_char_count_index_count = 0;\n  var paren_group_open_char_count_index_count_index = 0;\n  var paren_group_close_char_count_index_count_index = 0;\n  var paren_group_open_char_count_index_count_index_count = 0;\n  var paren_group_close_char_count_index_count_index_count = 0;\n  var paren_group_open_char_count_index_count_index_count_index = 0;\n  var paren_group_close_char_count_index_count_index_count_index = 0;\n  var paren_group\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmp_k4450sh.js:53\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split(\"\");\n  var stack = [];\n  var result = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === \"(\"){\n      stack.push(parens[i]);\n    } else if(parens[i] === \")\"){\n      if(stack.length === 0){\n        result.push(parens[i]);\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp6eugohc2.js:30:10)\n    at Object.<anonymous> (/tmp/tmp6eugohc2.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split('');\n  var result = [];\n  var stack = [];\n  for (var i = 0; i < parens.length; i++) {\n    if (parens[i] === '(') {\n      stack.push(parens[i]);\n    } else if (parens[i] === ')') {\n      if (stack.length === 0) {\n        result.push('');\n      } else {\n        result.push(stack.pop());\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '('\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpymdje2f3.js:30:10)\n    at Object.<anonymous> (/tmp/tmpymdje2f3.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '(', '(', '(', '(',\n    '(', '(', '(', '(',\n    '(', '(', '(', '('\n  ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  for (var i = 0; i < paren_string.length; i++){\n    if (paren_string[i] === \"(\"){\n      current_paren_count++;\n    }\n    else if (paren_string[i] === \")\"){\n      current_paren_count--;\n    }\n    if (current_paren_count === 0){\n      if (current_string !== \"\"){\n        result.push(current_string);\n        current_string = \"\";\n      }\n      current_string += paren_string[i];\n    }\n    else {\n      current_string += paren_string[i];\n    }\n  }\n  if (current_string !== \"\"){\n    result.push(current_string);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(()()',\n  ')',\n  ' ((())',\n  ')',\n  ' (',\n  ')',\n  ' ((())()()',\n  ')'\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp_zh6xdqo.js:41:10)\n    at Object.<anonymous> (/tmp/tmp_zh6xdqo.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '(()()', ')', ' ((())', ')', ' (', ')', ' ((())()()', ')' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_index = 0;\n  var current_paren_count = 0;\n  var current_paren_open = false;\n  var current_paren_close = false;\n\n  for (var i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\" && !current_paren_open) {\n      current_paren_open = true;\n      current_paren_count++;\n    } else if (paren_string[i] === \")\" && current_paren_open) {\n      current_paren_close = true;\n      current_paren_count--;\n    } else if (paren_string[i] === \"(\" && current_paren_open) {\n      current_paren_open = true;\n      current_paren_count++;\n    } else if (paren_string[i] === \")\" && current_paren_close) {\n      current_paren_close = false;\n      current_paren_count--;\n    } else if (paren_string[i] === \"(\" && current_paren_open) {\n      current_paren_open = true;\n      current_paren_count++;\n    } else if (paren_string[i] === \")\" && current_paren_open) {\n      current_paren_open = false;\n      current_paren_count--;\n    } else if (paren_string[i] === \"(\" && current_paren_open) {\n      current_paren_open = true;\n      current_paren_count++;\n    } else if (paren_string[i] === \")\" && current_paren_open) {\n      current_paren_open = false;\n      current_paren_count--;\n    } else if (paren_string[i] === \"(\" && current_paren_open) {\n      current_paren_open = true;\n      current_paren_count++;\n    } else if (paren_string[i] === \")\" && current_paren_open) {\n      current_paren_open = false;\n      current_paren_count--;\n    } else if (paren_string[i]\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmpc_wncuj2.js:48\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      paren_stack.push(i);\n    }\n    else if(paren_string[i] === \")\"){\n      if(paren_stack.length === 0){\n        result.push(current_string);\n        current_string = \"\";\n      }\n      else{\n        var start = paren_stack.pop();\n        current_string += paren_string.substring(start, i + 1);\n      }\n    }\n    else{\n      current_string += paren_string[i];\n    }\n  }\n  if(current_string !== \"\"){\n    result.push(current_string);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '()()(()()) ()(())((())) () ()(())()()((())()())'\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmprolye1kp.js:40:10)\n    at Object.<anonymous> (/tmp/tmprolye1kp.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '()()(()()) ()(())((())) () ()(())()()((())()())' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = false;\n  var current_paren_close = false;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  var current_paren_open_stack = [];\n  var current_paren_close_stack = [];\n  var current_paren_open_stack_count = 0;\n  var current_paren_close_stack_count = 0;\n\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      current_paren_open_count++;\n      current_paren_open = true;\n    }\n    else if(paren_string[i] === \")\"){\n      current_paren_close_count++;\n      current_paren_close = true;\n    }\n    else if(paren_string[i] === \" \"){\n      if(current_paren_open){\n        current_paren_open_stack.push(current_paren_open_count);\n        current_paren_open_count = 0;\n      }\n      else if(current_paren_close){\n        current_paren_close_stack.push(current_paren_close_count);\n        current_paren_close_count = 0;\n      }\n    }\n    else{\n      if(current_paren_open){\n        current_paren_open_count++;\n      }\n      else if(current_paren_close){\n        current_paren_close_count++;\n      }\n    }\n  }\n\n  if(current_paren_open){\n    current_paren_open_stack.push(current_paren_open_count);\n    current_paren_open_count = 0;\n  }\n  else if(current_paren_close){\n    current_paren_close_stack.push(current_paren_close_count);\n    current_paren_close_count = 0;\n  }\n\n  for(var i = 0; i < current_paren_open_stack.length; i\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmp7seorzwq.js:60\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_string = paren_string.replace(/\\s/g,'');\n  var paren_string_length = paren_string.length;\n  for(var i = 0; i < paren_string_length; i++){\n    if(paren_string[i] === '('){\n      paren_stack.push(paren_count);\n      paren_count++;\n      paren_open++;\n    }\n    else if(paren_string[i] === ')'){\n      paren_count--;\n      paren_close++;\n    }\n    else if(paren_string[i] === '(' && paren_open > 0){\n      paren_count++;\n      paren_open--;\n    }\n    else if(paren_string[i] === ')' && paren_close > 0){\n      paren_count--;\n      paren_close--;\n    }\n    if(paren_open === 0 && paren_close === 0){\n      paren_groups.push(paren_string.substring(paren_stack.pop(),i));\n    }\n  }\n  return paren_groups;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpn92tzmq1.js:45:10)\n    at Object.<anonymous> (/tmp/tmpn92tzmq1.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    var paren_stack = [];\n    var result = [];\n    var current_string = \"\";\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] == \"(\"){\n            paren_stack.push(paren_string[i]);\n        }\n        else if(paren_string[i] == \")\"){\n            if(paren_stack.length > 0){\n                current_string += paren_stack.pop();\n            }\n            else{\n                result.push(current_string);\n                current_string = \"\";\n            }\n        }\n        else{\n            current_string += paren_string[i];\n        }\n    }\n    if(current_string != \"\"){\n        result.push(current_string);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '((( ((( ( ((((('\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp3fa0s6fx.js:39:10)\n    at Object.<anonymous> (/tmp/tmp3fa0s6fx.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '((( ((( ( (((((' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var result = [];\n  var stack = [];\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_char = \"\";\n  var paren_char_count = 0;\n  var paren_char_index = 0;\n  var paren_char_count_prev = 0;\n  var paren_char_index_prev = 0;\n  var paren_char_count_next = 0;\n  var paren_char_index_next = 0;\n  var paren_char_count_next_prev = 0;\n  var paren_char_index_next_prev = 0;\n  var paren_char_count_next_next = 0;\n  var paren_char_index_next_next = 0;\n  var paren_char_count_next_next_prev = 0;\n  var paren_char_index_next_next_prev = 0;\n  var paren_char_count_next_next_next = 0;\n  var paren_char_index_next_next_next = 0;\n  var paren_char_count_next_next_next_prev = 0;\n  var paren_char_index_next_next_next_prev = 0;\n  var paren_char_count_next_next_next_next = 0;\n  var paren_char_index_next_next_next_next = 0;\n  var paren_char_count_next_next_next_next_prev = 0;\n  var paren_char_index_next_next_next_next_prev = 0;\n  var paren_char_count_next_next_next_next_next = 0;\n  var paren_char_index_next_next_next_next_next = 0;\n  var paren_char_count_next_next_next_next_next_prev = 0;\n  var paren_char_index_next_next_next_next_next_prev = 0;\n  var paren_char_count_next_next_next_next_next_next = 0;\n  var paren_char_index_next_next_next\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmphj14jt7a.js:50\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split('');\n  var result = [];\n  var stack = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === '('){\n      stack.push(parens[i]);\n    }\n    else if(parens[i] === ')'){\n      if(stack.length === 0){\n        result.push('');\n      }\n      else{\n        stack.pop();\n        result.push(stack.join(''));\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(',\n  '(',\n  '',\n  '((',\n  '(',\n  '',\n  '',\n  '((',\n  '(',\n  '(',\n  '(',\n  ''\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpoc5brzky.js:33:10)\n    at Object.<anonymous> (/tmp/tmpoc5brzky.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '(', '(', '',  '((',\n    '(', '',  '',  '((',\n    '(', '(', '(', ''\n  ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split('');\n  var result = [];\n  var stack = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === '('){\n      stack.push(parens[i]);\n    }\n    else if(parens[i] === ')'){\n      if(stack.length === 0){\n        result.push('');\n      }\n      else{\n        stack.pop();\n        result.push(stack.join(''));\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(',\n  '(',\n  '',\n  '((',\n  '(',\n  '',\n  '',\n  '((',\n  '(',\n  '(',\n  '(',\n  ''\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpoc5brzky.js:33:10)\n    at Object.<anonymous> (/tmp/tmpoc5brzky.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '(', '(', '',  '((',\n    '(', '',  '',  '((',\n    '(', '(', '(', ''\n  ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var current_group = [];\n  var current_group_length = 0;\n  var current_group_open_braces = 0;\n  var current_group_close_braces = 0;\n  var paren_string_length = paren_string.length;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var aa = 0;\n  var ab = 0;\n  var ac = 0;\n  var ad = 0;\n  var ae = 0;\n  var af = 0;\n  var ag = 0;\n  var ah = 0;\n  var ai = 0;\n  var aj = 0;\n  var ak = 0;\n  var al = 0;\n  var am = 0;\n  var an = 0;\n  var ao = 0;\n  var ap = 0;\n  var aq = 0;\n  var ar = 0;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmpuke2kx5i.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_string = paren_string.replace(/\\s/g,'');\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      paren_open++;\n      paren_stack.push(paren_open);\n    }\n    else if(paren_string[i] === ')'){\n      paren_close++;\n      if(paren_stack.length === 0){\n        console.log('Error: Unbalanced parentheses');\n        return;\n      }\n      else{\n        paren_open = paren_stack.pop();\n        if(paren_open !== paren_close){\n          console.log('Error: Unbalanced parentheses');\n          return;\n        }\n      }\n    }\n  }\n  if(paren_stack.length > 0){\n    console.log('Error: Unbalanced parentheses');\n    return;\n  }\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      paren_count++;\n    }\n    else if(paren_string[i] === ')'){\n      paren_count--;\n    }\n    if(paren_count === 0){\n      paren_groups.push(paren_string.substring(i,i+1));\n    }\n  }\n  return paren_groups;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "Error: Unbalanced parentheses\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp8r5tieye.js:57:10)\n    at Object.<anonymous> (/tmp/tmp8r5tieye.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_string = paren_string.split(\"\");\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      paren_open++;\n    }\n    else if(paren_string[i] === \")\"){\n      paren_close++;\n    }\n    else if(paren_string[i] === \" \"){\n      continue;\n    }\n    else if(paren_open === paren_close){\n      paren_groups.push(paren_string.splice(i, paren_open).join(\"\"));\n      i += paren_open - 1;\n      paren_open = 0;\n      paren_close = 0;\n    }\n    else if(paren_open > paren_close){\n      paren_stack.push(paren_string[i]);\n    }\n    else if(paren_open < paren_close){\n      paren_stack.push(paren_string[i]);\n      paren_open++;\n    }\n  }\n  return paren_groups;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpi1fgkas_.js:46:10)\n    at Object.<anonymous> (/tmp/tmpi1fgkas_.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split('');\n  var result = [];\n  var stack = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === '('){\n      stack.push(parens[i]);\n    } else if(parens[i] === ')'){\n      if(stack.length === 0){\n        result.push('');\n      } else {\n        result.push(stack.pop());\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '('\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpdl2slker.js:30:10)\n    at Object.<anonymous> (/tmp/tmpdl2slker.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '(', '(', '(', '(',\n    '(', '(', '(', '(',\n    '(', '(', '(', '('\n  ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split('');\n  var result = [];\n  var stack = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === '('){\n      stack.push(parens[i]);\n    }\n    else if(parens[i] === ')'){\n      if(stack.length === 0){\n        result.push('');\n      }\n      else{\n        stack.pop();\n        result.push(stack.join(''));\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(',\n  '(',\n  '',\n  '((',\n  '(',\n  '',\n  '',\n  '((',\n  '(',\n  '(',\n  '(',\n  ''\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpoc5brzky.js:33:10)\n    at Object.<anonymous> (/tmp/tmpoc5brzky.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '(', '(', '',  '((',\n    '(', '',  '',  '((',\n    '(', '(', '(', ''\n  ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    var paren_stack = [];\n    var result = [];\n    var paren_count = 0;\n    var paren_open = false;\n    var paren_close = false;\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n            paren_open = true;\n        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n            paren_close = true;\n        }\n        else if(paren_open && paren_close){\n            result.push(paren_string.substring(paren_stack.pop(), i));\n            paren_open = false;\n            paren_close = false;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '()())',\n  ')()) ((()))',\n  '(()()) ((())) ()'\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp_dh1laij.js:37:10)\n    at Object.<anonymous> (/tmp/tmp_dh1laij.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '()())', ')()) ((()))', '(()()) ((())) ()' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    var paren_stack = [];\n    var result = [];\n    var paren_count = 0;\n    var paren_open = 0;\n    var paren_close = 0;\n    var paren_string = paren_string.replace(/\\s/g,'');\n    for(var i=0; i<paren_string.length; i++){\n        if(paren_string[i] === '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n            paren_open++;\n        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n            paren_close++;\n            if(paren_stack.length > 0){\n                var top = paren_stack.pop();\n                if(paren_open === paren_close){\n                    result.push(paren_string.substring(top, i+1));\n                }\n                else{\n                    result.push(paren_string.substring(top, i));\n                }\n            }\n            else{\n                result.push(paren_string.substring(i, i+1));\n            }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(',\n  '()(',\n  '(()())',\n  ')())(((',\n  '()())((()',\n  '(()())((()))',\n  '(()())((()))()',\n  ')())((()))()(((',\n  '()())((()))()((()',\n  '()())((()))()((())(',\n  '()())((()))()((())()(',\n  '(()())((()))()((())()())'\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpdl9velyx.js:45:10)\n    at Object.<anonymous> (/tmp/tmpdl9velyx.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '(',\n    '()(',\n    '(()())',\n    ')())(((',\n    '()())((()',\n    '(()())((()))',\n    '(()())((()))()',\n    ')())((()))()(((',\n    '()())((()))()((()',\n    '()())((()))()((())(',\n    '()())((()))()((())()(',\n    '(()())((()))()((())()())'\n  ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_index = 0;\n  var current_paren_open = false;\n  var current_paren_close = false;\n  var current_paren_open_index = 0;\n  var current_paren_close_index = 0;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  var current_paren_open_count_index = 0;\n  var current_paren_close_count_index = 0;\n  var current_paren_open_count_index_stack = [];\n  var current_paren_close_count_index_stack = [];\n  var current_paren_open_count_index_stack_index = 0;\n  var current_paren_close_count_index_stack_index = 0;\n  var current_paren_open_count_index_stack_index_stack = [];\n  var current_paren_close_count_index_stack_index_stack = [];\n  var current_paren_open_count_index_stack_index_stack_index = 0;\n  var current_paren_close_count_index_stack_index_stack_index = 0;\n  var current_paren_open_count_index_stack_index_stack_index_stack = [];\n  var current_paren_close_count_index_stack_index_stack_index_stack = [];\n  var current_paren_open_count_index_stack_index_stack_index_stack_index = 0;\n  var current_paren_close_count_index_stack_index_stack_index_stack_index = 0;\n  var current_paren_open_count_index_stack_index_stack_index_stack_index_stack = [];\n  var current_paren_close_count_index_stack_index_stack_index_stack_index_stack = [];\n  var current_paren_open_count_index_stack_index_stack_index_stack_index_stack_index = 0;\n  var current_paren_close_count_index_stack_index_stack\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmpn7quv5so.js:48\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split('');\n  var stack = [];\n  var result = [];\n  for (var i = 0; i < parens.length; i++) {\n    if (parens[i] === '(') {\n      stack.push(parens[i]);\n    } else if (parens[i] === ')') {\n      if (stack.length === 0) {\n        result.push('');\n      } else {\n        result.push(stack.pop());\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '('\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp70_mxez6.js:30:10)\n    at Object.<anonymous> (/tmp/tmp70_mxez6.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '(', '(', '(', '(',\n    '(', '(', '(', '(',\n    '(', '(', '(', '('\n  ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_index = 0;\n  var current_paren_open = false;\n  var current_paren_close = false;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  var current_paren_open_index = 0;\n  var current_paren_close_index = 0;\n  var current_paren_open_count_index = 0;\n  var current_paren_close_count_index = 0;\n  var current_paren_open_count_index_temp = 0;\n  var current_paren_close_count_index_temp = 0;\n  var current_paren_open_count_index_temp2 = 0;\n  var current_paren_close_count_index_temp2 = 0;\n  var current_paren_open_count_index_temp3 = 0;\n  var current_paren_close_count_index_temp3 = 0;\n  var current_paren_open_count_index_temp4 = 0;\n  var current_paren_close_count_index_temp4 = 0;\n  var current_paren_open_count_index_temp5 = 0;\n  var current_paren_close_count_index_temp5 = 0;\n  var current_paren_open_count_index_temp6 = 0;\n  var current_paren_close_count_index_temp6 = 0;\n  var current_paren_open_count_index_temp7 = 0;\n  var current_paren_close_count_index_temp7 = 0;\n  var current_paren_open_count_index_temp8 = 0;\n  var current_paren_close_count_index_temp8 = 0;\n  var current_paren_open_count_index_temp9 = 0;\n  var current_paren_close_count_index_temp9 = 0;\n  var current_paren_open_count_index_temp10 = 0;\n  var current_paren_close_count_index_temp10 = 0;\n  var current_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmpmy820co_.js:53\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split('');\n  var result = [];\n  var stack = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === '('){\n      stack.push(parens[i]);\n    }\n    else if(parens[i] === ')'){\n      if(stack.length === 0){\n        result.push('');\n      }\n      else{\n        stack.pop();\n        result.push(stack.join(''));\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(',\n  '(',\n  '',\n  '((',\n  '(',\n  '',\n  '',\n  '((',\n  '(',\n  '(',\n  '(',\n  ''\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpoc5brzky.js:33:10)\n    at Object.<anonymous> (/tmp/tmpoc5brzky.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '(', '(', '',  '((',\n    '(', '',  '',  '((',\n    '(', '(', '(', ''\n  ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split(\"\");\n  var stack = [];\n  var result = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === \"(\"){\n      stack.push(parens[i]);\n    }\n    else if(parens[i] === \")\"){\n      if(stack.length === 0){\n        result.push(parens[i]);\n      }\n      else{\n        stack.pop();\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpd4lu7y0d.js:32:10)\n    at Object.<anonymous> (/tmp/tmpd4lu7y0d.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split(\"\");\n  var stack = [];\n  var result = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === \"(\"){\n      stack.push(parens[i]);\n    }\n    else if(parens[i] === \")\"){\n      if(stack.length === 0){\n        result.push(parens[i]);\n      }\n      else{\n        stack.pop();\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpd4lu7y0d.js:32:10)\n    at Object.<anonymous> (/tmp/tmpd4lu7y0d.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var paren_count = 0;\n  var paren_index = 0;\n  var paren_char = paren_string[paren_index];\n  var paren_char_count = 0;\n  var paren_char_index = 0;\n  var paren_char_count_stack = [];\n  var paren_char_index_stack = [];\n  var paren_char_stack = [];\n  var paren_char_stack_index = 0;\n  var paren_char_stack_count = 0;\n  var paren_char_stack_count_stack = [];\n  var paren_char_stack_index_stack = [];\n  var paren_char_stack_index_stack_count = 0;\n  var paren_char_stack_index_stack_count_stack = [];\n  var paren_char_stack_index_stack_count_stack_count = 0;\n  var paren_char_stack_index_stack_count_stack_count_stack = [];\n  var paren_char_stack_index_stack_count_stack_count_stack_count = 0;\n  var paren_char_stack_index_stack_count_stack_count_stack_count_stack = [];\n  var paren_char_stack_index_stack_count_stack_count_stack_count_stack_count = 0;\n  var paren_char_stack_index_stack_count_stack_count_stack_count_stack_count_stack = [];\n  var paren_char_stack_index_stack_count_stack_count_stack_count_stack_count_stack_count = 0;\n  var paren_char_stack_index_stack_count_stack_count_stack_count_stack_count_stack_count_stack = [];\n  var paren_char_stack_index_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count = 0;\n  var paren_char_stack_index_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack = [];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmpjf7dyp4d.js:45\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var result = [];\n  var stack = [];\n  var current_string = \"\";\n  var current_index = 0;\n  var current_paren = 0;\n  var current_paren_count = 0;\n  var current_paren_open = 0;\n  var current_paren_close = 0;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  var current_paren_open_index = 0;\n  var current_paren_close_index = 0;\n  var current_paren_open_index_count = 0;\n  var current_paren_close_index_count = 0;\n  var current_paren_open_index_count_count = 0;\n  var current_paren_close_index_count_count = 0;\n  var current_paren_open_index_count_count_count = 0;\n  var current_paren_close_index_count_count_count = 0;\n  var current_paren_open_index_count_count_count_count = 0;\n  var current_paren_close_index_count_count_count_count = 0;\n  var current_paren_open_index_count_count_count_count_count = 0;\n  var current_paren_close_index_count_count_count_count_count = 0;\n  var current_paren_open_index_count_count_count_count_count_count = 0;\n  var current_paren_close_index_count_count_count_count_count_count = 0;\n  var current_paren_open_index_count_count_count_count_count_count_count = 0;\n  var current_paren_close_index_count_count_count_count_count_count_count = 0;\n  var current_paren_open_index_count_count_count_count_count_count_count_count = 0;\n  var current_paren_close_index_count_count_count_count_count_count_count_count = 0;\n  var current_paren_open_index_count_count_count_count_count_count_count_count_count = 0;\n  var current_paren\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmprqhua_or.js:49\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var current_group = [];\n  var current_group_count = 0;\n  var current_group_open_braces = 0;\n  var current_group_close_braces = 0;\n  var current_group_open_parens = 0;\n  var current_group_close_parens = 0;\n  var current_group_open_braces_count = 0;\n  var current_group_close_braces_count = 0;\n  var current_group_open_parens_count = 0;\n  var current_group_close_parens_count = 0;\n  var current_group_open_braces_index = 0;\n  var current_group_close_braces_index = 0;\n  var current_group_open_parens_index = 0;\n  var current_group_close_parens_index = 0;\n  var current_group_open_braces_count_index = 0;\n  var current_group_close_braces_count_index = 0;\n  var current_group_open_parens_count_index = 0;\n  var current_group_close_parens_count_index = 0;\n  var current_group_open_braces_count_index = 0;\n  var current_group_close_braces_count_index = 0;\n  var current_group_open_parens_count_index = 0;\n  var current_group_close_parens_count_index = 0;\n  var current_group_open_braces_count_index = 0;\n  var current_group_close_braces_count_index = 0;\n  var current_group_open_parens_count_index = 0;\n  var current_group_close_parens_count_index = 0;\n  var current_group_open_braces_count_index = 0;\n  var current_group_close_braces_count_index = 0;\n  var current_group_open_parens_count_index = 0;\n  var current_group_close_parens_count_index = 0;\n  var current_group_open_braces_count\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmpl459tng9.js:51\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = 0;\n  var current_paren_close = 0;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  var current_paren_open_stack = [];\n  var current_paren_close_stack = [];\n  var current_paren_open_stack_count = 0;\n  var current_paren_close_stack_count = 0;\n  var current_paren_open_stack_index = 0;\n  var current_paren_close_stack_index = 0;\n  var current_paren_open_stack_index_count = 0;\n  var current_paren_close_stack_index_count = 0;\n  var current_paren_open_stack_index_index = 0;\n  var current_paren_close_stack_index_index = 0;\n  var current_paren_open_stack_index_index_count = 0;\n  var current_paren_close_stack_index_index_count = 0;\n  var current_paren_open_stack_index_index_index = 0;\n  var current_paren_close_stack_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_count = 0;\n  var current_paren_close_stack_index_index_index_count = 0;\n  var current_paren_open_stack_index_index_index_index = 0;\n  var current_paren_close_stack_index_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_index_count = 0;\n  var current_paren_close_stack_index_index_index_index_count = 0;\n  var current_paren_open_stack_index_index_index_index_index = 0;\n  var current_paren_close_stack_index_index_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_index_index_count = 0;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpjc1bp3oi.js:51\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = false;\n  var current_paren_close = false;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  var current_paren_open_stack = [];\n  var current_paren_close_stack = [];\n  var current_paren_open_stack_count = 0;\n  var current_paren_close_stack_count = 0;\n  var current_paren_open_stack_index = 0;\n  var current_paren_close_stack_index = 0;\n  var current_paren_open_stack_index_count = 0;\n  var current_paren_close_stack_index_count = 0;\n  var current_paren_open_stack_index_index = 0;\n  var current_paren_close_stack_index_index = 0;\n  var current_paren_open_stack_index_index_count = 0;\n  var current_paren_close_stack_index_index_count = 0;\n  var current_paren_open_stack_index_index_index = 0;\n  var current_paren_close_stack_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_count = 0;\n  var current_paren_close_stack_index_index_index_count = 0;\n  var current_paren_open_stack_index_index_index_index = 0;\n  var current_paren_close_stack_index_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_index_count = 0;\n  var current_paren_close_stack_index_index_index_index_count = 0;\n  var current_paren_open_stack_index_index_index_index_index = 0;\n  var current_paren_close_stack_index_index_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_index_index_count = 0;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpsmihukpm.js:51\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split('');\n  var result = [];\n  var stack = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === '('){\n      stack.push(parens[i]);\n    } else if(parens[i] === ')'){\n      if(stack.length === 0){\n        result.push('');\n      } else {\n        result.push(stack.pop());\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '(',\n  '('\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpdl2slker.js:30:10)\n    at Object.<anonymous> (/tmp/tmpdl2slker.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '(', '(', '(', '(',\n    '(', '(', '(', '(',\n    '(', '(', '(', '('\n  ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_open = 0;\n  var paren_close = 0;\n  var paren_open_count = 0;\n  var paren_close_count = 0;\n  var paren_open_stack = [];\n  var paren_close_stack = [];\n  var paren_stack_count = 0;\n  var paren_stack_open = 0;\n  var paren_stack_close = 0;\n  var paren_stack_open_count = 0;\n  var paren_stack_close_count = 0;\n  var paren_stack_stack = [];\n  var paren_stack_stack_count = 0;\n  var paren_stack_stack_open = 0;\n  var paren_stack_stack_close = 0;\n  var paren_stack_stack_open_count = 0;\n  var paren_stack_stack_close_count = 0;\n  var paren_stack_stack_stack = [];\n  var paren_stack_stack_stack_count = 0;\n  var paren_stack_stack_stack_open = 0;\n  var paren_stack_stack_stack_close = 0;\n  var paren_stack_stack_stack_open_count = 0;\n  var paren_stack_stack_stack_close_count = 0;\n  var paren_stack_stack_stack_stack = [];\n  var paren_stack_stack_stack_stack_count = 0;\n  var paren_stack_stack_stack_stack_open = 0;\n  var paren_stack_stack_stack_stack_close = 0;\n  var paren_stack_stack_stack_stack_open_count = 0;\n  var paren_stack_stack_stack_stack_close_count = 0;\n  var paren_stack_stack_stack_stack_stack = [];\n  var paren_stack_stack_stack_stack_stack_count = 0;\n  var paren_stack_stack_stack_stack_stack_open = 0;\n  var paren_stack\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "/tmp/tmpihekej79.js:55\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split(\"\");\n  var stack = [];\n  var result = [];\n  for (var i = 0; i < parens.length; i++){\n    if (parens[i] === \"(\" || parens[i] === \"{\"){\n      stack.push(parens[i]);\n    } else if (parens[i] === \")\" || parens[i] === \"}\"){\n      if (stack.length === 0){\n        result.push(parens[i]);\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp_i6wztu_.js:30:10)\n    at Object.<anonymous> (/tmp/tmp_i6wztu_.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      paren_stack.push(paren_string[i]);\n    }\n    else if(paren_string[i] === ')'){\n      if(paren_stack.length === 0){\n        result.push(current_string);\n        current_string = \"\";\n      }\n      else{\n        current_string += paren_string[i];\n        paren_stack.pop();\n      }\n    }\n    else{\n      current_string += paren_string[i];\n    }\n  }\n  if(current_string !== \"\"){\n    result.push(current_string);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '))) ))) ) )))))'\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpyefcebl_.js:40:10)\n    at Object.<anonymous> (/tmp/tmpyefcebl_.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '))) ))) ) )))))' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var parens = paren_string.split('');\n  var result = [];\n  var current_parens = [];\n  var current_result = [];\n  for(var i = 0; i < parens.length; i++){\n    if(parens[i] === '('){\n      current_parens.push(parens[i]);\n    } else if(parens[i] === ')'){\n      if(current_parens.length === 0){\n        result.push(current_result.join(''));\n        current_result = [];\n      } else {\n        current_parens.pop();\n      }\n    } else {\n      current_result.push(parens[i]);\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp_qh7vhge.js:34:10)\n    at Object.<anonymous> (/tmp/tmp_qh7vhge.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_stack = [];\n  var result = [];\n  var current_string = \"\";\n  var current_paren_count = 0;\n  var current_paren_open = false;\n  var current_paren_close = false;\n  var current_paren_open_count = 0;\n  var current_paren_close_count = 0;\n  var current_paren_open_stack = [];\n  var current_paren_close_stack = [];\n  var current_paren_open_stack_count = 0;\n  var current_paren_close_stack_count = 0;\n  var current_paren_open_stack_index = 0;\n  var current_paren_close_stack_index = 0;\n  var current_paren_open_stack_index_count = 0;\n  var current_paren_close_stack_index_count = 0;\n  var current_paren_open_stack_index_index = 0;\n  var current_paren_close_stack_index_index = 0;\n  var current_paren_open_stack_index_index_count = 0;\n  var current_paren_close_stack_index_index_count = 0;\n  var current_paren_open_stack_index_index_index = 0;\n  var current_paren_close_stack_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_count = 0;\n  var current_paren_close_stack_index_index_index_count = 0;\n  var current_paren_open_stack_index_index_index_index = 0;\n  var current_paren_close_stack_index_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_index_count = 0;\n  var current_paren_close_stack_index_index_index_index_count = 0;\n  var current_paren_open_stack_index_index_index_index_index = 0;\n  var current_paren_close_stack_index_index_index_index_index = 0;\n  var current_paren_open_stack_index_index_index_index_index_count = 0;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "/tmp/tmpsmihukpm.js:51\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    var result = [];\n    var stack = [];\n    var paren_count = 0;\n    var paren_index = 0;\n    var paren_string = paren_string.replace(/\\s/g,'');\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] == '('){\n            paren_count++;\n            stack.push(paren_string[i]);\n        }\n        else if(paren_string[i] == ')'){\n            paren_count--;\n            if(stack.length > 0){\n                stack.pop();\n                if(stack.length > 0){\n                    result.push(stack.join(\"\"));\n                }\n                else{\n                    result.push(paren_string.substring(paren_index, i+1));\n                    paren_index = i+1;\n                }\n            }\n            else{\n                result.push(paren_string.substring(paren_index, i+1));\n                paren_index = i+1;\n            }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(',\n  '(',\n  '(()())',\n  '((',\n  '(',\n  '((()))',\n  '()',\n  '((',\n  '(',\n  '(',\n  '(',\n  '((())()())'\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpbgbt2ga7.js:44:10)\n    at Object.<anonymous> (/tmp/tmpbgbt2ga7.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '(',      '(',\n    '(()())', '((',\n    '(',      '((()))',\n    '()',     '((',\n    '(',      '(',\n    '(',      '((())()())'\n  ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    }
  ]
}