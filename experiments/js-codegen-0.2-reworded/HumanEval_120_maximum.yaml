name: HumanEval_120_maximum
language: js
prompt: "//Given an array arr of integers and a positive integer k, return a sorted\
  \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>>\
  \ maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4,\
  \ 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n\
  // [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n\
  // 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
  \ <= k <= len(arr)\nfunction maximum(arr, k){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
  \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n\
  \  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n\
  \  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5,\
  \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
  \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
  \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
  \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0],\
  \ 0),[]);\n}\n\ntest();"
completions: ["    let max = arr[0];\n    let max_index = 0;\n    for(let i = 1; i\
    \ < k; i++){\n        if(arr[i] > max){\n            max = arr[i];\n         \
    \   max_index = i;\n        }\n    }\n    let result = [];\n    for(let i = 0;\
    \ i < k; i++){\n        result.push(arr[i]);\n    }\n    result[max_index] = max;\n\
    \    return result;\n}\n<|endoftext|><|javascript|>import {\n  GraphQLObjectType,\n\
    \  GraphQLString,\n  GraphQLNonNull,\n  GraphQLInt,\n  GraphQLBoolean,\n  GraphQLID,\n\
    \  GraphQLField\n} from 'graphql';\n\nimport {\n  GraphQLDate,\n  GraphQLDateTime,\n\
    \  GraphQLTime,\n  GraphQLTimezone,\n  GraphQLDecimal,\n  GraphQLFloat,\n  GraphQLInt,\n\
    \  GraphQLInt32,\n  GraphQLInt64,\n  GraphQLUInt,\n  GraphQLUInt32,\n  GraphQLUInt64,\n\
    \  GraphQLString,\n  GraphQLBoolean,\n  GraphQLID,\n  GraphQLObjectType,\n  GraphQLNonNull,\n\
    \  GraphQLField\n} from 'graphql';\n\nimport {\n  GraphQLObjectType,\n  GraphQLString,\n\
    \  GraphQLNonNull,\n  GraphQLInt,\n  GraphQLBoolean,\n  GraphQLID,\n  GraphQLField\n\
    } from 'graphql';\n\nimport {\n  GraphQLObjectType,\n  GraphQLString,\n  GraphQLNonNull,\n\
    \  GraphQLInt,\n  GraphQLBoolean,\n  GraphQLID,\n  GraphQLField\n} from 'graphql';\n\
    \nimport {\n  GraphQLObjectType,\n  GraphQLString,\n  GraphQLNonNull,\n  GraphQLInt,\n\
    \  GraphQLBoolean,\n  GraphQLID,\n  GraphQLField\n} from 'graphql';\n\nimport\
    \ {\n  GraphQLObjectType,\n  GraphQLString,\n  GraphQLNonNull,\n  GraphQLInt,\n\
    \  GraphQLBoolean,", "    let max = arr[0];\n    let maxIndex = 0;\n    for(let\
    \ i = 1; i < k; i++){\n        if(arr[i] > max){\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    let result = [];\n    for(let\
    \ i = 0; i < k; i++){\n        result.push(arr[i]);\n    }\n    result[maxIndex]\
    \ = max;\n    return result;\n}\n<|endoftext|><|javascript|>/**\n * @fileoverview\
    \ Rule to flag use of constructor for wrapper objects\n * @author Ilya Volodin\n\
    \ */\n\n\"use strict\";\n", "  let max = arr[0];\n  let result = [];\n  for(let\
    \ i = 0; i < k; i++){\n    if(arr[i] > max){\n      max = arr[i];\n      result\
    \ = [arr[i]];\n    }\n    else if(arr[i] === max){\n      result.push(arr[i]);\n\
    \    }\n  }\n  return result;\n}\n<|endoftext|><|javascript|>import React from\
    \ 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\n\
    import { Router, browserHistory } from 'react-router';\nimport { syncHistoryWithStore\
    \ } from 'react-router-redux';\nimport { createStore, applyMiddleware } from 'redux';\n\
    import thunk from 'redux-thunk';\nimport reducers from './reducers';\nimport routes\
    \ from './routes';\nimport { createLogger } from 'redux-logger';\nimport { createHashHistory\
    \ } from 'history';\nimport { syncHistory } from 'react-router-redux';\nimport\
    \ { createStoreWithMiddleware } from 'redux-mock-store';\nimport { mockStore }\
    \ from '../../__mocks__/mockStore';\nimport { mockData } from '../../__mocks__/mockData';\n\
    import { mockData2 } from '../../__mocks__/mockData2';\nimport { mockData3 } from\
    \ '../../__mocks__/mockData3';\nimport { mockData4 } from '../../__mocks__/mockData4';\n\
    import { mockData5 } from '../../__mocks__/mockData5';\nimport { mockData6 } from\
    \ '../../__mocks__/mockData6';\nimport { mockData7 } from '../../__mocks__/mockData7';\n\
    import { mockData8 } from '../../__mocks__/mockData8';\nimport { mockData9 } from\
    \ '../../__mocks__/mockData9';\nimport { mockData10 } from '../../__mocks__/mockData10';\n\
    import { mockData11 } from '../", "  var max = arr[0];\n  var max_index = 0;\n\
    \  for(var i = 1; i < k; i++){\n    if(arr[i] > max){\n      max = arr[i];\n \
    \     max_index = i;\n    }\n  }\n  return arr.splice(max_index, 1);\n}\n<|endoftext|><|javascript|>var\
    \ gulp = require('gulp');\nvar concat = require('gulp-concat');\nvar uglify =\
    \ require('gulp-uglify');\nvar rename = require('gulp-rename');\nvar sourcemaps\
    \ = require('gulp-sourcemaps');\nvar browserify = require('browserify');\nvar\
    \ babelify = require('babelify');\nvar watchify = require('watchify');\nvar source\
    \ = require('vinyl-source-stream');\nvar buffer = require('vinyl-buffer');\nvar\
    \ gutil = require('gulp-util');\nvar source = require('vinyl-source-stream');\n\
    var buffer = require('vinyl-buffer');\nvar browserify = require('browserify');\n\
    var babelify = require('babelify');\nvar watchify = require('watchify');\nvar\
    \ source = require('vinyl-source-stream');\nvar buffer = require('vinyl-buffer');\n\
    var gutil = require('gulp-util');\nvar source = require('vinyl-source-stream');\n\
    var buffer = require('vinyl-buffer');\nvar gutil = require('gulp-util');\nvar\
    \ source = require('vinyl-source-stream');\nvar buffer = require('vinyl-buffer');\n\
    var gutil = require('gulp-util');\nvar source = require('vinyl-source-stream');\n\
    var buffer = require('vinyl-buffer');\nvar gutil = require('gulp-util');\nvar\
    \ source = require('vinyl-source-stream');\nvar buffer = require('vinyl-buffer');\n\
    var gutil = require('gulp-util');\nvar source = require('vinyl-source-stream');\n\
    var buffer = require('vinyl-buffer');\nvar gutil = require('gulp-util');\nvar\
    \ source = require('vinyl-source-stream');\nvar buffer = require('vinyl", "  \
    \  var max = arr[0];\n    var maxIndex = 0;\n    for(var i = 1; i < k; i++){\n\
    \        if(arr[i] > max){\n            max = arr[i];\n            maxIndex =\
    \ i;\n        }\n    }\n    return arr.splice(maxIndex, 1);\n}\n<|endoftext|><|javascript|>var\
    \ path = require('path');\nvar webpack = require('webpack');\n\nmodule.exports\
    \ = {\n  entry: [\n    'webpack-dev-server/client?http://localhost:8080', // WebpackDevServer\
    \ host and port\n    'webpack/hot/only-dev-server', // \"only\" prevents reload\
    \ on syntax errors\n    './src/index'\n  ],\n  output: {\n    path: path.join(__dirname,\
    \ 'dist'), // Note: Physical files are only output by the production build task\
    \ `npm run build`.\n    filename: 'bundle.js',\n    publicPath: '/'\n  },\n  plugins:\
    \ [\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoErrorsPlugin()\n\
    \  ],\n  module: {\n    loaders: [{\n      test: /\\.js$/,\n      loaders: ['react-hot',\
    \ 'babel'],\n      include: path.join(__dirname, 'src')\n    }, {\n      test:\
    \ /\\.css$/,\n      loaders: ['style', 'css']\n    }]\n  }\n};\n<|endoftext|><|javascript|>var\
    \ gulp = require('gulp');\nvar concat = require('gulp-concat');\nvar uglify =\
    \ require('gulp-uglify');\nvar minifyCss = require('gulp-minify-css');\nvar rename\
    \ = require('gulp-rename');\nvar sourcemaps = require('gulp-sourcemaps');\nvar\
    \ browserify = require('browserify');\nvar source = require('vinyl-source-stream');\n\
    var buffer = require('vinyl-buffer');\nvar gutil = require('gulp-util');\nvar\
    \ source = require('vinyl-source-stream');\nvar buffer = require('vinyl-buffer');\n\
    var gutil =", "    let arr_len = arr.length;\n    let arr_len_1 = arr_len - 1;\n\
    \    let arr_len_2 = arr_len - 2;\n    let arr_len_3 = arr_len - 3;\n    let arr_len_4\
    \ = arr_len - 4;\n    let arr_len_5 = arr_len - 5;\n    let arr_len_6 = arr_len\
    \ - 6;\n    let arr_len_7 = arr_len - 7;\n    let arr_len_8 = arr_len - 8;\n \
    \   let arr_len_9 = arr_len - 9;\n    let arr_len_10 = arr_len - 10;\n    let\
    \ arr_len_11 = arr_len - 11;\n    let arr_len_12 = arr_len - 12;\n    let arr_len_13\
    \ = arr_len - 13;\n    let arr_len_14 = arr_len - 14;\n    let arr_len_15 = arr_len\
    \ - 15;\n    let arr_len_16 = arr_len - 16;\n    let arr_len_17 = arr_len - 17;\n\
    \    let arr_len_18 = arr_len - 18;\n    let arr_len_19 = arr_len - 19;\n    let\
    \ arr_len_20 = arr_len - 20;\n    let arr_len_21 = arr_len - 21;\n    let arr_len_22\
    \ = arr_len - 22;\n    let arr_len_23 = arr_len - 23;\n    let arr_len_24 = arr_len\
    \ - 24;\n    let arr_len_25 = arr_len - 25;\n    let arr_len_26 = arr_len - 26;\n\
    \    let arr_len_27 = arr_len - 27;\n    let arr_len_28 = arr_len - 28;\n    let\
    \ arr_len_29 = arr_len - 29;\n    let arr_len_30 = arr_len - 30;\n    let arr_len_31\
    \ = arr_len - 31;\n    let arr_len_32 = arr_len - 32;\n    let arr_len_33 = arr_len\
    \ - 33;\n    let arr_len_", "    let max = arr[0];\n    let maxIndex = 0;\n  \
    \  for(let i = 1; i < k; i++){\n        if(arr[i] > max){\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    let result = [];\n    for(let\
    \ i = 0; i < k; i++){\n        result.push(arr[i]);\n    }\n    result.splice(maxIndex,\
    \ 1);\n    return result;\n}\n<|endoftext|><|javascript|>// Copyright (c) 2012\
    \ Ecma International.  All rights reserved.", "    var max = arr[0];\n    var\
    \ result = [];\n    for(var i = 0; i < k; i++){\n        if(max < arr[i]){\n \
    \           max = arr[i];\n        }\n        result.push(arr[i]);\n    }\n  \
    \  return result;\n}\n<|endoftext|><|javascript|>var path = require('path');\n\
    var webpack = require('webpack');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\n\
    var ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar autoprefixer\
    \ = require('autoprefixer');\n\nmodule.exports = {\n  entry: [\n    'webpack-dev-server/client?http://localhost:3000',\n\
    \    'webpack/hot/only-dev-server',\n    './src/index'\n  ],\n  output: {\n  \
    \  path: path.join(__dirname, 'dist'),\n    filename: 'bundle.js',\n    publicPath:\
    \ '/'\n  },\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),\n   \
    \ new HtmlWebpackPlugin({\n      template: 'src/index.html',\n      inject: 'body',\n\
    \      filename: 'index.html'\n    }),\n    new ExtractTextPlugin('style.css',\
    \ { allChunks: true })\n  ],\n  module: {\n    loaders: [{\n      test: /\\.js$/,\n\
    \      loaders: ['react-hot', 'babel'],\n      include: path.join(__dirname, 'src')\n\
    \    }, {\n      test: /\\.css$/,\n      loader: ExtractTextPlugin.extract('style-loader',\
    \ 'css-loader!postcss-loader')\n    }, {\n      test: /\\.eot(\\?v=\\d+\\.\\d+\\\
    .\\d+)?$/,\n      loader: 'file'\n    }, {\n      test: /\\.(woff|woff2)$/,\n\
    \      loader: 'url?prefix=font/&limit=5000'\n    }, {\n      test: /\\.ttf(\\\
    ?v=\\d+\\.\\d+\\.\\d+)?$", "    let max = arr[0];\n    let maxIndex = 0;\n   \
    \ for(let i = 0; i < k; i++){\n        if(arr[i] > max){\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    let result = [];\n    for(let\
    \ i = 0; i < k; i++){\n        result.push(arr[i]);\n    }\n    result.splice(maxIndex,\
    \ 1);\n    return result;\n}\n<|endoftext|><|javascript|>/*\n * Copyright (c)\
    \ Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\
    \ See License.txt in the project root for\n * license information.\n *\n * Code\
    \ generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect\
    \ behavior and will be lost if the code is\n * regenerated.\n */\n\n'use strict';\n\
    \nconst models = require('./index');\n", "    let max = arr[0];\n    let result\
    \ = [max];\n    for(let i = 1; i < k; i++){\n        if(arr[i] > max){\n     \
    \       max = arr[i];\n            result = [arr[i]];\n        }else if(arr[i]\
    \ === max){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n<|endoftext|><|javascript|>var path = require('path');\nvar webpack = require('webpack');\n\
    var HtmlWebpackPlugin = require('html-webpack-plugin');\nvar ExtractTextPlugin\
    \ = require('extract-text-webpack-plugin');\nvar autoprefixer = require('autoprefixer');\n\
    \nmodule.exports = {\n  entry: [\n    'webpack-dev-server/client?http://localhost:3000',\n\
    \    'webpack/hot/only-dev-server',\n    './src/index'\n  ],\n  output: {\n  \
    \  path: path.join(__dirname, 'dist'),\n    filename: 'bundle.js',\n    publicPath:\
    \ '/'\n  },\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),\n   \
    \ new webpack.NoErrorsPlugin(),\n    new HtmlWebpackPlugin({\n      template:\
    \ 'src/index.html',\n      inject: 'body',\n      filename: 'index.html'\n   \
    \ }),\n    new ExtractTextPlugin('styles.css', {\n      allChunks: true\n    }),\n\
    \    new webpack.DefinePlugin({\n      'process.env': {\n        'NODE_ENV': JSON.stringify('development')\n\
    \      }\n    }),\n    new webpack.LoaderOptionsPlugin({\n      minimize: true,\n\
    \      debug: true\n    }),\n    new webpack.optimize.UglifyJsPlugin({\n     \
    \ compress: {\n        warnings: false\n      }\n    }),\n    new webpack.optimize.OccurenceOrderPlugin()\n\
    \  ],\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n       \
    \ loaders: ['react-hot', '", "  let max = arr[0];\n  let result = [max];\n  for(let\
    \ i = 1; i < k; i++){\n    if(arr[i] > max){\n      max = arr[i];\n      result\
    \ = [max];\n    }else{\n      result.push(arr[i]);\n    }\n  }\n  return result;\n\
    }\n<|endoftext|><|javascript|>var fs = require('fs');\nvar path = require('path');\n\
    var _ = require('lodash');\nvar async = require('async');\nvar moment = require('moment');\n\
    var util = require('util');\nvar EventEmitter = require('events').EventEmitter;\n\
    var util = require('util');\nvar crypto = require('crypto');\nvar request = require('request');\n\
    var url = require('url');\nvar querystring = require('querystring');\nvar xml2js\
    \ = require('xml2js');\nvar xmlParser = new xml2js.Parser({\n    explicitArray:\
    \ false,\n    ignoreAttrs: false,\n    normalizeTags: true,\n    async: false\n\
    });\n\nvar config = require('./config');\n\nvar logger = require('./logger');\n\
    \nvar api = {};\n\napi.get = function(url, callback) {\n    request.get({\n  \
    \      url: url,\n        json: true\n    }, function(error, response, body) {\n\
    \        if (error) {\n            logger.error(error);\n            return callback(error);\n\
    \        }\n        if (response.statusCode !== 200) {\n            logger.error('status\
    \ code: ' + response.statusCode);\n            return callback(new Error('status\
    \ code: ' + response.statusCode));\n        }\n        callback(null, body);\n\
    \    });\n};\n\napi.post = function(url, data, callback) {\n    request.post({\n\
    \        url: url,\n        json: true,\n        body: data\n    }, function(error,\
    \ response, body) {\n        if (error) {\n            logger.error(error);\n\
    \            return callback(error);\n        }\n        if (response.statusCode\
    \ !== 200) {\n            logger", "    let max = arr[0];\n    let result = [];\n\
    \    for(let i = 0; i < k; i++){\n        if(arr[i] > max){\n            max =\
    \ arr[i];\n            result = [arr[i]];\n        }else if(arr[i] === max){\n\
    \            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n<|endoftext|><|javascript|>import\
    \ React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport {\
    \ action } from '@storybook/addon-actions';\nimport { withKnobs, boolean, text\
    \ } from '@storybook/addon-knobs';\nimport { withInfo } from '@storybook/addon-info';\n\
    \nimport { Button, ButtonGroup } from '../Button';\nimport { ButtonGroupInfo }\
    \ from '../ButtonGroupInfo';\nimport { ButtonGroupExample } from '../ButtonGroupExample';\n\
    \nstoriesOf('ButtonGroup', module)\n  .addDecorator(withKnobs)\n  .addDecorator(withInfo)\n\
    \  .add(\n    'Default',\n    () => (\n      <ButtonGroup>\n        <Button>Button\
    \ 1</Button>\n        <Button>Button 2</Button>\n        <Button>Button 3</Button>\n\
    \      </ButtonGroup>\n    ),\n    { info: { text: 'ButtonGroup' } }\n  )\n  .add(\n\
    \    'ButtonGroupInfo',\n    () => (\n      <ButtonGroupInfo>\n        <Button>Button\
    \ 1</Button>\n        <Button>Button 2</Button>\n        <Button>Button 3</Button>\n\
    \      </ButtonGroupInfo>\n    ),\n    { info: { text: 'ButtonGroupInfo' } }\n\
    \  )\n  .add(\n    'ButtonGroupExample',\n    () => (\n      <ButtonGroupExample>\n\
    \        <Button>Button 1</Button>\n        <Button>Button 2</Button>\n      \
    \  <Button>Button 3</Button>\n      </ButtonGroupExample>\n    ),\n    { info:\
    \ { text: 'ButtonGroupExample' } }\n  );\n<|endoftext|><|javascript|>import {\n\
    \  moduleForComponent,\n  test\n} from", "  var max = arr[0];\n  var max_index\
    \ = 0;\n  for(var i=1; i<k; i++){\n    if(arr[i] > max){\n      max = arr[i];\n\
    \      max_index = i;\n    }\n  }\n  var result = [];\n  for(var i=0; i<k; i++){\n\
    \    result.push(arr[i]);\n  }\n  result[max_index] = max;\n  return result;\n\
    }\n<|endoftext|><|javascript|>var searchData=\n[\n  ['_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5",
  "  var result = [];\n  var max = arr[0];\n  for(var i = 1; i < arr.length; i++){\n\
    \    if(arr[i] > max){\n      max = arr[i];\n    }\n  }\n  for(var i = 0; i <\
    \ k; i++){\n    result.push(max);\n  }\n  return result;\n}\n<|endoftext|><|javascript|>import\
    \ React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport {\
    \ action } from '@storybook/addon-actions';\nimport { withKnobs, boolean, text,\
    \ number } from '@storybook/addon-knobs';\nimport { withInfo } from '@storybook/addon-info';\n\
    \nimport { Button } from '../Button';\nimport { ButtonGroup } from '../ButtonGroup';\n\
    import { ButtonToolbar } from '../ButtonToolbar';\nimport { ButtonToolbarGroup\
    \ } from '../ButtonToolbarGroup';\nimport { ButtonToolbarGroupButton } from '../ButtonToolbarGroupButton';\n\
    \nconst stories = storiesOf('Buttons', module);\n\nstories.addDecorator(withKnobs);\n\
    stories.addDecorator(withInfo);\n\nstories.add('Button', () => (\n  <Button onClick={action('clicked')}>Click\
    \ Me</Button>\n));\n\nstories.add('ButtonGroup', () => (\n  <ButtonGroup>\n  \
    \  <Button>Click Me</Button>\n  </ButtonGroup>\n));\n\nstories.add('ButtonToolbar',\
    \ () => (\n  <ButtonToolbar>\n    <Button>Click Me</Button>\n  </ButtonToolbar>\n\
    ));\n\nstories.add('ButtonToolbarGroup', () => (\n  <ButtonToolbarGroup>\n   \
    \ <ButtonToolbarGroupButton>Click Me</ButtonToolbarGroupButton>\n  </ButtonToolbarGroup>\n\
    ));\n<|endoftext|><|javascript|>'use strict';\n\nvar _ = require('lodash');\n\
    var async = require('async');\nvar request = require('request');\nvar cheerio\
    \ = require('cheerio');\nvar moment = require('moment');\n\nvar config = require('../config');\n\
    var db = require", "    let max = arr[0];\n    let result = [max];\n    for(let\
    \ i = 1; i < k; i++){\n        if(arr[i] > max){\n            max = arr[i];\n\
    \            result = [arr[i]];\n        }else if(arr[i] === max){\n         \
    \   result.push(arr[i]);\n        }\n    }\n    return result;\n}\n<|endoftext|><|javascript|>import\
    \ {\n  GraphQLObjectType,\n  GraphQLString,\n  GraphQLInt,\n  GraphQLNonNull,\n\
    \  GraphQLList,\n  GraphQLBoolean,\n  GraphQLID,\n  GraphQLField\n} from 'graphql';\n\
    \nimport {\n  GraphQLObject,\n  GraphQLField\n} from 'graphql-relay';\n\nimport\
    \ {\n  UserType,\n  User,\n  UserConnection\n} from '../types';\n\nimport {\n\
    \  getUser,\n  getUserByEmail,\n  getUserByUsername\n} from '../../services/user';\n\
    \nexport default new GraphQLObjectType({\n  name: 'User',\n  description: 'A user\
    \ of the app',\n  fields: () => ({\n    id: {\n      type: new GraphQLNonNull(GraphQLID),\n\
    \      description: 'The id of the user'\n    },\n    email: {\n      type: new\
    \ GraphQLNonNull(GraphQLString),\n      description: 'The email of the user'\n\
    \    },\n    username: {\n      type: new GraphQLNonNull(GraphQLString),\n   \
    \   description: 'The username of the user'\n    },\n    firstName: {\n      type:\
    \ new GraphQLNonNull(GraphQLString),\n      description: 'The first name of the\
    \ user'\n    },\n    lastName: {\n      type: new GraphQLNonNull(GraphQLString),\n\
    \      description: 'The last name of the user'\n    },\n    isAdmin: {\n    \
    \  type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Whether the\
    \ user is an admin'\n    },\n    isActive: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n\
    \      description: '", "    var max = arr[0];\n    var result = [];\n    for(var\
    \ i = 1; i < k; i++){\n        if(arr[i] > max){\n            max = arr[i];\n\
    \            result = [arr[i]];\n        }else if(arr[i] == max){\n          \
    \  result.push(arr[i]);\n        }\n    }\n    return result;\n}\n<|endoftext|><|javascript|>var\
    \ gulp = require('gulp');\nvar concat = require('gulp-concat');\nvar uglify =\
    \ require('gulp-uglify');\nvar minifyCss = require('gulp-minify-css');\nvar rename\
    \ = require('gulp-rename');\nvar sourcemaps = require('gulp-sourcemaps');\nvar\
    \ browserify = require('browserify');\nvar babelify = require('babelify');\nvar\
    \ source = require('vinyl-source-stream');\nvar buffer = require('vinyl-buffer');\n\
    var gutil = require('gulp-util');\nvar source = require('vinyl-source-stream');\n\
    var buffer = require('vinyl-buffer');\nvar gutil = require('gulp-util');\nvar\
    \ source = require('vinyl-source-stream');\nvar buffer = require('vinyl-buffer');\n\
    var gutil = require('gulp-util');\nvar source = require('vinyl-source-stream');\n\
    var buffer = require('vinyl-buffer');\nvar gutil = require('gulp-util');\nvar\
    \ source = require('vinyl-source-stream');\nvar buffer = require('vinyl-buffer');\n\
    var gutil = require('gulp-util');\nvar source = require('vinyl-source-stream');\n\
    var buffer = require('vinyl-buffer');\nvar gutil = require('gulp-util');\nvar\
    \ source = require('vinyl-source-stream');\nvar buffer = require('vinyl-buffer');\n\
    var gutil = require('gulp-util');\nvar source = require('vinyl-source-stream');\n\
    var buffer = require('vinyl-buffer');\nvar gutil = require('gulp-util');\nvar\
    \ source = require('vinyl-source-stream');\nvar buffer = require('vinyl", "  \
    \  let max = arr[0];\n    let maxIndex = 0;\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] > max){\n            max = arr[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    let result = [];\n    for(let i = 0; i < k; i++){\n\
    \        result.push(arr[maxIndex]);\n        maxIndex = maxIndex + 1;\n     \
    \   if(maxIndex >= arr.length){\n            maxIndex = 0;\n        }\n    }\n\
    \    return result;\n}\n<|endoftext|><|javascript|>// Copyright 2009 the Sputnik\
    \ authors.  All rights reserved.", "    let max = arr[0];\n    let maxIndex =\
    \ 0;\n    for(let i = 1; i < k; i++){\n        if(arr[i] > max){\n           \
    \ max = arr[i];\n            maxIndex = i;\n        }\n    }\n    let result =\
    \ [];\n    for(let i = 0; i < k; i++){\n        result.push(arr[i]);\n    }\n\
    \    result[maxIndex] = max;\n    return result;\n}\n<|endoftext|><|javascript|>import\
    \ React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators\
    \ } from 'redux';\nimport { Link } from 'react-router';\nimport { fetchPosts }\
    \ from '../actions/index';\nimport PostList from '../components/PostList';\nimport\
    \ { getPosts } from '../selectors/index';\n\nclass PostsIndex extends React.Component\
    \ {\n  componentDidMount() {\n    this.props.fetchPosts();\n  }\n\n  render()\
    \ {\n    const { posts, fetchPosts } = this.props;\n    return (\n      <div>\n\
    \        <h1>Posts</h1>\n        <PostList posts={posts} />\n        <Link to=\"\
    /posts/new\" className=\"btn btn-default\">New Post</Link>\n        <Link to=\"\
    /posts/:id\" className=\"btn btn-default\">View Post</Link>\n        <button className=\"\
    btn btn-default\" onClick={fetchPosts}>Fetch Posts</button>\n      </div>\n  \
    \  );\n  }\n}\n", "    let max = arr[0];\n    let maxIndex = 0;\n    for(let i\
    \ = 1; i < k; i++){\n        if(arr[i] > max){\n            max = arr[i];\n  \
    \          maxIndex = i;\n        }\n    }\n    let result = [];\n    for(let\
    \ i = 0; i < k; i++){\n        result.push(arr[i]);\n    }\n    result[maxIndex]\
    \ = max;\n    return result;\n}\n<|endoftext|><|javascript|>import React from\
    \ 'react';\nimport { storiesOf } from '@storybook/react';\nimport { action } from\
    \ '@storybook/addon-actions';\nimport { withKnobs, number, text } from '@storybook/addon-knobs';\n\
    import { withInfo } from '@storybook/addon-info';\n\nimport { Input, InputGroup,\
    \ InputGroupAddon } from '../Input';\nimport { InputGroupAddonButton } from '../InputGroupAddon';\n\
    \nconst stories = storiesOf('InputGroupAddon', module);\n\nstories.addDecorator(withKnobs);\n\
    stories.addDecorator(withInfo);\n\nstories.add('InputGroupAddon', () => (\n  <InputGroup>\n\
    \    <InputGroupAddon>\n      <InputGroupAddonButton>Addon</InputGroupAddonButton>\n\
    \    </InputGroupAddon>\n  </InputGroup>\n));\n\nstories.add('InputGroupAddon\
    \ with label', () => (\n  <InputGroup>\n    <InputGroupAddon label=\"Addon\">\n\
    \      <InputGroupAddonButton>Addon</InputGroupAddonButton>\n    </InputGroupAddon>\n\
    \  </InputGroup>\n));\n\nstories.add('InputGroupAddon with number', () => (\n\
    \  <InputGroup>\n    <InputGroupAddon>\n      <InputGroupAddonButton>Addon</InputGroupAddonButton>\n\
    \    </InputGroupAddon>\n  </InputGroup>\n));\n\nstories.add('InputGroupAddon\
    \ with text', () => (\n  <InputGroup>\n    <InputGroupAddon>\n      <InputGroupAddonButton>Addon</InputGroupAddonButton",
  "    let max = arr[0];\n    let max_index = 0;\n    for(let i = 1; i < k; i++){\n\
    \        if(arr[i] > max){\n            max = arr[i];\n            max_index =\
    \ i;\n        }\n    }\n    let result = [];\n    for(let i = 0; i < k; i++){\n\
    \        result.push(arr[i]);\n    }\n    result.splice(max_index, 1);\n    return\
    \ result;\n}\n<|endoftext|><|javascript|>import React from 'react';\nimport {\
    \ storiesOf } from '@storybook/react';\nimport { action } from '@storybook/addon-actions';\n\
    import { withKnobs, boolean, text } from '@storybook/addon-knobs';\n\nimport {\n\
    \  withKnobs,\n  boolean,\n  text,\n  number,\n  array,\n  object,\n  select,\n\
    \  date,\n  dateTime,\n  object,\n  arrayOf,\n  instanceOf,\n  shape,\n  oneOf,\n\
    \  any,\n  enum,\n  arrayOf,\n  instanceOf,\n  shape,\n  oneOf,\n  any,\n  enum,\n\
    \  arrayOf,\n  instanceOf,\n  shape,\n  oneOf,\n  any,\n  enum,\n  arrayOf,\n\
    \  instanceOf,\n  shape,\n  oneOf,\n  any,\n  enum,\n  arrayOf,\n  instanceOf,\n\
    \  shape,\n  oneOf,\n  any,\n  enum,\n  arrayOf,\n  instanceOf,\n  shape,\n  oneOf,\n\
    \  any,\n  enum,\n  arrayOf,\n  instanceOf,\n  shape,\n  oneOf,\n  any,\n  enum,\n\
    \  arrayOf,\n  instanceOf,\n  shape,\n  oneOf,\n  any,\n  enum,\n  arrayOf,\n\
    \  instanceOf,\n  shape,\n  oneOf,\n  any,\n  enum,\n  arrayOf,\n  instanceOf,\n\
    \  shape,\n  oneOf,\n  any,\n  enum,\n  arrayOf,\n  instanceOf"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
