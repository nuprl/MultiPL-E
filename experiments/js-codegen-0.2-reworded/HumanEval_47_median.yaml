name: HumanEval_47_median
language: js
prompt: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n\
  // 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
  \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
  \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
completions: ["  if(l.length === 0){\n    return undefined;\n  }\n  if(l.length ===\
    \ 1){\n    return l[0];\n  }\n  var sorted = l.sort(function(a, b){\n    return\
    \ a - b;\n  });\n  var middle = Math.floor(l.length/2);\n  if(l.length % 2 ===\
    \ 0){\n    return (sorted[middle] + sorted[middle-1])/2;\n  }\n  return sorted[middle];\n\
    }\n<|endoftext|><|javascript|>import {\n  GraphQLObjectType,\n  GraphQLString,\n\
    \  GraphQLNonNull,\n  GraphQLInt,\n  GraphQLID\n} from 'graphql';\n\nimport {\n\
    \  connectionArgs,\n  connectionDefinitions,\n  connectionFromArray,\n  fromGlobalId,\n\
    \  globalIdField,\n  mutationWithClientMutationId,\n  nodeDefinitions\n} from\
    \ 'graphql-relay';\n\nimport {\n  UserType,\n  User,\n  UserConnection,\n  UserConnectionType\n\
    } from '../types';\n\nconst { nodeInterface, nodeField } = nodeDefinitions(\n\
    \  (globalId) => {\n    const { type, id } = fromGlobalId(globalId);\n    if (type\
    \ === 'User') {\n      return User.get(id);\n    }\n  }\n);\n\nconst UserType\
    \ = new GraphQLObjectType({\n  name: 'User',\n  description: 'A user of the app',\n\
    \  fields: () => ({\n    id: globalIdField('User'),\n    name: { type: GraphQLString\
    \ },\n    email: { type: GraphQLString },\n    password: { type: GraphQLString\
    \ },\n    avatar: { type: GraphQLString },\n    createdAt: { type: GraphQLString\
    \ },\n    updatedAt: { type: GraphQLString },\n    isAdmin: { type: GraphQLInt\
    \ },\n    isActive: { type: GraphQLInt },\n    isVerified: { type: GraphQLInt\
    \ },\n    isBanned: { type: GraphQLInt },\n    isBlocked: { type: GraphQLInt },\n\
    \    isDeleted: { type: GraphQLInt", "    var sorted = l.sort(function(a, b){\n\
    \        return a - b;\n    });\n    var half = Math.floor(l.length/2);\n    if(l.length\
    \ % 2 == 1){\n        return sorted[half];\n    }\n    else{\n        return (sorted[half-1]\
    \ + sorted[half])/2;\n    }\n}\n", "  if(l.length === 0){\n    return 0;\n  }\n\
    \  var sorted = l.sort(function(a, b){\n    return a - b;\n  });\n  var middle\
    \ = Math.floor(sorted.length/2);\n  if(sorted.length % 2 === 0){\n    return (sorted[middle]\
    \ + sorted[middle-1]) / 2;\n  }\n  return sorted[middle];\n}\n", "\tvar arr =\
    \ l.sort(function(a, b){\n\t\treturn a - b;\n\t});\n\tvar len = arr.length;\n\t\
    if(len % 2 == 0){\n\t\treturn (arr[len/2] + arr[len/2 - 1]) / 2;\n\t}\n\treturn\
    \ arr[len/2];\n}\n", "  if(l.length === 0) return null;\n  var sorted = l.sort(function(a,b){return\
    \ a-b});\n  var mid = Math.floor(l.length/2);\n  if(l.length % 2 === 0) return\
    \ (sorted[mid] + sorted[mid-1])/2;\n  else return sorted[mid];\n}\n", "  var arr\
    \ = l.sort(function(a, b){\n    return a - b;\n  });\n  var middle = Math.floor(arr.length/2);\n\
    \  if(arr.length%2 === 0){\n    return (arr[middle] + arr[middle-1])/2;\n  }\n\
    \  else{\n    return arr[middle];\n  }\n}\n", "    var arr = l.sort(function(a,b){return\
    \ a-b});\n    var n = arr.length;\n    if(n % 2 == 1){\n        return arr[Math.floor(n/2)];\n\
    \    }else{\n        return (arr[Math.floor(n/2)] + arr[Math.ceil(n/2)])/2;\n\
    \    }\n}\n", "  var arr = l.slice();\n  arr.sort(function(a, b){\n    return\
    \ a - b;\n  });\n  var len = arr.length;\n  if(len % 2 === 0){\n    return (arr[len/2]\
    \ + arr[len/2 - 1]) / 2;\n  }\n  else{\n    return arr[len/2];\n  }\n}\n", " \
    \ var len = l.length;\n  if(len === 0){\n    return null;\n  }\n  if(len === 1){\n\
    \    return l[0];\n  }\n  var sorted = l.sort(function(a, b){\n    return a -\
    \ b;\n  });\n  var middle = Math.floor(len / 2);\n  if(len % 2 === 0){\n    return\
    \ (sorted[middle] + sorted[middle - 1]) / 2;\n  }\n  return sorted[middle];\n\
    }\n", "  if(l.length === 0) return null;\n  if(l.length === 1) return l[0];\n\
    \  if(l.length === 2) return (l[0] + l[1]) / 2;\n  var mid = Math.floor(l.length\
    \ / 2);\n  var left = l.slice(0, mid);\n  var right = l.slice(mid);\n  return\
    \ (median(left) + median(right)) / 2;\n}\n", "    var arr = l.sort(function(a,\
    \ b){\n        return a - b;\n    });\n    var len = arr.length;\n    if(len %\
    \ 2 == 0){\n        return (arr[len/2] + arr[len/2 - 1]) / 2;\n    }\n    else{\n\
    \        return arr[len/2];\n    }\n}\n", "  if(l.length === 0) return undefined;\n\
    \  if(l.length === 1) return l[0];\n  if(l.length === 2) return (l[0] + l[1])\
    \ / 2;\n  var mid = Math.floor(l.length / 2);\n  if(l.length % 2 === 0) return\
    \ (l[mid] + l[mid - 1]) / 2;\n  else return l[mid];\n}\n", "  var arr = l.sort(function(a,\
    \ b){return a-b});\n  var len = arr.length;\n  if(len % 2 === 0){\n    return\
    \ (arr[len/2] + arr[len/2-1])/2;\n  }\n  return arr[len/2];\n}\n", "  var arr\
    \ = l.sort(function(a, b){\n    return a - b;\n  });\n  var len = arr.length;\n\
    \  if(len % 2 === 0){\n    return (arr[len/2] + arr[len/2 - 1])/2;\n  }\n  return\
    \ arr[len/2];\n}\n<|endoftext|><|javascript|>var searchData=\n[\n  ['_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f",
  "  var len = l.length;\n  if(len === 0){\n    return NaN;\n  }\n  if(len === 1){\n\
    \    return l[0];\n  }\n  var sorted = l.sort(function(a, b){\n    return a -\
    \ b;\n  });\n  var mid = Math.floor(len/2);\n  if(len % 2 === 0){\n    return\
    \ (sorted[mid] + sorted[mid-1])/2;\n  }\n  return sorted[mid];\n}\n", "\tvar len\
    \ = l.length;\n\tif(len == 0){\n\t\treturn 0;\n\t}\n\tif(len == 1){\n\t\treturn\
    \ l[0];\n\t}\n\tvar sorted = l.sort(function(a, b){\n\t\treturn a - b;\n\t});\n\
    \tvar mid = Math.floor(len/2);\n\tif(len % 2 == 0){\n\t\treturn (sorted[mid] +\
    \ sorted[mid-1])/2;\n\t}\n\treturn sorted[mid];\n}\n", "    var sorted = l.sort(function(a,\
    \ b){\n        return a - b;\n    });\n    var half = Math.floor(l.length / 2);\n\
    \    if(l.length % 2 == 0){\n        return (sorted[half] + sorted[half - 1])\
    \ / 2;\n    }\n    return sorted[half];\n}\n", "  if(l.length === 0){\n    return\
    \ null;\n  }\n  var sorted = l.sort(function(a, b){\n    return a - b;\n  });\n\
    \  var middle = Math.floor(sorted.length / 2);\n  if(sorted.length % 2 === 0){\n\
    \    return (sorted[middle] + sorted[middle - 1]) / 2;\n  }\n  return sorted[middle];\n\
    }\n", "  var sorted = l.sort(function(a, b){\n    return a - b;\n  });\n  var\
    \ middle = Math.floor(l.length/2);\n  if(l.length % 2 === 0){\n    return (sorted[middle]\
    \ + sorted[middle-1])/2;\n  }\n  return sorted[middle];\n}\n", "\tvar sorted =\
    \ l.sort(function(a, b){\n\t\treturn a - b;\n\t});\n\tvar middle = Math.floor(l.length/2);\n\
    \tif(l.length % 2 == 0){\n\t\treturn (sorted[middle] + sorted[middle-1])/2;\n\t\
    }\n\treturn sorted[middle];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
