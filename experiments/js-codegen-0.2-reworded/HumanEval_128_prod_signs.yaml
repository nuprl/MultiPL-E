name: HumanEval_128_prod_signs
language: js
prompt: "//You are given an array arr of integers and you need to return\n// sum of\
  \ magnitudes of integers multiplied by product of all signs\n// of each number in\
  \ the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n\
  // Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n\
  // 0\n// >>> prod_signs([])\n// None\nfunction prod_signs(arr){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
  \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
  \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
  \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
  \ 1, 1, 0]),0);\n}\n\ntest();"
completions: ["    var result = 0;\n    for(var i = 0; i < arr.length; i++){\n   \
    \     result += arr[i] * (arr[i] > 0 ? 1 : -1);\n    }\n    return result;\n}\n",
  "  if(arr.length === 0) return undefined;\n  let sign = 1;\n  let product = 1;\n\
    \  let sum = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] === 0)\
    \ continue;\n    if(arr[i] > 0) sign = 1;\n    else sign = -1;\n    product *=\
    \ sign;\n    sum += Math.abs(arr[i]) * product;\n  }\n  return sum;\n}\n", " \
    \   if(arr.length === 0) return undefined;\n    let result = 1;\n    for(let i\
    \ = 0; i < arr.length; i++){\n        result *= arr[i] > 0 ? 1 : -1;\n    }\n\
    \    return result;\n}\n", "    var sign = 1;\n    var result = 0;\n    for(var\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n            result +=\
    \ sign;\n        }\n        if(arr[i] < 0){\n            result -= sign;\n   \
    \     }\n        sign *= arr[i];\n    }\n    return result;\n}\n<|endoftext|><|javascript|>var\
    \ _ = require('lodash');\nvar async = require('async');\nvar fs = require('fs');\n\
    var path = require('path');\nvar util = require('util');\nvar yaml = require('js-yaml');\n\
    \nvar config = require('../config');\nvar logger = require('../logger');\nvar\
    \ utils = require('../utils');\n\nvar configFile = path.join(config.get('root'),\
    \ 'config.yml');\n\nvar configCache = {};\n", "    var sign = 1;\n    var sum\
    \ = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n  \
    \          sum += arr[i] * sign;\n        }\n        else if(arr[i] < 0){\n  \
    \          sum -= arr[i] * sign;\n        }\n        else{\n            sum +=\
    \ arr[i] * sign;\n        }\n        sign *= arr[i];\n    }\n    return sum;\n\
    }\n", "  if(arr.length === 0){\n    return undefined;\n  }\n  var sign = 1;\n\
    \  var product = 1;\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i] ===\
    \ 1){\n      product *= sign;\n    }\n    if(arr[i] === -1){\n      product *=\
    \ -1;\n    }\n    if(arr[i] === 0){\n      product *= 0;\n    }\n    sign *= arr[i];\n\
    \  }\n  return product;\n}\n", "    var sum = 0,\n        sign = 1,\n        prod\
    \ = 1,\n        i;\n    for(i = 0; i < arr.length; i++){\n        if(arr[i] ===\
    \ 0){\n            continue;\n        }\n        sum += Math.abs(arr[i]);\n  \
    \      if(arr[i] < 0){\n            sign = -1;\n        }\n        prod *= sign;\n\
    \    }\n    return sum * prod;\n}\n", "    var sign = 1;\n    var result = 0;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   result += sign;\n        }\n        else if(arr[i] < 0){\n            result\
    \ -= sign;\n        }\n        sign *= arr[i];\n    }\n    return result;\n}\n\
    <|endoftext|><|javascript|>// Copyright (c) 2012 Ecma International.  All rights\
    \ reserved.", "    var sign = 1;\n    var result = 0;\n    for(var i = 0; i <\
    \ arr.length; i++){\n        if(arr[i] === 0){\n            continue;\n      \
    \  }\n        if(arr[i] > 0){\n            sign = 1;\n        }\n        else\
    \ if(arr[i] < 0){\n            sign = -1;\n        }\n        result += arr[i]\
    \ * sign;\n    }\n    return result;\n}\n<|endoftext|><|javascript|>/*\n * Copyright\
    \ (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2\
    \ Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the\
    \ \"License\"); you may not use this file except\n * in compliance with the License.\n\
    \ * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n\
    \ *\n * Unless required by applicable law or agreed to in writing,\n * software\
    \ distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT\
    \ WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the\
    \ License for the\n * specific language governing permissions and limitations\n\
    \ * under the License.\n */\n\nvar render = function (theme, data, meta, require)\
    \ {\n    theme('index', {\n        title: 'WSO2 Developer Portal',\n        header:\
    \ [{\n            partial: 'header',\n            context: data\n        }],\n\
    \        ribbon: [{\n            partial: 'ribbon',\n            context: data\n\
    \        }],\n        leftnav: [{\n            partial: 'left-nav',\n        \
    \    context: data\n        }],\n        listassets: [{\n            partial:\
    \ 'list-assets',\n            context: data\n        }],\n        rightcontent:\
    \ [{\n            partial: 'right-content',\n            context: data\n     \
    \   }]\n    });\n};<|endoftext|><|javascript|>/**\n * @author       Richard Davey\
    \ <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license\
    \      {@link https://opensource.org", "    var sum = 0;\n    var product = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] === 0){\n       \
    \     continue;\n        }\n        sum += Math.abs(arr[i]);\n        product\
    \ *= (arr[i] > 0 ? 1 : -1);\n    }\n    return sum * product;\n}\n<|endoftext|><|javascript|>'use\
    \ strict';\n\nvar _ = require('lodash');\nvar fs = require('fs');\nvar path =\
    \ require('path');\nvar util = require('util');\nvar chalk = require('chalk');\n\
    var yeoman = require('yeoman-generator');\nvar yosay = require('yosay');\nvar\
    \ mkdirp = require('mkdirp');\nvar prompt = require('prompt');\nvar chalk = require('chalk');\n\
    var _s = require('underscore.string');\nvar _s2 = require('underscore.string');\n\
    var _s3 = require('underscore.string');\nvar _s4 = require('underscore.string');\n\
    var _s5 = require('underscore.string');\nvar _s6 = require('underscore.string');\n\
    var _s7 = require('underscore.string');\nvar _s8 = require('underscore.string');\n\
    var _s9 = require('underscore.string');\nvar _s10 = require('underscore.string');\n\
    var _s11 = require('underscore.string');\nvar _s12 = require('underscore.string');\n\
    var _s13 = require('underscore.string');\nvar _s14 = require('underscore.string');\n\
    var _s15 = require('underscore.string');\nvar _s16 = require('underscore.string');\n\
    var _s17 = require('underscore.string');\nvar _s18 = require('underscore.string');\n\
    var _s19 = require('underscore.string');\nvar _s20 = require('underscore.string');\n\
    var _s21 = require('underscore.string');\nvar _s22 = require('underscore.string');\n\
    var _s23 = require('underscore.string');\nvar _s24 = require('underscore.string');",
  "    var result = 0;\n    for(var i=0; i<arr.length; i++){\n        result += arr[i]\
    \ * (arr[i] > 0 ? 1 : -1);\n    }\n    return result;\n}\n", "    var result =\
    \ 0;\n    for(var i=0; i<arr.length; i++){\n        result += arr[i]*(arr[i]>0\
    \ ? 1 : -1);\n    }\n    return result;\n}\n", "  if(arr.length === 0) return\
    \ undefined;\n  let result = 1;\n  let sign = 1;\n  for(let i = 0; i < arr.length;\
    \ i++){\n    if(arr[i] === 0) continue;\n    if(arr[i] > 0) sign = 1;\n    else\
    \ sign = -1;\n    result *= arr[i] * sign;\n  }\n  return result;\n}\n<|endoftext|><|javascript|>'use\
    \ strict';\n\nvar _ = require('lodash');\nvar moment = require('moment');\nvar\
    \ Promise = require('bluebird');\nvar fs = require('fs');\nvar path = require('path');\n\
    var _path = require('path');\nvar _fs = require('fs');\nvar _path2 = require('path');\n\
    var _fs2 = require('fs');\nvar _path3 = require('path');\nvar _fs3 = require('fs');\n\
    var _path4 = require('path');\nvar _fs4 = require('fs');\nvar _path5 = require('path');\n\
    var _fs5 = require('fs');\nvar _path6 = require('path');\nvar _fs6 = require('fs');\n\
    var _path7 = require('path');\nvar _fs7 = require('fs');\nvar _path8 = require('path');\n\
    var _fs8 = require('fs');\nvar _path9 = require('path');\nvar _fs9 = require('fs');\n\
    var _path10 = require('path');\nvar _fs10 = require('fs');\nvar _path11 = require('path');\n\
    var _fs11 = require('fs');\nvar _path12 = require('path');\nvar _fs12 = require('fs');\n\
    var _path13 = require('path');\nvar _fs13 = require('fs');\nvar _path14 = require('path');\n\
    var _fs14 = require('fs');\nvar _path15 = require('path');\nvar _fs15 = require('fs');\n\
    var _path16 = require('path');\nvar _fs16 = require('fs');\nvar _path17 = require('path');\n\
    var _fs17 = require('fs');\nvar _path18 = require('path');\nvar _fs18 =", "  \
    \  let sum = 0;\n    let product = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] === 0) {\n            continue;\n        }\n        sum\
    \ += Math.abs(arr[i]) * product;\n        product *= arr[i] > 0 ? 1 : -1;\n  \
    \  }\n    return sum;\n}\n", "    var result = 0;\n    for(var i=0; i<arr.length;\
    \ i++){\n        result = result * (arr[i]>0 ? 1 : -1);\n    }\n    return result;\n\
    }\n<|endoftext|><|javascript|>var searchData=\n[\n  ['_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5",
  "    var result = 0;\n    for (var i = 0; i < arr.length; i++) {\n        result\
    \ += arr[i] * (arr[i] > 0 ? 1 : -1);\n    }\n    return result;\n}\n<|endoftext|><|javascript|>import\
    \ React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles\
    \ } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\
    import Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\n\
    import Paper from '@material-ui/core/Paper';\nimport { Link } from 'react-router-dom';\n\
    \nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexDirection:\
    \ 'column',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n\
    \    padding: theme.spacing.unit * 2,\n  },\n  paper: {\n    padding: theme.spacing.unit\
    \ * 2,\n    margin: theme.spacing.unit * 2,\n  },\n  button: {\n    margin: theme.spacing.unit\
    \ * 2,\n  },\n});\n", "    var sum = 0;\n    var prod = 1;\n    for(var i=0; i<arr.length;\
    \ i++){\n        sum += Math.abs(arr[i]);\n        prod *= arr[i];\n    }\n  \
    \  return sum * prod;\n}\n", "    var sum = 0;\n    var product = 1;\n    for(var\
    \ i=0; i<arr.length; i++){\n        if(arr[i] === 0){\n            continue;\n\
    \        }\n        if(arr[i] > 0){\n            sum += arr[i];\n        }\n \
    \       if(arr[i] < 0){\n            sum -= arr[i];\n        }\n        product\
    \ *= arr[i];\n    }\n    if(sum === 0){\n        return undefined;\n    }\n  \
    \  return sum * product;\n}\n", "    var sign = 1;\n    var prod = 1;\n    var\
    \ sum = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n\
    \            sum += arr[i];\n        }\n        else if(arr[i] < 0){\n       \
    \     sum -= arr[i];\n        }\n        else if(arr[i] === 0){\n            //\
    \ do nothing\n        }\n        else{\n            // undefined\n        }\n\
    \        prod *= arr[i];\n    }\n    return sum * prod;\n}\n", "    var sum =\
    \ 0;\n    var sign = 1;\n    for(var i = 0; i < arr.length; i++){\n        sum\
    \ += Math.abs(arr[i]) * sign;\n        sign *= arr[i] < 0 ? -1 : 1;\n    }\n \
    \   return sum;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
