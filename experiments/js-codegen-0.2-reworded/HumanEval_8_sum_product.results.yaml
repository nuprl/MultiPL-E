language: js
name: HumanEval_8_sum_product
results:
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n\
    // >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371515
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n\
    // >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371515
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n\
    // >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371515
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n\
    // >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for (var i = 0; i < numbers.length;\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371515
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n\
    // >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371515
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n\
    // >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371515
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n\
    // >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for (var i = 0; i < numbers.length;\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371515
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n\
    // >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product(numbers){\n\
    \    var sum = 0,\n        product = 1;\n\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\n\
    \    return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371515
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n\
    // >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371515
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n\
    // >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371515
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n\
    // >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for (var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371515
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n\
    // >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product(numbers){\n\
    \  var sum = 0,\n    product = 1;\n\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371515
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n\
    // >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371515
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n\
    // >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product(numbers){\n\
    \    var sum = 0,\n        product = 1;\n\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\n\
    \    return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371515
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n\
    // >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product(numbers){\n\
    \    var sum = 0,\n        product = 1;\n\n    for (var i = 0; i < numbers.length;\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\n\
    \    return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371516
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n\
    // >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371515
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n\
    // >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371515
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n\
    // >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371515
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n\
    // >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product(numbers){\n\
    \  var sum = 0, product = 1;\n  for (var i = 0; i < numbers.length; i++) {\n \
    \   sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371516
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n\
    // >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1662371515
