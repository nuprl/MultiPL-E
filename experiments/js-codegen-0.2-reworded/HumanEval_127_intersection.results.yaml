language: js
name: HumanEval_127_intersection
results:
- exit_code: 1
  program: "//You are given two intervals,\n// where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
    \ which means that the interval (start, end)\n// includes both start and end.\n\
    // For each given interval, it is assumed that its start is less or equal its\
    \ end.\n// Your task is to determine whether the length of intersection of these\
    \ two \n// intervals is a prime number.\n// Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n\
    // If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
    \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n//\
    \ [input/output] samples:\n// >>> intersection((1, 2), (2, 3))\n// \"NO\"\n//\
    \ >>> intersection((-1, 1), (0, 4))\n// \"NO\"\n// >>> intersection((-3, -1),\
    \ (-5, 5))\n// \"YES\"\nfunction intersection(interval1, interval2){\n    var\
    \ start1 = interval1[0], end1 = interval1[1],\n        start2 = interval2[0],\
    \ end2 = interval2[1];\n    if(start1 > end2 || start2 > end1) return \"NO\";\n\
    \    var len = Math.min(end1, end2) - Math.max(start1, start2);\n    if(len %\
    \ 2 == 0) return \"NO\";\n    return \"YES\";\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = intersection;\n  assert.deepEqual(candidate([1,\
    \ 2], [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1, 1], [0, 4]),\"NO\");\n\
    \  assert.deepEqual(candidate([-3, -1], [-5, 5]),\"YES\");\n  assert.deepEqual(candidate([-2,\
    \ 2], [-4, 0]),\"YES\");\n  assert.deepEqual(candidate([-11, 2], [-1, -1]),\"\
    NO\");\n  assert.deepEqual(candidate([1, 2], [3, 5]),\"NO\");\n  assert.deepEqual(candidate([1,\
    \ 2], [1, 2]),\"NO\");\n  assert.deepEqual(candidate([-2, -2], [-3, -2]),\"NO\"\
    );\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'YES'\n\nshould\
    \ loosely deep-equal\n\n'NO'\n    at test (/tmp/tmpdcrmsdkl.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpdcrmsdkl.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'YES',\n \
    \ expected: 'NO',\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341883
- exit_code: 1
  program: "//You are given two intervals,\n// where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
    \ which means that the interval (start, end)\n// includes both start and end.\n\
    // For each given interval, it is assumed that its start is less or equal its\
    \ end.\n// Your task is to determine whether the length of intersection of these\
    \ two \n// intervals is a prime number.\n// Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n\
    // If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
    \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n//\
    \ [input/output] samples:\n// >>> intersection((1, 2), (2, 3))\n// \"NO\"\n//\
    \ >>> intersection((-1, 1), (0, 4))\n// \"NO\"\n// >>> intersection((-3, -1),\
    \ (-5, 5))\n// \"YES\"\nfunction intersection(interval1, interval2){\n    var\
    \ i1 = interval1[0],\n        i2 = interval1[1],\n        j1 = interval2[0],\n\
    \        j2 = interval2[1];\n    if(i1 > j1 || i2 > j2){\n        return \"NO\"\
    ;\n    }\n    if(i1 <= j1 && i2 <= j2){\n        return \"YES\";\n    }\n    var\
    \ min = Math.min(i1, i2),\n        max = Math.max(i1, i2),\n        min2 = Math.min(j1,\
    \ j2),\n        max2 = Math.max(j1, j2);\n    if(min > max2 || max < min2){\n\
    \        return \"NO\";\n    }\n    var length = max - min + 1;\n    if(length\
    \ % 2 == 0){\n        return \"NO\";\n    }\n    return \"YES\";\n}<|endoftext|><|javascript|>var\
    \ express = require('express');\nvar path = require('path');\nvar favicon = require('serve-favicon');\n\
    var logger = require('morgan');\nvar cookieParser = require('cookie-parser');\n\
    var bodyParser = require('body-parser');\nvar session = require('express-session');\n\
    var passport = require('passport');\nvar LocalStrategy = require('passport-local').Strategy;\n\
    var mongoose = require('mongoose');\nvar db = mongoose.connect('mongodb://localhost/test');\n\
    var routes = require('./routes/index');\nvar users = require('./routes/users');\n\
    var app = express();\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = intersection;\n  assert.deepEqual(candidate([1, 2], [2,\
    \ 3]),\"NO\");\n  assert.deepEqual(candidate([-1, 1], [0, 4]),\"NO\");\n  assert.deepEqual(candidate([-3,\
    \ -1], [-5, 5]),\"YES\");\n  assert.deepEqual(candidate([-2, 2], [-4, 0]),\"YES\"\
    );\n  assert.deepEqual(candidate([-11, 2], [-1, -1]),\"NO\");\n  assert.deepEqual(candidate([1,\
    \ 2], [3, 5]),\"NO\");\n  assert.deepEqual(candidate([1, 2], [1, 2]),\"NO\");\n\
    \  assert.deepEqual(candidate([-2, -2], [-3, -2]),\"NO\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp5orv2y1j.js:43\n}<|endoftext|><|javascript|>var express = require('express');\n\
    \ ^\n\nSyntaxError: Unexpected token '<'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341883
- exit_code: 1
  program: "//You are given two intervals,\n// where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
    \ which means that the interval (start, end)\n// includes both start and end.\n\
    // For each given interval, it is assumed that its start is less or equal its\
    \ end.\n// Your task is to determine whether the length of intersection of these\
    \ two \n// intervals is a prime number.\n// Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n\
    // If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
    \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n//\
    \ [input/output] samples:\n// >>> intersection((1, 2), (2, 3))\n// \"NO\"\n//\
    \ >>> intersection((-1, 1), (0, 4))\n// \"NO\"\n// >>> intersection((-3, -1),\
    \ (-5, 5))\n// \"YES\"\nfunction intersection(interval1, interval2){\n    var\
    \ start1 = interval1[0];\n    var end1 = interval1[1];\n    var start2 = interval2[0];\n\
    \    var end2 = interval2[1];\n    if(start1 > end2 || start2 > end1){\n     \
    \   return \"NO\";\n    }\n    if(start1 < start2 && start2 < end1 && end1 < end2){\n\
    \        return \"YES\";\n    }\n    return \"NO\";\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = intersection;\n  assert.deepEqual(candidate([1,\
    \ 2], [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1, 1], [0, 4]),\"NO\");\n\
    \  assert.deepEqual(candidate([-3, -1], [-5, 5]),\"YES\");\n  assert.deepEqual(candidate([-2,\
    \ 2], [-4, 0]),\"YES\");\n  assert.deepEqual(candidate([-11, 2], [-1, -1]),\"\
    NO\");\n  assert.deepEqual(candidate([1, 2], [3, 5]),\"NO\");\n  assert.deepEqual(candidate([1,\
    \ 2], [1, 2]),\"NO\");\n  assert.deepEqual(candidate([-2, -2], [-3, -2]),\"NO\"\
    );\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'YES'\n\nshould\
    \ loosely deep-equal\n\n'NO'\n    at test (/tmp/tmpo7njbdfu.js:40:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpo7njbdfu.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'YES',\n \
    \ expected: 'NO',\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341883
- exit_code: 1
  program: "//You are given two intervals,\n// where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
    \ which means that the interval (start, end)\n// includes both start and end.\n\
    // For each given interval, it is assumed that its start is less or equal its\
    \ end.\n// Your task is to determine whether the length of intersection of these\
    \ two \n// intervals is a prime number.\n// Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n\
    // If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
    \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n//\
    \ [input/output] samples:\n// >>> intersection((1, 2), (2, 3))\n// \"NO\"\n//\
    \ >>> intersection((-1, 1), (0, 4))\n// \"NO\"\n// >>> intersection((-3, -1),\
    \ (-5, 5))\n// \"YES\"\nfunction intersection(interval1, interval2){\n    var\
    \ start1 = interval1[0],\n        end1 = interval1[1],\n        start2 = interval2[0],\n\
    \        end2 = interval2[1];\n    \n    if(start1 > end2 || start2 > end1){\n\
    \        return \"NO\";\n    }\n    \n    var len1 = end1 - start1 + 1,\n    \
    \    len2 = end2 - start2 + 1,\n        len = Math.min(len1, len2),\n        i\
    \ = 0,\n        j = 0,\n        result = \"NO\";\n    \n    for(i = 0; i < len;\
    \ i++){\n        if(start1 <= start2 && start2 <= end1){\n            result =\
    \ \"YES\";\n            break;\n        }\n        \n        if(start1 <= start2\
    \ && start2 < end1){\n            j = Math.min(start2, end1);\n            if(isPrime(j\
    \ - start1 + 1)){\n                result = \"YES\";\n                break;\n\
    \            }\n        }\n        \n        if(start1 < end2 && start2 <= end1){\n\
    \            i = Math.min(start1, end2);\n            if(isPrime(i - start2 +\
    \ 1)){\n                result = \"YES\";\n                break;\n          \
    \  }\n        }\n        \n        if(start1 < end2 && start2 > end1){\n     \
    \       j = Math.min(start2, end1);\n            if(isPrime(j - start1 + 1)){\n\
    \                result = \"YES\";\n                break;\n            }\n  \
    \      }\n    }\n    \n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = intersection;\n  assert.deepEqual(candidate([1,\
    \ 2], [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1, 1], [0, 4]),\"NO\");\n\
    \  assert.deepEqual(candidate([-3, -1], [-5, 5]),\"YES\");\n  assert.deepEqual(candidate([-2,\
    \ 2], [-4, 0]),\"YES\");\n  assert.deepEqual(candidate([-11, 2], [-1, -1]),\"\
    NO\");\n  assert.deepEqual(candidate([1, 2], [3, 5]),\"NO\");\n  assert.deepEqual(candidate([1,\
    \ 2], [1, 2]),\"NO\");\n  assert.deepEqual(candidate([-2, -2], [-3, -2]),\"NO\"\
    );\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'YES'\n\nshould\
    \ loosely deep-equal\n\n'NO'\n    at test (/tmp/tmpaxeulei_.js:76:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpaxeulei_.js:86:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'YES',\n \
    \ expected: 'NO',\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341883
- exit_code: 1
  program: "//You are given two intervals,\n// where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
    \ which means that the interval (start, end)\n// includes both start and end.\n\
    // For each given interval, it is assumed that its start is less or equal its\
    \ end.\n// Your task is to determine whether the length of intersection of these\
    \ two \n// intervals is a prime number.\n// Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n\
    // If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
    \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n//\
    \ [input/output] samples:\n// >>> intersection((1, 2), (2, 3))\n// \"NO\"\n//\
    \ >>> intersection((-1, 1), (0, 4))\n// \"NO\"\n// >>> intersection((-3, -1),\
    \ (-5, 5))\n// \"YES\"\nfunction intersection(interval1, interval2){\n    var\
    \ start1 = interval1[0], end1 = interval1[1],\n        start2 = interval2[0],\
    \ end2 = interval2[1];\n    if(start1 > end2 || start2 > end1) return \"NO\";\n\
    \    var len = Math.min(end1, end2) - Math.max(start1, start2);\n    if(len %\
    \ 2 == 0) return \"NO\";\n    return \"YES\";\n}\n<|endoftext|><|javascript|>'use\
    \ strict';\n\nvar _ = require('lodash');\nvar async = require('async');\nvar fs\
    \ = require('fs');\nvar path = require('path');\nvar util = require('util');\n\
    var yaml = require('js-yaml');\n\nvar config = require('./config');\nvar logger\
    \ = require('./logger');\nvar utils = require('./utils');\n\nvar defaultConfig\
    \ = {\n  logLevel: 'info',\n  logFormat: '%D %T %L',\n  logFile: 'logs/app.log',\n\
    \  logToConsole: true,\n  logToFile: true,\n  logToStdout: true,\n  logToSyslog:\
    \ false,\n  logToWindowsEventLog: false,\n  logToWindowsRegistry: false,\n  logToWindowsRegistryKey:\
    \ '',\n  logToWindowsRegistryValue: '',\n  logToWindowsRegistryValueName: '',\n\
    \  logToWindowsRegistryValueData: '',\n  logToWindowsRegistryValueType: '',\n\
    \  logToWindowsRegistryValueDataType: '',\n  logToWindowsRegistryValuePermissions:\
    \ '',\n  logToWindowsRegistryValuePermissionsOwner: '',\n  logToWindowsRegistryValuePermissionsGroup:\
    \ '',\n  logToWindowsRegistryValuePermissionsDacl: '',\n  logToWindowsRegistryValuePermissionsSacl:\
    \ '',\n  logToWindowsRegistryValuePermissionsMask: '',\n  logToWindowsRegistryValuePermissionsMaskOwner:\
    \ '',\n  logToWindowsRegistryValuePermissionsMaskGroup: '',\n  logToWindowsRegistryValuePermissionsMaskDacl:\
    \ '',\n  logToWindowsRegistryValuePermissions\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = intersection;\n  assert.deepEqual(candidate([1,\
    \ 2], [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1, 1], [0, 4]),\"NO\");\n\
    \  assert.deepEqual(candidate([-3, -1], [-5, 5]),\"YES\");\n  assert.deepEqual(candidate([-2,\
    \ 2], [-4, 0]),\"YES\");\n  assert.deepEqual(candidate([-11, 2], [-1, -1]),\"\
    NO\");\n  assert.deepEqual(candidate([1, 2], [3, 5]),\"NO\");\n  assert.deepEqual(candidate([1,\
    \ 2], [1, 2]),\"NO\");\n  assert.deepEqual(candidate([-2, -2], [-3, -2]),\"NO\"\
    );\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmppi0r93yx.js:28\n<|endoftext|><|javascript|>'use strict';\n^\n\n\
    SyntaxError: Unexpected token '<'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341883
- exit_code: 1
  program: "//You are given two intervals,\n// where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
    \ which means that the interval (start, end)\n// includes both start and end.\n\
    // For each given interval, it is assumed that its start is less or equal its\
    \ end.\n// Your task is to determine whether the length of intersection of these\
    \ two \n// intervals is a prime number.\n// Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n\
    // If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
    \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n//\
    \ [input/output] samples:\n// >>> intersection((1, 2), (2, 3))\n// \"NO\"\n//\
    \ >>> intersection((-1, 1), (0, 4))\n// \"NO\"\n// >>> intersection((-3, -1),\
    \ (-5, 5))\n// \"YES\"\nfunction intersection(interval1, interval2){\n    if(interval1[0]\
    \ > interval2[1] || interval2[0] > interval1[1]){\n        return \"NO\";\n  \
    \  }\n    var result = [];\n    for(var i = interval1[0]; i <= interval1[1]; i++){\n\
    \        for(var j = interval2[0]; j <= interval2[1]; j++){\n            if(i\
    \ === j){\n                result.push(i);\n            }\n        }\n    }\n\
    \    if(result.length === 1){\n        return \"YES\";\n    }\n    return \"NO\"\
    ;\n}\n<|endoftext|><|javascript|>var searchData=\n[\n  ['_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = intersection;\n  assert.deepEqual(candidate([1, 2], [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1,\
    \ 1], [0, 4]),\"NO\");\n  assert.deepEqual(candidate([-3, -1], [-5, 5]),\"YES\"\
    );\n  assert.deepEqual(candidate([-2, 2], [-4, 0]),\"YES\");\n  assert.deepEqual(candidate([-11,\
    \ 2], [-1, -1]),\"NO\");\n  assert.deepEqual(candidate([1, 2], [3, 5]),\"NO\"\
    );\n  assert.deepEqual(candidate([1, 2], [1, 2]),\"NO\");\n  assert.deepEqual(candidate([-2,\
    \ -2], [-3, -2]),\"NO\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpzfcrcipy.js:37\n<|endoftext|><|javascript|>var searchData=\n^\n\
    \nSyntaxError: Unexpected token '<'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341883
- exit_code: 1
  program: "//You are given two intervals,\n// where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
    \ which means that the interval (start, end)\n// includes both start and end.\n\
    // For each given interval, it is assumed that its start is less or equal its\
    \ end.\n// Your task is to determine whether the length of intersection of these\
    \ two \n// intervals is a prime number.\n// Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n\
    // If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
    \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n//\
    \ [input/output] samples:\n// >>> intersection((1, 2), (2, 3))\n// \"NO\"\n//\
    \ >>> intersection((-1, 1), (0, 4))\n// \"NO\"\n// >>> intersection((-3, -1),\
    \ (-5, 5))\n// \"YES\"\nfunction intersection(interval1, interval2){\n    var\
    \ start1 = interval1[0],\n        end1 = interval1[1],\n        start2 = interval2[0],\n\
    \        end2 = interval2[1];\n    if(start1 > end2 || start2 > end1){\n     \
    \   return \"NO\";\n    }\n    var length = Math.min(end1, end2) - Math.max(start1,\
    \ start2) + 1;\n    if(length % 2 == 0){\n        return \"NO\";\n    }\n    return\
    \ \"YES\";\n}\n<|endoftext|><|javascript|>'use strict';\n\nvar _ = require('lodash');\n\
    var Q = require('q');\nvar Page = requiren\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = intersection;\n  assert.deepEqual(candidate([1, 2], [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1,\
    \ 1], [0, 4]),\"NO\");\n  assert.deepEqual(candidate([-3, -1], [-5, 5]),\"YES\"\
    );\n  assert.deepEqual(candidate([-2, 2], [-4, 0]),\"YES\");\n  assert.deepEqual(candidate([-11,\
    \ 2], [-1, -1]),\"NO\");\n  assert.deepEqual(candidate([1, 2], [3, 5]),\"NO\"\
    );\n  assert.deepEqual(candidate([1, 2], [1, 2]),\"NO\");\n  assert.deepEqual(candidate([-2,\
    \ -2], [-3, -2]),\"NO\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpahkw3sm1.js:34\n<|endoftext|><|javascript|>'use strict';\n^\n\n\
    SyntaxError: Unexpected token '<'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341883
- exit_code: 1
  program: "//You are given two intervals,\n// where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
    \ which means that the interval (start, end)\n// includes both start and end.\n\
    // For each given interval, it is assumed that its start is less or equal its\
    \ end.\n// Your task is to determine whether the length of intersection of these\
    \ two \n// intervals is a prime number.\n// Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n\
    // If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
    \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n//\
    \ [input/output] samples:\n// >>> intersection((1, 2), (2, 3))\n// \"NO\"\n//\
    \ >>> intersection((-1, 1), (0, 4))\n// \"NO\"\n// >>> intersection((-3, -1),\
    \ (-5, 5))\n// \"YES\"\nfunction intersection(interval1, interval2){\n    if(interval1[0]\
    \ > interval2[1] || interval2[0] > interval1[1]){\n        return \"NO\";\n  \
    \  }\n    var len = Math.min(interval1[1], interval2[1]) - Math.max(interval1[0],\
    \ interval2[0]);\n    if(len % 2 == 0){\n        return \"NO\";\n    }\n    return\
    \ \"YES\";\n}\n<|endoftext|><|javascript|>var fs = require('fs');\nvar path =\
    \ require('path');\nvar _ = require('lodash');\nvar util = require('util');\n\
    var async = require('async');\nvar glob = require('glob');\nvar mkdirp = require('mkdirp');\n\
    var rimraf = require('rimraf');\nvar mkdirp = require('mkdirp');\nvar mkdirp =\
    \ require('mkdirp');\nvar mkdirp = require('mkdirp');\nvar mkdirp = require('mkdirp');\n\
    var mkdirp = require('mkdirp');\nvar mkdirp = require('mkdirp');\nvar mkdirp =\
    \ require('mkdirp');\nvar mkdirp = require('mkdirp');\nvar mkdirp = require('mkdirp');\n\
    var mkdirp = require('mkdirp');\nvar mkdirp = require('mkdirp');\nvar mkdirp =\
    \ require('mkdirp');\nvar mkdirp = require('mkdirp');\nvar mkdirp = require('mkdirp');\n\
    var mkdirp = require('mkdirp');\nvar mkdirp = require('mkdirp');\nvar mkdirp =\
    \ require('mkdirp');\nvar mkdirp = require('mkdirp');\nvar mkdirp = require('mkdirp');\n\
    var mkdirp = require('mkdirp');\nvar mkdirp = require('mkdirp');\nvar mkdirp =\
    \ require('mkdirp');\nvar mkdirp = require('mkdirp');\nvar mkdirp = require('mkdirp');\n\
    var mkdirp = require('mkdirp');\nvar mkdirp = require('mkdirp');\nvar mkdirp =\
    \ require('mkdirp');\nvar mkdirp = require('\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = intersection;\n  assert.deepEqual(candidate([1,\
    \ 2], [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1, 1], [0, 4]),\"NO\");\n\
    \  assert.deepEqual(candidate([-3, -1], [-5, 5]),\"YES\");\n  assert.deepEqual(candidate([-2,\
    \ 2], [-4, 0]),\"YES\");\n  assert.deepEqual(candidate([-11, 2], [-1, -1]),\"\
    NO\");\n  assert.deepEqual(candidate([1, 2], [3, 5]),\"NO\");\n  assert.deepEqual(candidate([1,\
    \ 2], [1, 2]),\"NO\");\n  assert.deepEqual(candidate([-2, -2], [-3, -2]),\"NO\"\
    );\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpcmt811zo.js:30\n<|endoftext|><|javascript|>var fs = require('fs');\n\
    ^\n\nSyntaxError: Unexpected token '<'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341883
- exit_code: 1
  program: "//You are given two intervals,\n// where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
    \ which means that the interval (start, end)\n// includes both start and end.\n\
    // For each given interval, it is assumed that its start is less or equal its\
    \ end.\n// Your task is to determine whether the length of intersection of these\
    \ two \n// intervals is a prime number.\n// Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n\
    // If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
    \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n//\
    \ [input/output] samples:\n// >>> intersection((1, 2), (2, 3))\n// \"NO\"\n//\
    \ >>> intersection((-1, 1), (0, 4))\n// \"NO\"\n// >>> intersection((-3, -1),\
    \ (-5, 5))\n// \"YES\"\nfunction intersection(interval1, interval2){\n    var\
    \ start1 = interval1[0],\n        end1 = interval1[1],\n        start2 = interval2[0],\n\
    \        end2 = interval2[1];\n    \n    if(start1 > end1 || start2 > end2) return\
    \ \"NO\";\n    \n    var len1 = end1 - start1,\n        len2 = end2 - start2;\n\
    \    \n    if(len1 % 2 == 0 || len2 % 2 == 0) return \"NO\";\n    \n    var len\
    \ = len1 + len2 - 2;\n    \n    if(len % 2 == 0) return \"NO\";\n    \n    return\
    \ \"YES\";\n}<|endoftext|><|javascript|>var searchData=\n[\n  ['_5f_5f',['__',['../struct__.html',1,'']]],\n\
    \  ['_5f_5f_5f',['__',['../struct__.html',1,'']]],\n  ['_5f_5f_5f_5f',['__',['../struct__.html',1,'']]],\n\
    \  ['_5f_5f_5f_5f_5f',['__',['../struct__.html',1,'']]],\n  ['_5f_5f_5f_5f_5f_5f',['__',['../struct__.html',1,'']]],\n\
    \  ['_5f_5f_5f_5f_5f_5f_5f',['__',['../struct__.html',1,'']]],\n  ['_5f_5f_5f_5f_5f_5f_5f_5f',['__',['../struct__.html',1,'']]],\n\
    \  ['_5f_5f_5f_5f_5f_5f_5f_5f_5f',['__',['../struct__.html',1,'']]],\n  ['_5f_5f_5f_5f_5f_5f_5f_5f_5f_5f',['__',['../struct__.html',1,'']]],\n\
    \  ['_5f_5f_5f_5f_5f_5f_5f\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = intersection;\n  assert.deepEqual(candidate([1,\
    \ 2], [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1, 1], [0, 4]),\"NO\");\n\
    \  assert.deepEqual(candidate([-3, -1], [-5, 5]),\"YES\");\n  assert.deepEqual(candidate([-2,\
    \ 2], [-4, 0]),\"YES\");\n  assert.deepEqual(candidate([-11, 2], [-1, -1]),\"\
    NO\");\n  assert.deepEqual(candidate([1, 2], [3, 5]),\"NO\");\n  assert.deepEqual(candidate([1,\
    \ 2], [1, 2]),\"NO\");\n  assert.deepEqual(candidate([-2, -2], [-3, -2]),\"NO\"\
    );\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpshuzdxop.js:38\n}<|endoftext|><|javascript|>var searchData=\n ^\n\
    \nSyntaxError: Unexpected token '<'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341883
- exit_code: 1
  program: "//You are given two intervals,\n// where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
    \ which means that the interval (start, end)\n// includes both start and end.\n\
    // For each given interval, it is assumed that its start is less or equal its\
    \ end.\n// Your task is to determine whether the length of intersection of these\
    \ two \n// intervals is a prime number.\n// Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n\
    // If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
    \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n//\
    \ [input/output] samples:\n// >>> intersection((1, 2), (2, 3))\n// \"NO\"\n//\
    \ >>> intersection((-1, 1), (0, 4))\n// \"NO\"\n// >>> intersection((-3, -1),\
    \ (-5, 5))\n// \"YES\"\nfunction intersection(interval1, interval2){\n    var\
    \ i1 = interval1[0],\n        i2 = interval1[1],\n        j1 = interval2[0],\n\
    \        j2 = interval2[1];\n    if(i1 > j1 || i2 > j2) return \"NO\";\n    if(i1\
    \ < j1 && i2 < j2) return \"NO\";\n    if(i1 > j1) i1 = j1;\n    if(i2 > j2) i2\
    \ = j2;\n    var len = i2 - i1 + 1;\n    if(len % 2 == 0) return \"NO\";\n   \
    \ for(var i = i1 + 1; i <= i2; i++){\n        if(isPrime(i)) return \"YES\";\n\
    \    }\n    return \"NO\";\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = intersection;\n  assert.deepEqual(candidate([1,\
    \ 2], [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1, 1], [0, 4]),\"NO\");\n\
    \  assert.deepEqual(candidate([-3, -1], [-5, 5]),\"YES\");\n  assert.deepEqual(candidate([-2,\
    \ 2], [-4, 0]),\"YES\");\n  assert.deepEqual(candidate([-11, 2], [-1, -1]),\"\
    NO\");\n  assert.deepEqual(candidate([1, 2], [3, 5]),\"NO\");\n  assert.deepEqual(candidate([1,\
    \ 2], [1, 2]),\"NO\");\n  assert.deepEqual(candidate([-2, -2], [-3, -2]),\"NO\"\
    );\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'NO'\n\nshould\
    \ loosely deep-equal\n\n'YES'\n    at test (/tmp/tmpc86480im.js:44:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpc86480im.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'NO',\n  expected:\
    \ 'YES',\n  operator: 'deepEqual'\n}\n\nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341883
- exit_code: 1
  program: "//You are given two intervals,\n// where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
    \ which means that the interval (start, end)\n// includes both start and end.\n\
    // For each given interval, it is assumed that its start is less or equal its\
    \ end.\n// Your task is to determine whether the length of intersection of these\
    \ two \n// intervals is a prime number.\n// Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n\
    // If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
    \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n//\
    \ [input/output] samples:\n// >>> intersection((1, 2), (2, 3))\n// \"NO\"\n//\
    \ >>> intersection((-1, 1), (0, 4))\n// \"NO\"\n// >>> intersection((-3, -1),\
    \ (-5, 5))\n// \"YES\"\nfunction intersection(interval1, interval2){\n    var\
    \ start1 = interval1[0],\n        end1 = interval1[1],\n        start2 = interval2[0],\n\
    \        end2 = interval2[1];\n    if(start1 > end2 || start2 > end1) return \"\
    NO\";\n    var length = Math.min(end1, end2) - Math.max(start1, start2);\n   \
    \ if(length % 2 == 0) return \"NO\";\n    return \"YES\";\n}\n<|endoftext|><|javascript|>var\
    \ path = require('path');\nvar webpack = require('webpack');\nvar HtmlWebpackPlugin\
    \ = require('html-webpack-plugin');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\n\
    var autoprefixer = require('autoprefixer');\n\nmodule.exports = {\n  entry: [\n\
    \    './src/index.js'\n  ],\n  output: {\n    path: path.join(__dirname, 'dist'),\n\
    \    filename: 'bundle.js'\n  },\n  module: {\n    loaders: [\n      {\n     \
    \   test: /\\.js$/,\n        loader: 'babel',\n        exclude: /node_modules/\n\
    \      },\n      {\n        test: /\\.css$/,\n        loader: ExtractTextPlugin.extract('style',\
    \ 'css?modules&importLoaders=1&localIdentName=[name]__[local]___[hash:base64:5]')\n\
    \      },\n      {\n        test: /\\.scss$/,\n        loader: ExtractTextPlugin.extract('style',\
    \ 'css?modules&importLoaders=1&localIdentName=[name]__[local]___[hash:base64:5]!postcss!sass')\n\
    \      },\n      {\n        test: /\\.woff(2)?(\\?v=.+)?$/,\n        loader: 'url?limit=10000&mimetype=application/font-woff'\n\
    \      },\n      {\n        test: /\\.(ttf|eot|svg)(\\?v=.+)?$/,\n        loader:\
    \ 'file'\n      }\n    ]\n  },\n  plugins: [\n    new web\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = intersection;\n  assert.deepEqual(candidate([1,\
    \ 2], [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1, 1], [0, 4]),\"NO\");\n\
    \  assert.deepEqual(candidate([-3, -1], [-5, 5]),\"YES\");\n  assert.deepEqual(candidate([-2,\
    \ 2], [-4, 0]),\"YES\");\n  assert.deepEqual(candidate([-11, 2], [-1, -1]),\"\
    NO\");\n  assert.deepEqual(candidate([1, 2], [3, 5]),\"NO\");\n  assert.deepEqual(candidate([1,\
    \ 2], [1, 2]),\"NO\");\n  assert.deepEqual(candidate([-2, -2], [-3, -2]),\"NO\"\
    );\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpjy15v80e.js:30\n<|endoftext|><|javascript|>var path = require('path');\n\
    ^\n\nSyntaxError: Unexpected token '<'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341883
- exit_code: 1
  program: "//You are given two intervals,\n// where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
    \ which means that the interval (start, end)\n// includes both start and end.\n\
    // For each given interval, it is assumed that its start is less or equal its\
    \ end.\n// Your task is to determine whether the length of intersection of these\
    \ two \n// intervals is a prime number.\n// Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n\
    // If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
    \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n//\
    \ [input/output] samples:\n// >>> intersection((1, 2), (2, 3))\n// \"NO\"\n//\
    \ >>> intersection((-1, 1), (0, 4))\n// \"NO\"\n// >>> intersection((-3, -1),\
    \ (-5, 5))\n// \"YES\"\nfunction intersection(interval1, interval2){\n    var\
    \ start1 = interval1[0],\n        end1 = interval1[1],\n        start2 = interval2[0],\n\
    \        end2 = interval2[1];\n    if(start1 > end2 || start2 > end1){\n     \
    \   return \"NO\";\n    }\n    var len = Math.min(end1, end2) - Math.max(start1,\
    \ start2) + 1;\n    if(len % 2 === 0){\n        return \"NO\";\n    }\n    return\
    \ \"YES\";\n}\n<|endoftext|><|javascript|>import React from 'react';\nimport {\
    \ render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport\
    \ { Router, browserHistory } from 'react-router';\nimport { syncHistoryWithStore\
    \ } from 'react-router-redux';\nimport routes from './routes';\nimport configureStore\
    \ from './store/configureStore';\nimport './styles/styles.scss';\n\nconst store\
    \ = configureStore();\nconst history = syncHistoryWithStore(browserHistory, store);\n\
    \nrender(\n  <Provider store={store}>\n    <Router history={history} routes={routes}\
    \ />\n  </Provider>,\n  document.getElementById('root')\n);\n<|endoftext|><|javascript|>var\
    \ fs = require('fs');\nvar path = require('path');\nvar util = require('util');\n\
    var _ = require('lodash');\nvar async = require('async');\nvar moment = require('moment');\n\
    var config = require('../config');\nvar logger = require('../logger');\nvar db\
    \ = require('../db');\nvar utils = require('../utils');\nvar db = require('../db');\n\
    var db_utils = require('../db/utils');\nvar db_models = require('../db/models');\n\
    var db_schema = require('../db/schema');\nvar db_schema_utils = require('../db/schema/utils');\n\
    var db_schema_utils = require('../db/schema/utils');\nvar db_schema_utils = require('../db/schema/utils');\n\
    var db_schema_utils = require('../db/schema/\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = intersection;\n  assert.deepEqual(candidate([1,\
    \ 2], [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1, 1], [0, 4]),\"NO\");\n\
    \  assert.deepEqual(candidate([-3, -1], [-5, 5]),\"YES\");\n  assert.deepEqual(candidate([-2,\
    \ 2], [-4, 0]),\"YES\");\n  assert.deepEqual(candidate([-11, 2], [-1, -1]),\"\
    NO\");\n  assert.deepEqual(candidate([1, 2], [3, 5]),\"NO\");\n  assert.deepEqual(candidate([1,\
    \ 2], [1, 2]),\"NO\");\n  assert.deepEqual(candidate([-2, -2], [-3, -2]),\"NO\"\
    );\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_mdae0f2.js:34\n<|endoftext|><|javascript|>import React from 'react';\n\
    ^\n\nSyntaxError: Unexpected token '<'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341884
- exit_code: 1
  program: "//You are given two intervals,\n// where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
    \ which means that the interval (start, end)\n// includes both start and end.\n\
    // For each given interval, it is assumed that its start is less or equal its\
    \ end.\n// Your task is to determine whether the length of intersection of these\
    \ two \n// intervals is a prime number.\n// Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n\
    // If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
    \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n//\
    \ [input/output] samples:\n// >>> intersection((1, 2), (2, 3))\n// \"NO\"\n//\
    \ >>> intersection((-1, 1), (0, 4))\n// \"NO\"\n// >>> intersection((-3, -1),\
    \ (-5, 5))\n// \"YES\"\nfunction intersection(interval1, interval2){\n    var\
    \ start1 = interval1[0], end1 = interval1[1],\n        start2 = interval2[0],\
    \ end2 = interval2[1];\n    if(start1 > end2 || start2 > end1) return \"NO\";\n\
    \    if(start1 < end2 && start2 < end1) return \"YES\";\n    if(start1 == end2\
    \ && start2 == end1) return \"YES\";\n    return \"NO\";\n}\n<|endoftext|><|javascript|>import\
    \ React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect }\
    \ from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Link\
    \ } from 'react-router-dom';\nimport { FormattedMessage } from 'react-intl';\n\
    import { withRouter } from 'react-router-dom';\nimport { Form, FormGroup, FormControl,\
    \ ControlLabel, Button, Col, Row, InputGroup } from 'react-bootstrap';\nimport\
    \ { createStructuredSelector } from 'reselect';\nimport { makeSelectCurrentUser\
    \ } from 'containers/App/selectors';\nimport { makeSelectCurrentUserId } from\
    \ 'containers/App/selectors';\nimport { makeSelectCurrentUserProfile } from 'containers/App/selectors';\n\
    import { makeSelectCurrentUserProfileImage } from 'containers/App/selectors';\n\
    import { makeSelectCurrentUserProfileBio } from 'containers/App/selectors';\n\
    import { makeSelectCurrentUserProfileLocation } from 'containers/App/selectors';\n\
    import { makeSelectCurrentUserProfileWebsite } from 'containers/App/selectors';\n\
    import { makeSelectCurrentUserProfileTwitter } from 'containers/App/selectors';\n\
    import { makeSelectCurrentUserProfileFacebook } from 'containers/App/selectors';\n\
    import { makeSelectCurrentUserProfileGithub } from 'containers/App/selectors';\n\
    import { makeSelectCurrentUserProfileLinkedin } from 'containers/App/selectors';\n\
    import { makeSelectCurrentUserProfileInstagram } from 'containers/App/selectors';\n\
    import { makeSelectCurrentUserProfileEmail } from 'containers/App/selectors';\n\
    import { makeSelectCurrentUserProfilePhone } from 'cont\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = intersection;\n  assert.deepEqual(candidate([1,\
    \ 2], [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1, 1], [0, 4]),\"NO\");\n\
    \  assert.deepEqual(candidate([-3, -1], [-5, 5]),\"YES\");\n  assert.deepEqual(candidate([-2,\
    \ 2], [-4, 0]),\"YES\");\n  assert.deepEqual(candidate([-11, 2], [-1, -1]),\"\
    NO\");\n  assert.deepEqual(candidate([1, 2], [3, 5]),\"NO\");\n  assert.deepEqual(candidate([1,\
    \ 2], [1, 2]),\"NO\");\n  assert.deepEqual(candidate([-2, -2], [-3, -2]),\"NO\"\
    );\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6xa0vnt5.js:28\n<|endoftext|><|javascript|>import React from 'react';\n\
    ^\n\nSyntaxError: Unexpected token '<'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341884
- exit_code: 1
  program: "//You are given two intervals,\n// where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
    \ which means that the interval (start, end)\n// includes both start and end.\n\
    // For each given interval, it is assumed that its start is less or equal its\
    \ end.\n// Your task is to determine whether the length of intersection of these\
    \ two \n// intervals is a prime number.\n// Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n\
    // If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
    \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n//\
    \ [input/output] samples:\n// >>> intersection((1, 2), (2, 3))\n// \"NO\"\n//\
    \ >>> intersection((-1, 1), (0, 4))\n// \"NO\"\n// >>> intersection((-3, -1),\
    \ (-5, 5))\n// \"YES\"\nfunction intersection(interval1, interval2){\n    var\
    \ start1 = interval1[0],\n        end1 = interval1[1],\n        start2 = interval2[0],\n\
    \        end2 = interval2[1];\n    if(start1 > end2 || start2 > end1){\n     \
    \   return \"NO\";\n    }\n    var length = end1 - start1 + 1;\n    if(length\
    \ % 2 === 0){\n        return \"NO\";\n    }\n    var length2 = end2 - start2\
    \ + 1;\n    if(length2 % 2 === 0){\n        return \"NO\";\n    }\n    return\
    \ \"YES\";\n}<|endoftext|><|javascript|>'use strict';\n\nvar _ = require('lodash');\n\
    var $ = require('jquery');\nvar Backbone = require('backbone');\nvar Marionette\
    \ = require('marionette');\nvar Radio = require('backbone.radio');\nvar template\
    \ = require('./templates/index.hbs');\n\nmodule.exports = Marionette.ItemView.extend({\n\
    \  template: template,\n\n  events: {\n    'click .js-toggle-menu': 'onToggleMenu',\n\
    \    'click .js-toggle-search': 'onToggleSearch',\n    'click .js-toggle-search-form':\
    \ 'onToggleSearchForm',\n    'click .js-toggle-search-results': 'onToggleSearchResults',\n\
    \    'click .js-toggle-search-results-form': 'onToggleSearchResultsForm',\n  \
    \  'click .js-toggle-search-results-form-results': 'onToggleSearchResultsFormResults',\n\
    \    'click .js-toggle-search-results-form-results-form': 'onToggleSearchResultsFormResultsForm',\n\
    \    'click .js-toggle-search-results-form-results-form-results-form': 'onToggleSearchResultsFormResultsFormResultsForm',\n\
    \    'click .js-toggle-search-results-form-results-form-results-form-results-form':\
    \ 'onToggleSearchResultsFormResultsFormResultsFormResultsForm',\n    'click .js-toggle-search-results-form-results-form-results-form-results-form-results-form':\
    \ 'onToggleSearchResultsFormResultsForm\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = intersection;\n  assert.deepEqual(candidate([1,\
    \ 2], [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1, 1], [0, 4]),\"NO\");\n\
    \  assert.deepEqual(candidate([-3, -1], [-5, 5]),\"YES\");\n  assert.deepEqual(candidate([-2,\
    \ 2], [-4, 0]),\"YES\");\n  assert.deepEqual(candidate([-11, 2], [-1, -1]),\"\
    NO\");\n  assert.deepEqual(candidate([1, 2], [3, 5]),\"NO\");\n  assert.deepEqual(candidate([1,\
    \ 2], [1, 2]),\"NO\");\n  assert.deepEqual(candidate([-2, -2], [-3, -2]),\"NO\"\
    );\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpjvg0yl8f.js:37\n}<|endoftext|><|javascript|>'use strict';\n ^\n\
    \nSyntaxError: Unexpected token '<'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341884
- exit_code: 1
  program: "//You are given two intervals,\n// where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
    \ which means that the interval (start, end)\n// includes both start and end.\n\
    // For each given interval, it is assumed that its start is less or equal its\
    \ end.\n// Your task is to determine whether the length of intersection of these\
    \ two \n// intervals is a prime number.\n// Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n\
    // If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
    \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n//\
    \ [input/output] samples:\n// >>> intersection((1, 2), (2, 3))\n// \"NO\"\n//\
    \ >>> intersection((-1, 1), (0, 4))\n// \"NO\"\n// >>> intersection((-3, -1),\
    \ (-5, 5))\n// \"YES\"\nfunction intersection(interval1, interval2){\n    if(interval1[0]\
    \ > interval2[1] || interval2[0] > interval1[1]){\n        return \"NO\";\n  \
    \  }\n    var start = Math.max(interval1[0], interval2[0]);\n    var end = Math.min(interval1[1],\
    \ interval2[1]);\n    var length = end - start + 1;\n    if(length % 2 === 0){\n\
    \        return \"NO\";\n    }\n    return \"YES\";\n}\n<|endoftext|><|javascript|>var\
    \ searchData=\n[\n  ['get_5fdata',['get_data',['../class_data_set.html#      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \  \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = intersection;\n  assert.deepEqual(candidate([1, 2], [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1,\
    \ 1], [0, 4]),\"NO\");\n  assert.deepEqual(candidate([-3, -1], [-5, 5]),\"YES\"\
    );\n  assert.deepEqual(candidate([-2, 2], [-4, 0]),\"YES\");\n  assert.deepEqual(candidate([-11,\
    \ 2], [-1, -1]),\"NO\");\n  assert.deepEqual(candidate([1, 2], [3, 5]),\"NO\"\
    );\n  assert.deepEqual(candidate([1, 2], [1, 2]),\"NO\");\n  assert.deepEqual(candidate([-2,\
    \ -2], [-3, -2]),\"NO\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpjkp35d0v.js:32\n<|endoftext|><|javascript|>var searchData=\n^\n\
    \nSyntaxError: Unexpected token '<'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341884
- exit_code: 1
  program: "//You are given two intervals,\n// where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
    \ which means that the interval (start, end)\n// includes both start and end.\n\
    // For each given interval, it is assumed that its start is less or equal its\
    \ end.\n// Your task is to determine whether the length of intersection of these\
    \ two \n// intervals is a prime number.\n// Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n\
    // If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
    \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n//\
    \ [input/output] samples:\n// >>> intersection((1, 2), (2, 3))\n// \"NO\"\n//\
    \ >>> intersection((-1, 1), (0, 4))\n// \"NO\"\n// >>> intersection((-3, -1),\
    \ (-5, 5))\n// \"YES\"\nfunction intersection(interval1, interval2){\n    var\
    \ i1 = interval1[0],\n        i2 = interval1[1],\n        j1 = interval2[0],\n\
    \        j2 = interval2[1];\n    if(i1 > j2 || j1 > i2) return \"NO\";\n    var\
    \ len = Math.min(i2, j2) - Math.max(i1, j1) + 1;\n    if(len % 2 == 0) return\
    \ \"NO\";\n    return \"YES\";\n}\n<|endoftext|><|javascript|>var gulp = require('gulp');\n\
    var browserify = require('browserify');\nvar source = require('vinyl-source-stream');\n\
    var buffer = require('vinyl-buffer');\nvar uglify = require('gulp-uglify');\n\
    var sourcemaps = require('gulp-sourcemaps');\nvar gutil = require('gulp-util');\n\
    var watchify = require('watchify');\nvar babelify = require('babelify');\nvar\
    \ babel = require('babel-core');\nvar source = require('vinyl-source-stream');\n\
    var buffer = require('vinyl-buffer');\nvar gutil = require('gulp-util');\nvar\
    \ browserify = require('browserify');\nvar source = require('vinyl-source-stream');\n\
    var buffer = require('vinyl-buffer');\nvar gutil = require('gulp-util');\nvar\
    \ source = require('vinyl-source-stream');\nvar buffer = require('vinyl-buffer');\n\
    var gutil = require('gulp-util');\nvar source = require('vinyl-source-stream');\n\
    var buffer = require('vinyl-buffer');\nvar gutil = require('gulp-util');\nvar\
    \ source = require('vinyl-source-stream');\nvar buffer = require('vinyl-buffer');\n\
    var gutil = require('gulp-util');\nvar source = require('vinyl-source-stream');\n\
    var buffer = require('vinyl-buffer');\nvar gutil = require('gulp-util');\nvar\
    \ source = require('vinyl-source-stream');\nvar buffer = require('vinyl-buffer');\n\
    var gutil = require('gulp-util');\nvar source = require('vinyl-source-stream');\n\
    var\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = intersection;\n  assert.deepEqual(candidate([1, 2], [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1,\
    \ 1], [0, 4]),\"NO\");\n  assert.deepEqual(candidate([-3, -1], [-5, 5]),\"YES\"\
    );\n  assert.deepEqual(candidate([-2, 2], [-4, 0]),\"YES\");\n  assert.deepEqual(candidate([-11,\
    \ 2], [-1, -1]),\"NO\");\n  assert.deepEqual(candidate([1, 2], [3, 5]),\"NO\"\
    );\n  assert.deepEqual(candidate([1, 2], [1, 2]),\"NO\");\n  assert.deepEqual(candidate([-2,\
    \ -2], [-3, -2]),\"NO\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpyjpvsadv.js:30\n<|endoftext|><|javascript|>var gulp = require('gulp');\n\
    ^\n\nSyntaxError: Unexpected token '<'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341884
- exit_code: 1
  program: "//You are given two intervals,\n// where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
    \ which means that the interval (start, end)\n// includes both start and end.\n\
    // For each given interval, it is assumed that its start is less or equal its\
    \ end.\n// Your task is to determine whether the length of intersection of these\
    \ two \n// intervals is a prime number.\n// Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n\
    // If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
    \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n//\
    \ [input/output] samples:\n// >>> intersection((1, 2), (2, 3))\n// \"NO\"\n//\
    \ >>> intersection((-1, 1), (0, 4))\n// \"NO\"\n// >>> intersection((-3, -1),\
    \ (-5, 5))\n// \"YES\"\nfunction intersection(interval1, interval2){\n    var\
    \ start1 = interval1[0];\n    var end1 = interval1[1];\n    var start2 = interval2[0];\n\
    \    var end2 = interval2[1];\n    var length = Math.min(end1, end2) - Math.max(start1,\
    \ start2);\n    if(length % 2 === 0) return \"NO\";\n    else return \"YES\";\n\
    }\n<|endoftext|><|javascript|>// Copyright (c) 2012 Ecma International.  All rights\
    \ reserved.\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = intersection;\n  assert.deepEqual(candidate([1, 2], [2, 3]),\"\
    NO\");\n  assert.deepEqual(candidate([-1, 1], [0, 4]),\"NO\");\n  assert.deepEqual(candidate([-3,\
    \ -1], [-5, 5]),\"YES\");\n  assert.deepEqual(candidate([-2, 2], [-4, 0]),\"YES\"\
    );\n  assert.deepEqual(candidate([-11, 2], [-1, -1]),\"NO\");\n  assert.deepEqual(candidate([1,\
    \ 2], [3, 5]),\"NO\");\n  assert.deepEqual(candidate([1, 2], [1, 2]),\"NO\");\n\
    \  assert.deepEqual(candidate([-2, -2], [-3, -2]),\"NO\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpa638cucz.js:29\n<|endoftext|><|javascript|>// Copyright (c) 2012\
    \ Ecma International.  All rights reserved.\n^\n\nSyntaxError: Unexpected token\
    \ '<'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341884
- exit_code: 1
  program: "//You are given two intervals,\n// where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
    \ which means that the interval (start, end)\n// includes both start and end.\n\
    // For each given interval, it is assumed that its start is less or equal its\
    \ end.\n// Your task is to determine whether the length of intersection of these\
    \ two \n// intervals is a prime number.\n// Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n\
    // If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
    \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n//\
    \ [input/output] samples:\n// >>> intersection((1, 2), (2, 3))\n// \"NO\"\n//\
    \ >>> intersection((-1, 1), (0, 4))\n// \"NO\"\n// >>> intersection((-3, -1),\
    \ (-5, 5))\n// \"YES\"\nfunction intersection(interval1, interval2){\n    var\
    \ start1 = interval1[0], end1 = interval1[1];\n    var start2 = interval2[0],\
    \ end2 = interval2[1];\n    if(start1 > end2 || start2 > end1) return \"NO\";\n\
    \    var len1 = end1 - start1 + 1, len2 = end2 - start2 + 1;\n    var len = Math.min(len1,\
    \ len2);\n    var i = 0, j = 0;\n    var res = \"NO\";\n    for(i = 0; i < len;\
    \ i++){\n        if(start1 <= start2 + i && start2 + i <= end1) res = \"YES\"\
    ;\n        if(start1 + i <= end2 && end2 <= end1 + i) res = \"YES\";\n    }\n\
    \    return res;\n}\n<|endoftext|><|javascript|>// Copyright 2009 the Sputnik\
    \ authors.  All rights reserved.\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = intersection;\n  assert.deepEqual(candidate([1,\
    \ 2], [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1, 1], [0, 4]),\"NO\");\n\
    \  assert.deepEqual(candidate([-3, -1], [-5, 5]),\"YES\");\n  assert.deepEqual(candidate([-2,\
    \ 2], [-4, 0]),\"YES\");\n  assert.deepEqual(candidate([-11, 2], [-1, -1]),\"\
    NO\");\n  assert.deepEqual(candidate([1, 2], [3, 5]),\"NO\");\n  assert.deepEqual(candidate([1,\
    \ 2], [1, 2]),\"NO\");\n  assert.deepEqual(candidate([-2, -2], [-3, -2]),\"NO\"\
    );\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpg0sg4t05.js:34\n<|endoftext|><|javascript|>// Copyright 2009 the\
    \ Sputnik authors.  All rights reserved.\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341884
- exit_code: 1
  program: "//You are given two intervals,\n// where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
    \ which means that the interval (start, end)\n// includes both start and end.\n\
    // For each given interval, it is assumed that its start is less or equal its\
    \ end.\n// Your task is to determine whether the length of intersection of these\
    \ two \n// intervals is a prime number.\n// Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n\
    // If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
    \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n//\
    \ [input/output] samples:\n// >>> intersection((1, 2), (2, 3))\n// \"NO\"\n//\
    \ >>> intersection((-1, 1), (0, 4))\n// \"NO\"\n// >>> intersection((-3, -1),\
    \ (-5, 5))\n// \"YES\"\nfunction intersection(interval1, interval2){\n    var\
    \ start1 = interval1[0],\n        end1 = interval1[1],\n        start2 = interval2[0],\n\
    \        end2 = interval2[1];\n    if(start1 > end2 || start2 > end1) return \"\
    NO\";\n    var len1 = end1 - start1,\n        len2 = end2 - start2,\n        len\
    \ = Math.min(len1, len2);\n    var i = 0,\n        j = 0,\n        k = 0,\n  \
    \      n = 0,\n        prime = false;\n    for(i = 0; i < len; i++){\n       \
    \ if(start1 + i >= start2 && start1 + i <= end2){\n            n++;\n        }\n\
    \        if(start2 + i >= start1 && start2 + i <= end1){\n            n++;\n \
    \       }\n    }\n    if(n == len){\n        prime = true;\n    }\n    return\
    \ prime ? \"YES\" : \"NO\";\n}\n<|endoftext|><|javascript|>import React from 'react';\n\
    import { storiesOf } from '@storybook/react';\nimport { action } from '@storybook/addon-actions';\n\
    import { withKnobs, boolean } from '@storybook/addon-knobs';\nimport { withInfo\
    \ } from '@storybook/addon-info';\n\nimport { Button, ButtonGroup } from '../Button';\n\
    import { ButtonGroupInfo } from '../ButtonGroup';\n\nconst stories = storiesOf('ButtonGroup',\
    \ module);\n\nstories.addDecorator(withKnobs);\nstories.addDecorator(withInfo);\n\
    \nstories.add('ButtonGroup', () => (\n  <ButtonGroup>\n    <Button>Button 1</Button>\n\
    \    <Button>Button 2</Button>\n    <Button>Button 3</Button>\n  </ButtonGroup>\n\
    ));\n\nstories.add('ButtonGroup with info', () => (\n  <ButtonGroupInfo>\n   \
    \ <Button>Button 1</Button>\n    <Button>Button 2</Button>\n    <Button>Button\
    \ 3</Button>\n  </ButtonGroupInfo>\n));\n\nstories.add('ButtonGroup with info\
    \ and custom className', () => (\n  <ButtonGroup\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = intersection;\n  assert.deepEqual(candidate([1,\
    \ 2], [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1, 1], [0, 4]),\"NO\");\n\
    \  assert.deepEqual(candidate([-3, -1], [-5, 5]),\"YES\");\n  assert.deepEqual(candidate([-2,\
    \ 2], [-4, 0]),\"YES\");\n  assert.deepEqual(candidate([-11, 2], [-1, -1]),\"\
    NO\");\n  assert.deepEqual(candidate([1, 2], [3, 5]),\"NO\");\n  assert.deepEqual(candidate([1,\
    \ 2], [1, 2]),\"NO\");\n  assert.deepEqual(candidate([-2, -2], [-3, -2]),\"NO\"\
    );\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp70da7fjx.js:47\n<|endoftext|><|javascript|>import React from 'react';\n\
    ^\n\nSyntaxError: Unexpected token '<'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1048:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341884
- exit_code: 1
  program: "//You are given two intervals,\n// where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
    \ which means that the interval (start, end)\n// includes both start and end.\n\
    // For each given interval, it is assumed that its start is less or equal its\
    \ end.\n// Your task is to determine whether the length of intersection of these\
    \ two \n// intervals is a prime number.\n// Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n\
    // If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
    \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n//\
    \ [input/output] samples:\n// >>> intersection((1, 2), (2, 3))\n// \"NO\"\n//\
    \ >>> intersection((-1, 1), (0, 4))\n// \"NO\"\n// >>> intersection((-3, -1),\
    \ (-5, 5))\n// \"YES\"\nfunction intersection(interval1, interval2){\n    var\
    \ start1 = interval1[0],\n        end1 = interval1[1],\n        start2 = interval2[0],\n\
    \        end2 = interval2[1];\n    \n    if(start1 > end1 || start2 > end2){\n\
    \        return \"NO\";\n    }\n    \n    var len1 = end1 - start1,\n        len2\
    \ = end2 - start2,\n        len = Math.min(len1, len2);\n    \n    if(len % 2\
    \ === 0){\n        return \"NO\";\n    }\n    \n    var i = start1,\n        j\
    \ = start2;\n    \n    while(i < end1 && j < end2){\n        if(i < end1 && j\
    \ < end2 && interval1[1] > interval2[1]){\n            i++;\n        }else if(i\
    \ < end1 && j < end2 && interval1[1] < interval2[1]){\n            j++;\n    \
    \    }else if(i < end1 && j < end2 && interval1[1] === interval2[1]){\n      \
    \      i++;\n            j++;\n        }else{\n            return \"NO\";\n  \
    \      }\n    }\n    \n    return \"YES\";\n}<|endoftext|><|javascript|>/*\n *\
    \ Copyright (c) 2015-2016 Dilvan Moreira. \n * Copyright (c) 2015-2016 John Garavito.\n\
    \ *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n *\
    \  you may not use this file except in compliance with the License.\n *  You may\
    \ obtain a copy of the License at\n *  \n *    http://www.apache.org/licenses/LICENSE-2.0\n\
    \ *\n * Unless required by applicable law or agreed to in writing,\n * software\
    \ distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT\
    \ WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the\
    \ License for the\n * specific language governing permissions and limitations\n\
    \ * under the License.\n */\n\n(function( factory ) {\n\tif ( typeof define ===\
    \ \"function\" && define.amd ) {\n\t\tdefine( [\"jquery\", \"../jquery.validate\"\
    ], factory );\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = intersection;\n  assert.deepEqual(candidate([1, 2], [2, 3]),\"\
    NO\");\n  assert.deepEqual(candidate([-1, 1], [0, 4]),\"NO\");\n  assert.deepEqual(candidate([-3,\
    \ -1], [-5, 5]),\"YES\");\n  assert.deepEqual(candidate([-2, 2], [-4, 0]),\"YES\"\
    );\n  assert.deepEqual(candidate([-11, 2], [-1, -1]),\"NO\");\n  assert.deepEqual(candidate([1,\
    \ 2], [3, 5]),\"NO\");\n  assert.deepEqual(candidate([1, 2], [1, 2]),\"NO\");\n\
    \  assert.deepEqual(candidate([-2, -2], [-3, -2]),\"NO\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmphbzu02v6.js:55\n}<|endoftext|><|javascript|>/*\n ^\n\nSyntaxError:\
    \ Unexpected token '<'\n    at Object.compileFunction (node:vm:360:18)\n    at\
    \ wrapSafe (node:internal/modules/cjs/loader:1048:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1083:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\
    \nNode.js v18.8.0\n"
  stdout: ''
  timestamp: 1662341884
