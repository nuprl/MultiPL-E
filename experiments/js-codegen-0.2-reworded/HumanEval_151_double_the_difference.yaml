name: HumanEval_151_double_the_difference
language: js
prompt: "//Given an array of numbers, return the sum of squares of the numbers\n//\
  \ in the array that are odd. Ignore numbers that are negative or not integers.\n\
  // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
  \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
  // 0  \n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
  \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
  \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
  \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
  \ 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
completions: ["  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i]\
    \ > 0 && lst[i] % 1 === 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  var sum = 0;\n  for (var i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] > 0 && lst[i] % 2 == 1) {\n      sum += Math.pow(lst[i], 2);\n    }\n\
    \  }\n  return sum;\n}\n", "    var sum = 0;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] > 0 && lst[i] % 2 == 1){\n            sum += Math.pow(lst[i],\
    \ 2);\n        }\n    }\n    return sum;\n}\n", "  var sum = 0;\n  for(var i =\
    \ 0; i < lst.length; i++){\n    if(lst[i] > 0 && lst[i] % 2 == 1){\n      sum\
    \ += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "  var sum = 0;\n  for(var\
    \ i = 0; i < lst.length; i++){\n    if(lst[i] > 0 && lst[i] % 2 === 1){\n    \
    \  sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n}\n", "  var sum =\
    \ 0;\n  for (var i = 0; i < lst.length; i++){\n    if (lst[i] > 0 && lst[i] %\
    \ 2 == 1){\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n}\n",
  "  var sum = 0;\n  for (var i = 0; i < lst.length; i++){\n    if (lst[i] > 0 &&\
    \ lst[i] % 2 === 1){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n\
    }\n", "  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] >\
    \ 0 && lst[i] % 2 === 1){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  var sum = 0;\n  for (var i = 0; i < lst.length; i++){\n    if\
    \ (lst[i] > 0 && lst[i] % 2 === 1){\n      sum += lst[i] * lst[i];\n    }\n  }\n\
    \  return sum;\n}\n", "  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n\
    \    if(lst[i] > 0 && lst[i] % 2 == 1){\n      sum += lst[i] * lst[i];\n    }\n\
    \  }\n  return sum;\n}\n", "  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n\
    \    if(lst[i] > 0 && lst[i] % 2 == 1){\n      sum += lst[i] * lst[i];\n    }\n\
    \  }\n  return sum;\n}\n", "  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n\
    \    if(lst[i] > 0 && lst[i] % 2 == 1){\n      sum += Math.pow(lst[i], 2);\n \
    \   }\n  }\n  return sum;\n}\n", "  var sum = 0;\n  for(var i=0; i<lst.length;\
    \ i++){\n    if(lst[i] > 0 && lst[i] % 2 == 1){\n      sum += lst[i] * lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  var sum = 0;\n  for(var i = 0; i < lst.length;\
    \ i++){\n    if(lst[i] > 0 && lst[i] % 2 == 1){\n      sum += Math.pow(lst[i],\
    \ 2);\n    }\n  }\n  return sum;\n}\n<|endoftext|><|javascript|>var fs = require('fs');\n\
    var path = require('path');\nvar util = require('util');\nvar _ = require('lodash');\n\
    \nvar logger = require('../logger');\nvar config = require('../config');\nvar\
    \ utils = require('../utils');\n\nvar configPath = path.join(config.get('root'),\
    \ 'config.json');\n\nvar configCache = {};\n\nvar getConfig = function(cb) {\n\
    \  if (configCache.config) {\n    cb(null, configCache.config);\n  } else {\n\
    \    fs.readFile(configPath, function(err, data) {\n      if (err) {\n       \
    \ cb(err);\n      } else {\n        try {\n          configCache.config = JSON.parse(data);\n\
    \        } catch (e) {\n          cb(e);\n        }\n        cb(null, configCache.config);\n\
    \      }\n    });\n  }\n};\n\nvar setConfig = function(config, cb) {\n  if (config)\
    \ {\n    fs.writeFile(configPath, JSON.stringify(config, null, 2), function(err)\
    \ {\n      if (err) {\n        cb(err);\n      } else {\n        configCache.config\
    \ = config;\n        cb(null);\n      }\n    });\n  } else {\n    cb(new Error('config\
    \ is required'));\n  }\n};\n\nvar getConfigValue = function(key, cb) {\n  getConfig(function(err,\
    \ config) {\n    if (err) {\n      cb(err);\n    } else {\n      cb(null, config[key]);\n\
    \    }\n  });\n};\n\nvar setConfigValue = function(key, value, cb) {\n  getConfig(function(err,\
    \ config) {\n    if (err) {\n      ", "    var sum = 0;\n    for(var i = 0; i\
    \ < lst.length; i++){\n        if(lst[i] > 0 && lst[i] % 2 == 1){\n          \
    \  sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n<|endoftext|><|javascript|>//\
    \ Copyright (c) 2012 Ecma International.  All rights reserved.", "    var sum\
    \ = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && lst[i]\
    \ % 2 == 1){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return\
    \ sum;\n}\n<|endoftext|><|javascript|>/*\n * Copyright (c) Microsoft Corporation.\
    \ All rights reserved.\n * Licensed under the MIT License. See License.txt in\
    \ the project root for\n * license information.\n *\n * Code generated by Microsoft\
    \ (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will\
    \ be lost if the code is\n * regenerated.\n */\n\n'use strict';\n\nconst models\
    \ = require('./index');\n", "    var sum = 0;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] > 0 && lst[i] % 2 == 1){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n<|endoftext|><|javascript|>var\
    \ fs = require('fs');\nvar path = require('path');\nvar util = require('util');\n\
    var events = require('events');\nvar os = require('os');\nvar _ = require('underscore');\n\
    var async = require('async');\nvar winston = require('winston');\n\nvar logger\
    \ = new (winston.Logger)({\n    transports: [\n        new (winston.transports.Console)({\n\
    \            level: 'debug',\n            colorize: true,\n            timestamp:\
    \ function() {\n                var date = new Date();\n                var hours\
    \ = date.getHours();\n                var minutes = date.getMinutes();\n     \
    \           var seconds = date.getSeconds();\n                var milliseconds\
    \ = date.getMilliseconds();\n                return hours + ':' + minutes + ':'\
    \ + seconds + '.' + milliseconds;\n            }\n        })\n    ]\n});\n\nvar\
    \ config = {\n    logger: logger,\n    logLevel: 'debug',\n    logFile: './logs/app.log',\n\
    \    logFileSize: 1024 * 1024 * 10, // 10 MB\n    logFileCount: 10,\n    logFileRotation:\
    \ true,\n    logFileRotationMaxSize: 1024 * 1024 * 10, // 10 MB\n    logFileRotationMaxFiles:\
    \ 10,\n    logFileRotationMaxAge: '1d',\n    logFileRotationMaxAgeDays: 1,\n \
    \   logFileRotationMaxAgeHours: 24,\n    logFileRotationMaxAgeMinutes: 60,\n \
    \   logFileRotationMaxAgeSeconds: 60,\n    logFileRotationMaxAgeMilliseconds:\
    \ 1000,\n    logFileRotationMaxAgeMicroseconds: 1000,\n    logFileRotationMaxAgeBytes:\
    \ 1024 * 1024 * 10, // 10 MB\n    logFileRotationMaxAgeKilobytes: 1024 * 1024\
    \ * 10, //", "  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i]\
    \ > 0 && lst[i] % 2 == 1){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n  \
    \      if(lst[i] > 0 && lst[i] % 2 === 1){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n<|endoftext|><|javascript|>/*\n * Copyright\
    \ (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\
    \ See License.txt in the project root for\n * license information.\n *\n * Code\
    \ generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect\
    \ behavior and will be lost if the code is\n * regenerated.\n */\n\n'use strict';\n\
    \nconst models = require('./index');\n", "    var sum = 0;\n    for(var i = 0;\
    \ i < lst.length; i++){\n        if(lst[i] > 0 && lst[i] % 2 == 1){\n        \
    \    sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
