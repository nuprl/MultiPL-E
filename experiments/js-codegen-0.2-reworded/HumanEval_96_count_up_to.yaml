name: HumanEval_96_count_up_to
language: js
prompt: "//Implement a function that takes an non-negative integer and returns an\
  \ array of the first n\n// integers that are prime numbers and less than n.\n//\
  \ for example:\n// >>> count_up_to(5)\n// [2,3]\n// >>> count_up_to(11)\n// [2,3,5,7]\n\
  // >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2,3,5,7,11,13,17,19]\n\
  // >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2,3,5,7,11,13,17]\nfunction\
  \ count_up_to(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = count_up_to;\n  assert.deepEqual(candidate(5),[2, 3]);\n  assert.deepEqual(candidate(6),[2,\
  \ 3, 5]);\n  assert.deepEqual(candidate(7),[2, 3, 5]);\n  assert.deepEqual(candidate(10),[2,\
  \ 3, 5, 7]);\n  assert.deepEqual(candidate(0),[]);\n  assert.deepEqual(candidate(22),[2,\
  \ 3, 5, 7, 11, 13, 17, 19]);\n  assert.deepEqual(candidate(1),[]);\n  assert.deepEqual(candidate(18),[2,\
  \ 3, 5, 7, 11, 13, 17]);\n  assert.deepEqual(candidate(47),[2, 3, 5, 7, 11, 13,\
  \ 17, 19, 23, 29, 31, 37, 41, 43]);\n  assert.deepEqual(candidate(101),[2, 3, 5,\
  \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
  \ 89, 97]);\n}\n\ntest();"
completions: ["  var primes = [];\n  for (var i = 2; i <= n; i++) {\n    if (is_prime(i))\
    \ {\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n", "  var primes\
    \ = [];\n  for(var i = 2; i < n; i++){\n    if(is_prime(i)){\n      primes.push(i);\n\
    \    }\n  }\n  return primes;\n}\n", "    var arr = [];\n    for(var i=2; i<=n;\
    \ i++){\n        if(is_prime(i)){\n            arr.push(i);\n        }\n    }\n\
    \    return arr;\n}\n", "    var result = [];\n    for(var i=2; i<=n; i++){\n\
    \        if(is_prime(i)){\n            result.push(i);\n        }\n    }\n   \
    \ return result;\n}\n", "    var result = [];\n    for(var i=2;i<=n;i++){\n  \
    \      if(is_prime(i)){\n            result.push(i);\n        }\n    }\n    return\
    \ result;\n}\n", "  if(n < 0) return [];\n  if(n === 0) return [];\n  if(n ===\
    \ 1) return [];\n  if(n === 2) return [2];\n  if(n === 3) return [2,3];\n  if(n\
    \ === 4) return [2,3,5];\n  if(n === 5) return [2,3,5,7];\n  if(n === 6) return\
    \ [2,3,5,7,11];\n  if(n === 7) return [2,3,5,7,11,13];\n  if(n === 8) return [2,3,5,7,11,13,17];\n\
    \  if(n === 9) return [2,3,5,7,11,13,17,19];\n  if(n === 10) return [2,3,5,7,11,13,17,19,23];\n\
    \  if(n === 11) return [2,3,5,7,11,13,17,19,23,29];\n  if(n === 12) return [2,3,5,7,11,13,17,19,23,29,31];\n\
    \  if(n === 13) return [2,3,5,7,11,13,17,19,23,29,31,37];\n  if(n === 14) return\
    \ [2,3,5,7,11,13,17,19,23,29,31,37,41];\n  if(n === 15) return [2,3,5,7,11,13,17,19,23,29,31,37,41,43];\n\
    \  if(n === 16) return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47];\n  if(n ===\
    \ 17) return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53];\n  if(n === 18) return\
    \ [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59];\n  if(n === 19", "    var\
    \ primes = [];\n    for(var i=2;i<=n;i++){\n        if(is_prime(i)){\n       \
    \     primes.push(i);\n        }\n    }\n    return primes;\n}\n", "    var result\
    \ = [];\n    for(var i = 2; i <= n; i++){\n        if(is_prime(i)){\n        \
    \    result.push(i);\n        }\n    }\n    return result;\n}\n", "  var primes\
    \ = [];\n  for(var i=2;i<=n;i++){\n    if(is_prime(i)){\n      primes.push(i);\n\
    \    }\n  }\n  return primes;\n}\n", "  var primes = [];\n  for (var i = 2; i\
    \ < n; i++) {\n    if (is_prime(i)) {\n      primes.push(i);\n    }\n  }\n  return\
    \ primes;\n}\n", "  var primes = [];\n  var i = 2;\n  while(i <= n){\n    if(is_prime(i)){\n\
    \      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n}\n", "    var\
    \ arr = [];\n    for(var i=1;i<=n;i++){\n        if(is_prime(i)){\n          \
    \  arr.push(i);\n        }\n    }\n    return arr;\n}\n", "  var primes = [];\n\
    \  for(var i=2; i<=n; i++){\n    if(is_prime(i)){\n      primes.push(i);\n   \
    \ }\n  }\n  return primes;\n}\n", "    var primes = [];\n    for(var i=2; i<n;\
    \ i++){\n        if(is_prime(i)){\n            primes.push(i);\n        }\n  \
    \  }\n    return primes;\n}\n", "  var result = [];\n  for(var i=1; i<=n; i++){\n\
    \    if(is_prime(i)){\n      result.push(i);\n    }\n  }\n  return result;\n}\n",
  "  if(n < 0) return [];\n  var arr = [];\n  for(var i = 2; i <= n; i++){\n    if(is_prime(i))\
    \ arr.push(i);\n  }\n  return arr;\n}\n", "  if(n < 0){\n    return [];\n  }\n\
    \  let primes = [];\n  let i = 2;\n  while(i <= n){\n    if(is_prime(i)){\n  \
    \    primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n}\n", "  var primes\
    \ = [];\n  for (var i = 2; i <= n; i++) {\n    if (is_prime(i)) {\n      primes.push(i);\n\
    \    }\n  }\n  return primes;\n}\n", "  var primes = [];\n  for(var i = 2; i <\
    \ n; i++){\n    if(is_prime(i)){\n      primes.push(i);\n    }\n  }\n  return\
    \ primes;\n}\n", "    var result = [];\n    for(var i = 2; i <= n; i++){\n   \
    \     if(is_prime(i)){\n            result.push(i);\n        }\n    }\n    return\
    \ result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
