{
  "name": "HumanEval_6_parse_nested_parens",
  "language": "js",
  "prompt": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var max_nesting = 0;\n    var paren_count = 0;\n    var paren_index = 0;\n    var paren_length = paren_string.length;\n    var paren_char = paren_string.charAt(paren_index);\n    while(paren_index < paren_length){\n        if(paren_char === '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n        }\n        else if(paren_char === ')'){\n            paren_count--;\n            if(paren_stack.length > 0){\n                max_nesting = Math.max(max_nesting, paren_stack.pop());\n            }\n        }\n        paren_index++;\n        paren_char = paren_string.charAt(paren_index);\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp8t62x9em.js:35:10)\n    at Object.<anonymous> (/tmp/tmp8t62x9em.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_depth = 0;\n    var paren_index = 0;\n    var paren_string_length = paren_string.length;\n    var paren_string_index = 0;\n    var paren_string_index_prev = 0;\n    var paren_string_index_next = 0;\n    var paren_string_index_next_prev = 0;\n    var paren_string_index_next_next = 0;\n    var paren_string_index_next_next_prev = 0;\n    var paren_string_index_next_next_next = 0;\n    var paren_string_index_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpmsk594k7.js:43\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var group = paren_groups[i];\n        var nesting = 0;\n        for(var j = 0; j < group.length; j++){\n            if(group[j] == \"(\"){\n                nesting++;\n            }\n            else if(group[j] == \")\"){\n                nesting--;\n            }\n        }\n        if(nesting > max_nesting){\n            max_nesting = nesting;\n            max_nesting_index = i;\n        }\n    }\n    return max_nesting_index;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmply_8_lg7.js:34:10)\n    at Object.<anonymous> (/tmp/tmply_8_lg7.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n            paren_level = paren_stack.length;\n        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n            if(paren_count === 0){\n                var max_level = paren_stack.pop();\n                if(max_level === paren_level){\n                    console.log(max_level);\n                }\n                else{\n                    console.log(max_level);\n                }\n            }\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "2\n3\n1\n2\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpdop0czo8.js:37:10)\n    at Object.<anonymous> (/tmp/tmpdop0czo8.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var max_nesting = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var aa = 0;\n    var ab = 0;\n    var ac = 0;\n    var ad = 0;\n    var ae = 0;\n    var af = 0;\n    var ag = 0;\n    var ah = 0;\n    var ai = 0;\n    var aj = 0;\n    var ak = 0;\n    var al = 0;\n    var am = 0;\n    var an = 0;\n    var ao = 0;\n    var ap = 0;\n    var aq = 0;\n    var ar = 0;\n    var as = 0;\n    var at = 0;\n    var au = 0;\n    var av = 0;\n    var aw = 0;\n    var ax = 0;\n    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpsq4z4k49.js:89\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_depth = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n            if(paren_count === 0){\n                paren_depth = paren_stack.pop();\n            }\n        }\n    }\n    return paren_depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp736pq4g4.js:31:10)\n    at Object.<anonymous> (/tmp/tmp736pq4g4.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_count_max = 0;\n    var paren_count_max_index = 0;\n    var paren_count_max_index_string = \"\";\n    var paren_count_max_index_string_index = 0;\n    var paren_count_max_index_string_index_max = 0;\n    var paren_count_max_index_string_index_max_index = 0;\n    var paren_count_max_index_string_index_max_index_string = \"\";\n    var paren_count_max_index_string_index_max_index_string_index = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string = \"\";\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max_index = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max_index_string = \"\";\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max_index_string_index = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max_index_string_index_max = 0;\n    var paren_count_max_index_string_index_max_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpcn59i22q.js:37\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var curr_nesting = 0;\n        for(var j = 0; j < paren_groups[i].length; j++){\n            if(paren_groups[i][j] == \"(\"){\n                curr_nesting++;\n            }\n            else if(paren_groups[i][j] == \")\"){\n                curr_nesting--;\n            }\n        }\n        if(curr_nesting > max_nesting){\n            max_nesting = curr_nesting;\n            max_nesting_index = i;\n        }\n    }\n    return [max_nesting_index, max_nesting];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpatg91i2o.js:33:10)\n    at Object.<anonymous> (/tmp/tmpatg91i2o.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var max_nesting = 0;\n    var current_nesting = 0;\n    var current_index = 0;\n    var current_char = paren_string[current_index];\n    while(current_char !== \"\"){\n        if(current_char === \"(\"){\n            paren_stack.push(current_char);\n            current_nesting++;\n        }else if(current_char === \")\"){\n            if(paren_stack.length === 0){\n                console.log(\"Error: Unbalanced parentheses\");\n                return;\n            }\n            current_nesting--;\n            if(current_nesting === 0){\n                current_index++;\n                current_char = paren_string[current_index];\n                continue;\n            }\n            paren_stack.pop();\n        }\n        current_index++;\n        current_char = paren_string[current_index];\n    }\n    if(paren_stack.length !== 0){\n        console.log(\"Error: Unbalanced parentheses\");\n        return;\n    }\n    console.log(max_nesting);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for (var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var nesting = 0;\n        for (var j = 0; j < paren_group.length; j++){\n            if (paren_group[j] == \"(\"){\n                nesting++;\n            }\n            else if (paren_group[j] == \")\"){\n                nesting--;\n            }\n        }\n        if (nesting > max_nesting){\n            max_nesting = nesting;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpb9ps6ea4.js:32:10)\n    at Object.<anonymous> (/tmp/tmpb9ps6ea4.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var group = paren_groups[i];\n        var nesting = 0;\n        for(var j = 0; j < group.length; j++){\n            if(group[j] == \"(\"){\n                nesting++;\n            }\n            else if(group[j] == \")\"){\n                nesting--;\n            }\n        }\n        if(nesting > max_nesting){\n            max_nesting = nesting;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpfs_3jqvi.js:32:10)\n    at Object.<anonymous> (/tmp/tmpfs_3jqvi.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var paren_count = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                paren_count++;\n            }\n            else if(paren_group[j] == \")\"){\n                paren_count--;\n            }\n        }\n        if(paren_count > max_nesting){\n            max_nesting = paren_count;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpe4mrolb6.js:32:10)\n    at Object.<anonymous> (/tmp/tmpe4mrolb6.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var nesting = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                nesting++;\n            }\n            else if(paren_group[j] == \")\"){\n                nesting--;\n            }\n        }\n        if(nesting > max_nesting){\n            max_nesting = nesting;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpnersyeus.js:32:10)\n    at Object.<anonymous> (/tmp/tmpnersyeus.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    var paren_string_index = 0;\n    var paren_string_char;\n    var paren_string_char_index;\n    var paren_string_char_count;\n    var paren_string_char_count_index;\n    var paren_string_char_count_count;\n    var paren_string_char_count_count_index;\n    var paren_string_char_count_count_count;\n    var paren_string_char_count_count_count_index;\n    var paren_string_char_count_count_count_count;\n    var paren_string_char_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_count\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmp_h044xlb.js:44\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_count = 0;\n    var paren_stack = [];\n    var output = [];\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] == '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n        }\n        else if(paren_string[i] == ')'){\n            paren_count--;\n            if(paren_count == 0){\n                output.push(paren_stack.pop());\n            }\n        }\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp9wazlakw.js:31:10)\n    at Object.<anonymous> (/tmp/tmp9wazlakw.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var current_level = 0;\n    var max_level = 0;\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n            paren_stack.push(i);\n            current_level++;\n        }\n        else if(paren_string[i] === ')'){\n            if(current_level === 0){\n                console.log(\"Error: Unbalanced parentheses\");\n                return;\n            }\n            current_level--;\n            if(current_level === max_level){\n                max_level = 0;\n            }\n            else{\n                max_level = current_level;\n            }\n            paren_stack.pop();\n        }\n    }\n    if(current_level !== 0){\n        console.log(\"Error: Unbalanced parentheses\");\n        return;\n    }\n    console.log(max_level);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "0\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp0nu7u6k8.js:42:10)\n    at Object.<anonymous> (/tmp/tmp0nu7u6k8.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var current_nesting = 0;\n        var current_nesting_index = 0;\n        for(var j = 0; j < paren_groups[i].length; j++){\n            if(paren_groups[i][j] == \"(\"){\n                current_nesting++;\n            }\n            else if(paren_groups[i][j] == \")\"){\n                current_nesting--;\n            }\n            if(current_nesting > max_nesting){\n                max_nesting = current_nesting;\n                max_nesting_index = current_nesting_index;\n            }\n            current_nesting_index++;\n        }\n    }\n    return [max_nesting, max_nesting_index];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_r0xiof2.js:35:10)\n    at Object.<anonymous> (/tmp/tmp_r0xiof2.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var nesting = get_nesting(paren_group);\n        if(nesting > max_nesting){\n            max_nesting = nesting;\n            max_nesting_index = i;\n        }\n    }\n    return max_nesting_index;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpf9hp1hit.js:12\n        var nesting = get_nesting(paren_group);\n                      ^\n\nReferenceError: get_nesting is not defined\n    at parse_nested_parens (/tmp/tmpf9hp1hit.js:12:23)\n    at test (/tmp/tmpf9hp1hit.js:26:20)\n    at Object.<anonymous> (/tmp/tmpf9hp1hit.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_depth = 0;\n    var paren_index = 0;\n    var paren_string_length = paren_string.length;\n    var paren_string_index = 0;\n    var paren_string_index_prev = 0;\n    var paren_string_index_next = 0;\n    var paren_string_index_next_prev = 0;\n    var paren_string_index_next_next = 0;\n    var paren_string_index_next_next_prev = 0;\n    var paren_string_index_next_next_next = 0;\n    var paren_string_index_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpmsk594k7.js:43\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] == '('){\n            paren_stack.push(paren_count);\n            paren_count = 0;\n            paren_level++;\n        }\n        else if(paren_string[i] == ')'){\n            paren_count++;\n            if(paren_stack.length > 0){\n                paren_count = paren_stack.pop();\n                paren_level--;\n            }\n        }\n    }\n    return paren_level;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpbndoipsm.js:33:10)\n    at Object.<anonymous> (/tmp/tmpbndoipsm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_depth = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n            if(paren_count === 0){\n                paren_depth = paren_stack.pop();\n            }\n        }\n    }\n    return paren_depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpsj5a252v.js:31:10)\n    at Object.<anonymous> (/tmp/tmpsj5a252v.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n            if(paren_stack.length > 0){\n                if(paren_count === paren_stack[paren_stack.length - 1]){\n                    paren_stack.pop();\n                }\n                else{\n                    paren_count = paren_stack[paren_stack.length - 1];\n                }\n            }\n        }\n        if(paren_count > max_nesting){\n            max_nesting = paren_count;\n            max_nesting_index = i;\n        }\n    }\n    return [max_nesting, max_nesting_index];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpfu3iidtl.js:40:10)\n    at Object.<anonymous> (/tmp/tmpfu3iidtl.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 9 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var nesting = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                nesting++;\n            }\n            else if(paren_group[j] == \")\"){\n                nesting--;\n            }\n        }\n        if(nesting > max_nesting){\n            max_nesting = nesting;\n            max_nesting_index = i;\n        }\n    }\n    return [max_nesting_index, max_nesting];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp5m7jobli.js:34:10)\n    at Object.<anonymous> (/tmp/tmp5m7jobli.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_index = 0;\n    var paren_string_length = paren_string.length;\n    var paren_string_index = 0;\n    var paren_string_index_prev = 0;\n    var paren_string_index_next = 0;\n    var paren_string_index_next_prev = 0;\n    var paren_string_index_next_next = 0;\n    var paren_string_index_next_next_prev = 0;\n    var paren_string_index_next_next_next = 0;\n    var paren_string_index_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmptbflapu4.js:43\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    var paren_index = 0;\n    var paren_char = \"\";\n    var paren_char_index = 0;\n    var paren_char_count = 0;\n    var paren_char_count_index = 0;\n    var paren_char_count_count = 0;\n    var paren_char_count_count_index = 0;\n    var paren_char_count_count_count = 0;\n    var paren_char_count_count_count_index = 0;\n    var paren_char_count_count_count_count = 0;\n    var paren_char_count_count_count_count_index = 0;\n    var paren_char_count_count_count_count_count = 0;\n    var paren_char_count_count_count_count_count_index = 0;\n    var paren_char_count_count_count_count_count_count = 0;\n    var paren_char_count_count_count_count_count_count_index = 0;\n    var paren_char_count_count_count_count_count_count_count = 0;\n    var paren_char_count_count_count_count_count_count_count_index = 0;\n    var paren_char_count_count_count_count_count_count_count_count = 0;\n    var paren_char_count_count_count_count_count_count_count_count_index = 0;\n    var paren_char_count_count_count_count_count_count_count_count_count = 0;\n    var paren_char_count_count_count_count_count_count_count_count_count_index = 0;\n    var paren_char_count_count_count_count_count_count_count_count_count_count = 0;\n    var paren_char_count_count_count_count_count_count_count_count_count_count\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmphk0x3lqk.js:44\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_count_max = 0;\n    var paren_count_min = 0;\n    var paren_count_max_min = 0;\n    var paren_count_min_max = 0;\n    var paren_count_max_min_max = 0;\n    var paren_count_min_max_min = 0;\n    var paren_count_max_min_max_min = 0;\n    var paren_count_min_max_min_max = 0;\n    var paren_count_max_min_max_min_max = 0;\n    var paren_count_min_max_min_max_min_max = 0;\n    var paren_count_max_min_max_min_max_min_max = 0;\n    var paren_count_min_max_min_max_min_max_min_max = 0;\n    var paren_count_max_min_max_min_max_min_max_min_max = 0;\n    var paren_count_min_max_min_max_min_max_min_max_min_max = 0;\n    var paren_count_max_min_max_min_max_min_max_min_max_min_max = 0;\n    var paren_count_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n    var paren_count_max_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n    var paren_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n    var paren_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n    var paren_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpmf73a4er.js:40\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var parens = paren_string.split(\" \");\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var i = 0; i < parens.length; i++){\n        var paren_count = 0;\n        for(var j = 0; j < parens[i].length; j++){\n            if(parens[i][j] == '('){\n                paren_count++;\n            }\n            else if(parens[i][j] == ')'){\n                paren_count--;\n            }\n        }\n        if(paren_count > max_nesting){\n            max_nesting = paren_count;\n            max_nesting_index = i;\n        }\n    }\n    return [max_nesting, max_nesting_index];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpxgfezosy.js:33:10)\n    at Object.<anonymous> (/tmp/tmpxgfezosy.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var group = paren_groups[i];\n        var nesting = get_nesting(group);\n        if(nesting > max_nesting){\n            max_nesting = nesting;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpl0r94y34.js:11\n        var nesting = get_nesting(group);\n                      ^\n\nReferenceError: get_nesting is not defined\n    at parse_nested_parens (/tmp/tmpl0r94y34.js:11:23)\n    at test (/tmp/tmpl0r94y34.js:24:20)\n    at Object.<anonymous> (/tmp/tmpl0r94y34.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var paren_count = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                paren_count++;\n            }\n            else if(paren_group[j] == \")\"){\n                paren_count--;\n            }\n        }\n        if(paren_count > max_nesting){\n            max_nesting = paren_count;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpe4mrolb6.js:32:10)\n    at Object.<anonymous> (/tmp/tmpe4mrolb6.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    var paren_string_length = paren_string.length;\n    for (var i = 0; i < paren_string_length; i++) {\n        if (paren_string[i] === '(') {\n            paren_stack.push(paren_count);\n            paren_count++;\n        } else if (paren_string[i] === ')') {\n            paren_count--;\n            if (paren_count === 0) {\n                max_nesting = Math.max(max_nesting, paren_stack.pop());\n            }\n        }\n    }\n    max_nesting_index = paren_stack.pop();\n    return max_nesting_index;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpo3wwjhpa.js:32:10)\n    at Object.<anonymous> (/tmp/tmpo3wwjhpa.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var group = paren_groups[i];\n        var nesting = 0;\n        for(var j = 0; j < group.length; j++){\n            if(group[j] === \"(\"){\n                nesting++;\n            }\n            else if(group[j] === \")\"){\n                nesting--;\n            }\n        }\n        if(nesting > max_nesting){\n            max_nesting = nesting;\n            max_nesting_index = i;\n        }\n    }\n    return max_nesting_index;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpgbb3uuzi.js:34:10)\n    at Object.<anonymous> (/tmp/tmpgbb3uuzi.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_depth = 0;\n    var paren_index = 0;\n    var paren_string_length = paren_string.length;\n    var paren_string_index = 0;\n    var paren_string_char = \"\";\n    var paren_string_char_index = 0;\n    var paren_string_char_count = 0;\n    var paren_string_char_count_index = 0;\n    var paren_string_char_count_count = 0;\n    var paren_string_char_count_count_index = 0;\n    var paren_string_char_count_count_count = 0;\n    var paren_string_char_count_count_count_index = 0;\n    var paren_string_char_count_count_count_count = 0;\n    var paren_string_char_count_count_count_count_index = 0;\n    var paren_string_char_count_count_count_count_count = 0;\n    var paren_string_char_count_count_count_count_count_index = 0;\n    var paren_string_char_count_count_count_count_count_count = 0;\n    var paren_string_char_count_count_count_count_count_count_index = 0;\n    var paren_string_char_count_count_count_count_count_count_count = 0;\n    var paren_string_char_count_count_count_count_count_count_count_index = 0;\n    var paren_string_char_count_count_count_count_count_count_count_count = 0;\n    var paren_string_char_count_count_count_count_count_count_count_count_index = 0;\n    var paren_string_char_count_count_count_count_count_count_count_count_count = 0;\n    var paren_string_char_count_count_count_count_count_count_count_count_count_index = 0;\n    var paren\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmprt0br8en.js:44\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var nesting = count_nested_parens(paren_group);\n        if(nesting > max_nesting){\n            max_nesting = nesting;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmp4p79bb8s.js:11\n        var nesting = count_nested_parens(paren_group);\n                      ^\n\nReferenceError: count_nested_parens is not defined\n    at parse_nested_parens (/tmp/tmp4p79bb8s.js:11:23)\n    at test (/tmp/tmp4p79bb8s.js:24:20)\n    at Object.<anonymous> (/tmp/tmp4p79bb8s.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_count_stack = [];\n    var max_nesting = 0;\n    var max_nesting_stack = [];\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmphzev17n7.js:88\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_count_stack = [];\n    var paren_count_stack_index = 0;\n    var paren_count_stack_max = 0;\n    var paren_count_stack_max_index = 0;\n    var paren_count_stack_max_max = 0;\n    var paren_count_stack_max_max_index = 0;\n    var paren_count_stack_max_max_max = 0;\n    var paren_count_stack_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpyodrmg36.js:42\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_count = 0;\n    var paren_stack = [];\n    var paren_string_length = paren_string.length;\n    var output = [];\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n            if(paren_count === 0){\n                output.push(paren_stack.pop());\n            }\n        }\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp97qfubj3.js:31:10)\n    at Object.<anonymous> (/tmp/tmp97qfubj3.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var paren_count = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                paren_count++;\n            }\n            else if(paren_group[j] == \")\"){\n                paren_count--;\n            }\n        }\n        if(paren_count > max_nesting){\n            max_nesting = paren_count;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpe4mrolb6.js:32:10)\n    at Object.<anonymous> (/tmp/tmpe4mrolb6.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string = paren_string.split(\" \");\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] == \"(\"){\n            paren_count++;\n            paren_stack.push(paren_count);\n            paren_level++;\n        }\n        else if(paren_string[i] == \")\"){\n            paren_count--;\n            if(paren_count == 0){\n                var max_level = Math.max.apply(null, paren_stack);\n                console.log(max_level);\n                paren_stack.pop();\n                paren_level--;\n            }\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpz_10iek8.js:34:10)\n    at Object.<anonymous> (/tmp/tmpz_10iek8.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    var paren_index = 0;\n    var paren_char;\n    var paren_char_index;\n    var paren_char_count;\n    var paren_char_count_index;\n    var paren_char_count_count;\n    var paren_char_count_count_index;\n    var paren_char_count_count_count;\n    var paren_char_count_count_count_index;\n    var paren_char_count_count_count_count;\n    var paren_char_count_count_count_count_index;\n    var paren_char_count_count_count_count_count;\n    var paren_char_count_count_count_count_count_index;\n    var paren_char_count_count_count_count_count_count;\n    var paren_char_count_count_count_count_count_count_index;\n    var paren_char_count_count_count_count_count_count_count;\n    var paren_char_count_count_count_count_count_count_count_index;\n    var paren_char_count_count_count_count_count_count_count_count;\n    var paren_char_count_count_count_count_count_count_count_count_index;\n    var paren_char_count_count_count_count_count_count_count_count_count;\n    var paren_char_count_count_count_count_count_count_count_count_count_index;\n    var paren_char_count_count_count_count_count_count_count_count_count_count;\n    var paren_char_count_count_count_count_count_count_count_count_count_count_index;\n    var paren_char_count_count_count_count_count_count_count_count_count_count_count;\n    var paren_char_count\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpodba5l03.js:46\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_depth = 0;\n    var paren_string_length = paren_string.length;\n    var paren_index = 0;\n    var paren_char = \"\";\n    var paren_char_index = 0;\n    var paren_char_length = 0;\n    var paren_char_count = 0;\n    var paren_char_count_max = 0;\n    var paren_char_count_min = 0;\n    var paren_char_count_diff = 0;\n    var paren_char_count_diff_max = 0;\n    var paren_char_count_diff_min = 0;\n    var paren_char_count_diff_diff = 0;\n    var paren_char_count_diff_diff_max = 0;\n    var paren_char_count_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmp6omn4s6a.js:47\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_count_stack = [];\n    var paren_count_stack_index = 0;\n    var paren_count_stack_top = 0;\n    var paren_count_stack_top_index = 0;\n    var paren_count_stack_top_top = 0;\n    var paren_count_stack_top_top_index = 0;\n    var paren_count_stack_top_top_top = 0;\n    var paren_count_stack_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpzlssi0oj.js:42\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] == '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n        }\n        else if(paren_string[i] == ')'){\n            paren_count--;\n            if(paren_count < 0){\n                console.log(\"Error: Invalid parentheses string\");\n                return;\n            }\n            if(paren_count > max_nesting){\n                max_nesting = paren_count;\n                max_nesting_index = i;\n            }\n        }\n    }\n    console.log(max_nesting);\n    console.log(max_nesting_index);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "2\n10\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpta9c50lr.js:38:10)\n    at Object.<anonymous> (/tmp/tmpta9c50lr.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_depth = 0;\n    var paren_count_stack = [];\n    var paren_depth_stack = [];\n    var paren_count_stack_index = 0;\n    var paren_depth_stack_index = 0;\n    var paren_count_stack_top = 0;\n    var paren_depth_stack_top = 0;\n    var paren_count_stack_top_index = 0;\n    var paren_depth_stack_top_index = 0;\n    var paren_count_stack_top_top = 0;\n    var paren_depth_stack_top_top = 0;\n    var paren_count_stack_top_top_index = 0;\n    var paren_depth_stack_top_top_index = 0;\n    var paren_count_stack_top_top_top = 0;\n    var paren_depth_stack_top_top_top = 0;\n    var paren_count_stack_top_top_top_index = 0;\n    var paren_depth_stack_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top = 0;\n    var paren_depth_stack_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_index = 0;\n    var paren_depth_stack_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top = 0;\n    var paren_depth_stack_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_index = 0;\n    var paren_depth_stack_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top = 0;\n    var paren_depth_stack_top_top_top_top_top_top = 0;\n    var paren_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpjltdyj69.js:47\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_depth = 0;\n    var paren_index = 0;\n    var paren_string_length = paren_string.length;\n    var paren_string_index = 0;\n    var paren_string_index_prev = 0;\n    var paren_string_index_next = 0;\n    var paren_string_index_next_prev = 0;\n    var paren_string_index_next_next = 0;\n    var paren_string_index_next_next_prev = 0;\n    var paren_string_index_next_next_next = 0;\n    var paren_string_index_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpmsk594k7.js:43\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string = paren_string.split(\" \");\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] == \"(\"){\n            paren_count++;\n            paren_stack.push(paren_count);\n        }\n        else if(paren_string[i] == \")\"){\n            paren_count--;\n            if(paren_count < paren_stack[paren_stack.length - 1]){\n                paren_level = paren_stack.pop();\n            }\n        }\n    }\n    return paren_level;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_nesgzue.js:31:10)\n    at Object.<anonymous> (/tmp/tmp_nesgzue.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n            paren_level++;\n        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n            if(paren_count === 0){\n                var max_paren_level = paren_stack.pop();\n                if(max_paren_level > paren_level){\n                    paren_level = max_paren_level;\n                }\n            }\n        }\n    }\n    return paren_level;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n12\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpyc37p9qs.js:35:10)\n    at Object.<anonymous> (/tmp/tmpyc37p9qs.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 12,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_count_stack = [];\n    var paren_level_stack = [];\n    var paren_count_stack_index = 0;\n    var paren_level_stack_index = 0;\n    var paren_count_stack_max = 0;\n    var paren_level_stack_max = 0;\n    var paren_count_stack_index_max = 0;\n    var paren_level_stack_index_max = 0;\n    var paren_count_stack_index_min = 0;\n    var paren_level_stack_index_min = 0;\n    var paren_count_stack_min = 0;\n    var paren_level_stack_min = 0;\n    var paren_count_stack_min_index = 0;\n    var paren_level_stack_min_index = 0;\n    var paren_count_stack_min_index_max = 0;\n    var paren_level_stack_min_index_max = 0;\n    var paren_count_stack_min_index_min = 0;\n    var paren_level_stack_min_index_min = 0;\n    var paren_count_stack_min_index_min_index = 0;\n    var paren_level_stack_min_index_min_index = 0;\n    var paren_count_stack_min_index_min_index_max = 0;\n    var paren_level_stack_min_index_min_index_max = 0;\n    var paren_count_stack_min_index_min_index_min = 0;\n    var paren_level_stack_min_index_min_index_min = 0;\n    var paren_count_stack_min_index_min_index_min_index = 0;\n    var paren_level_stack_min_index_min_index_min_index = 0;\n    var paren_count_stack_min_index_min_index_min_index_max = 0;\n    var paren_level_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpg6tssl1v.js:48\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var paren_count = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                paren_count++;\n            }\n            else if(paren_group[j] == \")\"){\n                paren_count--;\n            }\n        }\n        if(paren_count > max_nesting){\n            max_nesting = paren_count;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpe4mrolb6.js:32:10)\n    at Object.<anonymous> (/tmp/tmpe4mrolb6.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var max_nesting = 0;\n    var paren_count = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n            if(paren_stack.length > 0){\n                var last_index = paren_stack.pop();\n                if(last_index > max_nesting){\n                    max_nesting = last_index;\n                }\n            }\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpgp1t9300.js:34:10)\n    at Object.<anonymous> (/tmp/tmpgp1t9300.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n            paren_level = paren_stack.length;\n        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n            if(paren_count === 0){\n                var max_paren_level = paren_stack.pop();\n                if(max_paren_level > paren_level){\n                    paren_level = max_paren_level;\n                }\n            }\n        }\n    }\n    return paren_level;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp06un207q.js:35:10)\n    at Object.<anonymous> (/tmp/tmp06un207q.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var paren_count = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                paren_count++;\n            }\n            else if(paren_group[j] == \")\"){\n                paren_count--;\n            }\n        }\n        if(paren_count > max_nesting){\n            max_nesting = paren_count;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpe4mrolb6.js:32:10)\n    at Object.<anonymous> (/tmp/tmpe4mrolb6.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_depth = 0;\n    var paren_count_max = 0;\n    var paren_depth_max = 0;\n    var paren_count_max_index = 0;\n    var paren_depth_max_index = 0;\n    var paren_count_max_index_stack = [];\n    var paren_depth_max_index_stack = [];\n    var paren_count_max_index_stack_index = 0;\n    var paren_depth_max_index_stack_index = 0;\n    var paren_count_max_index_stack_index_stack = [];\n    var paren_depth_max_index_stack_index_stack = [];\n    var paren_count_max_index_stack_index_stack_index = 0;\n    var paren_depth_max_index_stack_index_stack_index = 0;\n    var paren_count_max_index_stack_index_stack_index_stack = [];\n    var paren_depth_max_index_stack_index_stack_index_stack = [];\n    var paren_count_max_index_stack_index_stack_index_stack_index = 0;\n    var paren_depth_max_index_stack_index_stack_index_stack_index = 0;\n    var paren_count_max_index_stack_index_stack_index_stack_index_stack = [];\n    var paren_depth_max_index_stack_index_stack_index_stack_index_stack = [];\n    var paren_count_max_index_stack_index_stack_index_stack_index_stack_index = 0;\n    var paren_depth_max_index_stack_index_stack_index_stack_index_stack_index = 0;\n    var paren_count_max_index_stack_index_stack_index_stack_index_stack_index_stack = [];\n    var paren_depth_max_index_stack_index_stack_index_stack_index_stack_index_stack = [];\n    var paren_count_max_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpmlx3qmlc.js:43\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var paren_count = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                paren_count++;\n            }\n            else if(paren_group[j] == \")\"){\n                paren_count--;\n            }\n        }\n        if(paren_count > max_nesting){\n            max_nesting = paren_count;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpe4mrolb6.js:32:10)\n    at Object.<anonymous> (/tmp/tmpe4mrolb6.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i=0; i<paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var paren_count = 0;\n        for(var j=0; j<paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                paren_count++;\n            }\n            else if(paren_group[j] == \")\"){\n                paren_count--;\n            }\n        }\n        if(paren_count > max_nesting){\n            max_nesting = paren_count;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpqum54o4i.js:32:10)\n    at Object.<anonymous> (/tmp/tmpqum54o4i.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var paren_count = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                paren_count++;\n            }\n            else if(paren_group[j] == \")\"){\n                paren_count--;\n            }\n        }\n        if(paren_count > max_nesting){\n            max_nesting = paren_count;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpe4mrolb6.js:32:10)\n    at Object.<anonymous> (/tmp/tmpe4mrolb6.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var max_nesting = 0;\n    var current_nesting = 0;\n    var current_index = 0;\n    var current_char = \"\";\n    var current_char_index = 0;\n    var current_paren_index = 0;\n    var current_paren_string = \"\";\n    var current_paren_stack = [];\n    var current_paren_stack_index = 0;\n    var current_paren_stack_string = \"\";\n    var current_paren_stack_string_index = 0;\n    var current_paren_stack_string_length = 0;\n    var current_paren_stack_string_length_index = 0;\n    var current_paren_stack_string_length_length = 0;\n    var current_paren_stack_string_length_length_index = 0;\n    var current_paren_stack_string_length_length_length = 0;\n    var current_paren_stack_string_length_length_length_index = 0;\n    var current_paren_stack_string_length_length_length_length = 0;\n    var current_paren_stack_string_length_length_length_length_index = 0;\n    var current_paren_stack_string_length_length_length_length_length = 0;\n    var current_paren_stack_string_length_length_length_length_length_index = 0;\n    var current_paren_stack_string_length_length_length_length_length_length = 0;\n    var current_paren_stack_string_length_length_length_length_length_length_index = 0;\n    var current_paren_stack_string_length_length_length_length_length_length_length = 0;\n    var current_paren_stack_string_length_length_length_length_length_length_length_index = 0;\n    var current_paren_stack_string_length_length_length_length_length_length_length_length = 0;\n    var current_paren_stack_string_length_length_length_length_length_length_length_length_index = 0;\n    var current_paren_stack_string_length_length\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpu5qq85ja.js:46\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_level = 0;\n  var paren_string = paren_string.split(\" \");\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] == \"(\"){\n      paren_count++;\n      paren_stack.push(paren_count);\n    }\n    else if(paren_string[i] == \")\"){\n      paren_count--;\n      if(paren_count < paren_stack[paren_stack.length - 1]){\n        paren_level = paren_stack.pop();\n      }\n    }\n  }\n  return paren_level;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp8r6y951s.js:31:10)\n    at Object.<anonymous> (/tmp/tmp8r6y951s.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var paren_count = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                paren_count++;\n            }\n            else if(paren_group[j] == \")\"){\n                paren_count--;\n            }\n        }\n        if(paren_count > max_nesting){\n            max_nesting = paren_count;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpe4mrolb6.js:32:10)\n    at Object.<anonymous> (/tmp/tmpe4mrolb6.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var nesting = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                nesting++;\n            }\n            else if(paren_group[j] == \")\"){\n                nesting--;\n            }\n        }\n        if(nesting > max_nesting){\n            max_nesting = nesting;\n            max_nesting_index = i;\n        }\n    }\n    return [max_nesting_index, max_nesting];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp5m7jobli.js:34:10)\n    at Object.<anonymous> (/tmp/tmp5m7jobli.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for (var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var paren_count = 0;\n        for (var j = 0; j < paren_group.length; j++){\n            if (paren_group[j] == \"(\"){\n                paren_count++;\n            }\n            else if (paren_group[j] == \")\"){\n                paren_count--;\n            }\n        }\n        if (paren_count > max_nesting){\n            max_nesting = paren_count;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmplfrp5kn2.js:32:10)\n    at Object.<anonymous> (/tmp/tmplfrp5kn2.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_depth = 0;\n    var paren_string_length = paren_string.length;\n    var paren_index = 0;\n    var paren_char = \"\";\n    var paren_char_index = 0;\n    var paren_char_length = 0;\n    var paren_char_count = 0;\n    var paren_char_count_max = 0;\n    var paren_char_count_min = 0;\n    var paren_char_count_diff = 0;\n    var paren_char_count_diff_max = 0;\n    var paren_char_count_diff_min = 0;\n    var paren_char_count_diff_diff = 0;\n    var paren_char_count_diff_diff_max = 0;\n    var paren_char_count_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmp6omn4s6a.js:47\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_count_max = 0;\n    var paren_count_max_index = 0;\n    var paren_count_max_index_string = \"\";\n    var paren_count_max_index_string_index = 0;\n    var paren_count_max_index_string_index_max = 0;\n    var paren_count_max_index_string_index_max_index = 0;\n    var paren_count_max_index_string_index_max_index_string = \"\";\n    var paren_count_max_index_string_index_max_index_string_index = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string = \"\";\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max_index = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max_index_string = \"\";\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max_index_string_index = 0;\n    var paren_count_max_index_string_index_max_index_string_index_max_index_string_index_max_index_string_index_max = 0;\n    var paren_count_max_index_string_index_max_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpcn59i22q.js:37\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var max_depth = 0;\n    var current_depth = 0;\n    var current_paren_string = \"\";\n    var current_paren_stack = [];\n    var current_paren_stack_length = 0;\n    var current_paren_stack_index = 0;\n    var current_paren_stack_index_end = 0;\n    var current_paren_stack_index_start = 0;\n    var current_paren_stack_length_end = 0;\n    var current_paren_stack_length_start = 0;\n    var current_paren_stack_length_diff = 0;\n    var current_paren_stack_index_diff = 0;\n    var current_paren_stack_index_end_diff = 0;\n    var current_paren_stack_index_start_diff = 0;\n    var current_paren_stack_length_end_diff = 0;\n    var current_paren_stack_length_start_diff = 0;\n    var current_paren_stack_length_diff = 0;\n    var current_paren_stack_index_diff = 0;\n    var current_paren_stack_index_end_diff = 0;\n    var current_paren_stack_index_start_diff = 0;\n    var current_paren_stack_length_end_diff = 0;\n    var current_paren_stack_length_start_diff = 0;\n    var current_paren_stack_length_diff = 0;\n    var current_paren_stack_index_diff = 0;\n    var current_paren_stack_index_end_diff = 0;\n    var current_paren_stack_index_start_diff = 0;\n    var current_paren_stack_length_end_diff = 0;\n    var current_paren_stack_length_start_diff = 0;\n    var current_paren_stack_length_diff = 0;\n    var current_paren_stack_index_diff = 0;\n    var current_paren_stack_index_end_diff = 0;\n    var current_paren_stack_index_start_diff = 0;\n    var current_paren_stack_length_end_diff = 0;\n    var current\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpadnx35u3.js:52\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_depth = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n            if(paren_count === 0){\n                paren_depth = paren_stack.pop();\n            }\n        }\n    }\n    return paren_depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp736pq4g4.js:31:10)\n    at Object.<anonymous> (/tmp/tmp736pq4g4.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n            paren_level++;\n        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n            if(paren_count === -1){\n                console.log(paren_level);\n                return paren_level;\n            }\n            else if(paren_count === 0){\n                paren_level--;\n            }\n        }\n    }\n    return paren_level;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpoworlug3.js:36:10)\n    at Object.<anonymous> (/tmp/tmpoworlug3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var max_nesting = 0;\n    var paren_count = 0;\n    var paren_index = 0;\n    var paren_string_length = paren_string.length;\n    var paren_string_index = 0;\n    var paren_string_char;\n    var paren_string_char_index;\n    var paren_string_char_count;\n    var paren_string_char_count_index;\n    var paren_string_char_count_count;\n    var paren_string_char_count_count_index;\n    var paren_string_char_count_count_count;\n    var paren_string_char_count_count_count_index;\n    var paren_string_char_count_count_count_count;\n    var paren_string_char_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpgnf0tx22.js:45\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var nesting = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                nesting++;\n            }\n            else if(paren_group[j] == \")\"){\n                nesting--;\n            }\n        }\n        if(nesting > max_nesting){\n            max_nesting = nesting;\n            max_nesting_index = i;\n        }\n    }\n    return [max_nesting_index, max_nesting];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp5m7jobli.js:34:10)\n    at Object.<anonymous> (/tmp/tmp5m7jobli.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_depth = 0;\n    var paren_index = 0;\n    var paren_count_temp = 0;\n    var paren_depth_temp = 0;\n    var paren_index_temp = 0;\n    var paren_count_temp2 = 0;\n    var paren_depth_temp2 = 0;\n    var paren_index_temp2 = 0;\n    var paren_count_temp3 = 0;\n    var paren_depth_temp3 = 0;\n    var paren_index_temp3 = 0;\n    var paren_count_temp4 = 0;\n    var paren_depth_temp4 = 0;\n    var paren_index_temp4 = 0;\n    var paren_count_temp5 = 0;\n    var paren_depth_temp5 = 0;\n    var paren_index_temp5 = 0;\n    var paren_count_temp6 = 0;\n    var paren_depth_temp6 = 0;\n    var paren_index_temp6 = 0;\n    var paren_count_temp7 = 0;\n    var paren_depth_temp7 = 0;\n    var paren_index_temp7 = 0;\n    var paren_count_temp8 = 0;\n    var paren_depth_temp8 = 0;\n    var paren_index_temp8 = 0;\n    var paren_count_temp9 = 0;\n    var paren_depth_temp9 = 0;\n    var paren_index_temp9 = 0;\n    var paren_count_temp10 = 0;\n    var paren_depth_temp10 = 0;\n    var paren_index_temp10 = 0;\n    var paren_count_temp11 = 0;\n    var paren_depth_temp11 = 0;\n    var paren_index_temp11 = 0;\n    var paren_count_temp12 = 0;\n    var paren_depth_temp12 = 0;\n    var paren_index_temp12 = 0;\n    var paren_count_temp\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpre9kbo35.js:58\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    for(var i=0; i<paren_string_length; i++){\n        if(paren_string[i] == '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n            paren_level++;\n        }\n        else if(paren_string[i] == ')'){\n            paren_count--;\n            if(paren_count < 0){\n                console.log(\"Error: Invalid parentheses string\");\n                return;\n            }\n            if(paren_count == 0){\n                var max_level = Math.max.apply(null, paren_stack);\n                console.log(max_level);\n                paren_stack.pop();\n                paren_level--;\n            }\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "2\n3\n2\n3\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpqeobg29z.js:38:10)\n    at Object.<anonymous> (/tmp/tmpqeobg29z.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_depth = 0;\n    var paren_index = 0;\n    var paren_string_length = paren_string.length;\n    var paren_string_index = 0;\n    var paren_string_char;\n    var paren_string_char_index;\n    var paren_string_char_count;\n    var paren_string_char_count_index;\n    var paren_string_char_count_count;\n    var paren_string_char_count_count_index;\n    var paren_string_char_count_count_count;\n    var paren_string_char_count_count_count_index;\n    var paren_string_char_count_count_count_count;\n    var paren_string_char_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpn_e146i7.js:45\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var max_depth = 0;\n    var paren_count = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n            if(paren_stack.length > 0){\n                var last_index = paren_stack.pop();\n                if(last_index > max_depth){\n                    max_depth = last_index;\n                }\n            }\n        }\n    }\n    return max_depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp8ja05elv.js:34:10)\n    at Object.<anonymous> (/tmp/tmp8ja05elv.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_count = 0;\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    var paren_stack = [];\n    var paren_stack_index = 0;\n    var paren_stack_count = 0;\n    var paren_stack_count_index = 0;\n    var paren_stack_count_count = 0;\n    var paren_stack_count_count_index = 0;\n    var paren_stack_count_count_count = 0;\n    var paren_stack_count_count_count_index = 0;\n    var paren_stack_count_count_count_count = 0;\n    var paren_stack_count_count_count_count_index = 0;\n    var paren_stack_count_count_count_count_count = 0;\n    var paren_stack_count_count_count_count_count_index = 0;\n    var paren_stack_count_count_count_count_count_count = 0;\n    var paren_stack_count_count_count_count_count_count_index = 0;\n    var paren_stack_count_count_count_count_count_count_count = 0;\n    var paren_stack_count_count_count_count_count_count_count_index = 0;\n    var paren_stack_count_count_count_count_count_count_count_count = 0;\n    var paren_stack_count_count_count_count_count_count_count_count_index = 0;\n    var paren_stack_count_count_count_count_count_count_count_count_count = 0;\n    var paren_stack_count_count_count_count_count_count_count_count_count_index = 0;\n    var paren_stack_count_count_count_count_count_count_count_count_count_count = 0;\n    var paren_stack_count_count_count_count_count_count_count_count_count_count_index = 0;\n    var paren_stack_count_count_count_count_count_count_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpfxl8n4fi.js:43\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var max_nesting = 0;\n    var current_nesting = 0;\n    var current_index = 0;\n    var current_char = paren_string.charAt(current_index);\n    while(current_index < paren_string.length){\n        if(current_char === '('){\n            paren_stack.push(current_index);\n            current_nesting++;\n        }\n        else if(current_char === ')'){\n            if(current_nesting > max_nesting){\n                max_nesting = current_nesting;\n            }\n            current_nesting--;\n            if(current_nesting === 0){\n                var last_index = paren_stack.pop();\n                var last_char = paren_string.charAt(last_index);\n                if(last_char === '('){\n                    current_nesting++;\n                }\n            }\n        }\n        current_index++;\n        current_char = paren_string.charAt(current_index);\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp5wwurt1k.js:41:10)\n    at Object.<anonymous> (/tmp/tmp5wwurt1k.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_count_stack = [];\n    var paren_level_stack = [];\n    var paren_stack_output = [];\n    var paren_count_output = [];\n    var paren_level_output = [];\n    var paren_count_stack_output = [];\n    var paren_level_stack_output = [];\n    var paren_stack_output_count = 0;\n    var paren_count_output_count = 0;\n    var paren_level_output_count = 0;\n    var paren_count_stack_output_count = 0;\n    var paren_level_stack_output_count = 0;\n    var paren_stack_output_index = 0;\n    var paren_count_output_index = 0;\n    var paren_level_output_index = 0;\n    var paren_count_stack_output_index = 0;\n    var paren_level_stack_output_index = 0;\n    var paren_stack_output_index = 0;\n    var paren_count_output_index = 0;\n    var paren_level_output_index = 0;\n    var paren_count_stack_output_index = 0;\n    var paren_level_stack_output_index = 0;\n    var paren_stack_output_index = 0;\n    var paren_count_output_index = 0;\n    var paren_level_output_index = 0;\n    var paren_count_stack_output_index = 0;\n    var paren_level_stack_output_index = 0;\n    var paren_stack_output_index = 0;\n    var paren_count_output_index = 0;\n    var paren_level_output_index = 0;\n    var paren_count_stack_output_index = 0;\n    var paren_level_stack_output_index = 0;\n    var paren_stack_output_index = 0;\n    var paren_count_output_index = 0;\n    var paren\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmp5a1779ct.js:55\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var max_nesting = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var paren_count = 0;\n    var paren_count_stack = [];\n    var paren_count_stack_index = 0;\n    var paren_count_stack_max = 0;\n    var paren_count_stack_max_index = 0;\n    var paren_count_stack_max_max = 0;\n    var paren_count_stack_max_max_index = 0;\n    var paren_count_stack_max_max_max = 0;\n    var paren_count_stack_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpvva9k4ob.js:44\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_count = 0;\n    var max_paren_count = 0;\n    var max_paren_count_index = 0;\n    var paren_stack = [];\n    var paren_stack_index = 0;\n    var paren_stack_count = 0;\n    var paren_stack_count_index = 0;\n    var paren_stack_count_max = 0;\n    var paren_stack_count_max_index = 0;\n    var paren_stack_count_max_max = 0;\n    var paren_stack_count_max_max_index = 0;\n    var paren_stack_count_max_max_max = 0;\n    var paren_stack_count_max_max_max_index = 0;\n    var paren_stack_count_max_max_max_max = 0;\n    var paren_stack_count_max_max_max_max_index = 0;\n    var paren_stack_count_max_max_max_max_max = 0;\n    var paren_stack_count_max_max_max_max_max_index = 0;\n    var paren_stack_count_max_max_max_max_max_max = 0;\n    var paren_stack_count_max_max_max_max_max_max_index = 0;\n    var paren_stack_count_max_max_max_max_max_max_max = 0;\n    var paren_stack_count_max_max_max_max_max_max_max_index = 0;\n    var paren_stack_count_max_max_max_max_max_max_max_max = 0;\n    var paren_stack_count_max_max_max_max_max_max_max_max_index = 0;\n    var paren_stack_count_max_max_max_max_max_max_max_max_max = 0;\n    var paren_stack_count_max_max_max_max_max_max_max_max_max_index = 0;\n    var paren_stack_count_max_max_max_max_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpvt84o_9i.js:43\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_list = paren_string.split(\" \");\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var i = 0; i < paren_list.length; i++){\n        var paren_count = 0;\n        for(var j = 0; j < paren_list[i].length; j++){\n            if(paren_list[i][j] == '('){\n                paren_count++;\n            }\n            else if(paren_list[i][j] == ')'){\n                paren_count--;\n            }\n        }\n        if(paren_count > max_nesting){\n            max_nesting = paren_count;\n            max_nesting_index = i;\n        }\n    }\n    return [max_nesting_index, max_nesting];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpqeqrj6tt.js:33:10)\n    at Object.<anonymous> (/tmp/tmpqeqrj6tt.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var max_nesting = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n            if(paren_count === 0){\n                max_nesting = Math.max(max_nesting, paren_stack.pop());\n            }\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_61j9e5s.js:31:10)\n    at Object.<anonymous> (/tmp/tmp_61j9e5s.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_depth = 0;\n    var paren_string_length = paren_string.length;\n    var paren_string_index = 0;\n    var paren_string_char;\n    var paren_string_char_index;\n    var paren_string_char_count;\n    var paren_string_char_count_index;\n    var paren_string_char_count_count;\n    var paren_string_char_count_count_index;\n    var paren_string_char_count_count_count;\n    var paren_string_char_count_count_count_index;\n    var paren_string_char_count_count_count_count;\n    var paren_string_char_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_count\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmp8l99j1q0.js:44\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var max_nesting = 0;\n    for (var i = 0; i < paren_string.length; i++){\n        if (paren_string[i] == '('){\n            paren_stack.push(i);\n        }\n        else if (paren_string[i] == ')'){\n            var last_paren = paren_stack.pop();\n            if (paren_stack.length > 0){\n                max_nesting = Math.max(max_nesting, paren_stack.length);\n            }\n            else{\n                max_nesting = Math.max(max_nesting, i - last_paren);\n            }\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpjgga2o6q.js:31:10)\n    at Object.<anonymous> (/tmp/tmpjgga2o6q.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var max_nesting = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var aa = 0;\n    var ab = 0;\n    var ac = 0;\n    var ad = 0;\n    var ae = 0;\n    var af = 0;\n    var ag = 0;\n    var ah = 0;\n    var ai = 0;\n    var aj = 0;\n    var ak = 0;\n    var al = 0;\n    var am = 0;\n    var an = 0;\n    var ao = 0;\n    var ap = 0;\n    var aq = 0;\n    var ar = 0;\n    var as = 0;\n    var at = 0;\n    var au = 0;\n    var av = 0;\n    var aw = 0;\n    var ax = 0;\n    var ay = 0;\n    var az =\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpiuc4eong.js:79\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    var paren_string_index = 0;\n    var paren_string_char;\n    var paren_string_char_index = 0;\n    var paren_string_char_count = 0;\n    var paren_string_char_count_max = 0;\n    var paren_string_char_count_min = 0;\n    var paren_string_char_count_diff = 0;\n    var paren_string_char_count_diff_max = 0;\n    var paren_string_char_count_diff_min = 0;\n    var paren_string_char_count_diff_diff = 0;\n    var paren_string_char_count_diff_diff_max = 0;\n    var paren_string_char_count_diff_diff_min = 0;\n    var paren_string_char_count_diff_diff_diff = 0;\n    var paren_string_char_count_diff_diff_diff_max = 0;\n    var paren_string_char_count_diff_diff_diff_min = 0;\n    var paren_string_char_count_diff_diff_diff_diff = 0;\n    var paren_string_char_count_diff_diff_diff_diff_max = 0;\n    var paren_string_char_count_diff_diff_diff_diff_min = 0;\n    var paren_string_char_count_diff_diff_diff_diff_diff = 0;\n    var paren_string_char_count_diff_diff_diff_diff_diff_max = 0;\n    var paren_string_char_count_diff_diff_diff_diff_diff_min = 0;\n    var paren_string_char_count_diff_diff_diff_diff_diff_diff = 0;\n    var paren_string_char_count_diff_diff_diff_diff_diff_diff_max = 0;\n    var paren_string_char_count\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmpzt927yn1.js:45\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var max_depth = 0;\n    var current_depth = 0;\n    var current_paren = 0;\n    var current_paren_string = \"\";\n    var current_paren_string_length = 0;\n    var current_paren_string_index = 0;\n    var current_paren_string_index_end = 0;\n    var current_paren_string_index_start = 0;\n    var current_paren_string_length_end = 0;\n    var current_paren_string_length_start = 0;\n    var current_paren_string_length_total = 0;\n    var current_paren_string_length_total_end = 0;\n    var current_paren_string_length_total_start = 0;\n    var current_paren_string_length_total_total = 0;\n    var current_paren_string_length_total_total_end = 0;\n    var current_paren_string_length_total_total_start = 0;\n    var current_paren_string_length_total_total_total = 0;\n    var current_paren_string_length_total_total_total_end = 0;\n    var current_paren_string_length_total_total_total_start = 0;\n    var current_paren_string_length_total_total_total_total = 0;\n    var current_paren_string_length_total_total_total_total_end = 0;\n    var current_paren_string_length_total_total_total_total_start = 0;\n    var current_paren_string_length_total_total_total_total_total = 0;\n    var current_paren_string_length_total_total_total_total_total_end = 0;\n    var current_paren_string_length_total_total_total_total_total_start = 0;\n    var current_paren_string_length_total_total_total_total_total_total = 0;\n    var current_paren_string_length_total_total_total_total_total_total_end = 0;\n    var current_paren_string_length_total_total_total_total_total_total_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmp_3cd9ozy.js:46\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var max_nesting = 0;\n    var current_nesting = 0;\n    var current_paren = 0;\n    var current_char = \"\";\n    var current_string = \"\";\n    for(var i = 0; i < paren_string.length; i++){\n        current_char = paren_string[i];\n        if(current_char === \"(\"){\n            paren_stack.push(current_paren);\n            current_paren = i;\n            current_string = \"\";\n        }\n        else if(current_char === \")\"){\n            current_paren = paren_stack.pop();\n            current_string += current_char;\n        }\n        else if(current_char === \" \"){\n            if(current_string.length > 0){\n                current_string += current_char;\n            }\n            else{\n                current_string = current_char;\n            }\n        }\n        else{\n            current_string += current_char;\n        }\n        if(current_paren > max_nesting){\n            max_nesting = current_paren;\n        }\n        if(current_paren < current_nesting){\n            current_nesting = current_paren;\n        }\n    }\n    return [max_nesting, current_nesting];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  24,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpdioypczo.js:51:10)\n    at Object.<anonymous> (/tmp/tmpdioypczo.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 24, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var max_nesting = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var paren_count = 0;\n    var paren_count_stack = [];\n    var paren_count_stack_index = 0;\n    var paren_count_stack_top = 0;\n    var paren_count_stack_top_index = 0;\n    var paren_count_stack_top_top = 0;\n    var paren_count_stack_top_top_index = 0;\n    var paren_count_stack_top_top_top = 0;\n    var paren_count_stack_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmpq316s_cy.js:44\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    var paren_string_index = 0;\n    var paren_string_index_prev = 0;\n    var paren_string_index_next = 0;\n    var paren_string_index_next_prev = 0;\n    var paren_string_index_next_next = 0;\n    var paren_string_index_next_next_prev = 0;\n    var paren_string_index_next_next_next = 0;\n    var paren_string_index_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next_next\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmpwri1j1_w.js:42\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] == '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n            paren_level++;\n        }\n        else if(paren_string[i] == ')'){\n            paren_count--;\n            if(paren_count < 0){\n                console.log(\"Error: Invalid parentheses\");\n                return;\n            }\n            if(paren_count == 0){\n                if(paren_level > 0){\n                    console.log(\"Error: Invalid parentheses\");\n                    return;\n                }\n                var max_level = Math.max.apply(null, paren_stack);\n                console.log(max_level);\n                paren_stack.pop();\n                paren_level--;\n            }\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "Error: Invalid parentheses\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp39c7m1i9.js:42:10)\n    at Object.<anonymous> (/tmp/tmp39c7m1i9.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var max_nesting = 0;\n    var paren_count = 0;\n    var paren_index = 0;\n    var paren_length = paren_string.length;\n    for(var i = 0; i < paren_length; i++){\n        if(paren_string[i] == '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n        }\n        else if(paren_string[i] == ')'){\n            paren_count--;\n            if(paren_count < 0){\n                console.log(\"Error: Invalid parentheses string\");\n                return;\n            }\n            if(paren_stack.length > 0){\n                var top_index = paren_stack.pop();\n                if(top_index > max_nesting){\n                    max_nesting = top_index;\n                }\n            }\n        }\n    }\n    if(paren_stack.length > 0){\n        console.log(\"Error: Invalid parentheses string\");\n        return;\n    }\n    console.log(max_nesting);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "2\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpanzykfq_.js:43:10)\n    at Object.<anonymous> (/tmp/tmpanzykfq_.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var max_nesting = 0;\n    var current_level = 0;\n    var paren_count = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n            paren_stack.push(i);\n            paren_count++;\n            current_level++;\n            if(current_level > max_nesting){\n                max_nesting = current_level;\n            }\n        }\n        else if(paren_string[i] === ')'){\n            if(paren_count === 0){\n                console.log(\"Error: Unbalanced parentheses\");\n                return;\n            }\n            paren_count--;\n            current_level--;\n            if(current_level === 0){\n                var paren_index = paren_stack.pop();\n                var paren_string_sub = paren_string.substring(paren_index, i);\n                console.log(paren_string_sub);\n                if(paren_stack.length > 0){\n                    parse_nested_parens(paren_string.substring(paren_index, i));\n                }\n            }\n        }\n    }\n    if(paren_count !== 0){\n        console.log(\"Error: Unbalanced parentheses\");\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "()\n(\n())\n(\nError: Unbalanced parentheses\n(\nError: Unbalanced parentheses\n()\n(\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp2a4cgqh1.js:49:10)\n    at Object.<anonymous> (/tmp/tmp2a4cgqh1.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var nesting = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                nesting++;\n            }\n            else if(paren_group[j] == \")\"){\n                nesting--;\n            }\n        }\n        if(nesting > max_nesting){\n            max_nesting = nesting;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpnersyeus.js:32:10)\n    at Object.<anonymous> (/tmp/tmpnersyeus.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    var current_nesting = 0;\n    var current_nesting_index = 0;\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] == '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n        }\n        else if(paren_string[i] == ')'){\n            if(paren_count == 0){\n                console.log(\"Error: Unbalanced parentheses\");\n                return;\n            }\n            paren_count--;\n            if(paren_stack.length > 0){\n                current_nesting = paren_stack.pop();\n                if(current_nesting > max_nesting){\n                    max_nesting = current_nesting;\n                    max_nesting_index = current_nesting_index;\n                }\n            }\n        }\n        else if(paren_string[i] == ' '){\n            if(paren_stack.length > 0){\n                current_nesting = paren_stack.pop();\n                if(current_nesting > max_nesting){\n                    max_nesting = current_nesting;\n                    max_nesting_index = current_nesting_index;\n                }\n            }\n        }\n        current_nesting_index++;\n    }\n    if(paren_count != 0){\n        console.log(\"Error: Unbalanced parentheses\");\n        return;\n    }\n    console.log(max_nesting_index);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "10\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp8zjcww2r.js:55:10)\n    at Object.<anonymous> (/tmp/tmp8zjcww2r.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var nesting = count_nesting(paren_group);\n        if(nesting > max_nesting){\n            max_nesting = nesting;\n            max_nesting_index = i;\n        }\n    }\n    return max_nesting_index;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmph_4d1ra7.js:12\n        var nesting = count_nesting(paren_group);\n                      ^\n\nReferenceError: count_nesting is not defined\n    at parse_nested_parens (/tmp/tmph_4d1ra7.js:12:23)\n    at test (/tmp/tmph_4d1ra7.js:26:20)\n    at Object.<anonymous> (/tmp/tmph_4d1ra7.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var i=0; i<paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var nesting = 0;\n        for(var j=0; j<paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                nesting++;\n            }\n            else if(paren_group[j] == \")\"){\n                nesting--;\n            }\n        }\n        if(nesting > max_nesting){\n            max_nesting = nesting;\n            max_nesting_index = i;\n        }\n    }\n    return [max_nesting_index, max_nesting];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpnh8svfsg.js:34:10)\n    at Object.<anonymous> (/tmp/tmpnh8svfsg.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var max_nesting = 0;\n    var current_nesting = 0;\n    var current_paren = \"\";\n    var current_paren_count = 0;\n    var current_paren_index = 0;\n    var current_paren_string = \"\";\n    var current_paren_string_count = 0;\n    var current_paren_string_index = 0;\n    var current_paren_string_length = 0;\n    var current_paren_string_length_count = 0;\n    var current_paren_string_length_index = 0;\n    var current_paren_string_length_length = 0;\n    var current_paren_string_length_length_count = 0;\n    var current_paren_string_length_length_index = 0;\n    var current_paren_string_length_length_length = 0;\n    var current_paren_string_length_length_length_count = 0;\n    var current_paren_string_length_length_length_index = 0;\n    var current_paren_string_length_length_length_length = 0;\n    var current_paren_string_length_length_length_length_count = 0;\n    var current_paren_string_length_length_length_length_index = 0;\n    var current_paren_string_length_length_length_length_length = 0;\n    var current_paren_string_length_length_length_length_length_count = 0;\n    var current_paren_string_length_length_length_length_length_index = 0;\n    var current_paren_string_length_length_length_length_length_length = 0;\n    var current_paren_string_length_length_length_length_length_length_count = 0;\n    var current_paren_string_length_length_length_length_length_length_index = 0;\n    var current_paren_string_length_length_length_length_length_length_length = 0;\n    var current_paren_string_length_length_length_length_length_length_length_count = 0;\n    var current_paren_string_length_length_length_length\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmp8y_mvkfj.js:47\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var max_nesting = 0;\n    var current_nesting = 0;\n    var paren_count = 0;\n    var paren_index = 0;\n    var paren_string_length = paren_string.length;\n    var paren_string_index = 0;\n    var paren_string_char = \"\";\n    var paren_string_char_index = 0;\n    var paren_string_char_count = 0;\n    var paren_string_char_count_index = 0;\n    var paren_string_char_count_count = 0;\n    var paren_string_char_count_count_index = 0;\n    var paren_string_char_count_count_count = 0;\n    var paren_string_char_count_count_count_index = 0;\n    var paren_string_char_count_count_count_count = 0;\n    var paren_string_char_count_count_count_count_index = 0;\n    var paren_string_char_count_count_count_count_count = 0;\n    var paren_string_char_count_count_count_count_count_index = 0;\n    var paren_string_char_count_count_count_count_count_count = 0;\n    var paren_string_char_count_count_count_count_count_count_index = 0;\n    var paren_string_char_count_count_count_count_count_count_count = 0;\n    var paren_string_char_count_count_count_count_count_count_count_index = 0;\n    var paren_string_char_count_count_count_count_count_count_count_count = 0;\n    var paren_string_char_count_count_count_count_count_count_count_count_index = 0;\n    var paren_string_char_count_count_count_count_count_count_count_count_count = 0;\n    var paren_string_char_count_count_count_count_count_count_count_count_count\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmp9s2ynlfj.js:44\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    var paren_string_index = 0;\n    var paren_string_char;\n    var paren_string_char_index;\n    var paren_string_char_count;\n    var paren_string_char_count_index;\n    var paren_string_char_count_count;\n    var paren_string_char_count_count_index;\n    var paren_string_char_count_count_count;\n    var paren_string_char_count_count_count_index;\n    var paren_string_char_count_count_count_count;\n    var paren_string_char_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_count\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmp_h044xlb.js:44\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_count_stack = [];\n    var paren_count_stack_index = 0;\n    var paren_count_stack_max = 0;\n    var paren_count_stack_max_index = 0;\n    var paren_count_stack_max_max = 0;\n    var paren_count_stack_max_max_index = 0;\n    var paren_count_stack_max_max_max = 0;\n    var paren_count_stack_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpyodrmg36.js:42\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    var paren_index = 0;\n    var paren_char;\n    var paren_char_index;\n    var paren_char_count;\n    var paren_char_count_index;\n    var paren_char_count_count;\n    var paren_char_count_count_index;\n    var paren_char_count_count_count;\n    var paren_char_count_count_count_index;\n    var paren_char_count_count_count_count;\n    var paren_char_count_count_count_count_index;\n    var paren_char_count_count_count_count_count;\n    var paren_char_count_count_count_count_count_index;\n    var paren_char_count_count_count_count_count_count;\n    var paren_char_count_count_count_count_count_count_index;\n    var paren_char_count_count_count_count_count_count_count;\n    var paren_char_count_count_count_count_count_count_count_index;\n    var paren_char_count_count_count_count_count_count_count_count;\n    var paren_char_count_count_count_count_count_count_count_count_index;\n    var paren_char_count_count_count_count_count_count_count_count_count;\n    var paren_char_count_count_count_count_count_count_count_count_count_index;\n    var paren_char_count_count_count_count_count_count_count_count_count_count;\n    var paren_char_count_count_count_count_count_count_count_count_count_count_index;\n    var paren_char_count_count_count_count_count_count_count_count_count_count_count;\n    var paren_char_count\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpodba5l03.js:46\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_string_length = paren_string.length;\n    var paren_index = 0;\n    var paren_char = \"\";\n    var paren_char_index = 0;\n    var paren_char_length = 0;\n    var paren_char_count = 0;\n    var paren_char_count_stack = [];\n    var paren_char_count_stack_index = 0;\n    var paren_char_count_stack_length = 0;\n    var paren_char_count_stack_length_stack = [];\n    var paren_char_count_stack_length_stack_index = 0;\n    var paren_char_count_stack_length_stack_length = 0;\n    var paren_char_count_stack_length_stack_length_stack = [];\n    var paren_char_count_stack_length_stack_length_stack_index = 0;\n    var paren_char_count_stack_length_stack_length_stack_length = 0;\n    var paren_char_count_stack_length_stack_length_stack_length_stack = [];\n    var paren_char_count_stack_length_stack_length_stack_length_stack_index = 0;\n    var paren_char_count_stack_length_stack_length_stack_length_stack_length = 0;\n    var paren_char_count_stack_length_stack_length_stack_length_stack_length_stack = [];\n    var paren_char_count_stack_length_stack_length_stack_length_stack_length_stack_index = 0;\n    var paren_char_count_stack_length_stack_length_stack_length_stack_length_stack_length = 0;\n    var paren_char_count_stack_length_stack_length_stack_length_stack_length_stack_length_stack = [];\n    var paren_char_count_stack_length_stack_length_stack_length_stack_length_stack_length_stack_index = 0;\n    var paren_char\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmp21rqf8vf.js:43\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var result = [];\n    var stack = [];\n    var max_depth = 0;\n    var current_depth = 0;\n    var current_index = 0;\n    var current_char = paren_string.charAt(current_index);\n    while(current_index < paren_string.length){\n        if(current_char === \"(\"){\n            stack.push(current_char);\n            current_depth++;\n        }\n        else if(current_char === \")\"){\n            if(stack.length === 0){\n                result.push(current_depth);\n            }\n            else{\n                stack.pop();\n                current_depth--;\n            }\n        }\n        current_index++;\n        current_char = paren_string.charAt(current_index);\n    }\n    if(stack.length > 0){\n        result.push(current_depth);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp7g2h8xmd.js:41:10)\n    at Object.<anonymous> (/tmp/tmp7g2h8xmd.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] == '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n        }\n        else if(paren_string[i] == ')'){\n            paren_count--;\n            if(paren_count == 0){\n                paren_level = paren_stack.pop();\n            }\n        }\n    }\n    return paren_level;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpi3izjtke.js:31:10)\n    at Object.<anonymous> (/tmp/tmpi3izjtke.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var parens = paren_string.split(\" \");\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var i = 0; i < parens.length; i++){\n        var num_nesting = count_nesting(parens[i]);\n        if(num_nesting > max_nesting){\n            max_nesting = num_nesting;\n            max_nesting_index = i;\n        }\n    }\n    return max_nesting_index;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmpx56g56sp.js:11\n        var num_nesting = count_nesting(parens[i]);\n                          ^\n\nReferenceError: count_nesting is not defined\n    at parse_nested_parens (/tmp/tmpx56g56sp.js:11:27)\n    at test (/tmp/tmpx56g56sp.js:25:20)\n    at Object.<anonymous> (/tmp/tmpx56g56sp.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] == '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n        }\n        else if(paren_string[i] == ')'){\n            paren_count--;\n            if(paren_count < 0){\n                console.log(\"Error: Invalid parentheses string\");\n                return;\n            }\n            if(paren_stack.length > 0){\n                paren_level = paren_stack.pop();\n            }\n        }\n    }\n    return paren_level;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpu42pddk1.js:35:10)\n    at Object.<anonymous> (/tmp/tmpu42pddk1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_depth = 0;\n    var paren_index = 0;\n    var paren_string_length = paren_string.length;\n    var paren_string_index = 0;\n    var paren_string_index_prev = 0;\n    var paren_string_index_next = 0;\n    var paren_string_index_next_prev = 0;\n    var paren_string_index_next_next = 0;\n    var paren_string_index_next_next_prev = 0;\n    var paren_string_index_next_next_next = 0;\n    var paren_string_index_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpmsk594k7.js:43\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n            paren_level++;\n        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n            paren_level--;\n            if(paren_level === 0){\n                var max_nesting = Math.max.apply(null, paren_stack);\n                console.log(max_nesting);\n                paren_stack = [];\n            }\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "1\n2\n0\n2\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpydz3ne3j.js:34:10)\n    at Object.<anonymous> (/tmp/tmpydz3ne3j.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    for (var i = 0; i < paren_string_length; i++){\n        if (paren_string[i] === '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n            paren_level++;\n        }\n        else if (paren_string[i] === ')'){\n            if (paren_level === 0){\n                console.log(\"Error: Invalid parentheses\");\n                return;\n            }\n            paren_count--;\n            if (paren_count === 0){\n                var max_level = Math.max.apply(null, paren_stack);\n                console.log(max_level);\n                paren_stack.pop();\n                paren_level--;\n            }\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "2\n3\n2\n3\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp3mw8ni3v.js:38:10)\n    at Object.<anonymous> (/tmp/tmp3mw8ni3v.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_depth = 0;\n    var paren_index = 0;\n    var paren_count_max = 0;\n    var paren_depth_max = 0;\n    var paren_index_max = 0;\n    var paren_count_max_index = 0;\n    var paren_depth_max_index = 0;\n    var paren_index_max_index = 0;\n    var paren_count_max_index_max = 0;\n    var paren_depth_max_index_max = 0;\n    var paren_index_max_index_max = 0;\n    var paren_count_max_index_max_index = 0;\n    var paren_depth_max_index_max_index = 0;\n    var paren_index_max_index_max_index = 0;\n    var paren_count_max_index_max_index_max = 0;\n    var paren_depth_max_index_max_index_max = 0;\n    var paren_index_max_index_max_index_max = 0;\n    var paren_count_max_index_max_index_max_index = 0;\n    var paren_depth_max_index_max_index_max_index = 0;\n    var paren_index_max_index_max_index_max_index = 0;\n    var paren_count_max_index_max_index_max_index_max = 0;\n    var paren_depth_max_index_max_index_max_index_max = 0;\n    var paren_index_max_index_max_index_max_index_max = 0;\n    var paren_count_max_index_max_index_max_index_max_index = 0;\n    var paren_depth_max_index_max_index_max_index_max_index = 0;\n    var paren_index_max_index_max_index_max_index_max_index = 0;\n    var paren_count_max_index_max_index_max_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmp1hidckwe.js:46\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_count = 0;\n    var paren_stack = [];\n    var paren_count_stack = [];\n    var paren_stack_count = 0;\n    var paren_count_stack_count = 0;\n    var paren_stack_count_stack = [];\n    var paren_count_stack_count_stack = [];\n    var paren_stack_count_stack_count = 0;\n    var paren_count_stack_count_stack_count = 0;\n    var paren_stack_count_stack_count_stack = [];\n    var paren_count_stack_count_stack_count_stack = [];\n    var paren_stack_count_stack_count_stack_count = 0;\n    var paren_count_stack_count_stack_count_stack_count = 0;\n    var paren_stack_count_stack_count_stack_count_stack = [];\n    var paren_count_stack_count_stack_count_stack_count_stack = [];\n    var paren_stack_count_stack_count_stack_count_stack_count = 0;\n    var paren_count_stack_count_stack_count_stack_count_stack_count = 0;\n    var paren_stack_count_stack_count_stack_count_stack_count_stack = [];\n    var paren_count_stack_count_stack_count_stack_count_stack_count_stack = [];\n    var paren_stack_count_stack_count_stack_count_stack_count_stack_count = 0;\n    var paren_count_stack_count_stack_count_stack_count_stack_count_stack_count = 0;\n    var paren_stack_count_stack_count_stack_count_stack_count_stack_count_stack = [];\n    var paren_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack = [];\n    var paren_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count = 0;\n    var paren_count_stack_count_stack_count_stack_count_stack\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmpjy8u30ls.js:42\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var result = [];\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_depth = 0;\n    var paren_index = 0;\n    var paren_char = \"\";\n    var paren_char_index = 0;\n    var paren_char_count = 0;\n    var paren_char_count_index = 0;\n    var paren_char_count_count = 0;\n    var paren_char_count_count_index = 0;\n    var paren_char_count_count_count = 0;\n    var paren_char_count_count_count_index = 0;\n    var paren_char_count_count_count_count = 0;\n    var paren_char_count_count_count_count_index = 0;\n    var paren_char_count_count_count_count_count = 0;\n    var paren_char_count_count_count_count_count_index = 0;\n    var paren_char_count_count_count_count_count_count = 0;\n    var paren_char_count_count_count_count_count_count_index = 0;\n    var paren_char_count_count_count_count_count_count_count = 0;\n    var paren_char_count_count_count_count_count_count_count_index = 0;\n    var paren_char_count_count_count_count_count_count_count_count = 0;\n    var paren_char_count_count_count_count_count_count_count_count_index = 0;\n    var paren_char_count_count_count_count_count_count_count_count_count = 0;\n    var paren_char_count_count_count_count_count_count_count_count_count_index = 0;\n    var paren_char_count_count_count_count_count_count_count_count_count_count = 0;\n    var paren_char_count_count_count_count_count_count_count_count_count_count_index = 0;\n    var paren_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmpc5jet0v4.js:45\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var max_nesting = 0;\n    var current_level = 0;\n    var current_paren = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] == '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n            current_level++;\n        }\n        else if(paren_string[i] == ')'){\n            paren_count--;\n            current_level--;\n            if(current_level < 0){\n                console.log(\"Error: Invalid parentheses string\");\n                return;\n            }\n            if(paren_count == 0){\n                max_nesting = Math.max(max_nesting, current_level);\n                current_paren = paren_stack.pop();\n            }\n        }\n    }\n    console.log(max_nesting);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "0\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp3i8_6_8b.js:40:10)\n    at Object.<anonymous> (/tmp/tmp3i8_6_8b.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_groups = paren_string.split(\" \");\n  var max_nesting = 0;\n  var max_nesting_index = 0;\n  for(var i = 0; i < paren_groups.length; i++){\n    var paren_group = paren_groups[i];\n    var nesting = 0;\n    for(var j = 0; j < paren_group.length; j++){\n      if(paren_group[j] == \"(\"){\n        nesting++;\n      }\n      else if(paren_group[j] == \")\"){\n        nesting--;\n      }\n    }\n    if(nesting > max_nesting){\n      max_nesting = nesting;\n      max_nesting_index = i;\n    }\n  }\n  return [max_nesting_index, max_nesting];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpqksqtmh2.js:34:10)\n    at Object.<anonymous> (/tmp/tmpqksqtmh2.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_count = 0;\n    var paren_stack = [];\n    var paren_string_arr = paren_string.split(\" \");\n    for(var i=0; i<paren_string_arr.length; i++){\n        if(paren_string_arr[i] == \"(\"){\n            paren_count++;\n            paren_stack.push(paren_count);\n        }\n        else if(paren_string_arr[i] == \")\"){\n            paren_count--;\n            if(paren_count == 0){\n                var max_nesting = Math.max.apply(null, paren_stack);\n                console.log(max_nesting);\n                paren_stack.pop();\n            }\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpd109hul9.js:31:10)\n    at Object.<anonymous> (/tmp/tmpd109hul9.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var result = [];\n    var stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string = paren_string.split(\" \");\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] == \"(\"){\n            stack.push(paren_string[i]);\n            paren_count++;\n            paren_level++;\n        }\n        else if(paren_string[i] == \")\"){\n            if(stack.length > 0){\n                stack.pop();\n                paren_count--;\n            }\n        }\n        else{\n            if(stack.length > 0){\n                stack.pop();\n                paren_count--;\n            }\n            if(paren_count == 0){\n                result.push(paren_level);\n                paren_count = 0;\n                paren_level = 0;\n            }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp21dt4ry6.js:44:10)\n    at Object.<anonymous> (/tmp/tmp21dt4ry6.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] == '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n            paren_level++;\n        }\n        else if(paren_string[i] == ')'){\n            paren_count--;\n            if(paren_count == 0){\n                var max_level = Math.max.apply(null, paren_stack);\n                console.log(max_level);\n                paren_stack.pop();\n                paren_level--;\n            }\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "2\n3\n2\n3\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpphxnjdr9.js:34:10)\n    at Object.<anonymous> (/tmp/tmpphxnjdr9.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var max_nesting = 0;\n    var current_nesting = 0;\n    var current_char = \"\";\n    var current_char_index = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        current_char = paren_string[i];\n        if(current_char == \"(\"){\n            paren_stack.push(current_char);\n            current_nesting++;\n        }\n        else if(current_char == \")\"){\n            if(paren_stack.length > 0){\n                paren_stack.pop();\n                current_nesting--;\n            }\n        }\n        else if(current_char == \" \"){\n            if(paren_stack.length > 0){\n                if(current_nesting > max_nesting){\n                    max_nesting = current_nesting;\n                }\n                current_nesting = 0;\n            }\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp8o156tpz.js:42:10)\n    at Object.<anonymous> (/tmp/tmp8o156tpz.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_depth = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n            if(paren_count === 0){\n                paren_depth = paren_stack.pop();\n            }\n        }\n    }\n    return paren_depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpsj5a252v.js:31:10)\n    at Object.<anonymous> (/tmp/tmpsj5a252v.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_count_stack = [];\n    var paren_count_stack_index = 0;\n    var paren_count_stack_index_stack = [];\n    var paren_count_stack_index_stack_index = 0;\n    var paren_count_stack_index_stack_index_stack = [];\n    var paren_count_stack_index_stack_index_stack_index = 0;\n    var paren_count_stack_index_stack_index_stack_index_stack = [];\n    var paren_count_stack_index_stack_index_stack_index_stack_index = 0;\n    var paren_count_stack_index_stack_index_stack_index_stack_index_stack = [];\n    var paren_count_stack_index_stack_index_stack_index_stack_index_stack_index = 0;\n    var paren_count_stack_index_stack_index_stack_index_stack_index_stack_index = [];\n    var paren_count_stack_index_stack_index_stack_index_stack_index_stack_index_stack = [];\n    var paren_count_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index = 0;\n    var paren_count_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index = [];\n    var paren_count_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index_stack = [];\n    var paren_count_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index_stack = [];\n    var paren_count_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index = 0;\n    var paren_count_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index_stack = [];\n    var paren_count_stack_index_stack_index_stack_index\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmpsex4_lx4.js:38\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var max_nesting = 0;\n    var paren_count_stack = [];\n    var paren_count_stack_index = 0;\n    var paren_count_stack_max = 0;\n    var paren_count_stack_max_index = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_length_index = 0;\n    var paren_count_stack_max_length_length = 0;\n    var paren_count_stack_max_length_length_index = 0;\n    var paren_count_stack_max_length_length_length = 0;\n    var paren_count_stack_max_length_length_length_index = 0;\n    var paren_count_stack_max_length_length_length_length = 0;\n    var paren_count_stack_max_length_length_length_length_index = 0;\n    var paren_count_stack_max_length_length_length_length_length = 0;\n    var paren_count_stack_max_length_length_length_length_length_index = 0;\n    var paren_count_stack_max_length_length_length_length_length_length = 0;\n    var paren_count_stack_max_length_length_length_length_length_length_index = 0;\n    var paren_count_stack_max_length_length_length_length_length_length_length = 0;\n    var paren_count_stack_max_length_length_length_length_length_length_length_index = 0;\n    var paren_count_stack_max_length_length_length_length_length_length_length_length = 0;\n    var paren_count_stack_max_length_length_length_length_length_length_length_length_index = 0;\n    var paren_count_stack_max_length_length_length_length_length_length_length_length_length = 0;\n    var paren_count_stack_max_length\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmpr18682mq.js:42\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_count_stack = [];\n    var paren_count_stack_index = 0;\n    var paren_count_stack_top = 0;\n    var paren_count_stack_top_index = 0;\n    var paren_count_stack_top_value = 0;\n    var paren_count_stack_top_value_index = 0;\n    var paren_count_stack_top_value_value = 0;\n    var paren_count_stack_top_value_value_index = 0;\n    var paren_count_stack_top_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_index = 0;\n    var paren_count_stack_top_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_index = 0;\n    var paren_count_stack_top_value_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_value_index = 0;\n    var paren_count_stack_top_value_value_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_index = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_index = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_value_index = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_value_value\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmp92j8bg9f.js:41\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_count = 0;\n    var paren_stack = [];\n    var output = [];\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n            if(paren_count === 0){\n                output.push(paren_stack.pop());\n            }\n        }\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpwyfsiy5v.js:31:10)\n    at Object.<anonymous> (/tmp/tmpwyfsiy5v.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_count = 0;\n    var paren_stack = [];\n    var output = [];\n    var current_level = 0;\n    var current_paren_count = 0;\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n            paren_count++;\n            current_paren_count++;\n            if(current_level === 0){\n                current_level = paren_count;\n            }\n            else{\n                current_level = Math.max(current_level, paren_count);\n            }\n        }\n        else if(paren_string[i] === ')'){\n            current_paren_count--;\n            if(current_paren_count === 0){\n                current_level = Math.max(current_level, paren_count);\n                paren_count--;\n                paren_stack.push(current_level);\n                current_level = paren_stack.pop();\n            }\n        }\n    }\n    if(current_level !== 0){\n        output.push(current_level);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  9\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpa1kp845_.js:44:10)\n    at Object.<anonymous> (/tmp/tmpa1kp845_.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 9 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_count_stack = [];\n    var paren_count_stack_index = 0;\n    var paren_count_stack_top = 0;\n    var paren_count_stack_top_index = 0;\n    var paren_count_stack_top_top = 0;\n    var paren_count_stack_top_top_index = 0;\n    var paren_count_stack_top_top_top = 0;\n    var paren_count_stack_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpzlssi0oj.js:42\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var nesting = count_nesting(paren_group);\n        if(nesting > max_nesting){\n            max_nesting = nesting;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmp16xo5sib.js:11\n        var nesting = count_nesting(paren_group);\n                      ^\n\nReferenceError: count_nesting is not defined\n    at parse_nested_parens (/tmp/tmp16xo5sib.js:11:23)\n    at test (/tmp/tmp16xo5sib.js:24:20)\n    at Object.<anonymous> (/tmp/tmp16xo5sib.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var max_nesting = 0;\n    var current_nesting = 0;\n    var paren_count = 0;\n    var paren_index = 0;\n    var paren_char = \"\";\n    var paren_char_count = 0;\n    var paren_char_index = 0;\n    var paren_char_count_stack = [];\n    var paren_char_index_stack = [];\n    var paren_char_stack = [];\n    var paren_char_stack_index = 0;\n    var paren_char_stack_count = 0;\n    var paren_char_stack_count_stack = [];\n    var paren_char_stack_index_stack = [];\n    var paren_char_stack_stack = [];\n    var paren_char_stack_stack_index = 0;\n    var paren_char_stack_stack_count = 0;\n    var paren_char_stack_stack_count_stack = [];\n    var paren_char_stack_stack_index_stack = [];\n    var paren_char_stack_stack_stack = [];\n    var paren_char_stack_stack_index_stack = [];\n    var paren_char_stack_stack_stack_index = 0;\n    var paren_char_stack_stack_stack_count = 0;\n    var paren_char_stack_stack_stack_count_stack = [];\n    var paren_char_stack_stack_stack_index_stack = [];\n    var paren_char_stack_stack_stack_stack = [];\n    var paren_char_stack_stack_stack_index_stack = [];\n    var paren_char_stack_stack_stack_stack_index = 0;\n    var paren_char_stack_stack_stack_stack_count = 0;\n    var paren_char_stack_stack_stack_stack_count_stack = [];\n    var paren_char_stack_stack_stack_stack_index_stack = [];\n    var paren_char_stack_stack_stack_stack_stack = [];\n    var paren_char_stack_stack_stack\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmpw72oxcyk.js:51\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var nesting = count_nested_parens(paren_group);\n        if(nesting > max_nesting){\n            max_nesting = nesting;\n            max_nesting_index = i;\n        }\n    }\n    return [max_nesting, max_nesting_index];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmp8l2e2yni.js:12\n        var nesting = count_nested_parens(paren_group);\n                      ^\n\nReferenceError: count_nested_parens is not defined\n    at parse_nested_parens (/tmp/tmp8l2e2yni.js:12:23)\n    at test (/tmp/tmp8l2e2yni.js:26:20)\n    at Object.<anonymous> (/tmp/tmp8l2e2yni.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i=0; i<paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var paren_count = 0;\n        for(var j=0; j<paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                paren_count++;\n            }\n            else if(paren_group[j] == \")\"){\n                paren_count--;\n            }\n        }\n        if(paren_count > max_nesting){\n            max_nesting = paren_count;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpqum54o4i.js:32:10)\n    at Object.<anonymous> (/tmp/tmpqum54o4i.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    var paren_string_length = paren_string.length;\n    for (var i = 0; i < paren_string_length; i++){\n        if (paren_string[i] === '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n        }\n        else if (paren_string[i] === ')'){\n            paren_count--;\n            if (paren_count === 0){\n                var max_nesting_count = 0;\n                for (var j = 0; j < paren_stack.length; j++){\n                    if (paren_stack[j] > max_nesting_count){\n                        max_nesting_count = paren_stack[j];\n                        max_nesting_index = j;\n                    }\n                }\n                max_nesting = max_nesting_count;\n                paren_stack.splice(max_nesting_index, 1);\n            }\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmprrxkrnti.js:40:10)\n    at Object.<anonymous> (/tmp/tmprrxkrnti.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_count_stack = [];\n    var paren_count_stack_index = 0;\n    var paren_count_stack_max = 0;\n    var paren_count_stack_max_index = 0;\n    var paren_count_stack_max_max = 0;\n    var paren_count_stack_max_max_index = 0;\n    var paren_count_stack_max_max_max = 0;\n    var paren_count_stack_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpyodrmg36.js:42\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_count_stack = [];\n    var max_nesting = 0;\n    var max_nesting_stack = [];\n    var paren_string_split = paren_string.split(\" \");\n    for(var i = 0; i < paren_string_split.length; i++){\n        if(paren_string_split[i] == \"(\" || paren_string_split[i] == \")\"){\n            paren_count++;\n            paren_count_stack.push(paren_count);\n            paren_stack.push(paren_string_split[i]);\n        }\n        else if(paren_string_split[i] == \")\"){\n            if(paren_count_stack.length > 0){\n                paren_count = paren_count_stack.pop();\n            }\n            else{\n                console.log(\"Error: Invalid input\");\n                return;\n            }\n        }\n        else if(paren_string_split[i] == \"(\"){\n            if(paren_count_stack.length > 0){\n                paren_count = paren_count_stack.pop();\n            }\n            else{\n                console.log(\"Error: Invalid input\");\n                return;\n            }\n        }\n        if(paren_count > max_nesting){\n            max_nesting = paren_count;\n            max_nesting_stack = paren_count_stack;\n        }\n    }\n    console.log(max_nesting_stack);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "[]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmprjgdh4j6.js:50:10)\n    at Object.<anonymous> (/tmp/tmprjgdh4j6.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var nesting = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                nesting++;\n            }\n            else if(paren_group[j] == \")\"){\n                nesting--;\n            }\n        }\n        if(nesting > max_nesting){\n            max_nesting = nesting;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpnersyeus.js:32:10)\n    at Object.<anonymous> (/tmp/tmpnersyeus.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_count = 0;\n    var paren_stack = [];\n    var output = [];\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n        }\n        else if(paren_string[i] === ')'){\n            if(paren_stack.length === 0){\n                output.push(paren_count);\n            }\n            else{\n                paren_count = paren_stack.pop();\n            }\n        }\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpphxgv49u.js:33:10)\n    at Object.<anonymous> (/tmp/tmpphxgv49u.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var current_level = 0;\n    var max_level = 0;\n    var max_index = 0;\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n            paren_stack.push(i);\n            current_level++;\n        }\n        else if(paren_string[i] === ')'){\n            if(current_level === 0){\n                console.log(\"Error: Unbalanced parentheses\");\n                return;\n            }\n            current_level--;\n            if(current_level === 0){\n                max_index = i;\n                max_level = paren_stack.length;\n            }\n            paren_stack.pop();\n        }\n    }\n    if(current_level !== 0){\n        console.log(\"Error: Unbalanced parentheses\");\n        return;\n    }\n    console.log(max_level);\n    console.log(max_index);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "1\n26\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp38a_9itp.js:42:10)\n    at Object.<anonymous> (/tmp/tmp38a_9itp.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var nesting = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                nesting++;\n            }\n            else if(paren_group[j] == \")\"){\n                nesting--;\n            }\n        }\n        if(nesting > max_nesting){\n            max_nesting = nesting;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpnersyeus.js:32:10)\n    at Object.<anonymous> (/tmp/tmpnersyeus.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_count = 0;\n    var paren_stack = [];\n    var result = [];\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n        }\n        else if(paren_string[i] === ')'){\n            if(paren_stack.length === 0){\n                result.push(paren_count);\n            }\n            else{\n                var top = paren_stack.pop();\n                if(top === paren_count){\n                    result.push(paren_count);\n                }\n                else{\n                    result.push(top);\n                }\n            }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  1,\n  6,\n  5,\n  4,\n  7,\n  10,\n  9,\n  11,\n  12,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpiunl92po.js:38:10)\n    at Object.<anonymous> (/tmp/tmpiunl92po.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     2, 3,  1, 6,  5,\n     4, 7, 10, 9, 11,\n    12, 8\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n            if(paren_count === 0){\n                max_nesting = Math.max(max_nesting, paren_stack.pop());\n            }\n        }\n    }\n    max_nesting_index = paren_stack.indexOf(max_nesting);\n    return max_nesting_index;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp3a0sj2cv.js:33:10)\n    at Object.<anonymous> (/tmp/tmp3a0sj2cv.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var nesting = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                nesting++;\n            }\n            else if(paren_group[j] == \")\"){\n                nesting--;\n            }\n        }\n        if(nesting > max_nesting){\n            max_nesting = nesting;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpnersyeus.js:32:10)\n    at Object.<anonymous> (/tmp/tmpnersyeus.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n            paren_level++;\n        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n            if(paren_count === 0){\n                var max_level = Math.max.apply(null, paren_stack);\n                console.log(max_level);\n                paren_stack.pop();\n                paren_level--;\n            }\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "2\n3\n2\n3\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp89yoedc4.js:34:10)\n    at Object.<anonymous> (/tmp/tmp89yoedc4.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var nesting = count_nested_parens(paren_group);\n        if(nesting > max_nesting){\n            max_nesting = nesting;\n        }\n    }\n    return max_nesting;\n}\n\nfunction count_nested_parens(paren_group){\n    var nesting = 0;\n    for(var i = 0; i < paren_group.length; i++){\n        if(paren_group[i] === \"(\"){\n            nesting++;\n        }\n        else if(paren_group[i] === \")\"){\n            nesting--;\n        }\n    }\n    return nesting;\n}\n\nfunction get_max_nesting(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var nesting = count_nested_parens(paren_group);\n        if(nesting > max_nesting){\n            max_nesting = nesting;\n        }\n    }\n    return max_nesting;\n}\n\nfunction get_max_nesting_from_string(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var nesting = count_nested_parens(paren_group);\n        if(nesting > max_nesting){\n            max_nesting = nesting;\n        }\n    }\n    return max_nesting;\n}\n\nfunction get_max_nesting_from_string_2(paren_string){\n    var paren_groups = paren\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmpw_5vm0vy.js:70\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n            paren_level++;\n        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n            if(paren_count === 0){\n                paren_level--;\n                if(paren_level === 0){\n                    var max_nesting = Math.max.apply(null, paren_stack);\n                    console.log(max_nesting);\n                    paren_stack = [];\n                }\n            }\n            else{\n                paren_stack.push(paren_count);\n            }\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmppy5_dt11.js:39:10)\n    at Object.<anonymous> (/tmp/tmppy5_dt11.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_count_stack = [];\n    var paren_level_stack = [];\n    var paren_count_stack_index = 0;\n    var paren_level_stack_index = 0;\n    var paren_count_stack_top = 0;\n    var paren_level_stack_top = 0;\n    var paren_count_stack_top_index = 0;\n    var paren_level_stack_top_index = 0;\n    var paren_count_stack_top_value = 0;\n    var paren_level_stack_top_value = 0;\n    var paren_count_stack_top_index_value = 0;\n    var paren_level_stack_top_index_value = 0;\n    var paren_count_stack_top_value_value = 0;\n    var paren_level_stack_top_value_value = 0;\n    var paren_count_stack_top_index_value_value = 0;\n    var paren_level_stack_top_index_value_value = 0;\n    var paren_count_stack_top_value_value_value = 0;\n    var paren_level_stack_top_value_value_value = 0;\n    var paren_count_stack_top_index_value_value_value = 0;\n    var paren_level_stack_top_index_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value = 0;\n    var paren_level_stack_top_value_value_value_value = 0;\n    var paren_count_stack_top_index_value_value_value_value = 0;\n    var paren_level_stack_top_index_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_value = 0;\n    var paren_level_stack_top_value_value_value_value_value = 0;\n    var paren_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmpnsrbsydh.js:47\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var result = [];\n    var stack = [];\n    var paren_count = 0;\n    var paren_depth = 0;\n    var paren_index = 0;\n    var paren_string = paren_string.split(\" \");\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] == \"(\"){\n            paren_count++;\n            stack.push(paren_count);\n            paren_depth = 0;\n        }\n        else if(paren_string[i] == \")\"){\n            paren_depth = stack.pop();\n        }\n        else if(paren_string[i] == \")\"){\n            paren_depth++;\n        }\n        result.push(paren_depth);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpzn5satzv.js:35:10)\n    at Object.<anonymous> (/tmp/tmpzn5satzv.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_list = paren_string.split(\" \");\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var i = 0; i < paren_list.length; i++){\n        var paren_count = 0;\n        for(var j = 0; j < paren_list[i].length; j++){\n            if(paren_list[i][j] == \"(\"){\n                paren_count++;\n            }\n            else if(paren_list[i][j] == \")\"){\n                paren_count--;\n            }\n        }\n        if(paren_count > max_nesting){\n            max_nesting = paren_count;\n            max_nesting_index = i;\n        }\n    }\n    return [max_nesting_index, max_nesting];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmps0dzi6eh.js:33:10)\n    at Object.<anonymous> (/tmp/tmps0dzi6eh.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_count_stack = [];\n    var paren_count_stack_index = 0;\n    var paren_count_stack_max = 0;\n    var paren_count_stack_max_index = 0;\n    var paren_count_stack_max_max = 0;\n    var paren_count_stack_max_max_index = 0;\n    var paren_count_stack_max_max_max = 0;\n    var paren_count_stack_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_max\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmp_t8zgji0.js:41\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var current_level = 0;\n    var max_level = 0;\n    var max_level_index = 0;\n    var paren_count = 0;\n    var paren_count_index = 0;\n    var paren_string_index = 0;\n    var paren_string_length = paren_string.length;\n    var paren_string_char;\n    var paren_string_char_index;\n    var paren_string_char_count;\n    var paren_string_char_count_index;\n    var paren_string_char_count_length;\n    var paren_string_char_count_char;\n    var paren_string_char_count_char_index;\n    var paren_string_char_count_char_count;\n    var paren_string_char_count_char_count_index;\n    var paren_string_char_count_char_count_length;\n    var paren_string_char_count_char_count_char;\n    var paren_string_char_count_char_count_char_index;\n    var paren_string_char_count_char_count_char_count;\n    var paren_string_char_count_char_count_char_count_index;\n    var paren_string_char_count_char_count_char_count_length;\n    var paren_string_char_count_char_count_char_count_char;\n    var paren_string_char_count_char_count_char_count_char_index;\n    var paren_string_char_count_char_count_char_count_char_count;\n    var paren_string_char_count_char_count_char_count_char_count_index;\n    var paren_string_char_count_char_count_char_count_char_count_length;\n    var paren_string_char_count_char_count_char_count_char_count_char;\n    var paren_string_char_count_char_count_char_count_char_count_char_index;\n    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmp6alxcf0_.js:48\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var max_nesting = 0;\n    for(var i=0; i<paren_string.length; i++){\n        if(paren_string[i] == '('){\n            paren_stack.push(i);\n        }\n        else if(paren_string[i] == ')'){\n            var last_index = paren_stack.pop();\n            if(paren_stack.length > 0){\n                max_nesting = Math.max(max_nesting, paren_stack.length);\n            }\n            else{\n                max_nesting = Math.max(max_nesting, i - last_index);\n            }\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp99jhjddn.js:31:10)\n    at Object.<anonymous> (/tmp/tmp99jhjddn.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var group = paren_groups[i];\n        var nesting = 0;\n        for(var j = 0; j < group.length; j++){\n            if(group[j] === \"(\"){\n                nesting++;\n            }\n            else if(group[j] === \")\"){\n                nesting--;\n            }\n        }\n        if(nesting > max_nesting){\n            max_nesting = nesting;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpnmp5ax3n.js:32:10)\n    at Object.<anonymous> (/tmp/tmpnmp5ax3n.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var max_depth = 0;\n    var current_depth = 0;\n    var current_paren = 0;\n    var current_paren_string = \"\";\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] === \" \"){\n            continue;\n        }\n        if(paren_string[i] === \"(\"){\n            current_depth++;\n            current_paren_string += paren_string[i];\n            if(current_depth > max_depth){\n                max_depth = current_depth;\n            }\n            if(current_depth === 1){\n                paren_stack.push(current_paren);\n                current_paren = i;\n            }\n        }\n        else if(paren_string[i] === \")\"){\n            current_depth--;\n            current_paren_string += paren_string[i];\n            if(current_depth === 0){\n                current_paren = paren_stack.pop();\n                current_paren_string = current_paren_string.substring(0, current_paren);\n            }\n        }\n    }\n    return max_depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpd0lgbo0g.js:45:10)\n    at Object.<anonymous> (/tmp/tmpd0lgbo0g.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var nesting = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                nesting++;\n            }\n            else if(paren_group[j] == \")\"){\n                nesting--;\n            }\n        }\n        if(nesting > max_nesting){\n            max_nesting = nesting;\n            max_nesting_index = i;\n        }\n    }\n    return [max_nesting_index, max_nesting];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp5m7jobli.js:34:10)\n    at Object.<anonymous> (/tmp/tmp5m7jobli.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_count = 0;\n    var paren_stack = [];\n    var output = [];\n    var paren_level = 0;\n    var paren_level_count = 0;\n    var paren_level_max = 0;\n    var paren_level_min = 0;\n    var paren_level_max_count = 0;\n    var paren_level_min_count = 0;\n    var paren_level_min_max_count = 0;\n    var paren_level_min_max_count_count = 0;\n    var paren_level_min_max_count_count_count = 0;\n    var paren_level_min_max_count_count_count_count = 0;\n    var paren_level_min_max_count_count_count_count_count = 0;\n    var paren_level_min_max_count_count_count_count_count_count = 0;\n    var paren_level_min_max_count_count_count_count_count_count_count = 0;\n    var paren_level_min_max_count_count_count_count_count_count_count_count = 0;\n    var paren_level_min_max_count_count_count_count_count_count_count_count_count = 0;\n    var paren_level_min_max_count_count_count_count_count_count_count_count_count_count = 0;\n    var paren_level_min_max_count_count_count_count_count_count_count_count_count_count_count = 0;\n    var paren_level_min_max_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    var paren_level_min_max_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    var paren_level_min_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    var paren_level_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmp5kp1pkhh.js:41\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var max_nesting = 0;\n    var current_nesting = 0;\n    var current_paren = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n            current_paren++;\n        }\n        else if(paren_string[i] === ')'){\n            current_paren--;\n        }\n        if(current_paren === 0){\n            current_nesting++;\n            if(current_nesting > max_nesting){\n                max_nesting = current_nesting;\n            }\n        }\n        else if(current_paren < 0){\n            current_nesting--;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpqh52myef.js:37:10)\n    at Object.<anonymous> (/tmp/tmpqh52myef.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    var paren_index = 0;\n    var paren_char = \"\";\n    var paren_char_index = 0;\n    var paren_char_length = 0;\n    var paren_char_count = 0;\n    var paren_char_count_max = 0;\n    var paren_char_count_min = 0;\n    var paren_char_count_diff = 0;\n    var paren_char_count_diff_max = 0;\n    var paren_char_count_diff_min = 0;\n    var paren_char_count_diff_diff = 0;\n    var paren_char_count_diff_diff_max = 0;\n    var paren_char_count_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmpe97mypse.js:47\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_count_stack = [];\n    var max_nesting = 0;\n    var max_nesting_stack = [];\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var aa = 0;\n    var ab = 0;\n    var ac = 0;\n    var ad = 0;\n    var ae = 0;\n    var af = 0;\n    var ag = 0;\n    var ah = 0;\n    var ai = 0;\n    var aj = 0;\n    var ak = 0;\n    var al = 0;\n    var am = 0;\n    var an = 0;\n    var ao = 0;\n    var ap = 0;\n    var aq = 0;\n    var ar = 0;\n    var as = 0;\n    var at = 0;\n    var au = 0;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmp7h_iglry.js:88\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    var paren_index = 0;\n    var paren_char = \"\";\n    var paren_char_index = 0;\n    var paren_char_length = 0;\n    var paren_char_count = 0;\n    var paren_char_count_max = 0;\n    var paren_char_count_min = 0;\n    var paren_char_count_diff = 0;\n    var paren_char_count_diff_max = 0;\n    var paren_char_count_diff_min = 0;\n    var paren_char_count_diff_diff = 0;\n    var paren_char_count_diff_diff_max = 0;\n    var paren_char_count_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmpe97mypse.js:47\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    var paren_index = 0;\n    var paren_char = \"\";\n    var paren_char_index = 0;\n    var paren_char_length = 0;\n    var paren_char_count = 0;\n    var paren_char_count_max = 0;\n    var paren_char_count_min = 0;\n    var paren_char_count_diff = 0;\n    var paren_char_count_diff_max = 0;\n    var paren_char_count_diff_min = 0;\n    var paren_char_count_diff_diff = 0;\n    var paren_char_count_diff_diff_max = 0;\n    var paren_char_count_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmpe97mypse.js:47\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var max_nesting = 0;\n    var current_nesting = 0;\n    var current_paren = 0;\n    var current_paren_string = \"\";\n    var current_paren_string_length = 0;\n    var current_paren_string_index = 0;\n    var current_paren_string_index_end = 0;\n    var current_paren_string_index_start = 0;\n    var current_paren_string_length_end = 0;\n    var current_paren_string_length_start = 0;\n    var current_paren_string_length_total = 0;\n    var current_paren_string_length_total_end = 0;\n    var current_paren_string_length_total_start = 0;\n    var current_paren_string_length_total_total = 0;\n    var current_paren_string_length_total_total_end = 0;\n    var current_paren_string_length_total_total_start = 0;\n    var current_paren_string_length_total_total_total = 0;\n    var current_paren_string_length_total_total_total_end = 0;\n    var current_paren_string_length_total_total_total_start = 0;\n    var current_paren_string_length_total_total_total_total = 0;\n    var current_paren_string_length_total_total_total_total_end = 0;\n    var current_paren_string_length_total_total_total_total_start = 0;\n    var current_paren_string_length_total_total_total_total_total = 0;\n    var current_paren_string_length_total_total_total_total_total_end = 0;\n    var current_paren_string_length_total_total_total_total_total_start = 0;\n    var current_paren_string_length_total_total_total_total_total_total = 0;\n    var current_paren_string_length_total_total_total_total_total_total_end = 0;\n    var current_paren_string_length_total_total_total_total_total_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmp6ivu69k0.js:46\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var nesting = count_nesting(paren_group);\n        if(nesting > max_nesting){\n            max_nesting = nesting;\n            max_nesting_index = i;\n        }\n    }\n    return max_nesting_index;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmph_4d1ra7.js:12\n        var nesting = count_nesting(paren_group);\n                      ^\n\nReferenceError: count_nesting is not defined\n    at parse_nested_parens (/tmp/tmph_4d1ra7.js:12:23)\n    at test (/tmp/tmph_4d1ra7.js:26:20)\n    at Object.<anonymous> (/tmp/tmph_4d1ra7.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    var paren_index = 0;\n    var paren_char = \"\";\n    var paren_char_index = 0;\n    var paren_char_length = 0;\n    var paren_char_count = 0;\n    var paren_char_count_max = 0;\n    var paren_char_count_min = 0;\n    var paren_char_count_diff = 0;\n    var paren_char_count_diff_max = 0;\n    var paren_char_count_diff_min = 0;\n    var paren_char_count_diff_diff = 0;\n    var paren_char_count_diff_diff_max = 0;\n    var paren_char_count_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmpe97mypse.js:47\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var paren_count = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                paren_count++;\n            }\n            else if(paren_group[j] == \")\"){\n                paren_count--;\n            }\n        }\n        if(paren_count > max_nesting){\n            max_nesting = paren_count;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpe4mrolb6.js:32:10)\n    at Object.<anonymous> (/tmp/tmpe4mrolb6.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_count_stack = [];\n    var paren_count_stack_index = 0;\n    var paren_count_stack_max = 0;\n    var paren_count_stack_max_index = 0;\n    var paren_count_stack_max_value = 0;\n    var paren_count_stack_max_value_index = 0;\n    var paren_count_stack_max_value_value = 0;\n    var paren_count_stack_max_value_value_index = 0;\n    var paren_count_stack_max_value_value_value = 0;\n    var paren_count_stack_max_value_value_value_index = 0;\n    var paren_count_stack_max_value_value_value_value = 0;\n    var paren_count_stack_max_value_value_value_value_index = 0;\n    var paren_count_stack_max_value_value_value_value_value = 0;\n    var paren_count_stack_max_value_value_value_value_value_index = 0;\n    var paren_count_stack_max_value_value_value_value_value_value = 0;\n    var paren_count_stack_max_value_value_value_value_value_value_index = 0;\n    var paren_count_stack_max_value_value_value_value_value_value_value = 0;\n    var paren_count_stack_max_value_value_value_value_value_value_value_index = 0;\n    var paren_count_stack_max_value_value_value_value_value_value_value_value = 0;\n    var paren_count_stack_max_value_value_value_value_value_value_value_value_index = 0;\n    var paren_count_stack_max_value_value_value_value_value_value_value_value_value = 0;\n    var paren_count_stack_max_value\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmpzbs0x06k.js:42\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var result = [];\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_count_stack = [];\n    var paren_count_stack_index = 0;\n    var paren_count_stack_top = 0;\n    var paren_count_stack_top_index = 0;\n    var paren_count_stack_top_value = 0;\n    var paren_count_stack_top_value_index = 0;\n    var paren_count_stack_top_value_value = 0;\n    var paren_count_stack_top_value_value_index = 0;\n    var paren_count_stack_top_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_index = 0;\n    var paren_count_stack_top_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_index = 0;\n    var paren_count_stack_top_value_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_value_index = 0;\n    var paren_count_stack_top_value_value_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_index = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_index = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_value_index = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmp0xuny6b4.js:42\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    var paren_index = 0;\n    var paren_char = '';\n    var paren_char_index = 0;\n    var paren_char_length = 0;\n    var paren_char_count = 0;\n    var paren_char_count_max = 0;\n    var paren_char_count_min = 0;\n    var paren_char_count_diff = 0;\n    var paren_char_count_diff_max = 0;\n    var paren_char_count_diff_min = 0;\n    var paren_char_count_diff_diff = 0;\n    var paren_char_count_diff_diff_max = 0;\n    var paren_char_count_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff_max = 0;\n    var paren_char_count_diff_diff_diff_diff_diff_diff_min = 0;\n    var paren_char_count_diff_diff_diff_diff\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmp_dc74v3c.js:47\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_count = 0;\n    var paren_stack = [];\n    var result = [];\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] == '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n        }\n        else if(paren_string[i] == ')'){\n            paren_count--;\n            if(paren_count == 0){\n                result.push(paren_stack.pop());\n            }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpazl43l7b.js:31:10)\n    at Object.<anonymous> (/tmp/tmpazl43l7b.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_count_stack = [];\n    var paren_count_stack_index = 0;\n    var paren_count_stack_length = 0;\n    var paren_count_stack_max = 0;\n    var paren_count_stack_max_index = 0;\n    var paren_count_stack_max_length = 0;\n    var paren_count_stack_max_max = 0;\n    var paren_count_stack_max_max_index = 0;\n    var paren_count_stack_max_max_length = 0;\n    var paren_count_stack_max_max_max = 0;\n    var paren_count_stack_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_length = 0;\n    var paren_count_stack_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_length = 0;\n    var paren_count_stack_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_length = 0;\n    var paren_count_stack_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max_length = 0;\n    var paren_count_stack_max_max_max_max_max_max_max = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    var paren_count_stack_max_max_max_max_max_max_max_length\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmp3vs3xkr2.js:44\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var paren_count = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                paren_count++;\n            }\n            else if(paren_group[j] == \")\"){\n                paren_count--;\n            }\n        }\n        if(paren_count > max_nesting){\n            max_nesting = paren_count;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpe4mrolb6.js:32:10)\n    at Object.<anonymous> (/tmp/tmpe4mrolb6.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var paren_count = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                paren_count++;\n            }\n            else if(paren_group[j] == \")\"){\n                paren_count--;\n            }\n        }\n        if(paren_count > max_nesting){\n            max_nesting = paren_count;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpe4mrolb6.js:32:10)\n    at Object.<anonymous> (/tmp/tmpe4mrolb6.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var nesting = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                nesting++;\n            }\n            else if(paren_group[j] == \")\"){\n                nesting--;\n            }\n        }\n        if(nesting > max_nesting){\n            max_nesting = nesting;\n            max_nesting_index = i;\n        }\n    }\n    return [max_nesting_index, max_nesting];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp5m7jobli.js:34:10)\n    at Object.<anonymous> (/tmp/tmp5m7jobli.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_count_stack = [];\n    var paren_count_stack_index = 0;\n    var paren_count_stack_top = 0;\n    var paren_count_stack_top_index = 0;\n    var paren_count_stack_top_top = 0;\n    var paren_count_stack_top_top_index = 0;\n    var paren_count_stack_top_top_top = 0;\n    var paren_count_stack_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top_index = 0;\n    var paren_count_stack_top_top_top_top_top_top_top_top_top_top = 0;\n    var paren_count_stack_top_top\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmpzlssi0oj.js:42\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n            paren_level++;\n        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n            if(paren_count === 0){\n                var max_level = Math.max.apply(null, paren_stack);\n                console.log(max_level);\n                paren_stack.pop();\n            }\n            else{\n                paren_level--;\n            }\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "2\n3\n2\n3\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmplob2jlem.js:36:10)\n    at Object.<anonymous> (/tmp/tmplob2jlem.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_list = paren_string.split(\" \");\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    for(var i = 0; i < paren_list.length; i++){\n        var num_of_parens = count_parens(paren_list[i]);\n        if(num_of_parens > max_nesting){\n            max_nesting = num_of_parens;\n            max_nesting_index = i;\n        }\n    }\n    return max_nesting_index;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmp46fjtk7u.js:11\n        var num_of_parens = count_parens(paren_list[i]);\n                            ^\n\nReferenceError: count_parens is not defined\n    at parse_nested_parens (/tmp/tmp46fjtk7u.js:11:29)\n    at test (/tmp/tmp46fjtk7u.js:25:20)\n    at Object.<anonymous> (/tmp/tmp46fjtk7u.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    var paren_string_index = 0;\n    var paren_string_index_prev = 0;\n    var paren_string_index_next = 0;\n    var paren_string_index_next_prev = 0;\n    var paren_string_index_next_next = 0;\n    var paren_string_index_next_next_prev = 0;\n    var paren_string_index_next_next_next = 0;\n    var paren_string_index_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next_next = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next_next_prev = 0;\n    var paren_string_index_next_next_next_next_next_next_next_next_next\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmpwri1j1_w.js:42\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    var paren_string_index = 0;\n    var paren_string_char;\n    var paren_string_char_index;\n    var paren_string_char_count;\n    var paren_string_char_count_index;\n    var paren_string_char_count_count;\n    var paren_string_char_count_count_index;\n    var paren_string_char_count_count_count;\n    var paren_string_char_count_count_count_index;\n    var paren_string_char_count_count_count_count;\n    var paren_string_char_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_count\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmp_h044xlb.js:44\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_count = 0;\n    var paren_stack = [];\n    var result = [];\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n            if(paren_count === 0){\n                result.push(paren_stack.pop());\n            }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpdqhg0yd0.js:31:10)\n    at Object.<anonymous> (/tmp/tmpdqhg0yd0.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] == '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n            paren_level++;\n        }\n        else if(paren_string[i] == ')'){\n            paren_count--;\n            if(paren_count == 0){\n                paren_level--;\n                if(paren_level == 0){\n                    var max_nesting = Math.max.apply(null, paren_stack);\n                    console.log(max_nesting);\n                }\n            }\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpzz4jnufg.js:35:10)\n    at Object.<anonymous> (/tmp/tmpzz4jnufg.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n            paren_level++;\n        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n            if(paren_count === 0){\n                paren_level--;\n                if(paren_level === 0){\n                    var max_level = Math.max.apply(null, paren_stack);\n                    console.log(max_level);\n                }\n            }\n            else{\n                paren_stack.pop();\n            }\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpepn8w526.js:38:10)\n    at Object.<anonymous> (/tmp/tmpepn8w526.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    var paren_string_index = 0;\n    var paren_string_char;\n    var paren_string_char_index;\n    var paren_string_char_count;\n    var paren_string_char_count_index;\n    var paren_string_char_count_count;\n    var paren_string_char_count_count_index;\n    var paren_string_char_count_count_count;\n    var paren_string_char_count_count_count_index;\n    var paren_string_char_count_count_count_count;\n    var paren_string_char_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_count_count_index;\n    var paren_string_char_count_count_count_count_count_count_count_count_count_count;\n    var paren_string_char_count_count_count_count_count_count_count_count\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "/tmp/tmp_h044xlb.js:44\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var max_nesting = 0;\n    for (var i = 0; i < paren_string.length; i++){\n        if (paren_string[i] == '('){\n            paren_stack.push(i);\n        }\n        else if (paren_string[i] == ')'){\n            if (paren_stack.length > 0){\n                var last_index = paren_stack.pop();\n                max_nesting = Math.max(max_nesting, paren_stack.length);\n                i = last_index;\n            }\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmphn8wobcd.js:29:10)\n    at Object.<anonymous> (/tmp/tmphn8wobcd.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_index = 0;\n    var paren_string_length = paren_string.length;\n    var paren_string_index = 0;\n    var paren_string_char = \"\";\n    var paren_string_char_index = 0;\n    var paren_string_char_count = 0;\n    var paren_string_char_count_index = 0;\n    var paren_string_char_count_count = 0;\n    var paren_string_char_count_count_index = 0;\n    var paren_string_char_count_count_count = 0;\n    var paren_string_char_count_count_count_index = 0;\n    var paren_string_char_count_count_count_count = 0;\n    var paren_string_char_count_count_count_count_index = 0;\n    var paren_string_char_count_count_count_count_count = 0;\n    var paren_string_char_count_count_count_count_count_index = 0;\n    var paren_string_char_count_count_count_count_count_count = 0;\n    var paren_string_char_count_count_count_count_count_count_index = 0;\n    var paren_string_char_count_count_count_count_count_count_count = 0;\n    var paren_string_char_count_count_count_count_count_count_count_index = 0;\n    var paren_string_char_count_count_count_count_count_count_count_count = 0;\n    var paren_string_char_count_count_count_count_count_count_count_count_index = 0;\n    var paren_string_char_count_count_count_count_count_count_count_count_count = 0;\n    var paren_string_char_count_count_count_count_count_count_count_count_count_index = 0;\n    var paren\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmpp22x494n.js:44\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var max_nesting = 0;\n    var current_nesting = 0;\n    var current_index = 0;\n    var current_char = paren_string[current_index];\n    while(current_char != \"\"){\n        if(current_char == \"(\"){\n            current_nesting++;\n            if(current_nesting > max_nesting){\n                max_nesting = current_nesting;\n            }\n            paren_stack.push(current_nesting);\n        }\n        else if(current_char == \")\"){\n            current_nesting--;\n            if(current_nesting < 0){\n                throw \"Invalid input\";\n            }\n            if(current_nesting == 0){\n                current_index++;\n                current_char = paren_string[current_index];\n            }\n        }\n        else{\n            current_index++;\n            current_char = paren_string[current_index];\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffc1b8c8270\n 1: 0x2b01f6036727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b01f6bcb28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b01f6505f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b01f6697760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b01f669f0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b01f68897db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b01f61e87f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "exit_code": -5,
      "status": "Exception"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n            paren_level++;\n        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n            if(paren_count === 0){\n                var max_level = Math.max.apply(null, paren_stack);\n                console.log(max_level);\n            }\n            else{\n                paren_stack.pop();\n            }\n            paren_level--;\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "1\n1\n1\n1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp4ne5cxgb.js:36:10)\n    at Object.<anonymous> (/tmp/tmp4ne5cxgb.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var max_nesting = 0;\n    var current_level = 0;\n    var current_paren = 0;\n    var current_paren_string = \"\";\n    var current_paren_string_length = 0;\n    var current_paren_string_index = 0;\n    var current_paren_string_index_end = 0;\n    var current_paren_string_index_start = 0;\n    var current_paren_string_length_end = 0;\n    var current_paren_string_length_start = 0;\n    var current_paren_string_length_diff = 0;\n    var current_paren_string_length_diff_end = 0;\n    var current_paren_string_length_diff_start = 0;\n    var current_paren_string_length_diff_start_end = 0;\n    var current_paren_string_length_diff_start_start = 0;\n    var current_paren_string_length_diff_start_start_end = 0;\n    var current_paren_string_length_diff_start_start_start = 0;\n    var current_paren_string_length_diff_start_start_start_end = 0;\n    var current_paren_string_length_diff_start_start_start_start = 0;\n    var current_paren_string_length_diff_start_start_start_start_end = 0;\n    var current_paren_string_length_diff_start_start_start_start_start_end = 0;\n    var current_paren_string_length_diff_start_start_start_start_start_start_end = 0;\n    var current_paren_string_length_diff_start_start_start_start_start_start_start_end = 0;\n    var current_paren_string_length_diff_start_start_start_start_start_start_start_start_end = 0;\n    var current_paren_string_length_diff_start_start_start_start_start_start_start_start_start_end = 0;\n    var current_paren_string_length_diff_start_start_start_start_start_start\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmpxx_gy4g5.js:44\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_count_stack = [];\n    var paren_count_stack_index = 0;\n    var paren_count_stack_top = 0;\n    var paren_count_stack_top_index = 0;\n    var paren_count_stack_top_value = 0;\n    var paren_count_stack_top_value_index = 0;\n    var paren_count_stack_top_value_value = 0;\n    var paren_count_stack_top_value_value_index = 0;\n    var paren_count_stack_top_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_index = 0;\n    var paren_count_stack_top_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_index = 0;\n    var paren_count_stack_top_value_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_value_index = 0;\n    var paren_count_stack_top_value_value_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_index = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_index = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_value_index = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_value_value = 0;\n    var paren_count_stack_top_value\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmpnmlcw7i1.js:42\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var max_nesting = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmp7pu2b82v.js:90\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_count_stack = [];\n    var paren_count_stack_index = 0;\n    var paren_count_stack_top = 0;\n    var paren_count_stack_top_index = 0;\n    var paren_count_stack_top_value = 0;\n    var paren_count_stack_top_value_index = 0;\n    var paren_count_stack_top_value_value = 0;\n    var paren_count_stack_top_value_value_index = 0;\n    var paren_count_stack_top_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_index = 0;\n    var paren_count_stack_top_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_index = 0;\n    var paren_count_stack_top_value_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_value_index = 0;\n    var paren_count_stack_top_value_value_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_index = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_index = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_value_index = 0;\n    var paren_count_stack_top_value_value_value_value_value_value_value_value_value = 0;\n    var paren_count_stack_top_value_value_value_value_value_value\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmp92j8bg9f.js:41\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var result = [];\n    var stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_start = 0;\n    var paren_end = 0;\n    var paren_string = paren_string.split(\" \");\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] == \"(\"){\n            paren_count++;\n            stack.push(paren_count);\n            paren_level = stack.length - 1;\n            paren_start = i;\n        }\n        else if(paren_string[i] == \")\"){\n            paren_count--;\n            if(paren_count == 0){\n                paren_end = i;\n                result.push(paren_level);\n            }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpo7urc08s.js:37:10)\n    at Object.<anonymous> (/tmp/tmpo7urc08s.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n            if(paren_stack.length > 0){\n                var top_index = paren_stack.pop();\n                if(paren_stack.length > 0){\n                    var second_top_index = paren_stack.pop();\n                    if(top_index > second_top_index){\n                        console.log(top_index);\n                    }\n                    else{\n                        console.log(second_top_index);\n                    }\n                }\n                else{\n                    console.log(top_index);\n                }\n            }\n            else{\n                console.log(paren_count);\n            }\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "1\n1\n0\n2\n0\n0\n0\n2\n0\n1\n1\n0\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpw3i2_5b1.js:44:10)\n    at Object.<anonymous> (/tmp/tmpw3i2_5b1.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var paren_count = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                paren_count++;\n            }\n            else if(paren_group[j] == \")\"){\n                paren_count--;\n            }\n        }\n        if(paren_count > max_nesting){\n            max_nesting = paren_count;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpe4mrolb6.js:32:10)\n    at Object.<anonymous> (/tmp/tmpe4mrolb6.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_count_stack = [];\n    var max_nesting = 0;\n    var max_nesting_stack = [];\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var aa = 0;\n    var ab = 0;\n    var ac = 0;\n    var ad = 0;\n    var ae = 0;\n    var af = 0;\n    var ag = 0;\n    var ah = 0;\n    var ai = 0;\n    var aj = 0;\n    var ak = 0;\n    var al = 0;\n    var am = 0;\n    var an = 0;\n    var ao = 0;\n    var ap = 0;\n    var aq = 0;\n    var ar = 0;\n    var as = 0;\n    var at = 0;\n    var au = 0;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmp7h_iglry.js:88\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var max_nesting = 0;\n    var paren_string_length = paren_string.length;\n    for(var i = 0; i < paren_string_length; i++){\n        if(paren_string[i] === '('){\n            paren_stack.push(paren_count);\n            paren_count++;\n        }\n        else if(paren_string[i] === ')'){\n            paren_count--;\n            if(paren_count < 0){\n                console.log(\"Error: Invalid parentheses string\");\n                return;\n            }\n            if(paren_count > max_nesting){\n                max_nesting = paren_count;\n            }\n        }\n    }\n    console.log(max_nesting);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "2\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpgha26ks4.js:35:10)\n    at Object.<anonymous> (/tmp/tmpgha26ks4.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    var current_nesting = 0;\n    var current_nesting_index = 0;\n    var current_paren_string = \"\";\n    var current_paren_string_index = 0;\n    var current_paren_string_length = 0;\n    var current_paren_string_length_index = 0;\n    var current_paren_string_length_length = 0;\n    var current_paren_string_length_length_index = 0;\n    var current_paren_string_length_length_length = 0;\n    var current_paren_string_length_length_length_index = 0;\n    var current_paren_string_length_length_length_length = 0;\n    var current_paren_string_length_length_length_length_index = 0;\n    var current_paren_string_length_length_length_length_length = 0;\n    var current_paren_string_length_length_length_length_length_index = 0;\n    var current_paren_string_length_length_length_length_length_length = 0;\n    var current_paren_string_length_length_length_length_length_length_index = 0;\n    var current_paren_string_length_length_length_length_length_length_length = 0;\n    var current_paren_string_length_length_length_length_length_length_length_index = 0;\n    var current_paren_string_length_length_length_length_length_length_length_length = 0;\n    var current_paren_string_length_length_length_length_length_length_length_length_index = 0;\n    var current_paren_string_length_length_length_length_length_length_length_length_length = 0;\n    var current_paren_string_length_length_length_length_length_length_length_length_length_index = 0;\n    var current_paren_string_length_length_length_length_length_length_length_length_length_length = 0\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmpc1uwbp2x.js:44\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_count = 0;\n    var paren_stack = [];\n    var result = [];\n    var paren_level = 0;\n    var paren_count = 0;\n    var paren_stack = [];\n    var result = [];\n    var paren_level = 0;\n    var paren_count = 0;\n    var paren_stack = [];\n    var result = [];\n    var paren_level = 0;\n    var paren_count = 0;\n    var paren_stack = [];\n    var result = [];\n    var paren_level = 0;\n    var paren_count = 0;\n    var paren_stack = [];\n    var result = [];\n    var paren_level = 0;\n    var paren_count = 0;\n    var paren_stack = [];\n    var result = [];\n    var paren_level = 0;\n    var paren_count = 0;\n    var paren_stack = [];\n    var result = [];\n    var paren_level = 0;\n    var paren_count = 0;\n    var paren_stack = [];\n    var result = [];\n    var paren_level = 0;\n    var paren_count = 0;\n    var paren_stack = [];\n    var result = [];\n    var paren_level = 0;\n    var paren_count = 0;\n    var paren_stack = [];\n    var result = [];\n    var paren_level = 0;\n    var paren_count = 0;\n    var paren_stack = [];\n    var result = [];\n    var paren_level = 0;\n    var paren_count = 0;\n    var paren_stack = [];\n    var result = [];\n    var paren_level = 0;\n    var paren_count = 0;\n    var paren_stack = [];\n    var result = [];\n    var paren_level = 0;\n    var paren_count = 0;\n    var paren_stack = [];\n    var result = [];\n    var paren_level = 0;\n    var paren_count = 0;\n    var paren_stack = [];\n    var result\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmpxlazlg1v.js:76\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_count = 0;\n    var paren_stack = [];\n    var output = [];\n    for(var i=0; i<paren_string.length; i++){\n        if(paren_string[i] == '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n        }\n        else if(paren_string[i] == ')'){\n            paren_count--;\n            if(paren_count == 0){\n                output.push(paren_stack.pop());\n            }\n        }\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp1gwws60b.js:30:10)\n    at Object.<anonymous> (/tmp/tmp1gwws60b.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var max_nesting = 0;\n    var max_nesting_index = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var aa = 0;\n    var ab = 0;\n    var ac = 0;\n    var ad = 0;\n    var ae = 0;\n    var af = 0;\n    var ag = 0;\n    var ah = 0;\n    var ai = 0;\n    var aj = 0;\n    var ak = 0;\n    var al = 0;\n    var am = 0;\n    var an = 0;\n    var ao = 0;\n    var ap = 0;\n    var aq = 0;\n    var ar = 0;\n    var as = 0;\n    var at = 0;\n    var au = 0;\n    var av = 0;\n    var aw\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmphag4zdu7.js:88\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var paren_count = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                paren_count++;\n            }\n            else if(paren_group[j] == \")\"){\n                paren_count--;\n            }\n        }\n        if(paren_count > max_nesting){\n            max_nesting = paren_count;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpe4mrolb6.js:32:10)\n    at Object.<anonymous> (/tmp/tmpe4mrolb6.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var paren_count = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                paren_count++;\n            }\n            else if(paren_group[j] == \")\"){\n                paren_count--;\n            }\n        }\n        if(paren_count > max_nesting){\n            max_nesting = paren_count;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpe4mrolb6.js:32:10)\n    at Object.<anonymous> (/tmp/tmpe4mrolb6.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i=0; i<paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var paren_count = 0;\n        for(var j=0; j<paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                paren_count++;\n            }\n            else if(paren_group[j] == \")\"){\n                paren_count--;\n            }\n        }\n        if(paren_count > max_nesting){\n            max_nesting = paren_count;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpqum54o4i.js:32:10)\n    at Object.<anonymous> (/tmp/tmpqum54o4i.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    var paren_string_index = 0;\n    var paren_string_char = \"\";\n    var paren_string_char_index = 0;\n    while(paren_string_index < paren_string_length){\n        paren_string_char = paren_string[paren_string_index];\n        if(paren_string_char === \"(\"){\n            paren_count += 1;\n            paren_stack.push(paren_count);\n            paren_level = paren_stack[paren_stack.length - 1];\n        }\n        else if(paren_string_char === \")\"){\n            paren_count -= 1;\n            if(paren_count === 0){\n                paren_level = paren_stack.pop();\n            }\n        }\n        paren_string_index += 1;\n    }\n    return paren_stack;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  1,\n  2,\n  1,\n  2,\n  3,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_n3yj6v0.js:37:10)\n    at Object.<anonymous> (/tmp/tmp_n3yj6v0.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 1, 2,\n    1, 2, 3, 2\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_count = 0;\n    var paren_stack = [];\n    var paren_count_stack = [];\n    var paren_stack_count = 0;\n    var paren_stack_count_stack = [];\n    var paren_stack_count_stack_count = 0;\n    var paren_stack_count_stack_count_stack = [];\n    var paren_stack_count_stack_count_stack_count = 0;\n    var paren_stack_count_stack_count_stack_count_stack = [];\n    var paren_stack_count_stack_count_stack_count_stack_count = 0;\n    var paren_stack_count_stack_count_stack_count_stack_count_stack = [];\n    var paren_stack_count_stack_count_stack_count_stack_count_stack_count = 0;\n    var paren_stack_count_stack_count_stack_count_stack_count_stack_count_stack = [];\n    var paren_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count = 0;\n    var paren_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack = [];\n    var paren_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count = 0;\n    var paren_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack = [];\n    var paren_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count = 0;\n    var paren_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack = [];\n    var paren_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count = 0;\n    var paren_stack_count_stack_count_stack\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "/tmp/tmpq1u5rvni.js:38\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var nesting = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                nesting++;\n            }\n            else if(paren_group[j] == \")\"){\n                nesting--;\n            }\n        }\n        if(nesting > max_nesting){\n            max_nesting = nesting;\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpnersyeus.js:32:10)\n    at Object.<anonymous> (/tmp/tmpnersyeus.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var nesting = paren_group.match(/\\(([^()]*)\\)/g);\n        if(nesting){\n            max_nesting = Math.max(max_nesting, nesting.length);\n        }\n    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp4h295vo8.js:24:10)\n    at Object.<anonymous> (/tmp/tmp4h295vo8.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_string_length = paren_string.length;\n    for (var i = 0; i < paren_string_length; i++){\n        if (paren_string[i] === '('){\n            paren_count++;\n            paren_stack.push(paren_count);\n            paren_level++;\n        }\n        else if (paren_string[i] === ')'){\n            paren_count--;\n            if (paren_count === 0){\n                paren_level--;\n                if (paren_level === 0){\n                    var max_level = Math.max.apply(null, paren_stack);\n                    console.log(max_level);\n                }\n            }\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpa79pt56d.js:35:10)\n    at Object.<anonymous> (/tmp/tmpa79pt56d.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    }
  ]
}