name: HumanEval_26_remove_duplicates
language: js
prompt: "//From an array of integers, remove all elements that occur more than once.\n\
  // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
  \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1,\
  \ 4, 5]);\n}\n\ntest();"
completions: ["  var new_numbers = [];\n  for (var i = 0; i < numbers.length; i++)\
    \ {\n    var num = numbers[i];\n    if (new_numbers.indexOf(num) === -1) {\n \
    \     new_numbers.push(num);\n    }\n  }\n  return new_numbers;\n}\n", "  var\
    \ new_numbers = [];\n  for(var i = 0; i < numbers.length; i++){\n    if(new_numbers.indexOf(numbers[i])\
    \ == -1){\n      new_numbers.push(numbers[i]);\n    }\n  }\n  return new_numbers;\n\
    }\n", "  var result = [];\n  for (var i = 0; i < numbers.length; i++) {\n    if\
    \ (result.indexOf(numbers[i]) == -1) {\n      result.push(numbers[i]);\n    }\n\
    \  }\n  return result;\n}\n", "  var new_numbers = [];\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    var num = numbers[i];\n    if(new_numbers.indexOf(num) == -1){\n\
    \      new_numbers.push(num);\n    }\n  }\n  return new_numbers;\n}\n", "    var\
    \ result = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(result.indexOf(numbers[i])\
    \ == -1){\n            result.push(numbers[i]);\n        }\n    }\n    return\
    \ result;\n}\n", "  var new_numbers = [];\n  for (var i = 0; i < numbers.length;\
    \ i++) {\n    var number = numbers[i];\n    if (new_numbers.indexOf(number) ==\
    \ -1) {\n      new_numbers.push(number);\n    }\n  }\n  return new_numbers;\n\
    }\n", "    var new_numbers = [];\n    for (var i = 0; i < numbers.length; i++)\
    \ {\n        var num = numbers[i];\n        if (new_numbers.indexOf(num) == -1)\
    \ {\n            new_numbers.push(num);\n        }\n    }\n    return new_numbers;\n\
    }\n", "  var new_numbers = [];\n  for(var i = 0; i < numbers.length; i++){\n \
    \   if(new_numbers.indexOf(numbers[i]) == -1){\n      new_numbers.push(numbers[i]);\n\
    \    }\n  }\n  return new_numbers;\n}\n", "  var output = [];\n  for(var i = 0;\
    \ i < numbers.length; i++){\n    var num = numbers[i];\n    if(output.indexOf(num)\
    \ === -1){\n      output.push(num);\n    }\n  }\n  return output;\n}\n", "  var\
    \ new_numbers = [];\n  for(var i = 0; i < numbers.length; i++){\n    var found\
    \ = false;\n    for(var j = 0; j < new_numbers.length; j++){\n      if(numbers[i]\
    \ === new_numbers[j]){\n        found = true;\n        break;\n      }\n    }\n\
    \    if(!found){\n      new_numbers.push(numbers[i]);\n    }\n  }\n  return new_numbers;\n\
    }\n", "    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n  \
    \      var current = numbers[i];\n        var found = false;\n        for(var\
    \ j = 0; j < result.length; j++){\n            if(result[j] === current){\n  \
    \              found = true;\n                break;\n            }\n        }\n\
    \        if(!found){\n            result.push(current);\n        }\n    }\n  \
    \  return result;\n}\n", "  var result = [];\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    if(result.indexOf(numbers[i]) == -1){\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  var result = [];\n  for (var i = 0; i\
    \ < numbers.length; i++) {\n    if (result.indexOf(numbers[i]) == -1) {\n    \
    \  result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "    var new_numbers\
    \ = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(new_numbers.indexOf(numbers[i])\
    \ == -1){\n            new_numbers.push(numbers[i]);\n        }\n    }\n    return\
    \ new_numbers;\n}\n", "  var result = [];\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    if(result.indexOf(numbers[i]) == -1){\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  var output = [];\n  for (var i = 0; i\
    \ < numbers.length; i++) {\n    if (output.indexOf(numbers[i]) === -1) {\n   \
    \   output.push(numbers[i]);\n    }\n  }\n  return output;\n}\n", "  var new_numbers\
    \ = [];\n  for(var i=0; i<numbers.length; i++){\n    if(new_numbers.indexOf(numbers[i])\
    \ == -1){\n      new_numbers.push(numbers[i]);\n    }\n  }\n  return new_numbers;\n\
    }\n", "  var new_numbers = [];\n  for (var i = 0; i < numbers.length; i++){\n\
    \    if (new_numbers.indexOf(numbers[i]) === -1){\n      new_numbers.push(numbers[i]);\n\
    \    }\n  }\n  return new_numbers;\n}\n", "    var i, j, k, count = 0;\n    for\
    \ (i = 0; i < numbers.length; i++) {\n        for (j = i + 1; j < numbers.length;\
    \ j++) {\n            if (numbers[i] === numbers[j]) {\n                count++;\n\
    \                if (count > 1) {\n                    for (k = j; k < numbers.length\
    \ - 1; k++) {\n                        numbers[k] = numbers[k + 1];\n        \
    \            }\n                    numbers.pop();\n                }\n      \
    \      }\n        }\n    }\n    return numbers;\n}\n", "    var i, j, len = numbers.length,\n\
    \        result = [];\n\n    for (i = 0; i < len; i++) {\n        if (result.indexOf(numbers[i])\
    \ === -1) {\n            result.push(numbers[i]);\n        }\n    }\n\n    return\
    \ result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
