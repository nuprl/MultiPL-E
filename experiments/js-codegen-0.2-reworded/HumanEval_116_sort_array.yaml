name: HumanEval_116_sort_array
language: js
prompt: "//In this Kata, you have to sort an array of non-negative integers according\
  \ to\n// number of ones in their binary representation in ascending order.\n// For\
  \ similar number of ones, sort based on decimal value.\n// It must be implemented\
  \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
  \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
  // [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
  \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1,\
  \ 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
  \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
  \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4,\
  \ 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2,\
  \ 4, 8, 16, 32]);\n}\n\ntest();"
completions: ["    var sorted = arr.sort(function(a, b) {\n        var a_ones = 0,\
    \ b_ones = 0;\n        for (var i = 0; i < arr.length; i++) {\n            if\
    \ (arr[i] === 1) {\n                a_ones++;\n            }\n            if (arr[i]\
    \ === 0) {\n                b_ones++;\n            }\n        }\n        if (a_ones\
    \ === b_ones) {\n            return a - b;\n        }\n        return a_ones -\
    \ b_ones;\n    });\n    return sorted;\n}\n<|endoftext|><|javascript|>/*\n * Copyright\
    \ (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\
    \ See License.txt in the project root for\n * license information.\n *\n * Code\
    \ generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect\
    \ behavior and will be lost if the code is\n * regenerated.\n */\n\n'use strict';\n\
    \nconst models = require('./index');\n", "    var sorted = arr.sort(function(a,\
    \ b){\n        var a_ones = count_ones(a);\n        var b_ones = count_ones(b);\n\
    \        if(a_ones === b_ones){\n            return a - b;\n        }\n      \
    \  return a_ones - b_ones;\n    });\n    return sorted;\n}\n", "    var sorted_arr\
    \ = [];\n    var arr_len = arr.length;\n    for (var i = 0; i < arr_len; i++)\
    \ {\n        var num = arr[i];\n        var binary = num.toString(2);\n      \
    \  var ones = binary.split('').filter(function(e){return e === '1'});\n      \
    \  var sorted_ones = ones.sort().join('');\n        var decimal = parseInt(sorted_ones,\
    \ 2);\n        sorted_arr.push(decimal);\n    }\n    return sorted_arr;\n}\n",
  "    var sorted_arr = [];\n    var binary_arr = [];\n    var decimal_arr = [];\n\
    \    var binary_len = 0;\n    var decimal_len = 0;\n    for(var i = 0; i < arr.length;\
    \ i++){\n        binary_arr[binary_len] = arr[i] % 2;\n        binary_len++;\n\
    \        if(binary_len === 8){\n            binary_len = 0;\n        }\n     \
    \   decimal_arr[decimal_len] = arr[i];\n        decimal_len++;\n        if(decimal_len\
    \ === 10){\n            decimal_len = 0;\n        }\n    }\n    for(var i = 0;\
    \ i < binary_len; i++){\n        for(var j = 0; j < decimal_len; j++){\n     \
    \       if(binary_arr[i] === 1 && decimal_arr[j] === 1){\n                sorted_arr.push(decimal_arr[j]);\n\
    \            }\n            if(binary_arr[i] === 1 && decimal_arr[j] === 0){\n\
    \                sorted_arr.push(decimal_arr[j]);\n            }\n           \
    \ if(binary_arr[i] === 0 && decimal_arr[j] === 1){\n                sorted_arr.push(decimal_arr[j]);\n\
    \            }\n            if(binary_arr[i] === 0 && decimal_arr[j] === 0){\n\
    \                sorted_arr.push(decimal_arr[j]);\n            }\n        }\n\
    \    }\n    return sorted_arr;\n}\n", "    var sorted_arr = [];\n    var binary_arr\
    \ = [];\n    var decimal_arr = [];\n    var binary_arr_length = 0;\n    var decimal_arr_length\
    \ = 0;\n    var binary_arr_index = 0;\n    var decimal_arr_index = 0;\n    var\
    \ binary_arr_value = 0;\n    var decimal_arr_value = 0;\n    var binary_arr_value_length\
    \ = 0;\n    var decimal_arr_value_length = 0;\n    var binary_arr_value_index\
    \ = 0;\n    var decimal_arr_value_index = 0;\n    var binary_arr_value_value =\
    \ 0;\n    var decimal_arr_value_value = 0;\n    var binary_arr_value_value_length\
    \ = 0;\n    var decimal_arr_value_value_length = 0;\n    var binary_arr_value_value_index\
    \ = 0;\n    var decimal_arr_value_value_index = 0;\n    var binary_arr_value_value_value\
    \ = 0;\n    var decimal_arr_value_value_value = 0;\n    var binary_arr_value_value_value_length\
    \ = 0;\n    var decimal_arr_value_value_value_length = 0;\n    var binary_arr_value_value_value_index\
    \ = 0;\n    var decimal_arr_value_value_value_index = 0;\n    for(var i = 0; i\
    \ < arr.length; i++){\n        binary_arr_value = arr[i];\n        binary_arr_value_length\
    \ = binary_arr_value.toString(2).length;\n        binary_arr_value_index = 0;\n\
    \        binary_arr_value_value = 0;\n        while(binary_arr_value_index < binary_arr_value_length){\n\
    \            binary_arr_value_value = binary_arr_value.toString(2).charAt(binary_arr_value_index);\n\
    \            binary_arr_value_value_length = binary_arr_value_value.length;\n\
    \            binary_arr_value_value_index = 0;\n            while(binary_arr_value_value_index\
    \ < binary_arr_value_value_", "    var sorted_arr = [];\n    var sorted_arr_count\
    \ = 0;\n    var arr_length = arr.length;\n    for(var i=0; i<arr_length; i++){\n\
    \        var arr_value = arr[i];\n        var arr_binary = arr_value.toString(2);\n\
    \        var arr_ones = arr_binary.split(\"\").filter(function(e){return e ===\
    \ \"1\"});\n        var arr_ones_count = arr_ones.length;\n        if(arr_ones_count\
    \ === 1){\n            sorted_arr[sorted_arr_count] = arr_value;\n           \
    \ sorted_arr_count++;\n        }\n        else if(arr_ones_count > 1){\n     \
    \       var arr_ones_decimal = arr_ones.join(\"\").split(\"\").reduce(function(a,b){return\
    \ a+b});\n            sorted_arr[sorted_arr_count] = arr_ones_decimal;\n     \
    \       sorted_arr_count++;\n        }\n    }\n    return sorted_arr.slice(0,\
    \ sorted_arr_count);\n}\n", "    var sorted_arr = [];\n    var sorted_arr_count\
    \ = 0;\n    for(var i = 0; i < arr.length; i++){\n        var binary_arr = arr[i].toString(2);\n\
    \        var binary_arr_count = 0;\n        for(var j = 0; j < binary_arr.length;\
    \ j++){\n            if(binary_arr[j] === '1'){\n                binary_arr_count++;\n\
    \            }\n        }\n        if(binary_arr_count === sorted_arr_count){\n\
    \            sorted_arr[sorted_arr_count] = arr[i];\n            sorted_arr_count++;\n\
    \        }\n        else if(binary_arr_count > sorted_arr_count){\n          \
    \  sorted_arr[sorted_arr_count] = arr[i];\n            sorted_arr_count++;\n \
    \       }\n        else{\n            for(var k = sorted_arr_count; k > binary_arr_count;\
    \ k--){\n                sorted_arr[k] = sorted_arr[k-1];\n            }\n   \
    \         sorted_arr[binary_arr_count] = arr[i];\n            sorted_arr_count++;\n\
    \        }\n    }\n    return sorted_arr;\n}\n", "    var sorted = arr.sort(function(a,\
    \ b){\n        var a_ones = count_ones(a);\n        var b_ones = count_ones(b);\n\
    \        if(a_ones === b_ones){\n            return a - b;\n        }\n      \
    \  return a_ones - b_ones;\n    });\n    return sorted;\n}\n", "  var sorted =\
    \ arr.sort(function(a, b){\n    var a_ones = a.toString(2).match(/1/g),\n    \
    \    b_ones = b.toString(2).match(/1/g);\n    if (a_ones.length === b_ones.length)\
    \ {\n      return a - b;\n    } else {\n      return a_ones.length - b_ones.length;\n\
    \    }\n  });\n  return sorted;\n}\n", "  var sorted_arr = arr.sort(function(a,\
    \ b){\n    var a_ones = 0, b_ones = 0;\n    var a_decimal = 0, b_decimal = 0;\n\
    \    for (var i = 0; i < arr.length; i++) {\n      if (arr[i] === 1) {\n     \
    \   a_ones++;\n      }\n      if (arr[i] === 0) {\n        b_ones++;\n      }\n\
    \    }\n    a_decimal = a_ones * Math.pow(2, arr.length - 1);\n    b_decimal =\
    \ b_ones * Math.pow(2, arr.length - 1);\n    return a_decimal - b_decimal;\n \
    \ });\n  return sorted_arr;\n}\n", "    var sorted_arr = [];\n    var sorted_arr_count\
    \ = 0;\n    for (var i = 0; i < arr.length; i++) {\n        var binary_arr = arr[i].toString(2);\n\
    \        var binary_arr_count = 0;\n        for (var j = 0; j < binary_arr.length;\
    \ j++) {\n            if (binary_arr[j] === '1') {\n                binary_arr_count++;\n\
    \            }\n        }\n        if (binary_arr_count === sorted_arr_count)\
    \ {\n            sorted_arr[sorted_arr_count] = arr[i];\n            sorted_arr_count++;\n\
    \        } else if (binary_arr_count > sorted_arr_count) {\n            sorted_arr[sorted_arr_count]\
    \ = arr[i];\n            sorted_arr_count++;\n        } else {\n            for\
    \ (var k = sorted_arr_count; k < binary_arr_count; k++) {\n                sorted_arr[k]\
    \ = arr[i];\n            }\n            sorted_arr_count = binary_arr_count;\n\
    \        }\n    }\n    return sorted_arr;\n}\n", "    var sorted = arr.sort(function(a,\
    \ b){\n        return a - b;\n    });\n    return sorted;\n}\n", "    var sorted\
    \ = arr.sort(function(a, b){\n        var a_ones = count_ones(a);\n        var\
    \ b_ones = count_ones(b);\n        if(a_ones === b_ones){\n            return\
    \ a - b;\n        }\n        return a_ones - b_ones;\n    });\n    return sorted;\n\
    }\n", "  var sorted_arr = arr.sort(function(a, b){\n    var a_ones = 0, b_ones\
    \ = 0;\n    while(a > 0){\n      a_ones += a % 2;\n      a /= 2;\n    }\n    while(b\
    \ > 0){\n      b_ones += b % 2;\n      b /= 2;\n    }\n    if(a_ones === b_ones){\n\
    \      return a - b;\n    }\n    return a_ones - b_ones;\n  });\n  return sorted_arr;\n\
    }\n<|endoftext|><|javascript|>var gulp = require('gulp');\nvar sass = require('gulp-sass');\n\
    var concat = require('gulp-concat');\nvar uglify = require('gulp-uglify');\nvar\
    \ rename = require('gulp-rename');\nvar sourcemaps = require('gulp-sourcemaps');\n\
    var autoprefixer = require('gulp-autoprefixer');\nvar browserSync = require('browser-sync').create();\n\
    var del = require('del');\nvar runSequence = require('run-sequence');\nvar plumber\
    \ = require('gulp-plumber');\n\nvar paths = {\n  sass: ['./scss/**/*.scss'],\n\
    \  js: ['./js/**/*.js'],\n  css: ['./css/**/*.css'],\n  dest: './dist'\n};\n\n\
    gulp.task('sass', function() {\n  return gulp.src('./scss/ionic.app.scss')\n \
    \   .pipe(plumber())\n    .pipe(sourcemaps.init())\n    .pipe(sass())\n    .pipe(autoprefixer({\n\
    \      browsers: ['last 2 versions'],\n      cascade: false\n    }))\n    .pipe(concat('ionic.app.css'))\n\
    \    .pipe(sourcemaps.write())\n    .pipe(gulp.dest('./css'))\n    .pipe(browserSync.reload({\n\
    \      stream: true\n    }));\n});\n\ngulp.task('js', function() {\n  return gulp.src",
  "  var sorted_arr = [];\n  for (var i = 0; i < arr.length; i++) {\n    var binary_value\
    \ = arr[i].toString(2);\n    var decimal_value = parseInt(binary_value, 2);\n\
    \    sorted_arr.push({\n      binary_value: binary_value,\n      decimal_value:\
    \ decimal_value\n    });\n  }\n  sorted_arr.sort(function(a, b) {\n    if (a.decimal_value\
    \ > b.decimal_value) {\n      return 1;\n    }\n    if (a.decimal_value < b.decimal_value)\
    \ {\n      return -1;\n    }\n    return 0;\n  });\n  return sorted_arr;\n}\n",
  "    var sorted_arr = [];\n    for (var i = 0; i < arr.length; i++) {\n        var\
    \ binary_arr = arr[i].toString(2);\n        var decimal_arr = arr[i].toString();\n\
    \        var binary_arr_length = binary_arr.length;\n        var decimal_arr_length\
    \ = decimal_arr.length;\n        var ones_count = 0;\n        for (var j = 0;\
    \ j < binary_arr_length; j++) {\n            if (binary_arr[j] === '1') {\n  \
    \              ones_count++;\n            }\n        }\n        var ones_count_decimal\
    \ = ones_count.toString();\n        if (ones_count_decimal === '0') {\n      \
    \      sorted_arr.push(arr[i]);\n        } else {\n            if (ones_count_decimal\
    \ === '1') {\n                sorted_arr.push(arr[i]);\n            } else {\n\
    \                if (ones_count_decimal === '2') {\n                    sorted_arr.push(arr[i]);\n\
    \                } else {\n                    if (ones_count_decimal === '3')\
    \ {\n                        sorted_arr.push(arr[i]);\n                    } else\
    \ {\n                        if (ones_count_decimal === '4') {\n             \
    \               sorted_arr.push(arr[i]);\n                        } else {\n \
    \                           if (ones_count_decimal === '5') {\n              \
    \                  sorted_arr.push(arr[i]);\n                            } else\
    \ {\n                                if (ones_count_decimal === '6') {\n     \
    \                               sorted_arr.push(arr[i]);\n                   \
    \             } else {\n                                    if (ones_count_decimal\
    \ === '7') {\n                                        sorted_arr.push(arr[i]);\n\
    \                                    } else {\n                              \
    \          if (ones_count_decimal === '8') {\n                               \
    \             sorted_arr.push(arr[i]);\n                                     \
    \   } else {\n                                            if (ones_count_decimal\
    \ === '9') {\n                                                sorted_arr.push(arr[i]);\n\
    \                                            } else {\n                      \
    \         ", "    var sorted = arr.sort(function(a, b){\n        var a_ones =\
    \ count_ones(a);\n        var b_ones = count_ones(b);\n        if(a_ones === b_ones){\n\
    \            return a - b;\n        }\n        return a_ones - b_ones;\n    });\n\
    \    return sorted;\n}\n", "    var sorted_arr = [];\n    for (var i = 0; i <\
    \ arr.length; i++) {\n        var binary_str = arr[i].toString(2);\n        var\
    \ decimal_str = arr[i].toString();\n        var binary_len = binary_str.length;\n\
    \        var decimal_len = decimal_str.length;\n        if (binary_len > decimal_len)\
    \ {\n            var ones = binary_len - decimal_len;\n            var ones_str\
    \ = binary_str.substr(ones);\n            var ones_num = parseInt(ones_str, 2);\n\
    \            sorted_arr.push(ones_num);\n        }\n        else {\n         \
    \   sorted_arr.push(parseInt(decimal_str, 10));\n        }\n    }\n    sorted_arr.sort(function(a,\
    \ b) {\n        if (a > b) {\n            return 1;\n        }\n        else if\
    \ (a < b) {\n            return -1;\n        }\n        else {\n            return\
    \ 0;\n        }\n    });\n    return sorted_arr;\n}\n", "  return arr.sort(function(a,\
    \ b){\n    var a_ones = count_ones(a);\n    var b_ones = count_ones(b);\n    if(a_ones\
    \ === b_ones){\n      return a - b;\n    }\n    return a_ones - b_ones;\n  });\n\
    }\n", "    var sorted_arr = [];\n    var arr_len = arr.length;\n    for (var i\
    \ = 0; i < arr_len; i++) {\n        var num = arr[i];\n        var binary = num.toString(2);\n\
    \        var ones = binary.match(/1/g);\n        var decimal = parseInt(ones.length);\n\
    \        sorted_arr.push(decimal);\n    }\n    sorted_arr.sort(function(a, b)\
    \ {\n        return a - b;\n    });\n    return sorted_arr;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
