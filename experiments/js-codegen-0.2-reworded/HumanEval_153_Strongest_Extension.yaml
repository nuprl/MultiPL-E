name: HumanEval_153_Strongest_Extension
language: js
prompt: "//You will be given the name of a class (a string) and an array of extensions.\n\
  // The extensions are to be used to load additional classes to the class. The\n\
  // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n// You should find the strongest extension and return a string in this \n//\
  \ format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
  \ with the same strength, you should\n// choose the one that comes first in the\
  \ array.\n// For example, if you are given \"Slices\" as the class and an array\
  \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension('my_class',\
  \ ['AA', 'Be', 'CC'])\n// 'my_class.AA'\nfunction Strongest_Extension(class_name,\
  \ extensions){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"\
  niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
  );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
  , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
  );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"\
  WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\", \"91245\"\
  ]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\"\
  );\n}\n\ntest();"
completions: ["    var max_strength = 0;\n    var max_extension = null;\n    for(var\
    \ i = 0; i < extensions.length; i++){\n        var strength = 0;\n        var\
    \ extension = extensions[i];\n        var cap = 0;\n        var sm = 0;\n    \
    \    for(var j = 0; j < extension.length; j++){\n            if(extension[j] ===\
    \ 'A' || extension[j] === 'a'){\n                cap++;\n            }\n     \
    \       else if(extension[j] === 'S' || extension[j] === 's'){\n             \
    \   sm++;\n            }\n        }\n        strength = cap - sm;\n        if(strength\
    \ > max_strength){\n            max_strength = strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + '.' + max_extension;\n\
    }\n", "    var strength = 0;\n    var extension_name = '';\n    for (var i = 0;\
    \ i < extensions.length; i++) {\n        var extension = extensions[i];\n    \
    \    var cap = extension.match(/[A-Z]/g);\n        var sm = extension.match(/[a-z]/g);\n\
    \        var strength_of_extension = cap.length - sm.length;\n        if (strength_of_extension\
    \ > strength) {\n            strength = strength_of_extension;\n            extension_name\
    \ = extension;\n        }\n    }\n    return class_name + '.' + extension_name;\n\
    }\n", "    var strength = 0;\n    var extension = '';\n    for(var i = 0; i <\
    \ extensions.length; i++){\n        var ext = extensions[i];\n        var cap\
    \ = ext.match(/[A-Z]/g);\n        var sm = ext.match(/[a-z]/g);\n        if(cap.length\
    \ > strength){\n            strength = cap.length - sm.length;\n            extension\
    \ = ext;\n        }\n    }\n    return class_name + '.' + extension;\n}\n", " \
    \   var strength = 0;\n    var extension = '';\n    var i = 0;\n    for(i = 0;\
    \ i < extensions.length; i++){\n        var extension_name = extensions[i];\n\
    \        var extension_strength = 0;\n        var cap = 0;\n        var sm = 0;\n\
    \        var name = extension_name.toLowerCase();\n        for(var j = 0; j <\
    \ name.length; j++){\n            if(name[j] === name[j].toUpperCase()){\n   \
    \             cap++;\n            }\n            else{\n                sm++;\n\
    \            }\n        }\n        extension_strength = cap - sm;\n        if(extension_strength\
    \ > strength){\n            strength = extension_strength;\n            extension\
    \ = extension_name;\n        }\n    }\n    return class_name + '.' + extension;\n\
    }\n", "  var strength = 0;\n  var extension = '';\n  var extension_index = 0;\n\
    \  var extension_name = '';\n  var extension_name_index = 0;\n  var extension_name_length\
    \ = 0;\n  var extension_name_length_index = 0;\n  var extension_name_length_length\
    \ = 0;\n  var extension_name_length_length_index = 0;\n  var extension_name_length_length_length\
    \ = 0;\n  var extension_name_length_length_length_index = 0;\n  var extension_name_length_length_length_length\
    \ = 0;\n  var extension_name_length_length_length_length_index = 0;\n  var extension_name_length_length_length_length_length\
    \ = 0;\n  var extension_name_length_length_length_length_length_index = 0;\n \
    \ var extension_name_length_length_length_length_length_length = 0;\n  var extension_name_length_length_length_length_length_length_index\
    \ = 0;\n  var extension_name_length_length_length_length_length_length_length\
    \ = 0;\n  var extension_name_length_length_length_length_length_length_length_index\
    \ = 0;\n  var extension_name_length_length_length_length_length_length_length_length\
    \ = 0;\n  var extension_name_length_length_length_length_length_length_length_length_index\
    \ = 0;\n  var extension_name_length_length_length_length_length_length_length_length_length\
    \ = 0;\n  var extension_name_length_length_length_length_length_length_length_length_length_index\
    \ = 0;\n  var extension_name_length_length_length_length_length_length_length_length_length_length\
    \ = 0;\n  var extension_name_length_length_length_length_length_length_length_length_length_length_index\
    \ = 0;\n  var extension_name_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0;\n  var extension_name_length_length_length_length_length_length_", "  \
    \  var strength = 0;\n    var extension = '';\n    var i = 0;\n    var j = 0;\n\
    \    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n\
    \    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n\
    \    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n\
    \    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n\
    \    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n\
    \    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n\
    \    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n\
    \    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n\
    \    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n\
    \    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n\
    \    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n\
    \    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n\
    \    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n\
    \    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    ", "    var\
    \ i, len, ext, ext_str, strength;\n    var class_name_arr = class_name.split('.');\n\
    \    var class_name_arr_len = class_name_arr.length;\n    var ext_arr = [];\n\
    \    for(i = 0, len = extensions.length; i < len; i++){\n        ext = extensions[i];\n\
    \        ext_arr.push(ext);\n    }\n    ext_arr.sort(function(a, b){\n       \
    \ return a.length - b.length;\n    });\n    for(i = 0, len = ext_arr.length; i\
    \ < len; i++){\n        ext = ext_arr[i];\n        ext_str = ext.substring(0,\
    \ ext.length - 1);\n        strength = ext_str.match(/[A-Z]/g).length - ext_str.match(/[a-z]/g).length;\n\
    \        if(class_name_arr_len > 1){\n            if(class_name_arr[class_name_arr_len\
    \ - 2].match(/[A-Z]/g).length > class_name_arr[class_name_arr_len - 1].match(/[a-z]/g).length){\n\
    \                if(strength > 0){\n                    return class_name + '.'\
    \ + ext_str;\n                }\n            }\n        }\n        else{\n   \
    \         if(strength > 0){\n                return class_name + '.' + ext_str;\n\
    \            }\n        }\n    }\n    return class_name;\n}\n", "  var class_name\
    \ = class_name.toLowerCase();\n  var extensions = extensions.sort();\n  var extension\
    \ = '';\n  var strength = 0;\n  for(var i = 0; i < extensions.length; i++){\n\
    \    var current_extension = extensions[i];\n    var current_extension_strength\
    \ = 0;\n    var current_extension_length = current_extension.length;\n    for(var\
    \ j = 0; j < current_extension_length; j++){\n      if(current_extension[j] ===\
    \ 'A' || current_extension[j] === 'a'){\n        current_extension_strength++;\n\
    \      }\n    }\n    if(current_extension_strength > strength){\n      extension\
    \ = current_extension;\n      strength = current_extension_strength;\n    }\n\
    \  }\n  return class_name + '.' + extension;\n}\n", "  var class_name_array =\
    \ class_name.split('.');\n  var class_name_array_length = class_name_array.length;\n\
    \  var strongest_extension = '';\n  var strongest_extension_strength = 0;\n  var\
    \ i;\n  for(i = 0; i < class_name_array_length; i++){\n    if(class_name_array[i].match(/[A-Z]/)){\n\
    \      var strength = class_name_array[i].match(/[A-Z]/).length - class_name_array[i].match(/[a-z]/).length;\n\
    \      if(strength > strongest_extension_strength){\n        strongest_extension\
    \ = class_name_array[i];\n        strongest_extension_strength = strength;\n \
    \     }\n    }\n  }\n  return class_name + '.' + strongest_extension;\n}\n", " \
    \   var strength = 0;\n    var strongest_extension = \"\";\n    var extension_count\
    \ = 0;\n    var extension_index = 0;\n    var extension_name = \"\";\n    var\
    \ extension_strength = 0;\n    var extension_name_length = 0;\n    var extension_name_index\
    \ = 0;\n    var extension_name_count = 0;\n    var extension_name_index_count\
    \ = 0;\n    var extension_name_index_count_temp = 0;\n    var extension_name_index_count_temp_temp\
    \ = 0;\n    var extension_name_index_count_temp_temp_temp = 0;\n    var extension_name_index_count_temp_temp_temp_temp\
    \ = 0;\n    var extension_name_index_count_temp_temp_temp_temp_temp = 0;\n   \
    \ var extension_name_index_count_temp_temp_temp_temp_temp_temp = 0;\n    var extension_name_index_count_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    var extension_name_index_count_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    var extension_name_index_count_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    var extension_name_index_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    var extension_name_index_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    var extension_name_index_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    var extension_name_index_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    var extension_name_index_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    var extension_name_index_count_temp_temp_temp_temp_temp_temp", " \
    \   var strength = 0;\n    var strongest_extension = '';\n    for(var i = 0; i\
    \ < extensions.length; i++){\n        var extension = extensions[i];\n       \
    \ var CAP = 0;\n        var SM = 0;\n        for(var j = 0; j < extension.length;\
    \ j++){\n            if(extension[j].toUpperCase() === extension[j]){\n      \
    \          CAP++;\n            }\n            else{\n                SM++;\n \
    \           }\n        }\n        strength += CAP - SM;\n        if(strength >\
    \ strength){\n            strength = CAP - SM;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n<|endoftext|><|javascript|>var gulp = require('gulp');\nvar concat = require('gulp-concat');\n\
    var uglify = require('gulp-uglify');\nvar rename = require('gulp-rename');\nvar\
    \ sourcemaps = require('gulp-sourcemaps');\nvar del = require('del');\nvar browserify\
    \ = require('browserify');\nvar babelify = require('babelify');\nvar source =\
    \ require('vinyl-source-stream');\nvar buffer = require('vinyl-buffer');\nvar\
    \ gutil = require('gulp-util');\nvar sourcemaps = require('gulp-sourcemaps');\n\
    var browserify = require('browserify');\nvar babelify = require('babelify');\n\
    var source = require('vinyl-source-stream');\nvar buffer = require('vinyl-buffer');\n\
    var gutil = require('gulp-util');\nvar sourcemaps = require('gulp-sourcemaps');\n\
    var browserify = require('browserify');\nvar babelify = require('babelify');\n\
    var source = require('vinyl-source-stream');\nvar buffer = require('vinyl-buffer');\n\
    var gutil = require('gulp-util');\nvar sourcemaps = require('gulp-sourcemaps');\n\
    var browserify = require('browserify');\nvar babelify = require('babelify');\n\
    var source = require('vinyl-source-stream');\nvar buffer = require('vinyl-buffer');\n\
    var gut", "    var strength = 0;\n    var extension_name = '';\n    var extension_index\
    \ = 0;\n    var extension_strength = 0;\n    var extension_name_length = 0;\n\
    \    var extension_name_index = 0;\n    var extension_name_length_index = 0;\n\
    \    var extension_name_length_index_index = 0;\n    var extension_name_index_index\
    \ = 0;\n    var extension_name_index_index_index = 0;\n    var extension_name_index_index_index_index\
    \ = 0;\n    var extension_name_index_index_index_index_index = 0;\n    var extension_name_index_index_index_index_index_index\
    \ = 0;\n    var extension_name_index_index_index_index_index_index_index = 0;\n\
    \    var extension_name_index_index_index_index_index_index_index_index = 0;\n\
    \    var extension_name_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    var extension_name_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    var extension_name_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    var extension_name_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    var extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    var extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    var extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    var extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    var extension_name_index_index_index_index_index_index_index_index_index",
  "    var strength = 0;\n    var extension = '';\n    var i = 0;\n    var j = 0;\n\
    \    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n\
    \    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n\
    \    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n\
    \    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n\
    \    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n\
    \    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n\
    \    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n\
    \    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n\
    \    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n\
    \    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n\
    \    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n\
    \    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n\
    \    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n\
    \    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    ", "    var\
    \ max_strength = -1;\n    var max_extension = '';\n    for (var i = 0; i < extensions.length;\
    \ i++){\n        var strength = 0;\n        var extension = extensions[i];\n \
    \       var cap = 0;\n        var sm = 0;\n        for (var j = 0; j < extension.length;\
    \ j++){\n            if (extension.charAt(j) === 'A' || extension.charAt(j) ===\
    \ 'a'){\n                cap++;\n            }\n            if (extension.charAt(j)\
    \ === 'a'){\n                sm++;\n            }\n        }\n        strength\
    \ = cap - sm;\n        if (strength > max_strength){\n            max_strength\
    \ = strength;\n            max_extension = extension;\n        }\n    }\n    return\
    \ class_name + '.' + max_extension;\n}\n<|endoftext|><|javascript|>var path =\
    \ require('path');\nvar webpack = require('webpack');\n\nmodule.exports = {\n\
    \  entry: [\n    'webpack-dev-server/client?http://localhost:3000',\n    'webpack/hot/only-dev-server',\n\
    \    './src/index'\n  ],\n  output: {\n    path: path.join(__dirname, 'dist'),\n\
    \    filename: 'bundle.js',\n    publicPath: '/static/'\n  },\n  plugins: [\n\
    \    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoErrorsPlugin()\n\
    \  ],\n  module: {\n    loaders: [\n      { test: /\\.js$/, exclude: /node_modules/,\
    \ loaders: ['react-hot', 'babel'] },\n      { test: /\\.css$/, loaders: ['style',\
    \ 'css'] }\n    ]\n  },\n  resolve: {\n    extensions: ['', '.js', '.jsx']\n \
    \ }\n};\n<|endoftext|><|javascript|>'use strict';\n\nvar _ = require('lodash');\n\
    var async = require('async');\nvar fs = require('fs');\nvar path = require('path');\n\
    var util = require('util');\nvar yaml = require", "    var strength = 0;\n   \
    \ var strongest_extension = '';\n    for(var i = 0; i < extensions.length; i++){\n\
    \        var extension = extensions[i];\n        var cap = 0;\n        var sm\
    \ = 0;\n        for(var j = 0; j < extension.length; j++){\n            if(extension[j].toUpperCase()\
    \ == extension[j]){\n                cap++;\n            }\n            else{\n\
    \                sm++;\n            }\n        }\n        strength = cap - sm;\n\
    \        if(strength > strength){\n            strength = strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + '.' + strongest_extension;\n}\n", "    var strength = 0;\n    var strongest_extension\
    \ = '';\n    var i = 0;\n    for(i = 0; i < extensions.length; i++){\n       \
    \ var extension = extensions[i];\n        var cap = 0;\n        var sm = 0;\n\
    \        var extension_name = extension.split('.')[1];\n        for(var j = 0;\
    \ j < extension_name.length; j++){\n            if(extension_name[j].toUpperCase()\
    \ == extension_name[j]){\n                cap++;\n            }\n            if(extension_name[j].toLowerCase()\
    \ == extension_name[j]){\n                sm++;\n            }\n        }\n  \
    \      strength = strength + (cap - sm);\n        if(strength > strength){\n \
    \           strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + '.' + strongest_extension;\n}\n<|endoftext|><|javascript|>//\
    \ Copyright (c) 2012 Ecma International.  All rights reserved.", "    var strength\
    \ = 0;\n    var strongest_extension = '';\n    for(var i = 0; i < extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var cap = 0;\n      \
    \  var sm = 0;\n        for(var j = 0; j < extension.length; j++){\n         \
    \   if(extension[j] === 'A' || extension[j] === 'a'){\n                cap++;\n\
    \            }\n            if(extension[j] === 'a'){\n                sm++;\n\
    \            }\n        }\n        var strength = cap - sm;\n        if(strength\
    \ > strength){\n            strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n<|endoftext|><|javascript|>var path = require('path');\nvar webpack = require('webpack');\n\
    \nmodule.exports = {\n  entry: [\n    'webpack-dev-server/client?http://localhost:3000',\n\
    \    'webpack/hot/only-dev-server',\n    './src/index'\n  ],\n  output: {\n  \
    \  path: path.join(__dirname, 'dist'),\n    filename: 'bundle.js',\n    publicPath:\
    \ '/static/'\n  },\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),\n\
    \    new webpack.NoErrorsPlugin()\n  ],\n  module: {\n    loaders: [{\n      test:\
    \ /\\.js$/,\n      loaders: ['react-hot', 'babel'],\n      include: path.join(__dirname,\
    \ 'src')\n    }, {\n      test: /\\.css$/,\n      loader: 'style!css'\n    },\
    \ {\n      test: /\\.png$/,\n      loader: 'url-loader?limit=100000'\n    }, {\n\
    \      test: /\\.jpg$/,\n      loader: 'file-loader'\n    }, {\n      test: /\\\
    .woff$/,\n      loader: 'url-loader?limit=10000&mimetype=application/font-woff'\n\
    \    }, {\n      test: /\\.ttf$", "    var strength = 0;\n    var strongest_extension\
    \ = '';\n    for(var i = 0; i < extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var CAP = 0;\n        var SM = 0;\n        for(var\
    \ j = 0; j < extension.length; j++){\n            if(extension[j].toUpperCase()\
    \ === extension[j]){\n                CAP++;\n            }\n            else{\n\
    \                SM++;\n            }\n        }\n        strength += CAP - SM;\n\
    \        if(strength > strength){\n            strength = CAP - SM;\n        \
    \    strongest_extension = class_name + '.' + extension;\n        }\n    }\n \
    \   return strongest_extension;\n}\n<|endoftext|><|javascript|>/*\n * Copyright\
    \ (c) 2015 by Rafael Angel Aznar Aparici (rafaaznar at gmail dot com)\n *\n *\
    \ sisane: The stunning micro-library that helps you to develop easily\n *    \
    \         AJAX web applications by using Angular.js 1.x & sisane-server\n * sisane\
    \ is distributed under the MIT License (MIT)\n * Sources at https://github.com/rafaelaznar/\n\
    \ *\n * Permission is hereby granted, free of charge, to any person obtaining\
    \ a copy\n * of this software and associated documentation files (the \"Software\"\
    ), to deal\n * in the Software without restriction, including without limitation\
    \ the rights\n * to use, copy, modify, merge, publish, distribute, sublicense,\
    \ and/or sell\n * copies of the Software, and to permit persons to whom the Software\
    \ is\n * furnished to do so, subject to the following conditions:\n *\n * The\
    \ above copyright notice and this permission notice shall be included in\n * all\
    \ copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED\
    \ \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT\
    \ NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR\
    \ PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT\
    \ HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN\
    \ AN ACTION OF CONTRACT, T", "  var strong_extension = '';\n  var strong_extension_name\
    \ = '';\n  var strong_extension_strength = 0;\n  var i;\n  for(i = 0; i < extensions.length;\
    \ i++){\n    if(extensions[i].length > strong_extension_strength){\n      strong_extension\
    \ = extensions[i];\n      strong_extension_name = strong_extension.substring(0,\
    \ strong_extension.length - 1);\n      strong_extension_strength = strong_extension.length\
    \ - strong_extension_name.length;\n    }\n  }\n  return class_name + '.' + strong_extension_name;\n\
    }\n", "    var class_name_array = class_name.split('.');\n    var class_name_array_length\
    \ = class_name_array.length;\n    var strongest_extension = '';\n    var strongest_extension_strength\
    \ = 0;\n    for(var i = 0; i < class_name_array_length; i++){\n        var extension_name\
    \ = class_name_array[i];\n        var extension_name_array = extension_name.split('_');\n\
    \        var extension_name_array_length = extension_name_array.length;\n    \
    \    var extension_name_strength = 0;\n        for(var j = 0; j < extension_name_array_length;\
    \ j++){\n            var letter = extension_name_array[j];\n            if(letter.toUpperCase()\
    \ == letter){\n                extension_name_strength++;\n            }\n   \
    \     }\n        if(extension_name_strength > strongest_extension_strength){\n\
    \            strongest_extension = class_name + '.' + extension_name;\n      \
    \      strongest_extension_strength = extension_name_strength;\n        }\n  \
    \  }\n    return strongest_extension;\n}\n<|endoftext|><|javascript|>'use strict';\n\
    \nvar _ = require('lodash');\nvar moment = require('moment');\nvar Promise = require('bluebird');\n\
    var debug = require('debug')('app:server');\nvar config = require('../config');\n\
    var utils = require('../utils');\nvar errors = require('../errors');\nvar path\
    \ = require('path');\nvar fs = require('fs');\nvar url = require('url');\nvar\
    \ request = require('request');\nvar config = require('../config');\nvar winston\
    \ = require('winston');\nvar nconf = require('nconf');\n\nvar logger = winston.loggers.get('default');\n\
    \nvar defaultConfig = {\n  env: process.env.NODE_ENV || 'development',\n  port:\
    \ process.env.PORT || config.port,\n  host: process.env.HOST || config.host,\n\
    \  db: {\n    uri: process.env.MONGOHQ_URL || process.env.MONGOLAB"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
