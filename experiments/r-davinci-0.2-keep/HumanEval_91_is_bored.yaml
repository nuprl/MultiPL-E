name: HumanEval_91_is_bored
language: humaneval_to_r.py
prompt: "# You'll be given a string of words, and your task is to count the number\n\
  # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
  \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
  )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
  )\n# 1\nis_bored <- function(S) {"
tests: "test_humaneval <- function() {\ncandidate <- is_bored\n    if(!identical(candidate('Hello\
  \ world'), 0)){quit('no', 1)}\n    if(!identical(candidate('Is the sky blue?'),\
  \ 0)){quit('no', 1)}\n    if(!identical(candidate('I love It !'), 1)){quit('no',\
  \ 1)}\n    if(!identical(candidate('bIt'), 0)){quit('no', 1)}\n    if(!identical(candidate('I\
  \ feel good today. I will be productive. will kill It'), 2)){quit('no', 1)}\n  \
  \  if(!identical(candidate('You and I are going for a walk'), 0)){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n  # Your code here\n  return(0)\n}\n", "\n  # Your code here\n  count\
    \ <- 0\n  for (i in 1:length(S)){\n    if (substr(S[i],1,1) == \"I\"){\n     \
    \ count <- count + 1\n    }\n  }\n  return(count)\n}\n", "\n  # Your code here\n\
    \  return(0)\n}\n", "\n  # Your code here\n  return(sum(grepl(\"^I\",unlist(strsplit(S,\"\
    [.?!]\")))))\n}\n", "\n  # Your code here\n  count <- 0\n  for (i in 1:length(strsplit(S,\
    \ \"\\\\.\")[[1]])) {\n    if (grepl(\"^I\", strsplit(S, \"\\\\.\")[[1]][i]))\
    \ {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n", "\n  # Your\
    \ code here\n  # Split the string into sentences\n  sentences <- strsplit(S, \"\
    \\\\.|\\\\?|!\")[[1]]\n  # Count the number of sentences that start with \"I\"\
    \n  sum(grepl(\"^I\", sentences))\n}\n", "\n  # your code here\n}\n", "\n  # Your\
    \ code here\n  return(0)\n}\n", "\n  # Your code here\n  # Split the string into\
    \ sentences\n  sentences <- strsplit(S, \"\\\\.|\\\\?|!\")[[1]]\n  # Count the\
    \ number of sentences that start with \"I\"\n  sum(grepl(\"^I\", sentences))\n\
    }\n", "\n  # Your code here\n  return(0)\n}\n", "\n    # Your code here\n}\n ",
  "\n  # Your code here\n  # Split the string into sentences\n  sentences <- strsplit(S,\
    \ \"\\\\.|\\\\?|\\\\!\")[[1]]\n  # Count the number of sentences that start with\
    \ \"I\"\n  sum(grepl(\"^I\", sentences))\n}\n", "\n  # Your code here\n  return(sum(grepl(\"\
    ^I\", unlist(strsplit(S, \"\\\\.|\\\\?|!\")))))\n}\n", "\n  # your code here\n\
    \  return(0)\n}\n", "\n  # Your code here\n  # Hint: use strsplit, grepl and length\n\
    \  # Hint: use strsplit, grepl and length\n  # Hint: use strsplit, grepl and length\n\
    \  # Hint: use strsplit, grepl and length\n  # Hint: use strsplit, grepl and length\n\
    \  # Hint: use strsplit, grepl and length\n  # Hint: use strsplit, grepl and length\n\
    \  # Hint: use strsplit, grepl and length\n  # Hint: use strsplit, grepl and length\n\
    \  # Hint: use strsplit, grepl and length\n  # Hint: use strsplit, grepl and length\n\
    \  # Hint: use strsplit, grepl and length\n  # Hint: use strsplit, grepl and length\n\
    \  # Hint: use strsplit, grepl and length\n  # Hint: use strsplit, grepl and length\n\
    \  # Hint: use strsplit, grepl and length\n  # Hint: use strsplit, grepl and length\n\
    \  # Hint: use strsplit, grepl and length\n  # Hint: use strsplit, grepl and length\n\
    \  # Hint: use strsplit, grepl and length\n  # Hint: use strsplit, grepl and length\n\
    \  # Hint: use strsplit, grepl and length\n  # Hint: use strsplit, grepl and length\n\
    \  # Hint: use strsplit, grepl and length\n  # Hint: use strsplit, grepl and length\n\
    \  # Hint: use strsplit, grepl and length\n  # Hint: use strsplit, grepl and length\n\
    \  # Hint: use strsplit, grepl and length\n  # Hint: use strsplit, grepl and length\n\
    \  # Hint: use strsplit, grepl and length\n  # Hint: use strsplit, grepl and length\n\
    \  # Hint: use strsplit, grepl and length\n  # Hint: use strsplit, grepl and length\n\
    \  # Hint: use strsplit, grepl and length\n  # Hint: use strsplit, grepl and length\n\
    \  # Hint: use strsplit, grepl and length\n", "\n  # Your code here\n  count <-\
    \ 0\n  for (i in strsplit(S, \"\\\\.|\\\\?|\\\\!\")[[1]]) {\n    if (substr(i,\
    \ 1, 1) == \"I\") {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n",
  "\n  # Your code here\n  count <- 0\n  for (i in 1:length(S)) {\n    if (substr(S[i],\
    \ 1, 1) == \"I\") {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n",
  "\n  # your code here\n  return(0)\n}\n", "\n  # YOUR CODE HERE\n  return(0)\n}\n",
  "\n  # YOUR CODE HERE\n  return(length(grep(\"^I\", unlist(strsplit(S, \"\\\\.|\\\
    \\?|\\\\!\")))))\n}\n", "\n  # YOUR CODE HERE\n  # Split the string into sentences\n\
    \  sentences <- strsplit(S, \"\\\\.|\\\\?|!\")[[1]]\n  # Count the number of sentences\
    \ that start with \"I\"\n  sum(grepl(\"^I\", sentences))\n}\n", "\n  # Your code\
    \ here\n  count <- 0\n  for (i in 1:length(S)) {\n    if (substr(S[i], 1, 1) ==\
    \ \"I\") {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n", "\n \
    \ # your code here\n  # split the string into sentences\n  sentences <- unlist(strsplit(S,\
    \ \"\\\\.|\\\\?|\\\\!\"))\n  # count the number of sentences that start with \"\
    I\"\n  count <- 0\n  for (sentence in sentences) {\n    if (substr(sentence, 1,\
    \ 1) == \"I\") {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n",
  "\n  # Your code here\n  return(0)\n}\n", "\n  # your code here\n  return(0)\n}\n",
  "\n  # Your code here\n  return(0)\n}\n", "\n  # your code here\n  return(sum(grepl(\"\
    ^I\", unlist(strsplit(S, \"[.?!]\")))))\n}\n", "\n  # Your code here\n  return(0)\n\
    }\n", "\n  count <- 0\n  for (i in 1:length(S)) {\n    if (substr(S[i], 1, 1)\
    \ == \"I\") {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n", "\n\
    \  return(length(grep(\"^I\", unlist(strsplit(S, \"[.?!]\")))))\n}\n", "\n  #\
    \ Your code here\n  return(0)\n}\n", "\n  # your code here\n  S <- strsplit(S,\
    \ \"\\\\.|\\\\?|!\")\n  S <- unlist(S)\n  S <- strsplit(S, \" \")\n  S <- unlist(S)\n\
    \  S <- S[S == \"I\"]\n  return(length(S))\n}\n", "\n  # Your code here\n  return(0)\n\
    }\n", "\n  # your code here\n}\n ", "\n  # Your code here\n  return(0)\n}\n",
  "\n  # your code here\n}\n", "\n  # Your code here\n  # Split the sentence into\
    \ words\n  words <- unlist(strsplit(S, \" \"))\n  # Find the index of the words\
    \ that start with \"I\"\n  index <- grep(\"^I\", words)\n  # Count the number\
    \ of words that start with \"I\"\n  length(index)\n}\n", "\n  # your code here\n\
    \  return(0)\n}\n", "\n  # Your code here\n  return(0)\n}\n", "\n  # your code\
    \ here\n  count <- 0\n  for (i in 1:length(S)) {\n    if (substr(S[i], 1, 1) ==\
    \ \"I\") {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n", "\n \
    \ # YOUR CODE HERE\n  return(0)\n}\n", "\n  # your code here\n}\n", "\n  # YOUR\
    \ CODE HERE\n  # Split the string by '.', '?' or '!'\n  # Count the number of\
    \ sentences that start with 'I'\n  # Return the count\n  return(length(grep(\"\
    ^I\", strsplit(S, \"\\\\.|\\\\?|\\\\!\")[[1]])))\n}\n", "\n  # your code here\n\
    \  return(0)\n}\n", "\n  # Your code here\n  #return(0)\n  S <- gsub(\"[.?!]\"\
    , \" \", S)\n  S <- unlist(strsplit(S, \" \"))\n  S <- S[S == \"I\"]\n  return(length(S))\n\
    }\n", "\n  # YOUR CODE HERE\n  return(0)\n}\n", "\n  # Your code here\n  return(0)\n\
    }\n", "\n  # Your code here\n  return(sum(grepl(\"^I\", unlist(strsplit(S, \"\
    [.?!]\")))))\n}\n", "\n  # your code here\n  return(0)\n}\n", "\n  # YOUR CODE\
    \ HERE\n  count = 0\n  for (i in 1:length(S)) {\n    if (substr(S[i], 1, 1) ==\
    \ \"I\") {\n      count = count + 1\n    }\n  }\n  return(count)\n}\n", "\n  #\
    \ Your code here\n  # You can use the function strsplit() to split a string into\
    \ a list of words\n  # For example:\n  # >>> strsplit(\"The sky is blue\", \"\
    \ \")\n  # [[1]]\n  # [1] \"The\" \"sky\" \"is\" \"blue\"\n  # >>> strsplit(\"\
    The sky is blue\", \" \")[[1]][1]\n  # [1] \"The\"\n  # >>> strsplit(\"The sky\
    \ is blue\", \" \")[[1]][2]\n  # [1] \"sky\"\n  # >>> strsplit(\"The sky is blue\"\
    , \" \")[[1]][3]\n  # [1] \"is\"\n  # >>> strsplit(\"The sky is blue\", \" \"\
    )[[1]][4]\n  # [1] \"blue\"\n  # >>> strsplit(\"The sky is blue\", \" \")[[1]][5]\n\
    \  # [1] \"The\"\n  # >>> strsplit(\"The sky is blue\", \" \")[[1]][6]\n  # [1]\
    \ \"sky\"\n  # >>> strsplit(\"The sky is blue\", \" \")[[1]][7]\n  # [1] \"is\"\
    \n  # >>> strsplit(\"The sky is blue\", \" \")[[1]][8]\n  # [1] \"blue\"\n  #\
    \ >>> strsplit(\"The sky is blue\", \" \")[[1]][9]\n  # [1] \"The\"\n  # >>> strsplit(\"\
    The sky is blue\", \" \")[[1]][10]\n  # [1] \"sky\"\n  # >>> strsplit(\"The sky\
    \ is blue\", \" \")[[1]][11]\n  # [1] \"is\"\n  # >>> strsplit(\"The sky is blue\"\
    , \" \")[[1]][12]\n  # [1] \"blue\"\n  # >>> strsplit(\"The sky is blue\", \"\
    \ \")[[1]][13]\n  # [1] \"The\"\n  # >>> strsplit(\"The sky is blue\", \" \")[[1]][14]\n\
    \  # [1] \"sky\"\n  # >>> strsplit(\"The sky is blue\", \" \")[[1]][15", "\n \
    \ # YOUR CODE HERE\n  return(0)\n}\n", "\n  # your code here\n  return(sum(grepl(\"\
    ^I\", unlist(strsplit(S, \"[.?!]\")))))\n}\n", "\n  # Your code here\n  return(0)\n\
    }\n", "\n  # Your code here\n  count <- 0\n  for (i in 1:length(S)){\n    if (substr(S[i],1,1)\
    \ == \"I\"){\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n", "\n\
    \  # YOUR CODE HERE\n  count <- 0\n  for (i in 1:length(strsplit(S, \"\\\\.\"\
    )[[1]])) {\n    if (strsplit(strsplit(S, \"\\\\.\")[[1]][i], \" \")[[1]][1] ==\
    \ \"I\") {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n", "\n \
    \ # Your code here\n}\n", "\n  S <- strsplit(S, \"[.?!]\")[[1]]\n  S <- S[grepl(\"\
    ^I\", S)]\n  return(length(S))\n}\n", "\n  # Your code here\n  return(length(grep(\"\
    ^I\", unlist(strsplit(S, \"[.?!]\")))))\n}\n", "\n  # YOUR CODE HERE\n  return(0)\n\
    }\n", "\n  # your code here\n  S <- strsplit(S, \" \")[[1]]\n  S <- S[S == \"\
    I\"]\n  return(length(S))\n}\n", "\n  # Your code here\n  return(0)\n}\n", "\n\
    \  # Your code here\n  return(0)\n}\n", "\n  # Your code here\n  count <- 0\n\
    \  for (i in 1:length(S)) {\n    if (substr(S[i], 1, 1) == \"I\") {\n      count\
    \ <- count + 1\n    }\n  }\n  return(count)\n}\n", "\n  # your code here\n  return(0)\n\
    }\n", "\n  # YOUR CODE HERE\n  return(length(grep(\"^I\", strsplit(S, \"\\\\.|\\\
    \\?|!\")[[1]])))\n}\n", "\n  # Your code here\n  return(0)\n}\n", "\n  # Your\
    \ code here\n  count <- 0\n  for (i in 1:length(strsplit(S, \" \")[[1]])) {\n\
    \    if (strsplit(S, \" \")[[1]][i] == \"I\") {\n      count <- count + 1\n  \
    \  }\n  }\n  return(count)\n}\n", "\n  # Your code here\n}\n", "\n  # Your code\
    \ here\n  return(0)\n}\n", "\n  # your code here\n  return(0)\n}\n", "\n  # Your\
    \ code here\n  # Split the sentence into words\n  words <- unlist(strsplit(S,\
    \ \" \"))\n  # Find the sentences that start with \"I\"\n  boredoms <- grep(\"\
    ^I\", words)\n  # Count the number of boredoms\n  length(boredoms)\n}\n", "\n\
    \  # Your code here\n  return(0)\n}\n", "\n  # YOUR CODE HERE\n  return(sum(grepl(\"\
    ^I\", unlist(strsplit(S, \"[.?!]\")))))\n}\n", "\n  # Your code here\n  return(0)\n\
    }\n", "\n  # Your code here\n  return(0)\n}\n", "\n  # Your code here\n  return(sum(grepl(\"\
    ^I\", unlist(strsplit(S, \"[.?!]\")))))\n}\n", "\n  # Your code here\n  # Split\
    \ the string into sentences\n  sentences <- strsplit(S, \"\\\\.|\\\\?|!\")[[1]]\n\
    \  # Count the number of sentences that start with \"I\"\n  sum(grepl(\"^I\",\
    \ sentences))\n}\n", "\n  # YOUR CODE HERE\n  return(0)\n}\n", "\n  # your code\
    \ here\n}\n", "\n  # your code here\n  return(0)\n}\n", "\n  # Your code here\n\
    \  count <- 0\n  for (i in 1:length(strsplit(S, \"\\\\.\")[[1]])) {\n    if (strsplit(strsplit(S,\
    \ \"\\\\.\")[[1]][i], \" \")[[1]][1] == \"I\") {\n      count <- count + 1\n \
    \   }\n  }\n  return(count)\n}\n", "\n  # your code here\n  return(sum(grepl(\"\
    I\",unlist(strsplit(S,\"[.?!]\")))))\n}\n", "\n  # Your code here\n}\n", "\n \
    \ # your code here\n  return(0)\n}\n", "\n  # YOUR CODE HERE\n  return(length(grep(\"\
    ^I\", strsplit(S, \"\\\\.|\\\\?|!\")[[1]])))\n}\n", "\n  # Your code here\n  S\
    \ <- strsplit(S, split = \"[.?!]\")[[1]]\n  S <- S[grepl(\"^I\", S)]\n  return(length(S))\n\
    }\n", "\n  # Your code here\n  return(0)\n}\n", "\n  # Your code here\n  # Use\
    \ strsplit() and length()\n  # Hint: You can use the '.', '?' and '!' characters\
    \ as delimiters\n  # Hint: You can use the 'I' character as a pattern\n  # Hint:\
    \ You can use the 'fixed' argument to make sure that the delimiters\n  # are treated\
    \ as literal characters\n  # Hint: You can use the 'perl' argument to make sure\
    \ that the pattern is\n  # treated as a regular expression\n  # Hint: You can\
    \ use the 'ignore.case' argument to make sure that the\n  # pattern is case-insensitive\n\
    \  # Hint: You can use the 'invert' argument to make sure that the pattern\n \
    \ # is inverted\n  # Hint: You can use the 'invert' argument to make sure that\
    \ the pattern\n  # is inverted\n  # Hint: You can use the 'invert' argument to\
    \ make sure that the pattern\n  # is inverted\n  # Hint: You can use the 'invert'\
    \ argument to make sure that the pattern\n  # is inverted\n  # Hint: You can use\
    \ the 'invert' argument to make sure that the pattern\n  # is inverted\n  # Hint:\
    \ You can use the 'invert' argument to make sure that the pattern\n  # is inverted\n\
    \  # Hint: You can use the 'invert' argument to make sure that the pattern\n \
    \ # is inverted\n  # Hint: You can use the 'invert' argument to make sure that\
    \ the pattern\n  # is inverted\n  # Hint: You can use the 'invert' argument to\
    \ make sure that the pattern\n  # is inverted\n  # Hint: You can use the 'invert'\
    \ argument to make sure that the pattern\n  # is inverted\n  # Hint: You can use\
    \ the 'invert' argument to make sure that the pattern\n  # is inverted\n  # Hint:\
    \ You can use the 'invert' argument to make sure that the pattern\n  # is inverted\n\
    \  # Hint: You can use the 'invert' argument to make sure that the pattern\n \
    \ # is inverted\n  # Hint: You can use the 'invert' argument to make sure that\
    \ the pattern\n  # is inverted\n", "\n  # your code here\n}\n", "\n  # your code\
    \ here\n  return(sum(grepl(\"^I\", strsplit(S, \"\\\\.|\\\\?|!\")[[1]])))\n}\n",
  "\n  # Your code here\n  S <- strsplit(S, \"\\\\.|\\\\?|!\")[[1]]\n  S <- gsub(\"\
    ^\\\\s+|\\\\s+$\", \"\", S)\n  S <- gsub(\"^I\\\\s+\", \"\", S)\n  sum(S == \"\
    \")\n}\n", "\n  # your code here\n  return(0)\n}\n", "\n  # your code here\n \
    \ return(0)\n}\n", "\n  # your code here\n  return(sum(grepl(\"^I\", strsplit(S,\
    \ \"\\\\.|\\\\?|!\")[[1]])))\n}\n", "\n  # YOUR CODE HERE\n  return(length(grep(\"\
    ^I\", unlist(strsplit(S, \"[.?!]\")))))\n}\n", "\n  # Your code here\n  return(0)\n\
    }\n", "\n  # Your code here\n  count <- 0\n  for (i in 1:length(strsplit(S, \"\
    \\\\.\")[[1]])) {\n    if (substr(strsplit(S, \"\\\\.\")[[1]][i], 1, 1) == \"\
    I\") {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n", "\n  # Your\
    \ code here\n  return(sum(grepl(\"^I\", strsplit(S, \"[.?!]\")[[1]])))\n}\n",
  "\n  # your code here\n  return(sum(grepl(\"^I\", strsplit(S, \"\\\\.|\\\\?|!\"\
    )[[1]])))\n}\n", "\n  # Your code here\n  return(0)\n}\n ", "\n  # YOUR CODE HERE\n\
    \  count = 0\n  for (i in strsplit(S, \"\\\\.|\\\\?|\\\\!\")[[1]]) {\n    if (substr(i,\
    \ 1, 1) == \"I\") {\n      count = count + 1\n    }\n  }\n  return(count)\n}\n",
  "\n  # Your code here\n  return(0)\n}\n", "\n  # your code here\n}\n", "\n  # Your\
    \ code here\n  # Hint: use strsplit() and length()\n  # Hint: use grepl() to find\
    \ the word \"I\"\n  # Hint: use sum() to count the number of boredoms\n  # Hint:\
    \ use gsub() to remove the punctuation\n  # Hint: use tolower() to make the string\
    \ lowercase\n  # Hint: use strsplit() to split the string into sentences\n  #\
    \ Hint: use length() to count the number of sentences\n  # Hint: use sum() to\
    \ count the number of boredoms\n  # Hint: use gsub() to remove the punctuation\n\
    \  # Hint: use tolower() to make the string lowercase\n  # Hint: use strsplit()\
    \ to split the string into sentences\n  # Hint: use length() to count the number\
    \ of sentences\n  # Hint: use sum() to count the number of boredoms\n  # Hint:\
    \ use gsub() to remove the punctuation\n  # Hint: use tolower() to make the string\
    \ lowercase\n  # Hint: use strsplit() to split the string into sentences\n  #\
    \ Hint: use length() to count the number of sentences\n  # Hint: use sum() to\
    \ count the number of boredoms\n  # Hint: use gsub() to remove the punctuation\n\
    \  # Hint: use tolower() to make the string lowercase\n  # Hint: use strsplit()\
    \ to split the string into sentences\n  # Hint: use length() to count the number\
    \ of sentences\n  # Hint: use sum() to count the number of boredoms\n  # Hint:\
    \ use gsub() to remove the punctuation\n  # Hint: use tolower() to make the string\
    \ lowercase\n  # Hint: use strsplit() to split the string into sentences\n  #\
    \ Hint: use length() to count the number of sentences\n  # Hint: use sum() to\
    \ count the number of boredoms\n  # Hint: use gsub() to remove the punctuation\n\
    \  # Hint: use tolower() to make the string lowercase\n  # Hint: use strsplit()\
    \ to split the string into sentences\n  # Hint: use length() to count the number\
    \ of sentences\n  # Hint: use", "\n  # Your code here\n  # S <- gsub(\"\\\\.|\\\
    \\?|\\\\!\", \" \", S)\n  # S <- unlist(strsplit(S, \" \"))\n  # sum(S == \"I\"\
    )\n  sum(grepl(\"^I\", strsplit(gsub(\"\\\\.|\\\\?|\\\\!\", \" \", S), \" \")[[1]]))\n\
    }\n", "\n  # your code here\n}\n", "\n  # your code here\n}\n", "\n  # Your code\
    \ here\n  return(0)\n}\n", "\n  # your code here\n  return(sum(grepl(\"^I\", unlist(strsplit(S,\
    \ \"[.?!]\")))))\n}\n", "\n  # YOUR CODE HERE\n  # split the string by \".\" \"\
    ?\" \"!\"\n  # count the number of sentences that start with \"I\"\n  # return\
    \ the count\n  count = 0\n  sentences = strsplit(S, \"\\\\.|\\\\?|\\\\!\")[[1]]\n\
    \  for (sentence in sentences) {\n    if (grepl(\"^I\", sentence)) {\n      count\
    \ = count + 1\n    }\n  }\n  return(count)\n}\n", "\n  # Your code here\n  # Split\
    \ the string by ., ?, or !\n  sentences <- unlist(strsplit(S, \"[.?!]\"))\n  #\
    \ Count the number of sentences that start with \"I\"\n  sum(grepl(\"^I\", sentences))\n\
    }\n", "\n  # Your code here\n  return(0)\n}\n", "\n  # Your code here\n  # Split\
    \ the string into sentences\n  sentences <- strsplit(S, split = \"\\\\.|\\\\?|\\\
    \\!\")[[1]]\n  # Count the number of sentences that start with \"I\"\n  sum(grepl(\"\
    ^I\", sentences))\n}\n", "\n  # Your code here\n  count = 0\n  for (i in 1:length(S))\
    \ {\n    if (substr(S[i], 1, 1) == \"I\") {\n      count = count + 1\n    }\n\
    \  }\n  return(count)\n}\n", "\n  # Your code here\n  # Hint: use strsplit()\n\
    \  # Hint: use nchar()\n  # Hint: use grep()\n  # Hint: use sum()\n  # Hint: use\
    \ tolower()\n  # Hint: use gsub()\n  # Hint: use paste()\n  # Hint: use unlist()\n\
    \  # Hint: use strsplit()\n  # Hint: use nchar()\n  # Hint: use grep()\n  # Hint:\
    \ use sum()\n  # Hint: use tolower()\n  # Hint: use gsub()\n  # Hint: use paste()\n\
    \  # Hint: use unlist()\n  # Hint: use strsplit()\n  # Hint: use nchar()\n  #\
    \ Hint: use grep()\n  # Hint: use sum()\n  # Hint: use tolower()\n  # Hint: use\
    \ gsub()\n  # Hint: use paste()\n  # Hint: use unlist()\n  # Hint: use strsplit()\n\
    \  # Hint: use nchar()\n  # Hint: use grep()\n  # Hint: use sum()\n  # Hint: use\
    \ tolower()\n  # Hint: use gsub()\n  # Hint: use paste()\n  # Hint: use unlist()\n\
    \  # Hint: use strsplit()\n  # Hint: use nchar()\n  # Hint: use grep()\n  # Hint:\
    \ use sum()\n  # Hint: use tolower()\n  # Hint: use gsub()\n  # Hint: use paste()\n\
    \  # Hint: use unlist()\n  # Hint: use strsplit()\n  # Hint: use nchar()\n  #\
    \ Hint: use grep()\n  # Hint: use sum()\n  # Hint: use tolower()\n  # Hint: use\
    \ gsub()\n  # Hint: use paste()\n  # Hint: use unlist()\n  # Hint: use strsplit()\n\
    \  # Hint: use nchar()\n  # Hint: use grep()\n  # Hint: use sum()\n  # Hint",
  "\n  # YOUR CODE HERE\n  return(length(grep(\"^I\", unlist(strsplit(S, \"[.?!]\"\
    )))))\n}\n", "\n  # your code here\n  count = 0\n  for (i in 1:length(strsplit(S,\
    \ \"\\\\.\")[[1]])) {\n    if (grepl(\"^I\", strsplit(S, \"\\\\.\")[[1]][i]))\
    \ {\n      count = count + 1\n    }\n  }\n  return(count)\n}\n", "\n  # your code\
    \ here\n  count <- 0\n  for (i in 1:length(strsplit(S, \"\\\\.\")[[1]])) {\n \
    \   if (grepl(\"^I\", strsplit(S, \"\\\\.\")[[1]][i])) {\n      count <- count\
    \ + 1\n    }\n  }\n  return(count)\n}\n", "\n  # YOUR CODE HERE\n  return(0)\n\
    }\n", "\n  # your code here\n  return(0)\n}\n", "\n  # Your code here\n  return(0)\n\
    }\n", "\n  # Your code here\n  return(0)\n}\n", "\n  # Your code here\n  S <-\
    \ strsplit(S, \"\\\\.\")\n  S <- unlist(S)\n  S <- gsub(\"\\\\?\", \"\", S)\n\
    \  S <- gsub(\"!\", \"\", S)\n  S <- gsub(\"\\\\.\", \"\", S)\n  S <- gsub(\"\
    I\", \"\", S)\n  S <- gsub(\" \", \"\", S)\n  S <- length(S)\n  return(S)\n}\n",
  "\n  # Your code here\n  return(0)\n}\n", "\n  # Your code here\n  return(0)\n}\n",
  "\n  # your code here\n  return(0)\n}\n", "\n  # Your code here\n  return(0)\n}\n",
  "\n  # Your code here\n  return(0)\n}\n", "\n  # your code here\n  return(0)\n}\n",
  "\n  # your code here\n  return(0)\n}\n", "\n  # Your code here\n}\n", "\n  # Your\
    \ code here\n  return(0)\n}\n", "\n  # Your code here\n  S <- strsplit(S, \"\\\
    \\.|\\\\?|!\")[[1]]\n  S <- S[grepl(\"^I\", S)]\n  return(length(S))\n}\n", "\n\
    \  # YOUR CODE HERE\n  return(sum(grepl(\"^I\", strsplit(S, \"\\\\.|\\\\?|!\"\
    )[[1]])))\n}\n", "\n  # Your code here\n  return(0)\n}\n", "\n  # Your code here\n\
    \  # Split the string into sentences\n  sentences <- unlist(strsplit(S, split\
    \ = \"[.!?]\"))\n  # Count the number of sentences that start with \"I\"\n  sum(grepl(\"\
    ^I\", sentences))\n}\n", "\n  # Your code here\n  return(0)\n}\n", "\n  # Your\
    \ code here\n  count <- 0\n  for (i in 1:length(strsplit(S, \"\\\\.\")[[1]]))\
    \ {\n    if (strsplit(strsplit(S, \"\\\\.\")[[1]][i], \" \")[[1]][1] == \"I\"\
    ) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n", "\n  # Your\
    \ code here\n}\n", "\n  # Your code here\n  return(0)\n}\n", "\n  # Your code\
    \ here\n  # Hint: use strsplit() and length()\n  # Hint: use grepl() to find the\
    \ \"I\"\n  # Hint: use sum() to add up the number of boredoms\n  # Hint: use paste()\
    \ to join the sentences back together\n  # Hint: use gsub() to remove the punctuation\n\
    \  # Hint: use gsub() to remove the \"I\"\n  # Hint: use grepl() to find the \"\
    I\"\n  # Hint: use sum() to add up the number of boredoms\n  # Hint: use paste()\
    \ to join the sentences back together\n  # Hint: use gsub() to remove the punctuation\n\
    \  # Hint: use gsub() to remove the \"I\"\n  # Hint: use grepl() to find the \"\
    I\"\n  # Hint: use sum() to add up the number of boredoms\n  # Hint: use paste()\
    \ to join the sentences back together\n  # Hint: use gsub() to remove the punctuation\n\
    \  # Hint: use gsub() to remove the \"I\"\n  # Hint: use grepl() to find the \"\
    I\"\n  # Hint: use sum() to add up the number of boredoms\n  # Hint: use paste()\
    \ to join the sentences back together\n  # Hint: use gsub() to remove the punctuation\n\
    \  # Hint: use gsub() to remove the \"I\"\n  # Hint: use grepl() to find the \"\
    I\"\n  # Hint: use sum() to add up the number of boredoms\n  # Hint: use paste()\
    \ to join the sentences back together\n  # Hint: use gsub() to remove the punctuation\n\
    \  # Hint: use gsub() to remove the \"I\"\n  # Hint: use grepl() to find the \"\
    I\"\n  # Hint: use sum() to add up the number of boredoms\n  # Hint: use paste()\
    \ to join the sentences back together\n  # Hint: use gsub() to remove the punctuation\n\
    \  # Hint: use gsub() to remove the \"I\"\n  # Hint: use grepl() to find the \"\
    I\"\n ", "\n  # your code here\n  return(0)\n}\n", "\n  # your code here\n  return(length(grep(\"\
    ^I\",unlist(strsplit(S,split=\"[.?!]\")))))\n}\n", "\n  # Your code here\n  #\
    \ You can use the function strsplit() to split a string into a vector of words\n\
    \  # For example:\n  # >>> strsplit(\"Hello world\", \" \")\n  # [[1]]\n  # [1]\
    \ \"Hello\" \"world\"\n  # >>> strsplit(\"The sky is blue. The sun is shining.\
    \ I love this weather\", \" \")\n  # [[1]]\n  # [1] \"The\"    \"sky\"    \"is\"\
    \     \"blue.\"  \"The\"    \"sun\"    \"is\"     \"shining.\"\n  # [9] \"I\"\
    \      \"love\"   \"this\"   \"weather\"\n  # >>> strsplit(\"The sky is blue.\
    \ The sun is shining. I love this weather\", \".\")\n  # [[1]]\n  # [1] \"The\
    \ sky is blue\" \" The sun is shining\" \" I love this weather\"\n  # >>> strsplit(\"\
    The sky is blue. The sun is shining. I love this weather\", \".\")[[1]]\n  # [1]\
    \ \"The sky is blue\" \" The sun is shining\" \" I love this weather\"\n  # >>>\
    \ strsplit(\"The sky is blue. The sun is shining. I love this weather\", \".\"\
    )[[1]][1]\n  # [1] \"The sky is blue\"\n  # >>> strsplit(\"The sky is blue. The\
    \ sun is shining. I love this weather\", \".\")[[1]][1][1]\n  # [1] \"T\"\n  #\
    \ >>> strsplit(\"The sky is blue. The sun is shining. I love this weather\", \"\
    .\")[[1]][1][1] == \"I\"\n  # [1] FALSE\n  # >>> strsplit(\"The sky is blue. The\
    \ sun is shining. I love this weather\", \".\")[[1]][3]\n  # [1] \" I love this\
    \ weather\"\n  # >>> strsplit(\"The sky is blue. The sun is shining. I love this\
    \ weather\", \".\")[[1]][3][1]\n  # [1] \" \"\n  # >>> strsplit(\"The sky is blue.\
    \ The sun is shining. I love this weather\", \".\")[[1]][3][2]\n  # [1] \"I\"\n\
    \  # >>>", "\n  # your code here\n  return(sum(grepl(\"^I\", unlist(strsplit(S,\
    \ \"[.?!]\")))))\n}\n", "\n  # your code here\n  count = 0\n  for (i in 1:length(strsplit(S,\
    \ \"\\\\.\")[[1]])) {\n    if (substr(strsplit(S, \"\\\\.\")[[1]][i], 1, 1) ==\
    \ \"I\") {\n      count = count + 1\n    }\n  }\n  return(count)\n}\n", "\n  #\
    \ Your code here\n  count <- 0\n  for (i in 1:length(strsplit(S, split = \" \"\
    )[[1]])) {\n    if (strsplit(S, split = \" \")[[1]][i] == \"I\") {\n      count\
    \ <- count + 1\n    }\n  }\n  return(count)\n}\n", "\n  # YOUR CODE HERE\n  return(sum(grepl(\"\
    ^I\", strsplit(S, \"\\\\.|\\\\?|!\")[[1]])))\n}\n", "\n  # Your code here\n  S\
    \ <- strsplit(S, \"\\\\.\")\n  S <- unlist(S)\n  S <- strsplit(S, \"\\\\?\")\n\
    \  S <- unlist(S)\n  S <- strsplit(S, \"\\\\!\")\n  S <- unlist(S)\n  S <- strsplit(S,\
    \ \" \")\n  S <- unlist(S)\n  S <- S[S == \"I\"]\n  return(length(S))\n}\n", "\n\
    \  # Your code here\n  return(sum(grepl(\"^I\", strsplit(S, \"\\\\.|\\\\?|!\"\
    )[[1]])))\n}\n", "\n  # Your code here\n  # Split the string into sentences\n\
    \  sentences <- strsplit(S, \"\\\\.|\\\\?|!\")[[1]]\n  # Count the number of sentences\
    \ that start with \"I\"\n  sum(grepl(\"^I\", sentences))\n}\n", "\n  # your code\
    \ here\n  return(0)\n}\n", "\n  # Your code here\n  return(0)\n}\n", "\n  # YOUR\
    \ CODE HERE\n  return(sum(grepl(\"^I\", strsplit(S, \"\\\\.|\\\\?|!\")[[1]])))\n\
    }\n", "\n  # Your code here\n  return(0)\n}\n", "\n  # your code here\n  return(sum(grepl(\"\
    ^I\",unlist(strsplit(S, split=\"[.?!]\")))))\n}\n", "\n  # Your code here\n  #\
    \ Split the string into sentences\n  sentences <- strsplit(S, \"\\\\.|\\\\?|!\"\
    )[[1]]\n  # Count the number of sentences that start with \"I\"\n  sum(substr(sentences,\
    \ 1, 1) == \"I\")\n}\n", "\n  # your code here\n  return(0)\n}\n", "\n  # Your\
    \ code here\n  return(length(grep(\"^I\", unlist(strsplit(S, \"[.?!]\")))))\n\
    }\n", "\n  # Your code here\n  # You can use the function strsplit() to split\
    \ the string into sentences.\n  # You can use the function str_detect() to detect\
    \ the word \"I\".\n  # You can use the function sum() to count the number of boredoms.\n\
    \  # You can use the function paste() to concatenate the sentences.\n  # You can\
    \ use the function str_replace() to replace the '.', '?' or '!'\n  # with a space.\n\
    \  # You can use the function str_trim() to trim the spaces.\n  # You can use\
    \ the function str_to_lower() to convert the string to lower case.\n  # You can\
    \ use the function str_split() to split the string into words.\n  # You can use\
    \ the function str_c() to concatenate the words.\n  # You can use the function\
    \ str_count() to count the number of words.\n  # You can use the function str_sub()\
    \ to extract the first word.\n  # You can use the function str_length() to count\
    \ the number of characters.\n  # You can use the function str_subset() to extract\
    \ the words that start with\n  # the letter 'a'.\n  # You can use the function\
    \ str_sub() to extract the first word.\n  # You can use the function str_sub()\
    \ to extract the first word.\n  # You can use the function str_sub() to extract\
    \ the first word.\n  # You can use the function str_sub() to extract the first\
    \ word.\n  # You can use the function str_sub() to extract the first word.\n \
    \ # You can use the function str_sub() to extract the first word.\n  # You can\
    \ use the function str_sub() to extract the first word.\n  # You can use the function\
    \ str_sub() to extract the first word.\n  # You can use the function str_sub()\
    \ to extract the first word.\n  # You can use the function str_sub() to extract\
    \ the first word.\n  # You can use the function str_sub() to extract the first\
    \ word.\n  # You can use the function str_sub() to extract the first word.\n \
    \ # You can use the function str_sub() to extract the first word.\n  # You can\
    \ use", "\n  # Your code here\n  count <- 0\n  for (i in 1:length(S)){\n    if\
    \ (substr(S[i],1,1) == \"I\"){\n      count <- count + 1\n    }\n  }\n  return(count)\n\
    }\n", "\n  # Your code here\n  return(0)\n}\n", "\n  # Your code here\n  return(0)\n\
    }\n", "\n  # Your code here\n}\n", "\n  # YOUR CODE HERE\n  return(0)\n}\n", "\n\
    \  boredoms <- str_count(S, \"I\")\n  return(boredoms)\n}\n", "\n  # your code\
    \ here\n}\n", "\n  # Your code here\n  return(sum(grepl(\"^I\", unlist(strsplit(S,\
    \ \"[.?!]\")))))\n}\n", "\n  # Your code here\n  return(sum(grepl(\"^I\", unlist(strsplit(S,\
    \ \"[.?!]\")))))\n}\n", "\n  # your code here\n  return(0)\n}\n", "\n  # Your\
    \ code here\n  return(0)\n}\n", "\n  # Your code here\n  return(0)\n}\n", "\n\
    \  # Your code here\n  # Split the string into sentences\n  sentences <- strsplit(S,\
    \ \"\\\\.|\\\\?|!\")[[1]]\n  # Count the number of sentences that start with \"\
    I\"\n  sum(grepl(\"^I\", sentences))\n}\n", "\n  # your code here\n  return(sum(grepl(\"\
    ^I\", unlist(strsplit(S, \"[.?!]\")))))\n}\n", "\n  # Your code here\n  return(0)\n\
    }\n", "\n  # Your code here\n  return(0)\n}\n", "\n  # your code here\n  return(0)\n\
    }\n", "\n  # Your code here\n  # Split the string into sentences\n  sentences\
    \ <- strsplit(S, split = \"\\\\.|\\\\?|!\")[[1]]\n  # Count the number of sentences\
    \ that start with \"I\"\n  sum(grepl(\"^I\", sentences))\n}\n", "\n  S <- strsplit(S,\
    \ \"\\\\.|\\\\?|!\")[[1]]\n  sum(grepl(\"^I\", S))\n}\n", "\n  # your code here\n\
    \  return(sum(grepl(\"^I\", unlist(strsplit(S, \"[.?!]\")))))\n}\n", "\n  # Your\
    \ code here\n  count <- 0\n  for (i in 1:length(strsplit(S, \"\\\\.\")[[1]]))\
    \ {\n    if (strsplit(strsplit(S, \"\\\\.\")[[1]][i], \" \")[[1]][1] == \"I\"\
    ) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n", "\n  # your\
    \ code here\n  return(0)\n}\n", "\n  # your code here\n  # split the string into\
    \ sentences\n  sentences <- strsplit(S, \"\\\\.|\\\\?|!\")[[1]]\n  # count the\
    \ number of sentences that start with \"I\"\n  sum(grepl(\"^I\", sentences))\n\
    }\n", "\n  # Your code here\n  # Hint: use strsplit() and length()\n  # Hint:\
    \ use grepl() to check if a string starts with \"I\"\n  # Hint: use sum() to sum\
    \ up a vector of numbers\n  # Hint: use unlist() to convert a list to a vector\n\
    \  # Hint: use strsplit() to split a string into a list of strings\n}\n", "\n\
    \  # Your code here\n  S <- strsplit(S, \"\\\\.|\\\\?|!\")[[1]]\n  S <- S[S !=\
    \ \"\"]\n  S <- strsplit(S, \" \")\n  S <- sapply(S, function(x) x[1] == \"I\"\
    )\n  sum(S)\n}\n", "\n  # Your code here\n  # Split the string into sentences\n\
    \  sentences <- strsplit(S, \"\\\\.|\\\\?|\\\\!\")[[1]]\n  # Count the number\
    \ of sentences that start with \"I\"\n  sum(grepl(\"^\\\\s*I\", sentences))\n\
    }\n", "\n  # Your code here\n  return(sum(grepl(\"^I\", unlist(strsplit(S, \"\
    [.?!]\")))))\n}\n", "\n  # your code here\n}\n", "\n  # Your code here\n  return(0)\n\
    }\n", "\n  # Your code here\n  # Hint: use strsplit() and length()\n  # Hint:\
    \ use grepl() to find the \"I\"\n  # Hint: use sum() to count the number of \"\
    I\"\n  # Hint: use strsplit() to split the string into sentences\n  # Hint: use\
    \ grepl() to find the \"I\" in each sentence\n  # Hint: use sum() to count the\
    \ number of \"I\" in each sentence\n  # Hint: use sum() to count the number of\
    \ \"I\" in each sentence\n  # Hint: use sum() to count the number of \"I\" in\
    \ each sentence\n  # Hint: use sum() to count the number of \"I\" in each sentence\n\
    \  # Hint: use sum() to count the number of \"I\" in each sentence\n  # Hint:\
    \ use sum() to count the number of \"I\" in each sentence\n  # Hint: use sum()\
    \ to count the number of \"I\" in each sentence\n  # Hint: use sum() to count\
    \ the number of \"I\" in each sentence\n  # Hint: use sum() to count the number\
    \ of \"I\" in each sentence\n  # Hint: use sum() to count the number of \"I\"\
    \ in each sentence\n  # Hint: use sum() to count the number of \"I\" in each sentence\n\
    \  # Hint: use sum() to count the number of \"I\" in each sentence\n  # Hint:\
    \ use sum() to count the number of \"I\" in each sentence\n  # Hint: use sum()\
    \ to count the number of \"I\" in each sentence\n  # Hint: use sum() to count\
    \ the number of \"I\" in each sentence\n  # Hint: use sum() to count the number\
    \ of \"I\" in each sentence\n  # Hint: use sum() to count the number of \"I\"\
    \ in each sentence\n  # Hint: use sum() to count the number of \"I\" in each sentence\n\
    \  # Hint: use sum() to count the number of \"I\" in each sentence\n  # Hint:\
    \ use sum() to count the number of \"I\" in each sentence\n  # Hint: use sum()\
    \ to count the number of \"I\" in each sentence\n  # H", "\n  # your code here\n\
    \  return(length(grep(\"^I\", unlist(strsplit(S, \"[.?!]\")))))\n}\n", "\n  return(length(grep(\"\
    ^I\", unlist(strsplit(S, \"[.?!]\")))))\n}\n", "\n  # your code here\n}\n", "\n\
    \  # Your code here\n  return(0)\n}\n", "\n  # Your code here\n  # Split the string\
    \ into sentences\n  sentences <- unlist(strsplit(S, \"\\\\.|\\\\?|!\"))\n  # Count\
    \ the number of sentences that start with \"I\"\n  sum(grepl(\"^I\", sentences))\n\
    }\n", "\n  # YOUR CODE HERE\n  return(0)\n}\n", "\n  # Your code here\n  return(0)\n\
    }\n", "\n  # Your code here\n  S <- strsplit(S, split = \" \")[[1]]\n  S <- S[S\
    \ == \"I\"]\n  return(length(S))\n}\n", "\n  # Your code here\n  # Split the string\
    \ by '.', '?' or '!'\n  # Count the number of sentences that start with 'I'\n\
    }\n"]
stop_tokens:
- "\n#"
- "\n```"
