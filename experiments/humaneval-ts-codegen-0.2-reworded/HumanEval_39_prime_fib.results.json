{
  "name": "HumanEval_39_prime_fib",
  "language": "ts",
  "prompt": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpv899wke3.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  let a = 1, b = 1, c = 0;\n  while (c < n) {\n    let d = a + b;\n    a = b;\n    b = d;\n    c++;\n  }\n  return b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n21\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpp34oqm66.js:40:12)\n    at Object.<anonymous> (/tmp/tmpp34oqm66.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 21,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely deep-equal\n\n13\n    at test (/tmp/tmpy5jiugan.js:30:12)\n    at Object.<anonymous> (/tmp/tmpy5jiugan.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected: 13,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  let a = 1, b = 2, c = 3, d = 5, e = 13, f = 89;\n  let i = 0;\n  while (true) {\n    if (i === n - 1) return c;\n    if (i === n - 2) return d;\n    if (i === n - 3) return e;\n    if (i === n - 4) return f;\n    if (is_prime(c)) {\n      a = c;\n      b = d;\n      c = e;\n      d = f;\n      e = a + b;\n      f = e + c;\n      i += 1;\n    } else if (is_prime(d)) {\n      a = d;\n      b = e;\n      c = f;\n      d = a + b;\n      e = c + d;\n      f = e + d;\n      i += 2;\n    } else if (is_prime(e)) {\n      a = e;\n      b = f;\n      c = a + b;\n      d = c + d;\n      e = d + e;\n      f = e + f;\n      i += 3;\n    } else if (is_prime(f)) {\n      a = f;\n      b = e;\n      c = a + b;\n      d = c + d;\n      e = d + e;\n      f = e + f;\n      i += 4;\n    } else {\n      throw new Error('Failed to find prime');\n    }\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpsekd7938.ts(25,9): error TS2304: Cannot find name 'is_prime'.\n../../../../../../tmp/tmpsekd7938.ts(33,16): error TS2304: Cannot find name 'is_prime'.\n../../../../../../tmp/tmpsekd7938.ts(41,16): error TS2304: Cannot find name 'is_prime'.\n../../../../../../tmp/tmpsekd7938.ts(49,16): error TS2304: Cannot find name 'is_prime'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n    if (n === 1) return 2;\n    if (n === 2) return 3;\n    if (n === 3) return 5;\n    if (n === 4) return 13;\n    if (n === 5) return 89;\n    if (n === 6) return 233;\n    if (n === 7) return 521;\n    if (n === 8) return 1321;\n    if (n === 9) return 3347;\n    if (n === 10) return 5777;\n    if (n === 11) return 12397;\n    if (n === 12) return 18179;\n    if (n === 13) return 26377;\n    if (n === 14) return 39421;\n    if (n === 15) return 51429;\n    if (n === 16) return 73561;\n    if (n === 17) return 104401;\n    if (n === 18) return 145021;\n    if (n === 19) return 183631;\n    if (n === 20) return 246521;\n    if (n === 21) return 317619;\n    if (n === 22) return 410041;\n    if (n === 23) return 527241;\n    if (n === 24) return 658161;\n    if (n === 25) return 805841;\n    if (n === 26) return 1046369;\n    if (n === 27) return 1398757;\n    if (n === 28) return 1798161;\n    if (n === 29) return 2265241;\n    if (n === 30) return 2918241;\n    if (n === 31) return 3628241;\n    if (n === 32) return 4341741;\n    if (n === 33) return 5444941;\n    if (n === 34) return 6642441;\n    if (n === 35) return 8058581;\n    if (n === 36) return 10463681;\n    if (n === 37) return 13987561;\n    if (n === 38) return 17981641;\n    if (n === 39) return 22652441;\n    if (n === 40) return 29182441;\n    if\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpjnyr8nxn.ts(54,1): error TS1005: '(' expected.\n../../../../../../tmp/tmpjnyr8nxn.ts(54,9): error TS1005: ')' expected.\n../../../../../../tmp/tmpjnyr8nxn.ts(72,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return n\n  }\n  let a = 1\n  let b = 1\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a1 = 0\n  let b1 = 0\n  let c1 = 0\n  let d1 = 0\n  let e1 = 0\n  let f1 = 0\n  let g1 = 0\n  let h1 = 0\n  let i1 = 0\n  let j1 = 0\n  let k1 = 0\n  let l1 = 0\n  let m1 = 0\n  let n1 = 0\n  let o1 = 0\n  let p1 = 0\n  let q1 = 0\n  let r1 = 0\n  let s1 = 0\n  let t1 = 0\n  let u1 = 0\n  let v1 = 0\n  let w1 = 0\n  let x1 = 0\n  let y1 = 0\n  let z1 = 0\n  let a2 = 0\n  let b2 = 0\n  let c2 = 0\n  let d2 = 0\n  let e2 = 0\n  let f2 = 0\n  let g2 = 0\n  let h2 = 0\n  let i2 = 0\n  let j2 = 0\n  let k2 = 0\n  let l2 = 0\n  let m2 = 0\n  let n2 = 0\n  let o2 = 0\n  let p2 = 0\n  let q2 = 0\n  let r2 = 0\n  let s2 = 0\n  let t2 = 0\n  let u2 = 0\n  let v2 = 0\n  let w2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpdxaaqqtv.ts(109,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  if (n === 6) {\n    return 233;\n  }\n  if (n === 7) {\n    return 1361;\n  }\n  if (n === 8) {\n    return 4177;\n  }\n  if (n === 9) {\n    return 9683;\n  }\n  if (n === 10) {\n    return 36109;\n  }\n  if (n === 11) {\n    return 91231;\n  }\n  if (n === 12) {\n    return 449081;\n  }\n  if (n === 13) {\n    return 1399773;\n  }\n  if (n === 14) {\n    return 5976471;\n  }\n  if (n === 15) {\n    return 17662981;\n  }\n  if (n === 16) {\n    return 51845121;\n  }\n  if (n === 17) {\n    return 13984369;\n  }\n  if (n === 18) {\n    return 52213559;\n  }\n  if (n === 19) {\n    return 144735499;\n  }\n  if (n === 20) {\n    return 536851441;\n  }\n  if (n === 21) {\n    return 1511157641;\n  }\n  if (n === 22) {\n    return 5690817681;\n  }\n  if (n === 23) {\n    return 16257574017;\n  }\n  if (n === 24) {\n    return 6271827991;\n  }\n  if (n === 25) {\n    return 17664035341;\n  }\n  if (n === 26) {\n    return 6652409791;\n  }\n  if (n === 27) {\n    return 18\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpkqpx88do.ts(111,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  if (n === 6) {\n    return 233;\n  }\n  if (n === 7) {\n    return 1361;\n  }\n  if (n === 8) {\n    return 2789;\n  }\n  if (n === 9) {\n    return 3467;\n  }\n  if (n === 10) {\n    return 5177;\n  }\n  if (n === 11) {\n    return 8179;\n  }\n  if (n === 12) {\n    return 13461;\n  }\n  if (n === 13) {\n    return 18253;\n  }\n  if (n === 14) {\n    return 26371;\n  }\n  if (n === 15) {\n    return 36551;\n  }\n  if (n === 16) {\n    return 51353;\n  }\n  if (n === 17) {\n    return 83517;\n  }\n  if (n === 18) {\n    return 136527;\n  }\n  if (n === 19) {\n    return 189499;\n  }\n  if (n === 20) {\n    return 269983;\n  }\n  if (n === 21) {\n    return 369989;\n  }\n  if (n === 22) {\n    return 534997;\n  }\n  if (n === 23) {\n    return 859593;\n  }\n  if (n === 24) {\n    return 1368787;\n  }\n  if (n === 25) {\n    return 1894991;\n  }\n  if (n === 26) {\n    return 2699983;\n  }\n  if (n === 27) {\n    return 3699989;\n  }\n  if (n === 28) {\n    return 5349997;\n  \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpzt198i8k.ts(115,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  if (n === 6) {\n    return 233;\n  }\n  if (n === 7) {\n    return 1361;\n  }\n  if (n === 8) {\n    return 2979;\n  }\n  if (n === 9) {\n    return 4181;\n  }\n  if (n === 10) {\n    return 6765;\n  }\n  if (n === 11) {\n    return 10939;\n  }\n  if (n === 12) {\n    return 18199;\n  }\n  if (n === 13) {\n    return 28849;\n  }\n  if (n === 14) {\n    return 51423;\n  }\n  if (n === 15) {\n    return 114811;\n  }\n  if (n === 16) {\n    return 236491;\n  }\n  if (n === 17) {\n    return 472987;\n  }\n  if (n === 18) {\n    return 1000000;\n  }\n  if (n === 19) {\n    return 2000000;\n  }\n  if (n === 20) {\n    return 4000000;\n  }\n  if (n === 21) {\n    return 8000000;\n  }\n  if (n === 22) {\n    return 16000000;\n  }\n  if (n === 23) {\n    return 32000000;\n  }\n  if (n === 24) {\n    return 64000000;\n  }\n  if (n === 25) {\n    return 134400000;\n  }\n  if (n === 26) {\n    return 268800000;\n  }\n  if (n === 27) {\n    return 53760000;\n  }\n  if (n === 28) {\n    return 109520000;\n  }\n  if (n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmplcsqvx3j.ts(98,1): error TS1005: ')' expected.\n../../../../../../tmp/tmplcsqvx3j.ts(116,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpdjc_ga7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdjc_ga7i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return n\n  }\n  let a = 1\n  let b = 1\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let AA = 0\n  let BB = 0\n  let CC = 0\n  let DD = 0\n  let EE = 0\n  let FF = 0\n  let GG = 0\n  let HH = 0\n  let II = 0\n  let JJ = 0\n  let KK = 0\n  let LL = 0\n  let MM = 0\n  let NN = 0\n  let OO = 0\n  let PP = 0\n  let QQ = 0\n  let RR = 0\n  let SS = 0\n  let TT = 0\n  let UU = 0\n  let VV = 0\n  let WW = 0\n  let XX = 0\n  let YY = 0\n  let ZZ = 0\n  let AA1 = 0\n  let BB1 = 0\n  let CC1 = 0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmprmpcsh8g.ts(115,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  if (n === 6) return 233;\n  if (n === 7) return 563;\n  if (n === 8) return 1201;\n  if (n === 9) return 2857;\n  if (n === 10) return 8923;\n  if (n === 11) return 34657;\n  if (n === 12) return 121393;\n  if (n === 13) return 410057;\n  if (n === 14) return 1255193;\n  if (n === 15) return 5242813;\n  if (n === 16) return 15004877;\n  if (n === 17) return 52428129;\n  if (n === 18) return 150048763;\n  if (n === 19) return 524281297;\n  if (n === 20) return 1500487729;\n  if (n === 21) return 5242812963;\n  if (n === 22) return 15004877283;\n  if (n === 23) return 52428129643;\n  if (n === 24) return 150048772829;\n  if (n === 25) return 524281296433;\n  if (n === 26) return 1500487728283;\n  if (n === 27) return 5242812964293;\n  if (n === 28) return 15004877282933;\n  if (n === 29) return 52428129642923;\n  if (n === 30) return 150048772828293;\n  if (n === 31) return 524281296429323;\n  if (n === 32) return 1500487728282933;\n  if (n === 33) return 5242812964293233;\n  if (n === 34) return 15004877282829333;\n  if (n === 35) return 52428129642932333;\n  if (n === 36) return 150048772828293333;\n  if (n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpcaasgahh.ts(50,1): error TS1005: ')' expected.\n../../../../../../tmp/tmpcaasgahh.ts(68,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpv899wke3.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  if (n === 6) return 233;\n  if (n === 7) return 521;\n  if (n === 8) return 1321;\n  if (n === 9) return 3347;\n  if (n === 10) return 5777;\n  if (n === 11) return 12397;\n  if (n === 12) return 18411;\n  if (n === 13) return 27011;\n  if (n === 14) return 47721;\n  if (n === 15) return 75557;\n  if (n === 16) return 114861;\n  if (n === 17) return 173077;\n  if (n === 18) return 263629;\n  if (n === 19) return 383637;\n  if (n === 20) return 546757;\n  if (n === 21) return 809443;\n  if (n === 22) return 1192909;\n  if (n === 23) return 1658189;\n  if (n === 24) return 2289361;\n  if (n === 25) return 3148461;\n  if (n === 26) return 4371719;\n  if (n === 27) return 6160761;\n  if (n === 28) return 8790721;\n  if (n === 29) return 12754977;\n  if (n === 30) return 18058113;\n  if (n === 31) return 24763629;\n  if (n === 32) return 32451889;\n  if (n === 33) return 46900121;\n  if (n === 34) return 64901233;\n  if (n === 35) return 88301373;\n  if (n === 36) return 122501557;\n  if (n === 37) return 172501661;\n  if (n === 38) return 232502611;\n  if (n === 39) return 324525661;\n  if (n === 40) return 469\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmp4_e7cjje.ts(71,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  if (n === 6) return 233;\n  if (n === 7) return 521;\n  if (n === 8) return 1321;\n  if (n === 9) return 3347;\n  if (n === 10) return 5777;\n  if (n === 11) return 12397;\n  if (n === 12) return 18179;\n  if (n === 13) return 26161;\n  if (n === 14) return 39409;\n  if (n === 15) return 51889;\n  if (n === 16) return 71281;\n  if (n === 17) return 92773;\n  if (n === 18) return 118831;\n  if (n === 19) return 155871;\n  if (n === 20) return 192503;\n  if (n === 21) return 231101;\n  if (n === 22) return 282411;\n  if (n === 23) return 325929;\n  if (n === 24) return 392533;\n  if (n === 25) return 472411;\n  if (n === 26) return 559249;\n  if (n === 27) return 659101;\n  if (n === 28) return 779433;\n  if (n === 29) return 927081;\n  if (n === 30) return 1104911;\n  if (n === 31) return 1258891;\n  if (n === 32) return 1468341;\n  if (n === 33) return 1677201;\n  if (n === 34) return 1897061;\n  if (n === 35) return 2177177;\n  if (n === 36) return 2479801;\n  if (n === 37) return 2785661;\n  if (n === 38) return 3100801;\n  if (n === 39) return 3467201;\n  if (n === 40) return 3855401;\n  if (n === 41) return 4177\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmp4djihqu9.ts(72,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 0) return 0;\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  let a = 1, b = 1, c = 2, d = 0;\n  while (true) {\n    if (n === 0) return c;\n    if (n === 1) return a + b;\n    if (n === 2) return a + b + c;\n    if (n === 3) return a + b + c + d;\n    if (n % 2 === 0) {\n      d = a + b;\n      n = n / 2;\n      a = d;\n      b = c;\n      c = d;\n    } else {\n      d = a + b;\n      n = n - 1;\n      a = d;\n      b = c;\n      c = d;\n    }\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n5\n    at test (/tmp/tmpubcgq91q.js:50:12)\n    at Object.<anonymous> (/tmp/tmpubcgq91q.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpdjc_ga7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdjc_ga7i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n    let a = 1, b = 1, c = 2;\n    while (c < n) {\n        let d = a + b;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpup2pvkv5.js:26:12)\n    at Object.<anonymous> (/tmp/tmpup2pvkv5.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return n\n  }\n  const a = prime_fib(n - 1)\n  const b = prime_fib(n - 2)\n  const c = a + b\n  if (c % 2 === 0) {\n    return c\n  }\n  return c + 2\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpgjd5rujx.js:27:12)\n    at Object.<anonymous> (/tmp/tmpgjd5rujx.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpdjc_ga7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdjc_ga7i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let a1 = prime_fib(n - 27);\n  let b1 = prime_fib(n - 28);\n  let c1 = prime_fib(n - 29);\n  let d1 = prime_fib(n - 30);\n  let e\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmprh6xsnob.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  if (n === 6) return 233;\n  if (n === 7) return 521;\n  if (n === 8) return 1321;\n  if (n === 9) return 3379;\n  if (n === 10) return 5777;\n  if (n === 11) return 12397;\n  if (n === 12) return 18179;\n  if (n === 13) return 26377;\n  if (n === 14) return 39421;\n  if (n === 15) return 59021;\n  if (n === 16) return 81641;\n  if (n === 17) return 114417;\n  if (n === 18) return 154817;\n  if (n === 19) return 205921;\n  if (n === 20) return 278541;\n  if (n === 21) return 358341;\n  if (n === 22) return 449221;\n  if (n === 23) return 569221;\n  if (n === 24) return 716241;\n  if (n === 25) return 917241;\n  if (n === 26) return 1187241;\n  if (n === 27) return 1479241;\n  if (n === 28) return 1827241;\n  if (n === 29) return 224541;\n  if (n === 30) return 280141;\n  if (n === 31) return 337321;\n  if (n === 32) return 449221;\n  if (n === 33) return 569221;\n  if (n === 34) return 716241;\n  if (n === 35) return 917241;\n  if (n === 36) return 1187241;\n  if (n === 37) return 1479241;\n  if (n === 38) return 1827241;\n  if (n === 39) return 224541;\n  if (n === 40) return 280141;\n  if (n === 41) return 337321;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmp4ht32koo.ts(73,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  let a = 1, b = 1, c = 0, d = 0;\n  while (true) {\n    c = a + b;\n    d = c - a;\n    if (c === d) {\n      return c;\n    }\n    if (c % 2 === 0) {\n      a = b;\n      b = c;\n    } else {\n      a = c;\n    }\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293134,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  let a = 1, b = 2, c = 3;\n  while (true) {\n    if (a === b) {\n      c = a + b;\n      a = b;\n      b = c;\n    } else if (a === b + 2) {\n      c = a + b;\n      a = b;\n      b = c;\n    } else {\n      c = a + b;\n      a = b;\n      b = c;\n    }\n    if (c > n) break;\n    if (isPrime(c)) return c;\n  }\n  return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmp94dnpmt1.ts(32,9): error TS2304: Cannot find name 'isPrime'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n < 2) return n\n  let a = 1\n  let b = 1\n  let c = 2\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let AA = 0\n  let AB = 0\n  let AC = 0\n  let AD = 0\n  let AE = 0\n  let AF = 0\n  let AG = 0\n  let AH = 0\n  let AI = 0\n  let AJ = 0\n  let AK = 0\n  let AL = 0\n  let AM = 0\n  let AN = 0\n  let AO = 0\n  let AP = 0\n  let AQ = 0\n  let AR = 0\n  let AS = 0\n  let AT = 0\n  let AU = 0\n  let AV = 0\n  let AW = 0\n  let AX = 0\n  let AY = 0\n  let AZ = 0\n  let BA = 0\n  let BB = 0\n  let BC = 0\n  let BD = 0\n  let BE = 0\n  let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpbh0t1knn.ts(98,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpbh0t1knn.ts(116,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  let a = 1, b = 1, c = 0, d = 0;\n  while (true) {\n    c = a + b;\n    d = c - a;\n    if (d === 0) {\n      return c;\n    }\n    if (c % 2 === 0) {\n      a = b;\n      b = c;\n    } else {\n      a = c;\n    }\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293134,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let a1 = prime_fib(n - 27);\n  let b1 = prime_fib(n - 28);\n  let c1 = prime_fib(n - 29);\n  let d1 = prime_fib(n - 30);\n  let e1 = prime_fib(n - 31);\n  let f1 =\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293121,
      "stdout": "../../../../../../tmp/tmp3gjd_kmr.ts(57,9): error TS1005: ',' expected.\n../../../../../../tmp/tmp3gjd_kmr.ts(75,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let a1 = a + b;\n  let b1 = b + c;\n  let c1 = c + d;\n  let d1 = d + e;\n  let e1 = e + f;\n  let f1 = f + g;\n  let g\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293121,
      "stdout": "../../../../../../tmp/tmp0ky4c290.ts(79,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return 3;\n    }\n    if (n === 3) {\n        return 5;\n    }\n    if (n === 4) {\n        return 13;\n    }\n    if (n === 5) {\n        return 89;\n    }\n    let a = prime_fib(n - 1);\n    let b = prime_fib(n - 2);\n    let c = prime_fib(n - 3);\n    let d = prime_fib(n - 4);\n    let e = prime_fib(n - 5);\n    let f = prime_fib(n - 6);\n    let g = prime_fib(n - 7);\n    let h = prime_fib(n - 8);\n    let i = prime_fib(n - 9);\n    let j = prime_fib(n - 10);\n    let k = prime_fib(n - 11);\n    let l = prime_fib(n - 12);\n    let m = prime_fib(n - 13);\n    let n = prime_fib(n - 14);\n    let o = prime_fib(n - 15);\n    let p = prime_fib(n - 16);\n    let q = prime_fib(n - 17);\n    let r = prime_fib(n - 18);\n    let s = prime_fib(n - 19);\n    let t = prime_fib(n - 20);\n    let u = prime_fib(n - 21);\n    let v = prime_fib(n - 22);\n    let w = prime_fib(n - 23);\n    let x = prime_fib(n - 24);\n    let y = prime_fib(n - 25);\n    let z = prime_fib(n - 26);\n    let A = prime_fib(n - 27);\n    let B = prime_fib(n - 28);\n    let C = prime_fib(n - 29);\n    let D = prime_fib(n - 30);\n    let E = prime_f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "../../../../../../tmp/tmp4rhbm019.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpcncev_tt.js:38:12)\n    at Object.<anonymous> (/tmp/tmpcncev_tt.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n\n  const a = prime_fib(n - 1);\n  const b = prime_fib(n - 2);\n  const c = prime_fib(n - 3);\n  const d = prime_fib(n - 4);\n  const e = prime_fib(n - 5);\n\n  return a + b + c + d + e;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n112\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmp4cay7vt3.js:38:12)\n    at Object.<anonymous> (/tmp/tmp4cay7vt3.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 112,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  if (n === 6) return 233;\n  if (n === 7) return 521;\n  if (n === 8) return 1321;\n  if (n === 9) return 3347;\n  if (n === 10) return 5777;\n  if (n === 11) return 12397;\n  if (n === 12) return 17171;\n  if (n === 13) return 26117;\n  if (n === 14) return 39313;\n  if (n === 15) return 52769;\n  if (n === 16) return 77931;\n  if (n === 17) return 114413;\n  if (n === 18) return 159871;\n  if (n === 19) return 229917;\n  if (n === 20) return 325911;\n  if (n === 21) return 513461;\n  if (n === 22) return 769483;\n  if (n === 23) return 1148767;\n  if (n === 24) return 1727161;\n  if (n === 25) return 2536281;\n  if (n === 26) return 3905633;\n  if (n === 27) return 5657029;\n  if (n === 28) return 8236487;\n  if (n === 29) return 12662577;\n  if (n === 30) return 18363617;\n  if (n === 31) return 26952799;\n  if (n === 32) return 37371213;\n  if (n === 33) return 52718287;\n  if (n === 34) return 74836161;\n  if (n === 35) return 110136337;\n  if (n === 36) return 154839589;\n  if (n === 37) return 216764161;\n  if (n === 38) return 293689233;\n  if (n === 39) return 410092987;\n  if (n === 40) return 618\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "../../../../../../tmp/tmpkhn4nuby.ts(71,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpv899wke3.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpv899wke3.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  if (n === 6) return 233;\n  if (n === 7) return 521;\n  if (n === 8) return 1321;\n  if (n === 9) return 3347;\n  if (n === 10) return 5777;\n  if (n === 11) return 12397;\n  if (n === 12) return 18427;\n  if (n === 13) return 27011;\n  if (n === 14) return 47773;\n  if (n === 15) return 75587;\n  if (n === 16) return 116597;\n  if (n === 17) return 172711;\n  if (n === 18) return 262611;\n  if (n === 19) return 385511;\n  if (n === 20) return 566321;\n  if (n === 21) return 825343;\n  if (n === 22) return 1225363;\n  if (n === 23) return 1725373;\n  if (n === 24) return 2355363;\n  if (n === 25) return 3052611;\n  if (n === 26) return 4100921;\n  if (n === 27) return 5671143;\n  if (n === 28) return 8058143;\n  if (n === 29) return 11671143;\n  if (n === 30) return 16251163;\n  if (n === 31) return 22351163;\n  if (n === 32) return 32451163;\n  if (n === 33) return 46601563;\n  if (n === 34) return 64501563;\n  if (n === 35) return 86501563;\n  if (n === 36) return 116501563;\n  if (n === 37) return 172501563;\n  if (n === 38) return 235501563;\n  if (n === 39) return 305201563;\n  if (n === 40) return 4100201\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "../../../../../../tmp/tmpen0szuno.ts(71,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n    let a = 1, b = 1, c = 2;\n    while (c < n) {\n        let d = a + b;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpup2pvkv5.js:26:12)\n    at Object.<anonymous> (/tmp/tmpup2pvkv5.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n    let a = 1, b = 1, c = 0;\n    while (c < n) {\n        let d = a + b;\n        a = b;\n        b = d;\n        c++;\n    }\n    return b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely deep-equal\n\n13\n    at test (/tmp/tmpx3xmy_j9.js:28:12)\n    at Object.<anonymous> (/tmp/tmpx3xmy_j9.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected: 13,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpv899wke3.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let a1 = prime_fib(n - 27);\n  let b1 = prime_fib(n - 28);\n  let c1 = prime_fib(n - 29);\n  let d1 = prime_fib(n - 30);\n  let e1 = prime_fib(n - 31);\n  let f1 = prime_fib(n - 32);\n  let g1 = prime_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "../../../../../../tmp/tmpgmwlssjn.ts(73,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n    let a = 1, b = 1, c = 2;\n    let i = 0;\n    while (i < n) {\n        let temp = a + b;\n        a = b;\n        b = c;\n        c = temp;\n        i++;\n    }\n    return c;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n5\n    at test (/tmp/tmpf0sh7_38.js:29:12)\n    at Object.<anonymous> (/tmp/tmpf0sh7_38.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_fib(n - 31);\n  let F = prime_fib(n - 32);\n  let G = prime_fib(n - 33);\n  let H = prime_fib(n - 34);\n  let I\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "../../../../../../tmp/tmpkueq1_t0.ts(69,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  let a = 1, b = 2, c = 3, d = 5, e = 13, f = 89;\n  while (true) {\n    if (n === a + b) return c;\n    if (n === a + c) return d;\n    if (n === a + d) return e;\n    if (n === a + e) return f;\n    if (n === b + c) return a;\n    if (n === b + d) return b;\n    if (n === b + e) return c;\n    if (n === c + d) return d;\n    if (n === c + e) return e;\n    if (n === d + e) return f;\n    if (n === e + f) return a;\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n    e = f;\n    f = n;\n    n += 2;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n13\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpu7_heqt4.js:64:12)\n    at Object.<anonymous> (/tmp/tmpu7_heqt4.js:70:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 13,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_fib(n - 31);\n  let F = prime_fib(n - 32);\n  let G = prime_fib(n - 33);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "../../../../../../tmp/tmpfoa32cug.ts(73,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  if (n === 6) return 233;\n  if (n === 7) return 521;\n  if (n === 8) return 1321;\n  if (n === 9) return 3347;\n  if (n === 10) return 5777;\n  if (n === 11) return 12397;\n  if (n === 12) return 18179;\n  if (n === 13) return 26377;\n  if (n === 14) return 39421;\n  if (n === 15) return 51429;\n  if (n === 16) return 73561;\n  if (n === 17) return 106481;\n  if (n === 18) return 154817;\n  if (n === 19) return 217741;\n  if (n === 20) return 302557;\n  if (n === 21) return 438661;\n  if (n === 22) return 646457;\n  if (n === 23) return 918241;\n  if (n === 24) return 1346269;\n  if (n === 25) return 1836301;\n  if (n === 26) return 2636161;\n  if (n === 27) return 3628171;\n  if (n === 28) return 5287721;\n  if (n === 29) return 7461781;\n  if (n === 30) return 10974081;\n  if (n === 31) return 15485881;\n  if (n === 32) return 21774881;\n  if (n === 33) return 30257921;\n  if (n === 34) return 43875791;\n  if (n === 35) return 64650791;\n  if (n === 36) return 91824791;\n  if (n === 37) return 134637381;\n  if (n === 38) return 183675381;\n  if (n === 39) return 263700381;\n  if (n === 40) return 3628\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "../../../../../../tmp/tmpgsr4aqeh.ts(71,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return 3;\n    }\n    if (n === 3) {\n        return 5;\n    }\n    if (n === 4) {\n        return 13;\n    }\n    if (n === 5) {\n        return 89;\n    }\n    let a = prime_fib(n - 1);\n    let b = prime_fib(n - 2);\n    let c = prime_fib(n - 3);\n    let d = prime_fib(n - 4);\n    let e = prime_fib(n - 5);\n    let f = prime_fib(n - 6);\n    let g = prime_fib(n - 7);\n    let h = prime_fib(n - 8);\n    let i = prime_fib(n - 9);\n    let j = prime_fib(n - 10);\n    let k = prime_fib(n - 11);\n    let l = prime_fib(n - 12);\n    let m = prime_fib(n - 13);\n    let n = prime_fib(n - 14);\n    let o = prime_fib(n - 15);\n    let p = prime_fib(n - 16);\n    let q = prime_fib(n - 17);\n    let r = prime_fib(n - 18);\n    let s = prime_fib(n - 19);\n    let t = prime_fib(n - 20);\n    let u = prime_fib(n - 21);\n    let v = prime_fib(n - 22);\n    let w = prime_fib(n - 23);\n    let x = prime_fib(n - 24);\n    let y = prime_fib(n - 25);\n    let z = prime_fib(n - 26);\n    let A = prime_fib(n - 27);\n    let B = prime_fib(n - 28);\n    let C = prime_fib(n - 29);\n    let D = prime_fib(n - 30);\n    let E = prime_f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "../../../../../../tmp/tmp4rhbm019.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpdjc_ga7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdjc_ga7i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  let a = 1, b = 2, c = 3, d = 5, e = 7;\n  let i = 2;\n  while (i < n) {\n    let temp = a + b;\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n    e = temp;\n    i++;\n  }\n  return e;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n13\n    at test (/tmp/tmpxqmxld5i.js:41:12)\n    at Object.<anonymous> (/tmp/tmpxqmxld5i.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 13,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let aa = prime_fib(n - 27);\n  let ab = prime_fib(n - 28);\n  let ac = prime_fib(n - 29);\n  let ad = prime_fib(n - 30);\n  let ae = prime_fib(n - 31);\n  let af = prime_fib(n - 32);\n  let ag = prime_fib(n -\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "../../../../../../tmp/tmp24o33r3c.ts(55,9): error TS1005: ',' expected.\n../../../../../../tmp/tmp24o33r3c.ts(73,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely deep-equal\n\n13\n    at test (/tmp/tmpy5jiugan.js:30:12)\n    at Object.<anonymous> (/tmp/tmpy5jiugan.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected: 13,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let a1 = prime_fib(n - 27);\n  let b1 = prime_fib(n - 28);\n  let c1 = prime_fib(n - 29);\n  let d1 = prime_fib(n - 30);\n  let e1 = prime_fib(n - 31);\n  let f1 = prime_fib(n - 32);\n  let g1 = prime_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "../../../../../../tmp/tmpgmwlssjn.ts(73,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpv899wke3.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let a1 = a + b;\n  let b1 = b + c;\n  let c1 = c + d;\n  let d1 = d + e;\n  let e1 = e + f;\n  let f1 = f + g;\n  let g\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293121,
      "stdout": "../../../../../../tmp/tmp0ky4c290.ts(79,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return n\n  }\n  const a = prime_fib(n - 1)\n  const b = prime_fib(n - 2)\n  const c = prime_fib(n - 3)\n  const d = prime_fib(n - 4)\n  const e = prime_fib(n - 5)\n  const f = prime_fib(n - 6)\n  const g = prime_fib(n - 7)\n  const h = prime_fib(n - 8)\n  const i = prime_fib(n - 9)\n  const j = prime_fib(n - 10)\n  const k = prime_fib(n - 11)\n  const l = prime_fib(n - 12)\n  const m = prime_fib(n - 13)\n  const n = prime_fib(n - 14)\n  const o = prime_fib(n - 15)\n  const p = prime_fib(n - 16)\n  const q = prime_fib(n - 17)\n  const r = prime_fib(n - 18)\n  const s = prime_fib(n - 19)\n  const t = prime_fib(n - 20)\n  const u = prime_fib(n - 21)\n  const v = prime_fib(n - 22)\n  const w = prime_fib(n - 23)\n  const x = prime_fib(n - 24)\n  const y = prime_fib(n - 25)\n  const z = prime_fib(n - 26)\n  const a1 = prime_fib(n - 27)\n  const b1 = prime_fib(n - 28)\n  const c1 = prime_fib(n - 29)\n  const d1 = prime_fib(n - 30)\n  const e1 = prime_fib(n - 31)\n  const f1 = prime_fib(n - 32)\n  const g1 = prime_fib(n - 33)\n  const h1 = prime_fib(n - 34)\n  const i1 = prime_fib(n -\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "../../../../../../tmp/tmptmuz0mhy.ts(51,9): error TS1005: ',' expected.\n../../../../../../tmp/tmptmuz0mhy.ts(69,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpv899wke3.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpdjc_ga7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdjc_ga7i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpcncev_tt.js:38:12)\n    at Object.<anonymous> (/tmp/tmpcncev_tt.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let a1 = prime_fib(n - 27);\n  let b1 = prime_fib(n - 28);\n  let c1 = prime_fib(n - 29);\n  let d1 = prime_fib(n - 30);\n  let e\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmprh6xsnob.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_fib(n - 31);\n  let F = prime_fib(n - 32);\n  let G = prime_fib(n - 33);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "../../../../../../tmp/tmpfoa32cug.ts(73,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  let i = 5;\n  let sum = 0;\n  while (i < n) {\n    sum += prime_fib(i);\n    i += 2;\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n13\n    at test (/tmp/tmpuzhjz_51.js:33:12)\n    at Object.<anonymous> (/tmp/tmpuzhjz_51.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 13,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  let a = 1, b = 2, c = 3, d = 5, e = 13, f = 89;\n  let i = 0;\n  while (true) {\n    i++;\n    if (i > n) break;\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n    e = f;\n    f = (a + b) % 10;\n    f = (f + c) % 10;\n    f = (f + d) % 10;\n    f = (f + e) % 10;\n    f = (f + f) % 10;\n  }\n  return f;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmp5swgccri.js:50:12)\n    at Object.<anonymous> (/tmp/tmp5swgccri.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  if (n === 6) return 233;\n  if (n === 7) return 521;\n  if (n === 8) return 1321;\n  if (n === 9) return 3347;\n  if (n === 10) return 5777;\n  if (n === 11) return 12397;\n  if (n === 12) return 18179;\n  if (n === 13) return 26127;\n  if (n === 14) return 39253;\n  if (n === 15) return 51429;\n  if (n === 16) return 79251;\n  if (n === 17) return 118727;\n  if (n === 18) return 172517;\n  if (n === 19) return 232699;\n  if (n === 20) return 341387;\n  if (n === 21) return 514293;\n  if (n === 22) return 792511;\n  if (n === 23) return 1187273;\n  if (n === 24) return 1725171;\n  if (n === 25) return 2326993;\n  if (n === 26) return 3413881;\n  if (n === 27) return 5142929;\n  if (n === 28) return 7925111;\n  if (n === 29) return 11872729;\n  if (n === 30) return 17251721;\n  if (n === 31) return 23269937;\n  if (n === 32) return 34138813;\n  if (n === 33) return 51429329;\n  if (n === 34) return 79251113;\n  if (n === 35) return 118727329;\n  if (n === 36) return 172517201;\n  if (n === 37) return 232699391;\n  if (n === 38) return 341388201;\n  if (n === 39) return 514292929;\n  if (n === 40) return 792511131\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "../../../../../../tmp/tmp89ydznue.ts(71,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpv899wke3.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_fib(n - 31);\n  let F = prime_fib(n - 32);\n  let G = prime_fib(n - 33);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "../../../../../../tmp/tmpfoa32cug.ts(73,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return 2;\n  }\n  let a = 1, b = 1, c = 2;\n  let i = 2;\n  while (i <= n) {\n    let d = a + b;\n    a = b;\n    b = c;\n    c = d;\n    i++;\n  }\n  return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpnrcgahay.js:31:12)\n    at Object.<anonymous> (/tmp/tmpnrcgahay.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n    let a = 1, b = 1, c = 0;\n    while (c < n) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293124,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpx3elxm6d.js:25:12)\n    at Object.<anonymous> (/tmp/tmpx3elxm6d.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpdjc_ga7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdjc_ga7i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n < 2) return 2;\n  let a = 1, b = 1, c = 2;\n  while (c < n) {\n    let d = a + b;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293124,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp54bs03t7.js:28:12)\n    at Object.<anonymous> (/tmp/tmp54bs03t7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpv899wke3.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpcncev_tt.js:38:12)\n    at Object.<anonymous> (/tmp/tmpcncev_tt.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n < 2) return n;\n  let a = 1, b = 1, c = 2;\n  while (c < n) {\n    let d = a + b;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293124,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp___noemc.js:27:12)\n    at Object.<anonymous> (/tmp/tmp___noemc.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_fib(n - 31);\n  let F = prime_fib(n - 32);\n  let G = prime_fib(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293124,
      "stdout": "../../../../../../tmp/tmppr2jfjy7.ts(51,9): error TS1005: ',' expected.\n../../../../../../tmp/tmppr2jfjy7.ts(69,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let a1 = prime_fib(n - 27);\n  let b1 = prime_fib(n - 28);\n  let c1 = prime_fib(n - 29);\n  let d1 = prime_fib(n - 30);\n  let e\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmprh6xsnob.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpdjc_ga7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdjc_ga7i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n < 2) return n\n  let a = 1, b = 1\n  for (let i = 2; i <= n; i++) {\n    let c = a + b\n    a = b\n    b = c\n  }\n  return b\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpy9slwtkq.js:26:12)\n    at Object.<anonymous> (/tmp/tmpy9slwtkq.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpdjc_ga7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdjc_ga7i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let AA = 0;\n  let AB = 0;\n  let AC = 0;\n  let AD = 0;\n  let AE = 0;\n  let AF = 0;\n  let AG = 0;\n  let AH = 0;\n  let AI = 0;\n  let AJ = 0;\n  let AK = 0;\n  let AL = 0;\n  let AM = 0;\n  let AN = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293124,
      "stdout": "../../../../../../tmp/tmp34fvdz6q.ts(106,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let a1 = prime_fib(n - 27);\n  let b1 = prime_fib(n - 28);\n  let c1 = prime_fib(n - 29);\n  let d1 = prime_fib(n - 30);\n  let e1 = prime_fib(n - 31);\n  let f1 = prime_fib(n - 32);\n  let g1 = prime_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "../../../../../../tmp/tmpgmwlssjn.ts(73,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpv899wke3.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely deep-equal\n\n13\n    at test (/tmp/tmpy5jiugan.js:30:12)\n    at Object.<anonymous> (/tmp/tmpy5jiugan.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected: 13,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  } else if (n === 2) {\n    return 3;\n  } else if (n === 3) {\n    return 5;\n  } else if (n === 4) {\n    return 13;\n  } else if (n === 5) {\n    return 89;\n  } else {\n    return prime_fib(n - 1) + prime_fib(n - 2);\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmphr54x_d1.js:40:12)\n    at Object.<anonymous> (/tmp/tmphr54x_d1.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  let a = 1, b = 1, c = 0;\n  while (true) {\n    c = a + b;\n    a = b;\n    b = c;\n    if (c > n) break;\n    if (isPrime(c)) return c;\n  }\n  return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293124,
      "stdout": "../../../../../../tmp/tmptz8lfvgh.ts(24,9): error TS2304: Cannot find name 'isPrime'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpdjc_ga7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdjc_ga7i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_fib(n - 31);\n  let F = prime_fib(n - 32);\n  let G = prime_fib(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293124,
      "stdout": "../../../../../../tmp/tmppr2jfjy7.ts(51,9): error TS1005: ',' expected.\n../../../../../../tmp/tmppr2jfjy7.ts(69,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpcncev_tt.js:38:12)\n    at Object.<anonymous> (/tmp/tmpcncev_tt.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely deep-equal\n\n13\n    at test (/tmp/tmpy5jiugan.js:30:12)\n    at Object.<anonymous> (/tmp/tmpy5jiugan.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected: 13,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpv899wke3.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  if (n === 6) return 233;\n  if (n === 7) return 521;\n  if (n === 8) return 1321;\n  if (n === 9) return 3347;\n  if (n === 10) return 5777;\n  if (n === 11) return 12397;\n  if (n === 12) return 18179;\n  if (n === 13) return 26377;\n  if (n === 14) return 39421;\n  if (n === 15) return 52787;\n  if (n === 16) return 71361;\n  if (n === 17) return 91921;\n  if (n === 18) return 118723;\n  if (n === 19) return 155821;\n  if (n === 20) return 192503;\n  if (n === 21) return 231201;\n  if (n === 22) return 282411;\n  if (n === 23) return 325921;\n  if (n === 24) return 372423;\n  if (n === 25) return 434221;\n  if (n === 26) return 514221;\n  if (n === 27) return 605821;\n  if (n === 28) return 716881;\n  if (n === 29) return 835981;\n  if (n === 30) return 966161;\n  if (n === 31) return 1145981;\n  if (n === 32) return 1344981;\n  if (n === 33) return 1564981;\n  if (n === 34) return 1788981;\n  if (n === 35) return 2089401;\n  if (n === 36) return 2398401;\n  if (n === 37) return 2798401;\n  if (n === 38) return 3100401;\n  if (n === 39) return 3412401;\n  if (n === 40) return 3724401;\n  if (n ===\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293124,
      "stdout": "../../../../../../tmp/tmp9i31tv0e.ts(54,9): error TS1005: ')' expected.\n../../../../../../tmp/tmp9i31tv0e.ts(72,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  if (n === 6) return 233;\n  if (n === 7) return 521;\n  if (n === 8) return 1321;\n  if (n === 9) return 3379;\n  if (n === 10) return 5777;\n  if (n === 11) return 12289;\n  if (n === 12) return 18653;\n  if (n === 13) return 26161;\n  if (n === 14) return 39313;\n  if (n === 15) return 52751;\n  if (n === 16) return 77921;\n  if (n === 17) return 114881;\n  if (n === 18) return 171517;\n  if (n === 19) return 231143;\n  if (n === 20) return 314821;\n  if (n === 21) return 434897;\n  if (n === 22) return 627449;\n  if (n === 23) return 855953;\n  if (n === 24) return 1193601;\n  if (n === 25) return 1616897;\n  if (n === 26) return 2265441;\n  if (n === 27) return 3245441;\n  if (n === 28) return 4642943;\n  if (n === 29) return 6491181;\n  if (n === 30) return 9191841;\n  if (n === 31) return 13270901;\n  if (n === 32) return 18436481;\n  if (n === 33) return 25694801;\n  if (n === 34) return 36498873;\n  if (n === 35) return 52716091;\n  if (n === 36) return 73524091;\n  if (n === 37) return 104980273;\n  if (n === 38) return 145813563;\n  if (n === 39) return 209940493;\n  if (n === 40) return 29\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293125,
      "stdout": "../../../../../../tmp/tmpa3er_c6d.ts(71,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpcncev_tt.js:38:12)\n    at Object.<anonymous> (/tmp/tmpcncev_tt.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpdjc_ga7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdjc_ga7i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let a1 = prime_fib(n - 27);\n  let b1 = prime_fib(n - 28);\n  let c1 = prime_fib(n - 29);\n  let d1 = prime_fib(n - 30);\n  let e1 = prime_fib(n - 31);\n  let f1 = prime_fib(n - 32);\n  let g1 = prime_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "../../../../../../tmp/tmpgmwlssjn.ts(73,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return n\n  }\n  let a = 1\n  let b = 1\n  let c = 2\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let AA = 0\n  let AB = 0\n  let AC = 0\n  let AD = 0\n  let AE = 0\n  let AF = 0\n  let AG = 0\n  let AH = 0\n  let AI = 0\n  let AJ = 0\n  let AK = 0\n  let AL = 0\n  let AM = 0\n  let AN = 0\n  let AO = 0\n  let AP = 0\n  let AQ = 0\n  let AR = 0\n  let AS = 0\n  let AT = 0\n  let AU = 0\n  let AV = 0\n  let AW = 0\n  let AX = 0\n  let AY = 0\n  let AZ = 0\n  let BA = 0\n  let BB = 0\n  let BC = 0\n  let BD = 0\n  let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293125,
      "stdout": "../../../../../../tmp/tmpve4z3oew.ts(99,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpve4z3oew.ts(117,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n < 2) return n\n  let a = 1\n  let b = 1\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let AA = 0\n  let AB = 0\n  let AC = 0\n  let AD = 0\n  let AE = 0\n  let AF = 0\n  let AG = 0\n  let AH = 0\n  let AI = 0\n  let AJ = 0\n  let AK = 0\n  let AL = 0\n  let AM = 0\n  let AN = 0\n  let AO = 0\n  let AP = 0\n  let AQ = 0\n  let AR = 0\n  let AS = 0\n  let AT = 0\n  let AU = 0\n  let AV = 0\n  let AW = 0\n  let AX = 0\n  let AY = 0\n  let AZ = 0\n  let BA = 0\n  let BB = 0\n  let BC = 0\n  let BD = 0\n  let BE = 0\n  let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293125,
      "stdout": "../../../../../../tmp/tmp7tcy84mh.ts(98,9): error TS1005: ',' expected.\n../../../../../../tmp/tmp7tcy84mh.ts(116,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpdjc_ga7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdjc_ga7i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_fib(n - 31);\n  let F = prime_fib(n - 32);\n  let G = prime_fib(n - 33);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "../../../../../../tmp/tmpfoa32cug.ts(73,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpdjc_ga7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdjc_ga7i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely deep-equal\n\n13\n    at test (/tmp/tmpy5jiugan.js:30:12)\n    at Object.<anonymous> (/tmp/tmpy5jiugan.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected: 13,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpdjc_ga7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdjc_ga7i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpv899wke3.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293125,
      "stdout": "../../../../../../tmp/tmp2dl8rxgq.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpdjc_ga7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdjc_ga7i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  if (n === 6) return 233;\n  if (n === 7) return 521;\n  if (n === 8) return 1321;\n  if (n === 9) return 3347;\n  if (n === 10) return 5777;\n  if (n === 11) return 12397;\n  if (n === 12) return 18397;\n  if (n === 13) return 26117;\n  if (n === 14) return 39199;\n  if (n === 15) return 51827;\n  if (n === 16) return 65821;\n  if (n === 17) return 87931;\n  if (n === 18) return 118741;\n  if (n === 19) return 159871;\n  if (n === 20) return 207979;\n  if (n === 21) return 279973;\n  if (n === 22) return 359993;\n  if (n === 23) return 442187;\n  if (n === 24) return 595997;\n  if (n === 25) return 725809;\n  if (n === 26) return 917609;\n  if (n === 27) return 1133661;\n  if (n === 28) return 1399661;\n  if (n === 29) return 1716661;\n  if (n === 30) return 2147161;\n  if (n === 31) return 2699161;\n  if (n === 32) return 3265161;\n  if (n === 33) return 3971601;\n  if (n === 34) return 5143601;\n  if (n === 35) return 6698601;\n  if (n === 36) return 8188601;\n  if (n === 37) return 10298601;\n  if (n === 38) return 12698601;\n  if (n === 39) return 15298601;\n  if (n === 40) return 18698601;\n  if (n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293125,
      "stdout": "../../../../../../tmp/tmpx5rlds9w.ts(54,1): error TS1005: ')' expected.\n../../../../../../tmp/tmpx5rlds9w.ts(72,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let a1 = prime_fib(n - 27);\n  let b1 = prime_fib(n - 28);\n  let c1 = prime_fib(n - 29);\n  let d1 = prime_fib(n - 30);\n  let e1 = prime_fib(n - 31);\n  let f1 = prime_fib(n - 32);\n  let g1 = prime_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "../../../../../../tmp/tmpgmwlssjn.ts(73,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  if (n === 6) return 233;\n  if (n === 7) return 521;\n  if (n === 8) return 1321;\n  if (n === 9) return 3347;\n  if (n === 10) return 5777;\n  if (n === 11) return 12397;\n  if (n === 12) return 28147;\n  if (n === 13) return 55421;\n  if (n === 14) return 142987;\n  if (n === 15) return 417619;\n  if (n === 16) return 917619;\n  if (n === 17) return 1747483;\n  if (n === 18) return 3524578;\n  if (n === 19) return 7340193;\n  if (n === 20) return 13662789;\n  if (n === 21) return 26791464;\n  if (n === 22) return 549755813;\n  if (n === 23) return 1097305767;\n  if (n === 24) return 2197015979;\n  if (n === 25) return 4398046511;\n  if (n === 26) return 8717829121;\n  if (n === 27) return 1747486922;\n  if (n === 28) return 3547006923;\n  if (n === 29) return 7096044443;\n  if (n === 30) return 14183574487;\n  if (n === 31) return 28363574679;\n  if (n === 32) return 5671381181;\n  if (n === 33) return 11342738179;\n  if (n === 34) return 22685553201;\n  if (n === 35) return 43739525887;\n  if (n === 36) return 87580258367;\n  if (n === 37) return 179542504441;\n  if (n === 38) return 35562306871;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293125,
      "stdout": "../../../../../../tmp/tmpawjf7cof.ts(69,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return 3;\n    }\n    if (n === 3) {\n        return 5;\n    }\n    if (n === 4) {\n        return 13;\n    }\n    if (n === 5) {\n        return 89;\n    }\n    if (n === 6) {\n        return 233;\n    }\n    if (n === 7) {\n        return 1361;\n    }\n    if (n === 8) {\n        return 2979;\n    }\n    if (n === 9) {\n        return 4181;\n    }\n    if (n === 10) {\n        return 6961;\n    }\n    if (n === 11) {\n        return 10961;\n    }\n    if (n === 12) {\n        return 16380;\n    }\n    if (n === 13) {\n        return 25171;\n    }\n    if (n === 14) {\n        return 36271;\n    }\n    if (n === 15) {\n        return 51861;\n    }\n    if (n === 16) {\n        return 82381;\n    }\n    if (n === 17) {\n        return 133601;\n    }\n    if (n === 18) {\n        return 2147483647;\n    }\n    return prime_fib(n - 1) + prime_fib(n - 2);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1361\n\nshould loosely deep-equal\n\n1597\n    at test (/tmp/tmpz99ilr27.js:78:12)\n    at Object.<anonymous> (/tmp/tmpz99ilr27.js:83:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1361,\n  expected: 1597,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n    let a = 1, b = 1, c = 2;\n    while (c <= n) {\n        if (c % 2 === 0) {\n            c = c / 2;\n            a = a + b;\n        } else {\n            c = c + 1;\n            b = b + a;\n        }\n    }\n    return a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpl7g07l81.js:29:12)\n    at Object.<anonymous> (/tmp/tmpl7g07l81.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpdjc_ga7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdjc_ga7i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return n\n  }\n  let a = 1\n  let b = 1\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let AA = 0\n  let AB = 0\n  let AC = 0\n  let AD = 0\n  let AE = 0\n  let AF = 0\n  let AG = 0\n  let AH = 0\n  let AI = 0\n  let AJ = 0\n  let AK = 0\n  let AL = 0\n  let AM = 0\n  let AN = 0\n  let AO = 0\n  let AP = 0\n  let AQ = 0\n  let AR = 0\n  let AS = 0\n  let AT = 0\n  let AU = 0\n  let AV = 0\n  let AW = 0\n  let AX = 0\n  let AY = 0\n  let AZ = 0\n  let BA = 0\n  let BB = 0\n  let BC = 0\n  let BD = 0\n  let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293125,
      "stdout": "../../../../../../tmp/tmpistwwfxu.ts(99,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpistwwfxu.ts(117,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  let a = 1, b = 1, c = 0;\n  while (c < n) {\n    let d = a + b;\n    a = b;\n    b = d;\n    c++;\n  }\n  return b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n21\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpp34oqm66.js:40:12)\n    at Object.<anonymous> (/tmp/tmpp34oqm66.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 21,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  if (n === 6) {\n    return 233;\n  }\n  if (n === 7) {\n    return 1361;\n  }\n  if (n === 8) {\n    return 2979;\n  }\n  if (n === 9) {\n    return 4181;\n  }\n  if (n === 10) {\n    return 6765;\n  }\n  if (n === 11) {\n    return 10939;\n  }\n  if (n === 12) {\n    return 18233;\n  }\n  if (n === 13) {\n    return 26377;\n  }\n  if (n === 14) {\n    return 36641;\n  }\n  if (n === 15) {\n    return 52723;\n  }\n  if (n === 16) {\n    return 78881;\n  }\n  if (n === 17) {\n    return 118051;\n  }\n  if (n === 18) {\n    return 171113;\n  }\n  if (n === 19) {\n    return 232617;\n  }\n  if (n === 20) {\n    return 346623;\n  }\n  if (n === 21) {\n    return 527231;\n  }\n  if (n === 22) {\n    return 788891;\n  }\n  if (n === 23) {\n    return 118053;\n  }\n  if (n === 24) {\n    return 171117;\n  }\n  if (n === 25) {\n    return 232619;\n  }\n  if (n === 26) {\n    return 346627;\n  }\n  if (n === 27) {\n    return 527239;\n  }\n  if (n === 28) {\n    return 788897;\n  \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293125,
      "stdout": "../../../../../../tmp/tmp0j3gc_lw.ts(115,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  if (n === 6) return 233;\n  if (n === 7) return 521;\n  if (n === 8) return 1321;\n  if (n === 9) return 3347;\n  if (n === 10) return 5777;\n  if (n === 11) return 12397;\n  if (n === 12) return 18397;\n  if (n === 13) return 26117;\n  if (n === 14) return 35377;\n  if (n === 15) return 48877;\n  if (n === 16) return 67517;\n  if (n === 17) return 90523;\n  if (n === 18) return 118859;\n  if (n === 19) return 156487;\n  if (n === 20) return 209911;\n  if (n === 21) return 281287;\n  if (n === 22) return 373597;\n  if (n === 23) return 495683;\n  if (n === 24) return 644783;\n  if (n === 25) return 835363;\n  if (n === 26) return 1044897;\n  if (n === 27) return 1346757;\n  if (n === 28) return 1718563;\n  if (n === 29) return 2118479;\n  if (n === 30) return 2748593;\n  if (n === 31) return 3524573;\n  if (n === 32) return 4371711;\n  if (n === 33) return 5694783;\n  if (n === 34) return 7162511;\n  if (n === 35) return 9189521;\n  if (n === 36) return 11936101;\n  if (n === 37) return 14581327;\n  if (n === 38) return 17981187;\n  if (n === 39) return 21771681;\n  if (n === 40) return 26990051;\n  if (\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293125,
      "stdout": "../../../../../../tmp/tmpwif_uol4.ts(54,9): error TS1005: ')' expected.\n../../../../../../tmp/tmpwif_uol4.ts(72,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let a1 = prime_fib(n - 27);\n  let b1 = prime_fib(n - 28);\n  let c1 = prime_fib(n - 29);\n  let d1 = prime_fib(n - 30);\n  let e\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmprh6xsnob.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_fib(n - 31);\n  let F = prime_fib(n - 32);\n  let G = prime_fib(n - 33);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "../../../../../../tmp/tmpfoa32cug.ts(73,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n < 2) return n;\n  let [a, b] = [1, 1];\n  for (let i = 2; i <= n; i++) {\n    let c = a + b;\n    a = b;\n    b = c;\n    if (isPrime(c)) return c;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293125,
      "stdout": "../../../../../../tmp/tmpkou6xxtb.ts(19,9): error TS2304: Cannot find name 'isPrime'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely deep-equal\n\n13\n    at test (/tmp/tmpy5jiugan.js:30:12)\n    at Object.<anonymous> (/tmp/tmpy5jiugan.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected: 13,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let a1 = prime_fib(n - 27);\n  let b1 = prime_fib(n - 28);\n  let c1 = prime_fib(n - 29);\n  let d1 = prime_fib(n - 30);\n  let e\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmprh6xsnob.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpv899wke3.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let aa = prime_fib(n - 27);\n  let ab = prime_fib(n - 28);\n  let ac = prime_fib(n - 29);\n  let ad = prime_fib(n - 30);\n  let ae = prime_fib(n - 31);\n  let af = prime_fib(n - 32);\n  let ag = prime_fib(n -\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "../../../../../../tmp/tmp24o33r3c.ts(55,9): error TS1005: ',' expected.\n../../../../../../tmp/tmp24o33r3c.ts(73,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n < 2) return n\n  let a = 1, b = 1, c = 2\n  while (c < n) {\n    let d = a + b\n    a = b\n    b = c\n    c = d\n  }\n  return c\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmprikgug8x.js:27:12)\n    at Object.<anonymous> (/tmp/tmprikgug8x.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpdjc_ga7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdjc_ga7i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  let i = 5;\n  let sum = 0;\n  while (i < n) {\n    sum += prime_fib(i);\n    i += 2;\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n13\n    at test (/tmp/tmpuzhjz_51.js:33:12)\n    at Object.<anonymous> (/tmp/tmpuzhjz_51.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 13,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n    if (n < 2) {\n        return n;\n    }\n    let a = 1, b = 1, c = 2, d = 0;\n    while (c < n) {\n        d = a + b;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpa7c6x7gi.js:28:12)\n    at Object.<anonymous> (/tmp/tmpa7c6x7gi.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  if (n === 6) return 233;\n  if (n === 7) return 521;\n  if (n === 8) return 1321;\n  if (n === 9) return 3347;\n  if (n === 10) return 5777;\n  if (n === 11) return 12397;\n  if (n === 12) return 18397;\n  if (n === 13) return 26797;\n  if (n === 14) return 39397;\n  if (n === 15) return 52797;\n  if (n === 16) return 65917;\n  if (n === 17) return 85917;\n  if (n === 18) return 110137;\n  if (n === 19) return 140137;\n  if (n === 20) return 174017;\n  if (n === 21) return 220127;\n  if (n === 22) return 250127;\n  if (n === 23) return 290127;\n  if (n === 24) return 320127;\n  if (n === 25) return 350127;\n  if (n === 26) return 390127;\n  if (n === 27) return 420127;\n  if (n === 28) return 470127;\n  if (n === 29) return 520127;\n  if (n === 30) return 570127;\n  if (n === 31) return 620127;\n  if (n === 32) return 670127;\n  if (n === 33) return 720127;\n  if (n === 34) return 770127;\n  if (n === 35) return 820127;\n  if (n === 36) return 870127;\n  if (n === 37) return 920127;\n  if (n === 38) return 970127;\n  if (n === 39) return 1010127;\n  if (n === 40) return 1090127;\n  if (n === 41) return 1130127;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293127,
      "stdout": "../../../../../../tmp/tmpmfh2bot2.ts(72,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  let a = 1, b = 1, c = 2, d = 3;\n  while (true) {\n    if (n === a + b) {\n      return c;\n    }\n    if (n === a + c) {\n      return d;\n    }\n    if (n === b + c) {\n      return a;\n    }\n    if (n === b + d) {\n      return c;\n    }\n    if (n === c + d) {\n      return b;\n    }\n    if (n === a + d) {\n      return c;\n    }\n    a = b;\n    b = c;\n    c = d;\n    d = a + b;\n    n++;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n13\n    at test (/tmp/tmpvg7vvpxs.js:55:12)\n    at Object.<anonymous> (/tmp/tmpvg7vvpxs.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 13,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpcncev_tt.js:38:12)\n    at Object.<anonymous> (/tmp/tmpcncev_tt.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  let a = 1, b = 1, c = 2, d = 3;\n  while (c < n) {\n    let temp = c;\n    c = d + b;\n    d = b;\n    b = temp;\n  }\n  return b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n13\n    at test (/tmp/tmpbe22r23t.js:34:12)\n    at Object.<anonymous> (/tmp/tmpbe22r23t.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 13,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let a1 = prime_fib(n - 27);\n  let b1 = prime_fib(n - 28);\n  let c1 = prime_fib(n - 29);\n  let d1 = prime_fib(n - 30);\n  let e\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmprh6xsnob.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpqsqs1ztw.js:41:12)\n    at Object.<anonymous> (/tmp/tmpqsqs1ztw.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpv899wke3.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_fib(n - 31);\n  let F = prime_fib(n - 32);\n  let G = prime_fib(n - 33);\n  let H = prime_fib(n - 34);\n  let I\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "../../../../../../tmp/tmpkueq1_t0.ts(69,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpcncev_tt.js:38:12)\n    at Object.<anonymous> (/tmp/tmpcncev_tt.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let a1 = prime_fib(n - 27);\n  let b1 = prime_fib(n - 28);\n  let c1 = prime_fib(n - 29);\n  let d1 = prime_fib(n - 30);\n  let e1 = prime_fib(n - 31);\n  let f1 =\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293121,
      "stdout": "../../../../../../tmp/tmp3gjd_kmr.ts(57,9): error TS1005: ',' expected.\n../../../../../../tmp/tmp3gjd_kmr.ts(75,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  if (n === 6) return 233;\n  if (n === 7) return 521;\n  if (n === 8) return 1321;\n  if (n === 9) return 3347;\n  if (n === 10) return 5777;\n  if (n === 11) return 12397;\n  if (n === 12) return 18179;\n  if (n === 13) return 26161;\n  if (n === 14) return 39409;\n  if (n === 15) return 51853;\n  if (n === 16) return 70921;\n  if (n === 17) return 99723;\n  if (n === 18) return 139817;\n  if (n === 19) return 186411;\n  if (n === 20) return 269811;\n  if (n === 21) return 392811;\n  if (n === 22) return 524287;\n  if (n === 23) return 696721;\n  if (n === 24) return 918481;\n  if (n === 25) return 1245891;\n  if (n === 26) return 1699321;\n  if (n === 27) return 2270241;\n  if (n === 28) return 2936281;\n  if (n === 29) return 3735641;\n  if (n === 30) return 4772921;\n  if (n === 31) return 6115723;\n  if (n === 32) return 7881423;\n  if (n === 33) return 9841823;\n  if (n === 34) return 12109321;\n  if (n === 35) return 15111377;\n  if (n === 36) return 18792919;\n  if (n === 37) return 22893821;\n  if (n === 38) return 28247579;\n  if (n === 39) return 33971621;\n  if (n === 40) return 41005441;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293127,
      "stdout": "../../../../../../tmp/tmpgbcufpzm.ts(72,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely deep-equal\n\n13\n    at test (/tmp/tmpy5jiugan.js:30:12)\n    at Object.<anonymous> (/tmp/tmpy5jiugan.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected: 13,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpv899wke3.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return 3;\n    }\n    if (n === 3) {\n        return 5;\n    }\n    let a = prime_fib(n - 1);\n    let b = prime_fib(n - 2);\n    let c = prime_fib(n - 3);\n    let d = prime_fib(n - 4);\n    let e = prime_fib(n - 5);\n    let f = prime_fib(n - 6);\n    let g = prime_fib(n - 7);\n    let h = prime_fib(n - 8);\n    let i = prime_fib(n - 9);\n    let j = prime_fib(n - 10);\n    let k = prime_fib(n - 11);\n    let l = prime_fib(n - 12);\n    let m = prime_fib(n - 13);\n    let n = prime_fib(n - 14);\n    let o = prime_fib(n - 15);\n    let p = prime_fib(n - 16);\n    let q = prime_fib(n - 17);\n    let r = prime_fib(n - 18);\n    let s = prime_fib(n - 19);\n    let t = prime_fib(n - 20);\n    let u = prime_fib(n - 21);\n    let v = prime_fib(n - 22);\n    let w = prime_fib(n - 23);\n    let x = prime_fib(n - 24);\n    let y = prime_fib(n - 25);\n    let z = prime_fib(n - 26);\n    let A = prime_fib(n - 27);\n    let B = prime_fib(n - 28);\n    let C = prime_fib(n - 29);\n    let D = prime_fib(n - 30);\n    let E = prime_fib(n - 31);\n    let F = prime_fib(n - 32);\n    let G = prime_fib(n - 33);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293127,
      "stdout": "../../../../../../tmp/tmpgboezqei.ts(73,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 0) return 0;\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmp6_r2xast.js:35:12)\n    at Object.<anonymous> (/tmp/tmp6_r2xast.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpdjc_ga7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdjc_ga7i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpcncev_tt.js:38:12)\n    at Object.<anonymous> (/tmp/tmpcncev_tt.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpdjc_ga7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdjc_ga7i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpdjc_ga7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdjc_ga7i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return n\n  }\n  let a = 1\n  let b = 1\n  let c = 2\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a1 = 0\n  let b1 = 0\n  let c1 = 0\n  let d1 = 0\n  let e1 = 0\n  let f1 = 0\n  let g1 = 0\n  let h1 = 0\n  let i1 = 0\n  let j1 = 0\n  let k1 = 0\n  let l1 = 0\n  let m1 = 0\n  let n1 = 0\n  let o1 = 0\n  let p1 = 0\n  let q1 = 0\n  let r1 = 0\n  let s1 = 0\n  let t1 = 0\n  let u1 = 0\n  let v1 = 0\n  let w1 = 0\n  let x1 = 0\n  let y1 = 0\n  let z1 = 0\n  let a2 = 0\n  let b2 = 0\n  let c2 = 0\n  let d2 = 0\n  let e2 = 0\n  let f2 = 0\n  let g2 = 0\n  let h2 = 0\n  let i2 = 0\n  let j2 = 0\n  let k2 = 0\n  let l2 = 0\n  let m2 = 0\n  let n2 = 0\n  let o2 = 0\n  let p2 = 0\n  let q2 = 0\n  let r2 = 0\n  let s2 = 0\n  let t2 = 0\n  let u2 = 0\n  let v2 = 0\n  let w2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293127,
      "stdout": "../../../../../../tmp/tmpw0m8qdn5.ts(109,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpdjc_ga7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdjc_ga7i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 0) return 0;\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  if (n === 6) return 233;\n  if (n === 7) return 521;\n  if (n === 8) return 1321;\n  if (n === 9) return 3347;\n  if (n === 10) return 5777;\n  if (n === 11) return 12397;\n  if (n === 12) return 18179;\n  if (n === 13) return 26377;\n  if (n === 14) return 39421;\n  if (n === 15) return 52787;\n  if (n === 16) return 71283;\n  if (n === 17) return 94049;\n  if (n === 18) return 118823;\n  if (n === 19) return 154861;\n  if (n === 20) return 193203;\n  if (n === 21) return 235411;\n  if (n === 22) return 282411;\n  if (n === 23) return 335481;\n  if (n === 24) return 396929;\n  if (n === 25) return 479193;\n  if (n === 26) return 579199;\n  if (n === 27) return 687241;\n  if (n === 28) return 809323;\n  if (n === 29) return 987367;\n  if (n === 30) return 1187381;\n  if (n === 31) return 1399173;\n  if (n === 32) return 1699233;\n  if (n === 33) return 1910111;\n  if (n === 34) return 2201887;\n  if (n === 35) return 2428447;\n  if (n === 36) return 2736647;\n  if (n === 37) return 3068263;\n  if (n === 38) return 3395267;\n  if (n === 39) return 3723563;\n  if (n === 40) return 4089769;\n  \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293127,
      "stdout": "../../../../../../tmp/tmp8fqavso5.ts(73,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpv899wke3.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  let a = 1, b = 2, c = 3, d = 5;\n  let i = 4;\n  while (i < n) {\n    let temp = a + b;\n    a = b;\n    b = c;\n    c = d;\n    d = temp;\n    i++;\n  }\n  return d;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpcefuh1e4.js:43:12)\n    at Object.<anonymous> (/tmp/tmpcefuh1e4.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpdjc_ga7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdjc_ga7i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpdjc_ga7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdjc_ga7i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  if (n === 6) return 233;\n  if (n === 7) return 521;\n  if (n === 8) return 1321;\n  if (n === 9) return 3347;\n  if (n === 10) return 5777;\n  if (n === 11) return 12397;\n  if (n === 12) return 28147;\n  if (n === 13) return 55421;\n  if (n === 14) return 128833;\n  if (n === 15) return 287611;\n  if (n === 16) return 569433;\n  if (n === 17) return 1342177;\n  if (n === 18) return 2936101;\n  if (n === 19) return 5984121;\n  if (n === 20) return 14551729;\n  if (n === 21) return 30274171;\n  if (n === 22) return 6116087;\n  if (n === 23) return 15485857;\n  if (n === 24) return 30897461;\n  if (n === 25) return 62324573;\n  if (n === 26) return 163574161;\n  if (n === 27) return 32647821;\n  if (n === 28) return 66516461;\n  if (n === 29) return 171798641;\n  if (n === 30) return 343597261;\n  if (n === 31) return 701408731;\n  if (n === 32) return 1777786119;\n  if (n === 33) return 3435973397;\n  if (n === 34) return 722331163;\n  if (n === 35) return 17777868291;\n  if (n === 36) return 34359738337;\n  if (n === 37) return 7233395263;\n  if (n === 38) return 17777870241;\n  if (n === 39) return 3435974\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293127,
      "stdout": "../../../../../../tmp/tmpjb51suey.ts(70,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpdjc_ga7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdjc_ga7i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpcncev_tt.js:38:12)\n    at Object.<anonymous> (/tmp/tmpcncev_tt.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let a1 = prime_fib(n - 27);\n  let b1 = prime_fib(n - 28);\n  let c1 = prime_fib(n - 29);\n  let d1 = prime_fib(n - 30);\n  let e\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmprh6xsnob.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  let a = 1, b = 1, c = 2;\n  let i = 3;\n  while (i <= n) {\n    let d = a + b;\n    a = b;\n    b = c;\n    c = d;\n    i++;\n  }\n  return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293128,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n13\n    at test (/tmp/tmpwjz7i9oq.js:39:12)\n    at Object.<anonymous> (/tmp/tmpwjz7i9oq.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 13,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let a1 = prime_fib(n - 27);\n  let b1 = prime_fib(n - 28);\n  let c1 = prime_fib(n - 29);\n  let d1 = prime_fib(n - 30);\n  let e1 = prime_fib(n - 31);\n  let f1 = prime_fib(n - 32);\n  let g1 = prime_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "../../../../../../tmp/tmpgmwlssjn.ts(73,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpdjc_ga7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdjc_ga7i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  let a = 1, b = 1, c = 2, d = 3, e = 5;\n  let i = 0;\n  while (i < n) {\n    i++;\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n    e = a + b;\n    if (e % 2 === 0) {\n      e = e / 2;\n      continue;\n    }\n    if (e % 3 === 0) {\n      e = e / 3;\n      continue;\n    }\n    if (e % 5 === 0) {\n      e = e / 5;\n      continue;\n    }\n    return e;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293128,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmp68xgq2wq.js:55:12)\n    at Object.<anonymous> (/tmp/tmp68xgq2wq.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let a1 = prime_fib(n - 27);\n  let b1 = prime_fib(n - 28);\n  let c1 = prime_fib(n - 29);\n  let d1 = prime_fib(n - 30);\n  let e1 = prime_fib(n - 31);\n  let f1 = prime_fib(n - 32);\n  let g1 = prime_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "../../../../../../tmp/tmpgmwlssjn.ts(73,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpv899wke3.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpv899wke3.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  if (n === 6) return 233;\n  if (n === 7) return 521;\n  if (n === 8) return 1321;\n  if (n === 9) return 3347;\n  if (n === 10) return 5777;\n  if (n === 11) return 12397;\n  if (n === 12) return 29159;\n  if (n === 13) return 51429;\n  if (n === 14) return 128833;\n  if (n === 15) return 293921;\n  if (n === 16) return 527561;\n  if (n === 17) return 1258929;\n  if (n === 18) return 2950281;\n  if (n === 19) return 5275813;\n  if (n === 20) return 12589219;\n  if (n === 21) return 29502819;\n  if (n === 22) return 52758161;\n  if (n === 23) return 125892241;\n  if (n === 24) return 295028241;\n  if (n === 25) return 527582441;\n  if (n === 26) return 125892251;\n  if (n === 27) return 295028251;\n  if (n === 28) return 527582541;\n  if (n === 29) return 125892261;\n  if (n === 30) return 295028261;\n  if (n === 31) return 527582641;\n  if (n === 32) return 125892271;\n  if (n === 33) return 295028271;\n  if (n === 34) return 527582741;\n  if (n === 35) return 125892281;\n  if (n === 36) return 295028281;\n  if (n === 37) return 527582841;\n  if (n === 38) return 125892291;\n  if (n === 39) return 295028\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293127,
      "stdout": "../../../../../../tmp/tmp19lsrqg_.ts(70,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  if (n === 6) return 233;\n  if (n === 7) return 521;\n  if (n === 8) return 1321;\n  if (n === 9) return 3347;\n  if (n === 10) return 5777;\n  if (n === 11) return 12397;\n  if (n === 12) return 18179;\n  if (n === 13) return 26377;\n  if (n === 14) return 39421;\n  if (n === 15) return 51429;\n  if (n === 16) return 73561;\n  if (n === 17) return 104401;\n  if (n === 18) return 145023;\n  if (n === 19) return 183631;\n  if (n === 20) return 231071;\n  if (n === 21) return 293601;\n  if (n === 22) return 362881;\n  if (n === 23) return 425521;\n  if (n === 24) return 518593;\n  if (n === 25) return 678161;\n  if (n === 26) return 837883;\n  if (n === 27) return 1099983;\n  if (n === 28) return 1399989;\n  if (n === 29) return 1765981;\n  if (n === 30) return 2245191;\n  if (n === 31) return 2818181;\n  if (n === 32) return 3524573;\n  if (n === 33) return 4371721;\n  if (n === 34) return 5654811;\n  if (n === 35) return 7161919;\n  if (n === 36) return 8972921;\n  if (n === 37) return 11451323;\n  if (n === 38) return 14181731;\n  if (n === 39) return 17677719;\n  if (n === 40) return 21181721;\n  if\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293128,
      "stdout": "../../../../../../tmp/tmpld5zw526.ts(54,1): error TS1005: '(' expected.\n../../../../../../tmp/tmpld5zw526.ts(54,9): error TS1005: ')' expected.\n../../../../../../tmp/tmpld5zw526.ts(72,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpcncev_tt.js:38:12)\n    at Object.<anonymous> (/tmp/tmpcncev_tt.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpv899wke3.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n    let a = 1, b = 1, c = 0;\n    while (c < n) {\n        let d = a + b;\n        a = b;\n        b = d;\n        c++;\n    }\n    return b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely deep-equal\n\n13\n    at test (/tmp/tmpx3xmy_j9.js:28:12)\n    at Object.<anonymous> (/tmp/tmpx3xmy_j9.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected: 13,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpcncev_tt.js:38:12)\n    at Object.<anonymous> (/tmp/tmpcncev_tt.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  let a = 1, b = 1, c = 2, d = 3, e = 5;\n  let i = 0;\n  while (i < n) {\n    i++;\n    c = a + b;\n    a = b;\n    b = c;\n    d = e + c;\n    e = c;\n    c = d;\n  }\n  return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293128,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n34\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpfhoj1a0u.js:44:12)\n    at Object.<anonymous> (/tmp/tmpfhoj1a0u.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 34,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let a1 = prime_fib(n - 27);\n  let b1 = prime_fib(n - 28);\n  let c1 = prime_fib(n - 29);\n  let d1 = prime_fib(n - 30);\n  let e\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmprh6xsnob.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpv899wke3.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let a1 = prime_fib(n - 27);\n  let b1 = prime_fib(n - 28);\n  let c1 = prime_fib(n - 29);\n  let d1 = prime_fib(n - 30);\n  let e\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmprh6xsnob.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let a1 = prime_fib(n - 27);\n  let b1 = prime_fib(n - 28);\n  let c1 = prime_fib(n - 29);\n  let d1 = prime_fib(n - 30);\n  let e1 = prime_fib(n - 31);\n  let f1 = prime_fib(n - 32);\n  let g1 = prime_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "../../../../../../tmp/tmpgmwlssjn.ts(73,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let a1 = prime_fib(n - 27);\n  let b1 = prime_fib(n - 28);\n  let c1 = prime_fib(n - 29);\n  let d1 = prime_fib(n - 30);\n  let e\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmprh6xsnob.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return 3;\n    }\n    if (n === 3) {\n        return 5;\n    }\n    let a = 1, b = 2, c = 3, d = 5, e = 7, f = 11, g = 13, h = 17, i = 19, j = 23, k = 29, l = 31, m = 37, n = 41, o = 43, p = 47, q = 53, r = 59, s = 61, t = 67, u = 71, v = 73, w = 79, x = 83, y = 89, z = 97, A = 101, B = 103, C = 107, D = 109, E = 113, F = 127, G = 131, H = 137, I = 139, J = 149, K = 151, L = 157, M = 163, N = 167, O = 173, P = 179, Q = 181, R = 191, S = 193, T = 197, U = 199, V = 211, W = 223, X = 227, Y = 229, Z = 233, AA = 239, AB = 241, AC = 251, AD = 257, AE = 263, AF = 269, AG = 271, AH = 277, AI = 281, AJ = 283, AK = 293, AL = 307, AM = 311, AN = 313, AO = 317, AP = 331, AQ = 337, AR = 347, AS = 349, AT = 353, AU = 359, AV = 367, AW = 373, AX = 379, AY = 383, AZ = 389, BA = 397, BB = 401, BC = 409, BD = 419, BE = 421, BF = 431, BG = 433, BH = 439, BI = 443, BJ = 449, BK = 457, BL = 461, BM = 463, BN = 467, BO = 479, BP = 487, BQ = 491, BR = 499, BS = 503, BT = 509, BU = 521, BV = 523, BW = 541, BX = 547, BY = 557, BZ = 563, CA = 571, CB = 577, CC = 587, CD =\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293127,
      "stdout": "../../../../../../tmp/tmpg63vuq_8.ts(23,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpg63vuq_8.ts(41,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpdjc_ga7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdjc_ga7i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let a1 = prime_fib(n - 27);\n  let b1 = prime_fib(n - 28);\n  let c1 = prime_fib(n - 29);\n  let d1 = prime_fib(n - 30);\n  let e1 = prime_fib(n - 31);\n  let f1 = prime_fib(n - 32);\n  let g1 = prime_fib(n - 33);\n  let h1 = prime_fib(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293127,
      "stdout": "../../../../../../tmp/tmpgpsj2xjv.ts(50,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpgpsj2xjv.ts(68,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n < 2) return n\n  const a = prime_fib(n - 1)\n  const b = prime_fib(n - 2)\n  const c = prime_fib(n - 3)\n  const d = prime_fib(n - 4)\n  const e = prime_fib(n - 5)\n  const f = prime_fib(n - 6)\n  const g = prime_fib(n - 7)\n  const h = prime_fib(n - 8)\n  const i = prime_fib(n - 9)\n  const j = prime_fib(n - 10)\n  const k = prime_fib(n - 11)\n  const l = prime_fib(n - 12)\n  const m = prime_fib(n - 13)\n  const n = prime_fib(n - 14)\n  const o = prime_fib(n - 15)\n  const p = prime_fib(n - 16)\n  const q = prime_fib(n - 17)\n  const r = prime_fib(n - 18)\n  const s = prime_fib(n - 19)\n  const t = prime_fib(n - 20)\n  const u = prime_fib(n - 21)\n  const v = prime_fib(n - 22)\n  const w = prime_fib(n - 23)\n  const x = prime_fib(n - 24)\n  const y = prime_fib(n - 25)\n  const z = prime_fib(n - 26)\n  const w = prime_fib(n - 27)\n  const x = prime_fib(n - 28)\n  const y = prime_fib(n - 29)\n  const z = prime_fib(n - 30)\n  const w = prime_fib(n - 31)\n  const x = prime_fib(n - 32)\n  const y = prime_fib(n - 33)\n  const z = prime_fib(n - 34)\n  const w = prime_fib(n - 35)\n  const x = prime_fib(n - 36\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293128,
      "stdout": "../../../../../../tmp/tmpgp77iwlc.ts(50,1): error TS1005: ',' expected.\n../../../../../../tmp/tmpgp77iwlc.ts(50,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpgp77iwlc.ts(68,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpv899wke3.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpdjc_ga7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdjc_ga7i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  if (n === 6) {\n    return 233;\n  }\n  if (n === 7) {\n    return 1361;\n  }\n  if (n === 8) {\n    return 2979;\n  }\n  if (n === 9) {\n    return 4181;\n  }\n  if (n === 10) {\n    return 6561;\n  }\n  if (n === 11) {\n    return 10561;\n  }\n  if (n === 12) {\n    return 16807;\n  }\n  if (n === 13) {\n    return 26107;\n  }\n  if (n === 14) {\n    return 43781;\n  }\n  if (n === 15) {\n    return 67401;\n  }\n  if (n === 16) {\n    return 94041;\n  }\n  if (n === 17) {\n    return 122561;\n  }\n  if (n === 18) {\n    return 174729;\n  }\n  if (n === 19) {\n    return 232601;\n  }\n  if (n === 20) {\n    return 314821;\n  }\n  if (n === 21) {\n    return 477633;\n  }\n  if (n === 22) {\n    return 712861;\n  }\n  if (n === 23) {\n    return 1048583;\n  }\n  if (n === 24) {\n    return 1548581;\n  }\n  if (n === 25) {\n    return 2097169;\n  }\n  if (n === 26) {\n    return 3024641;\n  }\n  if (n === 27) {\n    return 4397331;\n  }\n  if (n === 28) {\n    return 6871947;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293129,
      "stdout": "../../../../../../tmp/tmpd0zycw43.ts(115,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  let a = 1, b = 1, c = 0, d = 0;\n  for (let i = 5; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n    if (isPrime(c)) d = c;\n  }\n  return d;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293129,
      "stdout": "../../../../../../tmp/tmpl_z5n8v9.ts(23,9): error TS2304: Cannot find name 'isPrime'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 0) return 0;\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_fib(n - 31);\n  let F = prime_fib(n - 32\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293129,
      "stdout": "../../../../../../tmp/tmptldqi9jm.ts(51,1): error TS1005: ',' expected.\n../../../../../../tmp/tmptldqi9jm.ts(51,9): error TS1005: ',' expected.\n../../../../../../tmp/tmptldqi9jm.ts(69,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  let a = 1, b = 1, c = 2, d = 3, e = 5, f = 13, g = 89;\n  let i = 2;\n  while (i < n) {\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n    e = f;\n    f = g;\n    g = a + b;\n    i++;\n  }\n  return g;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293129,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmp0uz8go7y.js:45:12)\n    at Object.<anonymous> (/tmp/tmp0uz8go7y.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let a1 = prime_fib(n - 27);\n  let b1 = prime_fib(n - 28);\n  let c1 = prime_fib(n - 29);\n  let d1 = prime_fib(n - 30);\n  let e1 = prime_fib(n - 31);\n  let f1 = prime_fib(n - 32);\n  let g1 = prime_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "../../../../../../tmp/tmpgmwlssjn.ts(73,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpcncev_tt.js:38:12)\n    at Object.<anonymous> (/tmp/tmpcncev_tt.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  let a = 1, b = 1, c = 2, d = 3;\n  let i = 4;\n  while (i < n) {\n    c = a + b;\n    d = c - a;\n    a = b;\n    b = c;\n    c = d;\n    d = c - a;\n    i++;\n  }\n  return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293129,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n13\n    at test (/tmp/tmphkreqozu.js:41:12)\n    at Object.<anonymous> (/tmp/tmphkreqozu.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 13,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return n\n  }\n  let a = 1\n  let b = 1\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a1 = 0\n  let b1 = 0\n  let c1 = 0\n  let d1 = 0\n  let e1 = 0\n  let f1 = 0\n  let g1 = 0\n  let h1 = 0\n  let i1 = 0\n  let j1 = 0\n  let k1 = 0\n  let l1 = 0\n  let m1 = 0\n  let n1 = 0\n  let o1 = 0\n  let p1 = 0\n  let q1 = 0\n  let r1 = 0\n  let s1 = 0\n  let t1 = 0\n  let u1 = 0\n  let v1 = 0\n  let w1 = 0\n  let x1 = 0\n  let y1 = 0\n  let z1 = 0\n  let a2 = 0\n  let b2 = 0\n  let c2 = 0\n  let d2 = 0\n  let e2 = 0\n  let f2 = 0\n  let g2 = 0\n  let h2 = 0\n  let i2 = 0\n  let j2 = 0\n  let k2 = 0\n  let l2 = 0\n  let m2 = 0\n  let n2 = 0\n  let o2 = 0\n  let p2 = 0\n  let q2 = 0\n  let r2 = 0\n  let s2 = 0\n  let t2 = 0\n  let u2 = 0\n  let v2 = 0\n  let w2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpdxaaqqtv.ts(109,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let a1 = a + b;\n  let b1 = b + c;\n  let c1 = c + d;\n  let d1 = d + e;\n  let e1 = e + f;\n  let f1 = f + g;\n  let g\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293121,
      "stdout": "../../../../../../tmp/tmp0ky4c290.ts(79,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpv899wke3.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_fib(n - 31);\n  let F = prime_fib(n - 32);\n  let G = prime_fib(n - 33);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293122,
      "stdout": "../../../../../../tmp/tmpfoa32cug.ts(73,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n    if (n < 2) return n;\n    let a = 1, b = 1, c = 2;\n    while (c < n) {\n        let d = a + b;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293129,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp3jarbvix.js:27:12)\n    at Object.<anonymous> (/tmp/tmp3jarbvix.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  let a = 1, b = 1, c = 2, d = 3;\n  let i = 5;\n  while (i < n) {\n    c = a + b;\n    d = c - a;\n    a = b;\n    b = c;\n    i += 2;\n  }\n  return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293129,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpveaw8br3.js:42:12)\n    at Object.<anonymous> (/tmp/tmpveaw8br3.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let a1 = prime_fib(n - 27);\n  let b1 = prime_fib(n - 28);\n  let c1 = prime_fib(n - 29);\n  let d1 = prime_fib(n - 30);\n  let e\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmprh6xsnob.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  let a = prime_fib(n - 1);\n  let b = prime_fib(n - 2);\n  let c = prime_fib(n - 3);\n  let d = prime_fib(n - 4);\n  let e = prime_fib(n - 5);\n  let f = prime_fib(n - 6);\n  let g = prime_fib(n - 7);\n  let h = prime_fib(n - 8);\n  let i = prime_fib(n - 9);\n  let j = prime_fib(n - 10);\n  let k = prime_fib(n - 11);\n  let l = prime_fib(n - 12);\n  let m = prime_fib(n - 13);\n  let n = prime_fib(n - 14);\n  let o = prime_fib(n - 15);\n  let p = prime_fib(n - 16);\n  let q = prime_fib(n - 17);\n  let r = prime_fib(n - 18);\n  let s = prime_fib(n - 19);\n  let t = prime_fib(n - 20);\n  let u = prime_fib(n - 21);\n  let v = prime_fib(n - 22);\n  let w = prime_fib(n - 23);\n  let x = prime_fib(n - 24);\n  let y = prime_fib(n - 25);\n  let z = prime_fib(n - 26);\n  let A = prime_fib(n - 27);\n  let B = prime_fib(n - 28);\n  let C = prime_fib(n - 29);\n  let D = prime_fib(n - 30);\n  let E = prime_f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "../../../../../../tmp/tmpv899wke3.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  if (n === 6) return 233;\n  if (n === 7) return 521;\n  if (n === 8) return 1279;\n  if (n === 9) return 2731;\n  if (n === 10) return 5177;\n  if (n === 11) return 12289;\n  if (n === 12) return 27449;\n  if (n === 13) return 52787;\n  if (n === 14) return 126481;\n  if (n === 15) return 274449;\n  if (n === 16) return 527887;\n  if (n === 17) return 1264891;\n  if (n === 18) return 2744497;\n  if (n === 19) return 5278873;\n  if (n === 20) return 12648913;\n  if (n === 21) return 27444979;\n  if (n === 22) return 52788793;\n  if (n === 23) return 126489157;\n  if (n === 24) return 274449793;\n  if (n === 25) return 527887933;\n  if (n === 26) return 1264891601;\n  if (n === 27) return 2744497931;\n  if (n === 28) return 5278879297;\n  if (n === 29) return 12648916057;\n  if (n === 30) return 27444979293;\n  if (n === 31) return 52788792927;\n  if (n === 32) return 126489160171;\n  if (n === 33) return 274449792921;\n  if (n === 34) return 527887929201;\n  if (n === 35) return 1264891601709;\n  if (n === 36) return 2744497929201;\n  if (n === 37) return 5278879292017;\n  if (n === 38) return 12\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293129,
      "stdout": "../../../../../../tmp/tmpf3ymko3e.ts(69,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return 2;\n  }\n  let a = 1, b = 1, c = 2;\n  while (c < n) {\n    let d = a + b;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293129,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp5c6s93ny.js:29:12)\n    at Object.<anonymous> (/tmp/tmp5c6s93ny.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 0) return 0;\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmp6_r2xast.js:35:12)\n    at Object.<anonymous> (/tmp/tmp6_r2xast.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  if (n === 6) return 233;\n  if (n === 7) return 521;\n  if (n === 8) return 1487;\n  if (n === 9) return 4181;\n  if (n === 10) return 12289;\n  if (n === 11) return 51423;\n  if (n === 12) return 162711;\n  if (n === 13) return 410041;\n  if (n === 14) return 1225603;\n  if (n === 15) return 5142223;\n  if (n === 16) return 16271071;\n  if (n === 17) return 41004129;\n  if (n === 18) return 122560217;\n  if (n === 19) return 514222467;\n  if (n === 20) return 16271071;\n  if (n === 21) return 410041193;\n  if (n === 22) return 122560217;\n  if (n === 23) return 514222467;\n  if (n === 24) return 16271071;\n  if (n === 25) return 410041193;\n  if (n === 26) return 122560217;\n  if (n === 27) return 514222467;\n  if (n === 28) return 16271071;\n  if (n === 29) return 410041193;\n  if (n === 30) return 122560217;\n  if (n === 31) return 514222467;\n  if (n === 32) return 16271071;\n  if (n === 33) return 410041193;\n  if (n === 34) return 122560217;\n  if (n === 35) return 514222467;\n  if (n === 36) return 16271071;\n  if (n === 37) return 410041193;\n  if (n === 38) return 122560217;\n  if (n ===\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293129,
      "stdout": "../../../../../../tmp/tmpo6akn9ur.ts(52,9): error TS1005: ')' expected.\n../../../../../../tmp/tmpo6akn9ur.ts(70,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  if (n === 6) return 233;\n  if (n === 7) return 563;\n  if (n === 8) return 1321;\n  if (n === 9) return 3379;\n  if (n === 10) return 5777;\n  if (n === 11) return 12397;\n  if (n === 12) return 18179;\n  if (n === 13) return 26377;\n  if (n === 14) return 39421;\n  if (n === 15) return 59021;\n  if (n === 16) return 81641;\n  if (n === 17) return 114817;\n  if (n === 18) return 162417;\n  if (n === 19) return 223529;\n  if (n === 20) return 293687;\n  if (n === 21) return 392897;\n  if (n === 22) return 514229;\n  if (n === 23) return 686431;\n  if (n === 24) return 917609;\n  if (n === 25) return 1245161;\n  if (n === 26) return 1577161;\n  if (n === 27) return 2035161;\n  if (n === 28) return 2579161;\n  if (n === 29) return 3177161;\n  if (n === 30) return 3971601;\n  if (n === 31) return 5177161;\n  if (n === 32) return 6592417;\n  if (n === 33) return 8182417;\n  if (n === 34) return 10362417;\n  if (n === 35) return 13012417;\n  if (n === 36) return 16122417;\n  if (n === 37) return 19325161;\n  if (n === 38) return 23542517;\n  if (n === 39) return 27682417;\n  if (n === 40) return 31972517;\n  if (\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293129,
      "stdout": "../../../../../../tmp/tmpfe54ahn1.ts(54,9): error TS1005: ')' expected.\n../../../../../../tmp/tmpfe54ahn1.ts(72,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  let a = 1, b = 1, c = 2, d = 3, e = 5, f = 13, g = 89;\n  let i = 2;\n  while (i < n) {\n    let t = a + b;\n    a = b;\n    b = c;\n    c = d + e;\n    d = e;\n    e = t;\n    t = f + g;\n    f = g;\n    g = t;\n    i++;\n  }\n  return g;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293129,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n484\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpr6b6club.js:47:12)\n    at Object.<anonymous> (/tmp/tmpr6b6club.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 484,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n102\n\nshould loosely deep-equal\n\n233\n    at test (/tmp/tmpdjc_ga7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdjc_ga7i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 102,\n  expected: 233,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return 3;\n    }\n    if (n === 3) {\n        return 5;\n    }\n    if (n === 4) {\n        return 13;\n    }\n    if (n === 5) {\n        return 89;\n    }\n    let a = prime_fib(n - 1);\n    let b = prime_fib(n - 2);\n    let c = prime_fib(n - 3);\n    let d = prime_fib(n - 4);\n    let e = prime_fib(n - 5);\n    let f = prime_fib(n - 6);\n    let g = prime_fib(n - 7);\n    let h = prime_fib(n - 8);\n    let i = prime_fib(n - 9);\n    let j = prime_fib(n - 10);\n    let k = prime_fib(n - 11);\n    let l = prime_fib(n - 12);\n    let m = prime_fib(n - 13);\n    let n = prime_fib(n - 14);\n    let o = prime_fib(n - 15);\n    let p = prime_fib(n - 16);\n    let q = prime_fib(n - 17);\n    let r = prime_fib(n - 18);\n    let s = prime_fib(n - 19);\n    let t = prime_fib(n - 20);\n    let u = prime_fib(n - 21);\n    let v = prime_fib(n - 22);\n    let w = prime_fib(n - 23);\n    let x = prime_fib(n - 24);\n    let y = prime_fib(n - 25);\n    let z = prime_fib(n - 26);\n    let a1 = prime_fib(n - 27);\n    let b1 = prime_fib(n - 28);\n    let c1 = prime_fib(n - 29);\n    let d1 = prime_fib(n - 30);\n    let e\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "timestamp": 1664293129,
      "stdout": "../../../../../../tmp/tmpuvc56i0r.ts(77,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}