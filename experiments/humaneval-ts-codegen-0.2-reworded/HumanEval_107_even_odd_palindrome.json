{
  "name": "HumanEval_107_even_odd_palindrome",
  "language": "ts",
  "prompt": "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n: number): [number, number] {\n",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_palindrome;\n  assert.deepEqual(candidate(123),[8, 13]);\n  assert.deepEqual(candidate(12),[4, 6]);\n  assert.deepEqual(candidate(3),[1, 2]);\n  assert.deepEqual(candidate(63),[6, 8]);\n  assert.deepEqual(candidate(25),[5, 6]);\n  assert.deepEqual(candidate(19),[4, 6]);\n  assert.deepEqual(candidate(9),[4, 5]);\n  assert.deepEqual(candidate(1),[0, 1]);\n}\n\ntest();",
  "completions": [
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n",
    "  let odd = 0;\n  let even = 0;\n  let i = 1;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    i++;\n  }\n  return [even, odd];\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 2\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\nmodule.exports = even_odd_palindrome\n",
    "  const odd = [];\n  const even = [];\n  let i = 1;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even.push(i);\n      } else {\n        odd.push(i);\n      }\n    }\n    i++;\n  }\n  return [even.length, odd.length];\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false;\n    }\n    n /= 10;\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    const count = 0;\n    const j = i;\n    while (j <= n) {\n      if (isPalindrome(i + j)) {\n        count++;\n      }\n      j++;\n    }\n    if (count % 2 === 0) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr;\n}\n\nfunction isPalindrome(n: number): boolean {\n  const str = n.toString();\n  let i = 0;\n  let j = str.length - 1;\n  while (i < j) {\n    if (str[i] !== str[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let even = 0\n  let odd = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let s = String(n)\n  let i = 0\n  let j = s.length - 1\n  while (i < j) {\n    if (s[i] !== s[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let odd = 0\n  let even = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    let isPalindrome = true\n    while (num) {\n      if (num % 2) {\n        odd++\n        isPalindrome = false\n        break\n      }\n      num = num / 2\n    }\n    if (isPalindrome) {\n      even++\n    }\n  }\n  return [even, odd]\n}\n",
    "  const arr = [];\n  let i = 2;\n  while (i <= n) {\n    const count = 0;\n    let j = i;\n    while (j <= n) {\n      if (isPalindrome(i + j)) {\n        count++;\n      }\n      j++;\n    }\n    if (count % 2 === 0) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr;\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10.toString().charAt(i) || n % 10 !== n % 10.toString().charAt(j)) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let odd = 0, even = 0, i = 0;\n  while (i < n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    i++;\n  }\n  return [even, odd];\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0, j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false;\n    }\n    n /= 10;\n    i++;\n    j--;\n  }\n  return true;\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10.toString().charAt(i)) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let odd = 0;\n  let even = 0;\n  let i = 1;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    i++;\n  }\n  return [even, odd];\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let s = ''\n  while (n > 0) {\n    s = s + n % 10\n    n = Math.floor(n / 10)\n  }\n  return s === s.split('').reverse().join('')\n}\n",
    "  let result = [];\n  let i = 1;\n  let j = 1;\n  let odd = 0;\n  let even = 0;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    i++;\n  }\n  result.push(even);\n  result.push(odd);\n  return result;\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false;\n    }\n    n = n / 10;\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let odd = 0\n  let even = 0\n  for (let i = 1; i <= n; i++) {\n    let is_palindrome = true\n    for (let j = 1; j <= i / 2; j++) {\n      if (i % j !== 0) {\n        is_palindrome = false\n        break\n      }\n    }\n    if (is_palindrome) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n  }\n  return [even, odd]\n}\n",
    "  let even = 0\n  let odd = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n",
    "  let odd = 0, even = 0, i = 0;\n  while (i < n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    i++;\n  }\n  return [even, odd];\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let s = ''\n  while (n > 0) {\n    s = s + n % 10\n    n = Math.floor(n / 10)\n  }\n  return s === s.split('').reverse().join('')\n}\n",
    "  let even = 0\n  let odd = 0\n  let i = 2\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false\n    }\n    n = n / 10\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let odd = 0\n  let even = 0\n  for (let i = 1; i <= n; i++) {\n    let is_palindrome = true\n    for (let j = 1; j < i / 2; j++) {\n      if (i % j !== 0) {\n        is_palindrome = false\n        break\n      }\n    }\n    if (is_palindrome) {\n      if (i % 2 === 0) {\n        even += 1\n      } else {\n        odd += 1\n      }\n    }\n  }\n  return [even, odd]\n}\n",
    "  let even = 0\n  let odd = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let s = ''\n  while (n > 0) {\n    s = s + n % 10\n    n = Math.floor(n / 10)\n  }\n  return s === s.split('').reverse().join('')\n}\n",
    "  let odd = 0\n  let even = 0\n  for (let i = 1; i <= n; i++) {\n    let isPalindrome = true\n    for (let j = 1; j <= i / 2; j++) {\n      if (i % j !== 0) {\n        isPalindrome = false\n        break\n      }\n    }\n    if (isPalindrome) {\n      odd++\n    } else {\n      even++\n    }\n  }\n  return [even, odd]\n}\n",
    "  let even = 0\n  let odd = 0\n  for (let i = 1; i <= n; i++) {\n    let isPalindrome = true\n    for (let j = 1; j <= Math.floor(i / 2); j++) {\n      if (i % j !== 0) {\n        isPalindrome = false\n        break\n      }\n    }\n    if (isPalindrome) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n  }\n  return [even, odd]\n}\n",
    "  let odd = 0, even = 0, i = 0;\n  while (i < n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    i++;\n  }\n  return [even, odd];\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0, j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let odd = 0, even = 0, i = 1, j = 1, count = 0;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    i++;\n  }\n  return [odd, even];\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0, j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n",
    "  const result = [];\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let isPalindrome = true;\n    for (let j = 1; j <= i / 2; j++) {\n      if (i % j !== 0) {\n        isPalindrome = false;\n        break;\n      }\n    }\n    if (isPalindrome) {\n      count++;\n    }\n  }\n  result.push(count);\n  result.push(n - count);\n  return result;\n}\n",
    "  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let is_palindrome = true;\n    for (let j = 1; j <= i / 2; j++) {\n      if (i % j !== 0) {\n        is_palindrome = false;\n        break;\n      }\n    }\n    if (is_palindrome) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n",
    "  let result = [];\n  let odd = 0;\n  let even = 0;\n  for (let i = 1; i <= n; i++) {\n    let isPalindrome = true;\n    for (let j = 1; j <= i / 2; j++) {\n      if (i % j !== 0) {\n        isPalindrome = false;\n        break;\n      }\n    }\n    if (isPalindrome) {\n      result.push(i);\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false\n    }\n    n /= 10\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n",
    "  let even = 0;\n  let odd = 0;\n  let i = 1;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    i++;\n  }\n  return [even, odd];\n}\n",
    "  let result = [];\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let isPalindrome = true;\n    for (let j = 0; j < i / 2; j++) {\n      if (i % 2 === 0 && i !== 2 * j + 1) {\n        isPalindrome = false;\n        break;\n      }\n      if (i % 2 === 1 && i !== 2 * j + 2) {\n        isPalindrome = false;\n        break;\n      }\n    }\n    if (isPalindrome) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  result.push(even);\n  result.push(odd);\n  return result;\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n",
    "  const odd = [];\n  const even = [];\n  let i = 2;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even.push(i);\n      } else {\n        odd.push(i);\n      }\n    }\n    i++;\n  }\n  return [even.length, odd.length];\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10.toString()[i]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n",
    "  const result = [];\n  let i = 1;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      result.push(i);\n    }\n    i++;\n  }\n  return result;\n}\n\nfunction isPalindrome(n: number): boolean {\n  const s = String(n);\n  return s === s.split('').reverse().join('');\n}\n",
    "  let even = 0\n  let odd = 0\n  let i = 1\n  let j = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false\n    }\n    n = n / 10\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let result = [];\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    let is_palindrome = true;\n    let j = 1;\n    while (j <= i) {\n      if (i % 2 === 0 && j % 2 === 0) {\n        count++;\n      } else if (i % 2 === 1 && j % 2 === 1) {\n        count++;\n      } else {\n        is_palindrome = false;\n        break;\n      }\n      j++;\n    }\n    if (is_palindrome) {\n      result.push(i);\n    }\n    i++;\n  }\n  return [count, result.length - count];\n}\n",
    "  let even = 0, odd = 0, i = 0;\n  while (i < n) {\n    if (isEven(i)) {\n      even++;\n    } else {\n      odd++;\n    }\n    i++;\n  }\n  return [even, odd];\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false\n    }\n    n /= 10\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let s = ''\n  while (n > 0) {\n    s = s + n % 10\n    n = Math.floor(n / 10)\n  }\n  return s === s.split('').reverse().join('')\n}\n\nmodule.exports = even_odd_palindrome\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false\n    }\n    n = n / 10\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n",
    "  let odd = 0;\n  let even = 0;\n  let i = 1;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    i++;\n  }\n  return [even, odd];\n}\n\nfunction isPalindrome(n: number): boolean {\n  let s = '' + n;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i] !== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  const even = [];\n  const odd = [];\n  let i = 1;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even.push(i);\n      } else {\n        odd.push(i);\n      }\n    }\n    i++;\n  }\n  return [even.length, odd.length];\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  const result = [];\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let count_even = 0;\n    let count_odd = 0;\n    for (let j = 1; j <= i / 2; j++) {\n      if (i % j === 0) {\n        count_even++;\n      }\n    }\n    for (let j = 1; j <= i / 2; j++) {\n      if (i % j !== 0) {\n        count_odd++;\n      }\n    }\n    if (count_even % 2 === 0 && count_odd % 2 === 0) {\n      count++;\n    }\n    result.push(count_even, count_odd);\n  }\n  return result;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  let j = 1\n  let odd_palindrome = 0\n  let even_palindrome = 0\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even_palindrome += 1\n      } else {\n        odd_palindrome += 1\n      }\n    }\n    i += 1\n  }\n  while (j <= n) {\n    if (isPalindrome(j)) {\n      if (j % 2 === 0) {\n        even_palindrome += 1\n      } else {\n        odd_palindrome += 1\n      }\n    }\n    j += 1\n  }\n  return [odd_palindrome, even_palindrome]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = 0\n  let temp = 0\n  while (i < n) {\n    temp = n % 10\n    if (temp != 0 && i != j) {\n      return false\n    }\n    i += 1\n    j += 1\n  }\n  return true\n}\n\nmodule.exports = even_odd_palindrome\n",
    "  let result = [];\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      result.push(i);\n      if (i % 2 === 0) {\n        result.push(i);\n      }\n    }\n    i++;\n  }\n  return result;\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false;\n    }\n    n = n / 10;\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;",
    "  const arr = [];\n  let i = 2;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      arr.push(i);\n    }\n    i += 2;\n  }\n  return arr;\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false;\n    }\n    i += 1;\n    j -= 1;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let odd = 0\n  let even = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    let isPalindrome = true\n    while (num) {\n      if (num % 2 !== 0) {\n        isPalindrome = false\n        break\n      }\n      num = num / 2\n    }\n    if (isPalindrome) {\n      odd++\n    } else {\n      even++\n    }\n  }\n  return [even, odd]\n}\n",
    "  let even = 0\n  let odd = 0\n  for (let i = 1; i <= n; i++) {\n    let is_palindrome = true\n    for (let j = 1; j < i / 2; j++) {\n      if (i % j !== 0) {\n        is_palindrome = false\n        break\n      }\n    }\n    if (is_palindrome) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n  }\n  return [even, odd]\n}\n",
    "  let odd = 0, even = 0, i = 1, j = 1, count = 0;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    i++;\n  }\n  return [even, odd];\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0, j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n",
    "  let odd = 0\n  let even = 0\n  for (let i = 1; i <= n; i++) {\n    let isPalindrome = true\n    for (let j = 1; j <= Math.floor(i / 2); j++) {\n      if (i % j !== 0) {\n        isPalindrome = false\n        break\n      }\n    }\n    if (isPalindrome) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n  }\n  return [even, odd]\n}\n",
    "  let even = 0\n  let odd = 0\n  for (let i = 1; i <= n; i++) {\n    let isPalindrome = true\n    for (let j = 1; j <= i / 2; j++) {\n      if (i % j !== 0) {\n        isPalindrome = false\n        break\n      }\n    }\n    if (isPalindrome) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n  }\n  return [even, odd]\n}\n",
    "  let even = 0\n  let odd = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let s = ''\n  while (n > 0) {\n    s = s + n % 10\n    n = Math.floor(n / 10)\n  }\n  return s === s.split('').reverse().join('')\n}\n",
    "  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n",
    "  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n",
    "  let odd = 0, even = 0, i = 0;\n  while (i < n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    i++;\n  }\n  return [even, odd];\n}\n\nfunction isPalindrome(n: number): boolean {\n  let s = '' + n;\n  let i = 0, j = s.length - 1;\n  while (i < j) {\n    if (s[i] !== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n",
    "  let odd = 0, even = 0, i = 1, j = 1, k = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i += 2;\n    if (i > n) {\n      break;\n    }\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i += 2;\n    if (i > n) {\n      break;\n    }\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i += 2;\n    if (i > n) {\n      break;\n    }\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i += 2;\n    if (i > n) {\n      break;\n    }\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i += 2;\n    if (i > n) {\n      break;\n    }\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i += 2;\n    if (i > n) {\n      break;\n    }\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i += 2;\n    if (i > n) {\n      break;\n    }\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i += 2;\n    if (i > n) {\n      break;\n    }\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i += 2;\n    if (i > n) {\n      break;\n    }\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i += 2;\n    if (i > n",
    "  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    const even = i;\n    const odd = i + 1;\n    if (isPalindrome(even) && isPalindrome(odd)) {\n      arr.push(even);\n      arr.push(odd);\n    }\n    i += 2;\n  }\n  return arr;\n}\n\nfunction isPalindrome(n: number): boolean {\n  return n === reverse(n);\n}\n\nfunction reverse(n: number): number {\n  return n * 10 + n % 10;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  const odd = [];\n  const even = [];\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even.push(i);\n      } else {\n        odd.push(i);\n      }\n    }\n  }\n  return [even.length, odd.length];\n}\n\nfunction isPalindrome(n: number): boolean {\n  let num = n;\n  let rev = 0;\n  while (num > 0) {\n    rev = rev * 10 + num % 10;\n    num = Math.floor(num / 10);\n  }\n  return rev === n;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let even = 0\n  let odd = 0\n  for (let i = 1; i <= n; i++) {\n    let is_palindrome = true\n    for (let j = 0; j < i / 2; j++) {\n      if (i % 2 !== 0 && i % 2 !== j + 1) {\n        is_palindrome = false\n        break\n      }\n    }\n    if (is_palindrome) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n  }\n  return [even, odd]\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let s = ''\n  while (n > 0) {\n    s = s + n % 10\n    n = Math.floor(n / 10)\n  }\n  return s === s.split('').reverse().join('')\n}\n",
    "  const arr = [];\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  while (i < n) {\n    if (isPalindrome(i)) {\n      arr.push(i);\n      count++;\n    }\n    i++;\n  }\n  while (j < n) {\n    if (isPalindrome(j)) {\n      arr.push(j);\n      count++;\n    }\n    j++;\n  }\n  return [count, arr.length - count];\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false\n    }\n    n /= 10\n    i++\n    j--\n  }\n  return true\n}\n\nmodule.exports = even_odd_palindrome\n",
    "  const result = [];\n  let i = 1;\n  while (i <= n) {\n    let count = 0;\n    let j = i;\n    while (j <= n) {\n      if (isPalindrome(i + j)) {\n        count++;\n      }\n      j++;\n    }\n    if (count % 2 === 0) {\n      result.push(i);\n    }\n    i++;\n  }\n  return result;\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10.toString().charAt(i) - '0') {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  const result = [];\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let count_odd = 0;\n    let count_even = 0;\n    for (let j = 1; j <= i / 2; j++) {\n      if (i % j === 0) {\n        count_odd++;\n      }\n      if (i % j === 1) {\n        count_even++;\n      }\n    }\n    if (count_even === i / 2) {\n      count++;\n      result.push(i);\n    }\n    if (count_odd === i / 2) {\n      count++;\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  let j = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = 0\n  while (i < n) {\n    if (n % 10 !== n % (10 - i)) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n",
    "  const result = [];\n  let i = 1;\n  while (i <= n) {\n    const count = 0;\n    let j = i;\n    while (j <= n) {\n      if (isPalindrome(i + j)) {\n        count++;\n      }\n      j++;\n    }\n    if (count % 2 === 0) {\n      result.push(i);\n    }\n    i++;\n  }\n  return result;\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10.toString()[i]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n",
    "  const odd = [];\n  const even = [];\n  let i = 2;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even.push(i);\n      } else {\n        odd.push(i);\n      }\n    }\n    i += 2;\n  }\n  return [even.length, odd.length];\n}\n\nfunction isPalindrome(n: number): boolean {\n  const s = String(n);\n  return s === s.split('').reverse().join('');\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let even = 0\n  let odd = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let s = ''\n  while (n > 0) {\n    s = s + n % 10\n    n = Math.floor(n / 10)\n  }\n  return s === s.split('').reverse().join('')\n}\n\nmodule.exports = even_odd_palindrome\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let s = ''\n  while (n > 0) {\n    s = s + n % 10\n    n = Math.floor(n / 10)\n  }\n  return s === s.split('').reverse().join('')\n}\n",
    "  const odd = [];\n  const even = [];\n  let i = 1;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even.push(i);\n      } else {\n        odd.push(i);\n      }\n    }\n    i++;\n  }\n  return [even.length, odd.length];\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false;\n    }\n    n = n / 10;\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let result = [];\n  let i = 1;\n  let j = 1;\n  let count = 0;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      count++;\n      if (count % 2 === 0) {\n        result.push(i);\n      }\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (isPalindrome(j)) {\n      count++;\n      if (count % 2 === 1) {\n        result.push(j);\n      }\n    }\n    j++;\n  }\n  return result;\n}\n\nfunction isPalindrome(n: number): boolean {\n  let result = true;\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      result = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return result;\n}\n\nmodule.exports = even_odd_palindrome;",
    "  const even = [];\n  const odd = [];\n  let i = 2;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even.push(i);\n      } else {\n        odd.push(i);\n      }\n    }\n    i++;\n  }\n  return [even.length, odd.length];\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false;\n    }\n    n = n / 10;\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;",
    "  const result = [];\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      count++;\n      if (count % 2 === 0) {\n        result.push(i);\n      }\n    }\n  }\n  return result;\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10.toString().charAt(i)) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  const result = [];\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      count++;\n      if (count % 2 === 0) {\n        result.push(i);\n      }\n    }\n  }\n  return result;\n}\n\nfunction isPalindrome(n: number): boolean {\n  let num = n;\n  let reverse = 0;\n  while (num > 0) {\n    reverse = reverse * 10 + num % 10;\n    num = Math.floor(num / 10);\n  }\n  return reverse === n;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let even = 0\n  let odd = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false\n    }\n    n = n / 10\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let result = [];\n  let i = 2;\n  while (i <= n) {\n    let count = 0;\n    let j = i;\n    while (j <= n) {\n      if (isPalindrome(i + j)) {\n        count++;\n      }\n      j++;\n    }\n    if (count % 2 === 0) {\n      result.push(i);\n    }\n    i++;\n  }\n  return result;\n}\n\nfunction isPalindrome(n: number): boolean {\n  let result = true;\n  let i = 0;\n  while (i < n / 2) {\n    if (n % 10 !== n % 10 - 1) {\n      result = false;\n      break;\n    }\n    n = n / 10;\n    i++;\n  }\n  return result;\n}\n\nmodule.exports = even_odd_palindrome;",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let s = ''\n  while (n > 0) {\n    s = s + n % 10\n    n = Math.floor(n / 10)\n  }\n  return s === s.split('').reverse().join('')\n}\n",
    "  let odd = 0\n  let even = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    let rev = reverse(num)\n    if (num === rev) {\n      if (num % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n  }\n  return [even, odd]\n}\n",
    "  const arr = [];\n  let i = 2;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      arr.push(i);\n    }\n    i += 2;\n  }\n  return arr;\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false;\n    }\n    n /= 10;\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let even = 0\n  let odd = 0\n  for (let i = 1; i <= n; i++) {\n    let is_palindrome = true\n    for (let j = 1; j < i; j++) {\n      if (i % j !== 0) {\n        is_palindrome = false\n        break\n      }\n    }\n    if (is_palindrome) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n  }\n  return [even, odd]\n}\n",
    "  let even = 0\n  let odd = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false\n    }\n    n /= 10\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let even = 0\n  let odd = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n",
    "  let even = 0, odd = 0;\n  let i = 1;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    i++;\n  }\n  return [even, odd];\n}\n\nfunction isPalindrome(n: number): boolean {\n  let s = '' + n;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i] !== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n",
    "  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr;\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n",
    "  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let is_palindrome = true;\n    for (let j = 1; j <= i / 2; j++) {\n      if (i % j !== 0) {\n        is_palindrome = false;\n        break;\n      }\n    }\n    if (is_palindrome) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n",
    "  let even = 0\n  let odd = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n",
    "  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    let count = 0;\n    let j = i;\n    while (j > 0) {\n      if (j % 2 === 0) {\n        count++;\n      }\n      j = j / 2;\n    }\n    arr.push(count);\n  }\n  return arr;\n}\n",
    "  let even = 0\n  let odd = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let s = ''\n  while (n > 0) {\n    s = s + n % 10\n    n = Math.floor(n / 10)\n  }\n  return s === s.split('').reverse().join('')\n}\n",
    "  let result = [];\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    let j = i;\n    let odd = 0;\n    let even = 0;\n    while (j <= n) {\n      if (isPalindrome(j)) {\n        if (j % 2 === 0) {\n          even++;\n        } else {\n          odd++;\n        }\n      }\n      j++;\n    }\n    if (odd > 0) {\n      result.push(odd);\n    }\n    if (even > 0) {\n      result.push(even);\n    }\n    i++;\n  }\n  return result;\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  const result = [];\n  let count = 0;\n  let start = 1;\n  let end = n;\n  while (start <= end) {\n    const mid = start + Math.floor((end - start) / 2);\n    if (isPalindrome(mid)) {\n      count++;\n      if (mid % 2 === 0) {\n        result.push(mid);\n      }\n    }\n    if (mid < n) {\n      start = mid + 1;\n    } else {\n      end = mid - 1;\n    }\n  }\n  return [count, result.length];\n}\n\nfunction isPalindrome(n: number): boolean {\n  let num = n;\n  let rev = 0;\n  while (num) {\n    rev = rev * 10 + num % 10;\n    num = Math.floor(num / 10);\n  }\n  return rev === n;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let even = 0\n  let odd = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n",
    "  let odd = 0;\n  let even = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n\nfunction isPalindrome(n: number): boolean {\n  let num = n;\n  let reverse = 0;\n  while (num > 0) {\n    reverse = reverse * 10 + num % 10;\n    num = Math.floor(num / 10);\n  }\n  return reverse === n;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let even = 0, odd = 0, i = 1;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    i++;\n  }\n  return [even, odd];\n}\n\nfunction isPalindrome(n: number): boolean {\n  let s = '' + n;\n  let i = 0, j = s.length - 1;\n  while (i < j) {\n    if (s[i] !== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  const result = [];\n  let i = 1;\n  while (i <= n) {\n    const count = 0;\n    let j = i;\n    while (j <= n) {\n      if (isPalindrome(i + j)) {\n        count++;\n      }\n      j++;\n    }\n    if (count % 2 === 0) {\n      result.push(i);\n    }\n    i++;\n  }\n  return result;\n}\n\nfunction isPalindrome(n: number): boolean {\n  const s = String(n);\n  return s === s.split('').reverse().join('');\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let odd = 0\n  let even = 0\n  for (let i = 1; i <= n; i++) {\n    let isPalindrome = true\n    for (let j = 1; j < i / 2; j++) {\n      if (i % j !== 0) {\n        isPalindrome = false\n        break\n      }\n    }\n    if (isPalindrome) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n  }\n  return [even, odd]\n}\n",
    "  let odd = 0, even = 0, i = 0;\n  for (i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0, j = 0;\n  while (i < n) {\n    if (n % 2 === 0) {\n      i++;\n    } else {\n      j++;\n    }\n    if (i === j) {\n      i++;\n      j--;\n    } else {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10.toString()[i]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\nmodule.exports = even_odd_palindrome\n",
    "  let odd = 0\n  let even = 0\n  let i = 2\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even += 1\n      } else {\n        odd += 1\n      }\n    }\n    i += 1\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false\n    }\n    i += 1\n    j -= 1\n  }\n  return true\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even += 1\n      } else {\n        odd += 1\n      }\n    }\n    i += 1\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false\n    }\n    i += 1\n    j -= 1\n  }\n  return true\n}\n\nmodule.exports = even_odd_palindrome\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10.toString()[i]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\nmodule.exports = even_odd_palindrome\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  let j = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n\nfunction isPalindrome(n: number): boolean {\n  let s = '' + n;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i] !== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n",
    "  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n",
    "  let odd = 0, even = 0, i = 0;\n  while (i < n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    i++;\n  }\n  return [even, odd];\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0, j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false;\n    }\n    n /= 10;\n    i++;\n    j--;\n  }\n  return true;\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n",
    "  const even = [];\n  const odd = [];\n  let i = 1;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even.push(i);\n      } else {\n        odd.push(i);\n      }\n    }\n    i++;\n  }\n  return [even.length, odd.length];\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false;\n    }\n    n = n / 10;\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let even = 0\n  let odd = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10.toString().charAt(i)) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\nmodule.exports = even_odd_palindrome\n",
    "  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n",
    "  let result = [];\n  let odd = 0;\n  let even = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  result.push(even);\n  result.push(odd);\n  return result;\n}\n\nfunction isPalindrome(n: number): boolean {\n  let s = String(n);\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i] !== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let odd = 0, even = 0, i = 1, j = 1, k = 1, l = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (j % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    j++;\n  }\n  while (k <= n) {\n    if (k % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    k++;\n  }\n  while (l <= n) {\n    if (l % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    l++;\n  }\n  return [even, odd];\n}\n",
    "  let even = 0\n  let odd = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false\n    }\n    n /= 10\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let result = [];\n  let odd = 0;\n  let even = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  result.push(even);\n  result.push(odd);\n  return result;\n}\n",
    "  let even = 0;\n  let odd = 0;\n  let i = 1;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    i++;\n  }\n  return [even, odd];\n}\n\nfunction isPalindrome(n: number): boolean {\n  let s = '' + n;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i] !== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  const result = [];\n  let i = 2;\n  while (i <= n) {\n    const num = i;\n    let count = 0;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        count++;\n      }\n      num = num / 2;\n    }\n    if (count % 2 === 0) {\n      result.push(i);\n    }\n    i++;\n  }\n  return result;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let even = 0, odd = 0, i = 0;\n  while (i < n) {\n    if (isEven(i)) {\n      even++;\n    } else {\n      odd++;\n    }\n    i++;\n  }\n  return [even, odd];\n}\n",
    "  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    let count = 0;\n    while (num) {\n      if (num % 2) {\n        count++;\n      }\n      num = num / 2;\n    }\n    if (count % 2) {\n      odd++;\n    } else {\n      even++;\n    }\n  }\n  return [even, odd];\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 2\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let odd = 0\n  let even = 0\n  for (let i = 1; i <= n; i++) {\n    let isPalindrome = true\n    for (let j = 1; j <= Math.floor(i / 2); j++) {\n      if (i % j !== 0) {\n        isPalindrome = false\n        break\n      }\n    }\n    if (isPalindrome) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n  }\n  return [even, odd]\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\nmodule.exports = even_odd_palindrome\n",
    "  let odd = 0\n  let even = 0\n  let i = 2\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even += 1\n      } else {\n        odd += 1\n      }\n    }\n    i += 1\n  }\n  return [even, odd]\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false\n    }\n    n /= 10\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let even = 0\n  let odd = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n",
    "  let result = [];\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    let isPalindrome = true;\n    let j = 1;\n    while (j <= i / 2) {\n      if (i % j !== 0) {\n        isPalindrome = false;\n        break;\n      }\n      j++;\n    }\n    if (isPalindrome) {\n      count++;\n    }\n    i++;\n  }\n  result.push(count);\n  result.push(count - 1);\n  return result;\n}\n",
    "  let even = 0\n  let odd = 0\n  for (let i = 1; i <= n; i++) {\n    let isPalindrome = true\n    for (let j = 0; j < i / 2; j++) {\n      if (i % 2 === 0 && i !== 2 * j + 1) {\n        isPalindrome = false\n        break\n      } else if (i % 2 !== 0 && i !== 2 * j + 1) {\n        isPalindrome = false\n        break\n      }\n    }\n    if (isPalindrome) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n  }\n  return [even, odd]\n}\n",
    "  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let is_palindrome = true;\n    for (let j = 1; j < i / 2; j++) {\n      if (i % j !== 0) {\n        is_palindrome = false;\n        break;\n      }\n    }\n    if (is_palindrome) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n",
    "  let even = 0\n  let odd = 0\n  let i = 1\n  let j = 1\n  let count = 0\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      count++\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false\n    }\n    n = n / 10\n    i++\n    j--\n  }\n  return true\n}\n",
    "  const result = [];\n  let i = 2;\n  while (i <= n) {\n    const odd = i;\n    const even = i + 1;\n    if (isPalindrome(odd) && isPalindrome(even)) {\n      result.push(odd);\n      result.push(even);\n    }\n    i += 2;\n  }\n  return result;\n}\n",
    "  const result = [];\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      count++;\n      if (count % 2 === 0) {\n        result.push(i);\n      }\n    }\n    i++;\n  }\n  return result;\n}\n",
    "  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    const sum = i + i;\n    if (sum % 2 === 0) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr;\n}\n",
    "  let result = [];\n  let odd = 0;\n  let even = 0;\n  for (let i = 1; i <= n; i++) {\n    let isPalindrome = true;\n    for (let j = 1; j <= i / 2; j++) {\n      if (i % j !== 0) {\n        isPalindrome = false;\n        break;\n      }\n    }\n    if (isPalindrome) {\n      result.push(i);\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n",
    "  const result = [];\n  let i = 2;\n  let j = n;\n  while (i <= j) {\n    if (isPalindrome(i)) {\n      result.push(i);\n    }\n    if (isPalindrome(j)) {\n      result.push(j);\n    }\n    i += 2;\n    j -= 2;\n  }\n  return result;\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false;\n    }\n    i += 1;\n    j -= 1;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    const is_palindrome = isPalindrome(i);\n    if (is_palindrome) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr;\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let s = ''\n  while (n > 0) {\n    s = s + n % 10\n    n = Math.floor(n / 10)\n  }\n  return s === s.split('').reverse().join('')\n}\n",
    "  let even = 0\n  let odd = 0\n  let i = 1\n  let j = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false\n    }\n    n /= 10\n    i++\n    j--\n  }\n  return true\n}\n\nmodule.exports = even_odd_palindrome\n",
    "  const result = [];\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      count++;\n    }\n    i++;\n  }\n  result.push(count);\n  result.push(count / 2);\n  return result;\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  let j = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10.toString().charAt(i) || n % 10 !== n % 10.toString().charAt(j)) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let result = [];\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let is_palindrome = true;\n    for (let j = 1; j <= i / 2; j++) {\n      if (i % j !== 0) {\n        is_palindrome = false;\n        break;\n      }\n    }\n    if (is_palindrome) {\n      count++;\n    }\n  }\n  result.push(count);\n  result.push(n - count);\n  return result;\n}\n",
    "  let even = 0\n  let odd = 0\n  let i = 1\n  let j = 1\n  let count = 0\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        count += 1\n        even += 1\n      } else {\n        count += 1\n        odd += 1\n      }\n    }\n    i += 1\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false\n    }\n    i += 1\n    j -= 1\n  }\n  return true\n}\n\nmodule.exports = even_odd_palindrome\n",
    "  let result = [];\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      result.push(i);\n      if (i % 2 === 0) {\n        result.push(i);\n      }\n    }\n    i++;\n  }\n  return result;\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false;\n    }\n    n = n / 10;\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let even = 0;\n  let odd = 0;\n  let i = 1;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    i++;\n  }\n  return [even, odd];\n}\n",
    "  let even = 0\n  let odd = 0\n  let i = 1\n  let j = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false\n    }\n    n = n / 10\n    i++\n    j--\n  }\n  return true\n}\n",
    "  const result = [];\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      count++;\n      if (count % 2 === 0) {\n        result.push(i);\n      }\n    }\n  }\n  return result;\n}\n\nfunction isPalindrome(n: number): boolean {\n  let result = true;\n  for (let i = 0; i < n.toString().length / 2; i++) {\n    if (n.toString()[i] !== n.toString()[n.toString().length - 1 - i]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let odd = 0\n  let even = 0\n  for (let i = 1; i <= n; i++) {\n    let is_palindrome = true\n    for (let j = 1; j <= Math.sqrt(i); j++) {\n      if (i % j !== 0) {\n        is_palindrome = false\n        break\n      }\n    }\n    if (is_palindrome) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n  }\n  return [even, odd]\n}\n",
    "  let odd = 0;\n  let even = 0;\n  for (let i = 1; i <= n; i++) {\n    let isPalindrome = true;\n    for (let j = 1; j <= Math.sqrt(i); j++) {\n      if (i % j !== 0) {\n        isPalindrome = false;\n        break;\n      }\n    }\n    if (isPalindrome) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10.toString()[i]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let even = 0\n  let odd = 0\n  let i = 1\n  let j = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let result = [];\n  let i = 1;\n  let j = n;\n  while (i <= j) {\n    let count = 0;\n    let sum = 0;\n    while (i <= j) {\n      sum += i;\n      if (sum % 2 === 0) {\n        count++;\n      }\n      i++;\n    }\n    if (count % 2 === 0) {\n      result.push(i - 1);\n    }\n    i--;\n    j--;\n  }\n  return result;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    let is_palindrome = true;\n    while (num > 0) {\n      let digit = num % 10;\n      if (digit != num / 10) {\n        is_palindrome = false;\n        break;\n      }\n      num = num / 10;\n    }\n    if (is_palindrome) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n",
    "  let even = 0\n  let odd = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let s = ''\n  while (n > 0) {\n    s = s + n % 10\n    n = Math.floor(n / 10)\n  }\n  return s === s.split('').reverse().join('')\n}\n",
    "  const odd = [];\n  const even = [];\n  let i = 2;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even.push(i);\n      } else {\n        odd.push(i);\n      }\n    }\n    i++;\n  }\n  return [even.length, odd.length];\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false;\n    }\n    n = Math.floor(n / 10);\n    i++;\n    j--;\n  }\n  return true;\n}\n",
    "  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    let count = 0;\n    let j = i;\n    while (j <= n) {\n      if (isPalindrome(i + j)) {\n        count++;\n      }\n      j++;\n    }\n    if (count % 2 === 0) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr;\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10.toString().charAt(i) || n % 10 !== n % 10.toString().charAt(j)) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  let j = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10.toString()[i]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let even = 0\n  let odd = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\nmodule.exports = even_odd_palindrome\n",
    "  let even = 0\n  let odd = 0\n  for (let i = 1; i <= n; i++) {\n    let is_palindrome = true\n    for (let j = 1; j <= i / 2; j++) {\n      if (i % j !== 0) {\n        is_palindrome = false\n        break\n      }\n    }\n    if (is_palindrome) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n  }\n  return [even, odd]\n}\n",
    "  const result = [];\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      count++;\n    }\n    i++;\n  }\n  result.push(count);\n  result.push(count - 1);\n  return result;\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false;\n    }\n    n /= 10;\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let even = 0\n  let odd = 0\n  let i = 1\n  let j = 1\n  let count = 0\n  while (i <= n) {\n    if (i % 2 === 0) {\n      count++\n      even++\n    } else {\n      count++\n      odd++\n    }\n    i++\n  }\n  return [count, even, odd]\n}\n",
    "  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n",
    "  let odd = 0, even = 0, i = 1, j = 1, count = 0;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      count++;\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    i++;\n  }\n  return [even, odd];\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10 - 1) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\nmodule.exports = even_odd_palindrome\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  let j = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false\n    }\n    n /= 10\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let even = 0\n  let odd = 0\n  for (let i = 1; i <= n; i++) {\n    let isPalindrome = true\n    for (let j = 1; j <= Math.floor(i / 2); j++) {\n      if (i % j !== 0) {\n        isPalindrome = false\n        break\n      }\n    }\n    if (isPalindrome) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n  }\n  return [even, odd]\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n",
    "  let odd = 0, even = 0, i = 1, j = 1;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    i++;\n  }\n  return [even, odd];\n}\n",
    "  let even = 0\n  let odd = 0\n  let i = 0\n  let j = 0\n  let count = 0\n  let result = []\n  while (i <= n) {\n    if (i % 2 === 0) {\n      count++\n      even++\n    } else {\n      count++\n      odd++\n    }\n    i++\n  }\n  result.push(even)\n  result.push(odd)\n  return result\n}\n",
    "  let odd = 0\n  let even = 0\n  for (let i = 1; i <= n; i++) {\n    let num = isPalindrome(i)\n    if (num === true) {\n      if (num === 2) {\n        odd++\n      } else {\n        even++\n      }\n    }\n  }\n  return [even, odd]\n}\n",
    "  let even = 0\n  let odd = 0\n  let i = 2\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let s = String(n)\n  let i = 0\n  let j = s.length - 1\n  while (i < j) {\n    if (s[i] !== s[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 2\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let s = ''\n  while (n > 0) {\n    s = s + n % 10\n    n = Math.floor(n / 10)\n  }\n  return s === s.split('').reverse().join('')\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false\n    }\n    n /= 10\n    i++\n    j--\n  }\n  return true\n}\n",
    "  const even = [];\n  const odd = [];\n  let i = 2;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even.push(i);\n      } else {\n        odd.push(i);\n      }\n    }\n    i++;\n  }\n  return [even.length, odd.length];\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let odd = 0;\n  let even = 0;\n  let i = 1;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    i++;\n  }\n  return [even, odd];\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false\n    }\n    n = n / 10\n    i++\n    j--\n  }\n  return true\n}\n\nmodule.exports = even_odd_palindrome\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even += 1\n      } else {\n        odd += 1\n      }\n    }\n    i += 1\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10.toString()[i]) {\n      return false\n    }\n    i += 1\n    j -= 1\n  }\n  return true\n}\n",
    "  const arr = [];\n  let i = 1;\n  let j = 1;\n  let count = 0;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      arr.push(i);\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (isPalindrome(j)) {\n      arr.push(j);\n      count++;\n    }\n    j++;\n  }\n  return [count, arr.length - count];\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let even = 0;\n  let odd = 0;\n  let i = 1;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    i++;\n  }\n  return [even, odd];\n}\n",
    "  const odd = [];\n  const even = [];\n  let i = 2;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even.push(i);\n      } else {\n        odd.push(i);\n      }\n    }\n    i++;\n  }\n  return [even.length, odd.length];\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false;\n    }\n    n /= 10;\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  let j = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false\n    }\n    n /= 10\n    i++\n    j--\n  }\n  return true\n}\n",
    "  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    let count = 0;\n    while (num) {\n      if (num % 2 === 0) {\n        count++;\n      }\n      num = num / 2;\n    }\n    if (count % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n",
    "  let odd = 0, even = 0, i = 0, j = 0, k = 0;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (j % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    j++;\n  }\n  while (k <= n) {\n    if (k % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    k++;\n  }\n  return [even, odd];\n}\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  let j = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even += 1\n      } else {\n        odd += 1\n      }\n    }\n    i += 1\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = 0\n  while (i < n) {\n    if (n % 10 !== n % (10 - i)) {\n      return false\n    }\n    i += 1\n  }\n  return true\n}\n",
    "  const result = [];\n  let i = 1;\n  while (i <= n) {\n    let count = 0;\n    let j = i;\n    while (j <= n) {\n      if (isPalindrome(i + j)) {\n        count++;\n      }\n      j++;\n    }\n    if (count % 2 === 0) {\n      result.push(i);\n    }\n    i++;\n  }\n  return result;\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n % 10.toString().charAt(i) || n % 10 !== n % 10.toString().charAt(j)) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even += 1\n      } else {\n        odd += 1\n      }\n    }\n    i += 1\n  }\n  return [even, odd]\n}\n",
    "  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    const isPalindrome = isPalindrome(i);\n    if (isPalindrome) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr;\n}\n\nexport { even_odd_palindrome };\n",
    "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false\n    }\n    n /= 10\n    i++\n    j--\n  }\n  return true\n}\n\nmodule.exports = even_odd_palindrome\n"
  ],
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ]
}