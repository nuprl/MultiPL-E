{
  "name": "HumanEval_133_sum_squares",
  "language": "ts",
  "prompt": "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst: number[]): number {\n",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_squares;\n  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0, 3.0, 5.0, 7.0]),84);\n  assert.deepEqual(candidate([1.4, 4.2, 0.0]),29);\n  assert.deepEqual(candidate([-2.4, 1.0, 1.0]),6);\n  assert.deepEqual(candidate([100.0, 1.0, 15.0, 2.0]),10230);\n  assert.deepEqual(candidate([10000.0, 10000.0]),200000000);\n  assert.deepEqual(candidate([-1.4, 4.6, 6.3]),75);\n  assert.deepEqual(candidate([-1.4, 17.9, 18.9, 19.9]),1086);\n  assert.deepEqual(candidate([0.0]),0);\n  assert.deepEqual(candidate([-1.0]),1);\n  assert.deepEqual(candidate([-1.0, 1.0, 0.0]),2);\n}\n\ntest();",
  "completions": [
    "  return lst.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(Math.ceil(lst[i]), 2)\n  }\n  return sum\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2)\n  }\n  return sum\n}\n",
    "    let sum = 0;\n    for (let num of lst) {\n        sum += Math.pow(Math.ceil(num), 2);\n    }\n    return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(num, 2);\n  }\n  return Math.round(sum);\n}\n",
    "  let sum = 0\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2)\n  }\n  return sum\n}\n",
    "  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n",
    "    let sum = 0;\n    for (let num of lst) {\n        sum += Math.pow(Math.ceil(num), 2);\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let num of lst) {\n        sum += Math.pow(num, 2);\n    }\n    return Math.round(sum);\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n",
    "    let sum = 0;\n    for (let num of lst) {\n        sum += Math.pow(Math.ceil(num), 2);\n    }\n    return sum;\n}\n",
    "  return lst.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(Math.ceil(lst[i]), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(Math.ceil(lst[i]), 2);\n  }\n  return sum;\n}\n",
    "    let sum = 0;\n    for (let num of lst) {\n        sum += Math.pow(num, 2);\n    }\n    return Math.round(sum);\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += Math.pow(lst[i], 2);\n    }\n    return sum;\n}\n",
    "  return lst.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}\n",
    "    let sum = 0;\n    for (let num of lst) {\n        sum += Math.pow(Math.ceil(num), 2);\n    }\n    return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n",
    "  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    if (num < 0) {\n      num = 0\n    }\n    sum += num * num\n  }\n  return sum\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += Math.pow(lst[i], 2);\n    }\n    return Math.round(sum);\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let num = lst[i];\n        sum += Math.pow(num, 2);\n    }\n    return sum;\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += Math.pow(Math.ceil(lst[i]), 2);\n    }\n    return sum;\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(Math.ceil(lst[i]), 2);\n  }\n  return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += Math.pow(Math.ceil(lst[i]), 2);\n    }\n    return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += Math.pow(lst[i], 2);\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let num of lst) {\n        sum += Math.pow(Math.ceil(num), 2);\n    }\n    return sum;\n}\n",
    "  return lst.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(num, 2);\n  }\n  return Math.round(sum);\n}\n",
    "  return lst.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}\n",
    "  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    if (num < 0) {\n      num = 0\n    }\n    sum += num * num\n  }\n  return sum\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n}\n",
    "  return lst.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}\n",
    "  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  return lst.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(num, 2);\n  }\n  return Math.round(sum);\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += Math.pow(lst[i], 2);\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += Math.pow(lst[i], 2);\n    }\n    return sum;\n}\n",
    "  return lst.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(Math.ceil(lst[i]), 2);\n  }\n  return sum;\n}\n",
    "    let sum = 0;\n    for (let num of lst) {\n        sum += Math.pow(num, 2);\n    }\n    return sum;\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    if (num < 0) {\n      num = 0;\n    }\n    sum += num * num;\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(num, 2);\n  }\n  return Math.round(sum);\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    if (num < 0) {\n      num = 0;\n    }\n    sum += num * num;\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  return lst.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(num, 2);\n  }\n  return Math.round(sum);\n}\n",
    "  return lst.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}\n",
    "  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    if (num < 0) {\n      num = 0\n    }\n    sum += num * num\n  }\n  return sum\n}\n",
    "    let sum = 0;\n    for (let num of lst) {\n        sum += Math.pow(Math.ceil(num), 2);\n    }\n    return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  return lst.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0\n  for (let num of lst) {\n    sum += Math.pow(num, 2)\n  }\n  return sum\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let val = lst[i];\n    if (val > 0) {\n      sum += Math.pow(val, 2);\n    }\n  }\n  return sum;\n}\n",
    "  return lst.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += Math.pow(lst[i], 2);\n    }\n    return sum;\n}\n",
    "  let sum = 0\n  for (let num of lst) {\n    sum += Math.pow(num, 2)\n  }\n  return sum\n}\n",
    "  return lst.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(Math.ceil(lst[i]), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n",
    "    let sum = 0;\n    for (let num of lst) {\n        sum += Math.pow(num, 2);\n    }\n    return Math.round(sum);\n}\n",
    "  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += Math.pow(Math.ceil(lst[i]), 2);\n    }\n    return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(num, 2);\n  }\n  return Math.round(sum);\n}\n",
    "    let sum = 0;\n    for (let num of lst) {\n        sum += Math.pow(Math.ceil(num), 2);\n    }\n    return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(num, 2);\n  }\n  return Math.round(sum);\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    if (num < 0) {\n      num = 0;\n    }\n    sum += num * num;\n  }\n  return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let num = lst[i];\n        sum += Math.pow(num, 2);\n    }\n    return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(num, 2);\n  }\n  return Math.round(sum);\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += Math.pow(lst[i], 2);\n    }\n    return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0\n  for (let num of lst) {\n    sum += Math.pow(num, 2)\n  }\n  return Math.round(sum)\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += Math.pow(lst[i], 2);\n    }\n    return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "    let sum = 0;\n    for (let num of lst) {\n        sum += Math.pow(Math.ceil(num), 2);\n    }\n    return sum;\n}\n",
    "  return lst.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}\n",
    "    let sum = 0;\n    for (let num of lst) {\n        sum += Math.pow(Math.ceil(num), 2);\n    }\n    return sum;\n}\n",
    "  return lst.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}\n",
    "    let sum = 0;\n    for (let num of lst) {\n        sum += Math.pow(num, 2);\n    }\n    return Math.round(sum);\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n",
    "  let sum = 0\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2)\n  }\n  return sum\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n",
    "  return lst.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let num = lst[i];\n        if (num < 0) {\n            num = 0;\n        }\n        sum += num * num;\n    }\n    return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(num, 2);\n  }\n  return Math.round(sum);\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  return lst.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(Math.ceil(lst[i]), 2);\n  }\n  return sum;\n}\n",
    "  return lst.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(num, 2);\n  }\n  return Math.round(sum);\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    if (num < 0) {\n      num = 0;\n    }\n    sum += num * num;\n  }\n  return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += Math.pow(lst[i], 2);\n    }\n    return Math.round(sum);\n}\n",
    "  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    if (num < 0) {\n      num = 0\n    }\n    sum += num * num\n  }\n  return sum\n}\n",
    "  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n}\n",
    "  return lst.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}\n",
    "    let sum = 0;\n    for (let num of lst) {\n        sum += Math.pow(num, 2);\n    }\n    return Math.round(sum);\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    let num_int = Math.ceil(num);\n    sum += num_int * num_int;\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(num, 2);\n  }\n  return Math.round(sum);\n}\n",
    "  return lst.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(Math.ceil(lst[i]), 2);\n  }\n  return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += Math.pow(lst[i], 2);\n    }\n    return Math.ceil(sum);\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2)\n  }\n  return sum\n}\n",
    "  return lst.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}\n",
    "  let sum = 0\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2)\n  }\n  return sum\n}\n",
    "  return lst.reduce((acc, x) => acc + Math.pow(x, 2), 0);\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let num = lst[i];\n        let num_int = Math.ceil(num);\n        sum += num_int * num_int;\n    }\n    return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += Math.pow(lst[i], 2);\n    }\n    return Math.round(sum);\n}\n",
    "  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    if (num < 0) {\n      num = 0;\n    }\n    sum += num * num;\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    let num_int = Math.ceil(num);\n    sum += num_int * num_int;\n  }\n  return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += Math.pow(Math.ceil(lst[i]), 2);\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += Math.pow(lst[i], 2);\n    }\n    return Math.round(sum);\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    let val = lst[i]\n    if (val < 0) {\n      val = 0\n    }\n    sum += val * val\n  }\n  return sum\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n",
    "    let sum = 0;\n    for (let num of lst) {\n        sum += Math.pow(Math.ceil(num), 2);\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let num of lst) {\n        sum += Math.pow(num, 2);\n    }\n    return Math.round(sum);\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n}\n",
    "  return lst.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n}\n",
    "  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n",
    "  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n",
    "  return lst.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  return lst.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += Math.pow(lst[i], 2);\n    }\n    return sum;\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "    let sum = 0;\n    for (let num of lst) {\n        sum += Math.pow(num, 2);\n    }\n    return Math.round(sum);\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(num, 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  return lst.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}\n",
    "  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(Math.ceil(lst[i]), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  return lst.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(num, 2);\n  }\n  return Math.round(sum);\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2)\n  }\n  return sum\n}\n",
    "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.pow(Math.ceil(num), 2);\n  }\n  return sum;\n}\n",
    "    let sum = 0;\n    for (let num of lst) {\n        sum += Math.pow(Math.ceil(num), 2);\n    }\n    return sum;\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(Math.ceil(lst[i]), 2);\n  }\n  return sum;\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n}\n"
  ],
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ]
}