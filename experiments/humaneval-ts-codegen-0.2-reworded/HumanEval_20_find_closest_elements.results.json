{
  "name": "HumanEval_20_find_closest_elements",
  "language": "ts",
  "prompt": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmptocaw3zo.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmptocaw3zo.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  const sorted_numbers = numbers.sort((a, b) => a - b);\n  const first_number = sorted_numbers[0];\n  const second_number = sorted_numbers[1];\n  const difference = Math.abs(first_number - second_number);\n  const closest_number = first_number;\n  if (difference > 0.5) {\n    closest_number = second_number;\n  }\n  return [closest_number, second_number];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmp7slbvcoz.ts(14,5): error TS2588: Cannot assign to 'closest_number' because it is a constant.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n    let min_diff = Infinity;\n    let min_index = 0;\n    let max_index = 0;\n    let min_value = numbers[0];\n    let max_value = numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n        let diff = Math.abs(numbers[i] - min_value);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_index = i;\n        }\n        let diff = Math.abs(numbers[i] - max_value);\n        if (diff < min_diff) {\n            min_diff = diff;\n            max_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpz6dc6or9.ts(14,13): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpz6dc6or9.ts(19,13): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n    let min_diff = Infinity;\n    let min_index = 0;\n    let max_index = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        let diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_index = i;\n        }\n        let diff2 = Math.abs(numbers[i] - numbers[1]);\n        if (diff2 < min_diff) {\n            min_diff = diff2;\n            max_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpi9my5qp1.js:28:12)\n    at Object.<anonymous> (/tmp/tmpi9my5qp1.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpz2aci9tf.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpz2aci9tf.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpz2aci9tf.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpz2aci9tf.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpz2aci9tf.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpz2aci9tf.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmp2g7h3kl1.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmp2g7h3kl1.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length - 1; i++) {\n    let diff = Math.abs(numbers[i] - numbers[i + 1]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      max_index = i + 1;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  5.9\n]\n    at test (/tmp/tmpzpjbmtac.js:25:12)\n    at Object.<anonymous> (/tmp/tmpzpjbmtac.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 5, 5.9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpdtye2swt.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpdtye2swt.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpdtye2swt.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpdtye2swt.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmptocaw3zo.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmptocaw3zo.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length - 1; i++) {\n    let diff = Math.abs(numbers[i] - numbers[i + 1]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      max_index = i + 1;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  5.9\n]\n    at test (/tmp/tmpzpjbmtac.js:25:12)\n    at Object.<anonymous> (/tmp/tmpzpjbmtac.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 5, 5.9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = -1;\n  let max_index = -1;\n  let min_value = Infinity;\n  let max_value = -Infinity;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n\n  return [min_value, max_value];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  -Infinity\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp_pietkh3.js:46:12)\n    at Object.<anonymous> (/tmp/tmp_pietkh3.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, -Infinity ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      max_index = i;\n    } else if (diff === min_diff) {\n      min_index = i;\n      max_index = i;\n    } else if (diff > min_diff) {\n      min_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2.2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpsj3wwn6a.js:31:12)\n    at Object.<anonymous> (/tmp/tmpsj3wwn6a.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2.2, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    if (diff > min_diff) {\n      max_index = i;\n      break;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmprnhwdbq6.js:27:12)\n    at Object.<anonymous> (/tmp/tmprnhwdbq6.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpe0ddji20.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpe0ddji20.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_val = numbers[0];\n  let max_val = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_val);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_val);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmp66sqj0xe.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmp66sqj0xe.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  let min_value = numbers[min_index];\n  let max_value = numbers[max_index];\n  return [min_value, max_value];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmp2yrq72wr.ts(11,7): error TS2451: Cannot redeclare block-scoped variable 'min_value'.\n../../../../../../tmp/tmp2yrq72wr.ts(12,7): error TS2451: Cannot redeclare block-scoped variable 'max_value'.\n../../../../../../tmp/tmp2yrq72wr.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmp2yrq72wr.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmp2yrq72wr.ts(25,7): error TS2451: Cannot redeclare block-scoped variable 'min_value'.\n../../../../../../tmp/tmp2yrq72wr.ts(26,7): error TS2451: Cannot redeclare block-scoped variable 'max_value'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmptocaw3zo.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmptocaw3zo.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n    let min_diff = Infinity;\n    let min_index = 0;\n    let max_index = 0;\n    let min_value = 0;\n    let max_value = 0;\n\n    for (let i = 0; i < numbers.length; i++) {\n        let diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_index = i;\n            min_value = numbers[i];\n        }\n        let diff2 = Math.abs(numbers[i] - numbers[1]);\n        if (diff2 < min_diff) {\n            min_diff = diff2;\n            min_index = i;\n            min_value = numbers[i];\n        }\n    }\n\n    for (let i = 0; i < numbers.length; i++) {\n        let diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff) {\n            min_diff = diff;\n            max_index = i;\n            max_value = numbers[i];\n        }\n        let diff2 = Math.abs(numbers[i] - numbers[1]);\n        if (diff2 < min_diff) {\n            min_diff = diff2;\n            max_index = i;\n            max_value = numbers[i];\n        }\n    }\n\n    return [min_value, max_value];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp1lahf86d.js:46:12)\n    at Object.<anonymous> (/tmp/tmp1lahf86d.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_val = numbers[0];\n  let max_val = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_val);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_val);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmp66sqj0xe.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmp66sqj0xe.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpdtye2swt.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpdtye2swt.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpdtye2swt.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpdtye2swt.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpepvha8hl.js:30:12)\n    at Object.<anonymous> (/tmp/tmpepvha8hl.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  for (let i = 0; i < numbers.length - 1; i++) {\n    let diff = Math.abs(numbers[i] - numbers[i + 1]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      max_index = i + 1;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  5.9\n]\n    at test (/tmp/tmperrgwgk7.js:25:12)\n    at Object.<anonymous> (/tmp/tmperrgwgk7.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 5, 5.9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmptocaw3zo.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmptocaw3zo.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpz2aci9tf.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpz2aci9tf.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmptocaw3zo.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmptocaw3zo.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n    let min_diff = Infinity;\n    let min_index = 0;\n    let max_index = 0;\n    let min_value = numbers[0];\n    let max_value = numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n        let diff = Math.abs(numbers[i] - min_value);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_index = i;\n        }\n        let diff = Math.abs(numbers[i] - max_value);\n        if (diff < min_diff) {\n            min_diff = diff;\n            max_index = i;\n        }\n        if (numbers[i] > max_value) {\n            max_value = numbers[i];\n        }\n        if (numbers[i] < min_value) {\n            min_value = numbers[i];\n        }\n    }\n    let min_diff_2 = Infinity;\n    let min_index_2 = 0;\n    let max_index_2 = 0;\n    let min_value_2 = numbers[0];\n    let max_value_2 = numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n        let diff = Math.abs(numbers[i] - min_value_2);\n        if (diff < min_diff_2) {\n            min_diff_2 = diff;\n            min_index_2 = i;\n        }\n        let diff = Math.abs(numbers[i] - max_value_2);\n        if (diff < min_diff_2) {\n            min_diff_2 = diff;\n            max_index_2 = i;\n        }\n        if (numbers[i] > max_value_2) {\n            max_value_2 = numbers[i];\n        }\n        if (numbers[i] < min_value_2) {\n            min_value_2 = numbers[i];\n        }\n    }\n    if (min_diff < min_diff_2) {\n        return [min_value, min_value_2];\n    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpha6yojac.ts(70,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = 0;\n  let max_value = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n\n  return [min_value, max_value];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpqscl7i65.js:34:12)\n    at Object.<anonymous> (/tmp/tmpqscl7i65.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpq4cr8zf4.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpq4cr8zf4.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpz2aci9tf.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpz2aci9tf.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpdtye2swt.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpdtye2swt.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpz2aci9tf.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpz2aci9tf.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpdtye2swt.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpdtye2swt.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpqhx49hgj.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpqhx49hgj.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmptocaw3zo.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmptocaw3zo.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmptocaw3zo.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmptocaw3zo.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      max_index = 0;\n    }\n    for (let j = 1; j < numbers.length; j++) {\n      let diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < min_diff) {\n        min_diff = diff;\n        min_index = i;\n        max_index = j;\n      }\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpk4zvyizz.js:32:12)\n    at Object.<anonymous> (/tmp/tmpk4zvyizz.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmptocaw3zo.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmptocaw3zo.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = 0;\n  let max_value = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n\n  return [min_value, max_value];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpxy2o0mzx.js:46:12)\n    at Object.<anonymous> (/tmp/tmpxy2o0mzx.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpdtye2swt.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpdtye2swt.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpdtye2swt.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpdtye2swt.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpz2aci9tf.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpz2aci9tf.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpqmnsm0c_.js:28:12)\n    at Object.<anonymous> (/tmp/tmpqmnsm0c_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmptocaw3zo.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmptocaw3zo.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  const min_diff = Infinity;\n  const min_index = 0;\n  const max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    const diff = Math.abs(numbers[i] - numbers[0]);\n\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n\n    const diff2 = Math.abs(numbers[i] - numbers[1]);\n\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "../../../../../../tmp/tmpqrruk8ve.ts(16,7): error TS2588: Cannot assign to 'min_diff' because it is a constant.\n../../../../../../tmp/tmpqrruk8ve.ts(17,7): error TS2588: Cannot assign to 'min_index' because it is a constant.\n../../../../../../tmp/tmpqrruk8ve.ts(23,7): error TS2588: Cannot assign to 'min_diff' because it is a constant.\n../../../../../../tmp/tmpqrruk8ve.ts(24,7): error TS2588: Cannot assign to 'max_index' because it is a constant.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = -1;\n  let max_index = -1;\n  let min_value = Infinity;\n  let max_value = -Infinity;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff3 = Math.abs(numbers[i] - numbers[2]);\n    if (diff3 < min_diff) {\n      min_diff = diff3;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff4 = Math.abs(numbers[i] - numbers[3]);\n    if (diff4 < min_diff) {\n      min_diff = diff4;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff5 = Math.abs(numbers[i] - numbers[4]);\n    if (diff5 < min_diff) {\n      min_diff = diff5;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff6 = Math.abs(numbers[i] - numbers[5]);\n    if (diff6 < min_diff) {\n      min_diff = diff6;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff7 = Math.abs(numbers[i] - numbers[6]);\n    if (diff7 < min_diff) {\n      min_diff = diff7;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff8 = Math.abs(numbers[i]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "../../../../../../tmp/tmpmag4nftb.ts(58,1): error TS1005: ',' expected.\n../../../../../../tmp/tmpmag4nftb.ts(58,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpmag4nftb.ts(71,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpq4cr8zf4.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpq4cr8zf4.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmptocaw3zo.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmptocaw3zo.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmptocaw3zo.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmptocaw3zo.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = 0;\n  let max_value = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n\n  return [min_value, max_value];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpqscl7i65.js:34:12)\n    at Object.<anonymous> (/tmp/tmpqscl7i65.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpz2aci9tf.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpz2aci9tf.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n    let min_diff = Infinity;\n    let min_index = 0;\n    let max_index = 0;\n    let min_value = numbers[0];\n    let max_value = numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n        let diff = Math.abs(numbers[i] - min_value);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_index = i;\n        }\n        let diff = Math.abs(numbers[i] - max_value);\n        if (diff < min_diff) {\n            min_diff = diff;\n            max_index = i;\n        }\n        if (numbers[i] > max_value) {\n            max_value = numbers[i];\n        }\n        if (numbers[i] < min_value) {\n            min_value = numbers[i];\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "../../../../../../tmp/tmpnb7hw4i2.ts(14,13): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpnb7hw4i2.ts(19,13): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      max_index = 0;\n    }\n    for (let j = 1; j < numbers.length; j++) {\n      let diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < min_diff) {\n        min_diff = diff;\n        min_index = i;\n        max_index = j;\n      }\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpbb_704x6.js:32:12)\n    at Object.<anonymous> (/tmp/tmpbb_704x6.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      max_index = 0;\n    }\n    for (let j = 1; j < numbers.length; j++) {\n      let diff2 = Math.abs(numbers[i] - numbers[j]);\n      if (diff2 < min_diff) {\n        min_diff = diff2;\n        min_index = i;\n        max_index = j;\n      }\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpcc0bwgi9.js:32:12)\n    at Object.<anonymous> (/tmp/tmpcc0bwgi9.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = -1;\n  let max_index = -1;\n  let min_value = Infinity;\n  let max_value = -Infinity;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "../../../../../../tmp/tmpf_6xqi2d.ts(70,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n    let min_diff = Infinity;\n    let min_index = 0;\n    let max_index = 0;\n    let min_value = numbers[0];\n    let max_value = numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n        let diff = Math.abs(numbers[i] - min_value);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_index = i;\n        }\n        let diff = Math.abs(numbers[i] - max_value);\n        if (diff < min_diff) {\n            min_diff = diff;\n            max_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "../../../../../../tmp/tmp4cfrd4g5.ts(14,13): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmp4cfrd4g5.ts(19,13): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n    let min_diff = Infinity;\n    let min_index = 0;\n    let max_index = 0;\n    let min_value = numbers[0];\n    let max_value = numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n        let diff = Math.abs(numbers[i] - min_value);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_index = i;\n        }\n        let diff = Math.abs(numbers[i] - max_value);\n        if (diff < min_diff) {\n            min_diff = diff;\n            max_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "../../../../../../tmp/tmp4cfrd4g5.ts(14,13): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmp4cfrd4g5.ts(19,13): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  const min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    const diff = Math.abs(numbers[i] - numbers[min_index]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    const diff = Math.abs(numbers[i] - numbers[max_index]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "../../../../../../tmp/tmpvoj5h3vg.ts(13,11): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpvoj5h3vg.ts(15,7): error TS2588: Cannot assign to 'min_diff' because it is a constant.\n../../../../../../tmp/tmpvoj5h3vg.ts(18,11): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpvoj5h3vg.ts(20,7): error TS2588: Cannot assign to 'min_diff' because it is a constant.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = -1;\n  let max_index = -1;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  undefined\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpcljyfipp.js:28:12)\n    at Object.<anonymous> (/tmp/tmpcljyfipp.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, undefined ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length - 1; i++) {\n    let diff = numbers[i + 1] - numbers[i];\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      max_index = i + 1;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  2.2\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpooplq_qx.js:24:12)\n    at Object.<anonymous> (/tmp/tmpooplq_qx.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 2.2 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  const min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    const diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    const diff = Math.abs(numbers[i] - numbers[1]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "../../../../../../tmp/tmpiaoeg5cf.ts(12,11): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpiaoeg5cf.ts(14,7): error TS2588: Cannot assign to 'min_diff' because it is a constant.\n../../../../../../tmp/tmpiaoeg5cf.ts(17,11): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpiaoeg5cf.ts(19,7): error TS2588: Cannot assign to 'min_diff' because it is a constant.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n    let min_diff = Infinity;\n    let min_index = 0;\n    let max_index = 0;\n    let min_value = numbers[0];\n    let max_value = numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n        let diff = Math.abs(numbers[i] - min_value);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_index = i;\n        }\n        let diff = Math.abs(numbers[i] - max_value);\n        if (diff < min_diff) {\n            min_diff = diff;\n            max_index = i;\n        }\n        if (numbers[i] < min_value) {\n            min_value = numbers[i];\n        }\n        if (numbers[i] > max_value) {\n            max_value = numbers[i];\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "../../../../../../tmp/tmps3w805xe.ts(14,13): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmps3w805xe.ts(19,13): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n    let min_diff = Infinity;\n    let min_index = 0;\n    let max_index = 0;\n    for (let i = 0; i < numbers.length - 1; i++) {\n        let diff = Math.abs(numbers[i] - numbers[i + 1]);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_index = i;\n            max_index = i + 1;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  5.9\n]\n    at test (/tmp/tmptgw768_b.js:25:12)\n    at Object.<anonymous> (/tmp/tmptgw768_b.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 5, 5.9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmppvlo1p74.js:28:12)\n    at Object.<anonymous> (/tmp/tmppvlo1p74.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpdtye2swt.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpdtye2swt.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n    let min_diff = Infinity;\n    let min_index = 0;\n    let max_index = 0;\n    let min_value = numbers[0];\n    let max_value = numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n        let diff = Math.abs(numbers[i] - min_value);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_index = i;\n        }\n        let diff = Math.abs(numbers[i] - max_value);\n        if (diff < min_diff) {\n            min_diff = diff;\n            max_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "../../../../../../tmp/tmp4cfrd4g5.ts(14,13): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmp4cfrd4g5.ts(19,13): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmptocaw3zo.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmptocaw3zo.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = 0;\n  let max_value = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n  return [min_value, max_value];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpv74zaekc.js:46:12)\n    at Object.<anonymous> (/tmp/tmpv74zaekc.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpdtye2swt.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpdtye2swt.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n    let min_diff = Infinity;\n    let min_index = 0;\n    let max_index = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        let diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_index = i;\n        }\n        let diff2 = Math.abs(numbers[i] - numbers[1]);\n        if (diff2 < min_diff) {\n            min_diff = diff2;\n            max_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpf82wcrfl.js:28:12)\n    at Object.<anonymous> (/tmp/tmpf82wcrfl.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n    let min_diff = Infinity;\n    let min_index = 0;\n    let max_index = 0;\n    let min_value = numbers[0];\n    let max_value = numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n        let diff = Math.abs(numbers[i] - min_value);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_index = i;\n        }\n        let diff = Math.abs(numbers[i] - max_value);\n        if (diff < min_diff) {\n            min_diff = diff;\n            max_index = i;\n        }\n        if (numbers[i] < min_value) {\n            min_value = numbers[i];\n        }\n        if (numbers[i] > max_value) {\n            max_value = numbers[i];\n        }\n    }\n    let min_value_index = numbers.indexOf(min_value);\n    let max_value_index = numbers.indexOf(max_value);\n    return [numbers[min_index], numbers[max_index]];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "../../../../../../tmp/tmpipvgakq4.ts(14,13): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpipvgakq4.ts(19,13): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpqhx49hgj.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpqhx49hgj.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = -1;\n  let max_index = -1;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  undefined\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpcljyfipp.js:28:12)\n    at Object.<anonymous> (/tmp/tmpcljyfipp.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, undefined ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n    let min_diff = Infinity;\n    let min_index = 0;\n    let max_index = 0;\n    for (let i = 0; i < numbers.length - 1; i++) {\n        let diff = Math.abs(numbers[i] - numbers[i + 1]);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_index = i;\n            max_index = i + 1;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  5.9\n]\n    at test (/tmp/tmptgw768_b.js:25:12)\n    at Object.<anonymous> (/tmp/tmptgw768_b.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 5, 5.9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpdtye2swt.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpdtye2swt.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = Infinity;\n  let max_value = -Infinity;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let value = numbers[i];\n    if (value < min_value) {\n      min_value = value;\n      max_index = i;\n    }\n    if (value > max_value) {\n      max_value = value;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpd9tsqisx.js:33:12)\n    at Object.<anonymous> (/tmp/tmpd9tsqisx.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpdtye2swt.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpdtye2swt.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpz2aci9tf.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpz2aci9tf.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmptocaw3zo.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmptocaw3zo.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpdtye2swt.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpdtye2swt.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpz2aci9tf.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpz2aci9tf.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      max_index = 0;\n    } else if (diff === min_diff) {\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpv89zezrv.js:27:12)\n    at Object.<anonymous> (/tmp/tmpv89zezrv.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmptocaw3zo.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmptocaw3zo.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpz2aci9tf.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpz2aci9tf.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmptocaw3zo.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmptocaw3zo.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpz2aci9tf.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpz2aci9tf.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n    let min_diff = Infinity;\n    let min_index = 0;\n    let max_index = 0;\n    let min_value = numbers[0];\n    let max_value = numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n        let diff = Math.abs(numbers[i] - min_value);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_index = i;\n        }\n        let diff = Math.abs(numbers[i] - max_value);\n        if (diff < min_diff) {\n            min_diff = diff;\n            max_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "../../../../../../tmp/tmp4cfrd4g5.ts(14,13): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmp4cfrd4g5.ts(19,13): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpdtye2swt.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpdtye2swt.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length - 1; i++) {\n    let diff = Math.abs(numbers[i] - numbers[i + 1]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      max_index = i + 1;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  5.9\n]\n    at test (/tmp/tmpzpjbmtac.js:25:12)\n    at Object.<anonymous> (/tmp/tmpzpjbmtac.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 5, 5.9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpdtye2swt.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpdtye2swt.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmptocaw3zo.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmptocaw3zo.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = -1;\n  let max_index = -1;\n  let min_value = Infinity;\n  let max_value = -Infinity;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "../../../../../../tmp/tmp1g_onydy.ts(71,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      max_index = 0;\n    }\n    for (let j = 1; j < numbers.length; j++) {\n      let diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < min_diff) {\n        min_diff = diff;\n        min_index = i;\n        max_index = j;\n      }\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpdsh8yxcg.js:32:12)\n    at Object.<anonymous> (/tmp/tmpdsh8yxcg.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpdtye2swt.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpdtye2swt.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = Infinity;\n  let max_value = -Infinity;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[0] - numbers[i]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[numbers.length - 1] - numbers[i]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - numbers[i]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - numbers[i]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - numbers[i]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - numbers[i]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - numbers[i]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292828,
      "stdout": "../../../../../../tmp/tmpfmj4dzcr.ts(72,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmptocaw3zo.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmptocaw3zo.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n    let min_diff = Infinity;\n    let min_index = 0;\n    let max_index = 0;\n    let min_value = numbers[0];\n    let max_value = numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n        let diff = Math.abs(numbers[i] - min_value);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_index = i;\n        }\n        let diff = Math.abs(numbers[i] - max_value);\n        if (diff < min_diff) {\n            min_diff = diff;\n            max_index = i;\n        }\n        if (numbers[i] < min_value) {\n            min_value = numbers[i];\n        }\n        if (numbers[i] > max_value) {\n            max_value = numbers[i];\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "../../../../../../tmp/tmps3w805xe.ts(14,13): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmps3w805xe.ts(19,13): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpqmnsm0c_.js:28:12)\n    at Object.<anonymous> (/tmp/tmpqmnsm0c_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmptocaw3zo.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmptocaw3zo.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmptocaw3zo.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmptocaw3zo.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpqmnsm0c_.js:28:12)\n    at Object.<anonymous> (/tmp/tmpqmnsm0c_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpz2aci9tf.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpz2aci9tf.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmptocaw3zo.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmptocaw3zo.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpdtye2swt.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpdtye2swt.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpqmnsm0c_.js:28:12)\n    at Object.<anonymous> (/tmp/tmpqmnsm0c_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpqmnsm0c_.js:28:12)\n    at Object.<anonymous> (/tmp/tmpqmnsm0c_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      max_index = 0;\n    }\n    for (let j = 1; j < numbers.length; j++) {\n      let diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < min_diff) {\n        min_diff = diff;\n        min_index = i;\n        max_index = j;\n      }\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpdsh8yxcg.js:32:12)\n    at Object.<anonymous> (/tmp/tmpdsh8yxcg.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n    let min_diff = Infinity;\n    let min_index = 0;\n    let max_index = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        let diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_index = i;\n        }\n        let diff2 = Math.abs(numbers[i] - numbers[1]);\n        if (diff2 < min_diff) {\n            min_diff = diff2;\n            max_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpi9my5qp1.js:28:12)\n    at Object.<anonymous> (/tmp/tmpi9my5qp1.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpqmnsm0c_.js:28:12)\n    at Object.<anonymous> (/tmp/tmpqmnsm0c_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  const sorted_numbers = numbers.sort((a, b) => a - b);\n  const closest_pair = sorted_numbers[0] + sorted_numbers[1];\n  return [sorted_numbers[0], sorted_numbers[1]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpbcjfm4av.js:15:12)\n    at Object.<anonymous> (/tmp/tmpbcjfm4av.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = 0;\n  let max_value = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n\n  return [min_value, max_value];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpxy2o0mzx.js:46:12)\n    at Object.<anonymous> (/tmp/tmpxy2o0mzx.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = 0;\n  let max_value = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for (let i = 1; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  return [min_value, numbers[min_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp1yg_h44w.js:46:12)\n    at Object.<anonymous> (/tmp/tmp1yg_h44w.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      max_index = 0;\n    }\n    for (let j = 1; j < numbers.length; j++) {\n      let diff2 = Math.abs(numbers[i] - numbers[j]);\n      if (diff2 < min_diff) {\n        min_diff = diff2;\n        min_index = i;\n        max_index = j;\n      }\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpdjo6p05t.js:32:12)\n    at Object.<anonymous> (/tmp/tmpdjo6p05t.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpz2aci9tf.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpz2aci9tf.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpdtye2swt.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpdtye2swt.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = 0;\n  let max_value = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n\n  return [min_value, max_value];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpxy2o0mzx.js:46:12)\n    at Object.<anonymous> (/tmp/tmpxy2o0mzx.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length - 1; i++) {\n    let diff = numbers[i + 1] - numbers[i];\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      max_index = i + 1;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  2.2\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpooplq_qx.js:24:12)\n    at Object.<anonymous> (/tmp/tmpooplq_qx.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 2.2 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpe0ddji20.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpe0ddji20.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpz2aci9tf.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpz2aci9tf.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n    let min_diff = Infinity;\n    let min_index = 0;\n    let max_index = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        let diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_index = i;\n        }\n        let diff2 = Math.abs(numbers[i] - numbers[1]);\n        if (diff2 < min_diff) {\n            min_diff = diff2;\n            max_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpi9my5qp1.js:28:12)\n    at Object.<anonymous> (/tmp/tmpi9my5qp1.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpdtye2swt.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpdtye2swt.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = 0;\n  let max_value = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n\n  return [min_value, max_value];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpxy2o0mzx.js:46:12)\n    at Object.<anonymous> (/tmp/tmpxy2o0mzx.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmptocaw3zo.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmptocaw3zo.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = 0;\n  let max_value = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n  return [min_value, max_value];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpv74zaekc.js:46:12)\n    at Object.<anonymous> (/tmp/tmpv74zaekc.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpz2aci9tf.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpz2aci9tf.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = 0;\n  let max_value = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  max_index = min_index;\n  max_value = min_value;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  return [min_value, max_value];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpmyyy0x4q.js:48:12)\n    at Object.<anonymous> (/tmp/tmpmyyy0x4q.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpz2aci9tf.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpz2aci9tf.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpqmnsm0c_.js:28:12)\n    at Object.<anonymous> (/tmp/tmpqmnsm0c_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n    let min_diff = Infinity;\n    let min_index = 0;\n    let max_index = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        let diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_index = i;\n        }\n        let diff2 = Math.abs(numbers[i] - numbers[1]);\n        if (diff2 < min_diff) {\n            min_diff = diff2;\n            max_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpi9my5qp1.js:28:12)\n    at Object.<anonymous> (/tmp/tmpi9my5qp1.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmptocaw3zo.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmptocaw3zo.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpe0ddji20.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpe0ddji20.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpz2aci9tf.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpz2aci9tf.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpz2aci9tf.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpz2aci9tf.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  const sorted_numbers = numbers.sort((a, b) => a - b);\n  const first_number = sorted_numbers[0];\n  const second_number = sorted_numbers[1];\n  const difference = Math.abs(first_number - second_number);\n  const closest_number = first_number;\n  if (difference > 0.5) {\n    closest_number = second_number;\n  }\n  return [closest_number, second_number];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmp7slbvcoz.ts(14,5): error TS2588: Cannot assign to 'closest_number' because it is a constant.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpz2aci9tf.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpz2aci9tf.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  const sorted_numbers = numbers.sort((a, b) => a - b);\n  const first_number = sorted_numbers[0];\n  const second_number = sorted_numbers[1];\n  const difference = Math.abs(first_number - second_number);\n  const closest_pair = [first_number, second_number];\n  if (difference === 0) {\n    return closest_pair;\n  } else if (difference > 0) {\n    return [second_number, first_number];\n  } else {\n    return [first_number, second_number];\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292828,
      "stdout": "../../../../../../tmp/tmpm9whqe6o.ts(14,5): error TS2739: Type 'number[]' is missing the following properties from type '[number, number]': 0, 1\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n    let min_diff = Infinity;\n    let min_index = 0;\n    let max_index = 0;\n    let min_value = 0;\n    let max_value = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        let diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_index = i;\n        }\n        let diff2 = Math.abs(numbers[i] - numbers[1]);\n        if (diff2 < min_diff) {\n            min_diff = diff2;\n            min_index = i;\n        }\n    }\n    for (let i = 0; i < numbers.length; i++) {\n        let diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_index = i;\n        }\n        let diff2 = Math.abs(numbers[i] - numbers[1]);\n        if (diff2 < min_diff) {\n            min_diff = diff2;\n            min_index = i;\n        }\n    }\n    min_value = numbers[min_index];\n    max_value = numbers[min_index];\n    for (let i = 0; i < numbers.length; i++) {\n        let diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_index = i;\n        }\n        let diff2 = Math.abs(numbers[i] - numbers[1]);\n        if (diff2 < min_diff) {\n            min_diff = diff2;\n            min_index = i;\n        }\n    }\n    for (let i = 0; i < numbers.length; i++) {\n        let diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_index = i;\n        }\n        let diff2 = Math.abs(n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292828,
      "stdout": "../../../../../../tmp/tmpjgvj_4gi.ts(58,1): error TS1005: ',' expected.\n../../../../../../tmp/tmpjgvj_4gi.ts(58,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpjgvj_4gi.ts(71,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = 0;\n  let max_value = 0;\n  let min_diff_value = 0;\n  let max_diff_value = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff_value = Math.abs(numbers[i] - numbers[0]);\n    if (diff_value < min_diff_value) {\n      min_diff_value = diff_value;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff_value = Math.abs(numbers[i] - numbers[0]);\n    if (diff_value > max_diff_value) {\n      max_diff_value = diff_value;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n  return [min_value, max_value];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292828,
      "stdout": "../../../../../../tmp/tmpcu0dovw1.ts(22,9): error TS2451: Cannot redeclare block-scoped variable 'diff_value'.\n../../../../../../tmp/tmpcu0dovw1.ts(28,9): error TS2451: Cannot redeclare block-scoped variable 'diff_value'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = Infinity;\n  let max_value = -Infinity;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff3 = Math.abs(numbers[i] - numbers[2]);\n    if (diff3 < min_diff) {\n      min_diff = diff3;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff4 = Math.abs(numbers[i] - numbers[3]);\n    if (diff4 < min_diff) {\n      min_diff = diff4;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff5 = Math.abs(numbers[i] - numbers[4]);\n    if (diff5 < min_diff) {\n      min_diff = diff5;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff6 = Math.abs(numbers[i] - numbers[5]);\n    if (diff6 < min_diff) {\n      min_diff = diff6;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff7 = Math.abs(numbers[i] - numbers[6]);\n    if (diff7 < min_diff) {\n      min_diff = diff7;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff8 = Math.abs(numbers[i] - numbers\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292828,
      "stdout": "../../../../../../tmp/tmpgszji4e7.ts(57,1): error TS1005: ',' expected.\n../../../../../../tmp/tmpgszji4e7.ts(57,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpgszji4e7.ts(70,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = 0;\n  let max_value = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  max_index = min_index;\n  max_value = min_value;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  return [min_value, max_value];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpmyyy0x4q.js:48:12)\n    at Object.<anonymous> (/tmp/tmpmyyy0x4q.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      max_index = 0;\n    } else if (diff === min_diff) {\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpa5wqv1up.js:27:12)\n    at Object.<anonymous> (/tmp/tmpa5wqv1up.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpz2aci9tf.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpz2aci9tf.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      max_index = 0;\n    }\n    for (let j = 1; j < numbers.length; j++) {\n      let diff2 = Math.abs(numbers[i] - numbers[j]);\n      if (diff2 < min_diff) {\n        min_diff = diff2;\n        min_index = i;\n        max_index = j;\n      }\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpdjo6p05t.js:32:12)\n    at Object.<anonymous> (/tmp/tmpdjo6p05t.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = 0;\n  let max_value = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  max_index = min_index;\n  max_value = min_value;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    diff = Math.abs(numbers[i] - numbers[1]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  return [min_value, max_value];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpmyyy0x4q.js:48:12)\n    at Object.<anonymous> (/tmp/tmpmyyy0x4q.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      max_index = 0;\n    }\n    for (let j = 1; j < numbers.length; j++) {\n      let diff2 = Math.abs(numbers[i] - numbers[j]);\n      if (diff2 < min_diff) {\n        min_diff = diff2;\n        min_index = i;\n        max_index = j;\n      }\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpdjo6p05t.js:32:12)\n    at Object.<anonymous> (/tmp/tmpdjo6p05t.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpdtye2swt.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpdtye2swt.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpz2aci9tf.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpz2aci9tf.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpz2aci9tf.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpz2aci9tf.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmppvlo1p74.js:28:12)\n    at Object.<anonymous> (/tmp/tmppvlo1p74.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpdtye2swt.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpdtye2swt.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n    let min_diff = Infinity;\n    let min_index = 0;\n    let max_index = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        let diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = Math.abs(numbers[i] - numbers[numbers.length - 1]);\n        if (diff < min_diff) {\n            min_diff = diff;\n            max_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpw1yaic41.js:28:12)\n    at Object.<anonymous> (/tmp/tmpw1yaic41.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  const sorted_numbers = numbers.sort((a, b) => a - b);\n  const first_number = sorted_numbers[0];\n  const second_number = sorted_numbers[1];\n  const first_difference = Math.abs(first_number - second_number);\n  const second_difference = Math.abs(second_number - first_number);\n  if (first_difference < second_difference) {\n    return [first_number, second_number];\n  } else {\n    return [second_number, first_number];\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpfa8hzo_z.js:23:12)\n    at Object.<anonymous> (/tmp/tmpfa8hzo_z.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = 0;\n  let max_value = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n\n  return [min_value, max_value];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpxy2o0mzx.js:46:12)\n    at Object.<anonymous> (/tmp/tmpxy2o0mzx.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      max_index = 0;\n    }\n    for (let j = 1; j < numbers.length; j++) {\n      let diff2 = Math.abs(numbers[i] - numbers[j]);\n      if (diff2 < min_diff) {\n        min_diff = diff2;\n        min_index = i;\n        max_index = j;\n      }\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpdjo6p05t.js:32:12)\n    at Object.<anonymous> (/tmp/tmpdjo6p05t.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpdtye2swt.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpdtye2swt.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n\n    diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpmxb_6y4s.js:36:12)\n    at Object.<anonymous> (/tmp/tmpmxb_6y4s.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = 0;\n  let max_value = 0;\n  let min_diff_value = 0;\n  let max_diff_value = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff_value = Math.abs(numbers[i] - numbers[0]);\n    if (diff_value < min_diff_value) {\n      min_diff_value = diff_value;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff_value = Math.abs(numbers[i] - numbers[0]);\n    if (diff_value > max_diff_value) {\n      max_diff_value = diff_value;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292828,
      "stdout": "../../../../../../tmp/tmprrcwjzpf.ts(22,9): error TS2451: Cannot redeclare block-scoped variable 'diff_value'.\n../../../../../../tmp/tmprrcwjzpf.ts(28,9): error TS2451: Cannot redeclare block-scoped variable 'diff_value'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      max_index = 0;\n    }\n    for (let j = 1; j < numbers.length; j++) {\n      let diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < min_diff) {\n        min_diff = diff;\n        min_index = i;\n        max_index = j;\n      }\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpbb_704x6.js:32:12)\n    at Object.<anonymous> (/tmp/tmpbb_704x6.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = 0;\n  let max_value = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      min_index = i;\n      min_value = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n    let diff2 = Math.abs(numbers[i] - numbers[1]);\n    if (diff2 < min_diff) {\n      min_diff = diff2;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n  return [min_value, max_value];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpv74zaekc.js:46:12)\n    at Object.<anonymous> (/tmp/tmpv74zaekc.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpz2aci9tf.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpz2aci9tf.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n      min_value = numbers[i];\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n      max_value = numbers[i];\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpe0ddji20.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpe0ddji20.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - numbers[0]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp8engon79.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8engon79.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpdtye2swt.ts(14,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpdtye2swt.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n\n  return [numbers[min_index], numbers[max_index]];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
      "timestamp": 1664292823,
      "stdout": "../../../../../../tmp/tmpq4cr8zf4.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n../../../../../../tmp/tmpq4cr8zf4.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'diff'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}