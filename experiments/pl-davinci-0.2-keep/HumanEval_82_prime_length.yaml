name: HumanEval_82_prime_length
language: pl
prompt: "# Write a function that takes a string and returns True if the string\n#\
  \ length is a prime number or False otherwise\n# Examples\n# prime_length('Hello')\
  \ == True\n# prime_length('abcdcba') == True\n# prime_length('kittens') == True\n\
  # prime_length('orange') == False\nsub prime_length {\n    my($string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prime_length;\n\
  \        if(eq_deeply($candidate->(\"Hello\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdcba\"),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  kittens\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\"orange\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"wow\"),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  world\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->(\"MadaM\"),1)) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"Wow\"),1)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(\"HI\"),1)) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"go\"),1)) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  gogo\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\"aaaaaaaaaaaaaaa\"),\"\")) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Madam\"\
  ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  M\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(\"0\"),\"\")) {\n        print \"ok!\" }else{\n   \
  \     exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $length = length($string);\n    return is_prime($length);\n}",
  "    my $length = length($string);\n    return is_prime($length);\n}", "    my $length\
    \ = length($string);\n    return is_prime($length);\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    my $length = length($string);\n    return\
    \ is_prime($length);\n}", "    my $length = length($string);\n    return is_prime($length);\n\
    }", "    my $length = length($string);\n    return is_prime($length);\n}", " \
    \   my $length = length($string);\n    return is_prime($length);\n}", "    my\
    \ $length = length($string);\n    return is_prime($length);\n}", "    my $length\
    \ = length($string);\n    return is_prime($length);\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    my $length = length($string);\n    return\
    \ is_prime($length);\n}", "    return is_prime(length($string));\n}", "    my\
    \ $length = length($string);\n    return is_prime($length);\n}", "    my $length\
    \ = length($string);\n    return is_prime($length);\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    my $length = length($string);\n    return\
    \ is_prime($length);\n}", "    my $length = length($string);\n    return is_prime($length);\n\
    }", "    my $length = length($string);\n    return is_prime($length);\n}", " \
    \   my $length = length($string);\n    return is_prime($length);\n}", "    my\
    \ $length = length($string);\n    return is_prime($length);\n}", "    my $length\
    \ = length($string);\n    return is_prime($length);\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    my $length = length($string);\n    return\
    \ is_prime($length);\n}", "    my $length = length($string);\n    return is_prime($length);\n\
    }", "    my $length = length($string);\n    return is_prime($length);\n}", " \
    \   my $length = length($string);\n    return is_prime($length);\n}", "    my\
    \ $length = length($string);\n    return is_prime($length);\n}", "    my $length\
    \ = length($string);\n    return is_prime($length);\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    my $length = length($string);\n    return\
    \ 0 if $length < 2;\n    for (my $i = 2; $i < $length; $i++) {\n        return\
    \ 0 if $length % $i == 0;\n    }\n    return 1;\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    my $length = length($string);\n    return\
    \ is_prime($length);\n}", "    my $length = length($string);\n    return is_prime($length);\n\
    }", "    my $length = length($string);\n    return is_prime($length);\n}", " \
    \   my $length = length($string);\n    return is_prime($length);\n}", "    my\
    \ $length = length($string);\n    return is_prime($length);\n}", "    my $length\
    \ = length($string);\n    return is_prime($length);\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    my $length = length($string);\n    return\
    \ is_prime($length);\n}", "    my $length = length($string);\n    return is_prime($length);\n\
    }", "    my $length = length($string);\n    return is_prime($length);\n}", " \
    \   my $length = length($string);\n    return is_prime($length);\n}", "    my\
    \ $length = length($string);\n    my $is_prime = 1;\n    for my $i (2..$length-1)\
    \ {\n        if ($length % $i == 0) {\n            $is_prime = 0;\n          \
    \  last;\n        }\n    }\n    return $is_prime;\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    my $length = length($string);\n    return\
    \ 0 if $length < 2;\n    for my $i (2 .. sqrt($length)) {\n        return 0 if\
    \ $length % $i == 0;\n    }\n    return 1;\n}", "    my $len = length($string);\n\
    \    return is_prime($len);\n}", "    my $length = length($string);\n    return\
    \ is_prime($length);\n}", "    my $length = length($string);\n    return is_prime($length);\n\
    }", "    my $length = length($string);\n    return is_prime($length);\n}", " \
    \   my $length = length($string);\n    return is_prime($length);\n}", "    my\
    \ $length = length($string);\n    return is_prime($length);\n}", "    my $length\
    \ = length($string);\n    return is_prime($length);\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    my $length = length($string);\n    return\
    \ is_prime($length);\n}", "    my $length = length($string);\n    return is_prime($length);\n\
    }", "    my $length = length($string);\n    return is_prime($length);\n}", " \
    \   my $length = length($string);\n    return is_prime($length);\n}", "    my\
    \ $length = length($string);\n    return is_prime($length);\n}", "    my $length\
    \ = length($string);\n    return is_prime($length);\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    my $length = length($string);\n    return\
    \ is_prime($length);\n}", "    my $length = length($string);\n    return is_prime($length);\n\
    }", "    my $length = length($string);\n    return is_prime($length);\n}", " \
    \   my $length = length($string);\n    return is_prime($length);\n}", "    my\
    \ $length = length($string);\n    return is_prime($length);\n}", "    my $length\
    \ = length($string);\n    return is_prime($length);\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    my $length = length($string);\n    return\
    \ is_prime($length);\n}", "    my $length = length($string);\n    return is_prime($length);\n\
    }", "    my $length = length($string);\n    return is_prime($length);\n}", " \
    \   my $length = length($string);\n    return is_prime($length);\n}", "    my\
    \ $length = length($string);\n    return 0 if $length < 2;\n    for (my $i = 2;\
    \ $i < $length; $i++) {\n        return 0 if $length % $i == 0;\n    }\n    return\
    \ 1;\n}", "    my $length = length($string);\n    return is_prime($length);\n}",
  "    my $length = length($string);\n    return is_prime($length);\n}", "    my $length\
    \ = length($string);\n    return is_prime($length);\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    my $length = length($string);\n    return\
    \ is_prime($length);\n}", "    my $length = length($string);\n    return is_prime($length);\n\
    }", "    my $length = length($string);\n    return is_prime($length);\n}", " \
    \   my $length = length($string);\n    return is_prime($length);\n}", "    my\
    \ $length = length($string);\n    return 0 if $length < 2;\n    for (my $i = 2;\
    \ $i < $length; $i++) {\n        return 0 if $length % $i == 0;\n    }\n    return\
    \ 1;\n}", "    my $length = length($string);\n    return is_prime($length);\n}",
  "    my $length = length($string);\n    return is_prime($length);\n}", "    my $length\
    \ = length($string);\n    return is_prime($length);\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    my $length = length($string);\n    return\
    \ is_prime($length);\n}", "    my $length = length($string);\n    return is_prime($length);\n\
    }", "    my $length = length($string);\n    return is_prime($length);\n}", " \
    \   my $length = length($string);\n    return is_prime($length);\n}", "    return\
    \ is_prime(length($string));\n}", "    my $length = length($string);\n    return\
    \ is_prime($length);\n}", "    my $length = length($string);\n    return is_prime($length);\n\
    }", "    my $length = length($string);\n    return is_prime($length);\n}", " \
    \   my $length = length($string);\n    return is_prime($length);\n}", "    my\
    \ $length = length($string);\n    return is_prime($length);\n}", "    my $length\
    \ = length($string);\n    return is_prime($length);\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    my $length = length($string);\n    return\
    \ is_prime($length);\n}", "    my $length = length($string);\n    return is_prime($length);\n\
    }", "    my $length = length($string);\n    return is_prime($length);\n}", " \
    \   my $length = length($string);\n    return is_prime($length);\n}", "    return\
    \ is_prime(length($string));\n}", "    my $length = length($string);\n    return\
    \ is_prime($length);\n}", "    my $length = length($string);\n    return is_prime($length);\n\
    }", "    my $length = length($string);\n    return is_prime($length);\n}", " \
    \   my $length = length($string);\n    return is_prime($length);\n}", "    my\
    \ $length = length($string);\n    return is_prime($length);\n}", "    my $length\
    \ = length($string);\n    return is_prime($length);\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    my $length = length($string);\n    return\
    \ is_prime($length);\n}", "    my $length = length($string);\n    return is_prime($length);\n\
    }", "    my $length = length($string);\n    return is_prime($length);\n}", " \
    \   my $length = length($string);\n    return is_prime($length);\n}", "    my\
    \ $length = length($string);\n    return is_prime($length);\n}", "    my $length\
    \ = length($string);\n    return is_prime($length);\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    my $length = length($string);\n    return\
    \ is_prime($length);\n}", "    my $length = length($string);\n    return is_prime($length);\n\
    }", "    my $length = length($string);\n    return is_prime($length);\n}", " \
    \   my $length = length($string);\n    return is_prime($length);\n}", "    my\
    \ $length = length($string);\n    return is_prime($length);\n}", "    my $length\
    \ = length($string);\n    return is_prime($length);\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    my $length = length($string);\n    if\
    \ ($length == 1) {\n        return 0;\n    }\n    for (my $i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return 0;\n        }\n\
    \    }\n    return 1;\n}", "    my $length = length($string);\n    return is_prime($length);\n\
    }", "    my $length = length($string);\n    return is_prime($length);\n}", " \
    \   my $length = length($string);\n    return is_prime($length);\n}", "    my\
    \ $length = length($string);\n    return is_prime($length);\n}", "    my $length\
    \ = length($string);\n    return is_prime($length);\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    my $length = length($string);\n    my\
    \ $is_prime = 1;\n    for (my $i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            $is_prime = 0;\n            last;\n        }\n   \
    \ }\n    return $is_prime;\n}", "    my $length = length($string);\n    return\
    \ is_prime($length);\n}", "    my $length = length($string);\n    return is_prime($length);\n\
    }", "    my $length = length($string);\n    return is_prime($length);\n}", " \
    \   my $length = length($string);\n    return is_prime($length);\n}", "    my\
    \ $length = length($string);\n    return is_prime($length);\n}", "    my $length\
    \ = length($string);\n    return is_prime($length);\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    my $length = length($string);\n    return\
    \ is_prime($length);\n}", "    my $length = length($string);\n    return is_prime($length);\n\
    }", "    my $length = length($string);\n    return is_prime($length);\n}", " \
    \   my $length = length($string);\n    return is_prime($length);\n}", "    my\
    \ $length = length($string);\n    return is_prime($length);\n}", "    my $length\
    \ = length($string);\n    return is_prime($length);\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    my $length = length($string);\n    return\
    \ is_prime($length);\n}", "    my $length = length($string);\n    return is_prime($length);\n\
    }", "    my $length = length($string);\n    if ($length == 2) {\n        return\
    \ 1;\n    }\n    elsif ($length % 2 == 0) {\n        return 0;\n    }\n    else\
    \ {\n        for (my $i = 3; $i < $length; $i += 2) {\n            if ($length\
    \ % $i == 0) {\n                return 0;\n            }\n        }\n        return\
    \ 1;\n    }\n}", "    my $length = length($string);\n    return is_prime($length);\n\
    }", "    my $length = length($string);\n    return is_prime($length);\n}", " \
    \   my $length = length($string);\n    return 0 if $length < 2;\n    for my $i\
    \ (2 .. sqrt($length)) {\n        return 0 if $length % $i == 0;\n    }\n    return\
    \ 1;\n}", "    my $length = length($string);\n    return is_prime($length);\n}",
  "    my $length = length($string);\n    return is_prime($length);\n}", "    my $length\
    \ = length($string);\n    return is_prime($length);\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    my $length = length($string);\n    return\
    \ is_prime($length);\n}", "    my $length = length($string);\n    return is_prime($length);\n\
    }", "    my $length = length($string);\n    return is_prime($length);\n}", " \
    \   my $length = length($string);\n    return is_prime($length);\n}", "    my\
    \ $length = length($string);\n    return is_prime($length);\n}", "    my $length\
    \ = length($string);\n    return is_prime($length);\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    my $length = length($string);\n    return\
    \ is_prime($length);\n}", "    my $length = length($string);\n    return is_prime($length);\n\
    }", "    my $length = length($string);\n    return 0 if $length < 2;\n    for\
    \ my $i (2 .. sqrt($length)) {\n        return 0 if $length % $i == 0;\n    }\n\
    \    return 1;\n}", "    my $length = length($string);\n    return 0 if $length\
    \ < 2;\n    for (my $i = 2; $i < $length; $i++) {\n        return 0 if $length\
    \ % $i == 0;\n    }\n    return 1;\n}", "    my $length = length($string);\n \
    \   return 0 if $length < 2;\n    for my $i (2 .. sqrt($length)) {\n        return\
    \ 0 if $length % $i == 0;\n    }\n    return 1;\n}", "    my $length = length($string);\n\
    \    foreach my $i (2..$length-1) {\n        return 0 if $length % $i == 0;\n\
    \    }\n    return 1;\n}", "    my $length = length($string);\n    return 0 if\
    \ $length < 2;\n    for (my $i = 2; $i < $length; $i++) {\n        return 0 if\
    \ $length % $i == 0;\n    }\n    return 1;\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    my $length = length($string);\n    return\
    \ is_prime($length);\n}", "    return is_prime(length($string));\n}", "    my\
    \ $length = length($string);\n    return is_prime($length);\n}", "    my $length\
    \ = length($string);\n    return is_prime($length);\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    my $length = length($string);\n    return\
    \ is_prime($length);\n}", "    my $length = length($string);\n    return is_prime($length);\n\
    }", "    my $length = length($string);\n    return is_prime($length);\n}", " \
    \   my $length = length($string);\n    return is_prime($length);\n}", "    my\
    \ $length = length($string);\n    return is_prime($length);\n}", "    my $length\
    \ = length($string);\n    return is_prime($length);\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    my $length = length($string);\n    return\
    \ is_prime($length);\n}", "    my $length = length($string);\n    return is_prime($length);\n\
    }", "    my $length = length($string);\n    return is_prime($length);\n}", " \
    \   my $length = length($string);\n    if ($length == 1) {\n        return 0;\n\
    \    }\n    for (my $i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return 0;\n        }\n    }\n    return 1;\n}", "    my $length\
    \ = length($string);\n    return is_prime($length);\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    my $length = length($string);\n    return\
    \ is_prime($length);\n}", "    my $length = length($string);\n    return is_prime($length);\n\
    }", "    my $length = length($string);\n    return is_prime($length);\n}", " \
    \   my $len = length($string);\n    return is_prime($len);\n}", "    my $length\
    \ = length($string);\n    return is_prime($length);\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    my $length = length($string);\n    return\
    \ is_prime($length);\n}", "    my $length = length($string);\n    return is_prime($length);\n\
    }", "    my $length = length($string);\n    return is_prime($length);\n}", " \
    \   my $length = length($string);\n    return is_prime($length);\n}", "    my\
    \ $len = length($string);\n    return is_prime($len);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
