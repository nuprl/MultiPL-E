name: HumanEval_72_will_it_fly
language: humaneval_to_perl.py
prompt: "# Write a function that returns True if the object q will fly, and False\
  \ otherwise.\n# The object q will fly if it's balanced (it is a palindromic list)\
  \ and the sum of its elements is less than or equal the maximum possible weight\
  \ w.\n# Example:\n# will_it_fly([1, 2], 5) \u279E False \n# # 1+2 is less than the\
  \ maximum possible weight, but it's unbalanced.\n# will_it_fly([3, 2, 3], 1) \u279E\
  \ False\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
  # will_it_fly([3, 2, 3], 9) \u279E True\n# # 3+2+3 is less than the maximum possible\
  \ weight, and it's balanced.\n# will_it_fly([3], 5) \u279E True\n# # 3 is less than\
  \ the maximum possible weight, and it's balanced.\nsub will_it_fly {\n    my($q,\
  \ $w) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&will_it_fly;\n\
  \        if(eq_deeply($candidate->([3, 2, 3], 9),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2], 5),\"\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3],\
  \ 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
  \ 2, 3], 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([1, 2, 3], 6),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5], 5),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: []
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
