completions:
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    if ($len % 2 == 0)\
  \ {\n        return ($l->[$mid - 1] + $l->[$mid]) / 2;\n    } else {\n        return\
  \ $l->[$mid];\n    }\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    my @s = sort { $a <=> $b } @$l;\n  \
  \  if ($n % 2) {\n        return $s[$m];\n    } else {\n        return ($s[$m -\
  \ 1] + $s[$m]) / 2;\n    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    my $median;\n   \
  \ if ($len % 2 == 0) {\n        $median = ($l->[$mid - 1] + $l->[$mid]) / 2;\n \
  \   } else {\n        $median = $l->[$mid];\n    }\n    return $median;\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    my $median;\n   \
  \ if ($len % 2 == 0) {\n        $median = ($l->[$mid] + $l->[$mid - 1]) / 2;\n \
  \   } else {\n        $median = $l->[$mid];\n    }\n    return $median;\n}"
- "    my $n = @$l;\n    my @s = sort {$a <=> $b} @$l;\n    if ($n % 2) {\n      \
  \  return $s[int($n/2)];\n    } else {\n        return ($s[$n/2] + $s[$n/2 - 1])\
  \ / 2;\n    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    if ($len % 2 == 0)\
  \ {\n        return ($l->[$mid] + $l->[$mid - 1]) / 2;\n    } else {\n        return\
  \ $l->[$mid];\n    }\n}"
- "    my $len = scalar(@$l);\n    my $median;\n    if ($len % 2 == 0) {\n       \
  \ $median = ($l->[$len/2] + $l->[$len/2-1]) / 2;\n    } else {\n        $median\
  \ = $l->[$len/2];\n    }\n    return $median;\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $n = scalar(@$l);\n    my $m = $n / 2;\n    my $s = sort { $a <=> $b } @$l;\n\
  \    return $n % 2 ? $s->[$m] : ($s->[$m - 1] + $s->[$m]) / 2;\n}"
- "    my $n = scalar(@$l);\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n    \
  \    return ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n\
  \    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    my $median;\n   \
  \ if ($len % 2 == 0) {\n        $median = ($l->[$mid] + $l->[$mid - 1]) / 2;\n \
  \   } else {\n        $median = $l->[$mid];\n    }\n    return $median;\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    my @s = sort { $a <=> $b } @$l;\n  \
  \  if ($n % 2) {\n        return $s[$m];\n    } else {\n        return ($s[$m-1]\
  \ + $s[$m]) / 2;\n    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    if ($len % 2 == 0)\
  \ {\n        return ($l->[$mid - 1] + $l->[$mid]) / 2;\n    } else {\n        return\
  \ $l->[$mid];\n    }\n}"
- "    my @sorted = sort {$a <=> $b} @$l;\n    my $n = @sorted;\n    if ($n % 2 ==\
  \ 0) {\n        return ($sorted[$n/2] + $sorted[$n/2 - 1]) / 2;\n    } else {\n\
  \        return $sorted[$n/2];\n    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $len = @$l;\n    my $mid = int($len / 2);\n    my $median;\n    if ($len\
  \ % 2 == 0) {\n        $median = ($l->[$mid] + $l->[$mid-1]) / 2;\n    } else {\n\
  \        $median = $l->[$mid];\n    }\n    return $median;\n}"
- "    my $len = scalar(@$l);\n    my $median;\n    if ($len % 2 == 0) {\n       \
  \ $median = ($l->[$len/2] + $l->[$len/2 - 1]) / 2;\n    } else {\n        $median\
  \ = $l->[$len/2];\n    }\n    return $median;\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    my @s = sort { $a <=> $b } @$l;\n  \
  \  if ($n % 2) {\n        return $s[$m];\n    } else {\n        return ($s[$m-1]\
  \ + $s[$m]) / 2;\n    }\n}"
- "    my $len = @$l;\n    my $mid = int($len / 2);\n    if ($len % 2 == 0) {\n  \
  \      return ($l->[$mid] + $l->[$mid-1]) / 2;\n    } else {\n        return $l->[$mid];\n\
  \    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    my @s = sort {$a <=> $b} @$l;\n \
  \   if ($n % 2) {\n        return $s[$m];\n    } else {\n        return ($s[$m-1]\
  \ + $s[$m])/2;\n    }\n}"
- "    my $n = scalar(@$l);\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n    \
  \    return ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n\
  \    }\n}"
- "    my $n = scalar(@$l);\n    return undef if $n == 0;\n    my $m = $n / 2;\n \
  \   my $r = $l->[$m];\n    if ($n % 2 == 0) {\n        $r = ($r + $l->[$m - 1])\
  \ / 2;\n    }\n    return $r;\n}"
- "    my $n = scalar(@$l);\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n    \
  \    return ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n\
  \    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    my $median;\n   \
  \ if ($len % 2 == 0) {\n        $median = ($l->[$mid - 1] + $l->[$mid]) / 2;\n \
  \   } else {\n        $median = $l->[$mid];\n    }\n    return $median;\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my @sorted = sort {$a <=> $b} @$l;\n    my $mid = int(@sorted / 2);\n    if\
  \ (@sorted % 2) {\n        return $sorted[$mid];\n    } else {\n        return ($sorted[$mid\
  \ - 1] + $sorted[$mid]) / 2;\n    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $n = scalar(@$l);\n    if ($n == 0) {\n        return undef;\n    }\n  \
  \  my @sorted = sort { $a <=> $b } @$l;\n    if ($n % 2 == 0) {\n        return\
  \ ($sorted[$n/2] + $sorted[$n/2-1]) / 2;\n    } else {\n        return $sorted[$n/2];\n\
  \    }\n}"
- "    my $n = @$l;\n    my @s = sort {$a <=> $b} @$l;\n    if ($n % 2) {\n      \
  \  return $s[$n/2];\n    } else {\n        return ($s[$n/2] + $s[$n/2-1])/2;\n \
  \   }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    if ($len % 2 == 0)\
  \ {\n        return ($l->[$mid] + $l->[$mid - 1]) / 2;\n    } else {\n        return\
  \ $l->[$mid];\n    }\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    my $s = sort { $a <=> $b } @$l;\n  \
  \  if ($n % 2) {\n        return $s->[$m];\n    } else {\n        return ($s->[$m\
  \ - 1] + $s->[$m]) / 2;\n    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    my $median;\n   \
  \ if ($len % 2 == 0) {\n        $median = ($l->[$mid - 1] + $l->[$mid]) / 2;\n \
  \   } else {\n        $median = $l->[$mid];\n    }\n    return $median;\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $n = @$l;\n    if ($n == 0) {\n        return undef;\n    }\n    my @s =\
  \ sort { $a <=> $b } @$l;\n    if ($n % 2 == 0) {\n        return ($s[$n/2] + $s[$n/2\
  \ - 1]) / 2;\n    } else {\n        return $s[$n/2];\n    }\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    my @s = sort { $a <=> $b } @$l;\n  \
  \  if ($n % 2) {\n        return $s[$m];\n    } else {\n        return ($s[$m -\
  \ 1] + $s[$m]) / 2;\n    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $len = scalar(@$l);\n    return undef if $len == 0;\n    my $mid = int($len\
  \ / 2);\n    my @sorted = sort {$a <=> $b} @$l;\n    if ($len % 2 == 0) {\n    \
  \    return ($sorted[$mid - 1] + $sorted[$mid]) / 2;\n    } else {\n        return\
  \ $sorted[$mid];\n    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    if ($len % 2 == 0)\
  \ {\n        return ($l->[$mid - 1] + $l->[$mid]) / 2;\n    } else {\n        return\
  \ $l->[$mid];\n    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $n = scalar(@$l);\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n    \
  \    return ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n\
  \    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    my $median;\n   \
  \ if ($len % 2 == 0) {\n        $median = ($l->[$mid] + $l->[$mid - 1]) / 2;\n \
  \   } else {\n        $median = $l->[$mid];\n    }\n    return $median;\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    my $median;\n    if ($n % 2 == 0) {\n\
  \        $median = ($l->[$m] + $l->[$m-1]) / 2;\n    } else {\n        $median =\
  \ $l->[$m];\n    }\n    return $median;\n}"
- "    my $n = @$l;\n    my $m = $n/2;\n    my @s = sort {$a <=> $b} @$l;\n    if\
  \ ($n % 2) {\n        return $s[$m];\n    } else {\n        return ($s[$m-1] + $s[$m])/2;\n\
  \    }\n}"
- "    my $n = scalar(@$l);\n    if ($n % 2 == 0) {\n        return ($l->[$n/2] +\
  \ $l->[$n/2-1]) / 2;\n    } else {\n        return $l->[$n/2];\n    }\n}"
- "    my $n = @$l;\n    return undef if $n == 0;\n    my $m = int($n/2);\n    if\
  \ ($n % 2 == 0) {\n        return ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n \
  \       return $l->[$m];\n    }\n}"
- "    my $n = scalar(@$l);\n    if ($n == 0) {\n        return undef;\n    }\n  \
  \  my @sorted = sort { $a <=> $b } @$l;\n    if ($n % 2 == 0) {\n        return\
  \ ($sorted[$n/2] + $sorted[$n/2-1]) / 2;\n    } else {\n        return $sorted[$n/2];\n\
  \    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    if ($len % 2 == 0)\
  \ {\n        return ($l->[$mid - 1] + $l->[$mid]) / 2;\n    } else {\n        return\
  \ $l->[$mid];\n    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $n = @$l;\n    if ($n % 2 == 0) {\n        return ($l->[$n/2] + $l->[$n/2-1])\
  \ / 2;\n    } else {\n        return $l->[$n/2];\n    }\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    my $median;\n    if ($n % 2 == 0) {\n\
  \        $median = ($l->[$m] + $l->[$m-1]) / 2;\n    } else {\n        $median =\
  \ $l->[$m];\n    }\n    return $median;\n}"
- "    my $n = scalar(@$l);\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n    \
  \    return ($l->[$m] + $l->[$m-1])/2;\n    } else {\n        return $l->[$m];\n\
  \    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    my $median;\n   \
  \ if ($len % 2 == 0) {\n        $median = ($l->[$mid - 1] + $l->[$mid]) / 2;\n \
  \   } else {\n        $median = $l->[$mid];\n    }\n    return $median;\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    my $s = sort { $a <=> $b } @$l;\n  \
  \  if ($n % 2) {\n        return $s->[$m];\n    } else {\n        return ($s->[$m\
  \ - 1] + $s->[$m]) / 2;\n    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    my @s = sort {$a <=> $b} @$l;\n \
  \   if ($n % 2) {\n        return $s[$m];\n    } else {\n        return ($s[$m-1]\
  \ + $s[$m])/2;\n    }\n}"
- "    my $n = scalar(@$l);\n    my $m = $n / 2;\n    my $s = sort { $a <=> $b } @$l;\n\
  \    if ($n % 2 == 0) {\n        return ($s->[$m-1] + $s->[$m]) / 2;\n    } else\
  \ {\n        return $s->[$m];\n    }\n}"
- "    my $len = scalar(@$l);\n    my $median;\n    if ($len % 2 == 0) {\n       \
  \ $median = ($l->[$len/2] + $l->[$len/2 - 1]) / 2;\n    } else {\n        $median\
  \ = $l->[$len/2];\n    }\n    return $median;\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    my $i = int($m);\n    if ($n % 2 ==\
  \ 0) {\n        return ($l->[$i - 1] + $l->[$i]) / 2;\n    } else {\n        return\
  \ $l->[$i];\n    }\n}"
- "    my @sorted = sort {$a <=> $b} @$l;\n    my $n = @sorted;\n    if ($n % 2 ==\
  \ 0) {\n        return ($sorted[$n/2] + $sorted[$n/2 - 1]) / 2;\n    } else {\n\
  \        return $sorted[$n/2];\n    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    my $median;\n   \
  \ if ($len % 2 == 0) {\n        $median = ($l->[$mid] + $l->[$mid - 1]) / 2;\n \
  \   } else {\n        $median = $l->[$mid];\n    }\n    return $median;\n}"
- "    my $n = @$l;\n    if ($n == 0) {\n        return undef;\n    }\n    my @s =\
  \ sort { $a <=> $b } @$l;\n    if ($n % 2 == 0) {\n        return ($s[$n/2-1] +\
  \ $s[$n/2]) / 2;\n    } else {\n        return $s[$n/2];\n    }\n}"
- "    my $len = scalar(@$l);\n    return undef if $len == 0;\n    my $mid = int($len\
  \ / 2);\n    my @sorted = sort { $a <=> $b } @$l;\n    if ($len % 2 == 0) {\n  \
  \      return ($sorted[$mid] + $sorted[$mid - 1]) / 2;\n    } else {\n        return\
  \ $sorted[$mid];\n    }\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    if ($n % 2 == 0) {\n        return ($l->[$m-1]\
  \ + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my @sorted = sort {$a <=> $b} @$l;\n    my $n = @sorted;\n    if ($n % 2 ==\
  \ 0) {\n        return ($sorted[$n/2] + $sorted[$n/2 - 1]) / 2;\n    } else {\n\
  \        return $sorted[$n/2];\n    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my @sorted = sort {$a <=> $b} @$l;\n    my $len = @sorted;\n    if ($len %\
  \ 2) {\n        return $sorted[int($len/2)];\n    } else {\n        return ($sorted[int($len/2)-1]\
  \ + $sorted[int($len/2)]) / 2;\n    }\n}"
- "    my $n = @$l;\n    my @s = sort {$a <=> $b} @$l;\n    if ($n % 2) {\n      \
  \  return $s[$n/2];\n    } else {\n        return ($s[$n/2] + $s[$n/2-1])/2;\n \
  \   }\n}"
- "    my $n = @$l;\n    my @s = sort {$a <=> $b} @$l;\n    if ($n % 2) {\n      \
  \  return $s[$n/2];\n    } else {\n        return ($s[$n/2] + $s[$n/2-1])/2;\n \
  \   }\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    my $s = sort { $a <=> $b } @$l;\n  \
  \  if ($n % 2) {\n        return $s->[$m];\n    } else {\n        return ($s->[$m\
  \ - 1] + $s->[$m]) / 2;\n    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $n = @$l;\n    return undef if $n == 0;\n    my $m = $n / 2;\n    my $s\
  \ = sort { $a <=> $b } @$l;\n    return $n % 2 ? $s->[$m] : ($s->[$m-1] + $s->[$m])\
  \ / 2;\n}"
- "    my($n) = @$l;\n    my($i, $j, $k, $tmp);"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    if ($len % 2 == 0)\
  \ {\n        return ($l->[$mid] + $l->[$mid - 1]) / 2;\n    } else {\n        return\
  \ $l->[$mid];\n    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    my $median;\n   \
  \ if ($len % 2 == 0) {\n        $median = ($l->[$mid] + $l->[$mid - 1]) / 2;\n \
  \   } else {\n        $median = $l->[$mid];\n    }\n    return $median;\n}"
- "    my $n = scalar(@$l);\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n    \
  \    return ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n\
  \    }\n}"
- "    my $n = @$l;\n    if ($n == 0) {\n        return undef;\n    }\n    my @s =\
  \ sort { $a <=> $b } @$l;\n    if ($n % 2 == 0) {\n        return ($s[$n/2] + $s[$n/2-1])\
  \ / 2;\n    } else {\n        return $s[$n/2];\n    }\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    my $s = sort { $a <=> $b } @$l;\n  \
  \  if ($n % 2) {\n        return $s->[$m];\n    } else {\n        return ($s->[$m\
  \ - 1] + $s->[$m]) / 2;\n    }\n}"
- "    my $n = scalar(@$l);\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n    \
  \    return ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n\
  \    }\n}"
- "    my $n = scalar(@$l);\n    my $m = int($n/2);\n    my @s = sort {$a <=> $b}\
  \ @$l;\n    if ($n % 2 == 0) {\n        return ($s[$m-1] + $s[$m]) / 2;\n    } else\
  \ {\n        return $s[$m];\n    }\n}"
- "    my $n = @$l;\n    return $n == 0 ? undef : $n % 2 ? $l->[$n/2] : ($l->[$n/2-1]\
  \ + $l->[$n/2])/2;\n}"
- "    my $n = @$l;\n    return undef if $n == 0;\n    my $m = int($n/2);\n    if\
  \ ($n % 2 == 0) {\n\treturn ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n\treturn\
  \ $l->[$m];\n    }\n}"
- "    my @sorted = sort {$a <=> $b} @$l;\n    my $len = @sorted;\n    if ($len %\
  \ 2) {\n        return $sorted[int($len/2)];\n    } else {\n        return ($sorted[int($len/2)-1]\
  \ + $sorted[int($len/2)]) / 2;\n    }\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    my $s = sort { $a <=> $b } @$l;\n  \
  \  if ($n % 2) {\n        return $s->[$m];\n    } else {\n        return ($s->[$m\
  \ - 1] + $s->[$m]) / 2;\n    }\n}"
- "    my $n = scalar(@$l);\n    return undef if $n == 0;\n    my $m = int($n/2);\n\
  \    my @s = sort {$a <=> $b} @$l;\n    if ($n % 2 == 0) {\n        return ($s[$m-1]\
  \ + $s[$m]) / 2;\n    } else {\n        return $s[$m];\n    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    my $median;\n    if ($n % 2 == 0) {\n\
  \        $median = ($l->[$m - 1] + $l->[$m]) / 2;\n    } else {\n        $median\
  \ = $l->[$m];\n    }\n    return $median;\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    if ($len % 2 == 0)\
  \ {\n        return ($l->[$mid - 1] + $l->[$mid]) / 2;\n    } else {\n        return\
  \ $l->[$mid];\n    }\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    my $i = int($m);\n    my $j = $i + 1;\n\
  \    if ($n % 2 == 0) {\n        return ($l->[$i-1] + $l->[$j-1]) / 2;\n    } else\
  \ {\n        return $l->[$i-1];\n    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my @l = sort {$a <=> $b} @$l;\n    my $n = @l;\n    if ($n % 2 == 0) {\n  \
  \      return ($l[$n/2] + $l[$n/2-1]) / 2;\n    } else {\n        return $l[$n/2];\n\
  \    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my @sorted = sort {$a <=> $b} @$l;\n    my $len = @sorted;\n    if ($len %\
  \ 2) {\n        return $sorted[int($len/2)];\n    } else {\n        return ($sorted[int($len/2)-1]\
  \ + $sorted[int($len/2)]) / 2;\n    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    my $median;\n   \
  \ if ($len % 2 == 0) {\n        $median = ($l->[$mid - 1] + $l->[$mid]) / 2;\n \
  \   } else {\n        $median = $l->[$mid];\n    }\n    return $median;\n}"
- "    my $n = scalar(@$l);\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n    \
  \    return ($l->[$m] + $l->[$m-1])/2;\n    } else {\n        return $l->[$m];\n\
  \    }\n}"
- "    my $n = scalar(@$l);\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n    \
  \    return ($l->[$m] + $l->[$m-1])/2;\n    } else {\n        return $l->[$m];\n\
  \    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    my $i = int($m);\n    if ($n % 2 ==\
  \ 0) {\n        return ($l->[$i] + $l->[$i-1]) / 2;\n    } else {\n        return\
  \ $l->[$i];\n    }\n}"
- "    my $len = scalar(@$l);\n    my $median;\n    if ($len % 2 == 0) {\n       \
  \ $median = ($l->[$len/2] + $l->[$len/2 - 1]) / 2;\n    } else {\n        $median\
  \ = $l->[int($len/2)];\n    }\n    return $median;\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    my $median;\n   \
  \ if ($len % 2 == 0) {\n        $median = ($l->[$mid - 1] + $l->[$mid]) / 2;\n \
  \   } else {\n        $median = $l->[$mid];\n    }\n    return $median;\n}"
- "    my $len = scalar(@$l);\n    my $median;\n    if ($len % 2 == 0) {\n       \
  \ $median = ($l->[$len/2 - 1] + $l->[$len/2]) / 2;\n    } else {\n        $median\
  \ = $l->[$len/2];\n    }\n    return $median;\n}"
- "    my $s = scalar(@$l);\n    if ($s == 0) {\n        return undef;\n    }\n  \
  \  my $m = int($s / 2);\n    if ($s % 2 == 0) {\n        return ($l->[$m - 1] +\
  \ $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    my @s = sort {$a <=> $b} @$l;\n \
  \   if ($n % 2) {\n        return $s[$m];\n    } else {\n        return ($s[$m-1]\
  \ + $s[$m])/2;\n    }\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    my @s = sort { $a <=> $b } @$l;\n  \
  \  if ($n % 2) {\n        return $s[$m];\n    } else {\n        return ($s[$m-1]\
  \ + $s[$m]) / 2;\n    }\n}"
- "    my $n = scalar(@$l);\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n    \
  \    return ($l->[$m] + $l->[$m-1])/2;\n    } else {\n        return $l->[$m];\n\
  \    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    my $median;\n   \
  \ if ($len % 2 == 0) {\n        $median = ($l->[$mid] + $l->[$mid-1]) / 2;\n   \
  \ } else {\n        $median = $l->[$mid];\n    }\n    return $median;\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    my $s = sort { $a <=> $b } @$l;\n  \
  \  if ($n % 2) {\n        return $s->[$m];\n    } else {\n        return ($s->[$m\
  \ - 1] + $s->[$m]) / 2;\n    }\n}"
- "    my $n = scalar(@$l);\n    my $m = $n / 2;\n    if ($n % 2 == 0) {\n       \
  \ return ($l->[$m - 1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n\
  \    }\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    my $median;\n    if ($n % 2 == 0) {\n\
  \        $median = ($l->[$m] + $l->[$m - 1]) / 2;\n    } else {\n        $median\
  \ = $l->[$m];\n    }\n    return $median;\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    my $s = sort { $a <=> $b } @$l;\n  \
  \  return $n % 2 ? $s->[$m] : ($s->[$m-1] + $s->[$m]) / 2;\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    if ($len % 2 == 0)\
  \ {\n        return ($l->[$mid - 1] + $l->[$mid]) / 2;\n    } else {\n        return\
  \ $l->[$mid];\n    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    if ($len % 2 == 0)\
  \ {\n        return ($l->[$mid] + $l->[$mid - 1]) / 2;\n    } else {\n        return\
  \ $l->[$mid];\n    }\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    my $s = sort { $a <=> $b } @$l;\n  \
  \  if ($n % 2) {\n        return $s->[$m];\n    } else {\n        return ($s->[$m\
  \ - 1] + $s->[$m]) / 2;\n    }\n}"
- "    my $len = scalar(@$l);\n    if ($len == 0) {\n        return undef;\n    }\
  \ elsif ($len == 1) {\n        return $l->[0];\n    } elsif ($len % 2 == 0) {\n\
  \        return ($l->[$len/2] + $l->[$len/2-1]) / 2;\n    } else {\n        return\
  \ $l->[$len/2];\n    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    my $median;\n   \
  \ if ($len % 2 == 0) {\n        $median = ($l->[$mid] + $l->[$mid - 1]) / 2;\n \
  \   } else {\n        $median = $l->[$mid];\n    }\n    return $median;\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    my $r = $n % 2;\n    if ($r) {\n   \
  \     return $l->[$m];\n    } else {\n        return ($l->[$m - 1] + $l->[$m]) /\
  \ 2;\n    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    my $median;\n   \
  \ if ($len % 2 == 0) {\n        $median = ($l->[$mid] + $l->[$mid-1]) / 2;\n   \
  \ } else {\n        $median = $l->[$mid];\n    }\n    return $median;\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    my $r = $l->[$m];\n    if ($n % 2 ==\
  \ 0) {\n        my $lm = $l->[$m - 1];\n        $r = ($r + $lm) / 2;\n    }\n  \
  \  return $r;\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    if ($len % 2 == 0)\
  \ {\n        return ($l->[$mid] + $l->[$mid - 1]) / 2;\n    } else {\n        return\
  \ $l->[$mid];\n    }\n}"
- "    my($n) = @$l;\n    my($s) = sort {$a <=> $b} @$l;\n    return ($n % 2) ? $s->[$n/2]\
  \ : ($s->[$n/2-1] + $s->[$n/2])/2;\n}"
- "    my $n = scalar(@$l);\n    my $m = $n / 2;\n    my $median;\n    if ($n % 2\
  \ == 0) {\n        $median = ($l->[$m - 1] + $l->[$m]) / 2;\n    } else {\n    \
  \    $median = $l->[$m];\n    }\n    return $median;\n}"
- "    my $n = scalar(@$l);\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n    \
  \    return ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n\
  \    }\n}"
- "    my $n = @$l;\n    return undef if $n == 0;\n    my $m = int($n/2);\n    if\
  \ ($n % 2 == 0) {\n        return ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n \
  \       return $l->[$m];\n    }\n}"
- "    my $len = @$l;\n    my $mid = int($len / 2);\n    if ($len % 2 == 0) {\n  \
  \      return ($l->[$mid] + $l->[$mid-1]) / 2;\n    } else {\n        return $l->[$mid];\n\
  \    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $n = @$l;\n    return undef if $n == 0;\n    my @s = sort {$a <=> $b} @$l;\n\
  \    if ($n % 2 == 0) {\n        return ($s[$n/2] + $s[$n/2-1])/2;\n    } else {\n\
  \        return $s[$n/2];\n    }\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    my $median;\n    if ($n % 2 == 0) {\n\
  \        $median = ($l->[$m - 1] + $l->[$m]) / 2;\n    } else {\n        $median\
  \ = $l->[$m];\n    }\n    return $median;\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    if ($len % 2 == 0)\
  \ {\n        return ($l->[$mid] + $l->[$mid - 1]) / 2;\n    } else {\n        return\
  \ $l->[$mid];\n    }\n}"
- "    my $n = scalar(@$l);\n    my $m = int($n/2);\n    return ($n % 2) ? $l->[$m]\
  \ : ($l->[$m-1] + $l->[$m])/2;\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $n = @$l;\n    return undef if $n == 0;\n    my $m = int($n/2);\n    my\
  \ @s = sort {$a <=> $b} @$l;\n    return $n % 2 ? $s[$m] : ($s[$m-1] + $s[$m])/2;\n\
  }"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    if ($len % 2 == 0)\
  \ {\n        return ($l->[$mid] + $l->[$mid-1]) / 2;\n    } else {\n        return\
  \ $l->[$mid];\n    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    if ($len % 2 == 0)\
  \ {\n        return ($l->[$mid] + $l->[$mid - 1]) / 2;\n    } else {\n        return\
  \ $l->[$mid];\n    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    if ($len % 2 == 0)\
  \ {\n        return ($l->[$mid] + $l->[$mid - 1]) / 2;\n    } else {\n        return\
  \ $l->[$mid];\n    }\n}"
- "    my $len = @$l;\n    my $mid = int($len / 2);\n    if ($len % 2 == 0) {\n  \
  \      return ($l->[$mid] + $l->[$mid - 1]) / 2;\n    } else {\n        return $l->[$mid];\n\
  \    }\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    if ($n % 2 == 0) {\n        return ($l->[$m\
  \ - 1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $n = @$l;\n    my @s = sort {$a <=> $b} @$l;\n    if ($n % 2) {\n      \
  \  return $s[$n/2];\n    } else {\n        return ($s[$n/2-1] + $s[$n/2])/2;\n \
  \   }\n}"
- "    my $n = scalar(@$l);\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n    \
  \    return ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n\
  \    }\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    my @s = sort { $a <=> $b } @$l;\n  \
  \  if ($n % 2) {\n        return $s[$m];\n    } else {\n        return ($s[$m -\
  \ 1] + $s[$m]) / 2;\n    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    my $median;\n   \
  \ if ($len % 2 == 0) {\n        $median = ($l->[$mid - 1] + $l->[$mid]) / 2;\n \
  \   } else {\n        $median = $l->[$mid];\n    }\n    return $median;\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    if ($len % 2 == 0)\
  \ {\n        return ($l->[$mid - 1] + $l->[$mid]) / 2;\n    } else {\n        return\
  \ $l->[$mid];\n    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    my $median;\n   \
  \ if ($len % 2 == 0) {\n        $median = ($l->[$mid] + $l->[$mid-1]) / 2;\n   \
  \ } else {\n        $median = $l->[$mid];\n    }\n    return $median;\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my @sorted = sort {$a <=> $b} @$l;\n    my $n = @sorted;\n    if ($n % 2 ==\
  \ 0) {\n        return ($sorted[$n/2] + $sorted[$n/2 - 1]) / 2;\n    } else {\n\
  \        return $sorted[$n/2];\n    }\n}"
- "    my $n = @$l;\n    if ($n == 0) {\n        return undef;\n    } elsif ($n ==\
  \ 1) {\n        return $l->[0];\n    } elsif ($n % 2 == 0) {\n        return ($l->[$n/2-1]\
  \ + $l->[$n/2]) / 2;\n    } else {\n        return $l->[$n/2];\n    }\n}"
- "    my $n = scalar(@$l);\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n    \
  \    return ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n\
  \    }\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    my $s = sort { $a <=> $b } @$l;\n  \
  \  if ($n % 2) {\n        return $s->[$m];\n    } else {\n        return ($s->[$m\
  \ - 1] + $s->[$m]) / 2;\n    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    my $median;\n   \
  \ if ($len % 2 == 0) {\n        $median = ($l->[$mid] + $l->[$mid - 1]) / 2;\n \
  \   } else {\n        $median = $l->[$mid];\n    }\n    return $median;\n}"
- "    my $n = @$l;\n    if ($n % 2 == 0) {\n        return ($l->[$n/2] + $l->[$n/2-1])\
  \ / 2;\n    } else {\n        return $l->[$n/2];\n    }\n}"
- "    my $len = @$l;\n    my $mid = int($len / 2);\n    if ($len % 2 == 0) {\n  \
  \      return ($l->[$mid] + $l->[$mid-1]) / 2;\n    } else {\n        return $l->[$mid];\n\
  \    }\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    my @s = sort { $a <=> $b } @$l;\n  \
  \  if ($n % 2) {\n        return $s[$m];\n    } else {\n        return ($s[$m-1]\
  \ + $s[$m]) / 2;\n    }\n}"
- "    my @sorted = sort {$a <=> $b} @$l;\n    my $n = @sorted;\n    if ($n % 2 ==\
  \ 0) {\n        return ($sorted[$n/2] + $sorted[$n/2 - 1]) / 2;\n    } else {\n\
  \        return $sorted[$n/2];\n    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    my $median;\n   \
  \ if ($len % 2 == 0) {\n        $median = ($l->[$mid - 1] + $l->[$mid]) / 2;\n \
  \   } else {\n        $median = $l->[$mid];\n    }\n    return $median;\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $n = scalar(@$l);\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n    \
  \    return ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n\
  \    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    if ($len % 2 == 0)\
  \ {\n        return ($l->[$mid - 1] + $l->[$mid]) / 2;\n    } else {\n        return\
  \ $l->[$mid];\n    }\n}"
- "    my $n = scalar(@$l);\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n    \
  \    return ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n\
  \    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my @sorted = sort {$a <=> $b} @$l;\n    my $n = @sorted;\n    return ($sorted[$n/2]\
  \ + $sorted[($n-1)/2]) / 2;\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    my $median;\n   \
  \ if ($len % 2 == 0) {\n        $median = ($l->[$mid] + $l->[$mid - 1]) / 2;\n \
  \   } else {\n        $median = $l->[$mid];\n    }\n    return $median;\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    if ($len % 2 == 0)\
  \ {\n        return ($l->[$mid] + $l->[$mid - 1]) / 2;\n    } else {\n        return\
  \ $l->[$mid];\n    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    if ($n % 2 == 0) {\n        return ($l->[$m\
  \ - 1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $len = scalar(@$l);\n    if ($len == 0) {\n        return undef;\n    }\n\
  \    my $mid = int($len / 2);\n    my @sorted = sort {$a <=> $b} @$l;\n    if ($len\
  \ % 2 == 0) {\n        return ($sorted[$mid - 1] + $sorted[$mid]) / 2;\n    } else\
  \ {\n        return $sorted[$mid];\n    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $len = scalar(@$l);\n    my $median;\n    if ($len % 2 == 0) {\n       \
  \ $median = ($l->[$len/2] + $l->[$len/2 - 1]) / 2;\n    } else {\n        $median\
  \ = $l->[$len/2];\n    }\n    return $median;\n}"
- "    my $n = @$l;\n    my $m = $n / 2;\n    my $s = sort { $a <=> $b } @$l;\n  \
  \  return $n % 2 ? $s->[$m] : ($s->[$m - 1] + $s->[$m]) / 2;\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m] + $l->[$m-1])/2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    if ($len % 2 == 0)\
  \ {\n        return ($l->[$mid] + $l->[$mid - 1]) / 2;\n    } else {\n        return\
  \ $l->[$mid];\n    }\n}"
- "    my $len = scalar(@$l);\n    if ($len == 0) {\n        return undef;\n    }\n\
  \    my $m = $len / 2;\n    my $s = sort { $a <=> $b } @$l;\n    if ($len % 2 ==\
  \ 0) {\n        return ($s->[$m - 1] + $s->[$m]) / 2;\n    } else {\n        return\
  \ $s->[$m];\n    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m] + $l->[$m-1])/2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $len = @$l;\n    my $mid = int($len / 2);\n    if ($len % 2 == 0) {\n  \
  \      return ($l->[$mid] + $l->[$mid - 1]) / 2;\n    } else {\n        return $l->[$mid];\n\
  \    }\n}"
- "    my $n = @$l;\n    return undef if $n == 0;\n    my @s = sort {$a <=> $b} @$l;\n\
  \    if ($n % 2 == 0) {\n        return ($s[$n/2-1] + $s[$n/2]) / 2;\n    } else\
  \ {\n        return $s[$n/2];\n    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    if ($len % 2 == 0)\
  \ {\n        return ($l->[$mid] + $l->[$mid - 1]) / 2;\n    } else {\n        return\
  \ $l->[$mid];\n    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $n = @$l;\n    my @s = sort {$a <=> $b} @$l;\n    if ($n % 2) {\n      \
  \  return $s[$n/2];\n    } else {\n        return ($s[$n/2-1] + $s[$n/2])/2;\n \
  \   }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    if ($len % 2 == 0)\
  \ {\n        return ($l->[$mid] + $l->[$mid - 1]) / 2;\n    } else {\n        return\
  \ $l->[$mid];\n    }\n}"
- "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n        return\
  \ ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}"
- "    my $n = @$l;\n    if ($n % 2 == 0) {\n        return ($l->[$n/2] + $l->[$n/2-1])\
  \ / 2;\n    } else {\n        return $l->[$n/2];\n    }\n}"
- "    my $len = @$l;\n    my $mid = int($len / 2);\n    if ($len % 2 == 0) {\n  \
  \      return ($l->[$mid] + $l->[$mid - 1]) / 2;\n    } else {\n        return $l->[$mid];\n\
  \    }\n}"
- "    my $n = scalar(@$l);\n    my $m = $n / 2;\n    if ($n % 2 == 0) {\n       \
  \ return ($l->[$m] + $l->[$m-1]) / 2;\n    } else {\n        return $l->[$m];\n\
  \    }\n}"
- "    my $n = scalar(@$l);\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n    \
  \    return ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n\
  \    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    if ($len % 2 == 0)\
  \ {\n        return ($l->[$mid] + $l->[$mid - 1]) / 2;\n    } else {\n        return\
  \ $l->[$mid];\n    }\n}"
- "    my $n = scalar(@$l);\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n    \
  \    return ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n        return $l->[$m];\n\
  \    }\n}"
- "    my $len = scalar(@$l);\n    my $mid = int($len / 2);\n    if ($len % 2 == 0)\
  \ {\n        return ($l->[$mid] + $l->[$mid - 1]) / 2;\n    } else {\n        return\
  \ $l->[$mid];\n    }\n}"
- "    my $len = scalar(@$l);\n    my $median = 0;\n    my $sorted = [sort {$a <=>\
  \ $b} @$l];\n    if ($len % 2 == 0) {\n        $median = ($sorted->[$len/2] + $sorted->[$len/2\
  \ - 1]) / 2;\n    } else {\n        $median = $sorted->[$len/2];\n    }\n    return\
  \ $median;\n}"
- "    my $len = scalar(@$l);\n    return undef if $len == 0;\n    my $sorted = [sort\
  \ {$a <=> $b} @$l];\n    if ($len % 2 == 0) {\n        return ($sorted->[$len/2]\
  \ + $sorted->[$len/2 - 1]) / 2;\n    } else {\n        return $sorted->[$len/2];\n\
  \    }\n}"
language: pl
name: HumanEval_47_median
prompt: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4, 5])\n\
  # 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\nsub median {\n    my($l) =\
  \ @_;\n"
stop_tokens:
- '

  sub'
- '

  #'
- '


  '
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&median;\n\
  \        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),3)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10, 4,\
  \ 6, 1000, 10, 20]),8.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->([5]),5)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 5]),5.5)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8,\
  \ 1, 3, 9, 9, 2, 7]),7)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n}\n\ntesthumaneval();"
