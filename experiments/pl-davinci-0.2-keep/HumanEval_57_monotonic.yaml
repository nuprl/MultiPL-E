completions:
- "    my $i = 0;\n    my $j = @$l - 1;\n    my $inc = $l->[$i] < $l->[$j];\n    while\
  \ ($i < $j) {\n        return 0 if $inc && $l->[$i] > $l->[$i+1];\n        return\
  \ 0 if !$inc && $l->[$i] < $l->[$i+1];\n        $i++;\n    }\n    return 1;\n}"
- "    my $i = 0;\n    my $n = @$l;\n    my $inc = 0;\n    my $dec = 0;\n    while\
  \ ($i < $n - 1) {\n        if ($l->[$i] < $l->[$i + 1]) {\n            $inc = 1;\n\
  \        }\n        if ($l->[$i] > $l->[$i + 1]) {\n            $dec = 1;\n    \
  \    }\n        $i++;\n    }\n    return $inc == 0 || $dec == 0;\n}"
- "    my($i, $j);\n    my($n) = @$l;\n    for($i = 0; $i < $n - 1; $i++) {\n\t$j\
  \ = $i + 1;\n\tif($l->[$i] < $l->[$j]) {\n\t    return 0 if($l->[$j] < $l->[$i]);\n\
  \t}\n\telsif($l->[$i] > $l->[$j]) {\n\t    return 0 if($l->[$j] > $l->[$i]);\n\t\
  }\n    }\n    return 1;\n}"
- "    my($i);\n    my($prev);\n    my($dir);\n    for $i (0..$#$l) {\n\tif (defined($prev))\
  \ {\n\t    if ($l->[$i] > $prev) {\n\t\tif ($dir && $dir < 0) {\n\t\t    return\
  \ 0;\n\t\t}\n\t\t$dir = 1;\n\t    } elsif ($l->[$i] < $prev) {\n\t\tif ($dir &&\
  \ $dir > 0) {\n\t\t    return 0;\n\t\t}\n\t\t$dir = -1;\n\t    }\n\t}\n\t$prev =\
  \ $l->[$i];\n    }\n    return 1;\n}"
- "    my($i, $j);\n    my($n) = scalar(@$l);\n    my($inc) = 0;\n    my($dec) = 0;\n\
  \    for($i = 0; $i < $n-1; $i++) {\n\t$inc++ if ($l->[$i] < $l->[$i+1]);\n\t$dec++\
  \ if ($l->[$i] > $l->[$i+1]);\n    }\n    return ($inc == $n-1 || $dec == $n-1);\n\
  }"
- "    my $n = @$l;\n    return 1 if $n <= 1;\n    my $inc = $l->[0] < $l->[1];\n\
  \    my $dec = $l->[0] > $l->[1];\n    for (my $i = 1; $i < $n - 1; $i++) {\n  \
  \      my $inc2 = $l->[$i] < $l->[$i + 1];\n        my $dec2 = $l->[$i] > $l->[$i\
  \ + 1];\n        return 0 if $inc && $dec2;\n        return 0 if $dec && $inc2;\n\
  \        $inc = $inc2;\n        $dec = $dec2;\n    }\n    return 1;\n}"
- "    my($i, $j, $k);\n    my($n) = scalar(@$l);\n    if ($n < 2) {\n\treturn 1;\n\
  \    }\n    $i = $l->[0];\n    $j = $l->[1];\n    if ($i == $j) {\n\treturn 1;\n\
  \    }\n    if ($i < $j) {\n\tfor ($k = 2; $k < $n; $k++) {\n\t    if ($l->[$k]\
  \ < $l->[$k - 1]) {\n\t\treturn 0;\n\t    }\n\t}\n    } else {\n\tfor ($k = 2; $k\
  \ < $n; $k++) {\n\t    if ($l->[$k] > $l->[$k - 1]) {\n\t\treturn 0;\n\t    }\n\t\
  }\n    }\n    return 1;\n}"
- "    my $inc = 1;\n    my $dec = 1;\n    for (my $i = 1; $i < @$l; $i++) {\n   \
  \     $inc = 0 if $l->[$i] < $l->[$i-1];\n        $dec = 0 if $l->[$i] > $l->[$i-1];\n\
  \    }\n    return $inc || $dec;\n}"
- "    my $i;\n    for ($i = 1; $i < @$l; $i++) {\n        return 0 if $l->[$i] <\
  \ $l->[$i-1];\n    }\n    return 1;\n}"
- "    my $i = 0;\n    my $n = @$l;\n    while ($i < $n - 1) {\n        if ($l->[$i]\
  \ < $l->[$i + 1]) {\n            last;\n        }\n        $i++;\n    }\n    if\
  \ ($i == $n - 1) {\n        return 1;\n    }\n    while ($i < $n - 1) {\n      \
  \  if ($l->[$i] > $l->[$i + 1]) {\n            return 0;\n        }\n        $i++;\n\
  \    }\n    return 1;\n}"
- "    my $i;\n    my $prev = $l->[0];\n    my $increasing = 0;\n    for ($i = 1;\
  \ $i < @$l; $i++) {\n        if ($l->[$i] > $prev) {\n            if ($increasing\
  \ == -1) {\n                return 0;\n            }\n            $increasing =\
  \ 1;\n        } elsif ($l->[$i] < $prev) {\n            if ($increasing == 1) {\n\
  \                return 0;\n            }\n            $increasing = -1;\n     \
  \   }\n        $prev = $l->[$i];\n    }\n    return 1;\n}"
- "    my $prev = $l->[0];\n    my $increasing = 1;\n    for my $i (1..$#$l) {\n \
  \       if ($l->[$i] > $prev) {\n            $increasing = 1;\n        } elsif ($l->[$i]\
  \ < $prev) {\n            $increasing = 0;\n        } else {\n            return\
  \ 0;\n        }\n        $prev = $l->[$i];\n    }\n    return $increasing;\n}"
- "    my($prev) = $l->[0];\n    my($increasing) = 1;\n    my($decreasing) = 1;\n\
  \    for my $i (1 .. $#$l) {\n        if ($l->[$i] < $prev) {\n            $increasing\
  \ = 0;\n        }\n        if ($l->[$i] > $prev) {\n            $decreasing = 0;\n\
  \        }\n        $prev = $l->[$i];\n    }\n    return $increasing || $decreasing;\n\
  }"
- "    my $i = 0;\n    my $inc = 0;\n    my $dec = 0;\n    while ($i < @$l - 1) {\n\
  \        if ($l->[$i] < $l->[$i + 1]) {\n            $inc = 1;\n        } elsif\
  \ ($l->[$i] > $l->[$i + 1]) {\n            $dec = 1;\n        }\n        $i++;\n\
  \    }\n    return $inc + $dec == 1;\n}"
- "    my $i;\n    my $prev = $l->[0];\n    my $inc = 0;\n    my $dec = 0;\n    for\
  \ ($i = 1; $i < @$l; $i++) {\n        if ($l->[$i] > $prev) {\n            $inc\
  \ = 1;\n        } elsif ($l->[$i] < $prev) {\n            $dec = 1;\n        }\n\
  \        $prev = $l->[$i];\n    }\n    return ($inc == 0 || $dec == 0);\n}"
- "    my $i = 0;\n    my $n = @$l;\n    my $d = 0;\n    while ($i < $n - 1) {\n \
  \       my $d1 = $l->[$i + 1] - $l->[$i];\n        if ($d == 0) {\n            $d\
  \ = $d1;\n        } elsif ($d1 * $d < 0) {\n            return 0;\n        }\n \
  \       $i++;\n    }\n    return 1;\n}"
- "    my $i = 0;\n    my $len = scalar(@$l);\n    my $inc = 0;\n    my $dec = 0;\n\
  \    while ($i < $len - 1) {\n        if ($l->[$i] < $l->[$i + 1]) {\n         \
  \   $inc = 1;\n        }\n        if ($l->[$i] > $l->[$i + 1]) {\n            $dec\
  \ = 1;\n        }\n        if ($inc && $dec) {\n            return 0;\n        }\n\
  \        $i++;\n    }\n    return 1;\n}"
- "    my($i, $n, $inc, $dec);\n    $n = scalar(@$l);\n    if ($n < 2) {\n\treturn\
  \ 1;\n    }\n    $inc = $dec = 1;\n    for ($i = 1; $i < $n; $i++) {\n\tif ($l->[$i]\
  \ > $l->[$i-1]) {\n\t    $dec = 0;\n\t}\n\tif ($l->[$i] < $l->[$i-1]) {\n\t    $inc\
  \ = 0;\n\t}\n    }\n    return $inc || $dec;\n}"
- "    my($i, $j);\n    my($n) = scalar(@$l);\n    for ($i = 0; $i < $n - 1; $i++)\
  \ {\n\tfor ($j = $i + 1; $j < $n; $j++) {\n\t    if ($l->[$i] < $l->[$j]) {\n\t\t\
  return 0 if $l->[$i] > $l->[$j];\n\t    }\n\t    else {\n\t\treturn 0 if $l->[$i]\
  \ < $l->[$j];\n\t    }\n\t}\n    }\n    return 1;\n}"
- "    my $i = 0;\n    my $n = @$l;\n    while ($i < $n - 1) {\n        if ($l->[$i]\
  \ == $l->[$i + 1]) {\n            $i++;\n        } elsif ($l->[$i] < $l->[$i + 1])\
  \ {\n            return 0 if any { $_ < $l->[$i] } @$l[$i + 1 .. $n - 1];\n    \
  \        return 1;\n        } else {\n            return 0 if any { $_ > $l->[$i]\
  \ } @$l[$i + 1 .. $n - 1];\n            return 1;\n        }\n    }\n    return\
  \ 1;\n}"
- "    my $inc = 0;\n    my $dec = 0;\n    my $prev = $l->[0];\n    for my $i (1..$#$l)\
  \ {\n        if ($l->[$i] > $prev) {\n            $inc = 1;\n        }\n       \
  \ if ($l->[$i] < $prev) {\n            $dec = 1;\n        }\n        $prev = $l->[$i];\n\
  \    }\n    return $inc && !$dec || !$inc && $dec;\n}"
- "    my($prev) = $l->[0];\n    my($increasing) = 1;\n    for my $i (1 .. $#$l) {\n\
  \        if ($prev < $l->[$i]) {\n            $increasing = 1;\n        } elsif\
  \ ($prev > $l->[$i]) {\n            $increasing = 0;\n        }\n        $prev =\
  \ $l->[$i];\n    }\n    return $increasing;\n}"
- "    my $i;\n    for ($i = 1; $i < @$l; $i++) {\n        if ($l->[$i] > $l->[$i-1])\
  \ {\n            last;\n        }\n    }\n    if ($i == @$l) {\n        return 1;\n\
  \    }\n    for ($i = 1; $i < @$l; $i++) {\n        if ($l->[$i] < $l->[$i-1]) {\n\
  \            return 0;\n        }\n    }\n    return 1;\n}"
- "    my $i = 0;\n    my $n = @$l;\n    while ($i < $n-1) {\n        if ($l->[$i]\
  \ > $l->[$i+1]) {\n            last;\n        }\n        $i++;\n    }\n    if ($i\
  \ == $n-1) {\n        return 1;\n    }\n    $i = 0;\n    while ($i < $n-1) {\n \
  \       if ($l->[$i] < $l->[$i+1]) {\n            last;\n        }\n        $i++;\n\
  \    }\n    if ($i == $n-1) {\n        return 1;\n    }\n    return 0;\n}"
- "    my($i, $d);\n    for ($i = 1; $i < @$l; $i++) {\n        $d = $l->[$i] - $l->[$i-1];\n\
  \        return 0 if $d * $d < 0;\n    }\n    return 1;\n}"
- "    my $i = 0;\n    my $len = scalar(@$l);\n    my $inc = 0;\n    my $dec = 0;\n\
  \    while ($i < $len - 1) {\n        if ($l->[$i] < $l->[$i + 1]) {\n         \
  \   $inc = 1;\n        }\n        if ($l->[$i] > $l->[$i + 1]) {\n            $dec\
  \ = 1;\n        }\n        if ($inc && $dec) {\n            return 0;\n        }\n\
  \        $i++;\n    }\n    return 1;\n}"
- "    my $n = @$l;\n    my $inc = $n > 1 && $l->[0] < $l->[1];\n    my $dec = $n\
  \ > 1 && $l->[0] > $l->[1];\n    for (my $i = 1; $i < $n; $i++) {\n        return\
  \ 0 if $inc && $l->[$i-1] > $l->[$i];\n        return 0 if $dec && $l->[$i-1] <\
  \ $l->[$i];\n    }\n    return 1;\n}"
- "    my $i;\n    my $n = @$l;\n    my $inc = 0;\n    my $dec = 0;\n    for($i =\
  \ 1; $i < $n; $i++) {\n\tif($l->[$i] > $l->[$i-1]) {\n\t    $inc = 1;\n\t}\n\tif($l->[$i]\
  \ < $l->[$i-1]) {\n\t    $dec = 1;\n\t}\n\tif($inc && $dec) {\n\t    return 0;\n\
  \t}\n    }\n    return 1;\n}"
- "    my($i, $d, $n);\n    $n = scalar(@$l);\n    for($i = 1; $i < $n; $i++) {\n\t\
  $d = $$l[$i] - $$l[$i-1];\n\tif($d == 0) {\n\t    return 0;\n\t}\n\tif($i == 1)\
  \ {\n\t    $d = $d > 0 ? 1 : -1;\n\t}\n\telsif($d * $d != $d * $d) {\n\t    return\
  \ 0;\n\t}\n    }\n    return 1;\n}"
- "    my $i = 0;\n    my $n = @$l;\n    my $inc = 0;\n    my $dec = 0;\n    while\
  \ ($i < $n - 1) {\n        if ($l->[$i] < $l->[$i + 1]) {\n            $inc = 1;\n\
  \        }\n        if ($l->[$i] > $l->[$i + 1]) {\n            $dec = 1;\n    \
  \    }\n        $i++;\n    }\n    return $inc + $dec == 1;\n}"
- "    my $n = @$l;\n    return 1 if $n <= 1;\n    my $inc = $l->[0] < $l->[1];\n\
  \    for (my $i = 1; $i < $n; $i++) {\n        my $inc2 = $l->[$i-1] < $l->[$i];\n\
  \        return 0 if $inc != $inc2;\n    }\n    return 1;\n}"
- "    my $i;\n    my $inc = 0;\n    my $dec = 0;\n    for ($i = 1; $i < @$l; $i++)\
  \ {\n\tif ($l->[$i] > $l->[$i-1]) {\n\t    $inc = 1;\n\t} elsif ($l->[$i] < $l->[$i-1])\
  \ {\n\t    $dec = 1;\n\t}\n\tif ($inc && $dec) {\n\t    return 0;\n\t}\n    }\n\
  \    return 1;\n}"
- "    my($i, $j);\n    my($n) = scalar(@$l);\n    for ($i = 0; $i < $n - 1; $i++)\
  \ {\n\t$j = $i + 1;\n\tif ($l->[$i] > $l->[$j]) {\n\t    return 0 if $i > 0;\n\t\
  \    while ($j < $n - 1 && $l->[$j] > $l->[$j + 1]) {\n\t\t$j++;\n\t    }\n\t  \
  \  return 0 if $j == $n - 1;\n\t}\n\telsif ($l->[$i] < $l->[$j]) {\n\t    return\
  \ 0 if $i > 0;\n\t    while ($j < $n - 1 && $l->[$j] < $l->[$j + 1]) {\n\t\t$j++;\n\
  \t    }\n\t    return 0 if $j == $n - 1;\n\t}\n    }\n    return 1;\n}"
- "    my $i = 0;\n    my $n = @$l;\n    my $inc = 0;\n    my $dec = 0;\n    while\
  \ ($i < $n - 1) {\n        if ($l->[$i] < $l->[$i + 1]) {\n            $inc = 1;\n\
  \        }\n        if ($l->[$i] > $l->[$i + 1]) {\n            $dec = 1;\n    \
  \    }\n        if ($inc && $dec) {\n            return 0;\n        }\n        $i++;\n\
  \    }\n    return 1;\n}"
- "    my($i, $d);\n    for($i = 1; $i < @$l; $i++) {\n        $d = $l->[$i] - $l->[$i-1];\n\
  \        return 0 if $d * ($l->[$i] - $l->[$i+1]) < 0;\n    }\n    return 1;\n}"
- "    my $i;\n    my $prev = $l->[0];\n    my $increasing = 0;\n    my $decreasing\
  \ = 0;\n    for ($i = 1; $i < @$l; $i++) {\n\tif ($l->[$i] > $prev) {\n\t    $increasing\
  \ = 1;\n\t} elsif ($l->[$i] < $prev) {\n\t    $decreasing = 1;\n\t}\n\t$prev = $l->[$i];\n\
  \    }\n    return ($increasing && !$decreasing) || (!$increasing && $decreasing);\n\
  }"
- "    my $n = @$l;\n    return 1 if $n <= 1;\n    my $inc = $l->[0] < $l->[1];\n\
  \    for (my $i = 1; $i < $n; $i++) {\n        return 0 if $inc != ($l->[$i-1] <\
  \ $l->[$i]);\n    }\n    return 1;\n}"
- "    my $i = 0;\n    my $n = scalar(@$l);\n    my $inc = 0;\n    my $dec = 0;\n\
  \    while ($i < $n - 1) {\n        if ($l->[$i] < $l->[$i + 1]) {\n           \
  \ $inc = 1;\n        }\n        if ($l->[$i] > $l->[$i + 1]) {\n            $dec\
  \ = 1;\n        }\n        if ($inc && $dec) {\n            return 0;\n        }\n\
  \        $i++;\n    }\n    return 1;\n}"
- "    my $i = 0;\n    my $n = @$l;\n    while ($i < $n-1) {\n        if ($l->[$i]\
  \ < $l->[$i+1]) {\n            while ($i < $n-1 && $l->[$i] < $l->[$i+1]) {\n  \
  \              $i++;\n            }\n            return 0 if $i < $n-1;\n      \
  \  }\n        elsif ($l->[$i] > $l->[$i+1]) {\n            while ($i < $n-1 && $l->[$i]\
  \ > $l->[$i+1]) {\n                $i++;\n            }\n            return 0 if\
  \ $i < $n-1;\n        }\n        else {\n            $i++;\n        }\n    }\n \
  \   return 1;\n}"
- "    my $i = 0;\n    my $inc = 0;\n    my $dec = 0;\n    while ($i < @$l - 1) {\n\
  \        if ($l->[$i] < $l->[$i + 1]) {\n            $inc = 1;\n        }\n    \
  \    if ($l->[$i] > $l->[$i + 1]) {\n            $dec = 1;\n        }\n        $i++;\n\
  \    }\n    return $inc && !$dec || !$inc && $dec;\n}"
- "    my $i = 0;\n    my $j = 1;\n    my $n = scalar(@$l);\n    while ($j < $n) {\n\
  \        if ($l->[$i] == $l->[$j]) {\n            $j++;\n        } elsif ($l->[$i]\
  \ < $l->[$j]) {\n            while ($j < $n && $l->[$j-1] <= $l->[$j]) {\n     \
  \           $j++;\n            }\n            return 0 if $j < $n;\n        } else\
  \ {\n            while ($j < $n && $l->[$j-1] >= $l->[$j]) {\n                $j++;\n\
  \            }\n            return 0 if $j < $n;\n        }\n    }\n    return 1;\n\
  }"
- "    my($i, $j, $k);\n    my($n) = scalar(@$l);\n    for ($i = 0; $i < $n - 1; $i++)\
  \ {\n\t$j = $l->[$i];\n\t$k = $l->[$i + 1];\n\tif ($j < $k) {\n\t    last;\n\t}\n\
  \tif ($j > $k) {\n\t    return 0;\n\t}\n    }\n    for (; $i < $n - 1; $i++) {\n\
  \t$j = $l->[$i];\n\t$k = $l->[$i + 1];\n\tif ($j > $k) {\n\t    return 0;\n\t}\n\
  \    }\n    return 1;\n}"
- "    my $inc = 0;\n    my $dec = 0;\n    my $prev = $l->[0];\n    for my $i (1..$#$l)\
  \ {\n        if ($l->[$i] > $prev) {\n            $inc = 1;\n        }\n       \
  \ if ($l->[$i] < $prev) {\n            $dec = 1;\n        }\n        $prev = $l->[$i];\n\
  \    }\n    return $inc && !$dec || !$inc && $dec;\n}"
- "    my($i, $j);\n    for ($i = 0; $i < @$l - 1; $i++) {\n        $j = $i + 1;\n\
  \        if ($l->[$i] < $l->[$j]) {\n            return 0 if $i > 0 && $l->[$i -\
  \ 1] > $l->[$i];\n        }\n        elsif ($l->[$i] > $l->[$j]) {\n           \
  \ return 0 if $i > 0 && $l->[$i - 1] < $l->[$i];\n        }\n    }\n    return 1;\n\
  }"
- "    my($prev) = $l->[0];\n    my($increasing) = 1;\n    for my $i (1 .. $#$l) {\n\
  \        if ($l->[$i] > $prev) {\n            if (!$increasing) {\n            \
  \    return 0;\n            }\n        } elsif ($l->[$i] < $prev) {\n          \
  \  if ($increasing) {\n                $increasing = 0;\n            }\n       \
  \ } else {\n            return 0;\n        }\n        $prev = $l->[$i];\n    }\n\
  \    return 1;\n}"
- "    my $prev = $l->[0];\n    my $increasing = 1;\n    for my $i (1..$#$l) {\n \
  \       my $curr = $l->[$i];\n        if ($curr > $prev) {\n            $increasing\
  \ = 1;\n        } elsif ($curr < $prev) {\n            $increasing = 0;\n      \
  \  } else {\n            # do nothing\n        }\n        $prev = $curr;\n    }\n\
  \    return $increasing;\n}"
- "    my $n = @$l;\n    my $i = 0;\n    my $inc = 0;\n    my $dec = 0;\n    while\
  \ ($i < $n-1) {\n        if ($l->[$i] < $l->[$i+1]) {\n            $inc = 1;\n \
  \       }\n        if ($l->[$i] > $l->[$i+1]) {\n            $dec = 1;\n       \
  \ }\n        $i++;\n    }\n    return ($inc == 0 || $dec == 0);\n}"
- "    my($i, $j);\n    for($i = 0; $i < @$l - 1; $i++) {\n        $j = $i + 1;\n\
  \        return 0 if $l->[$i] == $l->[$j];\n    }\n    return 1;\n}"
- "    my $i = 0;\n    my $inc = 0;\n    my $dec = 0;\n    while ($i < @$l - 1) {\n\
  \        if ($l->[$i] < $l->[$i + 1]) {\n            $inc = 1;\n        }\n    \
  \    if ($l->[$i] > $l->[$i + 1]) {\n            $dec = 1;\n        }\n        $i++;\n\
  \    }\n    return $inc + $dec == 1;\n}"
- "    my $i = 0;\n    my $j = 1;\n    my $inc = 0;\n    my $dec = 0;\n    while ($j\
  \ < @$l) {\n        if ($l->[$i] < $l->[$j]) {\n            $inc++;\n        } elsif\
  \ ($l->[$i] > $l->[$j]) {\n            $dec++;\n        }\n        $i++;\n     \
  \   $j++;\n    }\n    return ($inc == 0 || $dec == 0);\n}"
- "    my $i = 0;\n    my $n = @$l;\n    my $inc = 0;\n    my $dec = 0;\n    while\
  \ ($i < $n - 1) {\n        if ($l->[$i] < $l->[$i + 1]) {\n            $inc = 1;\n\
  \        }\n        if ($l->[$i] > $l->[$i + 1]) {\n            $dec = 1;\n    \
  \    }\n        if ($inc && $dec) {\n            return 0;\n        }\n        $i++;\n\
  \    }\n    return 1;\n}"
- "    my $i = 0;\n    my $n = @$l;\n    my $inc = 0;\n    my $dec = 0;\n    while\
  \ ($i < $n - 1) {\n        if ($l->[$i] < $l->[$i + 1]) {\n            $inc = 1;\n\
  \        }\n        if ($l->[$i] > $l->[$i + 1]) {\n            $dec = 1;\n    \
  \    }\n        $i++;\n    }\n    return $inc == 0 || $dec == 0;\n}"
- "    my($i, $n, $d);\n    $n = @$l;\n    for ($i = 1; $i < $n; $i++) {\n\t$d = $l->[$i]\
  \ - $l->[$i-1];\n\tif ($d == 0) {\n\t    return 0;\n\t}\n\tif ($i > 1 && $d * ($l->[$i-1]\
  \ - $l->[$i-2]) < 0) {\n\t    return 0;\n\t}\n    }\n    return 1;\n}"
- "    my($i, $j);\n    for ($i = 0; $i < $#$l; $i++) {\n\t$j = $i + 1;\n\treturn\
  \ 0 if ($l->[$i] < $l->[$j] && $l->[$j] < $l->[$i]);\n\treturn 0 if ($l->[$i] >\
  \ $l->[$j] && $l->[$j] > $l->[$i]);\n    }\n    return 1;\n}"
- "    my $i;\n    my $n = @$l;\n    my $increasing = $l->[0] < $l->[1];\n    for\
  \ ($i = 1; $i < $n - 1; $i++) {\n        my $increasing_now = $l->[$i] < $l->[$i\
  \ + 1];\n        return 0 if $increasing_now != $increasing;\n    }\n    return\
  \ 1;\n}"
- "    my $prev = $l->[0];\n    my $inc = 0;\n    my $dec = 0;\n    for my $i (1..$#$l)\
  \ {\n        if ($l->[$i] > $prev) {\n            $inc = 1;\n        } elsif ($l->[$i]\
  \ < $prev) {\n            $dec = 1;\n        }\n        $prev = $l->[$i];\n    }\n\
  \    return $inc + $dec == 1;\n}"
- "    my $i = 0;\n    my $j = 1;\n    my $inc = 0;\n    my $dec = 0;\n    while ($j\
  \ < @$l) {\n        if ($l->[$i] < $l->[$j]) {\n            $inc = 1;\n        }\n\
  \        if ($l->[$i] > $l->[$j]) {\n            $dec = 1;\n        }\n        $i++;\n\
  \        $j++;\n    }\n    return $inc == 0 || $dec == 0;\n}"
- "    my $i = 0;\n    my $j = 1;\n    my $n = @$l;\n    my $inc = $l->[$i] < $l->[$j];\n\
  \    while ($j < $n) {\n        return 0 if $inc != ($l->[$i] < $l->[$j]);\n   \
  \     $i++;\n        $j++;\n    }\n    return 1;\n}"
- "    my $i = 0;\n    my $j = $#$l;\n    my $inc = 0;\n    my $dec = 0;\n    while\
  \ ($i < $j) {\n        if ($l->[$i] < $l->[$i+1]) {\n            $inc++;\n     \
  \   }\n        if ($l->[$i] > $l->[$i+1]) {\n            $dec++;\n        }\n  \
  \      $i++;\n    }\n    return ($inc == $#$l || $dec == $#$l);\n}"
- "    my $inc = 0;\n    my $dec = 0;\n    for (my $i = 1; $i < @$l; $i++) {\n   \
  \     if ($l->[$i] > $l->[$i-1]) {\n            $inc = 1;\n        }\n        if\
  \ ($l->[$i] < $l->[$i-1]) {\n            $dec = 1;\n        }\n    }\n    return\
  \ $inc == 0 || $dec == 0;\n}"
- "    my($i, $inc);\n    for ($i = 1; $i < @$l; $i++) {\n\tif ($l->[$i] == $l->[$i-1])\
  \ {\n\t    next;\n\t}\n\tif (!defined($inc)) {\n\t    $inc = $l->[$i] > $l->[$i-1];\n\
  \t}\n\tif ($inc != ($l->[$i] > $l->[$i-1])) {\n\t    return 0;\n\t}\n    }\n   \
  \ return 1;\n}"
- "    my $inc = 1;\n    my $dec = 1;\n    for (my $i = 1; $i < @$l; $i++) {\n   \
  \     $inc = 0 if $l->[$i] < $l->[$i-1];\n        $dec = 0 if $l->[$i] > $l->[$i-1];\n\
  \    }\n    return $inc || $dec;\n}"
- "    my($i, $j);\n    my($n) = scalar(@$l);\n    for ($i = 0; $i < $n - 1; $i++)\
  \ {\n\t$j = $i + 1;\n\treturn 0 if ($l->[$i] < $l->[$j]);\n    }\n    return 1;\n\
  }"
- "    my($i, $j, $k, $n);\n    $n = scalar(@$l);\n    if ($n <= 1) {\n\treturn 1;\n\
  \    }\n    for ($i = 0; $i < $n - 1; $i++) {\n\t$j = $l->[$i];\n\t$k = $l->[$i\
  \ + 1];\n\tif ($j == $k) {\n\t    next;\n\t}\n\tif ($j < $k) {\n\t    last;\n\t\
  }\n\tif ($j > $k) {\n\t    last;\n\t}\n    }\n    if ($i == $n - 1) {\n\treturn\
  \ 1;\n    }\n    for ($i = $i + 1; $i < $n - 1; $i++) {\n\t$j = $l->[$i];\n\t$k\
  \ = $l->[$i + 1];\n\tif ($j == $k) {\n\t    next;\n\t}\n\tif ($j < $k) {\n\t   \
  \ return 0;\n\t}\n\tif ($j > $k) {\n\t    return 0;\n\t}\n    }\n    return 1;\n\
  }"
- "    my($prev) = $l->[0];\n    my($inc) = 0;\n    for my $i (1 .. $#$l) {\n\tmy($cur)\
  \ = $l->[$i];\n\tif ($cur > $prev) {\n\t    if ($inc == -1) {\n\t\treturn 0;\n\t\
  \    }\n\t    $inc = 1;\n\t} elsif ($cur < $prev) {\n\t    if ($inc == 1) {\n\t\t\
  return 0;\n\t    }\n\t    $inc = -1;\n\t}\n\t$prev = $cur;\n    }\n    return 1;\n\
  }"
- "    my $i = 0;\n    my $n = scalar(@$l);\n    my $inc = 0;\n    my $dec = 0;\n\
  \    while ($i < $n-1) {\n        if ($l->[$i] < $l->[$i+1]) {\n            $inc\
  \ = 1;\n        }\n        if ($l->[$i] > $l->[$i+1]) {\n            $dec = 1;\n\
  \        }\n        $i++;\n    }\n    return $inc + $dec == 1;\n}"
- "    my $i = 0;\n    my $inc = 0;\n    my $dec = 0;\n    while ($i < $#$l) {\n \
  \       if ($l->[$i] < $l->[$i+1]) {\n            $inc = 1;\n        }\n       \
  \ if ($l->[$i] > $l->[$i+1]) {\n            $dec = 1;\n        }\n        if ($inc\
  \ && $dec) {\n            return 0;\n        }\n        $i++;\n    }\n    return\
  \ 1;\n}"
- "    my $i;\n    my $prev = $l->[0];\n    my $inc = 0;\n    my $dec = 0;\n    for\
  \ ($i = 1; $i < @$l; $i++) {\n        if ($l->[$i] > $prev) {\n            $inc\
  \ = 1;\n        } elsif ($l->[$i] < $prev) {\n            $dec = 1;\n        }\n\
  \        $prev = $l->[$i];\n    }\n    return ($inc == 0 || $dec == 0);\n}"
- "    my $i = 0;\n    my $n = @$l;\n    while ($i < $n - 1) {\n        if ($l->[$i]\
  \ > $l->[$i + 1]) {\n            while ($i < $n - 1) {\n                if ($l->[$i]\
  \ < $l->[$i + 1]) {\n                    return 0;\n                }\n        \
  \        $i++;\n            }\n            return 1;\n        } elsif ($l->[$i]\
  \ < $l->[$i + 1]) {\n            while ($i < $n - 1) {\n                if ($l->[$i]\
  \ > $l->[$i + 1]) {\n                    return 0;\n                }\n        \
  \        $i++;\n            }\n            return 1;\n        }\n        $i++;\n\
  \    }\n    return 1;\n}"
- "    my $i;\n    my $inc = 0;\n    my $dec = 0;\n    for ($i = 1; $i < @$l; $i++)\
  \ {\n\tif ($l->[$i] > $l->[$i-1]) {\n\t    $inc = 1;\n\t} elsif ($l->[$i] < $l->[$i-1])\
  \ {\n\t    $dec = 1;\n\t}\n\tif ($inc && $dec) {\n\t    return 0;\n\t}\n    }\n\
  \    return 1;\n}"
- "    my($prev) = $l->[0];\n    my($increasing) = 1;\n    for my $i (1 .. @$l - 1)\
  \ {\n        if ($l->[$i] > $prev) {\n            if (!$increasing) {\n        \
  \        return 0;\n            }\n        } elsif ($l->[$i] < $prev) {\n      \
  \      if ($increasing) {\n                $increasing = 0;\n            }\n   \
  \     } else {\n            return 0;\n        }\n        $prev = $l->[$i];\n  \
  \  }\n    return 1;\n}"
- "    my $i;\n    for($i = 1; $i < @$l; $i++) {\n        if($l->[$i] == $l->[$i-1])\
  \ {\n            return 0;\n        }\n    }\n    return 1;\n}"
- "    my $i = 0;\n    my $n = @$l;\n    while ($i < $n-1 && $l->[$i] == $l->[$i+1])\
  \ {\n        $i++;\n    }\n    if ($i == $n-1) {\n        return 1;\n    }\n   \
  \ my $inc = $l->[$i] < $l->[$i+1];\n    for (; $i < $n-1; $i++) {\n        if ($inc\
  \ && $l->[$i] > $l->[$i+1]) {\n            return 0;\n        }\n        if (!$inc\
  \ && $l->[$i] < $l->[$i+1]) {\n            return 0;\n        }\n    }\n    return\
  \ 1;\n}"
- "    my $i = 0;\n    my $j = 1;\n    my $inc = 0;\n    my $dec = 0;\n    while ($j\
  \ < @$l) {\n        if ($l->[$i] < $l->[$j]) {\n            $inc = 1;\n        }\n\
  \        if ($l->[$i] > $l->[$j]) {\n            $dec = 1;\n        }\n        if\
  \ ($inc && $dec) {\n            return 0;\n        }\n        $i++;\n        $j++;\n\
  \    }\n    return 1;\n}"
- "    my($i, $n, $d);\n    $n = scalar(@$l);\n    return 1 if $n <= 1;\n    $d =\
  \ $l->[1] - $l->[0];\n    for ($i = 1; $i < $n; $i++) {\n        if ($d * ($l->[$i]\
  \ - $l->[$i-1]) < 0) {\n            return 0;\n        }\n    }\n    return 1;\n\
  }"
- "    my($i, $j);\n    my($n) = @$l;\n    my($inc) = 0;\n    for ($i = 1; $i < $n;\
  \ $i++) {\n\t$j = $i - 1;\n\tif ($l->[$i] > $l->[$j]) {\n\t    if ($inc == -1) {\n\
  \t\treturn 0;\n\t    }\n\t    $inc = 1;\n\t} elsif ($l->[$i] < $l->[$j]) {\n\t \
  \   if ($inc == 1) {\n\t\treturn 0;\n\t    }\n\t    $inc = -1;\n\t}\n    }\n   \
  \ return 1;\n}"
- "    my($prev, $prev_sign);\n    for my $i (@$l) {\n        my $sign = $i <=> 0;\n\
  \        if(defined $prev_sign) {\n            return 0 if $sign != $prev_sign;\n\
  \        }\n        $prev_sign = $sign;\n        $prev = $i;\n    }\n    return\
  \ 1;\n}"
- "    my($i, $j);\n    my($n) = scalar(@$l);\n    my($inc) = 1;\n    my($dec) = 1;\n\
  \    for($i = 0; $i < $n - 1; $i++) {\n\t$j = $i + 1;\n\t$inc = 0 if $l->[$i] >\
  \ $l->[$j];\n\t$dec = 0 if $l->[$i] < $l->[$j];\n    }\n    return $inc || $dec;\n\
  }"
- "    my($prev) = $l->[0];\n    my($increasing) = 1;\n    for my $i (1 .. $#$l) {\n\
  \        if ($l->[$i] != $prev) {\n            if ($increasing) {\n            \
  \    if ($l->[$i] < $prev) {\n                    $increasing = 0;\n           \
  \     }\n            } else {\n                if ($l->[$i] > $prev) {\n       \
  \             return 0;\n                }\n            }\n        }\n        $prev\
  \ = $l->[$i];\n    }\n    return 1;\n}"
- "    my $i = 0;\n    my $n = @$l;\n    while ($i < $n - 1) {\n        if ($l->[$i]\
  \ == $l->[$i + 1]) {\n            $i++;\n        } elsif ($l->[$i] < $l->[$i + 1])\
  \ {\n            return 0 if any { $_ < $l->[$i] } @$l[$i + 1 .. $n - 1];\n    \
  \        return 1;\n        } else {\n            return 0 if any { $_ > $l->[$i]\
  \ } @$l[$i + 1 .. $n - 1];\n            return 1;\n        }\n    }\n    return\
  \ 1;\n}"
- "    my($i, $j);\n    my($n) = @$l;\n    for ($i = 0; $i < $n - 1; $i++) {\n   \
  \     $j = $i + 1;\n        return 0 if $l->[$i] == $l->[$j];\n    }\n    return\
  \ 1;\n}"
- "    my($i, $j);\n    my($n) = @$l;\n    my($inc) = 1;\n    my($dec) = 1;\n    for($i\
  \ = 1; $i < $n; $i++) {\n        $inc = 0 if $l->[$i] < $l->[$i-1];\n        $dec\
  \ = 0 if $l->[$i] > $l->[$i-1];\n    }\n    return $inc || $dec;\n}"
- "    my $i = 0;\n    my $n = @$l;\n    my $inc = 0;\n    my $dec = 0;\n    while\
  \ ($i < $n - 1) {\n        if ($l->[$i] < $l->[$i + 1]) {\n            $inc = 1;\n\
  \        }\n        if ($l->[$i] > $l->[$i + 1]) {\n            $dec = 1;\n    \
  \    }\n        if ($inc && $dec) {\n            return 0;\n        }\n        $i++;\n\
  \    }\n    return 1;\n}"
- "    my $i;\n    my $prev = $l->[0];\n    my $inc = 0;\n    my $dec = 0;\n    for\
  \ ($i = 1; $i < @$l; $i++) {\n        if ($l->[$i] > $prev) {\n            $inc\
  \ = 1;\n        } elsif ($l->[$i] < $prev) {\n            $dec = 1;\n        }\n\
  \        $prev = $l->[$i];\n    }\n    return $inc + $dec == 1;\n}"
- "    my $i = 0;\n    my $n = @$l;\n    my $dir = 0;\n    while ($i < $n - 1) {\n\
  \        my $d = $l->[$i + 1] - $l->[$i];\n        if ($d != 0) {\n            if\
  \ ($dir == 0) {\n                $dir = $d;\n            }\n            elsif ($dir\
  \ * $d < 0) {\n                return 0;\n            }\n        }\n        $i++;\n\
  \    }\n    return 1;\n}"
- "    my $i = 0;\n    my $len = scalar(@$l);\n    my $inc = 0;\n    my $dec = 0;\n\
  \    while ($i < $len - 1) {\n        if ($l->[$i] < $l->[$i + 1]) {\n         \
  \   $inc = 1;\n        }\n        if ($l->[$i] > $l->[$i + 1]) {\n            $dec\
  \ = 1;\n        }\n        if ($inc && $dec) {\n            return 0;\n        }\n\
  \        $i++;\n    }\n    return 1;\n}"
- "    my($prev, $increasing) = (undef, undef);\n    for my $e (@$l) {\n        if\
  \ (defined $prev) {\n            if ($e == $prev) {\n                # do nothing\n\
  \            } elsif ($e > $prev) {\n                if (defined $increasing &&\
  \ !$increasing) {\n                    return 0;\n                }\n          \
  \      $increasing = 1;\n            } else {\n                if (defined $increasing\
  \ && $increasing) {\n                    return 0;\n                }\n        \
  \        $increasing = 0;\n            }\n        }\n        $prev = $e;\n    }\n\
  \    return 1;\n}"
- "    my $m = 0;\n    my $n = 0;\n    for my $i (1 .. $#$l) {\n        if ($l->[$i]\
  \ > $l->[$i-1]) {\n            $m++;\n        } elsif ($l->[$i] < $l->[$i-1]) {\n\
  \            $n++;\n        }\n    }\n    return $m == 0 || $n == 0;\n}"
- "    my $i;\n    my $prev = $l->[0];\n    my $inc = 0;\n    my $dec = 0;\n    for\
  \ ($i = 1; $i < @$l; $i++) {\n        if ($l->[$i] > $prev) {\n            $inc\
  \ = 1;\n        } elsif ($l->[$i] < $prev) {\n            $dec = 1;\n        }\n\
  \        $prev = $l->[$i];\n    }\n    return ($inc == 0 || $dec == 0);\n}"
- "    my $i = 0;\n    my $len = scalar(@$l);\n    my $inc = 0;\n    my $dec = 0;\n\
  \    while($i < $len - 1) {\n        if($l->[$i] < $l->[$i + 1]) {\n           \
  \ $inc = 1;\n        }\n        if($l->[$i] > $l->[$i + 1]) {\n            $dec\
  \ = 1;\n        }\n        $i++;\n    }\n    return ($inc + $dec) == 1;\n}"
- "    my($i, $n);\n    $n = @$l;\n    for ($i = 1; $i < $n; $i++) {\n\tif ($l->[$i]\
  \ < $l->[$i-1]) {\n\t    return 0 if $i == 1;\n\t    return 0 if $l->[$i] < $l->[$i-2];\n\
  \t    return 0 if $l->[$i-1] > $l->[$i-2];\n\t}\n\telsif ($l->[$i] > $l->[$i-1])\
  \ {\n\t    return 0 if $i == 1;\n\t    return 0 if $l->[$i] > $l->[$i-2];\n\t  \
  \  return 0 if $l->[$i-1] < $l->[$i-2];\n\t}\n    }\n    return 1;\n}"
- "    my($prev) = $l->[0];\n    my($increasing) = 1;\n    my($decreasing) = 1;\n\
  \    for my $i (1 .. $#$l) {\n        if ($l->[$i] > $prev) {\n            $decreasing\
  \ = 0;\n        }\n        if ($l->[$i] < $prev) {\n            $increasing = 0;\n\
  \        }\n        $prev = $l->[$i];\n    }\n    return $increasing || $decreasing;\n\
  }"
- "    my($prev) = $l->[0];\n    my($increasing) = 1;\n    my($decreasing) = 1;\n\
  \    foreach my $e (@$l) {\n        if ($e > $prev) {\n            $decreasing =\
  \ 0;\n        }\n        elsif ($e < $prev) {\n            $increasing = 0;\n  \
  \      }\n        $prev = $e;\n    }\n    return $increasing || $decreasing;\n}"
- "    my $i = 0;\n    my $n = scalar(@$l);\n    my $inc = 0;\n    my $dec = 0;\n\
  \    while ($i < $n - 1) {\n        if ($l->[$i] < $l->[$i + 1]) {\n           \
  \ $inc = 1;\n        }\n        if ($l->[$i] > $l->[$i + 1]) {\n            $dec\
  \ = 1;\n        }\n        $i++;\n    }\n    return ($inc == 0 || $dec == 0);\n}"
- "    my $i;\n    for ($i = 1; $i < @$l; $i++) {\n        if ($l->[$i] == $l->[$i-1])\
  \ {\n            return 0;\n        }\n    }\n    return 1;\n}"
- "    my $i;\n    my $d = 0;\n    for ($i = 1; $i < @$l; $i++) {\n        if ($l->[$i]\
  \ > $l->[$i-1]) {\n            if ($d == -1) {\n                return 0;\n    \
  \        }\n            $d = 1;\n        } elsif ($l->[$i] < $l->[$i-1]) {\n   \
  \         if ($d == 1) {\n                return 0;\n            }\n           \
  \ $d = -1;\n        }\n    }\n    return 1;\n}"
- "    my $i = 0;\n    my $n = @$l;\n    while ($i < $n - 1) {\n        if ($l->[$i]\
  \ == $l->[$i + 1]) {\n            $i++;\n        } elsif ($l->[$i] < $l->[$i + 1])\
  \ {\n            last if !monotonic_increasing($l, $i);\n            return 1;\n\
  \        } else {\n            last if !monotonic_decreasing($l, $i);\n        \
  \    return 1;\n        }\n    }\n    return 0;\n}"
- "    my $i;\n    my $n = @$l;\n    for ($i = 1; $i < $n; $i++) {\n        if ($l->[$i]\
  \ < $l->[$i-1]) {\n            return 0;\n        }\n    }\n    return 1;\n}"
- "    my $i = 0;\n    my $n = @$l;\n    while ($i < $n - 1) {\n        if ($l->[$i]\
  \ < $l->[$i + 1]) {\n            last;\n        }\n        $i++;\n    }\n    if\
  \ ($i == $n - 1) {\n        return 1;\n    }\n    $i = 0;\n    while ($i < $n -\
  \ 1) {\n        if ($l->[$i] > $l->[$i + 1]) {\n            last;\n        }\n \
  \       $i++;\n    }\n    if ($i == $n - 1) {\n        return 1;\n    }\n    return\
  \ 0;\n}"
- "    my $i;\n    my $d;\n    for ($i = 1; $i < @$l; $i++) {\n        if (!defined($d))\
  \ {\n            $d = $l->[$i] - $l->[$i-1];\n        }\n        elsif ($d * ($l->[$i]\
  \ - $l->[$i-1]) < 0) {\n            return 0;\n        }\n    }\n    return 1;\n\
  }"
- "    my($i, $j, $k);\n    my($n) = scalar(@$l);\n    for ($i = 0; $i < $n - 1; $i++)\
  \ {\n\t$j = $l->[$i];\n\t$k = $l->[$i + 1];\n\tif ($j < $k) {\n\t    return 0 if\
  \ $k < $j;\n\t}\n\telsif ($j > $k) {\n\t    return 0 if $k > $j;\n\t}\n    }\n \
  \   return 1;\n}"
- "    my $i = 0;\n    my $d = 0;\n    my $n = @$l;\n    while ($i < $n-1) {\n   \
  \     if ($l->[$i] < $l->[$i+1]) {\n            if ($d == -1) {\n              \
  \  return 0;\n            }\n            $d = 1;\n        } elsif ($l->[$i] > $l->[$i+1])\
  \ {\n            if ($d == 1) {\n                return 0;\n            }\n    \
  \        $d = -1;\n        }\n        $i++;\n    }\n    return 1;\n}"
- "    my $inc = 0;\n    my $dec = 0;\n    my $prev = $l->[0];\n    for my $i (1..$#$l)\
  \ {\n        if ($l->[$i] > $prev) {\n            $inc = 1;\n        }\n       \
  \ if ($l->[$i] < $prev) {\n            $dec = 1;\n        }\n        $prev = $l->[$i];\n\
  \    }\n    return $inc + $dec == 1;\n}"
- "    my($i, $j, $k);\n    my($n) = scalar(@$l);\n    my($inc) = 0;\n    for($i =\
  \ 0; $i < $n - 1; $i++) {\n\t$j = $l->[$i];\n\t$k = $l->[$i + 1];\n\tif($j < $k)\
  \ {\n\t    if($inc == -1) {\n\t\treturn 0;\n\t    }\n\t    $inc = 1;\n\t} elsif($j\
  \ > $k) {\n\t    if($inc == 1) {\n\t\treturn 0;\n\t    }\n\t    $inc = -1;\n\t}\n\
  \    }\n    return 1;\n}"
- "    my($prev, $incr) = (undef, undef);\n    for my $i (@$l) {\n        if (defined\
  \ $prev) {\n            if ($i > $prev) {\n                if (defined $incr &&\
  \ $incr == 0) {\n                    return 0;\n                }\n            \
  \    $incr = 1;\n            } elsif ($i < $prev) {\n                if (defined\
  \ $incr && $incr == 1) {\n                    return 0;\n                }\n   \
  \             $incr = 0;\n            }\n        }\n        $prev = $i;\n    }\n\
  \    return 1;\n}"
- "    my $i;\n    my $prev = $l->[0];\n    my $incr = 0;\n    my $decr = 0;\n   \
  \ for ($i = 1; $i < @$l; $i++) {\n\tif ($l->[$i] > $prev) {\n\t    $incr = 1;\n\t\
  } elsif ($l->[$i] < $prev) {\n\t    $decr = 1;\n\t}\n\tif ($incr && $decr) {\n\t\
  \    return 0;\n\t}\n\t$prev = $l->[$i];\n    }\n    return 1;\n}"
- "    my($i, $j);\n    my($d);\n    my($r);"
- "    my($i, $n);\n    $n = @$l;\n    for ($i = 1; $i < $n; $i++) {\n\tif ($l->[$i]\
  \ < $l->[$i-1]) {\n\t    return 0 if $l->[$i-1] - $l->[$i] > 1;\n\t}\n\telse {\n\
  \t    return 0 if $l->[$i] - $l->[$i-1] > 1;\n\t}\n    }\n    return 1;\n}"
- "    my($i, $j, $k);\n    my($n) = scalar(@$l);\n    for ($i = 0; $i < $n - 1; $i++)\
  \ {\n\t$j = $l->[$i];\n\t$k = $l->[$i + 1];\n\tif ($j < $k) {\n\t    last;\n\t}\n\
  \tif ($j > $k) {\n\t    return 0;\n\t}\n    }\n    for (; $i < $n - 1; $i++) {\n\
  \t$j = $l->[$i];\n\t$k = $l->[$i + 1];\n\tif ($j > $k) {\n\t    return 0;\n\t}\n\
  \    }\n    return 1;\n}"
- "    my $i = 0;\n    my $n = @$l;\n    while ($i < $n - 1 && $l->[$i] == $l->[$i\
  \ + 1]) {\n        $i++;\n    }\n    if ($i == $n - 1) {\n        return 1;\n  \
  \  }\n    my $inc = $l->[$i] < $l->[$i + 1];\n    while ($i < $n - 1) {\n      \
  \  if ($inc && $l->[$i] > $l->[$i + 1]) {\n            return 0;\n        }\n  \
  \      if (!$inc && $l->[$i] < $l->[$i + 1]) {\n            return 0;\n        }\n\
  \        $i++;\n    }\n    return 1;\n}"
- "    my($i, $j);\n    for($i = 0; $i < $#$l; $i++) {\n\t$j = $i + 1;\n\treturn 0\
  \ if $l->[$i] == $l->[$j];\n    }\n    return 1;\n}"
- "    my $n = @$l;\n    my $i = 0;\n    while ($i < $n - 1) {\n        if ($l->[$i]\
  \ == $l->[$i + 1]) {\n            $i++;\n        } else {\n            last;\n \
  \       }\n    }\n    if ($i == $n - 1) {\n        return 1;\n    }\n    my $inc\
  \ = $l->[$i] < $l->[$i + 1];\n    for (; $i < $n - 1; $i++) {\n        if ($inc)\
  \ {\n            if ($l->[$i] > $l->[$i + 1]) {\n                return 0;\n   \
  \         }\n        } else {\n            if ($l->[$i] < $l->[$i + 1]) {\n    \
  \            return 0;\n            }\n        }\n    }\n    return 1;\n}"
- "    my $i;\n    for ($i = 1; $i < @$l; $i++) {\n        return 0 if ($l->[$i] -\
  \ $l->[$i-1]) * ($l->[1] - $l->[0]) < 0;\n    }\n    return 1;\n}"
- "    my $i = 0;\n    my $prev = $l->[$i++];\n    my $increasing = 0;\n    my $decreasing\
  \ = 0;\n    for my $e (@$l[1..$#$l]) {\n        if ($e > $prev) {\n            $increasing\
  \ = 1;\n        } elsif ($e < $prev) {\n            $decreasing = 1;\n        }\n\
  \        if ($increasing && $decreasing) {\n            return 0;\n        }\n \
  \       $prev = $e;\n    }\n    return 1;\n}"
- "    my $i = 1;\n    my $inc = 0;\n    my $dec = 0;\n    while ($i < @$l) {\n  \
  \      if ($l->[$i] > $l->[$i-1]) {\n            $inc = 1;\n        }\n        if\
  \ ($l->[$i] < $l->[$i-1]) {\n            $dec = 1;\n        }\n        if ($inc\
  \ && $dec) {\n            return 0;\n        }\n        $i++;\n    }\n    return\
  \ 1;\n}"
- "    my $i = 0;\n    my $inc = 0;\n    my $dec = 0;\n    while ($i < $#$l) {\n \
  \       if ($l->[$i] < $l->[$i+1]) {\n            $inc = 1;\n        } elsif ($l->[$i]\
  \ > $l->[$i+1]) {\n            $dec = 1;\n        }\n        if ($inc && $dec) {\n\
  \            return 0;\n        }\n        $i++;\n    }\n    return 1;\n}"
- "    my $i;\n    my $d = 0;\n    for ($i = 1; $i < @$l; $i++) {\n        my $dd\
  \ = $l->[$i] - $l->[$i-1];\n        if ($dd == 0) {\n            next;\n       \
  \ }\n        if ($d == 0) {\n            $d = $dd;\n        }\n        if ($d *\
  \ $dd < 0) {\n            return 0;\n        }\n    }\n    return 1;\n}"
- "    my($i, $j);\n    my($n) = scalar(@$l);\n    my($inc) = 0;\n    my($dec) = 0;\n\
  \    for($i = 0; $i < $n - 1; $i++) {\n\t$inc = 1 if ($l->[$i] < $l->[$i + 1]);\n\
  \t$dec = 1 if ($l->[$i] > $l->[$i + 1]);\n    }\n    return ($inc == 0 || $dec ==\
  \ 0);\n}"
- "    my $prev = $l->[0];\n    my $increasing = 0;\n    for my $e (@$l) {\n     \
  \   if ($e > $prev) {\n            if ($increasing == -1) {\n                return\
  \ 0;\n            }\n            $increasing = 1;\n        } elsif ($e < $prev)\
  \ {\n            if ($increasing == 1) {\n                return 0;\n          \
  \  }\n            $increasing = -1;\n        }\n        $prev = $e;\n    }\n   \
  \ return 1;\n}"
- "    my $i = 0;\n    my $n = @$l;\n    my $inc = 0;\n    my $dec = 0;\n    while\
  \ ($i < $n - 1) {\n        if ($l->[$i] < $l->[$i + 1]) {\n            $inc = 1;\n\
  \        }\n        if ($l->[$i] > $l->[$i + 1]) {\n            $dec = 1;\n    \
  \    }\n        if ($inc && $dec) {\n            return 0;\n        }\n        $i++;\n\
  \    }\n    return 1;\n}"
- "    my $i = 1;\n    while ($i < @$l) {\n        return 0 if $l->[$i-1] > $l->[$i];\n\
  \        $i++;\n    }\n    return 1;\n}"
- "    my $i = 0;\n    my $n = @$l;\n    while ($i < $n - 1) {\n        if ($l->[$i]\
  \ == $l->[$i + 1]) {\n            $i++;\n        } elsif ($l->[$i] < $l->[$i + 1])\
  \ {\n            while ($i < $n - 1 && $l->[$i] <= $l->[$i + 1]) {\n           \
  \     $i++;\n            }\n            return 0 if $i < $n - 1;\n        } else\
  \ {\n            while ($i < $n - 1 && $l->[$i] >= $l->[$i + 1]) {\n           \
  \     $i++;\n            }\n            return 0 if $i < $n - 1;\n        }\n  \
  \  }\n    return 1;\n}"
- "    my $i = 0;\n    my $n = @$l;\n    while ($i < $n-1) {\n        if ($l->[$i]\
  \ < $l->[$i+1]) {\n            last;\n        }\n        $i++;\n    }\n    if ($i\
  \ == $n-1) {\n        return 1;\n    }\n    $i = 0;\n    while ($i < $n-1) {\n \
  \       if ($l->[$i] > $l->[$i+1]) {\n            last;\n        }\n        $i++;\n\
  \    }\n    if ($i == $n-1) {\n        return 1;\n    }\n    return 0;\n}"
- "    my $i;\n    for ($i = 1; $i < @$l; $i++) {\n        if ($l->[$i] < $l->[$i-1])\
  \ {\n            return 0 if $i > 1;\n            return 0 if $l->[$i] < $l->[$i+1];\n\
  \        }\n        elsif ($l->[$i] > $l->[$i-1]) {\n            return 0 if $i\
  \ > 1;\n            return 0 if $l->[$i] > $l->[$i+1];\n        }\n    }\n    return\
  \ 1;\n}"
- "    my $r = 1;\n    my $d = 0;\n    my $i = 0;\n    while ($i < @$l) {\n      \
  \  if ($i > 0) {\n            if ($d == 0) {\n                if ($l->[$i] > $l->[$i-1])\
  \ {\n                    $d = 1;\n                } elsif ($l->[$i] < $l->[$i-1])\
  \ {\n                    $d = -1;\n                }\n            } else {\n   \
  \             if ($d == 1 && $l->[$i] < $l->[$i-1]) {\n                    $r =\
  \ 0;\n                    last;\n                } elsif ($d == -1 && $l->[$i] >\
  \ $l->[$i-1]) {\n                    $r = 0;\n                    last;\n      \
  \          }\n            }\n        }\n        $i++;\n    }\n    return $r;\n}"
- "    my($i, $n);\n    $n = @$l;\n    for ($i = 1; $i < $n; $i++) {\n\tif ($l->[$i]\
  \ < $l->[$i-1]) {\n\t    return 0 if $i > 1;\n\t    return 0 if $l->[$i] < $l->[$i+1];\n\
  \t}\n\telsif ($l->[$i] > $l->[$i-1]) {\n\t    return 0 if $i > 1;\n\t    return\
  \ 0 if $l->[$i] > $l->[$i+1];\n\t}\n    }\n    return 1;\n}"
- "    my($i, $j, $k);\n    my($n) = scalar(@$l);\n    my($inc) = 0;\n    my($dec)\
  \ = 0;\n    for($i = 0; $i < $n - 1; $i++) {\n\t$j = $l->[$i];\n\t$k = $l->[$i +\
  \ 1];\n\tif($j < $k) {\n\t    $inc = 1;\n\t}\n\tif($j > $k) {\n\t    $dec = 1;\n\
  \t}\n\tif($inc && $dec) {\n\t    return 0;\n\t}\n    }\n    return 1;\n}"
- "    my $n = @$l;\n    my $i = 0;\n    my $inc = 0;\n    my $dec = 0;\n    while\
  \ ($i < $n - 1) {\n        if ($l->[$i] < $l->[$i + 1]) {\n            $inc = 1;\n\
  \        }\n        if ($l->[$i] > $l->[$i + 1]) {\n            $dec = 1;\n    \
  \    }\n        if ($inc && $dec) {\n            return 0;\n        }\n        $i++;\n\
  \    }\n    return 1;\n}"
- "    my $i;\n    my $m = 0;\n    for ($i = 1; $i < @$l; $i++) {\n\tif ($l->[$i]\
  \ > $l->[$i-1]) {\n\t    if ($m == -1) {\n\t\treturn 0;\n\t    }\n\t    $m = 1;\n\
  \t} elsif ($l->[$i] < $l->[$i-1]) {\n\t    if ($m == 1) {\n\t\treturn 0;\n\t   \
  \ }\n\t    $m = -1;\n\t}\n    }\n    return 1;\n}"
- "    my($i, $j, $k);\n    my($n) = scalar(@$l);\n    for ($i = 0; $i < $n - 1; $i++)\
  \ {\n\t$j = $l->[$i];\n\t$k = $l->[$i + 1];\n\tif ($j < $k) {\n\t    last;\n\t}\n\
  \tif ($j > $k) {\n\t    return 0;\n\t}\n    }\n    for (; $i < $n - 1; $i++) {\n\
  \t$j = $l->[$i];\n\t$k = $l->[$i + 1];\n\tif ($j > $k) {\n\t    return 0;\n\t}\n\
  \    }\n    return 1;\n}"
- "    my $i = 0;\n    my $prev = $l->[$i++];\n    my $increasing = 0;\n    my $decreasing\
  \ = 0;\n    while ($i < @$l) {\n        my $curr = $l->[$i++];\n        if ($curr\
  \ > $prev) {\n            $increasing = 1;\n        } elsif ($curr < $prev) {\n\
  \            $decreasing = 1;\n        }\n        $prev = $curr;\n    }\n    return\
  \ $increasing ^ $decreasing;\n}"
- "    my $i = 1;\n    my $d = $l->[1] - $l->[0];\n    while ($i < @$l) {\n      \
  \  my $d2 = $l->[$i] - $l->[$i-1];\n        return 0 if $d2 * $d < 0;\n        $i++;\n\
  \    }\n    return 1;\n}"
- "    my($i, $j, $k);\n    my($n) = scalar(@$l);\n    for($i = 0; $i < $n; $i++)\
  \ {\n\t$j = $l->[$i];\n\t$k = $l->[$i+1];\n\tif($j > $k) {\n\t    for($i = 0; $i\
  \ < $n; $i++) {\n\t\t$j = $l->[$i];\n\t\t$k = $l->[$i+1];\n\t\tif($j < $k) {\n\t\
  \t    return 0;\n\t\t}\n\t    }\n\t    return 1;\n\t}\n    }\n    return 1;\n}"
- "    my $i = 0;\n    my $n = @$l - 1;\n    my $inc = $l->[$i] < $l->[$i+1];\n  \
  \  for ($i = 1; $i < $n; $i++) {\n        return 0 if $inc != ($l->[$i] < $l->[$i+1]);\n\
  \    }\n    return 1;\n}"
- "    my($i, $n, $d);\n    $n = @$l;\n    if ($n == 0) {\n        return 1;\n   \
  \ }\n    $d = $l->[0] <=> $l->[1];\n    for ($i = 1; $i < $n - 1; $i++) {\n    \
  \    if ($d * ($l->[$i] <=> $l->[$i + 1]) < 0) {\n            return 0;\n      \
  \  }\n    }\n    return 1;\n}"
- "    my $i = 0;\n    my $n = @$l;\n    my $inc = 0;\n    my $dec = 0;\n    while\
  \ ($i < $n - 1) {\n        if ($l->[$i] < $l->[$i + 1]) {\n            $inc = 1;\n\
  \        }\n        if ($l->[$i] > $l->[$i + 1]) {\n            $dec = 1;\n    \
  \    }\n        if ($inc && $dec) {\n            return 0;\n        }\n        $i++;\n\
  \    }\n    return 1;\n}"
- "    my $i = 0;\n    my $j = $#$l;\n    my $inc = 0;\n    my $dec = 0;\n    while\
  \ ($i < $j) {\n        if ($l->[$i] < $l->[$i+1]) {\n            $inc = 1;\n   \
  \     }\n        if ($l->[$i] > $l->[$i+1]) {\n            $dec = 1;\n        }\n\
  \        if ($inc && $dec) {\n            return 0;\n        }\n        $i++;\n\
  \    }\n    return 1;\n}"
- "    my($i, $j, $k);\n    my($n) = scalar(@$l);\n    return 0 if $n < 2;\n    for($i\
  \ = 0; $i < $n - 1; $i++) {\n\t$j = $l->[$i];\n\t$k = $l->[$i + 1];\n\treturn 0\
  \ if $j == $k;\n    }\n    return 1;\n}"
- "    my($i, $j);\n    my($n) = scalar(@$l);\n    for ($i = 0; $i < $n - 1; $i++)\
  \ {\n\t$j = $i + 1;\n\treturn 0 if ($l->[$i] > $l->[$j]);\n    }\n    return 1;\n\
  }"
- "    my $i = 0;\n    my $inc = 0;\n    my $dec = 0;\n    while ($i < @$l - 1) {\n\
  \        if ($l->[$i] < $l->[$i + 1]) {\n            $inc = 1;\n        }\n    \
  \    if ($l->[$i] > $l->[$i + 1]) {\n            $dec = 1;\n        }\n        $i++;\n\
  \    }\n    return $inc + $dec == 1;\n}"
- "    my $prev = $l->[0];\n    my $increasing = 0;\n    for my $i (1..$#$l) {\n \
  \       my $next = $l->[$i];\n        if ($next == $prev) {\n            next;\n\
  \        }\n        if ($increasing) {\n            return 0 if $next < $prev;\n\
  \        } else {\n            return 0 if $next > $prev;\n        }\n        $increasing\
  \ = 1;\n        $prev = $next;\n    }\n    return 1;\n}"
- "    my($i, $j, $k, $n);\n    $n = @$l;\n    if ($n < 2) {\n\treturn 1;\n    }\n\
  \    $i = $l->[0];\n    $j = $l->[1];\n    if ($i == $j) {\n\treturn 1;\n    }\n\
  \    if ($i < $j) {\n\tfor ($k = 2; $k < $n; $k++) {\n\t    if ($l->[$k] < $l->[$k\
  \ - 1]) {\n\t\treturn 0;\n\t    }\n\t}\n    }\n    else {\n\tfor ($k = 2; $k < $n;\
  \ $k++) {\n\t    if ($l->[$k] > $l->[$k - 1]) {\n\t\treturn 0;\n\t    }\n\t}\n \
  \   }\n    return 1;\n}"
- "    my($i, $n);\n    $n = scalar(@$l);\n    if ($n < 2) {\n\treturn 1;\n    }\n\
  \    for ($i = 1; $i < $n; $i++) {\n\tif ($l->[$i] > $l->[$i-1]) {\n\t    last;\n\
  \t}\n    }\n    if ($i == $n) {\n\treturn 1;\n    }\n    for ($i = 1; $i < $n; $i++)\
  \ {\n\tif ($l->[$i] < $l->[$i-1]) {\n\t    last;\n\t}\n    }\n    if ($i == $n)\
  \ {\n\treturn 1;\n    }\n    return 0;\n}"
- "    my $i = 0;\n    my $prev = $l->[$i++];\n    my $inc = 0;\n    my $dec = 0;\n\
  \    while (defined($l->[$i])) {\n        if ($l->[$i] > $prev) {\n            $inc\
  \ = 1;\n        } elsif ($l->[$i] < $prev) {\n            $dec = 1;\n        }\n\
  \        $prev = $l->[$i++];\n    }\n    return $inc + $dec == 1;\n}"
- "    my $i;\n    for ($i = 1; $i < @$l; $i++) {\n        if ($l->[$i] < $l->[$i-1])\
  \ {\n            return 0 if $i > 1;\n            for ($i++; $i < @$l; $i++) {\n\
  \                return 0 if $l->[$i] > $l->[$i-1];\n            }\n           \
  \ return 1;\n        }\n    }\n    return 1;\n}"
- "    my($i, $j);\n    for ($i = 0; $i < $#$l; $i++) {\n        $j = $i + 1;\n  \
  \      return 0 if ($l->[$i] < $l->[$j] && $l->[$j] < $l->[$i]);\n        return\
  \ 0 if ($l->[$i] > $l->[$j] && $l->[$j] > $l->[$i]);\n    }\n    return 1;\n}"
- "    my($i, $j, $k);\n    my($inc, $dec);\n    $inc = $dec = 1;\n    for ($i = 0;\
  \ $i < $#$l; $i++) {\n\t$j = $l->[$i];\n\t$k = $l->[$i+1];\n\tif ($j < $k) {\n\t\
  \    $dec = 0;\n\t} elsif ($j > $k) {\n\t    $inc = 0;\n\t}\n    }\n    return $inc\
  \ || $dec;\n}"
- "    my $i;\n    my $prev = $l->[0];\n    my $inc = 0;\n    my $dec = 0;\n    for($i\
  \ = 1; $i < @$l; $i++) {\n        if($l->[$i] > $prev) {\n            $inc = 1;\n\
  \        }\n        if($l->[$i] < $prev) {\n            $dec = 1;\n        }\n \
  \       if($inc && $dec) {\n            return 0;\n        }\n        $prev = $l->[$i];\n\
  \    }\n    return 1;\n}"
- "    my $i;\n    my $inc = 0;\n    my $dec = 0;\n    for ($i = 1; $i < @$l; $i++)\
  \ {\n\tif ($l->[$i] > $l->[$i-1]) {\n\t    $inc = 1;\n\t} elsif ($l->[$i] < $l->[$i-1])\
  \ {\n\t    $dec = 1;\n\t}\n\tif ($inc && $dec) {\n\t    return 0;\n\t}\n    }\n\
  \    return 1;\n}"
- "    my $i;\n    my $n = @$l;\n    for ($i = 1; $i < $n; $i++) {\n        if ($l->[$i]\
  \ < $l->[$i-1]) {\n            last;\n        }\n    }\n    if ($i == $n) {\n  \
  \      return 1;\n    }\n    for ($i = 1; $i < $n; $i++) {\n        if ($l->[$i]\
  \ > $l->[$i-1]) {\n            return 0;\n        }\n    }\n    return 1;\n}"
- "    my($i, $n);\n    $n = @$l;\n    for ($i = 1; $i < $n; $i++) {\n\tif ($l->[$i]\
  \ < $l->[$i-1]) {\n\t    return 0 if $l->[$i] < $l->[$i-1];\n\t}\n\telse {\n\t \
  \   return 0 if $l->[$i] > $l->[$i-1];\n\t}\n    }\n    return 1;\n}"
- "    my($i, $prev, $inc);\n    for $i (@$l) {\n        if (defined $prev) {\n  \
  \          if ($i > $prev) {\n                if (defined $inc && $inc == 0) {\n\
  \                    return 0;\n                }\n                $inc = 1;\n \
  \           } elsif ($i < $prev) {\n                if (defined $inc && $inc ==\
  \ 1) {\n                    return 0;\n                }\n                $inc =\
  \ 0;\n            }\n        }\n        $prev = $i;\n    }\n    return 1;\n}"
- "    my $prev = $l->[0];\n    my $increasing = 0;\n    my $decreasing = 0;\n   \
  \ for my $i (1 .. $#$l) {\n        my $curr = $l->[$i];\n        if ($curr > $prev)\
  \ {\n            $increasing = 1;\n        } elsif ($curr < $prev) {\n         \
  \   $decreasing = 1;\n        }\n        if ($increasing && $decreasing) {\n   \
  \         return 0;\n        }\n        $prev = $curr;\n    }\n    return 1;\n}"
- "    my $n = @$l;\n    return $n < 2 ||\n\t(($l->[0] < $l->[1] && monotonic([@$l[1..$n-1]]))\
  \ ||\n\t ($l->[0] > $l->[1] && monotonic([@$l[1..$n-1]])));\n}"
- "    my $n = @$l;\n    return 1 if $n < 2;\n    my $d = $l->[1] - $l->[0];\n   \
  \ for (my $i = 2; $i < $n; $i++) {\n        my $d2 = $l->[$i] - $l->[$i-1];\n  \
  \      return 0 if $d2 * $d < 0;\n    }\n    return 1;\n}"
- "    my $i = 0;\n    my $n = scalar(@$l);\n    while ($i < $n - 1) {\n        if\
  \ ($l->[$i] == $l->[$i + 1]) {\n            $i++;\n        } else {\n          \
  \  my $inc = $l->[$i] < $l->[$i + 1];\n            while ($i < $n - 1) {\n     \
  \           if ($inc != ($l->[$i] < $l->[$i + 1])) {\n                    return\
  \ 0;\n                }\n                $i++;\n            }\n            return\
  \ 1;\n        }\n    }\n    return 1;\n}"
- "    my $i = 0;\n    my $sign = 0;\n    for my $e (@$l) {\n        if ($i++ == 0)\
  \ {\n            $sign = $e;\n        } else {\n            if ($sign * $e < 0)\
  \ {\n                return 0;\n            }\n        }\n    }\n    return 1;\n\
  }"
- "    my($prev) = $l->[0];\n    my($increasing) = 1;\n    for my $i (1 .. $#$l) {\n\
  \        if ($l->[$i] > $prev) {\n            $increasing = 1;\n        } elsif\
  \ ($l->[$i] < $prev) {\n            $increasing = 0;\n        }\n        $prev =\
  \ $l->[$i];\n    }\n    return $increasing;\n}"
- "    my $i;\n    my $prev = $l->[0];\n    my $inc = 0;\n    my $dec = 0;\n    for\
  \ ($i = 1; $i < @$l; $i++) {\n        if ($l->[$i] > $prev) {\n            $inc\
  \ = 1;\n        } elsif ($l->[$i] < $prev) {\n            $dec = 1;\n        }\n\
  \        $prev = $l->[$i];\n    }\n    return $inc + $dec == 1;\n}"
- "    my($i, $j, $k);\n    my($n) = scalar(@$l);\n    if ($n < 2) {\n\treturn 1;\n\
  \    }\n    $i = $l->[0];\n    $j = $l->[1];\n    if ($i == $j) {\n\treturn 1;\n\
  \    }\n    if ($i < $j) {\n\tfor ($k = 2; $k < $n; $k++) {\n\t    if ($l->[$k]\
  \ < $l->[$k - 1]) {\n\t\treturn 0;\n\t    }\n\t}\n    } else {\n\tfor ($k = 2; $k\
  \ < $n; $k++) {\n\t    if ($l->[$k] > $l->[$k - 1]) {\n\t\treturn 0;\n\t    }\n\t\
  }\n    }\n    return 1;\n}"
- "    my $prev = $l->[0];\n    my $increasing = 0;\n    for my $i (1..$#$l) {\n \
  \       if ($prev != $l->[$i]) {\n            if ($increasing == 0) {\n        \
  \        $increasing = $prev < $l->[$i] ? 1 : -1;\n            }\n            elsif\
  \ ($increasing == 1) {\n                return 0 if $prev > $l->[$i];\n        \
  \    }\n            else {\n                return 0 if $prev < $l->[$i];\n    \
  \        }\n        }\n        $prev = $l->[$i];\n    }\n    return 1;\n}"
- "    my $i;\n    for ($i = 1; $i < @$l; $i++) {\n        return 0 if $l->[$i] <\
  \ $l->[$i-1];\n    }\n    return 1;\n}"
- "    my $i;\n    my $inc = 0;\n    my $dec = 0;\n    for ($i = 1; $i < @$l; $i++)\
  \ {\n\tif ($l->[$i] > $l->[$i-1]) {\n\t    $inc = 1;\n\t} elsif ($l->[$i] < $l->[$i-1])\
  \ {\n\t    $dec = 1;\n\t}\n\tif ($inc && $dec) {\n\t    return 0;\n\t}\n    }\n\
  \    return 1;\n}"
- "    my $n = @$l;\n    if ($n <= 1) {\n        return 1;\n    }\n    my $inc = $l->[1]\
  \ > $l->[0];\n    for (my $i = 2; $i < $n; $i++) {\n        if ($inc) {\n      \
  \      if ($l->[$i] < $l->[$i - 1]) {\n                return 0;\n            }\n\
  \        } else {\n            if ($l->[$i] > $l->[$i - 1]) {\n                return\
  \ 0;\n            }\n        }\n    }\n    return 1;\n}"
- "    my $i = 0;\n    my $sign = 0;\n    while ($i < @$l - 1) {\n        my $d =\
  \ $l->[$i+1] - $l->[$i];\n        if ($d == 0) {\n            $i++;\n          \
  \  next;\n        }\n        if ($sign == 0) {\n            $sign = $d;\n      \
  \  } elsif ($sign * $d < 0) {\n            return 0;\n        }\n        $i++;\n\
  \    }\n    return 1;\n}"
- "    my $len = @$l;\n    if ($len < 2) {\n        return 1;\n    }\n    my $inc\
  \ = $l->[1] > $l->[0];\n    for (my $i = 2; $i < $len; $i++) {\n        if ($inc)\
  \ {\n            if ($l->[$i] < $l->[$i - 1]) {\n                return 0;\n   \
  \         }\n        } else {\n            if ($l->[$i] > $l->[$i - 1]) {\n    \
  \            return 0;\n            }\n        }\n    }\n    return 1;\n}"
- "    my $i = 0;\n    my $j = 1;\n    my $n = @$l;\n    my $inc = $l->[$i] < $l->[$j];\n\
  \    while ($j < $n) {\n        if ($inc) {\n            return 0 if $l->[$i] >\
  \ $l->[$j];\n        } else {\n            return 0 if $l->[$i] < $l->[$j];\n  \
  \      }\n        $i++;\n        $j++;\n    }\n    return 1;\n}"
- "    my($i, $j, $k);\n    my($n) = scalar(@$l);\n    my($inc) = 1;\n    my($dec)\
  \ = 1;\n    for($i = 0; $i < $n - 1; $i++) {\n        $j = $l->[$i];\n        $k\
  \ = $l->[$i + 1];\n        if($j < $k) {\n            $dec = 0;\n        }\n   \
  \     if($j > $k) {\n            $inc = 0;\n        }\n    }\n    return $inc ||\
  \ $dec;\n}"
- "    my $inc = 0;\n    my $dec = 0;\n    my $prev = $l->[0];\n    for my $i (1..$#$l)\
  \ {\n        if ($l->[$i] > $prev) {\n            $inc = 1;\n        }\n       \
  \ elsif ($l->[$i] < $prev) {\n            $dec = 1;\n        }\n        $prev =\
  \ $l->[$i];\n    }\n    return $inc + $dec == 1;\n}"
- "    my($i);\n    my($prev);\n    my($increasing);\n    my($decreasing);"
- "    my $i = 0;\n    my $n = @$l;\n    my $inc = $l->[0] < $l->[1];\n    for (;\
  \ $i < $n - 1; $i++) {\n        return 0 if $inc && $l->[$i] > $l->[$i + 1];\n \
  \       return 0 if !$inc && $l->[$i] < $l->[$i + 1];\n    }\n    return 1;\n}"
- "    my $i = 0;\n    my $j = 1;\n    my $inc = 0;\n    my $dec = 0;\n    while ($j\
  \ < @$l) {\n        if ($l->[$i] < $l->[$j]) {\n            $inc = 1;\n        }\n\
  \        if ($l->[$i] > $l->[$j]) {\n            $dec = 1;\n        }\n        if\
  \ ($inc && $dec) {\n            return 0;\n        }\n        $i++;\n        $j++;\n\
  \    }\n    return 1;\n}"
- "    my $i;\n    for ($i = 1; $i < @$l; $i++) {\n        return 0 if $l->[$i] <\
  \ $l->[$i-1];\n    }\n    return 1;\n}"
- "    my($i, $n, $p);\n    $n = @$l;\n    if ($n < 2) {\n\treturn 1;\n    }\n   \
  \ $p = $l->[0];\n    for ($i = 1; $i < $n; $i++) {\n\tif ($p < $l->[$i]) {\n\t \
  \   return 0 if $p == $l->[$i] - 1;\n\t} elsif ($p > $l->[$i]) {\n\t    return 0\
  \ if $p == $l->[$i] + 1;\n\t}\n\t$p = $l->[$i];\n    }\n    return 1;\n}"
- "    my $i;\n    my $prev = $l->[0];\n    my $incr = 0;\n    for ($i = 1; $i < @$l;\
  \ $i++) {\n\tif ($l->[$i] < $prev) {\n\t    if ($incr) {\n\t\treturn 0;\n\t    }\n\
  \t    $incr = -1;\n\t} elsif ($l->[$i] > $prev) {\n\t    if ($incr == -1) {\n\t\t\
  return 0;\n\t    }\n\t    $incr = 1;\n\t}\n\t$prev = $l->[$i];\n    }\n    return\
  \ 1;\n}"
- "    my($i, $n, $d);\n    $n = scalar(@$l);\n    if ($n < 2) {\n\treturn 1;\n  \
  \  }\n    $d = $l->[1] - $l->[0];\n    for ($i = 2; $i < $n; $i++) {\n\tif ($d *\
  \ ($l->[$i] - $l->[$i-1]) < 0) {\n\t    return 0;\n\t}\n    }\n    return 1;\n}"
- "    my $i = 0;\n    my $j = 1;\n    my $dir = 0;\n    my $len = scalar(@$l);\n\
  \    while ($j < $len) {\n        if ($l->[$i] < $l->[$j]) {\n            if ($dir\
  \ == -1) {\n                return 0;\n            }\n            $dir = 1;\n  \
  \      } elsif ($l->[$i] > $l->[$j]) {\n            if ($dir == 1) {\n         \
  \       return 0;\n            }\n            $dir = -1;\n        }\n        $i++;\n\
  \        $j++;\n    }\n    return 1;\n}"
- "    my $i = 0;\n    my $n = @$l;\n    my $inc = 0;\n    my $dec = 0;\n    while\
  \ ($i < $n - 1) {\n        if ($l->[$i] < $l->[$i + 1]) {\n            $inc = 1;\n\
  \        }\n        if ($l->[$i] > $l->[$i + 1]) {\n            $dec = 1;\n    \
  \    }\n        $i++;\n    }\n    return $inc == 0 || $dec == 0;\n}"
- "    my $i = 0;\n    my $j = 1;\n    my $n = @$l;\n    my $increasing = 0;\n   \
  \ my $decreasing = 0;\n    while ($j < $n) {\n        if ($l->[$i] < $l->[$j]) {\n\
  \            $increasing = 1;\n        }\n        elsif ($l->[$i] > $l->[$j]) {\n\
  \            $decreasing = 1;\n        }\n        if ($increasing && $decreasing)\
  \ {\n            return 0;\n        }\n        $i++;\n        $j++;\n    }\n   \
  \ return 1;\n}"
- "    my $i = 0;\n    my $n = @$l;\n    my $inc = 0;\n    my $dec = 0;\n    while\
  \ ($i < $n - 1) {\n        if ($l->[$i] < $l->[$i + 1]) {\n            $inc = 1;\n\
  \        }\n        if ($l->[$i] > $l->[$i + 1]) {\n            $dec = 1;\n    \
  \    }\n        if ($inc && $dec) {\n            return 0;\n        }\n        $i++;\n\
  \    }\n    return 1;\n}"
- "    my $i = 0;\n    my $n = @$l;\n    while ($i < $n - 1) {\n        if ($l->[$i]\
  \ == $l->[$i + 1]) {\n            $i++;\n        } else {\n            last;\n \
  \       }\n    }\n    if ($i == $n - 1) {\n        return 1;\n    }\n    my $inc\
  \ = $l->[$i] < $l->[$i + 1];\n    while ($i < $n - 1) {\n        if ($inc) {\n \
  \           if ($l->[$i] > $l->[$i + 1]) {\n                return 0;\n        \
  \    }\n        } else {\n            if ($l->[$i] < $l->[$i + 1]) {\n         \
  \       return 0;\n            }\n        }\n        $i++;\n    }\n    return 1;\n\
  }"
- "    my($i, $prev);\n    for $i (@$l) {\n        if (defined $prev) {\n        \
  \    if ($prev < $i) {\n                return 0 if $prev == $i - 1;\n         \
  \   } elsif ($prev > $i) {\n                return 0 if $prev == $i + 1;\n     \
  \       }\n        }\n        $prev = $i;\n    }\n    return 1;\n}"
- "    my $inc = 0;\n    my $dec = 0;\n    for (my $i = 1; $i < @$l; $i++) {\n   \
  \     if ($l->[$i] > $l->[$i-1]) {\n            $inc = 1;\n        }\n        if\
  \ ($l->[$i] < $l->[$i-1]) {\n            $dec = 1;\n        }\n    }\n    return\
  \ ($inc + $dec == 1);\n}"
- "    my($prev, $curr);\n    for $curr (@$l) {\n        return 0 if defined($prev)\
  \ && $prev == $curr;\n        $prev = $curr;\n    }\n    return 1;\n}"
- "    my($i, $j);\n    my($n) = scalar(@$l);\n    if ($n < 2) {\n\treturn 1;\n  \
  \  }\n    for ($i = 1; $i < $n; $i++) {\n\tif ($l->[$i] != $l->[$i-1]) {\n\t   \
  \ last;\n\t}\n    }\n    if ($i == $n) {\n\treturn 1;\n    }\n    my($inc) = ($l->[$i]\
  \ > $l->[$i-1]) ? 1 : 0;\n    for ($j = $i+1; $j < $n; $j++) {\n\tif ($inc && $l->[$j]\
  \ < $l->[$j-1]) {\n\t    return 0;\n\t}\n\tif (!$inc && $l->[$j] > $l->[$j-1]) {\n\
  \t    return 0;\n\t}\n    }\n    return 1;\n}"
- "    my($i, $prev, $inc);\n    for $i (@$l) {\n        if (defined $prev) {\n  \
  \          if ($i > $prev) {\n                return 0 if $inc == -1;\n        \
  \        $inc = 1;\n            }\n            elsif ($i < $prev) {\n          \
  \      return 0 if $inc == 1;\n                $inc = -1;\n            }\n     \
  \   }\n        $prev = $i;\n    }\n    return 1;\n}"
- "    my($prev) = $l->[0];\n    my($increasing) = 0;\n    for my $i (1 .. $#$l) {\n\
  \        my($cur) = $l->[$i];\n        if ($prev < $cur) {\n            if ($increasing\
  \ == -1) {\n                return 0;\n            }\n            $increasing =\
  \ 1;\n        } elsif ($prev > $cur) {\n            if ($increasing == 1) {\n  \
  \              return 0;\n            }\n            $increasing = -1;\n       \
  \ }\n        $prev = $cur;\n    }\n    return 1;\n}"
- "    my($i, $j);\n    my($inc) = 1;\n    my($dec) = 1;\n    for ($i = 0; $i < $#$l;\
  \ $i++) {\n\t$inc = 0 if ($l->[$i] > $l->[$i+1]);\n\t$dec = 0 if ($l->[$i] < $l->[$i+1]);\n\
  \    }\n    return ($inc || $dec);\n}"
- "    my $n = @$l;\n    return 0 if $n <= 1;\n    my $inc = $l->[0] < $l->[1];\n\
  \    for my $i (1..$n-2) {\n        return 0 if $inc != ($l->[$i] < $l->[$i+1]);\n\
  \    }\n    return 1;\n}"
- "    my($i, $n);\n    $n = scalar(@$l);\n    for ($i = 1; $i < $n; $i++) {\n   \
  \     if ($l->[$i] < $l->[$i-1]) {\n            return 0;\n        }\n    }\n  \
  \  return 1;\n}"
- "    my($prev) = $l->[0];\n    my($increasing) = 1;\n    for my $i (1 .. $#$l) {\n\
  \        my($curr) = $l->[$i];\n        if ($curr > $prev) {\n            $increasing\
  \ = 1;\n        } elsif ($curr < $prev) {\n            $increasing = 0;\n      \
  \  }\n        $prev = $curr;\n    }\n    return $increasing;\n}"
- "    my $i = 0;\n    my $inc = 0;\n    my $dec = 0;\n    while ($i < @$l - 1) {\n\
  \        if ($l->[$i] < $l->[$i + 1]) {\n            $inc = 1;\n        }\n    \
  \    if ($l->[$i] > $l->[$i + 1]) {\n            $dec = 1;\n        }\n        $i++;\n\
  \    }\n    return $inc + $dec == 1;\n}"
- "    my($i, $inc, $dec);\n    $inc = $dec = 1;\n    for($i = 1; $i < @$l; $i++)\
  \ {\n\t$inc = 0 if $l->[$i] < $l->[$i-1];\n\t$dec = 0 if $l->[$i] > $l->[$i-1];\n\
  \    }\n    return $inc || $dec;\n}"
- "    my($i, $n, $dir);\n    $n = @$l;\n    return 1 if $n <= 1;\n    $dir = $l->[1]\
  \ > $l->[0] ? 1 : -1;\n    for($i = 1; $i < $n; $i++) {\n        return 0 if $dir\
  \ * ($l->[$i] - $l->[$i-1]) < 0;\n    }\n    return 1;\n}"
- "    my $inc = 0;\n    my $dec = 0;\n    my $prev = $l->[0];\n    for my $i (1..$#$l)\
  \ {\n        if ($l->[$i] > $prev) {\n            $inc++;\n        } elsif ($l->[$i]\
  \ < $prev) {\n            $dec++;\n        }\n        $prev = $l->[$i];\n    }\n\
  \    return $inc == 0 || $dec == 0;\n}"
- "    my($i, $n);\n    $n = @$l;\n    if ($n < 2) {\n\treturn 1;\n    }\n    for\
  \ ($i = 1; $i < $n; $i++) {\n\tif ($l->[$i] < $l->[$i-1]) {\n\t    return 0 if ($l->[$i-1]\
  \ - $l->[$i] > 1);\n\t}\n\telse {\n\t    return 0 if ($l->[$i] - $l->[$i-1] > 1);\n\
  \t}\n    }\n    return 1;\n}"
- "    my $i;\n    my $inc = 0;\n    my $dec = 0;\n    for ($i = 1; $i < @$l; $i++)\
  \ {\n\tif ($l->[$i] > $l->[$i-1]) {\n\t    $inc = 1;\n\t} elsif ($l->[$i] < $l->[$i-1])\
  \ {\n\t    $dec = 1;\n\t}\n\tif ($inc && $dec) {\n\t    return 0;\n\t}\n    }\n\
  \    return 1;\n}"
- "    my($prev) = $l->[0];\n    my($increasing) = 0;\n    for my $i (1 .. $#$l) {\n\
  \        my($e) = $l->[$i];\n        if ($e > $prev) {\n            if ($increasing\
  \ == -1) {\n                return 0;\n            }\n            $increasing =\
  \ 1;\n        } elsif ($e < $prev) {\n            if ($increasing == 1) {\n    \
  \            return 0;\n            }\n            $increasing = -1;\n        }\n\
  \        $prev = $e;\n    }\n    return 1;\n}"
- "    my($i, $n);\n    $n = @$l;\n    if ($n < 2) {\n\treturn 1;\n    }\n    if ($l->[0]\
  \ < $l->[1]) {\n\tfor ($i = 1; $i < $n; $i++) {\n\t    if ($l->[$i] < $l->[$i -\
  \ 1]) {\n\t\treturn 0;\n\t    }\n\t}\n    } else {\n\tfor ($i = 1; $i < $n; $i++)\
  \ {\n\t    if ($l->[$i] > $l->[$i - 1]) {\n\t\treturn 0;\n\t    }\n\t}\n    }\n\
  \    return 1;\n}"
- "    my($i, $prev, $incr);\n    for $i (0..$#$l) {\n        if (defined $prev) {\n\
  \            $incr = $l->[$i] > $prev;\n            return 0 if $incr != ($l->[$i]\
  \ > $prev);\n        }\n        $prev = $l->[$i];\n    }\n    return 1;\n}"
language: pl
name: HumanEval_57_monotonic
prompt: "# Return True is list elements are monotonically increasing or decreasing.\n\
  # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
  # >>> monotonic([4, 1, 0, -10])\n# True\nsub monotonic {\n    my($l) = @_;\n"
stop_tokens:
- '

  sub'
- '

  #'
- '


  '
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&monotonic;\n\
  \        if(eq_deeply($candidate->([1, 2, 4, 10]),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 20]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 20, 4, 10]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([4, 1, 0, -10]),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 1,\
  \ 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 2, 5, 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
  \ 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
