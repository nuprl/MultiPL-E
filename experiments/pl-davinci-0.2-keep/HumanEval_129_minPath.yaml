completions:
- "    my $n = scalar(@$grid);\n    my @path;\n    my $min_path = [];\n    my $min_sum\
  \ = $n * $n + 1;\n    my $min_path_sum = $min_sum;\n    my $min_path_sum_idx = -1;\n\
  \    my $min_path_sum_val = -1;\n    my $min_path_sum_row = -1;\n    my $min_path_sum_col\
  \ = -1;\n    my $min_path_sum_dir = -1;\n    my $min_path_sum_dir_idx = -1;\n  \
  \  my $min_path_sum_dir_val = -1;\n    my $min_path_sum_dir_row = -1;\n    my $min_path_sum_dir_col\
  \ = -1;\n    my $min_path_sum_dir_dir = -1;\n    my $min_path_sum_dir_dir_idx =\
  \ -1;\n    my $min_path_sum_dir_dir_val = -1;\n    my $min_path_sum_dir_dir_row\
  \ = -1;\n    my $min_path_sum_dir_dir_col = -1;\n    my $min_path_sum_dir_dir_dir\
  \ = -1;\n    my $min_path_sum_dir_dir_dir_idx = -1;\n    my $min_path_sum_dir_dir_dir_val\
  \ = -1;\n    my $min_path_sum_dir_dir_dir_row = -1;\n    my $min_path_sum_dir_dir_dir_col\
  \ = -1;\n    my $min_path_sum_dir_dir_dir_dir = -1;\n    my $min_path_sum_dir_dir_dir_dir_idx\
  \ = -1;\n    my $min_path_sum_dir_dir_dir_dir_val = -1;\n    my $min_path_sum_dir_dir_dir_dir_row\
  \ = -1;\n    my $min_path_sum_dir_dir_dir_dir_col"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = {};\n    my\
  \ $min = [];\n    my $min_sum = $n * $m;\n    my $min_path = [];\n    my $min_path_sum\
  \ = $n * $m;\n    my $min_path_visited = {};\n    my $min_path_visited_sum = $n\
  \ * $m;\n    my $min_path_visited_sum_path = [];\n    my $min_path_visited_sum_path_sum\
  \ = $n * $m;\n    my $min_path_visited_sum_path_sum_path = [];\n    my $min_path_visited_sum_path_sum_path_sum\
  \ = $n * $m;\n    my $min_path_visited_sum_path_sum_path_sum_path = [];\n    my\
  \ $min_path_visited_sum_path_sum_path_sum_path_sum = $n * $m;\n    my $min_path_visited_sum_path_sum_path_sum_path_sum_path\
  \ = [];\n    my $min_path_visited_sum_path_sum_path_sum_path_sum_path_sum = $n *\
  \ $m;\n    my $min_path_visited_sum_path_sum_path_sum_path_sum_path_sum_path = [];\n\
  \    my $min_path_visited_sum_path_sum_path_sum_path_sum_path_sum_path_sum = $n\
  \ * $m;\n    my $min_path_visited_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path\
  \ = [];\n    my $min_path_visited_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum\
  \ = $n * $m;\n    my $min_path_visited_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path\
  \ = [];\n    my $min_"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ [];\n    my $min_sum = $n * $n + 1;\n    my $min_path = [];\n    my $visited =\
  \ [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n      \
  \      $visited->[$i]->[$j] = 0;\n        }\n    }\n    for my $i (0 .. $n - 1)\
  \ {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n           \
  \ my $sum = 0;\n            $visited->[$i]->[$j] = 1;\n            push @$path,\
  \ $grid->[$i]->[$j];\n            $sum += $grid->[$i]->[$j];\n            dfs($grid,\
  \ $i, $j, $k - 1, $visited, $path, $sum, $min, $min_sum, $min_path);\n         \
  \   $visited->[$i]->[$j] = 0;\n        }\n    }\n    return $min_path;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n    for\
  \ my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    my $min = [];\n    for my $i (0..$k-1) {\n       \
  \ $min->[$i] = 1000000;\n    }\n    my $minPath = [];\n    for my $i (0..$k-1) {\n\
  \        $minPath->[$i] = 0;\n    }\n    my $dfs = sub {\n        my($i, $j, $path,\
  \ $pathLen) = @_;\n        if ($pathLen == $k) {\n            if ($path < $min)\
  \ {\n                $min = $path;\n                $minPath = $path;\n        \
  \    }\n            return;\n        }\n        if ($i < 0 || $i >= $n || $j < 0\
  \ || $j >= $m) {\n            return;\n        }\n        if ($visited->[$i][$j])\
  \ {\n            return;\n        }\n        $visited->[$i][$j] = 1;\n        $dfs->($i+1,\
  \ $j, $path . $grid->[$i][$j], $pathLen+1);\n        $dfs->($i-1, $j, $path . $grid->[$i][$j],\
  \ $pathLen+1);\n        $dfs->($i, $j+1, $path . $grid->[$i][$j], $pathLen+1);\n\
  \        $dfs->($i, $j-1, $path . $grid->[$i][$j], $pathLen+1);\n        $visited->[$i][$j]\
  \ = 0;\n    };\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n     \
  \       $dfs->($i, $j, \"\", 0);\n        }\n   "
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i]->[$j]\
  \ = [];\n            for my $l (0..$k-1) {\n                $dp->[$i]->[$j]->[$l]\
  \ = undef;\n            }\n        }\n    }\n    my $min = undef;\n    for my $i\
  \ (0..$n-1) {\n        for my $j (0..$m-1) {\n            my $val = $grid->[$i]->[$j];\n\
  \            if ($i == 0 && $j == 0) {\n                $dp->[$i]->[$j]->[0] = [$val];\n\
  \            } else {\n                for my $l (0..$k-1) {\n                 \
  \   if ($i > 0 && defined($dp->[$i-1]->[$j]->[$l])) {\n                        my\
  \ $prev = $dp->[$i-1]->[$j]->[$l];\n                        my $curr = [@$prev,\
  \ $val];\n                        if (!defined($dp->[$i]->[$j]->[$l+1]) || \n  \
  \                          $curr lt $dp->[$i]->[$j]->[$l+1]) {\n               \
  \             $dp->[$i]->[$j]->[$l+1] = $curr;\n                        }\n    \
  \                }\n                    if ($j > 0 && defined($dp->[$i]->[$j-1]->[$l]))\
  \ {\n                        my $prev = $dp->[$i]->[$j-1]->[$l];\n             \
  \           my $curr = [@$prev, $val];\n                        if (!defined($dp->[$i]->[$j]->[$l+1])\
  \ || \n                            $curr lt $dp->[$i"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $visited\
  \ = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    my $minPath = [];\n    my $minSum = $n * $m + 1;\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            my $path\
  \ = [];\n            my $sum = 0;\n            $visited->[$i][$j] = 1;\n       \
  \     push @$path, $grid->[$i][$j];\n            $sum += $grid->[$i][$j];\n    \
  \        dfs($grid, $visited, $i, $j, $k, $path, $sum, $minPath, $minSum);\n   \
  \         $visited->[$i][$j] = 0;\n        }\n    }\n    return $minPath;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ [];\n    my $min_sum = $n * $n + 1;\n    my $visited = [];\n    for my $i (0 ..\
  \ $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i]->[$j]\
  \ = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
  \ $m - 1) {\n            my $sum = 0;\n            my $path = [];\n            dfs($grid,\
  \ $i, $j, $k, $sum, $path, $visited, $min, $min_sum);\n        }\n    }\n    return\
  \ $min;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i]->[$j]\
  \ = [];\n            for my $l (0..$k-1) {\n                $dp->[$i]->[$j]->[$l]\
  \ = [];\n            }\n        }\n    }\n    for my $i (0..$n-1) {\n        for\
  \ my $j (0..$m-1) {\n            for my $l (0..$k-1) {\n                if ($l ==\
  \ 0) {\n                    $dp->[$i]->[$j]->[$l] = [$grid->[$i]->[$j]];\n     \
  \           } else {\n                    my $min = undef;\n                   \
  \ if ($i > 0) {\n                        my $tmp = [@{$dp->[$i-1]->[$j]->[$l-1]}];\n\
  \                        push @$tmp, $grid->[$i]->[$j];\n                      \
  \  if (!defined($min) || $tmp lt $min) {\n                            $min = $tmp;\n\
  \                        }\n                    }\n                    if ($j >\
  \ 0) {\n                        my $tmp = [@{$dp->[$i]->[$j-1]->[$l-1]}];\n    \
  \                    push @$tmp, $grid->[$i]->[$j];\n                        if\
  \ (!defined($min) || $tmp lt $min) {\n                            $min = $tmp;\n\
  \                        }\n                    }\n                    $dp->[$i]->[$j]->[$l]\
  \ = $min;\n                }\n            }\n        }\n    }\n    return $dp->[$n-1]->[$m-1]->[$k-1];\n\
  }"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath\
  \ = [];\n    my $minSum = $n * $n + 1;\n    my $minPathSum = $minSum;\n    my $visited\
  \ = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n    \
  \        $visited->[$i]->[$j] = 0;\n        }\n    }\n    for my $i (0 .. $n - 1)\
  \ {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n           \
  \ my $sum = 0;\n            my $pathSum = 0;\n            dfs($grid, $visited, $i,\
  \ $j, $k, $path, $sum, $pathSum);\n            if ($pathSum < $minPathSum) {\n \
  \               $minPathSum = $pathSum;\n                $minPath = $path;\n   \
  \         }\n        }\n    }\n    return $minPath;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my @dp;\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp[$i][$j]\
  \ = [$grid->[$i][$j]];\n        }\n    }\n    for my $i (1..$k-1) {\n        for\
  \ my $j (0..$n-1) {\n            for my $l (0..$m-1) {\n                my @tmp;\n\
  \                if ($j > 0) {\n                    push @tmp, $dp[$j-1][$l];\n\
  \                }\n                if ($j < $n-1) {\n                    push @tmp,\
  \ $dp[$j+1][$l];\n                }\n                if ($l > 0) {\n           \
  \         push @tmp, $dp[$j][$l-1];\n                }\n                if ($l <\
  \ $m-1) {\n                    push @tmp, $dp[$j][$l+1];\n                }\n  \
  \              my @sorted = sort {\n                    my $len = min(scalar(@$a),\
  \ scalar(@$b));\n                    for my $i (0..$len-1) {\n                 \
  \       return $a->[$i] <=> $b->[$i] if $a->[$i] != $b->[$i];\n                \
  \    }\n                    return scalar(@$a) <=> scalar(@$b);\n              \
  \  } @tmp;\n                $dp[$j][$l] = [@{$sorted[0]}, $grid->[$j][$l]];\n  \
  \          }\n        }\n    }\n    my @res;\n    for my $i (0..$n-1) {\n      \
  \  for my $j (0..$m-1) {\n            if (!@res || $dp[$i][$j] lt \\@res) {\n  \
  \              @res = @{$dp[$i][$j]};\n            }\n        }\n    }\n    return\
  \ \\@"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ [];\n    my $min_sum = $n * $n + 1;\n    my $min_path = [];\n    my $visited =\
  \ [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n      \
  \      $visited->[$i]->[$j] = 0;\n        }\n    }\n    for my $i (0 .. $n - 1)\
  \ {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n           \
  \ my $sum = 0;\n            $visited->[$i]->[$j] = 1;\n            $sum += $grid->[$i]->[$j];\n\
  \            push @$path, $grid->[$i]->[$j];\n            dfs($grid, $i, $j, $k\
  \ - 1, $visited, $path, $sum, $min, $min_sum);\n            $visited->[$i]->[$j]\
  \ = 0;\n        }\n    }\n    return $min;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ $grid->[0][0];\n    my $max = $grid->[$n-1][$m-1];\n    my $minPath = [];\n  \
  \  my $minPaths = [];\n    my $visited = [];\n    for my $i (0..$n-1) {\n      \
  \  for my $j (0..$m-1) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            if ($grid->[$i][$j]\
  \ == $min) {\n                $visited->[$i][$j] = 1;\n                dfs($grid,\
  \ $i, $j, $k, $minPath, $minPaths, $visited);\n                $visited->[$i][$j]\
  \ = 0;\n            }\n        }\n    }\n    return $minPaths->[0];\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $res =\
  \ [];\n    my $min = [];\n    my $min_sum = $n * $n + 1;\n    my $visited = [];\n\
  \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i]->[$j]\
  \ = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
  \ $m - 1) {\n            my $sum = 0;\n            my $path = [];\n            dfs($grid,\
  \ $i, $j, $k, $sum, $path, $visited, $min, $min_sum);\n        }\n    }\n    return\
  \ $min;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n\
  \    my $min_path = [$min];\n    my $visited = {};\n    my $min_path_hash = {};\n\
  \    my $queue = [[0, 0, $min_path]];\n    while (@$queue) {\n        my $curr =\
  \ shift @$queue;\n        my($i, $j, $path) = @$curr;\n        my $path_hash = join(',',\
  \ @$path);\n        if (exists $min_path_hash->{$path_hash}) {\n            next;\n\
  \        }\n        $min_path_hash->{$path_hash} = 1;\n        if (@$path == $k)\
  \ {\n            return $path;\n        }\n        for my $dir ([-1, 0], [1, 0],\
  \ [0, -1], [0, 1]) {\n            my($di, $dj) = @$dir;\n            my $ni = $i\
  \ + $di;\n            my $nj = $j + $dj;\n            if ($ni >= 0 && $ni < $n &&\
  \ $nj >= 0 && $nj < $m) {\n                my $val = $grid->[$ni][$nj];\n      \
  \          if ($val < $min) {\n                    $min = $val;\n              \
  \      $min_path = [$val];\n                }\n                elsif ($val == $min)\
  \ {\n                    push @$min_path, $val;\n                }\n           \
  \     push @$queue, [$ni, $nj, [@$path, $val]];\n            }\n        }\n    }\n\
  \    return $min_path;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min_path = [];\n    my\
  \ $min_sum = $n * $m * $k;\n    my $min_path_sum = $min_sum;\n    my $min_path_len\
  \ = $k;\n    my $min_path_len_sum = $min_sum;\n    my $min_path_len_sum_len = $k;\n\
  \    my $min_path_len_sum_len_sum = $min_sum;\n    my $min_path_len_sum_len_sum_len\
  \ = $k;\n    my $min_path_len_sum_len_sum_len_sum = $min_sum;\n    my $min_path_len_sum_len_sum_len_sum_len\
  \ = $k;\n    my $min_path_len_sum_len_sum_len_sum_len_sum = $min_sum;\n    my $min_path_len_sum_len_sum_len_sum_len_sum_len\
  \ = $k;\n    my $min_path_len_sum_len_sum_len_sum_len_sum_len_sum = $min_sum;\n\
  \    my $min_path_len_sum_len_sum_len_sum_len_sum_len_sum_len = $k;\n    my $min_path_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum\
  \ = $min_sum;\n    my $min_path_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len\
  \ = $k;\n    my $min_path_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum\
  \ = $min_sum;\n    my $min_path_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len\
  \ = $k;\n    my $min_path_len_sum_len_sum_len_sum_len_sum_len_sum"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            my\
  \ $path = [$grid->[$i][$j]];\n            my $visited = [[0] x $m] x $n;\n     \
  \       $visited->[$i][$j] = 1;\n            dfs($grid, $i, $j, $k-1, $path, $visited);\n\
  \            if (!@$min || $path < $min) {\n                $min = $path;\n    \
  \        }\n        }\n    }\n    return $min;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum\
  \ = $n * $m;\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n        for\
  \ my $j (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n\
  \    my $dfs = sub {\n        my($i, $j, $sum, $path) = @_;\n        if ($sum >\
  \ $min_sum) {\n            return;\n        }\n        if ($sum == $k) {\n     \
  \       if ($sum < $min_sum) {\n                $min_sum = $sum;\n             \
  \   $min = $path;\n            } elsif ($sum == $min_sum) {\n                my\
  \ $cmp = sub {\n                    my($a, $b) = @_;\n                    for my\
  \ $i (0 .. $k - 1) {\n                        if ($a->[$i] < $b->[$i]) {\n     \
  \                       return -1;\n                        } elsif ($a->[$i] >\
  \ $b->[$i]) {\n                            return 1;\n                        }\n\
  \                    }\n                    return 0;\n                };\n    \
  \            if ($cmp->($path, $min) < 0) {\n                    $min = $path;\n\
  \                }\n            }\n            return;\n        }\n        $visited->[$i][$j]\
  \ = 1;\n        my $dirs = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n        for my $dir\
  \ (@$dirs) {\n            my $x = $i + $dir->[0];\n            my $y = $j + $dir->[1];\n\
  \            if ($x >= 0 && $x < $n && $y >= 0 && $y < $m && !$visited->[$x][$y])\
  \ {\n                my $path_copy = [@$path];\n                push @$path_copy,\
  \ $grid->[$x][$y];\n                $dfs"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ [map { [map { [$_, []] } (0..$n*$m)] } (0..$k)];\n    for my $i (0..$n-1) {\n\
  \        for my $j (0..$m-1) {\n            for my $l (0..$k-1) {\n            \
  \    my $val = $grid->[$i][$j];\n                my $cur = $min->[$l][$i*$m+$j];\n\
  \                if ($l == 0) {\n                    $cur->[0] = $val;\n       \
  \             $cur->[1] = [$val];\n                } else {\n                  \
  \  my $prev = $min->[$l-1];\n                    if ($i > 0) {\n               \
  \         my $up = $prev->[($i-1)*$m+$j];\n                        if ($up->[0]\
  \ < $cur->[0]) {\n                            $cur->[0] = $up->[0];\n          \
  \                  $cur->[1] = [@{$up->[1]}, $val];\n                        } elsif\
  \ ($up->[0] == $cur->[0]) {\n                            my $up_lst = [@{$up->[1]},\
  \ $val];\n                            if (lexicographically_less($up_lst, $cur->[1]))\
  \ {\n                                $cur->[1] = $up_lst;\n                    \
  \        }\n                        }\n                    }\n                 \
  \   if ($j > 0) {\n                        my $left = $prev->[$i*$m+$j-1];\n   \
  \                     if ($left->[0] < $cur->[0]) {\n                          \
  \  $cur->[0] = $left->[0];\n                            $cur->[1] = [@{$left->[1]},\
  \ $val];\n                        } elsif ($left->[0] == $cur->[0]) {\n        \
  \                    my $left_lst = [@{$left->[1]}, $val];"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my @dp;\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp[$i][$j]\
  \ = [];\n        }\n    }\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
  \ {\n            my $cur = $grid->[$i][$j];\n            my $cur_path = [$cur];\n\
  \            if ($i > 0) {\n                my $prev_path = $dp[$i-1][$j];\n   \
  \             if (scalar(@$prev_path) < $k) {\n                    if (scalar(@$prev_path)\
  \ < scalar(@$cur_path)) {\n                        $cur_path = $prev_path;\n   \
  \                 } elsif (scalar(@$prev_path) == scalar(@$cur_path)) {\n      \
  \                  my $cmp = lexicographic_compare($prev_path, $cur_path);\n   \
  \                     if ($cmp < 0) {\n                            $cur_path = $prev_path;\n\
  \                        }\n                    }\n                }\n         \
  \   }\n            if ($j > 0) {\n                my $prev_path = $dp[$i][$j-1];\n\
  \                if (scalar(@$prev_path) < $k) {\n                    if (scalar(@$prev_path)\
  \ < scalar(@$cur_path)) {\n                        $cur_path = $prev_path;\n   \
  \                 } elsif (scalar(@$prev_path) == scalar(@$cur_path)) {\n      \
  \                  my $cmp = lexicographic_compare($prev_path, $cur_path);\n   \
  \                     if ($cmp < 0) {\n                            $cur_path = $prev_path;\n\
  \                        }\n                    }\n                }\n         \
  \   }\n            if (scalar(@$cur_path) < $k) {\n                push @$cur_path,\
  \ $cur;\n"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath\
  \ = [];\n    my $minSum = $n * $n + 1;\n    for my $i (0 .. $n - 1) {\n        for\
  \ my $j (0 .. $m - 1) {\n            my $path = [];\n            my $sum = 0;\n\
  \            dfs($grid, $i, $j, $k, $path, $sum);\n            if ($sum < $minSum)\
  \ {\n                $minSum = $sum;\n                $minPath = $path;\n      \
  \      }\n        }\n    }\n    return $minPath;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i]->[$j]\
  \ = [];\n            for my $l (0..$k-1) {\n                $dp->[$i]->[$j]->[$l]\
  \ = [];\n            }\n        }\n    }\n    for my $i (0..$n-1) {\n        for\
  \ my $j (0..$m-1) {\n            for my $l (0..$k-1) {\n                if ($l ==\
  \ 0) {\n                    $dp->[$i]->[$j]->[$l] = [$grid->[$i]->[$j]];\n     \
  \           } else {\n                    my $min = [];\n                    if\
  \ ($i > 0) {\n                        my $tmp = [@{$dp->[$i-1]->[$j]->[$l-1]}];\n\
  \                        push @$tmp, $grid->[$i]->[$j];\n                      \
  \  if (compare($tmp, $min) < 0) {\n                            $min = $tmp;\n  \
  \                      }\n                    }\n                    if ($j > 0)\
  \ {\n                        my $tmp = [@{$dp->[$i]->[$j-1]->[$l-1]}];\n       \
  \                 push @$tmp, $grid->[$i]->[$j];\n                        if (compare($tmp,\
  \ $min) < 0) {\n                            $min = $tmp;\n                     \
  \   }\n                    }\n                    $dp->[$i]->[$j]->[$l] = $min;\n\
  \                }\n            }\n        }\n    }\n    return $dp->[$n-1]->[$m-1]->[$k-1];\n\
  }"
- "    my @ans;\n    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited\
  \ = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            my\
  \ $res = dfs($grid, $i, $j, $k, $visited);\n            if (@$res < @ans || @ans\
  \ == 0) {\n                @ans = @$res;\n            }\n        }\n    }\n    return\
  \ \\@ans;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $dp = [];\n    for my $i\
  \ (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i][$j] = [];\n\
  \            for my $l (0..$k-1) {\n                $dp->[$i][$j][$l] = {};\n  \
  \          }\n        }\n    }\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
  \ {\n            for my $l (0..$k-1) {\n                if ($l == 0) {\n       \
  \             $dp->[$i][$j][$l]->{$grid->[$i][$j]} = 1;\n                } else\
  \ {\n                    for my $x ($i-1..$i+1) {\n                        for my\
  \ $y ($j-1..$j+1) {\n                            if ($x >= 0 && $x < $n && $y >=\
  \ 0 && $y < $m) {\n                                for my $v (keys %{$dp->[$x][$y][$l-1]})\
  \ {\n                                    $dp->[$i][$j][$l]->{$v} = 1;\n        \
  \                        }\n                            }\n                    \
  \    }\n                    }\n                }\n            }\n        }\n   \
  \ }\n    my $min = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n\
  \            for my $v (keys %{$dp->[$i][$j][$k-1]}) {\n                if (!@$min\
  \ || $v < $min->[0]) {\n                    $min = [$v];\n                }\n  \
  \          }\n        }\n    }\n    return $min;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath\
  \ = [];\n    my $minSum = $n * $n + 1;\n    for my $i (0 .. $n - 1) {\n        for\
  \ my $j (0 .. $m - 1) {\n            my $path = [];\n            my $sum = 0;\n\
  \            my $visited = {};\n            dfs($grid, $i, $j, $k, $path, $sum,\
  \ $visited, $minPath, $minSum);\n        }\n    }\n    return $minPath;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ [];\n    my $min_sum = $n * $n + 1;\n    my $visited = [];\n    for my $i (0 ..\
  \ $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i]->[$j]\
  \ = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
  \ $m - 1) {\n            my $sum = 0;\n            my $path = [];\n            dfs($grid,\
  \ $i, $j, $k, $sum, $path, $visited, $min, $min_sum);\n        }\n    }\n    return\
  \ $min;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ [];\n    my $min_sum = $n * $n + 1;\n    my $min_sum_k = $min_sum;\n    my $min_k\
  \ = [];\n    my $min_k_sum = $min_sum;\n    my $min_k_sum_k = $min_sum;\n    my\
  \ $min_k_sum_k_k = $min_sum;\n    my $min_k_sum_k_k_k = $min_sum;\n    my $min_k_sum_k_k_k_k\
  \ = $min_sum;\n    my $min_k_sum_k_k_k_k_k = $min_sum;\n    my $min_k_sum_k_k_k_k_k_k\
  \ = $min_sum;\n    my $min_k_sum_k_k_k_k_k_k_k = $min_sum;\n    my $min_k_sum_k_k_k_k_k_k_k_k\
  \ = $min_sum;\n    my $min_k_sum_k_k_k_k_k_k_k_k_k = $min_sum;\n    my $min_k_sum_k_k_k_k_k_k_k_k_k_k\
  \ = $min_sum;\n    my $min_k_sum_k_k_k_k_k_k_k_k_k_k_k = $min_sum;\n    my $min_k_sum_k_k_k_k_k_k_k_k_k_k_k_k\
  \ = $min_sum;\n    my $min_k_sum_k_k_k_k_k_k_k_k_k_k_k_k_k = $min_sum;\n    my $min_k_sum_k_k_k_k_k_k_k_k_k_k_k_k_k_k\
  \ = $min_sum"
- "    my $n = @$grid;\n    my @path;\n    my $min = $n * $n;\n    my $min_path;\n\
  \    my $min_path_idx;\n    my $min_path_idx_i;\n    my $min_path_idx_j;\n    my\
  \ $min_path_idx_k;\n    my $min_path_idx_l;\n    my $min_path_idx_m;\n    my $min_path_idx_n;\n\
  \    my $min_path_idx_o;\n    my $min_path_idx_p;\n    my $min_path_idx_q;\n   \
  \ my $min_path_idx_r;\n    my $min_path_idx_s;\n    my $min_path_idx_t;\n    my\
  \ $min_path_idx_u;\n    my $min_path_idx_v;\n    my $min_path_idx_w;\n    my $min_path_idx_x;\n\
  \    my $min_path_idx_y;\n    my $min_path_idx_z;\n    my $min_path_idx_aa;\n  \
  \  my $min_path_idx_ab;\n    my $min_path_idx_ac;\n    my $min_path_idx_ad;\n  \
  \  my $min_path_idx_ae;\n    my $min_path_idx_af;\n    my $min_path_idx_ag;\n  \
  \  my $min_path_idx_ah;\n    my $min_path_idx_ai;\n    my $min_path_idx_aj;\n  \
  \  my $min_path_idx_ak;\n    my $min_path_idx_al;\n    my $min_path_idx_am;\n  \
  \  my $min_path_idx_an;\n    my $min_path_idx_ao;\n    my $min_path_idx_ap;\n  \
  \  my $min_path_idx_aq;\n    my $min_path_idx"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $dp = [];\n    for my $i\
  \ (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i][$j] = [];\n\
  \            for my $l (0..$k-1) {\n                $dp->[$i][$j][$l] = undef;\n\
  \            }\n        }\n    }\n    my $min = undef;\n    for my $i (0..$n-1)\
  \ {\n        for my $j (0..$m-1) {\n            my $cur = $grid->[$i][$j];\n   \
  \         if ($i > 0) {\n                my $prev = $dp->[$i-1][$j][0];\n      \
  \          if (defined($prev)) {\n                    my $new = [@$prev, $cur];\n\
  \                    if (!defined($min) || $new < $min) {\n                    \
  \    $min = $new;\n                    }\n                    $dp->[$i][$j][0] =\
  \ $new;\n                }\n            }\n            if ($j > 0) {\n         \
  \       my $prev = $dp->[$i][$j-1][0];\n                if (defined($prev)) {\n\
  \                    my $new = [@$prev, $cur];\n                    if (!defined($min)\
  \ || $new < $min) {\n                        $min = $new;\n                    }\n\
  \                    $dp->[$i][$j][0] = $new;\n                }\n            }\n\
  \            if (!defined($dp->[$i][$j][0])) {\n                $dp->[$i][$j][0]\
  \ = [$cur];\n            }\n            for my $l (1..$k-1) {\n                if\
  \ ($i > 0) {\n                    my $prev = $dp->[$i-1][$j][$l-1];\n          \
  \          if (defined($prev)) {\n                        my $new = [@$prev, $cur];\n\
  \                        if (!defined($min) || $new < $min) {\n                \
  \            $min"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum\
  \ = $n * $m + 1;\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n       \
  \ for my $j (0 .. $m - 1) {\n            $visited->[$i]->[$j] = 0;\n        }\n\
  \    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n     \
  \       my $path = [];\n            my $sum = 0;\n            dfs($grid, $i, $j,\
  \ $k, $path, $sum, $min, $min_sum, $visited);\n        }\n    }\n    return $min;\n\
  }"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $visited\
  \ = {};\n    my $minPath = [];\n    my $minSum = $n * $n + 1;\n    my $minPathSum\
  \ = $minSum;\n    my $minPathVal = $minSum;\n    my $minPathValIdx = $k + 1;\n \
  \   my $minPathValIdx2 = $k + 1;\n    my $minPathVal2 = $minSum;\n    my $minPathValIdx3\
  \ = $k + 1;\n    my $minPathVal3 = $minSum;\n    my $minPathValIdx4 = $k + 1;\n\
  \    my $minPathVal4 = $minSum;\n    my $minPathValIdx5 = $k + 1;\n    my $minPathVal5\
  \ = $minSum;\n    my $minPathValIdx6 = $k + 1;\n    my $minPathVal6 = $minSum;\n\
  \    my $minPathValIdx7 = $k + 1;\n    my $minPathVal7 = $minSum;\n    my $minPathValIdx8\
  \ = $k + 1;\n    my $minPathVal8 = $minSum;\n    my $minPathValIdx9 = $k + 1;\n\
  \    my $minPathVal9 = $minSum;\n    my $minPathValIdx10 = $k + 1;\n    my $minPathVal10\
  \ = $minSum;\n    my $minPathValIdx11 = $k + 1;\n    my $minPathVal11 = $minSum;\n\
  \    my $minPathValIdx12 = $k + 1;\n    my $minPathVal12 = $minSum;\n    my $minPathValIdx13\
  \ = $k + 1;\n    my $minPathVal13 = $minSum;\n    my $minPathValIdx14 = $k + 1;\n\
  \    my $minPathVal14 = $minSum;\n    my $minPathValIdx15 = $k + 1;\n    my $minPathVal15\
  \ = $minSum;\n    my $"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum\
  \ = $n * $m + 1;\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n       \
  \ for my $j (0 .. $m - 1) {\n            $visited->[$i]->[$j] = 0;\n        }\n\
  \    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n     \
  \       my $path = [];\n            my $sum = 0;\n            $visited->[$i]->[$j]\
  \ = 1;\n            push @$path, $grid->[$i]->[$j];\n            $sum += $grid->[$i]->[$j];\n\
  \            dfs($grid, $i, $j, $k - 1, $visited, $path, $sum, $min, $min_sum);\n\
  \            $visited->[$i]->[$j] = 0;\n        }\n    }\n    return $min;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ $grid->[0][0];\n    my $max = $grid->[0][0];\n    for my $i (0..$n-1) {\n    \
  \    for my $j (0..$m-1) {\n            $min = $grid->[$i][$j] if $grid->[$i][$j]\
  \ < $min;\n            $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n     \
  \   }\n    }\n    my $min_path = [];\n    my $min_sum = $max * $k;\n    for my $i\
  \ (0..$n-1) {\n        for my $j (0..$m-1) {\n            my $path = [];\n     \
  \       my $sum = 0;\n            my $visited = [];\n            for my $i (0..$n-1)\
  \ {\n                for my $j (0..$m-1) {\n                    $visited->[$i][$j]\
  \ = 0;\n                }\n            }\n            $visited->[$i][$j] = 1;\n\
  \            push @$path, $grid->[$i][$j];\n            $sum += $grid->[$i][$j];\n\
  \            dfs($grid, $i, $j, $k-1, $path, $sum, $visited, $min_path, $min_sum);\n\
  \        }\n    }\n    return $min_path;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ [];\n    my $min_sum = $n * $n + 1;\n    my $visited = [];\n    for my $i (0 ..\
  \ $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i]->[$j]\
  \ = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
  \ $m - 1) {\n            my $sum = 0;\n            my $path = [];\n            dfs($grid,\
  \ $i, $j, $k, $visited, $sum, $path, $min, $min_sum);\n        }\n    }\n    return\
  \ $min;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my @res;\n\
  \    my $min = $n * $m;\n    my @path;\n    my $visited = {};\n    for (my $i =\
  \ 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            my\
  \ $key = \"$i,$j\";\n            $visited->{$key} = 0;\n        }\n    }\n    for\
  \ (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n     \
  \       my $key = \"$i,$j\";\n            $visited->{$key} = 1;\n            my\
  \ @tmp = ($grid->[$i][$j]);\n            dfs($grid, $k, $i, $j, $visited, \\@tmp,\
  \ \\@res, \\$min);\n            $visited->{$key} = 0;\n        }\n    }\n    return\
  \ @res;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $visited\
  \ = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    my $min = [];\n    my $min_sum = $n * $m + 1;\n  \
  \  my $min_path = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n\
  \            $visited->[$i][$j] = 1;\n            my $path = [];\n            push\
  \ @$path, $grid->[$i][$j];\n            my $sum = $grid->[$i][$j];\n           \
  \ my $ret = dfs($grid, $visited, $i, $j, $k, $path, $sum, $min, $min_sum, $min_path);\n\
  \            $visited->[$i][$j] = 0;\n        }\n    }\n    return $min_path;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ $grid->[0][0];\n    my $max = $grid->[0][0];\n    for my $i (0..$n-1) {\n    \
  \    for my $j (0..$m-1) {\n            $min = $grid->[$i][$j] if $grid->[$i][$j]\
  \ < $min;\n            $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n     \
  \   }\n    }\n    my $minPath = [];\n    my $minPathSum = $max * $k;\n    my $minPathSum2\
  \ = $max * $k;\n    my $minPath2 = [];\n    my $visited = {};\n    for my $i (0..$n-1)\
  \ {\n        for my $j (0..$m-1) {\n            my $path = [];\n            my $sum\
  \ = 0;\n            my $sum2 = 0;\n            my $path2 = [];\n            my $visited2\
  \ = {};\n            for my $x (0..$n-1) {\n                for my $y (0..$m-1)\
  \ {\n                    $visited2->{$x}{$y} = 0;\n                }\n         \
  \   }\n            dfs($grid, $i, $j, $k, $path, $sum, $path2, $sum2, $visited2);\n\
  \            if ($sum < $minPathSum) {\n                $minPathSum = $sum;\n  \
  \              $minPath = $path;\n            }\n            if ($sum2 < $minPathSum2)\
  \ {\n                $minPathSum2 = $sum2;\n                $minPath2 = $path2;\n\
  \            }\n        }\n    }\n    return $minPath;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ [];\n    my $min_sum = $n * $n + 1;\n    my $min_path = [];\n    my $visited =\
  \ [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n      \
  \      $visited->[$i]->[$j] = 0;\n        }\n    }\n    for my $i (0 .. $n - 1)\
  \ {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n           \
  \ my $sum = 0;\n            $visited->[$i]->[$j] = 1;\n            dfs($grid, $i,\
  \ $j, $k, $path, $sum, $visited);\n            $visited->[$i]->[$j] = 0;\n     \
  \       if ($sum < $min_sum) {\n                $min_sum = $sum;\n             \
  \   $min_path = $path;\n            }\n        }\n    }\n    return $min_path;\n\
  }"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ [];\n    my $min_sum = $n * $n + 1;\n    my $min_path = [];\n    my $visited =\
  \ {};\n    my $path = [];\n    my $sum = 0;\n    my $i = 0;\n    my $j = 0;\n  \
  \  my $dirs = [\n        [0, 1],\n        [0, -1],\n        [1, 0],\n        [-1,\
  \ 0],\n    ];\n    my $dfs = sub {\n        my($i, $j, $k, $sum, $path) = @_;\n\
  \        if ($k == 0) {\n            if ($sum < $min_sum) {\n                $min_sum\
  \ = $sum;\n                $min_path = $path;\n            }\n            return;\n\
  \        }\n        for my $dir (@$dirs) {\n            my $x = $i + $dir->[0];\n\
  \            my $y = $j + $dir->[1];\n            if ($x >= 0 && $x < $n && $y >=\
  \ 0 && $y < $m && !$visited->{\"$x,$y\"}) {\n                $visited->{\"$x,$y\"\
  } = 1;\n                push @$path, $grid->[$x][$y];\n                $dfs->($x,\
  \ $y, $k - 1, $sum + $grid->[$x][$y], $path);\n                pop @$path;\n   \
  \             $visited->{\"$x,$y\"} = 0;\n            }\n        }\n    };\n   \
  \ $dfs->($i, $j, $k, $sum, $path);\n    return $min_path;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ undef;\n    my $minPath = undef;\n    for (my $i = 0; $i < $n; $i++) {\n     \
  \   for (my $j = 0; $j < $m; $j++) {\n            my $path = findPath($grid, $i,\
  \ $j, $k);\n            if (!defined($min) || $path lt $min) {\n               \
  \ $min = $path;\n                $minPath = [$grid->[$i][$j]];\n            }\n\
  \        }\n    }\n    return $minPath;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ [map { [map { [$_] } @$_] } @$grid];\n    for my $i (0 .. $n - 1) {\n        for\
  \ my $j (0 .. $m - 1) {\n            for my $d (0 .. 3) {\n                my $x\
  \ = $i + $dx[$d];\n                my $y = $j + $dy[$d];\n                if ($x\
  \ >= 0 && $x < $n && $y >= 0 && $y < $m) {\n                    my $l = scalar(@{$min->[$x][$y]});\n\
  \                    if ($l < $k) {\n                        my $v = $grid->[$i][$j];\n\
  \                        my $p = $min->[$i][$j];\n                        my $q\
  \ = $min->[$x][$y];\n                        if ($l == 0 || $p->[0] < $q->[0]) {\n\
  \                            @$q = @$p;\n                            $q->[$l] =\
  \ $v;\n                        }\n                    }\n                }\n   \
  \         }\n        }\n    }\n    return $min->[$n - 1][$m - 1];\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i]->[$j]\
  \ = [];\n            for my $l (0..$k-1) {\n                $dp->[$i]->[$j]->[$l]\
  \ = [];\n            }\n        }\n    }\n    for my $i (0..$n-1) {\n        for\
  \ my $j (0..$m-1) {\n            $dp->[$i]->[$j]->[0] = [$grid->[$i]->[$j]];\n \
  \       }\n    }\n    for my $l (1..$k-1) {\n        for my $i (0..$n-1) {\n   \
  \         for my $j (0..$m-1) {\n                my $min = undef;\n            \
  \    for my $d (0..3) {\n                    my $x = $i + $dx[$d];\n           \
  \         my $y = $j + $dy[$d];\n                    if ($x >= 0 && $x < $n && $y\
  \ >= 0 && $y < $m) {\n                        my $cur = $dp->[$x]->[$y]->[$l-1];\n\
  \                        if (!defined($min) || $cur->[0] < $min->[0]) {\n      \
  \                      $min = $cur;\n                        }\n               \
  \     }\n                }\n                if (defined($min)) {\n             \
  \       $dp->[$i]->[$j]->[$l] = [@$min, $grid->[$i]->[$j]];\n                }\n\
  \            }\n        }\n    }\n    my $min = undef;\n    for my $i (0..$n-1)\
  \ {\n        for my $j (0..$m-1) {\n            my $cur = $dp->[$i]->[$j]->[$k-1];\n\
  \            if"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $visited\
  \ = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m;\
  \ $j++) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $min =\
  \ [];\n    my $min_sum = $n * $m * $n * $m;\n    my $min_path = [];\n    my $path\
  \ = [];\n    my $sum = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        for (my\
  \ $j = 0; $j < $m; $j++) {\n            $sum = 0;\n            $path = [];\n   \
  \         $visited->[$i][$j] = 1;\n            dfs($grid, $visited, $i, $j, $k,\
  \ $sum, $path);\n            $visited->[$i][$j] = 0;\n        }\n    }\n    return\
  \ $min_path;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my @dp;\n    for my $i (0..$n-1)\
  \ {\n        for my $j (0..$m-1) {\n            $dp[$i][$j] = [$grid->[$i][$j]];\n\
  \        }\n    }\n    for my $i (1..$k-1) {\n        for my $j (0..$n-1) {\n  \
  \          for my $l (0..$m-1) {\n                my $min = $dp[$j][$l][$i-1];\n\
  \                my $min_path = $dp[$j][$l];\n                if ($j > 0) {\n  \
  \                  if ($dp[$j-1][$l][$i-1] < $min) {\n                        $min\
  \ = $dp[$j-1][$l][$i-1];\n                        $min_path = $dp[$j-1][$l];\n \
  \                   }\n                }\n                if ($j < $n-1) {\n   \
  \                 if ($dp[$j+1][$l][$i-1] < $min) {\n                        $min\
  \ = $dp[$j+1][$l][$i-1];\n                        $min_path = $dp[$j+1][$l];\n \
  \                   }\n                }\n                if ($l > 0) {\n      \
  \              if ($dp[$j][$l-1][$i-1] < $min) {\n                        $min =\
  \ $dp[$j][$l-1][$i-1];\n                        $min_path = $dp[$j][$l-1];\n   \
  \                 }\n                }\n                if ($l < $m-1) {\n     \
  \               if ($dp[$j][$l+1][$i-1] < $min) {\n                        $min\
  \ = $dp[$j][$l+1][$i-1];\n                        $min_path = $dp[$j][$l+1];\n \
  \                   }\n                }\n                $dp[$j][$l] = [@$min_path,\
  \ $grid"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ [];\n    my $min_sum = $n * $n + 1;\n    my $visited = [];\n    for my $i (0 ..\
  \ $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i]->[$j]\
  \ = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
  \ $m - 1) {\n            my $path = [];\n            my $sum = 0;\n            $visited->[$i]->[$j]\
  \ = 1;\n            dfs($grid, $i, $j, $k, $path, $sum, $visited, $min, $min_sum);\n\
  \            $visited->[$i]->[$j] = 0;\n        }\n    }\n    return $min;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $dp = [];\n    my $prev\
  \ = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i][$j]\
  \ = [$grid->[$i][$j]];\n            $prev->[$i][$j] = [];\n        }\n    }\n  \
  \  for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            for my $x ($i-1..$i+1)\
  \ {\n                for my $y ($j-1..$j+1) {\n                    next if $x <\
  \ 0 || $x >= $n || $y < 0 || $y >= $m;\n                    next if $x == $i &&\
  \ $y == $j;\n                    if (compare($dp->[$x][$y], $dp->[$i][$j]) < 0)\
  \ {\n                        $dp->[$i][$j] = $dp->[$x][$y];\n                  \
  \      $prev->[$i][$j] = [$x, $y];\n                    }\n                }\n \
  \           }\n        }\n    }\n    my $i = $n-1;\n    my $j = $m-1;\n    my $path\
  \ = [];\n    while ($k > 0) {\n        push @$path, $grid->[$i][$j];\n        ($i,\
  \ $j) = @{$prev->[$i][$j]};\n        $k--;\n    }\n    return $path;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
  \ = [];\n    my $min_path_sum = $n * $n + 1;\n    my $min_path_sum_k = $min_path_sum;\n\
  \    my $min_path_k = [];\n    my $min_path_sum_k1 = $min_path_sum;\n    my $min_path_k1\
  \ = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n    \
  \        my $path_sum = $grid->[$i][$j];\n            my $path = [$grid->[$i][$j]];\n\
  \            my $path_sum_k = $path_sum;\n            my $path_k = [$grid->[$i][$j]];\n\
  \            my $path_sum_k1 = $path_sum;\n            my $path_k1 = [$grid->[$i][$j]];\n\
  \            for my $step (1 .. $k - 1) {\n                my $min_path_sum_k_step\
  \ = $min_path_sum;\n                my $min_path_k_step = [];\n                my\
  \ $min_path_sum_k1_step = $min_path_sum;\n                my $min_path_k1_step =\
  \ [];\n                for my $d (0 .. 3) {\n                    my $x = $i + $dx[$d];\n\
  \                    my $y = $j + $dy[$d];\n                    if ($x >= 0 && $x\
  \ < $n && $y >= 0 && $y < $m) {\n                        my $path_sum_k_step = $path_sum_k\
  \ + $grid->[$x][$y];\n                        my $path_k_step = [@$path_k, $grid->[$x][$y]];\n\
  \                        if ($path_sum_k_step < $min_path_sum_k_step) {\n      \
  \                      $min_path_sum_k_step = $path_sum_k"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ [];\n    my $min_sum = $n * $n + 1;\n    my $min_path = [];\n    my $visited =\
  \ [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n      \
  \      $visited->[$i]->[$j] = 0;\n        }\n    }\n    for my $i (0 .. $n - 1)\
  \ {\n        for my $j (0 .. $m - 1) {\n            my $sum = 0;\n            my\
  \ $path = [];\n            my $visited = [];\n            for my $i (0 .. $n - 1)\
  \ {\n                for my $j (0 .. $m - 1) {\n                    $visited->[$i]->[$j]\
  \ = 0;\n                }\n            }\n            dfs($grid, $i, $j, $k, $sum,\
  \ $path, $visited);\n            if ($sum < $min_sum) {\n                $min_sum\
  \ = $sum;\n                $min_path = $path;\n            }\n        }\n    }\n\
  \    return $min_path;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i]->[$j]\
  \ = [];\n            for my $l (0..$k-1) {\n                $dp->[$i]->[$j]->[$l]\
  \ = [];\n            }\n        }\n    }\n    for my $i (0..$n-1) {\n        for\
  \ my $j (0..$m-1) {\n            $dp->[$i]->[$j]->[0] = [$grid->[$i]->[$j]];\n \
  \       }\n    }\n    for my $l (1..$k-1) {\n        for my $i (0..$n-1) {\n   \
  \         for my $j (0..$m-1) {\n                my $min = [];\n               \
  \ if ($i > 0) {\n                    my $tmp = [@{$dp->[$i-1]->[$j]->[$l-1]}];\n\
  \                    push @$tmp, $grid->[$i]->[$j];\n                    if (compare($tmp,\
  \ $min) < 0) {\n                        $min = $tmp;\n                    }\n  \
  \              }\n                if ($i < $n-1) {\n                    my $tmp\
  \ = [@{$dp->[$i+1]->[$j]->[$l-1]}];\n                    push @$tmp, $grid->[$i]->[$j];\n\
  \                    if (compare($tmp, $min) < 0) {\n                        $min\
  \ = $tmp;\n                    }\n                }\n                if ($j > 0)\
  \ {\n                    my $tmp = [@{$dp->[$i]->[$j-1]->[$l-1]}];\n           \
  \         push @$tmp, $grid->[$i]->[$j];\n                    if (compare($tmp,\
  \ $min) < 0) {\n                        $min = $"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i]->[$j]\
  \ = [];\n            for my $l (0..$k-1) {\n                $dp->[$i]->[$j]->[$l]\
  \ = [];\n            }\n        }\n    }\n    for my $i (0..$n-1) {\n        for\
  \ my $j (0..$m-1) {\n            $dp->[$i]->[$j]->[0] = [$grid->[$i]->[$j]];\n \
  \       }\n    }\n    for my $l (1..$k-1) {\n        for my $i (0..$n-1) {\n   \
  \         for my $j (0..$m-1) {\n                my $min = [];\n               \
  \ if ($i > 0) {\n                    if (scalar(@{$dp->[$i-1]->[$j]->[$l-1]}) ==\
  \ 0) {\n                        $min = [];\n                    } else {\n     \
  \                   $min = [@{$dp->[$i-1]->[$j]->[$l-1]}];\n                   \
  \ }\n                }\n                if ($j > 0) {\n                    if (scalar(@{$dp->[$i]->[$j-1]->[$l-1]})\
  \ == 0) {\n                        if (scalar(@$min) == 0) {\n                 \
  \           $min = [];\n                        }\n                    } else {\n\
  \                        my $cmp = compare($dp->[$i]->[$j-1]->[$l-1], $min);\n \
  \                       if ($cmp == -1) {\n                            $min = [@{$dp->[$i]->[$j-1]->[$l-1]}];\n\
  \                        } elsif ($cmp == 0) {\n                            $min\
  \ = [];\n                        }"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i]->[$j]\
  \ = [];\n            for my $l (0..$k-1) {\n                $dp->[$i]->[$j]->[$l]\
  \ = [];\n            }\n        }\n    }\n    for my $i (0..$n-1) {\n        for\
  \ my $j (0..$m-1) {\n            $dp->[$i]->[$j]->[0] = [$grid->[$i]->[$j]];\n \
  \       }\n    }\n    for my $l (1..$k-1) {\n        for my $i (0..$n-1) {\n   \
  \         for my $j (0..$m-1) {\n                my $min = [];\n               \
  \ for my $d (0..3) {\n                    my $x = $i + $dx[$d];\n              \
  \      my $y = $j + $dy[$d];\n                    if ($x >= 0 && $x < $n && $y >=\
  \ 0 && $y < $m) {\n                        my $cur = $dp->[$x]->[$y]->[$l-1];\n\
  \                        if (!@$min || $cur->[0] < $min->[0]) {\n              \
  \              $min = $cur;\n                        }\n                    }\n\
  \                }\n                $dp->[$i]->[$j]->[$l] = [@$min, $grid->[$i]->[$j]];\n\
  \            }\n        }\n    }\n    my $min = [];\n    for my $i (0..$n-1) {\n\
  \        for my $j (0..$m-1) {\n            my $cur = $dp->[$i]->[$j]->[$k-1];\n\
  \            if (!@$min || $cur->[0] < $min->[0"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $minPath = [];\n    my\
  \ $minSum = $n * $m + 1;\n    my $minPathSum = $n * $m + 1;\n    my $minPathLen\
  \ = $n * $m + 1;\n    my $minPathIdx = 0;\n    my $minPathIdxSum = 0;\n    my $minPathIdxLen\
  \ = 0;\n    my $minPathIdxSumLen = 0;\n    for my $i (0 .. $n - 1) {\n        for\
  \ my $j (0 .. $m - 1) {\n            my $sum = $grid->[$i][$j];\n            my\
  \ $path = [$grid->[$i][$j]];\n            my $pathLen = 1;\n            my $pathIdx\
  \ = $i * $m + $j;\n            my $pathIdxSum = $sum * $n * $m + $pathIdx;\n   \
  \         my $pathIdxLen = $pathLen * $n * $m + $pathIdx;\n            my $pathIdxSumLen\
  \ = $pathIdxSum * $n * $m + $pathIdxLen;\n            my $visited = {};\n      \
  \      $visited->{$i}->{$j} = 1;\n            my $q = [];\n            push @$q,\
  \ [$i, $j, $sum, $path, $pathLen, $pathIdx, $pathIdxSum, $pathIdxLen, $pathIdxSumLen];\n\
  \            while (@$q) {\n                my $cur = shift @$q;\n             \
  \   my $x = $cur->[0];\n                my $y = $cur->[1];\n                my $sum\
  \ = $cur->[2];\n                my $path = $cur->[3];\n                my $pathLen\
  \ = $cur->[4];\n                my $pathIdx = $cur->[5];\n                my $pathIdxSum\
  \ = $cur->[6];\n                my $pathIdxLen = $cur->[7];\n                my\
  \ $pathIdxSumLen = $cur->"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my @path;\n    my $min_path\
  \ = [@path];\n    my $min_sum = $n * $m + 1;\n    my $min_path_sum = $min_sum;\n\
  \    my $min_path_len = $k + 1;\n    my $min_path_sum_len = $min_path_len;\n   \
  \ my $min_path_sum_len_lex = [@path];\n    my $min_path_sum_len_lex_sum = $min_sum;\n\
  \    my $min_path_sum_len_lex_sum_len = $min_path_len;\n    my $min_path_sum_len_lex_sum_len_lex\
  \ = [@path];\n    my $min_path_sum_len_lex_sum_len_lex_sum = $min_sum;\n    my $min_path_sum_len_lex_sum_len_lex_sum_len\
  \ = $min_path_len;\n    my $min_path_sum_len_lex_sum_len_lex_sum_len_lex = [@path];\n\
  \    my $min_path_sum_len_lex_sum_len_lex_sum_len_lex_sum = $min_sum;\n    my $min_path_sum_len_lex_sum_len_lex_sum_len_lex_sum_len\
  \ = $min_path_len;\n    my $min_path_sum_len_lex_sum_len_lex_sum_len_lex_sum_len_lex\
  \ = [@path];\n    my $min_path_sum_len_lex_sum_len_lex_sum_len_lex_sum_len_lex_sum\
  \ = $min_sum;\n    my $min_path_sum_len_lex_sum_len_lex_sum_len_lex_sum_len_lex_sum_len\
  \ = $min_path_len;\n    my $min_path_sum_len_lex_sum_len_lex_sum_len_lex_sum_len_lex_sum_len_lex\
  \ = [@"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
  \ = [];\n    my $min_sum = $n * $n + 1;\n    my $min_path_sum = $min_sum;\n    my\
  \ $min_path_sum_k = $min_sum;\n    my $min_path_k = [];\n    my $min_path_k_sum\
  \ = $min_sum;\n    my $min_path_k_sum_k = $min_sum;\n    my $min_path_k_sum_k_k\
  \ = $min_sum;\n    my $min_path_k_sum_k_k_k = $min_sum;\n    my $min_path_k_sum_k_k_k_k\
  \ = $min_sum;\n    my $min_path_k_sum_k_k_k_k_k = $min_sum;\n    my $min_path_k_sum_k_k_k_k_k_k\
  \ = $min_sum;\n    my $min_path_k_sum_k_k_k_k_k_k_k = $min_sum;\n    my $min_path_k_sum_k_k_k_k_k_k_k_k\
  \ = $min_sum;\n    my $min_path_k_sum_k_k_k_k_k_k_k_k_k = $min_sum;\n    my $min_path_k_sum_k_k_k_k_k_k_k_k_k_k\
  \ = $min_sum;\n    my $min_path_k_sum_k_k_k_k_k_k_k_k_k_k_k = $min_sum;\n    my\
  \ $min_path_k_sum_k_k_k_k_k_k_k_k_k_k_k_k = $min_sum;\n    my $min_path_k_sum_k_k_k_k_k_k_k_k_k_k_k_k_"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum\
  \ = $n * $m + 1;\n    my $min_path = [];\n    my $visited = [];\n    for my $i (0\
  \ .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
  \ $m - 1) {\n            my $path = [];\n            my $sum = 0;\n            $visited->[$i][$j]\
  \ = 1;\n            $sum += $grid->[$i][$j];\n            push @$path, $grid->[$i][$j];\n\
  \            dfs($grid, $i, $j, $k - 1, $path, $sum, $visited, $min, $min_sum, $min_path);\n\
  \            $visited->[$i][$j] = 0;\n        }\n    }\n    return $min_path;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $dp = [];\n    for my $i\
  \ (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i][$j] = [];\n\
  \            for my $t (0..$k-1) {\n                $dp->[$i][$j][$t] = [];\n  \
  \          }\n        }\n    }\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
  \ {\n            $dp->[$i][$j][0] = [$grid->[$i][$j]];\n        }\n    }\n    for\
  \ my $t (1..$k-1) {\n        for my $i (0..$n-1) {\n            for my $j (0..$m-1)\
  \ {\n                my $min = [];\n                if ($i > 0) {\n            \
  \        my $tmp = $dp->[$i-1][$j][$t-1];\n                    if (!@$min || $tmp->[0]\
  \ < $min->[0]) {\n                        $min = $tmp;\n                    }\n\
  \                }\n                if ($i < $n-1) {\n                    my $tmp\
  \ = $dp->[$i+1][$j][$t-1];\n                    if (!@$min || $tmp->[0] < $min->[0])\
  \ {\n                        $min = $tmp;\n                    }\n             \
  \   }\n                if ($j > 0) {\n                    my $tmp = $dp->[$i][$j-1][$t-1];\n\
  \                    if (!@$min || $tmp->[0] < $min->[0]) {\n                  \
  \      $min = $tmp;\n                    }\n                }\n                if\
  \ ($j < $m-1) {\n                    my $tmp = $dp->[$i][$j+1][$t-1];\n        \
  \            if (!@$min || $tmp->[0] < $min->[0]) {\n                        $min\
  \ = $tmp;\n                    }\n                }\n               "
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath\
  \ = [];\n    my $minSum = $n * $n * $k;\n    my $minPathSum = $minSum;\n    my $minPathSum2\
  \ = $minSum;\n    my $minPath2 = [];\n    my $minPath3 = [];\n    my $minPathSum3\
  \ = $minSum;\n    my $minPathSum4 = $minSum;\n    my $minPath4 = [];\n    my $minPath5\
  \ = [];\n    my $minPathSum5 = $minSum;\n    my $minPathSum6 = $minSum;\n    my\
  \ $minPath6 = [];\n    my $minPath7 = [];\n    my $minPathSum7 = $minSum;\n    my\
  \ $minPathSum8 = $minSum;\n    my $minPath8 = [];\n    my $minPath9 = [];\n    my\
  \ $minPathSum9 = $minSum;\n    my $minPathSum10 = $minSum;\n    my $minPath10 =\
  \ [];\n    my $minPath11 = [];\n    my $minPathSum11 = $minSum;\n    my $minPathSum12\
  \ = $minSum;\n    my $minPath12 = [];\n    my $minPath13 = [];\n    my $minPathSum13\
  \ = $minSum;\n    my $minPathSum14 = $minSum;\n    my $minPath14 = [];\n    my $minPath15\
  \ = [];\n    my $minPathSum15 = $minSum;\n    my $minPathSum16 = $minSum;\n    my\
  \ $minPath16 = [];\n    my $minPath17 = [];\n    my $minPathSum17 = $minSum;\n \
  \   my $minPathSum18 = $minSum;\n    my $minPath18 = [];\n    my $minPath19 = [];\n\
  \    my $minPathSum19 = $minSum;\n    my $minPathSum20 = $minSum;\n    my $minPath20\
  \ = [];\n    my $minPath21 = [];\n    my $minPathSum21 = $minSum;\n    my $min"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
  \ = [];\n    my $min_path_sum = $n * $n + 1;\n    my $min_path_sum_k = $min_path_sum;\n\
  \    my $min_path_k = [];\n    my $min_path_sum_k_1 = $min_path_sum;\n    my $min_path_k_1\
  \ = [];\n    my $min_path_sum_k_2 = $min_path_sum;\n    my $min_path_k_2 = [];\n\
  \    my $min_path_sum_k_3 = $min_path_sum;\n    my $min_path_k_3 = [];\n    my $min_path_sum_k_4\
  \ = $min_path_sum;\n    my $min_path_k_4 = [];\n    my $min_path_sum_k_5 = $min_path_sum;\n\
  \    my $min_path_k_5 = [];\n    my $min_path_sum_k_6 = $min_path_sum;\n    my $min_path_k_6\
  \ = [];\n    my $min_path_sum_k_7 = $min_path_sum;\n    my $min_path_k_7 = [];\n\
  \    my $min_path_sum_k_8 = $min_path_sum;\n    my $min_path_k_8 = [];\n    for\
  \ (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n     \
  \       my $path_sum = 0;\n            my $path = [];\n            my $path_sum_k\
  \ = $min_path_sum;\n            my $path_k = [];\n            my $path_sum_k_1 =\
  \ $min_path_sum;\n            my $path_k_1 = [];\n            my $path_sum_k_2 =\
  \ $min_path_sum;\n            my $path_k_2 = [];\n            my $path_sum_k"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i]->[$j]\
  \ = [];\n            for my $l (0..$k-1) {\n                $dp->[$i]->[$j]->[$l]\
  \ = [$grid->[$i]->[$j]];\n            }\n        }\n    }\n    for my $l (1..$k-1)\
  \ {\n        for my $i (0..$n-1) {\n            for my $j (0..$m-1) {\n        \
  \        my $min = $dp->[$i]->[$j]->[$l-1];\n                if ($i > 0) {\n   \
  \                 my $tmp = $dp->[$i-1]->[$j]->[$l-1];\n                    if (compare($tmp,\
  \ $min) < 0) {\n                        $min = $tmp;\n                    }\n  \
  \              }\n                if ($j > 0) {\n                    my $tmp = $dp->[$i]->[$j-1]->[$l-1];\n\
  \                    if (compare($tmp, $min) < 0) {\n                        $min\
  \ = $tmp;\n                    }\n                }\n                if ($i < $n-1)\
  \ {\n                    my $tmp = $dp->[$i+1]->[$j]->[$l-1];\n                \
  \    if (compare($tmp, $min) < 0) {\n                        $min = $tmp;\n    \
  \                }\n                }\n                if ($j < $m-1) {\n      \
  \              my $tmp = $dp->[$i]->[$j+1]->[$l-1];\n                    if (compare($tmp,\
  \ $min) < 0) {\n                        $min = $tmp;\n                    }\n  \
  \              }\n                $dp->[$i]->[$j]->[$l] = [@$min, $grid->[$"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n    for\
  \ my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    my $minPath = [];\n    my $minSum = $n * $m + 1;\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            my $path\
  \ = [];\n            $visited->[$i][$j] = 1;\n            dfs($grid, $visited, $i,\
  \ $j, $path, $k, $minPath, \\$minSum);\n            $visited->[$i][$j] = 0;\n  \
  \      }\n    }\n    return $minPath;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $path =\
  \ [];\n    my $min = [];\n    my $min_sum = $n * $n + 1;\n    my $min_path = [];\n\
  \    my $min_path_sum = $n * $n + 1;\n    my $min_path_len = $n * $n + 1;\n    my\
  \ $visited = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1)\
  \ {\n            $visited->[$i]->[$j] = 0;\n        }\n    }\n    for my $i (0 ..\
  \ $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $path = [];\n      \
  \      $min = [];\n            $min_sum = $n * $n + 1;\n            $visited->[$i]->[$j]\
  \ = 1;\n            dfs($grid, $i, $j, $k, $path, $min, $min_sum, $visited);\n \
  \           if ($min_sum < $min_path_sum) {\n                $min_path_sum = $min_sum;\n\
  \                $min_path = $min;\n                $min_path_len = scalar(@$min);\n\
  \            } elsif ($min_sum == $min_path_sum) {\n                my $len = scalar(@$min);\n\
  \                if ($len < $min_path_len) {\n                    $min_path_len\
  \ = $len;\n                    $min_path = $min;\n                } elsif ($len\
  \ == $min_path_len) {\n                    my $i = 0;\n                    while\
  \ ($i < $len && $min->[$i] == $min_path->[$i]) {\n                        $i++;\n\
  \                    }\n                    if ($i < $len && $min->[$i] < $min_path->[$i])\
  \ {\n                        $min_path = $min;\n                    }\n        \
  \        }\n            }\n            $visited->[$"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ [];\n    my $min_sum = $n * $n + 1;\n    my $visited = [];\n    for (my $i = 0;\
  \ $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    for (my $i = 0; $i < $n; $i++) {\n        for (my\
  \ $j = 0; $j < $m; $j++) {\n            my $path = [];\n            my $sum = 0;\n\
  \            dfs($grid, $visited, $i, $j, $k, $path, $sum);\n            if ($sum\
  \ < $min_sum) {\n                $min_sum = $sum;\n                $min = $path;\n\
  \            }\n        }\n    }\n    return $min;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my @dp;\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp[$i][$j]\
  \ = {};\n        }\n    }\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
  \ {\n            if ($i == 0 && $j == 0) {\n                $dp[$i][$j]->{$grid->[$i][$j]}\
  \ = 1;\n            } else {\n                my $left = $j > 0 ? $dp[$i][$j-1]\
  \ : {};\n                my $up = $i > 0 ? $dp[$i-1][$j] : {};\n               \
  \ for my $key (keys %$left) {\n                    $dp[$i][$j]->{$key} = $left->{$key};\n\
  \                }\n                for my $key (keys %$up) {\n                \
  \    $dp[$i][$j]->{$key} = $up->{$key};\n                }\n                $dp[$i][$j]->{$grid->[$i][$j]}\
  \ = 1;\n            }\n        }\n    }\n    my $path = [];\n    my $i = $n - 1;\n\
  \    my $j = $m - 1;\n    while ($k > 0) {\n        if ($i > 0 && $j > 0) {\n  \
  \          if ($dp[$i-1][$j]->{$grid->[$i][$j]} > $dp[$i][$j-1]->{$grid->[$i][$j]})\
  \ {\n                $i--;\n            } else {\n                $j--;\n      \
  \      }\n        } elsif ($i > 0) {\n            $i--;\n        } else {\n    \
  \        $j--;\n        }\n        push @$path, $grid->[$i][$j];\n        $k--;\n\
  \    }\n    return"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
  \ = [];\n    my $min_path_sum = $n * $n + 1;\n    my $min_path_sum_k = $min_path_sum;\n\
  \    my $min_path_k = [];\n    my $min_path_sum_k_1 = $min_path_sum;\n    my $min_path_k_1\
  \ = [];\n    my $min_path_sum_k_2 = $min_path_sum;\n    my $min_path_k_2 = [];\n\
  \    my $min_path_sum_k_3 = $min_path_sum;\n    my $min_path_k_3 = [];\n    my $min_path_sum_k_4\
  \ = $min_path_sum;\n    my $min_path_k_4 = [];\n    my $min_path_sum_k_5 = $min_path_sum;\n\
  \    my $min_path_k_5 = [];\n    my $min_path_sum_k_6 = $min_path_sum;\n    my $min_path_k_6\
  \ = [];\n    my $min_path_sum_k_7 = $min_path_sum;\n    my $min_path_k_7 = [];\n\
  \    my $min_path_sum_k_8 = $min_path_sum;\n    my $min_path_k_8 = [];\n    my $min_path_sum_k_9\
  \ = $min_path_sum;\n    my $min_path_k_9 = [];\n    my $min_path_sum_k_10 = $min_path_sum;\n\
  \    my $min_path_k_10 = [];\n    my $min_path_sum_k_11 = $min_path_sum;\n    my\
  \ $min_path_k_11 = [];\n    my $min_path_sum_k_12 = $min_path_sum;\n    my $min_path_k_12\
  \ = [];\n    my $min_path_sum_k_13 = $min"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n\
  \    my $max = $grid->[0][0];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
  \ {\n            $min = $grid->[$i][$j] if $grid->[$i][$j] < $min;\n           \
  \ $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n        }\n    }\n    my $minPath\
  \ = [];\n    my $minPathSum = $max * $k;\n    my $minPathSum2 = $max * $k;\n   \
  \ my $minPath2 = [];\n    my $minPathSum3 = $max * $k;\n    my $minPath3 = [];\n\
  \    my $minPathSum4 = $max * $k;\n    my $minPath4 = [];\n    my $minPathSum5 =\
  \ $max * $k;\n    my $minPath5 = [];\n    my $minPathSum6 = $max * $k;\n    my $minPath6\
  \ = [];\n    my $minPathSum7 = $max * $k;\n    my $minPath7 = [];\n    my $minPathSum8\
  \ = $max * $k;\n    my $minPath8 = [];\n    my $minPathSum9 = $max * $k;\n    my\
  \ $minPath9 = [];\n    my $minPathSum10 = $max * $k;\n    my $minPath10 = [];\n\
  \    my $minPathSum11 = $max * $k;\n    my $minPath11 = [];\n    my $minPathSum12\
  \ = $max * $k;\n    my $minPath12 = [];\n    my $minPathSum13 = $max * $k;\n   \
  \ my $minPath13 = [];\n    my $minPathSum14 = $max * $k;\n    my $minPath14 = [];\n\
  \    my $minPathSum15 = $max * $k;\n    my $minPath15 = [];\n    my $min"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ undef;\n    my $minPath = undef;\n    for (my $i = 0; $i < $n; $i++) {\n     \
  \   for (my $j = 0; $j < $m; $j++) {\n            my $path = [$grid->[$i][$j]];\n\
  \            my $visited = {};\n            $visited->{$i}->{$j} = 1;\n        \
  \    dfs($grid, $i, $j, $k - 1, $path, $visited);\n            if (!defined($min)\
  \ || $path < $min) {\n                $min = $path;\n                $minPath =\
  \ $path;\n            }\n        }\n    }\n    return $minPath;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n    for\
  \ my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    my $minPath = [];\n    my $minSum = $n * $m * $k;\n\
  \    my $minPathSum = $minSum;\n    my $minPathLen = $k;\n    my $minPathRow = 0;\n\
  \    my $minPathCol = 0;\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
  \ {\n            my $path = [];\n            my $pathSum = 0;\n            my $pathLen\
  \ = 0;\n            my $pathRow = $i;\n            my $pathCol = $j;\n         \
  \   my $pathVisited = [];\n            for my $i (0..$n-1) {\n                for\
  \ my $j (0..$m-1) {\n                    $pathVisited->[$i][$j] = 0;\n         \
  \       }\n            }\n            $pathVisited->[$i][$j] = 1;\n            push\
  \ @$path, $grid->[$i][$j];\n            $pathSum += $grid->[$i][$j];\n         \
  \   $pathLen++;\n            while ($pathLen < $k) {\n                my $min =\
  \ $n * $m;\n                my $minRow = -1;\n                my $minCol = -1;\n\
  \                for my $i (0..$n-1) {\n                    for my $j (0..$m-1)\
  \ {\n                        if ($pathVisited->[$i][$j] == 0) {\n              \
  \              my $sum = abs($i - $pathRow) + abs($j - $pathCol);\n            \
  \                if ($sum < $min) {\n                                $min = $sum;\n\
  \                                $minRow = $i;\n                               \
  \ $minCol = $j;\n                            }\n                        }\n    \
  \                }\n"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i]->[$j]\
  \ = [];\n            for my $l (0..$k-1) {\n                $dp->[$i]->[$j]->[$l]\
  \ = [];\n            }\n        }\n    }\n    for my $i (0..$n-1) {\n        for\
  \ my $j (0..$m-1) {\n            $dp->[$i]->[$j]->[0] = [$grid->[$i]->[$j]];\n \
  \       }\n    }\n    for my $l (1..$k-1) {\n        for my $i (0..$n-1) {\n   \
  \         for my $j (0..$m-1) {\n                my $min = [];\n               \
  \ if ($i > 0) {\n                    my $up = $dp->[$i-1]->[$j]->[$l-1];\n     \
  \               if (scalar(@$min) == 0 || $up->[0] < $min->[0]) {\n            \
  \            $min = $up;\n                    }\n                }\n           \
  \     if ($j > 0) {\n                    my $left = $dp->[$i]->[$j-1]->[$l-1];\n\
  \                    if (scalar(@$min) == 0 || $left->[0] < $min->[0]) {\n     \
  \                   $min = $left;\n                    }\n                }\n  \
  \              if ($i < $n-1) {\n                    my $down = $dp->[$i+1]->[$j]->[$l-1];\n\
  \                    if (scalar(@$min) == 0 || $down->[0] < $min->[0]) {\n     \
  \                   $min = $down;\n                    }\n                }\n  \
  \              if ($j < $m-1) {\n                    my $right = $dp->["
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ $grid->[0][0];\n    my $max = $grid->[0][0];\n    for my $i (0..$n-1) {\n    \
  \    for my $j (0..$m-1) {\n            $min = $grid->[$i][$j] if $grid->[$i][$j]\
  \ < $min;\n            $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n     \
  \   }\n    }\n    my $minPath = [];\n    for my $i (0..$n-1) {\n        for my $j\
  \ (0..$m-1) {\n            if ($grid->[$i][$j] == $min) {\n                my $path\
  \ = dfs($grid, $i, $j, $k, $min, $max);\n                if (scalar(@$path) == $k)\
  \ {\n                    $minPath = $path if $path < $minPath;\n               \
  \ }\n            }\n        }\n    }\n    return $minPath;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n    for\
  \ my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    my $min = [];\n    for my $i (0..$n-1) {\n       \
  \ for my $j (0..$m-1) {\n            $min->[$i][$j] = [];\n        }\n    }\n  \
  \  my $q = [];\n    push @$q, [0, 0, 0];\n    while (@$q) {\n        my $cur = shift\
  \ @$q;\n        my $i = $cur->[0];\n        my $j = $cur->[1];\n        my $l =\
  \ $cur->[2];\n        if ($l > $k) {\n            last;\n        }\n        if ($visited->[$i][$j])\
  \ {\n            next;\n        }\n        $visited->[$i][$j] = 1;\n        if ($l\
  \ == $k) {\n            if (!@{$min->[$i][$j]}) {\n                push @{$min->[$i][$j]},\
  \ $grid->[$i][$j];\n            }\n            next;\n        }\n        if ($i\
  \ > 0) {\n            push @$q, [$i-1, $j, $l+1];\n        }\n        if ($i < $n-1)\
  \ {\n            push @$q, [$i+1, $j, $l+1];\n        }\n        if ($j > 0) {\n\
  \            push @$q, [$i, $j-1, $l+1];\n        }\n        if ($j < $m-1) {\n\
  \            push @$q, [$i, $j+1, $l+1];\n        }\n        if (!@{$min->[$i][$j]})\
  \ {\n            push @{$min->[$i][$j]}, $grid->"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ $grid->[0][0];\n    my $max = $grid->[$n-1][$m-1];\n    my $minPath = [$min];\n\
  \    my $minPaths = {};\n    my $paths = {};\n    for my $i (0..$n-1) {\n      \
  \  for my $j (0..$m-1) {\n            $paths->{$i}{$j} = [];\n            for my\
  \ $x (0..$n-1) {\n                for my $y (0..$m-1) {\n                    if\
  \ ($x == $i && $y == $j) {\n                        $paths->{$i}{$j}[$x][$y] = 1;\n\
  \                    } else {\n                        $paths->{$i}{$j}[$x][$y]\
  \ = 0;\n                    }\n                }\n            }\n        }\n   \
  \ }\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            for my\
  \ $x (0..$n-1) {\n                for my $y (0..$m-1) {\n                    if\
  \ ($i == $x && $j == $y) {\n                        next;\n                    }\n\
  \                    if ($i == $x && abs($j - $y) == 1) {\n                    \
  \    $paths->{$i}{$j}[$x][$y] = 1;\n                    }\n                    if\
  \ ($j == $y && abs($i - $x) == 1) {\n                        $paths->{$i}{$j}[$x][$y]\
  \ = 1;\n                    }\n                }\n            }\n        }\n   \
  \ }\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            for my\
  \ $x (0..$n-1) {\n                for my $y (0..$m-1) {\n                    for\
  \ my $z (0..$n-1"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum\
  \ = $n * $m;\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n        for\
  \ my $j (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n\
  \    my $dfs = sub {\n        my($i, $j, $sum, $path) = @_;\n        if ($sum >\
  \ $min_sum) {\n            return;\n        }\n        if (@$path == $k) {\n   \
  \         if ($sum < $min_sum) {\n                $min_sum = $sum;\n           \
  \     $min = $path;\n            }\n            return;\n        }\n        if ($i\
  \ > 0 && !$visited->[$i - 1][$j]) {\n            $visited->[$i - 1][$j] = 1;\n \
  \           $dfs->($i - 1, $j, $sum + $grid->[$i - 1][$j], [@$path, $grid->[$i -\
  \ 1][$j]]);\n            $visited->[$i - 1][$j] = 0;\n        }\n        if ($i\
  \ < $n - 1 && !$visited->[$i + 1][$j]) {\n            $visited->[$i + 1][$j] = 1;\n\
  \            $dfs->($i + 1, $j, $sum + $grid->[$i + 1][$j], [@$path, $grid->[$i\
  \ + 1][$j]]);\n            $visited->[$i + 1][$j] = 0;\n        }\n        if ($j\
  \ > 0 && !$visited->[$i][$j - 1]) {\n            $visited->[$i][$j - 1] = 1;\n \
  \           $dfs->($i, $j - 1, $sum + $grid->[$i][$j - 1], [@$path, $grid->[$i][$j\
  \ - 1]]"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum\
  \ = $n * $m + 1;\n    my $min_path = [];\n    my $visited = [];\n    for my $i (0\
  \ .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    my $dfs = sub {\n        my($i, $j, $sum, $path) =\
  \ @_;\n        if ($sum > $min_sum) {\n            return;\n        }\n        if\
  \ (@$path == $k) {\n            if ($sum < $min_sum) {\n                $min_sum\
  \ = $sum;\n                $min_path = $path;\n            }\n            return;\n\
  \        }\n        for my $d (0 .. 3) {\n            my $x = $i + $dx[$d];\n  \
  \          my $y = $j + $dy[$d];\n            if ($x >= 0 && $x < $n && $y >= 0\
  \ && $y < $m && !$visited->[$x][$y]) {\n                $visited->[$x][$y] = 1;\n\
  \                push @$path, $grid->[$x][$y];\n                $dfs->($x, $y, $sum\
  \ + $grid->[$x][$y], $path);\n                pop @$path;\n                $visited->[$x][$y]\
  \ = 0;\n            }\n        }\n    };\n    for my $i (0 .. $n - 1) {\n      \
  \  for my $j (0 .. $m - 1) {\n            $visited->[$i][$j] = 1;\n            $dfs->($i,\
  \ $j, $grid->[$i][$j], [$grid->[$i][$j]]);\n            $visited->[$i][$j] = 0;\n\
  \        }\n    }\n    return $min_path;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum\
  \ = $n * $m + 1;\n    my $path = [];\n    my $visited = [];\n    for my $i (0 ..\
  \ $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j] =\
  \ 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m\
  \ - 1) {\n            $path = [];\n            $visited->[$i][$j] = 1;\n       \
  \     dfs($grid, $i, $j, $k, $path, $visited, $min, $min_sum);\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    return $min;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n    for\
  \ my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    my $minPath = [];\n    my $minSum = $n * $m + 1;\n\
  \    my $minPathSum = $minSum;\n    my $minPathLen = $n * $m + 1;\n    my $minPathLenSum\
  \ = $minPathLen;\n    my $minPathLenSum2 = $minPathLen;\n    my $minPathLenSum3\
  \ = $minPathLen;\n    my $minPathLenSum4 = $minPathLen;\n    my $minPathLenSum5\
  \ = $minPathLen;\n    my $minPathLenSum6 = $minPathLen;\n    my $minPathLenSum7\
  \ = $minPathLen;\n    my $minPathLenSum8 = $minPathLen;\n    my $minPathLenSum9\
  \ = $minPathLen;\n    my $minPathLenSum10 = $minPathLen;\n    my $minPathLenSum11\
  \ = $minPathLen;\n    my $minPathLenSum12 = $minPathLen;\n    my $minPathLenSum13\
  \ = $minPathLen;\n    my $minPathLenSum14 = $minPathLen;\n    my $minPathLenSum15\
  \ = $minPathLen;\n    my $minPathLenSum16 = $minPathLen;\n    my $minPathLenSum17\
  \ = $minPathLen;\n    my $minPathLenSum18 = $minPathLen;\n    my $minPathLenSum19\
  \ = $minPathLen;\n    my $minPathLenSum20 = $minPathLen;\n    my $minPathLenSum21\
  \ = $minPathLen;\n    my $minPathLenSum22 = $minPathLen;\n    my $minPathLenSum23\
  \ = $minPathLen;\n    my $minPathLenSum24 = $minPathLen;\n    my $minPathLenSum25\
  \ = $minPathLen;\n   "
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $dp = [];\n    for my $i\
  \ (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i][$j] = [];\n\
  \            for my $l (0..$k-1) {\n                $dp->[$i][$j][$l] = [];\n  \
  \          }\n        }\n    }\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
  \ {\n            $dp->[$i][$j][0] = [$grid->[$i][$j]];\n        }\n    }\n    for\
  \ my $l (1..$k-1) {\n        for my $i (0..$n-1) {\n            for my $j (0..$m-1)\
  \ {\n                my $min = [];\n                if ($i > 0) {\n            \
  \        my $tmp = $dp->[$i-1][$j][$l-1];\n                    if (compare($tmp,\
  \ $min) < 0) {\n                        $min = $tmp;\n                    }\n  \
  \              }\n                if ($i < $n-1) {\n                    my $tmp\
  \ = $dp->[$i+1][$j][$l-1];\n                    if (compare($tmp, $min) < 0) {\n\
  \                        $min = $tmp;\n                    }\n                }\n\
  \                if ($j > 0) {\n                    my $tmp = $dp->[$i][$j-1][$l-1];\n\
  \                    if (compare($tmp, $min) < 0) {\n                        $min\
  \ = $tmp;\n                    }\n                }\n                if ($j < $m-1)\
  \ {\n                    my $tmp = $dp->[$i][$j+1][$l-1];\n                    if\
  \ (compare($tmp, $min) < 0) {\n                        $min = $tmp;\n          \
  \          }\n                }\n                $dp->[$i][$j][$l] = [@$min, $grid->[$"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $ans =\
  \ [];\n    my $min = [];\n    my $visited = [];\n    for my $i (0..$n-1) {\n   \
  \     for my $j (0..$m-1) {\n            $visited->[$i]->[$j] = 0;\n        }\n\
  \    }\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            my\
  \ $cur = [];\n            push @$cur, $grid->[$i]->[$j];\n            $visited->[$i]->[$j]\
  \ = 1;\n            dfs($grid, $i, $j, $k, $cur, $visited, $ans, $min);\n      \
  \      $visited->[$i]->[$j] = 0;\n        }\n    }\n    return $ans;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $visited\
  \ = {};\n    my $min = [];\n    my $min_sum = $n * $n + 1;\n    my $dfs;\n    $dfs\
  \ = sub {\n        my($i, $j, $sum, $path) = @_;\n        if ($sum >= $min_sum)\
  \ {\n            return;\n        }\n        if ($k == 0) {\n            if ($sum\
  \ < $min_sum) {\n                $min_sum = $sum;\n                $min = $path;\n\
  \            }\n            return;\n        }\n        $visited->{\"$i,$j\"} =\
  \ 1;\n        if ($i > 0 && !$visited->{\"$i-1,$j\"}) {\n            $dfs->($i -\
  \ 1, $j, $sum + $grid->[$i - 1][$j], [@$path, $grid->[$i - 1][$j]]);\n        }\n\
  \        if ($i < $n - 1 && !$visited->{\"$i+1,$j\"}) {\n            $dfs->($i +\
  \ 1, $j, $sum + $grid->[$i + 1][$j], [@$path, $grid->[$i + 1][$j]]);\n        }\n\
  \        if ($j > 0 && !$visited->{\"$i,$j-1\"}) {\n            $dfs->($i, $j -\
  \ 1, $sum + $grid->[$i][$j - 1], [@$path, $grid->[$i][$j - 1]]);\n        }\n  \
  \      if ($j < $m - 1 && !$visited->{\"$i,$j+1\"}) {\n            $dfs->($i, $j\
  \ + 1, $sum + $grid->[$i][$j + 1], [@$path, $grid->[$i][$j + 1]]);\n        }\n\
  \        $visited->{\"$i,$j\"} = 0;\n    };\n    for my $i (0 .. $"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n\
  \    my $max = $grid->[$n-1][$m-1];\n    my $minPath = [$min];\n    my $minPaths\
  \ = {};\n    my $visited = {};\n    my $queue = [{\n        path => [$min],\n  \
  \      i => 0,\n        j => 0,\n    }];\n    while (@$queue) {\n        my $node\
  \ = shift @$queue;\n        my $path = $node->{path};\n        my $i = $node->{i};\n\
  \        my $j = $node->{j};\n        my $key = \"$i,$j\";\n        if ($visited->{$key})\
  \ {\n            next;\n        }\n        $visited->{$key} = 1;\n        if (@$path\
  \ == $k) {\n            my $pathStr = join(',', @$path);\n            if (!$minPaths->{$pathStr}\
  \ || $pathStr lt $minPaths->{$pathStr}) {\n                $minPaths->{$pathStr}\
  \ = $pathStr;\n                $minPath = $path;\n            }\n            next;\n\
  \        }\n        my $val = $grid->[$i][$j];\n        if ($i > 0 && $grid->[$i-1][$j]\
  \ < $val) {\n            push @$queue, {\n                path => [@$path, $grid->[$i-1][$j]],\n\
  \                i => $i-1,\n                j => $j,\n            };\n        }\n\
  \        if ($i < $n-1 && $grid->[$i+1][$j] < $val) {\n            push @$queue,\
  \ {\n                path => [@$path, $grid->[$i+1][$j]],\n                i =>\
  \ $i+1,\n                j => $j,\n            };\n        }\n        if ($j > 0\
  \ && $grid->[$i][$j-1] < $val) {\n"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = {};\n    my\
  \ $min_path = [];\n    my $min_sum = $n * $m * ($n * $m + 1) / 2;\n    my $min_path_sum\
  \ = $min_sum;\n    my $min_path_sum_idx = 0;\n    my $min_path_sum_idx_found = 0;\n\
  \    my $min_path_sum_found = 0;\n    my $min_path_found = 0;\n    my $min_path_sum_idx_found\
  \ = 0;\n    my $min_path_sum_found = 0;\n    my $min_path_found = 0;\n    my $min_path_sum_idx_found\
  \ = 0;\n    my $min_path_sum_found = 0;\n    my $min_path_found = 0;\n    my $min_path_sum_idx_found\
  \ = 0;\n    my $min_path_sum_found = 0;\n    my $min_path_found = 0;\n    my $min_path_sum_idx_found\
  \ = 0;\n    my $min_path_sum_found = 0;\n    my $min_path_found = 0;\n    my $min_path_sum_idx_found\
  \ = 0;\n    my $min_path_sum_found = 0;\n    my $min_path_found = 0;\n    my $min_path_sum_idx_found\
  \ = 0;\n    my $min_path_sum_found = 0;\n    my $min_path_found = 0;\n    my $min_path_sum_idx_found\
  \ = 0;\n    my $min_path_sum_found = 0;\n    my $min_path_found = 0;\n    my $min_path_sum_idx_found\
  \ = 0;\n    my $min_path_sum_found = 0;\n    my $min_path_found = 0;\n    my $min_path_sum_idx_found\
  \ = 0;\n    my $min_path_sum_"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i]->[$j]\
  \ = [];\n            for my $l (0..$k-1) {\n                $dp->[$i]->[$j]->[$l]\
  \ = [];\n            }\n        }\n    }\n    for my $i (0..$n-1) {\n        for\
  \ my $j (0..$m-1) {\n            $dp->[$i]->[$j]->[0] = [$grid->[$i]->[$j]];\n \
  \       }\n    }\n    for my $l (1..$k-1) {\n        for my $i (0..$n-1) {\n   \
  \         for my $j (0..$m-1) {\n                my $min = [];\n               \
  \ if ($i > 0) {\n                    my $tmp = [@{$dp->[$i-1]->[$j]->[$l-1]}];\n\
  \                    push @$tmp, $grid->[$i]->[$j];\n                    if (compare($tmp,\
  \ $min) < 0) {\n                        $min = $tmp;\n                    }\n  \
  \              }\n                if ($i < $n-1) {\n                    my $tmp\
  \ = [@{$dp->[$i+1]->[$j]->[$l-1]}];\n                    push @$tmp, $grid->[$i]->[$j];\n\
  \                    if (compare($tmp, $min) < 0) {\n                        $min\
  \ = $tmp;\n                    }\n                }\n                if ($j > 0)\
  \ {\n                    my $tmp = [@{$dp->[$i]->[$j-1]->[$l-1]}];\n           \
  \         push @$tmp, $grid->[$i]->[$j];\n                    if (compare($tmp,\
  \ $min) < 0) {\n                        $min = $"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath\
  \ = [];\n    my $minSum = $n * $n * $k;\n    my $minPathSum = $minSum;\n    my $minPathSum2\
  \ = $minSum;\n    my $minPath2 = [];\n    my $minPath3 = [];\n    my $minPathSum3\
  \ = $minSum;\n    my $minPathSum4 = $minSum;\n    my $minPath4 = [];\n    my $minPath5\
  \ = [];\n    my $minPathSum5 = $minSum;\n    my $minPathSum6 = $minSum;\n    my\
  \ $minPath6 = [];\n    my $minPath7 = [];\n    my $minPathSum7 = $minSum;\n    my\
  \ $minPathSum8 = $minSum;\n    my $minPath8 = [];\n    my $minPath9 = [];\n    my\
  \ $minPathSum9 = $minSum;\n    my $minPathSum10 = $minSum;\n    my $minPath10 =\
  \ [];\n    my $minPath11 = [];\n    my $minPathSum11 = $minSum;\n    my $minPathSum12\
  \ = $minSum;\n    my $minPath12 = [];\n    my $minPath13 = [];\n    my $minPathSum13\
  \ = $minSum;\n    my $minPathSum14 = $minSum;\n    my $minPath14 = [];\n    my $minPath15\
  \ = [];\n    my $minPathSum15 = $minSum;\n    my $minPathSum16 = $minSum;\n    my\
  \ $minPath16 = [];\n    my $minPath17 = [];\n    my $minPathSum17 = $minSum;\n \
  \   my $minPathSum18 = $minSum;\n    my $minPath18 = [];\n    my $minPath19 = [];\n\
  \    my $minPathSum19 = $minSum;\n    my $minPathSum20 = $minSum;\n    my $minPath20\
  \ = [];\n    my $minPath21 = [];\n    my $minPathSum21 = $minSum;\n    my $min"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $visited\
  \ = {};\n    my $min_path = [];\n    my $min_sum = $n * $n + 1;\n    for my $i (0\
  \ .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n\
  \            my $sum = 0;\n            dfs($grid, $visited, $i, $j, $path, $sum,\
  \ $k, $min_path, $min_sum);\n        }\n    }\n    return $min_path;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my @dp;\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp[$i][$j]\
  \ = [$grid->[$i][$j]];\n        }\n    }\n    for my $i (1..$k-1) {\n        for\
  \ my $j (0..$n-1) {\n            for my $l (0..$m-1) {\n                my $min\
  \ = $dp[$j][$l][$i-1];\n                my $min_idx = [$j, $l];\n              \
  \  if ($j > 0) {\n                    if ($dp[$j-1][$l][$i-1] < $min) {\n      \
  \                  $min = $dp[$j-1][$l][$i-1];\n                        $min_idx\
  \ = [$j-1, $l];\n                    }\n                }\n                if ($j\
  \ < $n-1) {\n                    if ($dp[$j+1][$l][$i-1] < $min) {\n           \
  \             $min = $dp[$j+1][$l][$i-1];\n                        $min_idx = [$j+1,\
  \ $l];\n                    }\n                }\n                if ($l > 0) {\n\
  \                    if ($dp[$j][$l-1][$i-1] < $min) {\n                       \
  \ $min = $dp[$j][$l-1][$i-1];\n                        $min_idx = [$j, $l-1];\n\
  \                    }\n                }\n                if ($l < $m-1) {\n  \
  \                  if ($dp[$j][$l+1][$i-1] < $min) {\n                        $min\
  \ = $dp[$j][$l+1][$i-1];\n                        $min_idx = [$j, $l+1];\n     \
  \               }\n                }\n                $dp[$j][$l][$i] = $min;\n\
  \               "
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $visited\
  \ = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m;\
  \ $j++) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $min =\
  \ [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++)\
  \ {\n            $min->[$i][$j] = [];\n        }\n    }\n    my $min_path = [];\n\
  \    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n\
  \            $min_path->[$i][$j] = [];\n        }\n    }\n    for (my $i = 0; $i\
  \ < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            my $path\
  \ = [];\n            $path->[0] = $grid->[$i][$j];\n            $min->[$i][$j] =\
  \ $path;\n            $min_path->[$i][$j] = $path;\n        }\n    }\n    for (my\
  \ $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n         \
  \   my $path = [];\n            $path->[0] = $grid->[$i][$j];\n            $min->[$i][$j]\
  \ = $path;\n            $min_path->[$i][$j] = $path;\n        }\n    }\n    for\
  \ (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n     \
  \       my $path = [];\n            $path->[0] = $grid->[$"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i]->[$j]\
  \ = [];\n            for my $l (0..$k-1) {\n                $dp->[$i]->[$j]->[$l]\
  \ = [$grid->[$i]->[$j]];\n            }\n        }\n    }\n    for my $l (1..$k-1)\
  \ {\n        for my $i (0..$n-1) {\n            for my $j (0..$m-1) {\n        \
  \        my $min = [];\n                if ($i > 0) {\n                    my $t\
  \ = $dp->[$i-1]->[$j]->[$l-1];\n                    if (scalar(@$t) < scalar(@$min)\
  \ || scalar(@$min) == 0) {\n                        $min = $t;\n               \
  \     }\n                }\n                if ($i < $n-1) {\n                 \
  \   my $t = $dp->[$i+1]->[$j]->[$l-1];\n                    if (scalar(@$t) < scalar(@$min)\
  \ || scalar(@$min) == 0) {\n                        $min = $t;\n               \
  \     }\n                }\n                if ($j > 0) {\n                    my\
  \ $t = $dp->[$i]->[$j-1]->[$l-1];\n                    if (scalar(@$t) < scalar(@$min)\
  \ || scalar(@$min) == 0) {\n                        $min = $t;\n               \
  \     }\n                }\n                if ($j < $m-1) {\n                 \
  \   my $t = $dp->[$i]->[$j+1]->[$l-1];\n                    if (scalar(@$t) < scalar(@$min)\
  \ || scalar(@$min) == 0"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ [];\n    my $min_sum = $n * $n + 1;\n    my $visited = {};\n    my $dfs;\n   \
  \ $dfs = sub {\n        my($i, $j, $sum, $path) = @_;\n        return if $sum >\
  \ $min_sum;\n        if ($sum == $min_sum) {\n            if ($path lt $min) {\n\
  \                $min = $path;\n            }\n            return;\n        }\n\
  \        return if $visited->{\"$i,$j\"}->{$path};\n        $visited->{\"$i,$j\"\
  }->{$path} = 1;\n        if ($i > 0) {\n            $dfs->($i - 1, $j, $sum + $grid->[$i\
  \ - 1][$j], $path . $grid->[$i - 1][$j]);\n        }\n        if ($i < $n - 1) {\n\
  \            $dfs->($i + 1, $j, $sum + $grid->[$i + 1][$j], $path . $grid->[$i +\
  \ 1][$j]);\n        }\n        if ($j > 0) {\n            $dfs->($i, $j - 1, $sum\
  \ + $grid->[$i][$j - 1], $path . $grid->[$i][$j - 1]);\n        }\n        if ($j\
  \ < $m - 1) {\n            $dfs->($i, $j + 1, $sum + $grid->[$i][$j + 1], $path\
  \ . $grid->[$i][$j + 1]);\n        }\n    };\n    for my $i (0 .. $n - 1) {\n  \
  \      for my $j (0 .. $m - 1) {\n            $dfs->($i, $j, $grid->[$i][$j], $grid->[$i][$j]);\n\
  \        }\n    }\n    return [split //, $min];\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i]->[$j]\
  \ = [];\n            for my $l (0..$k-1) {\n                $dp->[$i]->[$j]->[$l]\
  \ = [];\n            }\n        }\n    }\n    for my $i (0..$n-1) {\n        for\
  \ my $j (0..$m-1) {\n            $dp->[$i]->[$j]->[0] = [$grid->[$i]->[$j]];\n \
  \       }\n    }\n    for my $l (1..$k-1) {\n        for my $i (0..$n-1) {\n   \
  \         for my $j (0..$m-1) {\n                my $min = [];\n               \
  \ if ($i > 0) {\n                    if (compare($dp->[$i-1]->[$j]->[$l-1], $min)\
  \ < 0) {\n                        $min = $dp->[$i-1]->[$j]->[$l-1];\n          \
  \          }\n                }\n                if ($i < $n-1) {\n            \
  \        if (compare($dp->[$i+1]->[$j]->[$l-1], $min) < 0) {\n                 \
  \       $min = $dp->[$i+1]->[$j]->[$l-1];\n                    }\n             \
  \   }\n                if ($j > 0) {\n                    if (compare($dp->[$i]->[$j-1]->[$l-1],\
  \ $min) < 0) {\n                        $min = $dp->[$i]->[$j-1]->[$l-1];\n    \
  \                }\n                }\n                if ($j < $m-1) {\n      \
  \              if (compare($dp->[$i]->[$j+1]->["
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum\
  \ = $n * $m;\n    my $min_path = [];\n    my $visited = [];\n    for my $i (0 ..\
  \ $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j] =\
  \ 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m\
  \ - 1) {\n            my $sum = 0;\n            my $path = [];\n            $visited->[$i][$j]\
  \ = 1;\n            dfs($grid, $i, $j, $k, $sum, $path, $visited, $min, $min_sum,\
  \ $min_path);\n            $visited->[$i][$j] = 0;\n        }\n    }\n    return\
  \ $min_path;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $dp = [];\n    for my $i\
  \ (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i][$j] = [];\n\
  \            for my $l (0..$k-1) {\n                $dp->[$i][$j][$l] = [];\n  \
  \          }\n        }\n    }\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
  \ {\n            for my $l (0..$k-1) {\n                $dp->[$i][$j][$l] = [$grid->[$i][$j]];\n\
  \                if ($l == 0) {\n                    next;\n                }\n\
  \                my $min = [];\n                if ($i > 0) {\n                \
  \    my $prev = $dp->[$i-1][$j][$l-1];\n                    if (lexLess($prev, $min))\
  \ {\n                        $min = $prev;\n                    }\n            \
  \    }\n                if ($j > 0) {\n                    my $prev = $dp->[$i][$j-1][$l-1];\n\
  \                    if (lexLess($prev, $min)) {\n                        $min =\
  \ $prev;\n                    }\n                }\n                if ($i < $n-1)\
  \ {\n                    my $prev = $dp->[$i+1][$j][$l-1];\n                   \
  \ if (lexLess($prev, $min)) {\n                        $min = $prev;\n         \
  \           }\n                }\n                if ($j < $m-1) {\n           \
  \         my $prev = $dp->[$i][$j+1][$l-1];\n                    if (lexLess($prev,\
  \ $min)) {\n                        $min = $prev;\n                    }\n     \
  \           }\n                push @{$dp->[$i][$j][$l]}, @$min;\n            }\n\
  \        }\n    }\n    return $dp->[0][0][$k-1];\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i]->[$j]\
  \ = [];\n            for my $l (0..$k-1) {\n                $dp->[$i]->[$j]->[$l]\
  \ = [];\n            }\n        }\n    }\n    for my $i (0..$n-1) {\n        for\
  \ my $j (0..$m-1) {\n            for my $l (0..$k-1) {\n                $dp->[$i]->[$j]->[$l]\
  \ = [$grid->[$i]->[$j]];\n                if ($i > 0 && $dp->[$i-1]->[$j]->[$l]->[0]\
  \ < $dp->[$i]->[$j]->[$l]->[0]) {\n                    $dp->[$i]->[$j]->[$l] = $dp->[$i-1]->[$j]->[$l];\n\
  \                }\n                if ($j > 0 && $dp->[$i]->[$j-1]->[$l]->[0] <\
  \ $dp->[$i]->[$j]->[$l]->[0]) {\n                    $dp->[$i]->[$j]->[$l] = $dp->[$i]->[$j-1]->[$l];\n\
  \                }\n                if ($l > 0) {\n                    if ($i >\
  \ 0 && $dp->[$i-1]->[$j]->[$l-1]->[0] < $dp->[$i]->[$j]->[$l]->[0]) {\n        \
  \                $dp->[$i]->[$j]->[$l] = $dp->[$i-1]->[$j]->[$l-1];\n          \
  \          }\n                    if"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $dp = [];\n    for my $i\
  \ (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i][$j] = [];\n\
  \            for my $l (0..$k-1) {\n                $dp->[$i][$j][$l] = [];\n  \
  \          }\n        }\n    }\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
  \ {\n            $dp->[$i][$j][0] = [$grid->[$i][$j]];\n        }\n    }\n    for\
  \ my $l (1..$k-1) {\n        for my $i (0..$n-1) {\n            for my $j (0..$m-1)\
  \ {\n                my $min = undef;\n                if ($i > 0) {\n         \
  \           my $tmp = [@{$dp->[$i-1][$j][$l-1]}, $grid->[$i][$j]];\n           \
  \         $min = $tmp if !defined($min) || $tmp lt $min;\n                }\n  \
  \              if ($i < $n-1) {\n                    my $tmp = [@{$dp->[$i+1][$j][$l-1]},\
  \ $grid->[$i][$j]];\n                    $min = $tmp if !defined($min) || $tmp lt\
  \ $min;\n                }\n                if ($j > 0) {\n                    my\
  \ $tmp = [@{$dp->[$i][$j-1][$l-1]}, $grid->[$i][$j]];\n                    $min\
  \ = $tmp if !defined($min) || $tmp lt $min;\n                }\n               \
  \ if ($j < $m-1) {\n                    my $tmp = [@{$dp->[$i][$j+1][$l-1]}, $grid->[$i][$j]];\n\
  \                    $min = $tmp if !defined($min"
- "    my $n = @$grid;\n    my @path;\n    my $min_path = [];\n    my $min_sum = $n\
  \ * $n + 1;\n    my $min_val = $n * $n + 1;\n    my $min_idx = -1;\n    my $min_dir\
  \ = -1;\n    my $min_cnt = 0;\n    my $min_visited = {};\n    my $visited = {};\n\
  \    my $dirs = [[-1, 0], [0, 1], [1, 0], [0, -1]];\n    my $dfs = sub {\n     \
  \   my($row, $col, $sum, $val, $idx, $cnt, $visited) = @_;\n        if ($cnt ==\
  \ $k) {\n            if ($sum < $min_sum) {\n                $min_sum = $sum;\n\
  \                $min_path = [@path];\n                $min_val = $val;\n      \
  \          $min_idx = $idx;\n                $min_dir = $dirs[$idx][0] * $dirs[$idx][1];\n\
  \                $min_cnt = $cnt;\n                $min_visited = {%$visited};\n\
  \            } elsif ($sum == $min_sum) {\n                if ($val < $min_val)\
  \ {\n                    $min_path = [@path];\n                    $min_val = $val;\n\
  \                    $min_idx = $idx;\n                    $min_dir = $dirs[$idx][0]\
  \ * $dirs[$idx][1];\n                    $min_cnt = $cnt;\n                    $min_visited\
  \ = {%$visited};\n                } elsif ($val == $min_val) {\n               \
  \     if ($idx < $min_idx) {\n                        $min_path = [@path];\n   \
  \                     $min_val = $val;\n                        $min_idx = $idx;\n\
  \                        $min_dir = $dirs[$idx][0] * $dirs[$idx][1];\n         \
  \               $min_cnt"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
  \ = [];\n    my $min_sum = $n * $n * $k;\n    my $visited = {};\n    my $path =\
  \ [];\n    my $sum = 0;\n    my $dfs;\n    $dfs = sub {\n        my($i, $j) = @_;\n\
  \        if ($i < 0 || $i >= $n || $j < 0 || $j >= $m) {\n            return;\n\
  \        }\n        if ($visited->{\"$i,$j\"}) {\n            return;\n        }\n\
  \        $visited->{\"$i,$j\"} = 1;\n        push @$path, $grid->[$i][$j];\n   \
  \     $sum += $grid->[$i][$j];\n        if (scalar(@$path) == $k) {\n          \
  \  if ($sum < $min_sum) {\n                $min_sum = $sum;\n                $min_path\
  \ = [@$path];\n            }\n        }\n        $dfs->($i - 1, $j);\n        $dfs->($i\
  \ + 1, $j);\n        $dfs->($i, $j - 1);\n        $dfs->($i, $j + 1);\n        pop\
  \ @$path;\n        $sum -= $grid->[$i][$j];\n        $visited->{\"$i,$j\"} = 0;\n\
  \    };\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n    \
  \        $dfs->($i, $j);\n        }\n    }\n    return $min_path;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n\
  \    my $max = $grid->[0][0];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
  \ {\n            $min = $grid->[$i][$j] if $grid->[$i][$j] < $min;\n           \
  \ $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n        }\n    }\n    my $res\
  \ = [];\n    my $minPath = sub {\n        my($i, $j, $k, $path) = @_;\n        return\
  \ if $k < 0;\n        if ($k == 0) {\n            if ($path->[-1] < $res->[-1])\
  \ {\n                $res = $path;\n            }\n            return;\n       \
  \ }\n        if ($i > 0) {\n            my $newPath = [@$path, $grid->[$i-1][$j]];\n\
  \            $minPath->($i-1, $j, $k-1, $newPath);\n        }\n        if ($i <\
  \ $n-1) {\n            my $newPath = [@$path, $grid->[$i+1][$j]];\n            $minPath->($i+1,\
  \ $j, $k-1, $newPath);\n        }\n        if ($j > 0) {\n            my $newPath\
  \ = [@$path, $grid->[$i][$j-1]];\n            $minPath->($i, $j-1, $k-1, $newPath);\n\
  \        }\n        if ($j < $m-1) {\n            my $newPath = [@$path, $grid->[$i][$j+1]];\n\
  \            $minPath->($i, $j+1, $k-1, $newPath);\n        }\n    };\n    $minPath->(0,\
  \ 0, $k, [$grid->[0][0]]);"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ $grid->[0][0];\n    my $min_path = [$min];\n    my $min_path_len = 1;\n    my\
  \ $min_path_idx = 0;\n    my $min_path_idx_prev = 0;\n    my $min_path_idx_next\
  \ = 0;\n    my $min_path_idx_prev_prev = 0;\n    my $min_path_idx_next_next = 0;\n\
  \    my $min_path_idx_prev_prev_prev = 0;\n    my $min_path_idx_next_next_next =\
  \ 0;\n    my $min_path_idx_prev_prev_prev_prev = 0;\n    my $min_path_idx_next_next_next_next\
  \ = 0;\n    my $min_path_idx_prev_prev_prev_prev_prev = 0;\n    my $min_path_idx_next_next_next_next_next\
  \ = 0;\n    my $min_path_idx_prev_prev_prev_prev_prev_prev = 0;\n    my $min_path_idx_next_next_next_next_next_next\
  \ = 0;\n    my $min_path_idx_prev_prev_prev_prev_prev_prev_prev = 0;\n    my $min_path_idx_next_next_next_next_next_next_next\
  \ = 0;\n    my $min_path_idx_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    my\
  \ $min_path_idx_next_next_next_next_next_next_next_next = 0;\n    my $min_path_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev\
  \ = 0;\n    my $min_path_idx_next_next_next_next_next_next_next_next_next = 0;\n\
  \    my $min_path_idx_prev_prev_prev"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i]->[$j]\
  \ = [];\n            for my $l (0..$k-1) {\n                $dp->[$i]->[$j]->[$l]\
  \ = [];\n            }\n        }\n    }\n    for my $i (0..$n-1) {\n        for\
  \ my $j (0..$m-1) {\n            $dp->[$i]->[$j]->[0] = [$grid->[$i]->[$j]];\n \
  \       }\n    }\n    for my $l (1..$k-1) {\n        for my $i (0..$n-1) {\n   \
  \         for my $j (0..$m-1) {\n                my $min = [];\n               \
  \ my $min_val = undef;\n                if ($i > 0) {\n                    my $val\
  \ = $grid->[$i]->[$j] + $dp->[$i-1]->[$j]->[$l-1]->[0];\n                    if\
  \ (!defined($min_val) || $val < $min_val) {\n                        $min_val =\
  \ $val;\n                        $min = [$val, @{$dp->[$i-1]->[$j]->[$l-1]}];\n\
  \                    }\n                }\n                if ($i < $n-1) {\n  \
  \                  my $val = $grid->[$i]->[$j] + $dp->[$i+1]->[$j]->[$l-1]->[0];\n\
  \                    if (!defined($min_val) || $val < $min_val) {\n            \
  \            $min_val = $val;\n                        $min = [$val, @{$dp->[$i+1]->[$j]->[$l-1]}];\n\
  \                    }\n                }\n                if ($"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n    for\
  \ my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    my $minPath = [];\n    my $minSum = $n * $m * $k;\n\
  \    my $minPathSum = $minSum;\n    my $minPathLen = 0;\n    my $minPathIdx = -1;\n\
  \    my $path = [];\n    my $pathSum = 0;\n    my $pathLen = 0;\n    my $pathIdx\
  \ = -1;\n    my $i = 0;\n    my $j = 0;\n    my $dir = 0;\n    while (1) {\n   \
  \     if ($pathLen == $k) {\n            if ($pathSum < $minPathSum) {\n       \
  \         $minPathSum = $pathSum;\n                $minPathLen = $pathLen;\n   \
  \             $minPathIdx = $pathIdx;\n                for my $i (0..$pathLen-1)\
  \ {\n                    $minPath->[$i] = $path->[$i];\n                }\n    \
  \        }\n            elsif ($pathSum == $minPathSum) {\n                my $i\
  \ = 0;\n                while ($i < $pathLen && $path->[$i] == $minPath->[$i]) {\n\
  \                    $i++;\n                }\n                if ($i < $pathLen\
  \ && $path->[$i] < $minPath->[$i]) {\n                    $minPathLen = $pathLen;\n\
  \                    $minPathIdx = $pathIdx;\n                    for my $i (0..$pathLen-1)\
  \ {\n                        $minPath->[$i] = $path->[$i];\n                   \
  \ }\n                }\n            }\n        }\n        if ($pathLen < $k) {\n\
  \            if ($dir == 0) {\n                if ($j < $m-1 && $visited->[$i][$j+1]\
  \ == 0) {"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min_path = [];\n    my\
  \ $min_sum = $n * $m + 1;\n    my $min_path_sum = $min_sum;\n    my $min_path_sum_path\
  \ = [];\n    my $min_path_sum_path_sum = $min_sum;\n    my $min_path_sum_path_sum_path\
  \ = [];\n    my $min_path_sum_path_sum_path_sum = $min_sum;\n    my $min_path_sum_path_sum_path_sum_path\
  \ = [];\n    my $min_path_sum_path_sum_path_sum_path_sum = $min_sum;\n    my $min_path_sum_path_sum_path_sum_path_sum_path\
  \ = [];\n    my $min_path_sum_path_sum_path_sum_path_sum_path_sum = $min_sum;\n\
  \    my $min_path_sum_path_sum_path_sum_path_sum_path_sum_path = [];\n    my $min_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum\
  \ = $min_sum;\n    my $min_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path\
  \ = [];\n    my $min_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum\
  \ = $min_sum;\n    my $min_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path\
  \ = [];\n    my $min_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum\
  \ = $min_sum;\n    my $min_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path\
  \ = [];\n    my $min_path_sum_path_sum_"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
  \ = [];\n    my $min_sum = $n * $m + 1;\n    my $min_path_sum = $min_sum;\n    my\
  \ $min_path_sum_idx = -1;\n    my $min_path_sum_jdx = -1;\n    for my $i (0..$n-1)\
  \ {\n        for my $j (0..$m-1) {\n            my $path = [];\n            my $sum\
  \ = 0;\n            my $path_sum = 0;\n            my $path_sum_idx = -1;\n    \
  \        my $path_sum_jdx = -1;\n            my $path_sum_min = $min_sum;\n    \
  \        my $path_sum_min_idx = -1;\n            my $path_sum_min_jdx = -1;\n  \
  \          my $path_sum_max = 0;\n            my $path_sum_max_idx = -1;\n     \
  \       my $path_sum_max_jdx = -1;\n            my $path_sum_max_min = $min_sum;\n\
  \            my $path_sum_max_min_idx = -1;\n            my $path_sum_max_min_jdx\
  \ = -1;\n            my $path_sum_max_max = 0;\n            my $path_sum_max_max_idx\
  \ = -1;\n            my $path_sum_max_max_jdx = -1;\n            my $path_sum_max_max_min\
  \ = $min_sum;\n            my $path_sum_max_max_min_idx = -1;\n            my $path_sum_max_max_min_jdx\
  \ = -1;\n            my $path_sum_max_max_max = 0;\n            my $path_sum_max_max_max_idx\
  \ = -1;\n            my $path_sum_max_max_max_jdx = -1;\n            my $path_sum_max_max_max_min\
  \ = $"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ [];\n    my $min_sum = $n * $n + 1;\n    for my $i (0 .. $n - 1) {\n        for\
  \ my $j (0 .. $m - 1) {\n            my $path = [];\n            my $sum = 0;\n\
  \            my $visited = [];\n            for my $x (0 .. $n - 1) {\n        \
  \        for my $y (0 .. $m - 1) {\n                    $visited->[$x][$y] = 0;\n\
  \                }\n            }\n            dfs($grid, $i, $j, $k, $path, $sum,\
  \ $visited);\n            if ($sum < $min_sum) {\n                $min_sum = $sum;\n\
  \                $min = $path;\n            }\n        }\n    }\n    return $min;\n\
  }"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = {};\n    my\
  \ $min = [];\n    my $min_sum = $n * $m;\n    my $dfs;\n    $dfs = sub {\n     \
  \   my($i, $j, $sum, $path) = @_;\n        return if $sum > $min_sum;\n        return\
  \ if $sum + ($n - $i) + ($m - $j) > $min_sum;\n        return if $sum + ($n - $i)\
  \ + ($m - $j) > $k;\n        return if $sum + ($n - $i) + ($m - $j) < $k;\n    \
  \    return if $sum > $k;\n        if ($i == $n - 1 && $j == $m - 1) {\n       \
  \     if ($sum == $k) {\n                $min_sum = $sum;\n                $min\
  \ = $path;\n            }\n            return;\n        }\n        $visited->{\"\
  $i,$j\"} = 1;\n        if ($i + 1 < $n && !$visited->{\"$i,$j\"}) {\n          \
  \  $dfs->($i + 1, $j, $sum + 1, [@$path, $grid->[$i + 1][$j]]);\n        }\n   \
  \     if ($j + 1 < $m && !$visited->{\"$i,$j\"}) {\n            $dfs->($i, $j +\
  \ 1, $sum + 1, [@$path, $grid->[$i][$j + 1]]);\n        }\n        $visited->{\"\
  $i,$j\"} = 0;\n    };\n    $dfs->(0, 0, 0, [$grid->[0][0]]);\n    return $min;\n\
  }"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath\
  \ = [];\n    my $minSum = $n * $n + 1;\n    my $minPathSum = $n * $n + 1;\n    my\
  \ $minPathSum2 = $n * $n + 1;\n    my $minPath2 = [];\n    my $minPath3 = [];\n\
  \    my $minPathSum3 = $n * $n + 1;\n    my $minPathSum4 = $n * $n + 1;\n    my\
  \ $minPath4 = [];\n    my $minPath5 = [];\n    my $minPathSum5 = $n * $n + 1;\n\
  \    my $minPathSum6 = $n * $n + 1;\n    my $minPath6 = [];\n    my $minPath7 =\
  \ [];\n    my $minPathSum7 = $n * $n + 1;\n    my $minPathSum8 = $n * $n + 1;\n\
  \    my $minPath8 = [];\n    my $minPath9 = [];\n    my $minPathSum9 = $n * $n +\
  \ 1;\n    my $minPathSum10 = $n * $n + 1;\n    my $minPath10 = [];\n    my $minPath11\
  \ = [];\n    my $minPathSum11 = $n * $n + 1;\n    my $minPathSum12 = $n * $n + 1;\n\
  \    my $minPath12 = [];\n    my $minPath13 = [];\n    my $minPathSum13 = $n * $n\
  \ + 1;\n    my $minPathSum14 = $n * $n + 1;\n    my $minPath14 = [];\n    my $minPath15\
  \ = [];\n    my $minPathSum15 = $n * $n + 1;\n    my $minPathSum16 = $n * $n + 1;\n\
  \    my $minPath16 = [];\n    my $minPath17 = [];\n    my $minPathSum17 = $n * $n\
  \ + 1;\n    my $minPathSum18 = $n * $n + 1;\n    my $minPath18 = [];"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $visited\
  \ = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m;\
  \ $j++) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $minPath\
  \ = [];\n    my $minSum = $n * $m * $n * $m;\n    my $minPathSum = $minSum;\n  \
  \  my $minPathLen = $k;\n    my $minPathList = [];\n    my $minPathListSum = $minSum;\n\
  \    my $minPathListLen = $k;\n    my $minPathListIdx = 0;\n    my $minPathListIdxSum\
  \ = $minSum;\n    my $minPathListIdxLen = $k;\n    my $minPathListIdxIdx = 0;\n\
  \    my $minPathListIdxIdxSum = $minSum;\n    my $minPathListIdxIdxLen = $k;\n \
  \   for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n\
  \            my $sum = $grid->[$i][$j];\n            my $path = [[$i, $j]];\n  \
  \          my $pathSum = $sum;\n            my $pathLen = 1;\n            my $pathList\
  \ = [$grid->[$i][$j]];\n            my $pathListSum = $sum;\n            my $pathListLen\
  \ = 1;\n            my $pathListIdx = 0;\n            my $pathListIdxSum = $sum;\n\
  \            my $pathListIdxLen = 1;\n            my $pathListIdxIdx = 0;\n    \
  \        my $pathListIdxIdxSum = $sum;\n            my $pathListIdxIdxLen = 1;\n\
  \            $visited->[$i][$j] = 1;\n            my $paths = [[$i, $j]];\n"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $dp = [];\n    for my $i\
  \ (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i][$j] = [];\n\
  \            for my $l (0..$k-1) {\n                $dp->[$i][$j][$l] = [];\n  \
  \          }\n        }\n    }\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
  \ {\n            $dp->[$i][$j][0] = [$grid->[$i][$j]];\n        }\n    }\n    for\
  \ my $l (1..$k-1) {\n        for my $i (0..$n-1) {\n            for my $j (0..$m-1)\
  \ {\n                my $min = [];\n                if ($i > 0) {\n            \
  \        my $tmp = [@{$dp->[$i-1][$j][$l-1]}, $grid->[$i][$j]];\n              \
  \      if (!@$min || $tmp lt $min) {\n                        $min = $tmp;\n   \
  \                 }\n                }\n                if ($i < $n-1) {\n     \
  \               my $tmp = [@{$dp->[$i+1][$j][$l-1]}, $grid->[$i][$j]];\n       \
  \             if (!@$min || $tmp lt $min) {\n                        $min = $tmp;\n\
  \                    }\n                }\n                if ($j > 0) {\n     \
  \               my $tmp = [@{$dp->[$i][$j-1][$l-1]}, $grid->[$i][$j]];\n       \
  \             if (!@$min || $tmp lt $min) {\n                        $min = $tmp;\n\
  \                    }\n                }\n                if ($j < $m-1) {\n  \
  \                  my $tmp = [@{$dp->[$i][$j+1][$l-1]}, $grid->[$i]["
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum\
  \ = $n * $m;\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n        for\
  \ my $j (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n\
  \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my\
  \ $sum = 0;\n            my $path = [];\n            dfs($grid, $i, $j, $k, $sum,\
  \ $path, $visited, $min, $min_sum);\n        }\n    }\n    return $min;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n    for\
  \ my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    my $min = [];\n    for my $i (0..$k-1) {\n       \
  \ $min->[$i] = $grid->[0][0];\n    }\n    my $min_path = [];\n    for my $i (0..$k-1)\
  \ {\n        $min_path->[$i] = [0, 0];\n    }\n    my $queue = [[0, 0]];\n    $visited->[0][0]\
  \ = 1;\n    my $path = [];\n    while (@$queue) {\n        my $cur = shift @$queue;\n\
  \        my $i = $cur->[0];\n        my $j = $cur->[1];\n        push @$path, [$i,\
  \ $j];\n        if (@$path == $k) {\n            my $lst = [];\n            for\
  \ my $p (@$path) {\n                push @$lst, $grid->[$p->[0]][$p->[1]];\n   \
  \         }\n            if (less($lst, $min)) {\n                $min = $lst;\n\
  \                $min_path = $path;\n            }\n            pop @$path;\n  \
  \          next;\n        }\n        if ($i > 0 && !$visited->[$i-1][$j]) {\n  \
  \          $visited->[$i-1][$j] = 1;\n            push @$queue, [$i-1, $j];\n  \
  \      }\n        if ($i < $n-1 && !$visited->[$i+1][$j]) {\n            $visited->[$i+1][$j]\
  \ = 1;\n            push @$queue, [$i+1, $j];\n        }\n        if ($j > 0 &&\
  \ !$visited->[$i][$j"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ $grid->[0][0];\n    my $max = $grid->[0][0];\n    for my $i (0..$n-1) {\n    \
  \    for my $j (0..$m-1) {\n            $min = $grid->[$i][$j] if $grid->[$i][$j]\
  \ < $min;\n            $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n     \
  \   }\n    }\n    my $minPath = [];\n    my $minPathSum = $max * $k;\n    my $visited\
  \ = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
  \ {\n            if ($grid->[$i][$j] == $min) {\n                my $path = [];\n\
  \                my $pathSum = 0;\n                $visited->[$i][$j] = 1;\n   \
  \             push @$path, $grid->[$i][$j];\n                $pathSum += $grid->[$i][$j];\n\
  \                dfs($grid, $i, $j, $k-1, $path, $pathSum, $visited, $minPath, $minPathSum);\n\
  \                $visited->[$i][$j] = 0;\n            }\n        }\n    }\n    return\
  \ $minPath;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ [ map { [ map { [$_] } @$_ ] } @$grid ];\n    for my $i (0 .. $n - 1) {\n    \
  \    for my $j (0 .. $m - 1) {\n            for my $d (0 .. 3) {\n             \
  \   my $x = $i + $dx[$d];\n                my $y = $j + $dy[$d];\n             \
  \   if ($x >= 0 && $x < $n && $y >= 0 && $y < $m) {\n                    my $l =\
  \ scalar(@{$min->[$x][$y]});\n                    if ($l < $k) {\n             \
  \           push @{$min->[$x][$y]}, $grid->[$i][$j];\n                    }\n  \
  \              }\n            }\n        }\n    }\n    my $ans = [];\n    for my\
  \ $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            if (scalar(@{$min->[$i][$j]})\
  \ == $k) {\n                if (!@$ans || $min->[$i][$j] lt $ans) {\n          \
  \          $ans = $min->[$i][$j];\n                }\n            }\n        }\n\
  \    }\n    return $ans;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum\
  \ = $n * $m;\n    my $min_path = [];\n    my $min_path_sum = $n * $m;\n    my $min_path_len\
  \ = $n * $m;\n    my $min_path_k = [];\n    my $min_path_k_sum = $n * $m;\n    my\
  \ $min_path_k_len = $n * $m;\n    my $visited = [];\n    for my $i (0 .. $n - 1)\
  \ {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n  \
  \      }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1)\
  \ {\n            my $path = [];\n            my $path_sum = 0;\n            my $path_len\
  \ = 0;\n            my $path_k = [];\n            my $path_k_sum = 0;\n        \
  \    my $path_k_len = 0;\n            my $path_k_found = 0;\n            $visited->[$i][$j]\
  \ = 1;\n            dfs($grid, $i, $j, $visited, $path, $path_sum, $path_len, $path_k,\
  \ $path_k_sum, $path_k_len, $path_k_found, $k);\n            $visited->[$i][$j]\
  \ = 0;\n            if ($path_sum < $min_sum) {\n                $min = $path;\n\
  \                $min_sum = $path_sum;\n            }\n            if ($path_len\
  \ < $min_path_len) {\n                $min_path = $path;\n                $min_path_sum\
  \ = $path_sum;\n                $min_path_len = $path_len;\n            }\n    \
  \        if ($path_k_len < $min_path_k_len) {\n                $min_path_k = $path"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ $grid->[0][0];\n    my $max = $grid->[$n-1][$m-1];\n    my $minPath = [];\n  \
  \  my $minPathSum = $max * $k;\n    my $path = [];\n    my $pathSum = 0;\n    my\
  \ $visited = {};\n    my $visitedSum = {};\n    my $visitedPath = {};\n    my $visitedPathSum\
  \ = {};\n    my $visitedPathSumMin = {};\n    my $visitedPathSumMax = {};\n    my\
  \ $visitedPathSumMinPath = {};\n    my $visitedPathSumMaxPath = {};\n    my $visitedPathSumMinPathSum\
  \ = {};\n    my $visitedPathSumMaxPathSum = {};\n    my $visitedPathSumMinPathSumMin\
  \ = {};\n    my $visitedPathSumMaxPathSumMax = {};\n    my $visitedPathSumMinPathSumMinPath\
  \ = {};\n    my $visitedPathSumMaxPathSumMaxPath = {};\n    my $visitedPathSumMinPathSumMinPathSum\
  \ = {};\n    my $visitedPathSumMaxPathSumMaxPathSum = {};\n    my $visitedPathSumMinPathSumMinPathSumMin\
  \ = {};\n    my $visitedPathSumMaxPathSumMaxPathSumMax = {};\n    my $visitedPathSumMinPathSumMinPathSumMinPath\
  \ = {};\n    my $visitedPathSumMaxPathSumMaxPathSumMaxPath = {};\n    my $visitedPathSumMinPathSumMinPathSumMinPathSum\
  \ = {};\n    my $visitedPathSumMaxPathSumMaxPathSumMaxPathSum = {};\n    my $visitedPathSumMinPathSumMinPathSumMinPathSumMin\
  \ = {};\n    my $visitedPathSumMaxPathSumMaxPathSumMaxPathSumMax = {};\n    my $visitedPathSumMinPathSumMinPathSumMinPathSumMinPath\
  \ = {};\n    my $visitedPathSumMaxPathSumMaxPathSumMaxPathSum"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $visited\
  \ = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    my $min = [];\n    for my $i (0..$k-1) {\n       \
  \ $min->[$i] = $grid->[0][0];\n    }\n    my $min_sum = $grid->[0][0];\n    my $min_path\
  \ = [];\n    my $min_path_sum = 0;\n    my $min_path_len = 0;\n    my $path = [];\n\
  \    my $path_sum = 0;\n    my $path_len = 0;\n    my $queue = [];\n    push @$queue,\
  \ [0, 0];\n    while (@$queue) {\n        my $curr = shift @$queue;\n        my\
  \ $i = $curr->[0];\n        my $j = $curr->[1];\n        if ($visited->[$i][$j])\
  \ {\n            next;\n        }\n        $visited->[$i][$j] = 1;\n        $path_sum\
  \ += $grid->[$i][$j];\n        $path_len += 1;\n        push @$path, $grid->[$i][$j];\n\
  \        if ($path_len == $k) {\n            if ($path_sum < $min_sum) {\n     \
  \           $min_sum = $path_sum;\n                $min_path = $path;\n        \
  \        $min_path_sum = $path_sum;\n                $min_path_len = $path_len;\n\
  \            }\n            elsif ($path_sum == $min_sum) {\n                my\
  \ $i = 0;\n                while ($i < $k) {\n                    if ($path->[$i]\
  \ < $min_path->[$i]) {\n                        $min_path = $path;\n           \
  \             $min_path_sum = $path_"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ $grid->[0][0];\n    my $max = $grid->[0][0];\n    for my $i (0..$n-1) {\n    \
  \    for my $j (0..$m-1) {\n            $min = $grid->[$i][$j] if $grid->[$i][$j]\
  \ < $min;\n            $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n     \
  \   }\n    }\n    my $minPath = [];\n    my $minSum = $min * $k;\n    my $maxSum\
  \ = $max * $k;\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n     \
  \       my $path = [];\n            my $sum = 0;\n            my $visited = [];\n\
  \            for my $i (0..$n-1) {\n                for my $j (0..$m-1) {\n    \
  \                $visited->[$i][$j] = 0;\n                }\n            }\n   \
  \         dfs($grid, $i, $j, $k, $path, $sum, $visited, $minPath, $minSum, $maxSum);\n\
  \        }\n    }\n    return $minPath;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum\
  \ = $n * $m + 1;\n    my $min_path = [];\n    my $visited = [];\n    for my $i (0\
  \ .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
  \ $m - 1) {\n            my $path = [];\n            my $sum = 0;\n            dfs($grid,\
  \ $i, $j, $k, $path, $sum, $min, $min_sum, $min_path, $visited);\n        }\n  \
  \  }\n    return $min_path;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = {};\n    my\
  \ $min = [];\n    my $min_sum = $n * $m + 1;\n    my $min_path = [];\n    my $dfs;\n\
  \    $dfs = sub {\n        my($i, $j, $path, $sum) = @_;\n        return if $sum\
  \ > $min_sum;\n        return if $i < 0 || $i >= $n || $j < 0 || $j >= $m;\n   \
  \     return if $visited->{\"$i,$j\"};\n        $visited->{\"$i,$j\"} = 1;\n   \
  \     push @$path, $grid->[$i][$j];\n        if (@$path == $k) {\n            if\
  \ ($sum < $min_sum) {\n                $min_sum = $sum;\n                $min_path\
  \ = $path;\n            } elsif ($sum == $min_sum) {\n                my $i = 0;\n\
  \                while ($i < $k && $path->[$i] == $min_path->[$i]) {\n         \
  \           $i++;\n                }\n                if ($i < $k && $path->[$i]\
  \ < $min_path->[$i]) {\n                    $min_path = $path;\n               \
  \ }\n            }\n        } else {\n            $dfs->($i - 1, $j, $path, $sum\
  \ + $grid->[$i - 1][$j]);\n            $dfs->($i + 1, $j, $path, $sum + $grid->[$i\
  \ + 1][$j]);\n            $dfs->($i, $j - 1, $path, $sum + $grid->[$i][$j - 1]);\n\
  \            $dfs->($i, $j + 1, $path, $sum + $grid->[$i][$j + 1]);\n        }\n\
  \        pop @$path;\n        $visited->{\"$i,$j\"} = 0;\n    };\n    for my $i\
  \ (0 .. $n - 1) {\n        for my"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n\
  \    my $max = $grid->[0][0];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
  \ {\n            $min = $grid->[$i][$j] if $grid->[$i][$j] < $min;\n           \
  \ $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n        }\n    }\n    my $minPath\
  \ = [];\n    my $minPathSum = $max * $k;\n    my $minPathSum2 = $max * $k;\n   \
  \ my $minPath2 = [];\n    my $minPathSum3 = $max * $k;\n    my $minPath3 = [];\n\
  \    my $minPathSum4 = $max * $k;\n    my $minPath4 = [];\n    my $minPathSum5 =\
  \ $max * $k;\n    my $minPath5 = [];\n    my $minPathSum6 = $max * $k;\n    my $minPath6\
  \ = [];\n    my $minPathSum7 = $max * $k;\n    my $minPath7 = [];\n    my $minPathSum8\
  \ = $max * $k;\n    my $minPath8 = [];\n    my $minPathSum9 = $max * $k;\n    my\
  \ $minPath9 = [];\n    my $minPathSum10 = $max * $k;\n    my $minPath10 = [];\n\
  \    my $minPathSum11 = $max * $k;\n    my $minPath11 = [];\n    my $minPathSum12\
  \ = $max * $k;\n    my $minPath12 = [];\n    my $minPathSum13 = $max * $k;\n   \
  \ my $minPath13 = [];\n    my $minPathSum14 = $max * $k;\n    my $minPath14 = [];\n\
  \    my $minPathSum15 = $max * $k;\n    my $minPath15 = [];\n    my $min"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
  \ = [];\n    my $min_sum = $n * $n * $k;\n    my $visited = {};\n    for my $i (0\
  \ .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [$grid->[$i][$j]];\n\
  \            my $sum = $grid->[$i][$j];\n            my $visited = {};\n       \
  \     $visited->{$i}{$j} = 1;\n            dfs($grid, $i, $j, $k - 1, $path, $sum,\
  \ $visited, $min_path, $min_sum);\n        }\n    }\n    return $min_path;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
  \ = [];\n    my $min_sum = $n * $n * $k;\n    my $min_path_sum = $min_sum;\n   \
  \ my $min_path_sum_idx = 0;\n    my $min_path_sum_jdx = 0;\n    for my $i (0..$n-1)\
  \ {\n        for my $j (0..$m-1) {\n            my $path = [];\n            my $sum\
  \ = 0;\n            my $path_sum = 0;\n            my $path_sum_idx = 0;\n     \
  \       my $path_sum_jdx = 0;\n            my $path_sum_idx_prev = 0;\n        \
  \    my $path_sum_jdx_prev = 0;\n            my $path_sum_idx_prev_prev = 0;\n \
  \           my $path_sum_jdx_prev_prev = 0;\n            my $path_sum_idx_prev_prev_prev\
  \ = 0;\n            my $path_sum_jdx_prev_prev_prev = 0;\n            my $path_sum_idx_prev_prev_prev_prev\
  \ = 0;\n            my $path_sum_jdx_prev_prev_prev_prev = 0;\n            my $path_sum_idx_prev_prev_prev_prev_prev\
  \ = 0;\n            my $path_sum_jdx_prev_prev_prev_prev_prev = 0;\n           \
  \ my $path_sum_idx_prev_prev_prev_prev_prev_prev = 0;\n            my $path_sum_jdx_prev_prev_prev_prev_prev_prev\
  \ = 0;\n            my $path_sum_idx_prev_prev_prev_prev_prev_prev_prev = 0;\n \
  \           my $path_sum_jdx_prev_prev_prev_prev_prev_prev_prev = 0;\n         \
  \   my $path_sum_idx_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n            my\
  \ $path_"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $dp = [];\n    for my $i\
  \ (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i][$j] = [];\n\
  \            for my $l (0..$k-1) {\n                $dp->[$i][$j][$l] = [];\n  \
  \          }\n        }\n    }\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
  \ {\n            $dp->[$i][$j][0] = [$grid->[$i][$j]];\n        }\n    }\n    for\
  \ my $l (1..$k-1) {\n        for my $i (0..$n-1) {\n            for my $j (0..$m-1)\
  \ {\n                $dp->[$i][$j][$l] = [];\n                my $min = [];\n  \
  \              if ($i > 0) {\n                    my $cur = $dp->[$i-1][$j][$l-1];\n\
  \                    if (!@$min || $cur->[0] < $min->[0]) {\n                  \
  \      $min = $cur;\n                    }\n                }\n                if\
  \ ($i < $n-1) {\n                    my $cur = $dp->[$i+1][$j][$l-1];\n        \
  \            if (!@$min || $cur->[0] < $min->[0]) {\n                        $min\
  \ = $cur;\n                    }\n                }\n                if ($j > 0)\
  \ {\n                    my $cur = $dp->[$i][$j-1][$l-1];\n                    if\
  \ (!@$min || $cur->[0] < $min->[0]) {\n                        $min = $cur;\n  \
  \                  }\n                }\n                if ($j < $m-1) {\n    \
  \                my $cur = $dp->[$i][$j+1][$l-1];\n                    if (!@$min\
  \ || $cur->[0] < $min->[0])"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i]->[$j]\
  \ = [];\n            for my $l (0..$k-1) {\n                $dp->[$i]->[$j]->[$l]\
  \ = [];\n            }\n        }\n    }\n    for my $i (0..$n-1) {\n        for\
  \ my $j (0..$m-1) {\n            $dp->[$i]->[$j]->[0] = [$grid->[$i]->[$j]];\n \
  \       }\n    }\n    for my $l (1..$k-1) {\n        for my $i (0..$n-1) {\n   \
  \         for my $j (0..$m-1) {\n                my $min = [];\n               \
  \ for my $d (0..3) {\n                    my $ni = $i + $dirs->[$d]->[0];\n    \
  \                my $nj = $j + $dirs->[$d]->[1];\n                    if ($ni >=\
  \ 0 && $ni < $n && $nj >= 0 && $nj < $m) {\n                        my $cur = $dp->[$ni]->[$nj]->[$l-1];\n\
  \                        if (!@$min || $cur->[0] < $min->[0] ||\n              \
  \              ($cur->[0] == $min->[0] && $cur->[1] < $min->[1])) {\n          \
  \                  $min = $cur;\n                        }\n                   \
  \ }\n                }\n                $dp->[$i]->[$j]->[$l] = [$grid->[$i]->[$j],\
  \ @$min];\n            }\n        }\n    }\n    my $min = [];\n    for my $i (0..$n-1)\
  \ {\n        for my $j (0..$m-1"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i]->[$j]\
  \ = {};\n        }\n    }\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
  \ {\n            for my $l (0..$k-1) {\n                $dp->[$i]->[$j]->{$l} =\
  \ [];\n            }\n        }\n    }\n    for my $i (0..$n-1) {\n        for my\
  \ $j (0..$m-1) {\n            $dp->[$i]->[$j]->{0} = [$grid->[$i]->[$j]];\n    \
  \    }\n    }\n    for my $l (1..$k-1) {\n        for my $i (0..$n-1) {\n      \
  \      for my $j (0..$m-1) {\n                my $min = [];\n                if\
  \ ($i > 0) {\n                    my $tmp = [@{$dp->[$i-1]->[$j]->{$l-1}}];\n  \
  \                  push @$tmp, $grid->[$i]->[$j];\n                    if (!@$min\
  \ || $tmp lt $min) {\n                        $min = $tmp;\n                   \
  \ }\n                }\n                if ($i < $n-1) {\n                    my\
  \ $tmp = [@{$dp->[$i+1]->[$j]->{$l-1}}];\n                    push @$tmp, $grid->[$i]->[$j];\n\
  \                    if (!@$min || $tmp lt $min) {\n                        $min\
  \ = $tmp;\n                    }\n                }\n                if ($j > 0)\
  \ {\n                    my $tmp = [@{$dp->[$i]->[$j-1]->{$l-1}}];\n           \
  \         push @"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $visited\
  \ = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    my $min_path = [];\n    my $min_sum = $n * $m * $k;\n\
  \    my $min_path_sum = $min_sum;\n    my $min_path_len = $k;\n    my $path = [];\n\
  \    my $path_sum = 0;\n    my $path_len = 0;\n    my $path_index = 0;\n    my $path_index_stack\
  \ = [];\n    my $path_sum_stack = [];\n    my $path_len_stack = [];\n    my $path_stack\
  \ = [];\n    my $visited_stack = [];\n    my $i = 0;\n    my $j = 0;\n    my $next_i\
  \ = 0;\n    my $next_j = 0;\n    my $next_sum = 0;\n    my $next_len = 0;\n    my\
  \ $next_index = 0;\n    my $next_visited = [];\n    while (1) {\n        if ($path_len\
  \ == $k) {\n            if ($path_sum < $min_path_sum) {\n                $min_path_sum\
  \ = $path_sum;\n                $min_path_len = $path_len;\n                $min_path\
  \ = [@$path];\n            } elsif ($path_sum == $min_path_sum) {\n            \
  \    my $i = 0;\n                while ($i < $path_len) {\n                    if\
  \ ($path->[$i] < $min_path->[$i]) {\n                        $min_path = [@$path];\n\
  \                        last;\n                    } elsif ($path->[$i] > $min_path->[$i])\
  \ {\n                        last;\n                    }\n                    $i++;\n\
  \                }\n            }\n            if ($path_index == 0"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n    for\
  \ my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    my $min = [];\n    for my $i (0..$k-1) {\n       \
  \ $min->[$i] = $grid->[0][0];\n    }\n    my $min_sum = $k * $grid->[0][0];\n  \
  \  my $min_path = [];\n    for my $i (0..$k-1) {\n        $min_path->[$i] = [0,\
  \ 0];\n    }\n    my $path = [];\n    for my $i (0..$k-1) {\n        $path->[$i]\
  \ = [0, 0];\n    }\n    my $sum = 0;\n    my $curr = 0;\n    my $next = 1;\n   \
  \ $path->[0] = [0, 0];\n    $visited->[0][0] = 1;\n    while ($curr < $k) {\n  \
  \      my $i = $path->[$curr][0];\n        my $j = $path->[$curr][1];\n        if\
  \ ($i > 0 && $visited->[$i-1][$j] == 0) {\n            $path->[$next][0] = $i-1;\n\
  \            $path->[$next][1] = $j;\n            $visited->[$i-1][$j] = 1;\n  \
  \          $sum += $grid->[$i-1][$j];\n            $next++;\n        }\n       \
  \ if ($i < $n-1 && $visited->[$i+1][$j] == 0) {\n            $path->[$next][0] =\
  \ $i+1;\n            $path->[$next][1] = $j;\n            $visited->[$i+1][$j] =\
  \ 1;\n            $sum += $grid"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n\
  \    my $min_path = [$min];\n    my $min_path_len = 1;\n    my $visited = {};\n\
  \    my $queue = [{\n        path => [$min],\n        path_len => 1,\n        i\
  \ => 0,\n        j => 0,\n    }];\n    while (@$queue) {\n        my $curr = shift\
  \ @$queue;\n        my $i = $curr->{i};\n        my $j = $curr->{j};\n        my\
  \ $path = $curr->{path};\n        my $path_len = $curr->{path_len};\n        if\
  \ ($path_len == $k) {\n            if ($path->[0] < $min) {\n                $min\
  \ = $path->[0];\n                $min_path = $path;\n                $min_path_len\
  \ = $path_len;\n            }\n            next;\n        }\n        for my $dir\
  \ ([-1, 0], [1, 0], [0, -1], [0, 1]) {\n            my $ni = $i + $dir->[0];\n \
  \           my $nj = $j + $dir->[1];\n            next if $ni < 0 || $ni >= $n ||\
  \ $nj < 0 || $nj >= $m;\n            my $key = \"$ni,$nj\";\n            next if\
  \ exists $visited->{$key};\n            my $new_path = [@$path, $grid->[$ni][$nj]];\n\
  \            my $new_path_len = $path_len + 1;\n            if ($new_path->[0] <\
  \ $min) {\n                $visited->{$key} = 1;\n                push @$queue,\
  \ {\n                    path => $new_path,\n                    path_len => $new_path_len,\n\
  \                    i => $ni,\n                    j => $nj,\n                };\n\
  \            }\n        }\n    }\n    return $min_path;\n}\n"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath\
  \ = [];\n    my $minSum = $n * $n + 1;\n    my $minSumPath = [];\n    my $visited\
  \ = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n    \
  \        $visited->[$i]->[$j] = 0;\n        }\n    }\n    for my $i (0 .. $n - 1)\
  \ {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n           \
  \ my $sum = 0;\n            my $sumPath = [];\n            dfs($grid, $i, $j, $k,\
  \ $visited, $path, $sum, $sumPath);\n            if ($sum < $minSum) {\n       \
  \         $minSum = $sum;\n                $minSumPath = $sumPath;\n           \
  \ }\n        }\n    }\n    return $minSumPath;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $visited\
  \ = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    my $min_sum = $n * $m * $n * $m;\n    for my $i (0..$n-1)\
  \ {\n        for my $j (0..$m-1) {\n            $min = [];\n            $visited->[$i][$j]\
  \ = 1;\n            dfs($grid, $i, $j, $k, $visited, $min, $min_sum);\n        \
  \    $visited->[$i][$j] = 0;\n        }\n    }\n    return $min;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $minPath = [];\n    my\
  \ $minVal = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n    \
  \        $minPath->[$i][$j] = [];\n            $minVal->[$i][$j] = [];\n       \
  \ }\n    }\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n         \
  \   my $val = $grid->[$i][$j];\n            my $path = [];\n            push @$path,\
  \ $val;\n            $minPath->[$i][$j][0] = $path;\n            $minVal->[$i][$j][0]\
  \ = $val;\n            for my $l (1..$k-1) {\n                my $min = $minVal->[$i][$j][$l-1];\n\
  \                my $minPath = $minPath->[$i][$j][$l-1];\n                if ($i\
  \ > 0) {\n                    my $val = $minVal->[$i-1][$j][$l-1];\n           \
  \         if ($val < $min) {\n                        $min = $val;\n           \
  \             $minPath = $minPath->[$i-1][$j][$l-1];\n                    }\n  \
  \              }\n                if ($j > 0) {\n                    my $val = $minVal->[$i][$j-1][$l-1];\n\
  \                    if ($val < $min) {\n                        $min = $val;\n\
  \                        $minPath = $minPath->[$i][$j-1][$l-1];\n              \
  \      }\n                }\n                if ($i < $n-1) {\n                \
  \    my $val = $minVal->[$i+1][$j][$l-1];\n                    if ($val < $min)\
  \ {\n                        $min = $val;\n                        $minPath = $minPath->[$i+1][$j][$l-1];\n\
  \                    }\n"
- "    my $n = @$grid;\n    my @path;\n    my $min_path = [];\n    my $min_sum = $n\
  \ * $n + 1;\n    my $min_lex = [];\n    my $min_lex_sum = $n * $n + 1;\n    my $min_lex_path\
  \ = [];\n    my $min_lex_path_sum = $n * $n + 1;\n    my $min_lex_path_lex = [];\n\
  \    my $min_lex_path_lex_sum = $n * $n + 1;\n    my $min_lex_path_lex_path = [];\n\
  \    my $min_lex_path_lex_path_sum = $n * $n + 1;\n    my $min_lex_path_lex_path_lex\
  \ = [];\n    my $min_lex_path_lex_path_lex_sum = $n * $n + 1;\n    my $min_lex_path_lex_path_lex_path\
  \ = [];\n    my $min_lex_path_lex_path_lex_path_sum = $n * $n + 1;\n    my $min_lex_path_lex_path_lex_path_lex\
  \ = [];\n    my $min_lex_path_lex_path_lex_path_lex_sum = $n * $n + 1;\n    my $min_lex_path_lex_path_lex_path_lex_path\
  \ = [];\n    my $min_lex_path_lex_path_lex_path_lex_path_sum = $n * $n + 1;\n  \
  \  my $min_lex_path_lex_path_lex_path_lex_path_lex = [];\n    my $min_lex_path_lex_path_lex_path_lex_path_lex_sum\
  \ = $n * $n + 1;\n    my $min_lex_path_lex_path_lex_path_lex_path_lex_path = [];\n\
  \    my $min_lex_path_lex_path_lex_path_lex_path_lex_path_sum = $n * $n + 1;\n \
  \   my $min_lex_path_lex_path_lex_path_lex_path"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $visited\
  \ = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m;\
  \ $j++) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $minPath\
  \ = [];\n    my $minSum = $n * $m + 1;\n    my $minPathSum = $minSum;\n    my $minPathSum2\
  \ = $minSum;\n    my $minPath2 = [];\n    my $minPath3 = [];\n    my $minPathSum3\
  \ = $minSum;\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j <\
  \ $m; $j++) {\n            my $path = [];\n            my $pathSum = 0;\n      \
  \      my $pathSum2 = 0;\n            my $path2 = [];\n            my $path3 = [];\n\
  \            my $pathSum3 = 0;\n            $visited->[$i][$j] = 1;\n          \
  \  push @$path, $grid->[$i][$j];\n            $pathSum += $grid->[$i][$j];\n   \
  \         $pathSum2 += $grid->[$i][$j];\n            push @$path2, $grid->[$i][$j];\n\
  \            $pathSum3 += $grid->[$i][$j];\n            push @$path3, $grid->[$i][$j];\n\
  \            my $ret = dfs($grid, $visited, $i, $j, $k - 1, $path, $pathSum, $minPath,\
  \ $minPathSum, $minPath2, $minPathSum2, $minPath3, $minPathSum3);\n            $minPath\
  \ = $ret->{minPath};\n            $minPathSum = $ret->{minPathSum};\n          \
  \  $minPath2 = $ret->{minPath2};\n            $minPathSum2 = $ret->{minPath"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum\
  \ = $n * $m;\n    my $min_path = [];\n    my $visited = [];\n    for my $i (0 ..\
  \ $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j] =\
  \ 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m\
  \ - 1) {\n            my $path = [];\n            my $sum = 0;\n            $visited->[$i][$j]\
  \ = 1;\n            $sum += $grid->[$i][$j];\n            push @$path, $grid->[$i][$j];\n\
  \            dfs($grid, $i, $j, $k - 1, $path, $sum, $visited, $min, $min_sum, $min_path);\n\
  \            $visited->[$i][$j] = 0;\n        }\n    }\n    return $min_path;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n    for\
  \ (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n     \
  \       $visited->[$i][$j] = 0;\n        }\n    }\n    my $min = [];\n    my $min_sum\
  \ = $n * $m + 1;\n    my $min_path = [];\n    for (my $i = 0; $i < $n; $i++) {\n\
  \        for (my $j = 0; $j < $m; $j++) {\n            my $path = [];\n        \
  \    my $sum = 0;\n            my $visited = [];\n            for (my $i = 0; $i\
  \ < $n; $i++) {\n                for (my $j = 0; $j < $m; $j++) {\n            \
  \        $visited->[$i][$j] = 0;\n                }\n            }\n           \
  \ $visited->[$i][$j] = 1;\n            $sum += $grid->[$i][$j];\n            push\
  \ @$path, $grid->[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $sum, $path,\
  \ $visited, $min, $min_sum, $min_path);\n        }\n    }\n    return $min_path;\n\
  }"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ $grid->[0][0];\n    my $max = $grid->[$n-1][$m-1];\n    my $minPath = [];\n  \
  \  my $minPaths = [];\n    my $visited = {};\n    my $path = [];\n    my $paths\
  \ = [];\n    my $i = 0;\n    my $j = 0;\n    my $v = $grid->[$i][$j];\n    my $key\
  \ = \"$i,$j\";\n    $visited->{$key} = 1;\n    push @$path, $v;\n    push @$paths,\
  \ [$i, $j];\n    my $minPathLen = $k;\n    my $minPathsLen = $k;\n    while (1)\
  \ {\n        if (scalar(@$path) == $k) {\n            if ($v < $min) {\n       \
  \         $min = $v;\n                $minPath = $path;\n                $minPaths\
  \ = $paths;\n                $minPathLen = $k;\n                $minPathsLen = $k;\n\
  \            } elsif ($v == $min) {\n                my $lst = [];\n           \
  \     for (my $i = 0; $i < $k; $i++) {\n                    push @$lst, $grid->[$paths->[$i][0]][$paths->[$i][1]];\n\
  \                }\n                if (lexicographicalLess($lst, $minPath)) {\n\
  \                    $minPath = $lst;\n                    $minPaths = $paths;\n\
  \                    $minPathLen = $k;\n                    $minPathsLen = $k;\n\
  \                }\n            }\n            $visited->{$key} = 0;\n         \
  \   $v = pop @$path;\n            $key = pop @$paths;\n            $k--;\n     \
  \       next;\n        }\n        if ($i > 0 && !$visited->{\"$i-1,$j\"}) {\n  \
  \          $i"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
  \ = [];\n    my $min_sum = $n * $n * $k;\n    my $min_path_sum = $min_sum;\n   \
  \ my $visited = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
  \ 1) {\n            $visited->[$i]->[$j] = 0;\n        }\n    }\n    my $path =\
  \ [];\n    my $path_sum = 0;\n    my $path_len = 0;\n    my $curr_cell = [0, 0];\n\
  \    my $curr_val = $grid->[0]->[0];\n    while (1) {\n        if ($path_len ==\
  \ $k) {\n            if ($path_sum < $min_path_sum) {\n                $min_path_sum\
  \ = $path_sum;\n                $min_path = [@$path];\n            }\n         \
  \   $path_sum -= $curr_val;\n            $path_len--;\n            $curr_cell =\
  \ pop(@$path);\n            $curr_val = $grid->[$curr_cell->[0]]->[$curr_cell->[1]];\n\
  \            $visited->[$curr_cell->[0]]->[$curr_cell->[1]] = 0;\n            next;\n\
  \        }\n        my $next_cell = nextCell($grid, $visited, $curr_cell);\n   \
  \     if (!defined($next_cell)) {\n            if ($path_len == 0) {\n         \
  \       last;\n            }\n            $path_sum -= $curr_val;\n            $path_len--;\n\
  \            $curr_cell = pop(@$path);\n            $curr_val = $grid->[$curr_cell->[0]]->[$curr_cell->[1]];\n\
  \            $visited->[$curr_cell->[0]]->[$curr_cell->[1]] = 0"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ $grid->[0][0];\n    my $max = $grid->[0][0];\n    for my $i (0..$n-1) {\n    \
  \    for my $j (0..$m-1) {\n            $min = $grid->[$i][$j] if $grid->[$i][$j]\
  \ < $min;\n            $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n     \
  \   }\n    }\n    my $min_path = [];\n    my $min_sum = $max * $k;\n    my $min_sum_path\
  \ = [];\n    my $min_sum_path_set = {};\n    my $min_sum_path_set_size = 0;\n  \
  \  my $min_sum_path_set_size_max = $k * $n * $m;\n    my $min_sum_path_set_size_max_half\
  \ = int($min_sum_path_set_size_max / 2);\n    my $min_sum_path_set_size_max_half_plus_1\
  \ = $min_sum_path_set_size_max_half + 1;\n    my $min_sum_path_set_size_max_minus_1\
  \ = $min_sum_path_set_size_max - 1;\n    my $min_sum_path_set_size_max_minus_2 =\
  \ $min_sum_path_set_size_max - 2;\n    my $min_sum_path_set_size_max_minus_3 = $min_sum_path_set_size_max\
  \ - 3;\n    my $min_sum_path_set_size_max_minus_4 = $min_sum_path_set_size_max -\
  \ 4;\n    my $min_sum_path_set_size_max_minus_5 = $min_sum_path_set_size_max - 5;\n\
  \    my $min_sum_path_set_size_max_minus_6 ="
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
  \ = [];\n    my $min_sum = $n * $n * $k;\n    my $min_path_sum = $min_sum;\n   \
  \ my $min_path_sum_idx = 0;\n    my $min_path_sum_idx_prev = 0;\n    my $min_path_sum_idx_prev_prev\
  \ = 0;\n    my $min_path_sum_idx_prev_prev_prev = 0;\n    my $min_path_sum_idx_prev_prev_prev_prev\
  \ = 0;\n    my $min_path_sum_idx_prev_prev_prev_prev_prev = 0;\n    my $min_path_sum_idx_prev_prev_prev_prev_prev_prev\
  \ = 0;\n    my $min_path_sum_idx_prev_prev_prev_prev_prev_prev_prev = 0;\n    my\
  \ $min_path_sum_idx_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    my $min_path_sum_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev\
  \ = 0;\n    my $min_path_sum_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
  \ = 0;\n    my $min_path_sum_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
  \ = 0;\n    my $min_path_sum_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
  \ = 0;\n    my $min_path_sum_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
  \ = 0;\n    my $min_path_sum_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
  \ = 0;\n    my $min"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath\
  \ = [];\n    my $minSum = $n * $n * $k;\n    my $minPathSum = $minSum;\n    my $minPathSumIndex\
  \ = -1;\n    my $minPathSumIndex2 = -1;\n    my $minPathSumIndex3 = -1;\n    my\
  \ $minPathSumIndex4 = -1;\n    my $minPathSumIndex5 = -1;\n    my $minPathSumIndex6\
  \ = -1;\n    my $minPathSumIndex7 = -1;\n    my $minPathSumIndex8 = -1;\n    my\
  \ $minPathSumIndex9 = -1;\n    my $minPathSumIndex10 = -1;\n    my $minPathSumIndex11\
  \ = -1;\n    my $minPathSumIndex12 = -1;\n    my $minPathSumIndex13 = -1;\n    my\
  \ $minPathSumIndex14 = -1;\n    my $minPathSumIndex15 = -1;\n    my $minPathSumIndex16\
  \ = -1;\n    my $minPathSumIndex17 = -1;\n    my $minPathSumIndex18 = -1;\n    my\
  \ $minPathSumIndex19 = -1;\n    my $minPathSumIndex20 = -1;\n    my $minPathSumIndex21\
  \ = -1;\n    my $minPathSumIndex22 = -1;\n    my $minPathSumIndex23 = -1;\n    my\
  \ $minPathSumIndex24 = -1;\n    my $minPathSumIndex25 = -1;\n    my $minPathSumIndex26\
  \ = -1;\n    my $minPathSumIndex27 = -1;\n    my $minPathSumIndex28 = -1;\n    my\
  \ $minPathSumIndex29 = -1;\n    my $minPathSumIndex30 = -1;\n    my $minPathSumIndex31\
  \ = -1;\n    my $minPathSumIndex32 = -1;\n    my $minPathSumIndex33 = -1;\n    my\
  \ $minPathSumIndex34 = -1;\n    my $"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ [];\n    my $min_sum = $n * $n + 1;\n    my $visited = {};\n    my $dfs;\n   \
  \ $dfs = sub {\n        my($i, $j, $sum, $path) = @_;\n        if ($sum > $min_sum)\
  \ {\n            return;\n        }\n        if ($i < 0 || $i >= $n || $j < 0 ||\
  \ $j >= $m) {\n            return;\n        }\n        if ($visited->{\"$i,$j\"\
  }) {\n            return;\n        }\n        if (scalar(@$path) == $k) {\n    \
  \        if ($sum < $min_sum) {\n                $min_sum = $sum;\n            \
  \    $min = $path;\n            }\n            return;\n        }\n        $visited->{\"\
  $i,$j\"} = 1;\n        push @$path, $grid->[$i][$j];\n        $dfs->($i - 1, $j,\
  \ $sum + $grid->[$i][$j], $path);\n        $dfs->($i + 1, $j, $sum + $grid->[$i][$j],\
  \ $path);\n        $dfs->($i, $j - 1, $sum + $grid->[$i][$j], $path);\n        $dfs->($i,\
  \ $j + 1, $sum + $grid->[$i][$j], $path);\n        pop @$path;\n        $visited->{\"\
  $i,$j\"} = 0;\n    };\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j\
  \ = 0; $j < $m; $j++) {\n            $dfs->($i, $j, 0, []);\n        }\n    }\n\
  \    return $min;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ [];\n    my $visited = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for\
  \ (my $j = 0; $j < $m; $j++) {\n            $visited->[$i][$j] = 0;\n        }\n\
  \    }\n    my $min_sum = $n * $m * $n * $m;\n    my $min_path = [];\n    for (my\
  \ $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n         \
  \   my $path = [];\n            my $sum = 0;\n            $visited->[$i][$j] = 1;\n\
  \            $sum += $grid->[$i][$j];\n            push @$path, $grid->[$i][$j];\n\
  \            dfs($grid, $i, $j, $k - 1, $sum, $path, $visited, $min_sum, $min_path);\n\
  \            $visited->[$i][$j] = 0;\n        }\n    }\n    return $min_path;\n}"
- "    my $n = scalar(@$grid);\n    my @path = ();\n    my $min = $n * $n;\n    my\
  \ $minPath = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0;\
  \ $j < $n; $j++) {\n            my $curr = $grid->[$i][$j];\n            push @path,\
  \ $curr;\n            my $sum = $curr;\n            my $visited = {};\n        \
  \    $visited->{$i}{$j} = 1;\n            my $res = dfs($grid, $i, $j, $sum, $k,\
  \ $visited, \\@path);\n            if ($res->[0] < $min) {\n                $min\
  \ = $res->[0];\n                $minPath = $res->[1];\n            }\n         \
  \   pop @path;\n        }\n    }\n    return $minPath;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n\
  \    my $max = $grid->[$n-1][$m-1];\n    my $minPath = [$min];\n    my $minPaths\
  \ = {};\n    my $paths = {};\n    my $path = [$min];\n    my $paths = {};\n    my\
  \ $minPaths = {};\n    my $minPath = [$min];\n    my $minPaths = {};\n    my $path\
  \ = [$min];\n    my $paths = {};\n    my $minPaths = {};\n    my $minPath = [$min];\n\
  \    my $minPaths = {};\n    my $path = [$min];\n    my $paths = {};\n    my $minPaths\
  \ = {};\n    my $minPath = [$min];\n    my $minPaths = {};\n    my $path = [$min];\n\
  \    my $paths = {};\n    my $minPaths = {};\n    my $minPath = [$min];\n    my\
  \ $minPaths = {};\n    my $path = [$min];\n    my $paths = {};\n    my $minPaths\
  \ = {};\n    my $minPath = [$min];\n    my $minPaths = {};\n    my $path = [$min];\n\
  \    my $paths = {};\n    my $minPaths = {};\n    my $minPath = [$min];\n    my\
  \ $minPaths = {};\n    my $path = [$min];\n    my $paths = {};\n    my $minPaths\
  \ = {};\n    my $minPath = [$min];\n    my $minPaths = {};\n    my $path = [$min];\n\
  \    my $paths = {};\n    my $minPaths = {};\n    my $minPath = [$min];\n    my\
  \ $minPaths = {};\n    my $path = [$min];\n    my $paths = {};\n    my $"
- "    my @res;\n    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n\
  \    my $min_i = 0;\n    my $min_j = 0;\n    for my $i (0..$n-1) {\n        for\
  \ my $j (0..$m-1) {\n            if ($grid->[$i][$j] < $min) {\n               \
  \ $min = $grid->[$i][$j];\n                $min_i = $i;\n                $min_j\
  \ = $j;\n            }\n        }\n    }\n    my $i = $min_i;\n    my $j = $min_j;\n\
  \    for my $t (0..$k-1) {\n        push @res, $grid->[$i][$j];\n        my $min\
  \ = $grid->[$i][$j];\n        my $min_i = $i;\n        my $min_j = $j;\n       \
  \ if ($i > 0 && $grid->[$i-1][$j] < $min) {\n            $min = $grid->[$i-1][$j];\n\
  \            $min_i = $i-1;\n            $min_j = $j;\n        }\n        if ($i\
  \ < $n-1 && $grid->[$i+1][$j] < $min) {\n            $min = $grid->[$i+1][$j];\n\
  \            $min_i = $i+1;\n            $min_j = $j;\n        }\n        if ($j\
  \ > 0 && $grid->[$i][$j-1] < $min) {\n            $min = $grid->[$i][$j-1];\n  \
  \          $min_i = $i;\n            $min_j = $j-1;\n        }\n        if ($j <\
  \ $m-1 && $grid->[$i][$j+1] < $min) {\n            $min = $grid->[$i][$j+1];\n \
  \           $min_i = $i;\n            $min_"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n    for\
  \ (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n     \
  \       $visited->[$i][$j] = 0;\n        }\n    }\n    my $minPath = [];\n    my\
  \ $minSum = $n * $m + 1;\n    for (my $i = 0; $i < $n; $i++) {\n        for (my\
  \ $j = 0; $j < $m; $j++) {\n            my $path = [];\n            my $sum = 0;\n\
  \            $visited->[$i][$j] = 1;\n            dfs($grid, $visited, $i, $j, $k,\
  \ $path, $sum);\n            if ($sum < $minSum) {\n                $minSum = $sum;\n\
  \                $minPath = $path;\n            }\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    return $minPath;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ $grid->[0][0];\n    my $max = $grid->[$n-1][$m-1];\n    my $minPath = [];\n  \
  \  my $minPathVal = $max * $k + 1;\n    my $visited = [];\n    for (my $i = 0; $i\
  \ < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    my $path = [];\n    my $pathVal = 0;\n    my $pathLen\
  \ = 0;\n    my $curr = [0, 0];\n    my $neighbors = [];\n    while (1) {\n     \
  \   if ($pathLen == $k) {\n            if ($pathVal < $minPathVal) {\n         \
  \       $minPathVal = $pathVal;\n                $minPath = $path;\n           \
  \ }\n            $pathLen--;\n            $pathVal -= $grid->[$curr->[0]][$curr->[1]];\n\
  \            $visited->[$curr->[0]][$curr->[1]] = 0;\n            $curr = pop(@$path);\n\
  \            next;\n        }\n        $visited->[$curr->[0]][$curr->[1]] = 1;\n\
  \        $pathVal += $grid->[$curr->[0]][$curr->[1]];\n        $pathLen++;\n   \
  \     push(@$path, $curr);\n        $neighbors = getNeighbors($grid, $curr, $visited);\n\
  \        if (scalar(@$neighbors) == 0) {\n            $pathLen--;\n            $pathVal\
  \ -= $grid->[$curr->[0]][$curr->[1]];\n            $visited->[$curr->[0]][$curr->[1]]\
  \ = 0;\n            $curr = pop(@$"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
  \ = [];\n    my $min_sum = $n * $n * $k;\n    my $visited = [];\n    for my $i (0\
  \ .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i]->[$j]\
  \ = 0;\n        }\n    }\n    my $path = [];\n    my $sum = 0;\n    dfs($grid, $k,\
  \ $n, $m, $min_path, $min_sum, $visited, $path, $sum, 0, 0);\n    return $min_path;\n\
  }"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ [];\n    my $min_sum = $n * $n + 1;\n    my $visited = [];\n    for my $i (0 ..\
  \ $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i]->[$j]\
  \ = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
  \ $m - 1) {\n            my $sum = 0;\n            my $path = [];\n            $visited->[$i]->[$j]\
  \ = 1;\n            dfs($grid, $i, $j, $k, $sum, $path, $visited, $min, $min_sum);\n\
  \            $visited->[$i]->[$j] = 0;\n        }\n    }\n    return $min;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ [];\n    my $min_sum = $n * $n + 1;\n    my $min_path = [];\n    my $visited =\
  \ [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n      \
  \      $visited->[$i]->[$j] = 0;\n        }\n    }\n    for my $i (0 .. $n - 1)\
  \ {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n           \
  \ my $sum = 0;\n            $visited->[$i]->[$j] = 1;\n            dfs($grid, $i,\
  \ $j, $k, $path, $sum, $visited);\n            $visited->[$i]->[$j] = 0;\n     \
  \       if ($sum < $min_sum) {\n                $min_sum = $sum;\n             \
  \   $min_path = $path;\n            }\n        }\n    }\n    return $min_path;\n\
  }"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $visited\
  \ = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m;\
  \ $j++) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $minPath\
  \ = [];\n    my $minSum = $n * $m + 1;\n    for (my $i = 0; $i < $n; $i++) {\n \
  \       for (my $j = 0; $j < $m; $j++) {\n            my $path = [];\n         \
  \   my $sum = 0;\n            $visited->[$i][$j] = 1;\n            dfs($grid, $visited,\
  \ $i, $j, $path, $sum, $k, $minPath, $minSum);\n            $visited->[$i][$j] =\
  \ 0;\n        }\n    }\n    return $minPath;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $visited\
  \ = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m;\
  \ $j++) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $minPath\
  \ = [];\n    my $minSum = $n * $m * $n * $m;\n    my $minPathSum = $minSum;\n  \
  \  my $path = [];\n    my $pathSum = 0;\n    my $pathLen = 0;\n    my $cur = [0,\
  \ 0];\n    my $dirs = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    while (1) {\n   \
  \     if ($pathLen == $k) {\n            if ($pathSum < $minPathSum) {\n       \
  \         $minPathSum = $pathSum;\n                $minPath = [@$path];\n      \
  \      }\n            my $last = pop(@$path);\n            $pathSum -= $last;\n\
  \            $pathLen--;\n            $visited->[$cur->[0]][$cur->[1]] = 0;\n  \
  \          $cur = [$cur->[0] - $dirs->[$last][0], $cur->[1] - $dirs->[$last][1]];\n\
  \        }\n        my $next = -1;\n        for (my $i = 0; $i < 4; $i++) {\n  \
  \          my $x = $cur->[0] + $dirs->[$i][0];\n            my $y = $cur->[1] +\
  \ $dirs->[$i][1];\n            if ($x >= 0 && $x < $n && $y >= 0 && $y < $m && !$visited->[$x][$y])\
  \ {\n                $next = $i;\n                last;\n            }\n       \
  \ }\n        if ($next == -1) {\n            if (scalar(@$path) == 0)"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ $grid->[0][0];\n    my $max = $grid->[0][0];\n    for my $i (0..$n-1) {\n    \
  \    for my $j (0..$m-1) {\n            $min = $grid->[$i][$j] if $grid->[$i][$j]\
  \ < $min;\n            $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n     \
  \   }\n    }\n    my $minPath = [];\n    for my $i (0..$n-1) {\n        for my $j\
  \ (0..$m-1) {\n            if ($grid->[$i][$j] == $min) {\n                my $path\
  \ = dfs($grid, $i, $j, $k, $min, $max);\n                if ($path) {\n        \
  \            $minPath = $path;\n                    last;\n                }\n \
  \           }\n        }\n    }\n    return $minPath;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $visited\
  \ = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    my $minPath = [];\n    my $minSum = $n * $m + 1;\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            my $path\
  \ = [];\n            my $sum = 0;\n            $visited->[$i][$j] = 1;\n       \
  \     push @$path, $grid->[$i][$j];\n            $sum += $grid->[$i][$j];\n    \
  \        my $res = dfs($grid, $visited, $i, $j, $k-1, $path, $sum);\n          \
  \  if ($res->[1] < $minSum) {\n                $minPath = $res->[0];\n         \
  \       $minSum = $res->[1];\n            }\n            $visited->[$i][$j] = 0;\n\
  \        }\n    }\n    return $minPath;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $visited\
  \ = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    my $min = [];\n    for my $i (0..$k-1) {\n       \
  \ $min->[$i] = $grid->[0][0];\n    }\n    dfs($grid, $visited, $min, 0, 0, $k, 0);\n\
  \    return $min;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ [];\n    my $min_sum = $n * $n + 1;\n    my $visited = [];\n    for my $i (0 ..\
  \ $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i]->[$j]\
  \ = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
  \ $m - 1) {\n            my $sum = 0;\n            my $path = [];\n            dfs($grid,\
  \ $i, $j, $k, $sum, $path, $visited, $min, $min_sum);\n        }\n    }\n    return\
  \ $min;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
  \ = [];\n    my $min_sum = $n * $m * $k;\n    my $visited = [];\n    for my $i (0\
  \ .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i]->[$j]\
  \ = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
  \ $m - 1) {\n            $visited->[$i]->[$j] = 1;\n            my $path = [];\n\
  \            my $sum = $grid->[$i]->[$j];\n            push @$path, $grid->[$i]->[$j];\n\
  \            my $res = dfs($grid, $i, $j, $k - 1, $visited, $path, $sum);\n    \
  \        if ($res->[0] < $min_sum) {\n                $min_sum = $res->[0];\n  \
  \              $min_path = $res->[1];\n            }\n            $visited->[$i]->[$j]\
  \ = 0;\n        }\n    }\n    return $min_path;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ [map {[map {[(1e9) x $n] x $m} (0..$k)]} (0..$k)];\n    my $prev = [map {[map\
  \ {[(1e9) x $n] x $m} (0..$k)]} (0..$k)];\n    for my $i (0..$n-1) {\n        for\
  \ my $j (0..$m-1) {\n            $min->[0]->[0]->[$i]->[$j] = $grid->[$i]->[$j];\n\
  \            $prev->[0]->[0]->[$i]->[$j] = -1;\n        }\n    }\n    for my $i\
  \ (0..$n-1) {\n        for my $j (0..$m-1) {\n            for my $p (0..$k-1) {\n\
  \                for my $q (0..$k-1) {\n                    for my $d (0..3) {\n\
  \                        my $x = $i + $dx[$d];\n                        my $y =\
  \ $j + $dy[$d];\n                        if ($x >= 0 && $x < $n && $y >= 0 && $y\
  \ < $m) {\n                            if ($min->[$p]->[$q]->[$x]->[$y] > $min->[$p]->[$q]->[$i]->[$j]\
  \ + $grid->[$x]->[$y]) {\n                                $min->[$p]->[$q]->[$x]->[$y]\
  \ = $min->[$p]->[$q]->[$i]->[$j] + $grid->[$x]->[$y];\n                        \
  \        $prev->[$p]->[$q]->[$x]->[$y] = $d;\n                            }\n  \
  \                      }\n                    }\n                }\n           \
  \ }\n        }\n    }\n"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n    for\
  \ my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    my $minPath = [];\n    my $minSum = $n * $m * $n *\
  \ $m;\n    my $dirs = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    my $dfs = sub {\n\
  \        my($i, $j, $path, $sum) = @_;\n        if (@$path == $k) {\n          \
  \  if ($sum < $minSum) {\n                $minSum = $sum;\n                $minPath\
  \ = $path;\n            }\n            return;\n        }\n        for my $dir (@$dirs)\
  \ {\n            my $x = $i + $dir->[0];\n            my $y = $j + $dir->[1];\n\
  \            if ($x >= 0 && $x < $n && $y >= 0 && $y < $m && !$visited->[$x][$y])\
  \ {\n                $visited->[$x][$y] = 1;\n                push @$path, $grid->[$x][$y];\n\
  \                $dfs->($x, $y, $path, $sum + $grid->[$x][$y]);\n              \
  \  pop @$path;\n                $visited->[$x][$y] = 0;\n            }\n       \
  \ }\n    };\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n        \
  \    $visited->[$i][$j] = 1;\n            $dfs->($i, $j, [$grid->[$i][$j]], $grid->[$i][$j]);\n\
  \            $visited->[$i][$j] = 0;\n        }\n    }\n    return $minPath;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath\
  \ = [];\n    my $minSum = $n * $n + 1;\n    my $minPaths = [];\n    for my $i (0\
  \ .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n\
  \            my $sum = 0;\n            my $paths = [];\n            dfs($grid, $i,\
  \ $j, $k, $path, $sum, $paths);\n            if ($sum < $minSum) {\n           \
  \     $minSum = $sum;\n                $minPath = $path;\n                $minPaths\
  \ = $paths;\n            }\n        }\n    }\n    print \"minPaths: \", Dumper($minPaths);\n\
  \    return $minPath;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n\
  \    my $min_path = [$min];\n    my $min_path_set = {};\n    my $min_path_set->{$min}\
  \ = 1;\n    my $queue = [{path => $min_path, set => $min_path_set, x => 0, y =>\
  \ 0}];\n    while (@$queue) {\n        my $cur = shift @$queue;\n        my $path\
  \ = $cur->{path};\n        my $set = $cur->{set};\n        my $x = $cur->{x};\n\
  \        my $y = $cur->{y};\n        if (@$path == $k) {\n            return $path;\n\
  \        }\n        if ($x > 0) {\n            my $val = $grid->[$x - 1][$y];\n\
  \            if (!exists $set->{$val}) {\n                my $new_path = [@$path,\
  \ $val];\n                my $new_set = {%$set};\n                $new_set->{$val}\
  \ = 1;\n                push @$queue, {path => $new_path, set => $new_set, x =>\
  \ $x - 1, y => $y};\n            }\n        }\n        if ($x < $n - 1) {\n    \
  \        my $val = $grid->[$x + 1][$y];\n            if (!exists $set->{$val}) {\n\
  \                my $new_path = [@$path, $val];\n                my $new_set = {%$set};\n\
  \                $new_set->{$val} = 1;\n                push @$queue, {path => $new_path,\
  \ set => $new_set, x => $x + 1, y => $y};\n            }\n        }\n        if\
  \ ($y > 0) {\n            my $val = $grid->[$x][$y - 1];\n            if (!exists\
  \ $set->{$val}) {\n                my $new_path = [@$path, $val];\n            \
  \    my $"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $dp = [];\n    for my $i\
  \ (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i][$j] = [];\n\
  \            for my $l (0..$k-1) {\n                $dp->[$i][$j][$l] = [];\n  \
  \          }\n        }\n    }\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
  \ {\n            $dp->[$i][$j][0] = [$grid->[$i][$j]];\n        }\n    }\n    for\
  \ my $l (1..$k-1) {\n        for my $i (0..$n-1) {\n            for my $j (0..$m-1)\
  \ {\n                my $min = [];\n                if ($i > 0 && $dp->[$i-1][$j][$l-1]->[0]\
  \ < $min->[0]) {\n                    $min = $dp->[$i-1][$j][$l-1];\n          \
  \      }\n                if ($j > 0 && $dp->[$i][$j-1][$l-1]->[0] < $min->[0])\
  \ {\n                    $min = $dp->[$i][$j-1][$l-1];\n                }\n    \
  \            if ($i < $n-1 && $dp->[$i+1][$j][$l-1]->[0] < $min->[0]) {\n      \
  \              $min = $dp->[$i+1][$j][$l-1];\n                }\n              \
  \  if ($j < $m-1 && $dp->[$i][$j+1][$l-1]->[0] < $min->[0]) {\n                \
  \    $min = $dp->[$i][$j+1][$l-1];\n                }\n                $dp->[$i][$j][$l]\
  \ = [@$min, $grid->[$"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ $grid->[0][0];\n    my $max = $grid->[$n-1][$m-1];\n    my $minPath = [$grid->[0][0]];\n\
  \    my $minPaths = {};\n    for my $i (1 .. $k) {\n        my $newMinPaths = {};\n\
  \        for my $path (keys %$minPaths) {\n            my $last = $minPaths->{$path}->[-1];\n\
  \            for my $j ($last+1 .. $max) {\n                my $newPath = $path\
  \ . \",\" . $j;\n                my $newPathArr = [split(/,/, $newPath)];\n    \
  \            if (scalar(@$newPathArr) == $k) {\n                    if ($newPathArr->[0]\
  \ < $minPath->[0]) {\n                        $minPath = $newPathArr;\n        \
  \            }\n                    next;\n                }\n                if\
  \ ($newPathArr->[0] > $min) {\n                    next;\n                }\n  \
  \              $newMinPaths->{$newPath} = $newPathArr;\n            }\n        }\n\
  \        $minPaths = $newMinPaths;\n    }\n    return $minPath;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n    for\
  \ (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n     \
  \       $visited->[$i][$j] = 0;\n        }\n    }\n    my $minPath = [];\n    my\
  \ $minSum = $n * $m * $n * $m;\n    for (my $i = 0; $i < $n; $i++) {\n        for\
  \ (my $j = 0; $j < $m; $j++) {\n            my $path = [];\n            my $sum\
  \ = 0;\n            $visited->[$i][$j] = 1;\n            push @$path, $grid->[$i][$j];\n\
  \            $sum += $grid->[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $visited,\
  \ $path, $sum, $minPath, $minSum);\n            $visited->[$i][$j] = 0;\n      \
  \  }\n    }\n    return $minPath;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
  \ = [];\n    my $min_sum = $n * $n + 1;\n    my $min_path_sum = $n * $n + 1;\n \
  \   my $min_path_sum_idx = 0;\n    my $min_path_sum_jdx = 0;\n    for my $i (0..$n-1)\
  \ {\n        for my $j (0..$m-1) {\n            my $path = [];\n            my $sum\
  \ = 0;\n            my $path_sum = 0;\n            my $path_sum_idx = 0;\n     \
  \       my $path_sum_jdx = 0;\n            my $visited = [];\n            for my\
  \ $i (0..$n-1) {\n                for my $j (0..$m-1) {\n                    $visited->[$i][$j]\
  \ = 0;\n                }\n            }\n            $visited->[$i][$j] = 1;\n\
  \            push @$path, $grid->[$i][$j];\n            $sum += $grid->[$i][$j];\n\
  \            $path_sum += $grid->[$i][$j];\n            $path_sum_idx = $i;\n  \
  \          $path_sum_jdx = $j;\n            my $path_len = 1;\n            while\
  \ ($path_len < $k) {\n                my $min_path_sum_idx_tmp = $path_sum_idx;\n\
  \                my $min_path_sum_jdx_tmp = $path_sum_jdx;\n                my $min_path_sum_tmp\
  \ = $path_sum;\n                if ($path_sum_idx > 0 && $visited->[$path_sum_idx-1][$path_sum_jdx]\
  \ == 0) {\n                    $path_sum_idx--;\n                    $path_sum +=\
  \ $grid->[$path_sum_idx][$path_sum_jdx];\n                }\n                if\
  \ ($path_sum_idx"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath\
  \ = [];\n    my $minSum = $n * $n + 1;\n    my $minPathSum = $minSum;\n    my $minPathSum2\
  \ = $minSum;\n    my $minPath2 = [];\n    my $minPath3 = [];\n    my $minPathSum3\
  \ = $minSum;\n    my $minPathSum4 = $minSum;\n    my $minPath4 = [];\n    my $minPath5\
  \ = [];\n    my $minPathSum5 = $minSum;\n    my $minPathSum6 = $minSum;\n    my\
  \ $minPath6 = [];\n    my $minPath7 = [];\n    my $minPathSum7 = $minSum;\n    my\
  \ $minPathSum8 = $minSum;\n    my $minPath8 = [];\n    my $minPath9 = [];\n    my\
  \ $minPathSum9 = $minSum;\n    my $minPathSum10 = $minSum;\n    my $minPath10 =\
  \ [];\n    my $minPath11 = [];\n    my $minPathSum11 = $minSum;\n    my $minPathSum12\
  \ = $minSum;\n    my $minPath12 = [];\n    my $minPath13 = [];\n    my $minPathSum13\
  \ = $minSum;\n    my $minPathSum14 = $minSum;\n    my $minPath14 = [];\n    my $minPath15\
  \ = [];\n    my $minPathSum15 = $minSum;\n    my $minPathSum16 = $minSum;\n    my\
  \ $minPath16 = [];\n    my $minPath17 = [];\n    my $minPathSum17 = $minSum;\n \
  \   my $minPathSum18 = $minSum;\n    my $minPath18 = [];\n    my $minPath19 = [];\n\
  \    my $minPathSum19 = $minSum;\n    my $minPathSum20 = $minSum;\n    my $minPath20\
  \ = [];\n    my $minPath21 = [];\n    my $minPathSum21 = $minSum;\n    my $minPath"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            my $val =\
  \ $grid->[$i][$j];\n            my $min = $val;\n            my $path = [[$i, $j]];\n\
  \            if ($i > 0) {\n                my $prev = $dp->[$i-1][$j];\n      \
  \          if ($prev->[0] < $min) {\n                    $min = $prev->[0];\n  \
  \                  $path = $prev->[1];\n                }\n            }\n     \
  \       if ($j > 0) {\n                my $prev = $dp->[$i][$j-1];\n           \
  \     if ($prev->[0] < $min) {\n                    $min = $prev->[0];\n       \
  \             $path = $prev->[1];\n                }\n            }\n          \
  \  push @$path, [$i, $j];\n            $dp->[$i][$j] = [$min, $path];\n        }\n\
  \    }\n    my $path = $dp->[$n-1][$m-1]->[1];\n    my $res = [];\n    for my $i\
  \ (0..$k-1) {\n        my $cell = $path->[$i];\n        push @$res, $grid->[$cell->[0]][$cell->[1]];\n\
  \    }\n    return $res;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ $grid->[0][0];\n    my $max = $grid->[$n-1][$m-1];\n    my $minPath = [$min];\n\
  \    my $minPaths = {};\n    my $minPathsByLen = {};\n    my $minPathsByLenAndVal\
  \ = {};\n    my $minPathsByLenAndValAndFirst = {};\n    my $minPathsByLenAndValAndFirstAndLast\
  \ = {};\n    my $minPathsByLenAndValAndFirstAndLastAndSum = {};\n    my $minPathsByLenAndValAndFirstAndLastAndSumAndMax\
  \ = {};\n    my $minPathsByLenAndValAndFirstAndLastAndSumAndMaxAndMin = {};\n  \
  \  my $minPathsByLenAndValAndFirstAndLastAndSumAndMaxAndMinAndMaxDiff = {};\n  \
  \  my $minPathsByLenAndValAndFirstAndLastAndSumAndMaxAndMinAndMaxDiffAndMaxDiffFromFirst\
  \ = {};\n    my $minPathsByLenAndValAndFirstAndLastAndSumAndMaxAndMinAndMaxDiffAndMaxDiffFromFirstAndMaxDiffFromLast\
  \ = {};\n    my $minPathsByLenAndValAndFirstAndLastAndSumAndMaxAndMinAndMaxDiffAndMaxDiffFromFirstAndMaxDiffFromLastAndMaxDiffFromFirstAndLast\
  \ = {};\n    my $minPathsByLenAndValAndFirstAndLastAndSumAndMaxAndMinAndMaxDiffAndMaxDiffFromFirstAndMaxDiffFromLastAndMaxDiffFromFirstAndLastAndMaxDiffFromFirstAndSecond\
  \ = {};\n    my $minPathsByLenAndValAndFirstAndLastAndSumAndMaxAndMinAndMaxDiffAndMaxDiffFromFirstAndMaxDiffFromLastAndMaxDiffFromFirstAndLastAndMaxDiffFromFirstAndSecondAndMaxDiffFromLastAndSecond\
  \ = {};\n    my $minPathsByLenAndValAndFirstAndLastAndSumAndMaxAndMinAndMaxDiffAndMaxDiffFromFirstAndMaxDiffFromLastAndMaxDiffFromFirstAndLastAndMaxDiffFromFirstAndSecondAndMaxDiff"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $visited\
  \ = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    my $min_sum = $n * $m + 1;\n    for my $i (0..$n-1)\
  \ {\n        for my $j (0..$m-1) {\n            my $sum = 0;\n            my $path\
  \ = [];\n            dfs($grid, $i, $j, $k, $sum, $path, $visited, $min, $min_sum);\n\
  \        }\n    }\n    return $min;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n\
  \    my $max = $grid->[0][0];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
  \ {\n            $min = $grid->[$i][$j] if $grid->[$i][$j] < $min;\n           \
  \ $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n        }\n    }\n    my $min_path\
  \ = [];\n    my $min_sum = $max * $k;\n    my $min_sum_path = [];\n    for my $i\
  \ (0..$n-1) {\n        for my $j (0..$m-1) {\n            my $path = [];\n     \
  \       my $sum = 0;\n            my $sum_path = [];\n            my $visited =\
  \ [];\n            for my $x (0..$n-1) {\n                for my $y (0..$m-1) {\n\
  \                    $visited->[$x][$y] = 0;\n                }\n            }\n\
  \            $visited->[$i][$j] = 1;\n            push @$path, $grid->[$i][$j];\n\
  \            $sum += $grid->[$i][$j];\n            push @$sum_path, $sum;\n    \
  \        dfs($grid, $i, $j, $k, $path, $sum, $sum_path, $visited, $min_path, $min_sum,\
  \ $min_sum_path);\n        }\n    }\n    return $min_path;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = {};\n    my\
  \ $min = [];\n    my $min_sum = $n * $m + 1;\n    my $min_path = [];\n    for my\
  \ $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path =\
  \ [];\n            my $sum = 0;\n            $visited->{$i}->{$j} = 1;\n       \
  \     dfs($grid, $i, $j, $k, $path, $sum, $visited, $min, $min_sum, $min_path);\n\
  \            $visited->{$i}->{$j} = 0;\n        }\n    }\n    return $min_path;\n\
  }"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n\
  \    my $max = $grid->[$n-1][$m-1];\n    my $minPath = [];\n    my $minPaths = [];\n\
  \    my $minPathsLen = [];\n    my $minPathsMap = {};\n    my $minPathsMapLen =\
  \ {};\n    my $minPathsMapKey = {};\n    my $minPathsMapKeyLen = {};\n    my $minPathsMapKeyVal\
  \ = {};\n    my $minPathsMapKeyValLen = {};\n    my $minPathsMapKeyValPath = {};\n\
  \    my $minPathsMapKeyValPathLen = {};\n    my $minPathsMapKeyValPathLenPath =\
  \ {};\n    my $minPathsMapKeyValPathLenPathLen = {};\n    my $minPathsMapKeyValPathLenPathLenPath\
  \ = {};\n    my $minPathsMapKeyValPathLenPathLenPathLen = {};\n    my $minPathsMapKeyValPathLenPathLenPathLenPath\
  \ = {};\n    my $minPathsMapKeyValPathLenPathLenPathLenPathLen = {};\n    my $minPathsMapKeyValPathLenPathLenPathLenPathLenPath\
  \ = {};\n    my $minPathsMapKeyValPathLenPathLenPathLenPathLenPathLen = {};\n  \
  \  my $minPathsMapKeyValPathLenPathLenPathLenPathLenPathLenPath = {};\n    my $minPathsMapKeyValPathLenPathLenPathLenPathLenPathLenPathLen\
  \ = {};\n    my $minPathsMapKeyValPathLenPathLenPathLenPathLenPathLenPathLenPath\
  \ = {};\n    my $minPathsMapKeyValPathLenPathLenPathLenPathLenPathLenPathLenPathLen\
  \ = {};\n    my $minPathsMapKeyValPathLenPathLenPathLenPathLenPathLenPathLenPathLenPath\
  \ = {};\n    my $minPathsMapKeyValPathLenPathLenPathLenPathLenPathLenPathLenPathLenPathLen\
  \ = {};\n    my $minPaths"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i]->[$j]\
  \ = [];\n            for my $l (0..$k-1) {\n                $dp->[$i]->[$j]->[$l]\
  \ = [];\n            }\n        }\n    }\n    for my $i (0..$n-1) {\n        for\
  \ my $j (0..$m-1) {\n            $dp->[$i]->[$j]->[0] = [$grid->[$i]->[$j]];\n \
  \       }\n    }\n    for my $l (1..$k-1) {\n        for my $i (0..$n-1) {\n   \
  \         for my $j (0..$m-1) {\n                my $min = [];\n               \
  \ if ($i > 0) {\n                    if (scalar(@{$dp->[$i-1]->[$j]->[$l-1]}) <\
  \ scalar(@$min) || scalar(@$min) == 0) {\n                        $min = $dp->[$i-1]->[$j]->[$l-1];\n\
  \                    }\n                }\n                if ($i < $n-1) {\n  \
  \                  if (scalar(@{$dp->[$i+1]->[$j]->[$l-1]}) < scalar(@$min) || scalar(@$min)\
  \ == 0) {\n                        $min = $dp->[$i+1]->[$j]->[$l-1];\n         \
  \           }\n                }\n                if ($j > 0) {\n              \
  \      if (scalar(@{$dp->[$i]->[$j-1]->[$l-1]}) < scalar(@$min) || scalar(@$min)\
  \ == 0) {\n                        $min = $dp->[$i]"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n\
  \    my $min_path = [$min];\n    my $visited = {};\n    my $queue = [[0, 0, $min_path]];\n\
  \    while (@$queue) {\n        my $cur = shift @$queue;\n        my ($i, $j, $path)\
  \ = @$cur;\n        if (@$path == $k) {\n            return $path;\n        }\n\
  \        my $key = \"$i,$j\";\n        if (exists $visited->{$key}) {\n        \
  \    next;\n        }\n        $visited->{$key} = 1;\n        if ($i > 0) {\n  \
  \          my $new_path = [@$path, $grid->[$i - 1][$j]];\n            push @$queue,\
  \ [$i - 1, $j, $new_path];\n        }\n        if ($i < $n - 1) {\n            my\
  \ $new_path = [@$path, $grid->[$i + 1][$j]];\n            push @$queue, [$i + 1,\
  \ $j, $new_path];\n        }\n        if ($j > 0) {\n            my $new_path =\
  \ [@$path, $grid->[$i][$j - 1]];\n            push @$queue, [$i, $j - 1, $new_path];\n\
  \        }\n        if ($j < $m - 1) {\n            my $new_path = [@$path, $grid->[$i][$j\
  \ + 1]];\n            push @$queue, [$i, $j + 1, $new_path];\n        }\n    }\n\
  \    return $min_path;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ [map { [map { [$_] } (1..$n*$m)] } (1..$k)];\n    for my $i (0..$n-1) {\n    \
  \    for my $j (0..$m-1) {\n            for my $l (0..$k-1) {\n                my\
  \ $val = $grid->[$i][$j];\n                if ($l == 0) {\n                    $min->[$l][$i][$j]\
  \ = [$val];\n                } else {\n                    my $min_val = $min->[$l-1][$i][$j];\n\
  \                    if ($i > 0) {\n                        my $val_up = $min->[$l-1][$i-1][$j];\n\
  \                        if ($val_up->[0] < $min_val->[0] ||\n                 \
  \           ($val_up->[0] == $min_val->[0] &&\n                             $val_up->[$l-1]\
  \ < $min_val->[$l-1])) {\n                            $min_val = $val_up;\n    \
  \                    }\n                    }\n                    if ($j > 0) {\n\
  \                        my $val_left = $min->[$l-1][$i][$j-1];\n              \
  \          if ($val_left->[0] < $min_val->[0] ||\n                            ($val_left->[0]\
  \ == $min_val->[0] &&\n                             $val_left->[$l-1] < $min_val->[$l-1]))\
  \ {\n                            $min_val = $val_left;\n                       \
  \ }\n                    }\n                    if ($i < $n-1) {\n             \
  \           my $val_down = $min->[$l-1][$i+1][$j];\n                        if ($val_down->[0]\
  \ < $min_val->[0] ||\n                            ($val_down->[0] == $min_val->[0]\
  \ &&\n                             $"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum\
  \ = $n * $m + 1;\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n       \
  \ for my $j (0 .. $m - 1) {\n            $visited->[$i]->[$j] = 0;\n        }\n\
  \    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n     \
  \       my $path = [];\n            my $sum = 0;\n            dfs($grid, $visited,\
  \ $i, $j, $k, $path, $sum);\n            if ($sum < $min_sum) {\n              \
  \  $min_sum = $sum;\n                $min = $path;\n            }\n        }\n \
  \   }\n    return $min;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum\
  \ = $n * $m;\n    my $min_path = [];\n    my $visited = [];\n    for my $i (0 ..\
  \ $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j] =\
  \ 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m\
  \ - 1) {\n            my $sum = $grid->[$i][$j];\n            my $path = [[$i, $j]];\n\
  \            $visited->[$i][$j] = 1;\n            dfs($grid, $i, $j, $k - 1, $sum,\
  \ $path, $visited, $min, $min_sum, $min_path);\n            $visited->[$i][$j] =\
  \ 0;\n        }\n    }\n    return $min_path;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $visited\
  \ = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    my $min_sum = $n * $m + 1;\n    for my $i (0..$n-1)\
  \ {\n        for my $j (0..$m-1) {\n            my $sum = 0;\n            my $path\
  \ = [];\n            dfs($grid, $i, $j, $k, $sum, $path, $visited, $min, $min_sum);\n\
  \        }\n    }\n    return $min;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ [];\n    my $min_sum = $n * $n + 1;\n    my $min_sum_count = 0;\n    my $min_sum_index\
  \ = 0;\n    my $min_sum_index_count = 0;\n    my $min_sum_index_index = 0;\n   \
  \ my $min_sum_index_index_count = 0;\n    my $min_sum_index_index_index = 0;\n \
  \   my $min_sum_index_index_index_count = 0;\n    my $min_sum_index_index_index_index\
  \ = 0;\n    my $min_sum_index_index_index_index_count = 0;\n    my $min_sum_index_index_index_index_index\
  \ = 0;\n    my $min_sum_index_index_index_index_index_count = 0;\n    my $min_sum_index_index_index_index_index_index\
  \ = 0;\n    my $min_sum_index_index_index_index_index_index_count = 0;\n    my $min_sum_index_index_index_index_index_index_index\
  \ = 0;\n    my $min_sum_index_index_index_index_index_index_index_count = 0;\n \
  \   my $min_sum_index_index_index_index_index_index_index_index = 0;\n    my $min_sum_index_index_index_index_index_index_index_index_count\
  \ = 0;\n    my $min_sum_index_index_index_index_index_index_index_index_index =\
  \ 0;\n    my $min_sum_index_index_index_index_index_index_index_index_index_count\
  \ = 0;\n    my $min_sum_index_index_index_index_index_index_index_index_index_index\
  \ = 0;\n    my $min_sum_index_index_index_index_index_index_index_index_index_index_count\
  \ = 0;\n    my $min_"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n\
  \    my $min_path = [$min];\n    my $min_path_len = 1;\n    my $visited = {};\n\
  \    my $queue = [[0, 0, $min_path, $min_path_len]];\n    while (@$queue) {\n  \
  \      my $cur = shift @$queue;\n        my($i, $j, $path, $path_len) = @$cur;\n\
  \        if ($path_len == $k) {\n            if ($path->[-1] < $min) {\n       \
  \         $min = $path->[-1];\n                $min_path = $path;\n            }\n\
  \            next;\n        }\n        for my $d ([-1, 0], [1, 0], [0, -1], [0,\
  \ 1]) {\n            my($di, $dj) = @$d;\n            my $ni = $i + $di;\n     \
  \       my $nj = $j + $dj;\n            if ($ni < 0 || $ni >= $n || $nj < 0 || $nj\
  \ >= $m) {\n                next;\n            }\n            my $key = \"$ni,$nj\"\
  ;\n            if (exists $visited->{$key}) {\n                next;\n         \
  \   }\n            my $new_path = [@$path, $grid->[$ni][$nj]];\n            my $new_path_len\
  \ = $path_len + 1;\n            $visited->{$key} = 1;\n            push @$queue,\
  \ [$ni, $nj, $new_path, $new_path_len];\n        }\n    }\n    return $min_path;\n\
  }"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $visited\
  \ = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m;\
  \ $j++) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $minPath\
  \ = [];\n    for (my $i = 0; $i < $k; $i++) {\n        $minPath->[$i] = -1;\n  \
  \  }\n    my $minSum = $n * $m * $k;\n    my $minPathSum = $minSum;\n    my $minPaths\
  \ = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m;\
  \ $j++) {\n            $visited->[$i][$j] = 1;\n            my $path = [];\n   \
  \         $path->[0] = $grid->[$i][$j];\n            my $pathSum = $grid->[$i][$j];\n\
  \            my $paths = [];\n            $paths->[0] = [$i, $j];\n            my\
  \ $pathLen = 1;\n            my $pathsLen = 1;\n            my $result = dfs($grid,\
  \ $visited, $path, $pathSum, $paths, $pathLen, $pathsLen, $minPath, $minPathSum,\
  \ $minPaths, $k, $n, $m);\n            if ($result == 1) {\n                return\
  \ $minPath;\n            }\n            $visited->[$i][$j] = 0;\n        }\n   \
  \ }\n    return $minPath;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my @dp;\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp[$i][$j]\
  \ = $grid->[$i][$j];\n        }\n    }\n    for my $i (1..$k-1) {\n        for my\
  \ $j (0..$n-1) {\n            for my $l (0..$m-1) {\n                my $min = $dp[$j][$l];\n\
  \                if ($j > 0) {\n                    $min = $dp[$j-1][$l] if $dp[$j-1][$l]\
  \ < $min;\n                }\n                if ($j < $n-1) {\n               \
  \     $min = $dp[$j+1][$l] if $dp[$j+1][$l] < $min;\n                }\n       \
  \         if ($l > 0) {\n                    $min = $dp[$j][$l-1] if $dp[$j][$l-1]\
  \ < $min;\n                }\n                if ($l < $m-1) {\n               \
  \     $min = $dp[$j][$l+1] if $dp[$j][$l+1] < $min;\n                }\n       \
  \         $dp[$j][$l] = $min;\n            }\n        }\n    }\n    my $min = $dp[0][0];\n\
  \    my $x = 0;\n    my $y = 0;\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
  \ {\n            if ($dp[$i][$j] < $min) {\n                $min = $dp[$i][$j];\n\
  \                $x = $i;\n                $y = $j;\n            }\n        }\n\
  \    }\n    my @res;\n    for my $i (0..$k-1) {\n        push @res, $min;\n    \
  \    my $min ="
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $minPath = [];\n    my\
  \ $minSum = $n * $m * $k;\n    my $minPathSum = $minSum;\n    my $minPathSum2 =\
  \ $minSum;\n    my $minPath2 = [];\n    my $minPathSum3 = $minSum;\n    my $minPath3\
  \ = [];\n    my $minPathSum4 = $minSum;\n    my $minPath4 = [];\n    my $minPathSum5\
  \ = $minSum;\n    my $minPath5 = [];\n    my $minPathSum6 = $minSum;\n    my $minPath6\
  \ = [];\n    my $minPathSum7 = $minSum;\n    my $minPath7 = [];\n    my $minPathSum8\
  \ = $minSum;\n    my $minPath8 = [];\n    my $minPathSum9 = $minSum;\n    my $minPath9\
  \ = [];\n    my $minPathSum10 = $minSum;\n    my $minPath10 = [];\n    my $minPathSum11\
  \ = $minSum;\n    my $minPath11 = [];\n    my $minPathSum12 = $minSum;\n    my $minPath12\
  \ = [];\n    my $minPathSum13 = $minSum;\n    my $minPath13 = [];\n    my $minPathSum14\
  \ = $minSum;\n    my $minPath14 = [];\n    my $minPathSum15 = $minSum;\n    my $minPath15\
  \ = [];\n    my $minPathSum16 = $minSum;\n    my $minPath16 = [];\n    my $minPathSum17\
  \ = $minSum;\n    my $minPath17 = [];\n    my $minPathSum18 = $minSum;\n    my $minPath18\
  \ = [];\n    my $minPathSum19 = $minSum;\n    my $minPath19 = [];\n    my $minPathSum20\
  \ = $minSum;\n    my $minPath20 = [];\n    my $minPathSum21 = $minSum;\n    my $minPath21\
  \ = [];\n    my $minPathSum22 = $min"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum\
  \ = $n * $m + 1;\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n       \
  \ for my $j (0 .. $m - 1) {\n            $visited->[$i]->[$j] = 0;\n        }\n\
  \    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n     \
  \       my $cur = [];\n            my $sum = 0;\n            dfs($grid, $i, $j,\
  \ $k, $visited, $cur, $sum);\n            if ($sum < $min_sum) {\n             \
  \   $min_sum = $sum;\n                $min = $cur;\n            }\n        }\n \
  \   }\n    return $min;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i]->[$j]\
  \ = [];\n            for my $l (0..$k-1) {\n                $dp->[$i]->[$j]->[$l]\
  \ = [];\n            }\n        }\n    }\n    for my $i (0..$n-1) {\n        for\
  \ my $j (0..$m-1) {\n            $dp->[$i]->[$j]->[0] = [$grid->[$i]->[$j]];\n \
  \       }\n    }\n    for my $l (1..$k-1) {\n        for my $i (0..$n-1) {\n   \
  \         for my $j (0..$m-1) {\n                my $min = [];\n               \
  \ if ($i > 0) {\n                    if (compare($dp->[$i-1]->[$j]->[$l-1], $min)\
  \ < 0) {\n                        $min = $dp->[$i-1]->[$j]->[$l-1];\n          \
  \          }\n                }\n                if ($i < $n-1) {\n            \
  \        if (compare($dp->[$i+1]->[$j]->[$l-1], $min) < 0) {\n                 \
  \       $min = $dp->[$i+1]->[$j]->[$l-1];\n                    }\n             \
  \   }\n                if ($j > 0) {\n                    if (compare($dp->[$i]->[$j-1]->[$l-1],\
  \ $min) < 0) {\n                        $min = $dp->[$i]->[$j-1]->[$l-1];\n    \
  \                }\n                }\n                if ($j < $m-1) {\n      \
  \              if (compare($dp->[$i]->[$j+1]->["
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $visited\
  \ = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    my $minPath = [];\n    my $minSum = $n * $m * ($n\
  \ * $m + 1) / 2;\n    my $minPathSum = $minSum;\n    my $path = [];\n    my $pathSum\
  \ = 0;\n    my $pathLen = 0;\n    my $minPathLen = $n * $m;\n    my $dirs = [[-1,\
  \ 0], [1, 0], [0, -1], [0, 1]];\n    my $dfs = sub {\n        my($i, $j) = @_;\n\
  \        if ($pathLen == $k) {\n            if ($pathSum < $minPathSum) {\n    \
  \            $minPathSum = $pathSum;\n                $minPath = [@$path];\n   \
  \         }\n            return;\n        }\n        for my $dir (@$dirs) {\n  \
  \          my $x = $i + $dir->[0];\n            my $y = $j + $dir->[1];\n      \
  \      if ($x >= 0 && $x < $n && $y >= 0 && $y < $m && !$visited->[$x][$y]) {\n\
  \                $visited->[$x][$y] = 1;\n                push @$path, $grid->[$x][$y];\n\
  \                $pathSum += $grid->[$x][$y];\n                $pathLen++;\n   \
  \             $dfs->($x, $y);\n                $pathLen--;\n                $pathSum\
  \ -= $grid->[$x][$y];\n                pop @$path;\n                $visited->[$x][$y]\
  \ = 0;\n            }\n        }\n    };\n    for my $i (0..$n-1) {\n        for\
  \ my $j (0..$m-1"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum\
  \ = $n * $m + 1;\n    my $visited = {};\n    my $dfs;\n    $dfs = sub {\n      \
  \  my($i, $j, $sum, $path) = @_;\n        if ($sum > $min_sum) {\n            return;\n\
  \        }\n        if ($sum == $min_sum && $path gt $min) {\n            return;\n\
  \        }\n        if ($k == 0) {\n            $min_sum = $sum;\n            $min\
  \ = $path;\n            return;\n        }\n        if ($i > 0 && !$visited->{\"\
  $i,$j\"}) {\n            $visited->{\"$i,$j\"} = 1;\n            $dfs->($i - 1,\
  \ $j, $sum + $grid->[$i - 1][$j], $path . $grid->[$i - 1][$j]);\n            $visited->{\"\
  $i,$j\"} = 0;\n        }\n        if ($i < $n - 1 && !$visited->{\"$i,$j\"}) {\n\
  \            $visited->{\"$i,$j\"} = 1;\n            $dfs->($i + 1, $j, $sum + $grid->[$i\
  \ + 1][$j], $path . $grid->[$i + 1][$j]);\n            $visited->{\"$i,$j\"} = 0;\n\
  \        }\n        if ($j > 0 && !$visited->{\"$i,$j\"}) {\n            $visited->{\"\
  $i,$j\"} = 1;\n            $dfs->($i, $j - 1, $sum + $grid->[$i][$j - 1], $path\
  \ . $grid->[$i][$j - 1]);\n            $visited->{\"$i,$j\"} = 0;\n        }\n \
  \       if ($j < $m - 1 && !$visited->{\"$i,$j\"}) {\n            $visited->{\"\
  $i,$"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ $grid->[0][0];\n    my $max = $grid->[$n-1][$m-1];\n    my $minPath = [];\n  \
  \  my $minPaths = [];\n    my $minPathsHash = {};\n    my $minPathsHash2 = {};\n\
  \    my $minPathsHash3 = {};\n    my $minPathsHash4 = {};\n    my $minPathsHash5\
  \ = {};\n    my $minPathsHash6 = {};\n    my $minPathsHash7 = {};\n    my $minPathsHash8\
  \ = {};\n    my $minPathsHash9 = {};\n    my $minPathsHash10 = {};\n    my $minPathsHash11\
  \ = {};\n    my $minPathsHash12 = {};\n    my $minPathsHash13 = {};\n    my $minPathsHash14\
  \ = {};\n    my $minPathsHash15 = {};\n    my $minPathsHash16 = {};\n    my $minPathsHash17\
  \ = {};\n    my $minPathsHash18 = {};\n    my $minPathsHash19 = {};\n    my $minPathsHash20\
  \ = {};\n    my $minPathsHash21 = {};\n    my $minPathsHash22 = {};\n    my $minPathsHash23\
  \ = {};\n    my $minPathsHash24 = {};\n    my $minPathsHash25 = {};\n    my $minPathsHash26\
  \ = {};\n    my $minPathsHash27 = {};\n    my $minPathsHash28 = {};\n    my $minPathsHash29\
  \ = {};\n    my $minPathsHash30 = {};\n    my $minPathsHash31 = {};\n    my $minPathsHash32\
  \ = {};\n    my $minPathsHash33 = {};\n    my $minPathsHash34 = {};\n    my $minPathsHash35\
  \ = {};\n    my $minPathsHash36 = {"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n\
  \    my $max = $grid->[0][0];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
  \ {\n            $min = $grid->[$i][$j] if $grid->[$i][$j] < $min;\n           \
  \ $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n        }\n    }\n    my $res\
  \ = [];\n    my $visited = {};\n    my $dfs;\n    $dfs = sub {\n        my($i, $j,\
  \ $k, $path) = @_;\n        return if $k < 0;\n        return if $i < 0 || $i >=\
  \ $n || $j < 0 || $j >= $m;\n        return if $visited->{\"$i,$j\"};\n        $visited->{\"\
  $i,$j\"} = 1;\n        push @$path, $grid->[$i][$j];\n        if ($k == 0) {\n \
  \           if ($path->[0] < $min) {\n                $min = $path->[0];\n     \
  \           $res = $path;\n            }\n        } else {\n            $dfs->($i+1,\
  \ $j, $k-1, $path);\n            $dfs->($i-1, $j, $k-1, $path);\n            $dfs->($i,\
  \ $j+1, $k-1, $path);\n            $dfs->($i, $j-1, $k-1, $path);\n        }\n \
  \       pop @$path;\n        $visited->{\"$i,$j\"} = 0;\n    };\n    $dfs->(0, 0,\
  \ $k, []);\n    return $res;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $visited\
  \ = {};\n    my $dfs = sub {\n        my($i, $j, $path) = @_;\n        return if\
  \ $i < 0 || $i >= $n || $j < 0 || $j >= $m;\n        return if $visited->{\"$i,$j\"\
  }++;\n        push @$path, $grid->[$i][$j];\n        if (@$path == $k) {\n     \
  \       if (!@$min || $path->[0] < $min->[0]) {\n                $min = $path;\n\
  \            } elsif ($path->[0] == $min->[0]) {\n                for my $i (1..$k-1)\
  \ {\n                    if ($path->[$i] < $min->[$i]) {\n                     \
  \   $min = $path;\n                        last;\n                    } elsif ($path->[$i]\
  \ > $min->[$i]) {\n                        last;\n                    }\n      \
  \          }\n            }\n            return;\n        }\n        $dfs->($i-1,\
  \ $j, [@$path]);\n        $dfs->($i+1, $j, [@$path]);\n        $dfs->($i, $j-1,\
  \ [@$path]);\n        $dfs->($i, $j+1, [@$path]);\n    };\n    for my $i (0..$n-1)\
  \ {\n        for my $j (0..$m-1) {\n            $dfs->($i, $j, []);\n        }\n\
  \    }\n    return $min;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i]->[$j]\
  \ = [];\n            for my $l (0..$k-1) {\n                $dp->[$i]->[$j]->[$l]\
  \ = [];\n            }\n        }\n    }\n    for my $i (0..$n-1) {\n        for\
  \ my $j (0..$m-1) {\n            $dp->[$i]->[$j]->[0] = [$grid->[$i]->[$j]];\n \
  \       }\n    }\n    for my $l (1..$k-1) {\n        for my $i (0..$n-1) {\n   \
  \         for my $j (0..$m-1) {\n                my $min = [];\n               \
  \ if ($i > 0) {\n                    my $tmp = $dp->[$i-1]->[$j]->[$l-1];\n    \
  \                if (scalar(@$tmp) > 0) {\n                        if (scalar(@$min)\
  \ == 0 || $tmp->[0] < $min->[0]) {\n                            $min = $tmp;\n \
  \                       }\n                    }\n                }\n          \
  \      if ($i < $n-1) {\n                    my $tmp = $dp->[$i+1]->[$j]->[$l-1];\n\
  \                    if (scalar(@$tmp) > 0) {\n                        if (scalar(@$min)\
  \ == 0 || $tmp->[0] < $min->[0]) {\n                            $min = $tmp;\n \
  \                       }\n                    }\n                }\n          \
  \      if ($j > 0) {\n                    my $tmp = $dp->[$i]->[$j-1]->[$l-1];\n\
  \                    if (scalar(@$tmp) > 0) {\n                        if (scalar(@"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
  \ = [];\n    my $min_sum = $n * $n + 1;\n    for my $i (0 .. $n - 1) {\n       \
  \ for my $j (0 .. $m - 1) {\n            my $path = [];\n            my $sum = 0;\n\
  \            my $visited = {};\n            dfs($grid, $i, $j, $k, $path, $sum,\
  \ $visited, $min_path, $min_sum);\n        }\n    }\n    return $min_path;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n\
  \    my $max = $grid->[0][0];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
  \ {\n            $min = $grid->[$i][$j] if $grid->[$i][$j] < $min;\n           \
  \ $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n        }\n    }\n    my $minPath\
  \ = [];\n    my $minPathSum = $max * $k;\n    for my $i (0..$n-1) {\n        for\
  \ my $j (0..$m-1) {\n            my $path = [];\n            my $pathSum = 0;\n\
  \            my $visited = [];\n            for my $i (0..$n-1) {\n            \
  \    for my $j (0..$m-1) {\n                    $visited->[$i][$j] = 0;\n      \
  \          }\n            }\n            $visited->[$i][$j] = 1;\n            dfs($grid,\
  \ $i, $j, $k, $path, $pathSum, $visited, $minPath, $minPathSum);\n        }\n  \
  \  }\n    return $minPath;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [map {[map {[0,\
  \ 0]} (0 .. $m - 1)]} (0 .. $n - 1)];\n    for my $i (0 .. $n - 1) {\n        for\
  \ my $j (0 .. $m - 1) {\n            my $min_val = $grid->[$i][$j];\n          \
  \  my $min_path = [[$i, $j]];\n            if ($i > 0) {\n                if ($min->[$i\
  \ - 1][$j][0] < $min_val) {\n                    $min_val = $min->[$i - 1][$j][0];\n\
  \                    $min_path = $min->[$i - 1][$j][1];\n                }\n   \
  \         }\n            if ($j > 0) {\n                if ($min->[$i][$j - 1][0]\
  \ < $min_val) {\n                    $min_val = $min->[$i][$j - 1][0];\n       \
  \             $min_path = $min->[$i][$j - 1][1];\n                }\n          \
  \  }\n            $min->[$i][$j][0] = $min_val;\n            $min->[$i][$j][1] =\
  \ $min_path;\n        }\n    }\n    my $path = $min->[$n - 1][$m - 1][1];\n    my\
  \ $res = [];\n    for my $p (@$path) {\n        push @$res, $grid->[$p->[0]][$p->[1]];\n\
  \    }\n    return $res;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $dp = [];\n    for my $i\
  \ (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp->[$i][$j] = [];\n\
  \            for my $p (0..$k-1) {\n                $dp->[$i][$j][$p] = [];\n  \
  \              for my $q (0..$k-1) {\n                    $dp->[$i][$j][$p][$q]\
  \ = [];\n                }\n            }\n        }\n    }\n    for my $i (0..$n-1)\
  \ {\n        for my $j (0..$m-1) {\n            for my $p (0..$k-1) {\n        \
  \        for my $q (0..$k-1) {\n                    $dp->[$i][$j][$p][$q][$grid->[$i][$j]]\
  \ = 1;\n                }\n            }\n        }\n    }\n    for my $i (0..$n-1)\
  \ {\n        for my $j (0..$m-1) {\n            for my $p (0..$k-1) {\n        \
  \        for my $q (0..$k-1) {\n                    if($i > 0) {\n             \
  \           for my $v (keys %{$dp->[$i-1][$j][$p][$q]}) {\n                    \
  \        if($v < $grid->[$i][$j]) {\n                                $dp->[$i][$j][$p][$q][$v]\
  \ = 1;\n                            }\n                        }\n             \
  \       }\n                    if($j > 0) {\n                        for my $v (keys\
  \ %{$dp->[$i][$j-1][$p][$q]}) {\n                            if($v < $grid->[$i][$j])\
  \ {\n                                $dp->[$i][$j][$p][$q][$v] = 1;\n          \
  \                  }\n                        }\n                    }\n       \
  \             if($i > 0 && $j"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n\
  \    my $min_path = [$min];\n    my $min_path_len = 1;\n    my $min_path_sum = $min;\n\
  \    my $min_path_sum_len = 1;\n    my $min_path_sum_max = $min;\n    my $min_path_sum_max_len\
  \ = 1;\n    my $min_path_sum_max_min = $min;\n    my $min_path_sum_max_min_len =\
  \ 1;\n    my $min_path_sum_max_min_max = $min;\n    my $min_path_sum_max_min_max_len\
  \ = 1;\n    my $min_path_sum_max_min_max_sum = $min;\n    my $min_path_sum_max_min_max_sum_len\
  \ = 1;\n    my $min_path_sum_max_min_max_sum_max = $min;\n    my $min_path_sum_max_min_max_sum_max_len\
  \ = 1;\n    my $min_path_sum_max_min_max_sum_max_min = $min;\n    my $min_path_sum_max_min_max_sum_max_min_len\
  \ = 1;\n    my $min_path_sum_max_min_max_sum_max_min_max = $min;\n    my $min_path_sum_max_min_max_sum_max_min_max_len\
  \ = 1;\n    my $min_path_sum_max_min_max_sum_max_min_max_sum = $min;\n    my $min_path_sum_max_min_max_sum_max_min_max_sum_len\
  \ = 1;\n    my $min_path_sum_max_min_max_sum_max_min_max_sum_max = $min;\n    my\
  \ $min_path_sum_max_min_max_sum_max_min_max_sum_max_len = 1"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
  \ [];\n    my $min_sum = $n * $n + 1;\n    my $visited = {};\n    my $dfs;\n   \
  \ $dfs = sub {\n        my($i, $j, $sum, $path) = @_;\n        return if $sum >\
  \ $min_sum;\n        if ($sum == $min_sum) {\n            if ($path lt $min) {\n\
  \                $min = $path;\n            }\n            return;\n        }\n\
  \        if ($i < 0 || $i >= $n || $j < 0 || $j >= $m) {\n            return;\n\
  \        }\n        my $key = \"$i,$j\";\n        return if exists $visited->{$key};\n\
  \        $visited->{$key} = 1;\n        $dfs->($i - 1, $j, $sum + $grid->[$i][$j],\
  \ $path . $grid->[$i][$j]);\n        $dfs->($i + 1, $j, $sum + $grid->[$i][$j],\
  \ $path . $grid->[$i][$j]);\n        $dfs->($i, $j - 1, $sum + $grid->[$i][$j],\
  \ $path . $grid->[$i][$j]);\n        $dfs->($i, $j + 1, $sum + $grid->[$i][$j],\
  \ $path . $grid->[$i][$j]);\n        delete $visited->{$key};\n    };\n    for (my\
  \ $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n         \
  \   $dfs->($i, $j, 0, '');\n        }\n    }\n    return [split //, $min];\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $visited\
  \ = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    my $min_path = [];\n    my $min_sum = $n * $m + 1;\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            my $path\
  \ = [];\n            my $sum = 0;\n            dfs($grid, $visited, $i, $j, $k,\
  \ $path, $sum);\n            if ($sum < $min_sum) {\n                $min_sum =\
  \ $sum;\n                $min_path = $path;\n            }\n        }\n    }\n \
  \   return $min_path;\n}"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum\
  \ = $n * $m;\n    my $min_path = [];\n    my $min_path_sum = 0;\n    my $visited\
  \ = {};\n    my $path = [];\n    my $path_sum = 0;\n    my $dfs;\n    $dfs = sub\
  \ {\n        my($i, $j) = @_;\n        if ($visited->{\"$i,$j\"}) {\n          \
  \  return;\n        }\n        $visited->{\"$i,$j\"} = 1;\n        push @$path,\
  \ $grid->[$i][$j];\n        $path_sum += $grid->[$i][$j];\n        if (@$path ==\
  \ $k) {\n            if ($path_sum < $min_sum) {\n                $min_sum = $path_sum;\n\
  \                $min_path = [@$path];\n            }\n            elsif ($path_sum\
  \ == $min_sum) {\n                my $i = 0;\n                while ($i < @$path)\
  \ {\n                    if ($path->[$i] < $min_path->[$i]) {\n                \
  \        $min_path = [@$path];\n                        last;\n                \
  \    }\n                    elsif ($path->[$i] > $min_path->[$i]) {\n          \
  \              last;\n                    }\n                    $i++;\n       \
  \         }\n            }\n        }\n        elsif ($path_sum < $min_sum) {\n\
  \            if ($i > 0) {\n                $dfs->($i - 1, $j);\n            }\n\
  \            if ($i < $n - 1) {\n                $dfs->($i + 1, $j);\n         \
  \   }\n            if ($j > 0) {\n                $dfs->($i, $j - 1);\n        \
  \    }\n            if ($j < $m - 1) {\n                $dfs->($i, $j + 1);\n  \
  \          }\n        }\n        pop @$path;\n        $path_sum -= $grid->["
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $visited\
  \ = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    my $minPath = [];\n    my $minSum = $n * $m + 1;\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
  \ = 1;\n            my $path = [];\n            push @$path, $grid->[$i][$j];\n\
  \            my $sum = $grid->[$i][$j];\n            my $ret = dfs($grid, $i, $j,\
  \ $k, $visited, $path, $sum, $minPath, $minSum);\n            if ($ret == 1) {\n\
  \                return $minPath;\n            }\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    return $minPath;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
  \ = [];\n    my $min_sum = $n * $n + 1;\n    for my $i (0 .. $n - 1) {\n       \
  \ for my $j (0 .. $m - 1) {\n            my $path = [];\n            my $sum = 0;\n\
  \            my $visited = {};\n            $visited->{$i}->{$j} = 1;\n        \
  \    dfs($grid, $i, $j, $k, $path, $sum, $visited, $min_path, $min_sum);\n     \
  \   }\n    }\n    return $min_path;\n}"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath\
  \ = [];\n    my $minSum = $n * $n * $k;\n    my $path = [];\n    my $sum = 0;\n\
  \    my $visited = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m\
  \ - 1) {\n            $visited->[$i]->[$j] = 0;\n        }\n    }\n    dfs($grid,\
  \ $k, 0, 0, $path, $sum, $visited, $minPath, \\$minSum);\n    return $minPath;\n\
  }"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n\
  \    my $max = $grid->[0][0];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
  \ {\n            $min = $grid->[$i][$j] if $grid->[$i][$j] < $min;\n           \
  \ $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n        }\n    }\n    my $minPath\
  \ = [];\n    my $minPathLen = $k + 1;\n    my $minPathSum = $max * $k + 1;\n   \
  \ my $minPathMin = $max + 1;\n    my $minPathMax = $min - 1;\n    my $visited =\
  \ [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
  \ = 0;\n        }\n    }\n    my $path = [];\n    my $pathLen = 0;\n    my $pathSum\
  \ = 0;\n    my $pathMin = $max + 1;\n    my $pathMax = $min - 1;\n    my $stack\
  \ = [];\n    push @$stack, [$grid->[0][0], 0, 0];\n    while (@$stack) {\n     \
  \   my $top = pop @$stack;\n        my $val = $top->[0];\n        my $i = $top->[1];\n\
  \        my $j = $top->[2];\n        if ($visited->[$i][$j]) {\n            $pathLen--;\n\
  \            $pathSum -= $val;\n            $pathMin = $min if $pathMin == $val;\n\
  \            $pathMax = $max if $pathMax == $val;\n            next;\n        }\n\
  \        $visited->[$i][$j] = 1;\n        $pathLen++;\n        $pathSum += $val;\n\
  \        $pathMin = $val"
- "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my @dp;\n\
  \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $dp[$i][$j]\
  \ = [$grid->[$i][$j]];\n        }\n    }\n    for my $i (1..$k-1) {\n        for\
  \ my $j (0..$n-1) {\n            for my $l (0..$m-1) {\n                my @min;\n\
  \                if ($j > 0) {\n                    @min = @{$dp[$j-1][$l]};\n \
  \               }\n                if ($j < $n-1) {\n                    if (!@min\
  \ || $min[$i-1] > $dp[$j+1][$l][$i-1]) {\n                        @min = @{$dp[$j+1][$l]};\n\
  \                    }\n                }\n                if ($l > 0) {\n     \
  \               if (!@min || $min[$i-1] > $dp[$j][$l-1][$i-1]) {\n             \
  \           @min = @{$dp[$j][$l-1]};\n                    }\n                }\n\
  \                if ($l < $m-1) {\n                    if (!@min || $min[$i-1] >\
  \ $dp[$j][$l+1][$i-1]) {\n                        @min = @{$dp[$j][$l+1]};\n   \
  \                 }\n                }\n                $dp[$j][$l] = [@min, $grid->[$j][$l]];\n\
  \            }\n        }\n    }\n    my @min;\n    for my $i (0..$n-1) {\n    \
  \    for my $j (0..$m-1) {\n            if (!@min || $min[$k-1] > $dp[$i][$j][$k-1])\
  \ {\n                @min = @{$dp[$i][$j]};\n            }\n        }"
- "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n    for\
  \ (my $i = 0; $i < $n; $i++) {\n        $visited->[$i] = [];\n        for (my $j\
  \ = 0; $j < $m; $j++) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n\
  \    my $minPath = [];\n    my $minPathSum = $n * $m + 1;\n    my $minPathSum2 =\
  \ $n * $m + 1;\n    my $minPath2 = [];\n    my $dfs = sub {\n        my($i, $j,\
  \ $path, $sum) = @_;\n        if ($sum >= $minPathSum) {\n            return;\n\
  \        }\n        if (@$path == $k) {\n            if ($sum < $minPathSum) {\n\
  \                $minPathSum = $sum;\n                $minPath = $path;\n      \
  \      }\n            return;\n        }\n        if ($i > 0 && !$visited->[$i -\
  \ 1][$j]) {\n            $visited->[$i - 1][$j] = 1;\n            push @$path, $grid->[$i\
  \ - 1][$j];\n            $dfs->($i - 1, $j, $path, $sum + $grid->[$i - 1][$j]);\n\
  \            pop @$path;\n            $visited->[$i - 1][$j] = 0;\n        }\n \
  \       if ($i < $n - 1 && !$visited->[$i + 1][$j]) {\n            $visited->[$i\
  \ + 1][$j] = 1;\n            push @$path, $grid->[$i + 1][$j];\n            $dfs->($i\
  \ + 1, $j, $path, $sum + $grid->[$i + 1][$j]);\n            pop @$path;\n      \
  \      $visited->[$i + 1][$j] = 0;\n        }\n        if ($j > 0 && !$visited->"
language: pl
name: HumanEval_129_minPath
prompt: "# Given a grid with N rows and N columns (N >= 2) and a positive integer\
  \ k, \n# each cell of the grid contains a value. Every integer in the range [1,\
  \ N * N]\n# inclusive appears exactly once on the cells of the grid.\n# You have\
  \ to find the minimum path of length k in the grid. You can start\n# from any cell,\
  \ and in each step you can move to any of the neighbor cells,\n# in other words,\
  \ you can go to cells which share an edge with you current\n# cell.\n# Please note\
  \ that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n\
  # You CANNOT go off the grid.\n# A path A (of length k) is considered less than\
  \ a path B (of length k) if\n# after making the ordered lists of the values on the\
  \ cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A is lexicographically\
  \ less\n# than lst_B, in other words, there exist an integer index i (1 <= i <=\
  \ k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n# lst_A[j]\
  \ = lst_B[j].\n# It is guaranteed that the answer is unique.\n# Return an ordered\
  \ list of the values on the cells that the minimum path go through.\n# Examples:\n\
  # Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n# Output: [1, 2, 1]\n# Input:\
  \ grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n# Output: [1]\nsub minPath {\n   \
  \ my($grid, $k) = @_;\n"
stop_tokens:
- '

  sub'
- '

  #'
- '


  '
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&minPath;\n\
  \        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1, 2,\
  \ 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5,\
  \ 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1])) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3, 4], [5, 6,\
  \ 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[6,\
  \ 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10,\
  \ 1, 10, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3,\
  \ 10, 11, 16]], 5),[1, 7, 1, 7, 1])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([[11, 8, 7, 2], [5, 16, 14, 4],\
  \ [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[12,\
  \ 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1,\
  \ 6, 1, 6, 1, 6, 1, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1,\
  \ 3, 1, 3, 1, 3, 1, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1,\
  \ 5, 1, 5, 1, 5, 1, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([[1, 2], [3, 4]], 10),[1, 2, 1, 2, 1,\
  \ 2, 1, 2, 1, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([[1, 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3,\
  \ 1, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
